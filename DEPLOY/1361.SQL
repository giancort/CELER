--ET-1168

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE [Name] = N'SOURCE_NAME' AND [OBJECT_ID] = OBJECT_ID(N'RESEARCH_RISK_TYPE'))
BEGIN
    ALTER TABLE RESEARCH_RISK_TYPE ADD SOURCE_NAME VARCHAR(10) NULL;
END
GO

IF NOT EXISTS (SELECT 1 FROM RESEARCH_RISK_TYPE WHERE SOURCE_NAME = 'B2e') 
BEGIN
	UPDATE RESEARCH_RISK_TYPE SET SOURCE_NAME = 'B2e' WHERE COD_RESEARCH_RISK_TYPE IN (1,2,3,4,5,6)
END
GO

IF NOT EXISTS (SELECT * FROM RESEARCH_RISK_TYPE WHERE SOURCE_NAME = 'OFAC') BEGIN
	INSERT INTO RESEARCH_RISK_TYPE (CODE, CODE_POLICY, ACTIVE, DOCUMENT_TYPE, SOURCE_NAME) VALUES ('INITIAL', 'Individual', 1, 'CPF',  'OFAC');
	INSERT INTO RESEARCH_RISK_TYPE (CODE, CODE_POLICY, ACTIVE, DOCUMENT_TYPE, SOURCE_NAME) VALUES ('MONTHLY', 'Individual', 1, 'CPF',  'OFAC');
	INSERT INTO RESEARCH_RISK_TYPE (CODE, CODE_POLICY, ACTIVE, DOCUMENT_TYPE, SOURCE_NAME) VALUES ('INITIAL', 'Entity', 1, 'CNPJ', 'OFAC');
	INSERT INTO RESEARCH_RISK_TYPE (CODE, CODE_POLICY, ACTIVE, DOCUMENT_TYPE, SOURCE_NAME) VALUES ('MONTHLY', 'Entity', 1, 'CNPJ', 'OFAC');
END
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE [Name] = N'PATH_FILE_RESPONSE' AND [OBJECT_ID] = OBJECT_ID(N'RESEARCH_RISK_RESPONSE'))
BEGIN
	ALTER TABLE RESEARCH_RISK_RESPONSE ADD PATH_FILE_RESPONSE VARCHAR(500) NULL;
END
GO

IF OBJECT_ID('VW_RISK_ANALYSIS_RESULTS') IS NOT NULL BEGIN
    DROP VIEW VW_RISK_ANALYSIS_RESULTS
END
GO
CREATE VIEW [dbo].[VW_RISK_ANALYSIS_RESULTS]
/*---------------------------------------------------------------------------------------- 
	View Name: [VW_RISK_ANALYSIS_RESULTS]							Project.......: TKPP 
------------------------------------------------------------------------------------------ 
	Author              VERSION        Date         Description 
------------------------------------------------------------------------------------------ 
	Marcus Gall			V1			30/11/2020		Create
------------------------------------------------------------------------------------------*/ 
AS
SELECT       
	COMMERCIAL_ESTABLISHMENT.COD_EC
	, COMMERCIAL_ESTABLISHMENT.TRADING_NAME
	, COMMERCIAL_ESTABLISHMENT.[NAME]
	, COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
	, COMMERCIAL_ESTABLISHMENT.BIRTHDATE
	, SEX_TYPE.[NAME] AS [SEX]
	, RESEARCH_RISK_RESPONSE.STATE_REGISTRATION
	, RESEARCH_RISK_RESPONSE.CNAE
	, RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK
	, RESEARCH_RISK_RESPONSE.BID_ID
	, RESEARCH_RISK_TYPE.CODE_POLICY
	, CASE      
		WHEN RESEARCH_RISK_TYPE.CODE = 'INITIAL' THEN 'Inicial'      
		WHEN RESEARCH_RISK_TYPE.CODE = 'MONTHLY' THEN 'Mensal'      
		WHEN RESEARCH_RISK_TYPE.CODE = 'YEARLY' THEN 'Anual'      
		END AS [TYPE_POLICY]
	, RESEARCH_RISK_RESPONSE.SITUATION_RISK
	, RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION
	, CASE      
		WHEN TRIM(RESEARCH_RISK_RESPONSE_DETAILS.CODE) LIKE 'receita%' THEN 'Receita Federal'      
		ELSE RESEARCH_RISK_RESPONSE_DETAILS.CODE      
		END AS [CODE]      
	, CASE         
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = 'Não Consultado' THEN 'Pendente'      
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'PEP' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'OFAC') THEN 'Negado'      
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'ReceitaFederal' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'receita' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'RECEITA')  THEN 'Aprovado'         
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'PEP' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'OFAC') THEN 'Aprovado'      
		WHEN (RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' OR RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '') AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'ReceitaFederal' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'receita' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'RECEITA') AND (RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = '' OR RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION IS NULL) THEN 'Não consultado'         
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'ReceitaFederal' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'receita' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'RECEITA')  THEN 'Negado'  
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = 'REGULAR' THEN 'Aprovado'   
		ELSE 'Pendente'
		END AS [SITUATION_DESCRIPTION]      
	, RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION      
	, CASE        
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'ReceitaFederal' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'receita' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'RECEITA')  THEN 'Ativa'       
		WHEN (RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' OR RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '') AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'ReceitaFederal' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'receita' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'RECEITA') AND (RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = '' OR RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION IS NULL) THEN 'Não consultado'  
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'ReceitaFederal' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'receita' OR RESEARCH_RISK_RESPONSE_DETAILS.CODE = 'RECEITA')  THEN 'Inativa'        
		WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = 'REGULAR' THEN 'ATIVA'    
		ELSE RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION    
		END AS SITUATION_DESCRIPTION_DETAILS
	, RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC
	, RESEARCH_RISK_RESPONSE.CREATED_AT
	, RESEARCH_RISK.SEND_AT
	, RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE
	, TYPE_PARTNER.[NAME] AS PARTNER_TYPE
	, ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS AS PERCENTAGE_QUOTAS
	, ADITIONAL_DATA_TYPE_EC.[NAME] AS PARTNER_NAME
	, RESEARCH_RISK_TYPE.SOURCE_NAME
	, COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	, RESEARCH_RISK_RESPONSE.PATH_FILE_RESPONSE
FROM RESEARCH_RISK_RESPONSE_DETAILS 
	INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE
	INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK        
	INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE        
	INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = RESEARCH_RISK.COD_EC        
	INNER JOIN SEX_TYPE ON SEX_TYPE.COD_SEX = COMMERCIAL_ESTABLISHMENT.COD_SEX        
	LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_ADT_DATA = RESEARCH_RISK_RESPONSE_DETAILS.COD_PARTNER_EC      
	LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER      
WHERE RESEARCH_RISK_RESPONSE.ACTIVE = 1
GROUP BY      
	COMMERCIAL_ESTABLISHMENT.COD_EC
	, COMMERCIAL_ESTABLISHMENT.TRADING_NAME
	, COMMERCIAL_ESTABLISHMENT.[NAME]
	, COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
	, COMMERCIAL_ESTABLISHMENT.BIRTHDATE
	, SEX_TYPE.[NAME]
	, RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE
	, RESEARCH_RISK_RESPONSE.STATE_REGISTRATION
	, RESEARCH_RISK_RESPONSE.CNAE
	, RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK
	, RESEARCH_RISK_RESPONSE.BID_ID
	, RESEARCH_RISK_TYPE.CODE_POLICY
	, RESEARCH_RISK_TYPE.CODE
	, RESEARCH_RISK_RESPONSE.SITUATION_RISK
	, RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION
	, RESEARCH_RISK_RESPONSE_DETAILS.CODE
	, RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION
	, RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION
	, RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC
	, RESEARCH_RISK_RESPONSE.CREATED_AT
	, RESEARCH_RISK.SEND_AT
	, TYPE_PARTNER.[NAME]
	, ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS
	, ADITIONAL_DATA_TYPE_EC.[NAME]
	, RESEARCH_RISK_TYPE.SOURCE_NAME
	, COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	, RESEARCH_RISK_RESPONSE.PATH_FILE_RESPONSE;
GO

IF OBJECT_ID('SP_REPORT_RISK_ANALYSIS') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_RISK_ANALYSIS
END
GO
CREATE PROCEDURE [dbo].[SP_REPORT_RISK_ANALYSIS]                                          
/*----------------------------------------------------------------------------------------                                                                            
Procedure Name: [SP_REPORT_RISK_ANALYSIS]                                                                            
Project.......: TKPP                                                                            
------------------------------------------------------------------------------------------                                                                            
Author                          VERSION         Date                        Description                                                                            
------------------------------------------------------------------------------------------                                                                            
Marcus Gall                       v1          2020-11-30                      CREATION          
------------------------------------------------------------------------------------------*/  
(                            
	@COD_EC INT = NULL,
	@COD_AFF INT = NULL,
	@TYPE_RESEARCH VARCHAR(20) = NULL
)
AS

DECLARE @QUERY_ NVARCHAR(MAX) = '';

BEGIN
	IF (@COD_EC IS NULL OR @COD_AFF IS NULL)
		SET @QUERY_ = @QUERY_ + ' SELECT TOP 100 '
	ELSE
		SET @QUERY_ = @QUERY_ + ' SELECT '

	SET @QUERY_ = @QUERY_ + ' 
		VW_RISK_ANALYSIS_RESULTS.COD_EC						AS [COD_EC]
		, VW_RISK_ANALYSIS_RESULTS.[NAME]					AS [NAME_EC]
        , VW_RISK_ANALYSIS_RESULTS.COD_RESEARCH_RISK		AS [PROPOSAL_CODE]
        , VW_RISK_ANALYSIS_RESULTS.TRADING_NAME				AS [TRADING_NAME]
        , VW_RISK_ANALYSIS_RESULTS.CPF_CNPJ					AS [IDENTIFICATION]
		, UPPER(VW_RISK_ANALYSIS_RESULTS.TYPE_POLICY)		AS [ANALYSE_PERIOD]
        , VW_RISK_ANALYSIS_RESULTS.SOURCE_NAME				AS [SOURCE_NAME]
        , VW_RISK_ANALYSIS_RESULTS.SEND_AT					AS [SENT_ON]
		, VW_RISK_ANALYSIS_RESULTS.CREATED_AT				AS [ANALYSED_AT]
        , VW_RISK_ANALYSIS_RESULTS.SITUATION_RISK			AS [GENERAL_STATUS]
        , VW_RISK_ANALYSIS_RESULTS.MESSAGE_SITUATION		AS [GENERAL_MESSAGE]
        , VW_RISK_ANALYSIS_RESULTS.CODE						AS [ANALYSE_TYPE]
        , VW_RISK_ANALYSIS_RESULTS.SITUATION_DESCRIPTION	AS [STATUS]
        , VW_RISK_ANALYSIS_RESULTS.CPF_PARTNER_EC			AS [PARTNER_IDENTIFICATION]
		, VW_RISK_ANALYSIS_RESULTS.COD_AFFILIATOR			AS [COD_AFFILIATOR]
		, VW_RISK_ANALYSIS_RESULTS.PATH_FILE_RESPONSE		AS [PATH_FILE_RESPONSE]
	FROM [VW_RISK_ANALYSIS_RESULTS]
	WHERE VW_RISK_ANALYSIS_RESULTS.CPF_PARTNER_EC IS NULL '

	IF (@COD_EC IS NOT NULL)
		SET @QUERY_ = @QUERY_ + ' AND [VW_RISK_ANALYSIS_RESULTS].COD_EC = @COD_EC '
	IF (@COD_AFF IS NOT NULL) 
		SET @QUERY_ = @QUERY_ + ' AND [VW_RISK_ANALYSIS_RESULTS].COD_AFFILIATOR = @COD_AFF '

	SET @QUERY_ = @QUERY_ + ' ORDER BY VW_RISK_ANALYSIS_RESULTS.CREATED_AT DESC, VW_RISK_ANALYSIS_RESULTS.COD_RESEARCH_RISK, VW_RISK_ANALYSIS_RESULTS.CPF_PARTNER_EC, VW_RISK_ANALYSIS_RESULTS.CODE'

	EXEC sp_executesql @QUERY_, N' @COD_AFF INT, @COD_EC INT'
	, @COD_AFF = @COD_AFF, @COD_EC = @COD_EC
END
GO

/*----------------------------
			ET-1182    
------------------------------*/
IF OBJECT_ID('RESEARCH_RISK_DETACHED') IS NOT NULL DROP TABLE RESEARCH_RISK_DETACHED
GO
	CREATE TABLE RESEARCH_RISK_DETACHED (
		COD_RESEARCH_RISK_DETACHED	INT IDENTITY(1,1) NOT NULL,
		COD_USER					INT NULL,
		PATH_FILE_REQUEST			VARCHAR(500),
		PATH_FILE_RESPONSE			VARCHAR(500),
		CREATED_AT					DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
		MODIFY_AT					DATETIME DEFAULT NULL,
		ACTIVE						INT DEFAULT((1)),
		CONSTRAINT [PK_RESEARCH_RISK_DETACHED] PRIMARY KEY CLUSTERED( [COD_RESEARCH_RISK_DETACHED] ASC) WITH (
			STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
		) ON [PRIMARY]
	) ON [PRIMARY]
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Registro de pesquisa avulsa' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RESEARCH_RISK_DETACHED', @level2type=N'COLUMN',@level2name=N'COD_RESEARCH_RISK_DETACHED';
GO

IF OBJECT_ID('SP_REG_RESEARCH_RISK_RESPONSE') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_RESEARCH_RISK_RESPONSE
END
GO
CREATE PROCEDURE [dbo].[SP_REG_RESEARCH_RISK_RESPONSE]        
/*----------------------------------------------------------------------------------------        
 Procedure Name: [SP_REG_RESEARCH_RISK_RESPONSE]     Project.......: TKPP        
------------------------------------------------------------------------------------------        
 Author              Version            Date         Description        
------------------------------------------------------------------------------------------        
 Marcus Gall            V1           05/03/2020        Creation        
 Caike Uchôa            V2           27/05/2020   Add validate by cod_status       
 Caike Uchôa            V3           16/06/2020      ajuste Insert Details    
 Caike Uchôa            V4           30/06/2020          add status 2,3  
 Marcus Gall			V5			 10/12/2020		Monthly Service change OFAC api
------------------------------------------------------------------------------------------*/        
(        
 @COD_RESEARCH_RISK INT        
 , @BID_ID VARCHAR(100) = NULL        
 , @SITUATION_RISK VARCHAR(50) = NULL        
 , @MESSAGE VARCHAR(500) = NULL        
 , @CODE_POLICY VARCHAR(100) = NULL        
 , @CNAE VARCHAR(10) = NULL        
 , @STATE_REGISTRATION VARCHAR(20) = NULL        
 , @CPF_CNPJ VARCHAR(20) = NULL        
 , @NAME VARCHAR(200) = NULL
 , @TEST_LINES INT = 0
 , @PATH_FILE_RESPONSE VARCHAR(500) = NULL
 , @PATH_FILE_RESPONSE_CONSOLIDATED VARCHAR(500) = NULL
 , @LINES_RESEARCH_RISK_DETAILS TP_RESEARCH_RISK_RESPONSE_DETAILS READONLY      
)        
AS        
 DECLARE @COD_RESEARCH_RISK_RESPONSE INT;      
 DECLARE @COD_EC INT;      
 DECLARE @DOCUMENT_TYPE VARCHAR(5);      
 DECLARE @COD_RESEARCH_RISK_TYPE INT;      
 DECLARE @COD_STATUS INT;      
      
BEGIN      
        
	-- BEGIN > REGISTRANDO O RESULTADO DA PESQUISA RECEBIDA        
	IF ( SELECT COUNT(RESEARCH_RISK.COD_RESEARCH_RISK) FROM RESEARCH_RISK WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK) = 0      
		THROW 60001, 'BAD REQUEST, NOT FOUND RESEARCH_RISK REGISTER WITH PARAMETER >> @COD_RESEARCH_RISK', 1;      
      
	SELECT @COD_STATUS = COD_STATUS FROM RESEARCH_RISK WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK      
	-- COD_STATUS = 0 (EC NÃO ENVIADO PARA A B2e - NÃO ENVIADO)  
	-- COD_STATUS = 1 (EC ENVIADO PARA A B2e - ENVIADO)  
	-- COD_STATUS = 3 ( FALHA AO ENVIAR)  

	-- VERIFICANDO SE O RETORNO É DO SERVICO DA OFAC (ENVIADO e RECEBIDO PELA OFAC SINCRONO)
	IF EXISTS (SELECT 1 FROM RESEARCH_RISK INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE      
		WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK AND RESEARCH_RISK.COD_STATUS IN (0, 1) AND RESEARCH_RISK_TYPE.SOURCE_NAME = 'OFAC')
	BEGIN 
		UPDATE RESEARCH_RISK SET MODIFY_AT = current_timestamp, SEND_AT = current_timestamp ,COD_STATUS = 2 WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;
		SET @COD_STATUS = 1;
	END

	IF (@TEST_LINES = 1)
	BEGIN
		SELECT NULL, LINES.[CODE], LINES.[COD_SITUATION], LINES.[SITUATION_DESCRIPTION], EC_PARTNERS.COD_ADT_DATA, LINES.[CPF_PARTNER_EC]
		FROM @LINES_RESEARCH_RISK_DETAILS AS LINES      
		INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK      
		LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;      
  
		SELECT LINES.* FROM @LINES_RESEARCH_RISK_DETAILS AS LINES;
	END

	ELSE IF (@COD_STATUS = 1)
	BEGIN  
		UPDATE RESEARCH_RISK SET MODIFY_AT = current_timestamp, COD_STATUS = 2 WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;      
		IF @@rowcount < 1      
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK', 1;      
      
		UPDATE RESEARCH_RISK_RESPONSE SET ACTIVE = 0 WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;
		
		INSERT INTO RESEARCH_RISK_RESPONSE (COD_RESEARCH_RISK, BID_ID, SITUATION_RISK, MESSAGE_SITUATION, CODE_POLICY, CNAE, STATE_REGISTRATION, CPF_CNPJ, NAME_EC, PATH_FILE_RESPONSE)      
		VALUES (@COD_RESEARCH_RISK, @BID_ID, @SITUATION_RISK, @MESSAGE, @CODE_POLICY, @CNAE, @STATE_REGISTRATION, @CPF_CNPJ, @NAME, @PATH_FILE_RESPONSE);      
		
		SET @COD_RESEARCH_RISK_RESPONSE = @@identity;      
		IF @@rowcount < 1
			THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_RESPONSE', 1;      
      
		INSERT INTO RESEARCH_RISK_RESPONSE_DETAILS (COD_RESEARCH_RISK_RESPONSE, CODE, COD_SITUATION, SITUATION_DESCRIPTION, COD_PARTNER_EC, CPF_PARTNER_EC)      
		SELECT @COD_RESEARCH_RISK_RESPONSE, LINES.[CODE], LINES.[COD_SITUATION], LINES.[SITUATION_DESCRIPTION], EC_PARTNERS.COD_ADT_DATA, LINES.[CPF_PARTNER_EC]
		FROM @LINES_RESEARCH_RISK_DETAILS AS LINES      
		INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK      
		LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;      
		IF @@rowcount < 1      
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK_RESPONSE_DETAILS', 1;      
      
      
		-- BEGIN > AGENDAMENTO DE NOVAS PESQUISAS PROGRAMADAS (MONTHLY, YEARLY)        
		SELECT TOP 1 @COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC, @DOCUMENT_TYPE = COMMERCIAL_ESTABLISHMENT.DOCUMENT_TYPE 
		FROM COMMERCIAL_ESTABLISHMENT 
		INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC      
		WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK;      
      
		-- > YEARLY        
		--IF (SELECT COUNT(RESEARCH_RISK.COD_RESEARCH_RISK) FROM RESEARCH_RISK 
		--INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE 
		--WHERE RESEARCH_RISK_TYPE.CODE = 'YEARLY' AND RESEARCH_RISK.COD_STATUS IN (0, 1) AND RESEARCH_RISK.COD_EC = @COD_EC) = 0      
		--BEGIN      
		--
		--	SET @COD_RESEARCH_RISK_TYPE = (SELECT TOP 1 RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE      
		--	WHERE RESEARCH_RISK_TYPE.CODE = 'YEARLY' AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = @DOCUMENT_TYPE AND RESEARCH_RISK_TYPE.ACTIVE = 1);      
		--
		--	INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (@COD_EC, NULL, @COD_RESEARCH_RISK_TYPE, 0);      
		--END      
      
		SET @COD_RESEARCH_RISK_TYPE = 0;      
        
		-- > MONTHLY        
		IF ( SELECT COUNT(RESEARCH_RISK.COD_RESEARCH_RISK) FROM RESEARCH_RISK      
		INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE      
		WHERE RESEARCH_RISK.COD_EC = @COD_EC AND ((RESEARCH_RISK_TYPE.CODE = 'MONTHLY' AND RESEARCH_RISK.COD_STATUS IN (0, 1)) OR (RESEARCH_RISK_TYPE.CODE = 'YEARLY'      
		AND RESEARCH_RISK.COD_STATUS IN (0, 1) AND DATEADD(YEAR, 1, RESEARCH_RISK.CREATED_AT) < GETDATE()))) = 0      
		BEGIN      
			
			SET @COD_RESEARCH_RISK_TYPE = (SELECT TOP 1 RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE 
			FROM RESEARCH_RISK_TYPE 
			WHERE RESEARCH_RISK_TYPE.CODE = 'MONTHLY' AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = @DOCUMENT_TYPE AND RESEARCH_RISK_TYPE.ACTIVE = 1 AND RESEARCH_RISK_TYPE.SOURCE_NAME = 'OFAC');      
			
			INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (@COD_EC, NULL, @COD_RESEARCH_RISK_TYPE, 0);      
		END      
	END      
	-- COD_STATUS = 2 ( CALLBACK RECEBIDO - RETORNO RECEBIDO)  
	-- COD_STATUS = 4 ( CALLBACK RECEBIDO COM RESALVAS - RECUSADO AUTOMATICAMENTE)   
	ELSE IF (@COD_STATUS IN (2,4))      
	BEGIN      
		UPDATE RESEARCH_RISK SET MODIFY_AT = current_timestamp ,COD_STATUS = 2 WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;      
		IF @@rowcount < 1      
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK', 1;      
  
		UPDATE RESEARCH_RISK_RESPONSE SET ACTIVE = 0 WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;      
		
		INSERT INTO RESEARCH_RISK_RESPONSE (COD_RESEARCH_RISK, BID_ID, SITUATION_RISK, MESSAGE_SITUATION, CODE_POLICY, CNAE, STATE_REGISTRATION, CPF_CNPJ, NAME_EC, PATH_FILE_RESPONSE)      
		VALUES (@COD_RESEARCH_RISK, @BID_ID, @SITUATION_RISK, @MESSAGE, @CODE_POLICY, @CNAE, @STATE_REGISTRATION, @CPF_CNPJ, @NAME, @PATH_FILE_RESPONSE);      
		
		SET @COD_RESEARCH_RISK_RESPONSE = @@identity;      
        
		IF @@rowcount < 1 
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK_RESPONSE', 1;      
      
		INSERT INTO RESEARCH_RISK_RESPONSE_DETAILS (COD_RESEARCH_RISK_RESPONSE, CODE, COD_SITUATION, SITUATION_DESCRIPTION, COD_PARTNER_EC, CPF_PARTNER_EC)      
		SELECT @COD_RESEARCH_RISK_RESPONSE ,LINES.[CODE] ,LINES.[COD_SITUATION] ,LINES.[SITUATION_DESCRIPTION] ,EC_PARTNERS.COD_ADT_DATA ,LINES.[CPF_PARTNER_EC]      
		FROM @LINES_RESEARCH_RISK_DETAILS AS LINES      
		INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK      
		LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;      
		IF @@rowcount < 1      
			THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_RESPONSE_DETAILS', 1;      
    END      

	IF @PATH_FILE_RESPONSE_CONSOLIDATED IS NOT NULL
	BEGIN 
		UPDATE RESEARCH_RISK_DETACHED SET PATH_FILE_RESPONSE = @PATH_FILE_RESPONSE_CONSOLIDATED, MODIFY_AT = dbo.FN_FUS_UTF(current_timestamp) WHERE COD_RESEARCH_RISK_DETACHED = 
		(SELECT TOP 1 RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED FROM RESEARCH_RISK_DETACHED
		INNER JOIN RESEARCH_RISK_DETACHED_LINES ON RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED = RESEARCH_RISK_DETACHED.COD_RESEARCH_RISK_DETACHED
		INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RISK_DETACHED_LINES = RESEARCH_RISK_DETACHED_LINES.COD_RISK_DETACHED_LINES
		WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK)
	END

END
GO

IF EXISTS (SELECT 1 FROM RESEARCH_RISK WHERE COD_RESEARCH_RISK_TYPE IN (SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'YEARLY') AND COD_STATUS = 0)
	DELETE FROM RESEARCH_RISK WHERE COD_RESEARCH_RISK_TYPE IN (SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'YEARLY') AND COD_STATUS = 0;
GO

IF EXISTS (SELECT 1 FROM RESEARCH_RISK WHERE COD_RESEARCH_RISK_TYPE IN 
(SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'MONTHLY' AND DOCUMENT_TYPE = 'CPF' AND SOURCE_NAME = 'B2e'
) AND COD_STATUS = 0)
	UPDATE RESEARCH_RISK SET COD_RESEARCH_RISK_TYPE = (SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'MONTHLY' AND SOURCE_NAME = 'OFAC' AND DOCUMENT_TYPE = 'CPF') 
	WHERE COD_RESEARCH_RISK_TYPE = (SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'MONTHLY' AND SOURCE_NAME = 'B2e' AND DOCUMENT_TYPE = 'CPF')
GO

IF EXISTS (SELECT 1 FROM RESEARCH_RISK WHERE COD_RESEARCH_RISK_TYPE IN 
(SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'MONTHLY' AND DOCUMENT_TYPE = 'CNPJ' AND SOURCE_NAME = 'B2e'
) AND COD_STATUS = 0)
	UPDATE RESEARCH_RISK SET COD_RESEARCH_RISK_TYPE = (SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'MONTHLY' AND SOURCE_NAME = 'OFAC' AND DOCUMENT_TYPE = 'CNPJ') 
	WHERE COD_RESEARCH_RISK_TYPE = (SELECT COD_RESEARCH_RISK_TYPE FROM RESEARCH_RISK_TYPE WHERE CODE = 'MONTHLY' AND SOURCE_NAME = 'B2e' AND DOCUMENT_TYPE = 'CNPJ')
GO

IF OBJECT_ID('SP_LS_EC_RESEARCH_RISK') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LS_EC_RESEARCH_RISK
END
GO             
CREATE PROCEDURE [dbo].[SP_LS_EC_RESEARCH_RISK]          
/*----------------------------------------------------------------------------------------          
    Procedure Name: [SP_FD_LS_RESEARCH_RISK]  Project.......: TKPP          
------------------------------------------------------------------------------------------          
    Author              VERSION        Date         Description          
------------------------------------------------------------------------------------------          
    Marcus Gall         V1          04/03/2020      Creation          
	Marcus Gall			V2			10/12/2020		Add list data 
------------------------------------------------------------------------------------------*/          
(          
    @RESEARCH_RISK_TYPE VARCHAR(20),
	@SOURCE VARCHAR(10),
	@QTD_LINES INT = 0
)          
AS          
          
DECLARE @QUERY_ NVARCHAR(MAX) = '';
          
BEGIN      

	IF (@SOURCE = 'OFAC')
	BEGIN
		SET @QTD_LINES = (SELECT (@QTD_LINES - COUNT(RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE)) FROM RESEARCH_RISK
		INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE
		INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK = RESEARCH_RISK.COD_RESEARCH_RISK
		WHERE RESEARCH_RISK.COD_STATUS > 0
		AND RESEARCH_RISK_RESPONSE.CREATED_AT > Convert(DateTime, DATEDIFF(DAY, 0, GETDATE()))
		AND RESEARCH_RISK_TYPE.SOURCE_NAME = 'OFAC');
	END

	IF (@QTD_LINES > 0)
 		SET @QUERY_ = CONCAT(@QUERY_, ' SELECT TOP ' + CAST(@QTD_LINES AS varchar(10)) +  '');
	ELSE
		SET @QUERY_ = CONCAT(@QUERY_, ' SELECT ');

	SET @QUERY_ = CONCAT(@QUERY_, '          
	 RESEARCH_RISK.COD_RESEARCH_RISK
	, RESEARCH_RISK.CREATED_AT
	, RESEARCH_RISK_TYPE.CODE_POLICY          
	, VW_DATA_RESEARCH_RISK_EC.COD_EC          
	, VW_DATA_RESEARCH_RISK_EC.NAME          
	, VW_DATA_RESEARCH_RISK_EC.DOCUMENT_TYPE          
	, VW_DATA_RESEARCH_RISK_EC.TYPE_ESTAB          
    , COALESCE(RESEARCH_RISK_DETACHED_LINES.[NAME], VW_DATA_RESEARCH_RISK_EC.TRADING_NAME) AS TRADING_NAME
    , COALESCE(RESEARCH_RISK_DETACHED_LINES.[IDENTIFICATION], VW_DATA_RESEARCH_RISK_EC.CPF_CNPJ) AS CPF_CNPJ          
    , VW_DATA_RESEARCH_RISK_EC.DOCUMENT          
    , VW_DATA_RESEARCH_RISK_EC.BIRTHDATE          
	, VW_DATA_RESEARCH_RISK_EC.CEP          
	, VW_DATA_RESEARCH_RISK_EC.STREET          
	, VW_DATA_RESEARCH_RISK_EC.NUMBER          
	, VW_DATA_RESEARCH_RISK_EC.COMPLEMENT          
	, VW_DATA_RESEARCH_RISK_EC.NEIGHBORHOOD          
    , VW_DATA_RESEARCH_RISK_EC.CITY          
    , VW_DATA_RESEARCH_RISK_EC.UF          
	, VW_DATA_RESEARCH_RISK_EC.SEX          
	, VW_DATA_RESEARCH_RISK_EC.TYPE_ADDRESS          
	, VW_DATA_RESEARCH_RISK_EC.DDD          
	, VW_DATA_RESEARCH_RISK_EC.PHONE_NUMBER          
	, VW_DATA_RESEARCH_RISK_EC.TYPE_CONTACT          
	, ADITIONAL_DATA_TYPE_EC.NAME AS PARTNER_NAME, ADITIONAL_DATA_TYPE_EC.CPF PARTNER_CPF, ADITIONAL_DATA_TYPE_EC.BIRTH_DATA AS PARTNER_BIRTHDATE          
	, TYPE_PARTNER.NAME AS PARTNER_TYPE           
	, RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED
	FROM RESEARCH_RISK          
	INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE          
	LEFT JOIN VW_DATA_RESEARCH_RISK_EC ON VW_DATA_RESEARCH_RISK_EC.COD_EC = RESEARCH_RISK.COD_EC          
	LEFT JOIN RESEARCH_RISK_DETACHED_LINES ON RESEARCH_RISK_DETACHED_LINES.COD_RISK_DETACHED_LINES = RESEARCH_RISK.COD_RISK_DETACHED_LINES
	LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_EC = RESEARCH_RISK.COD_EC          
	LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER           
	WHERE RESEARCH_RISK.COD_STATUS = 0 
	AND (RESEARCH_RISK_DETACHED_LINES.[NAME] IS NOT NULL OR VW_DATA_RESEARCH_RISK_EC.TRADING_NAME IS NOT NULL)
	AND RESEARCH_RISK_TYPE.SOURCE_NAME = ''' + @SOURCE + '''
	');

	IF (@SOURCE = 'OFAC')
		SET @QUERY_ = CONCAT(@QUERY_, ' AND (RESEARCH_RISK_TYPE.CODE = ''INITIAL'' OR ( RESEARCH_RISK_TYPE.CODE = ''MONTHLY'' AND DATEADD(MONTH, 1, RESEARCH_RISK.CREATED_AT) < GETDATE() ))
		ORDER BY RESEARCH_RISK_TYPE.CODE, RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED, RESEARCH_RISK.CREATED_AT ');
	ELSE
		SET @QUERY_ = CONCAT(@QUERY_, ' AND RESEARCH_RISK_TYPE.CODE = ''' + @RESEARCH_RISK_TYPE + ''' 
		ORDER BY RESEARCH_RISK.CREATED_AT ');	

	--PRINT @QUERY_;

	EXEC sp_executesql @QUERY_      
    ,N' @RESEARCH_RISK_TYPE VARCHAR(20), @SOURCE VARCHAR(10), @QTD_LINES INT'      
    ,@RESEARCH_RISK_TYPE = @RESEARCH_RISK_TYPE, @SOURCE = @SOURCE, @QTD_LINES = @QTD_LINES;      
END
GO

/*----------------------------
			ET-1183    
------------------------------*/

IF OBJECT_ID('RESEARCH_RISK_DETACHED') IS NOT NULL DROP TABLE RESEARCH_RISK_DETACHED
GO
	CREATE TABLE RESEARCH_RISK_DETACHED (
		COD_RESEARCH_RISK_DETACHED	INT IDENTITY(1,1) NOT NULL,
		COD_USER					INT NULL,
		PATH_FILE_REQUEST			VARCHAR(500),
		PATH_FILE_RESPONSE			VARCHAR(500),
		CREATED_AT					DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
		MODIFY_AT					DATETIME DEFAULT NULL,
		ACTIVE						INT DEFAULT((1)),
		CONSTRAINT [PK_RESEARCH_RISK_DETACHED] PRIMARY KEY CLUSTERED( [COD_RESEARCH_RISK_DETACHED] ASC) WITH (
			STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
		) ON [PRIMARY]
	) ON [PRIMARY]
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Registro de pesquisa avulsa' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RESEARCH_RISK_DETACHED', @level2type=N'COLUMN',@level2name=N'COD_RESEARCH_RISK_DETACHED';
GO

IF OBJECT_ID('RESEARCH_RISK_DETACHED_LINES') IS NOT NULL DROP TABLE RESEARCH_RISK_DETACHED;
GO
	CREATE TABLE RESEARCH_RISK_DETACHED_LINES (
		COD_RISK_DETACHED_LINES		INT IDENTITY(1,1) NOT NULL,
		COD_RESEARCH_RISK_DETACHED	INT NOT NULL,
		[NAME]						VARCHAR(200),
		IDENTIFICATION				VARCHAR(20),
		ACTIVE						INT DEFAULT((1)),
		CONSTRAINT [FK_RESEARCH_RISK_DETACHED] FOREIGN KEY(COD_RESEARCH_RISK_DETACHED) REFERENCES RESEARCH_RISK_DETACHED([COD_RESEARCH_RISK_DETACHED]),
		CONSTRAINT [PK_RISK_DETACHED_LINES] PRIMARY KEY CLUSTERED( [COD_RISK_DETACHED_LINES] ASC) WITH (
			STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
		) ON [PRIMARY]
	) ON [PRIMARY]
	EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Detalhamento de registro de pesquisa avulsa' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RESEARCH_RISK_DETACHED_LINES', @level2type=N'COLUMN',@level2name=N'COD_RISK_DETACHED_LINES';
GO

IF EXISTS (SELECT 1 FROM sys.columns WHERE NAME = N'COD_RESEARCH_RISK_DETACHED' AND object_id = OBJECT_ID(N'RESEARCH_RISK_DETACHED_LINES') AND OBJECT_ID('[FK_RESEARCH_RISK_DETACHED]') IS NULL )
BEGIN
	ALTER TABLE [dbo].[RESEARCH_RISK_DETACHED_LINES] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_DETACHED] FOREIGN KEY([COD_RESEARCH_RISK_DETACHED]) REFERENCES [dbo].[RESEARCH_RISK_DETACHED] ([COD_RESEARCH_RISK_DETACHED])
END
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE [Name] = N'COD_RISK_DETACHED_LINES' AND [OBJECT_ID] = OBJECT_ID(N'RESEARCH_RISK'))
BEGIN
	ALTER TABLE RESEARCH_RISK ADD COD_RISK_DETACHED_LINES INT NULL REFERENCES RESEARCH_RISK_DETACHED_LINES (COD_RISK_DETACHED_LINES);
	ALTER TABLE [dbo].[RESEARCH_RISK] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_DETACHED_LINES] FOREIGN KEY([COD_RISK_DETACHED_LINES]) REFERENCES [dbo].[RESEARCH_RISK_DETACHED_LINES] ([COD_RISK_DETACHED_LINES]);
END
GO

IF TYPE_ID('TP_DATA_RISK_DETACHED') IS NOT NULL BEGIN
	DROP PROCEDURE SP_REG_RESEARCH_RISK_DETACHED;
	DROP TYPE TP_DATA_RISK_DETACHED;
END
GO

CREATE TYPE [dbo].[TP_DATA_RISK_DETACHED] AS TABLE(
	[NAME] [varchar](200) NOT NULL,
	IDENTIFICATION [varchar](20) NULL
)
GO

IF OBJECT_ID('SP_REG_RESEARCH_RISK_DETACHED') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_RESEARCH_RISK_DETACHED
END
GO
CREATE PROCEDURE [dbo].[SP_REG_RESEARCH_RISK_DETACHED]        
/*----------------------------------------------------------------------------------------        
 Procedure Name: [SP_REG_RESEARCH_RISK_DETACHED]     Project.......: TKPP        
------------------------------------------------------------------------------------------        
 Author              Version            Date         Description        
------------------------------------------------------------------------------------------        
 Marcus Gall            V1           16/12/2020        Creation        
------------------------------------------------------------------------------------------*/        
(
	@SOURCE_NAME VARCHAR(10)
	, @ANALYSE_PERIOD VARCHAR(20)
	, @TEST_LINES INT = 0
	, @PATH_FILE_REQUEST VARCHAR(500) NULL
	, @COD_USER INT
	, @LINES_RISK_DETACHED TP_DATA_RISK_DETACHED READONLY      
)        
AS  
	DECLARE @COD_RESEARCH_RISK_DETACHED INT;

BEGIN 
	INSERT INTO RESEARCH_RISK_DETACHED (COD_USER, PATH_FILE_REQUEST, PATH_FILE_RESPONSE, CREATED_AT) VALUES (@COD_USER, @PATH_FILE_REQUEST, NULL, dbo.FN_FUS_UTF(current_timestamp));
	IF @@rowcount < 1      
		THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_DETACHED', 1;
	ELSE
		SELECT @COD_RESEARCH_RISK_DETACHED = @@IDENTITY;

	INSERT INTO RESEARCH_RISK_DETACHED_LINES (COD_RESEARCH_RISK_DETACHED, [NAME], IDENTIFICATION)
	SELECT @COD_RESEARCH_RISK_DETACHED , LINES.[NAME], LINES.IDENTIFICATION FROM @LINES_RISK_DETACHED AS LINES;      
	IF @@rowcount < 1      
		THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_DETACHED_LINES', 1;  

	INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS, COD_RISK_DETACHED_LINES) 
	SELECT COMMERCIAL_ESTABLISHMENT.COD_EC, @COD_USER, COD_RESEARCH_RISK_TYPE, 0, COD_RISK_DETACHED_LINES FROM RESEARCH_RISK_DETACHED_LINES
	LEFT JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = RESEARCH_RISK_DETACHED_LINES.IDENTIFICATION
	INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.CODE = @ANALYSE_PERIOD AND RESEARCH_RISK_TYPE.SOURCE_NAME = @SOURCE_NAME 
		AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = IIF(LEN(RESEARCH_RISK_DETACHED_LINES.IDENTIFICATION) < 14, 'CPF', 'CNPJ')
	WHERE RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED = @COD_RESEARCH_RISK_DETACHED;
	IF @@rowcount < 1      
		THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_DETACHED_LINES', 1;	
END
GO

IF OBJECT_ID('SP_REPORT_RISK_ANALYSIS_OFAC') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_RISK_ANALYSIS_OFAC
END
GO
CREATE PROCEDURE [dbo].[SP_REPORT_RISK_ANALYSIS_OFAC]                                          
/*----------------------------------------------------------------------------------------                                                                            
Procedure Name: [SP_REPORT_RISK_ANALYSIS_OFAC]                                                                            
Project.......: TKPP                                                                            
------------------------------------------------------------------------------------------                                                                            
Author                          VERSION         Date                        Description                                                                            
------------------------------------------------------------------------------------------                                                                            
Marcus Gall                       v1          2020-12-28                      CREATION          
------------------------------------------------------------------------------------------*/  
(                            
	@COD_USER INT = NULL
)
AS

DECLARE @QUERY_ NVARCHAR(MAX) = '';

BEGIN
	SET @QUERY_ = @QUERY_ + ' SELECT TOP 100
		RESEARCH_RISK_DETACHED.COD_RESEARCH_RISK_DETACHED
		, USERS.IDENTIFICATION AS [USERNAME]
		, USERS.COD_USER
		, RESEARCH_RISK_DETACHED.PATH_FILE_REQUEST
		, RESEARCH_RISK_DETACHED.PATH_FILE_RESPONSE
		, RESEARCH_RISK_DETACHED.CREATED_AT
		, CASE      
			WHEN RESEARCH_RISK_DETACHED.PATH_FILE_RESPONSE IS NULL THEN ''NÃO ENVIADO''      
			ELSE ''ANALISADO''
			END AS [STATUS] 
		, RESEARCH_RISK_TYPE.CODE AS [ANALYSE_PERIOD]
		, RESEARCH_RISK_TYPE.SOURCE_NAME
		, RESEARCH_RISK_DETACHED.MODIFY_AT
	FROM RESEARCH_RISK_DETACHED
	LEFT JOIN USERS ON USERS.COD_USER = RESEARCH_RISK_DETACHED.COD_USER
	LEFT JOIN RESEARCH_RISK_DETACHED_LINES ON RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED = RESEARCH_RISK_DETACHED.COD_RESEARCH_RISK_DETACHED
	LEFT JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RISK_DETACHED_LINES = RESEARCH_RISK_DETACHED_LINES.COD_RISK_DETACHED_LINES
	LEFT JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE
	
	GROUP BY RESEARCH_RISK_DETACHED.CREATED_AT, RESEARCH_RISK_DETACHED.COD_RESEARCH_RISK_DETACHED
		, USERS.IDENTIFICATION, RESEARCH_RISK_DETACHED.PATH_FILE_REQUEST, RESEARCH_RISK_DETACHED.PATH_FILE_RESPONSE
		, RESEARCH_RISK_DETACHED.PATH_FILE_RESPONSE, RESEARCH_RISK_TYPE.CODE, RESEARCH_RISK_TYPE.SOURCE_NAME
		, RESEARCH_RISK_DETACHED.MODIFY_AT, USERS.COD_USER 
		ORDER BY RESEARCH_RISK_DETACHED.CREATED_AT DESC'

	EXEC sp_executesql @QUERY_, N' @COD_USER INT'
	, @COD_USER = @COD_USER
END
GO

--ET-1168

GO

--ET-1224

IF OBJECT_ID('SP_GW_LS_ASSEQUIPMENT') IS NOT NULL
    DROP PROCEDURE SP_GW_LS_ASSEQUIPMENT;
GO
CREATE PROCEDURE SP_GW_LS_ASSEQUIPMENT
/******************************************************
--------------------------------------------------------
Procedure Name: SP_GW_LS_ASSEQUIPMENT
Project.....: Notification
------------------------------------------------------------------------------------------                         
Author         VERSION        Date             Description                         
------------------------------------------------------------------------------------------                         
Caio Vitalino    V1         17/12/2020           Creation                         
------------------------------------------------------------------------------------------
*******************************************************/ (@SERIAL VARCHAR(300),
@COD_AFF INT)
AS
BEGIN
SELECT
COMMERCIAL_ESTABLISHMENT.COD_EC AS [COD_EC],
COMMERCIAL_ESTABLISHMENT.[NAME] AS [NAME],
COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS [CPF_CNPJ]
FROM ASS_DEPTO_EQUIP
JOIN EQUIPMENT ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
JOIN DEPARTMENTS_BRANCH ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
JOIN BRANCH_EC ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE EQUIPMENT.SERIAL = @SERIAL AND  AFFILIATOR.COD_AFFILIATOR = @COD_AFF  AND ASS_DEPTO_EQUIP.ACTIVE = 1
END;

--ET-1224

GO

--ET-1252

IF OBJECT_ID('TRANSACTION_AUTH_QUEUE') IS NOT NULL DROP TABLE TRANSACTION_AUTH_QUEUE;
GO
CREATE TABLE TRANSACTION_AUTH_QUEUE
(
    COD_TRAN_AUTH_QUEUE INT PRIMARY KEY IDENTITY,
    TRANSACTION_DATE    DATETIME,
    NSU                 VARCHAR(255),
    AUTH_CODE           VARCHAR(255),
    NSU_EXT             VARCHAR(255),
    AMOUNT              DECIMAL(22, 6),
    TRANSACTION_TYPE    VARCHAR(255),
    BRAND               VARCHAR(255),
    PLOTS               INT,
    PAN                 VARCHAR(255),
    MERCHANT_NAME       VARCHAR(255),
    MERCHANT_DOC        VARCHAR(14),
    COD_EC              INT,
    COD_AFFILIATOR      INT,
    COD_TRAN            INT,
    COD_EQUIP           INT,
    PROCESSED           BIT      DEFAULT 0,
    IN_PROGRESS         BIT      DEFAULT 0,
    CREATED_AT          DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
    FOREIGN KEY (COD_TRAN) REFERENCES [TRANSACTION] (COD_TRAN),
    FOREIGN KEY (COD_EQUIP) REFERENCES [EQUIPMENT] (COD_EQUIP),
    FOREIGN KEY (COD_EC) REFERENCES [COMMERCIAL_ESTABLISHMENT] (COD_EC),
    FOREIGN KEY (COD_AFFILIATOR) REFERENCES [AFFILIATOR] (COD_AFFILIATOR),

)

GO

alter PROCEDURE [dbo].[SP_UP_TRANSACTION]
/*----------------------------------------------------------------------------------------
Procedure Name: [SP_UP_TRANSACTION]
Project.......: TKPP
------------------------------------------------------------------------------------------
Author   Version  Date   Description
------------------------------------------------------------------------------------------
Kennedy Alef V1   27/07/2018  Creation
Lucas Aguiar V2   17-04-2019  rotina de aw. titles e cancelamento
Elir Ribeiro V3   12-08-2019  Changed situation Blocked
Elir Ribeiro V4   20-08-2019  Changed situation AWAITING PAYMENT
Marcus Gall  V5   01-02-2020  Changes CONFIRMED, New CANCELED after RELEASED
Elir Ribeiro v6   27-02-2020  Changes Cod_user
Kennedy Alef v7   11-05-2020  Reprocess financial calendar
Caike Uchôa  v8   13-07-2020  Canceled partial pela Finance calendar
Caike Uchôa  V9   31-07-2020  Add cod_ec transaction_titles
Kennedy Alef V10  07-10-2020  add enqueue finance
Caike uchoa  v11  18/11/2020  alter awaiting payment
------------------------------------------------------------------------------------------*/
(@CODE_TRAN VARCHAR(200),
 @SITUATION VARCHAR(100),
 @DESCRIPTION VARCHAR(200) = NULL,
 @CURRENCY VARCHAR(100),
 @CODE_ERROR VARCHAR(100) = NULL,
 @TRAN_ID INT = NULL,
 @LOGICAL_NUMBER_ACQ VARCHAR(100) = NULL,
 @CARD_HOLDER_NAME VARCHAR(100) = NULL,
 @COD_USER INT = NULL)
AS

DECLARE @QTY INT=0;
DECLARE @CONT INT;
DECLARE @SIT VARCHAR(100);
DECLARE @BRANCH INT;
DECLARE @COD_EC_TITTLE INT;
DECLARE @DATE_TRAN DATE;


DECLARE
    @DATA_TRANSACTION TABLE
                      (
                          TRANSACTION_AMOUNT     DECIMAL(22, 6),
                          COD_TTYPE              INT,
                          BRAND                  VARCHAR(255),
                          PLOTS                  INT,
                          NSU                    VARCHAR(255),
                          PAN                    VARCHAR(255),
                          COD_ASS_DEPTO_TERMINAL INT,
                          TRANSACTION_DATE       DATETIME
                      );


    IF @TRAN_ID IS NULL
        BEGIN
            SELECT @CONT = COD_TRAN
                 , @SIT = SITUATION.[NAME]
                 , @DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
            FROM [TRANSACTION] WITH (NOLOCK)
                     INNER JOIN SITUATION
                                ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
            WHERE CODE = @CODE_TRAN;
        END;
    ELSE
        BEGIN
            SELECT @CONT = COD_TRAN
                 , @SIT = SITUATION.NAME
                 , @DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
            FROM [TRANSACTION] WITH (NOLOCK)
                     INNER JOIN SITUATION
                                ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
            WHERE COD_TRAN = @TRAN_ID;
        END;

    IF @CONT < 1
        OR @CONT IS NULL
        THROW 60002, '601', 1;

UPDATE PROCESS_BG_STATUS
SET STATUS_PROCESSED = 0
  , MODIFY_DATE      = GETDATE()
FROM PROCESS_BG_STATUS WITH (NOLOCK)
WHERE CODE = @CONT
  AND COD_TYPE_PROCESS_BG = 1;

-- @SITUATION CONDITIONALS
    IF @SITUATION = 'APPROVED'
        BEGIN
            INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
            SELECT @CONT
                 , @CODE_TRAN
                 , 1
                 , '100 - APROVADA';

            UPDATE [TRANSACTION]
            SET COD_SITUATION      = 1
              , MODIFY_DATE        = GETDATE()
              , COMMENT            = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '100 - APROVADA')
              , CODE_ERROR         = ISNULL(@CODE_ERROR, 100)
              , COD_CURRRENCY      = (SELECT COD_CURRRENCY
                                      FROM CURRENCY
                                      WHERE NUM = @CURRENCY)
              , LOGICAL_NUMBER_ACQ = @LOGICAL_NUMBER_ACQ
              , CARD_HOLDER_NAME   = @CARD_HOLDER_NAME
            FROM [TRANSACTION] WITH (NOLOCK)
            WHERE [TRANSACTION].COD_TRAN = @CONT;

            IF @@rowcount < 1
                THROW 60002, '002', 1;
        END;
    ELSE
        IF @SITUATION = 'CONFIRMED'
            BEGIN
                IF @SIT = @SITUATION
                    THROW 60002, '603', 1;

                INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                SELECT @CONT
                     , @CODE_TRAN
                     , 3
                     , @DESCRIPTION;

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                UPDATE [TRANSACTION]
                SET COD_SITUATION = 3
                  , MODIFY_DATE   = GETDATE()
                  , CODE_ERROR    = ISNULL(@CODE_ERROR, 200)
                  , COMMENT       = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '200 - CONFIRMADA')

                OUTPUT inserted.AMOUNT,
                       inserted.COD_TTYPE,
                       inserted.BRAND,
                       inserted.PLOTS,
                       inserted.CODE,
                       inserted.PAN,
                       inserted.COD_ASS_DEPTO_TERMINAL,
                       inserted.BRAZILIAN_DATE into @DATA_TRANSACTION (TRANSACTION_AMOUNT, COD_TTYPE,
                                                                       BRAND, PLOTS, NSU, PAN,
                                                                       COD_ASS_DEPTO_TERMINAL, TRANSACTION_DATE)
                FROM [TRANSACTION] WITH (NOLOCK)
                WHERE [TRANSACTION].COD_TRAN = @CONT;

                IF @@rowcount < 1
                    THROW 60002, '002', 1;


                insert into TRANSACTION_AUTH_QUEUE (TRANSACTION_DATE, NSU, AUTH_CODE, NSU_EXT, AMOUNT, TRANSACTION_TYPE,
                                                    BRAND, PLOTS, PAN,
                                                    COD_TRAN, MERCHANT_NAME, MERCHANT_DOC, COD_EC, COD_EQUIP,
                                                    COD_AFFILIATOR)
                SELECT DT.TRANSACTION_DATE,
                       DT.NSU,

                       (SELECT TOP 1 TRANSACTION_DATA_EXT.[VALUE]
                        FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
                        WHERE TRANSACTION_DATA_EXT.COD_TRAN = @CONT
                          AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE'),

                       (select TOP 1 [TRANSACTION_DATA_EXT].[VALUE]
                        from TRANSACTION_DATA_EXT
                        where COD_TRAN = @CONT
                          and [TRANSACTION_DATA_EXT].[NAME] IN ('NSU', 'RCPTTXID', 'AUTO', '0')),

                       DT.TRANSACTION_AMOUNT,
                       TRANSACTION_TYPE.CODE,
                       DT.BRAND,
                       DT.PLOTS,
                       DT.PAN,
                       @CONT,
                       CE.NAME,
                       CE.CPF_CNPJ,
                       CE.COD_EC,
                       ASS_DEPTO_EQUIP.COD_EQUIP,
                       CE.COD_AFFILIATOR
                FROM @DATA_TRANSACTION DT
                         JOIN TRANSACTION_TYPE ON TRANSACTION_TYPE.COD_TTYPE = DT.COD_TTYPE
                         JOIN ASS_DEPTO_EQUIP ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = DT.COD_ASS_DEPTO_TERMINAL
                         JOIN DEPARTMENTS_BRANCH
                              ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
                         JOIN BRANCH_EC ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
                         JOIN COMMERCIAL_ESTABLISHMENT CE on BRANCH_EC.COD_EC = CE.COD_EC

            END;
        ELSE
            IF @SITUATION = 'AWAITING TITLES'
                BEGIN
                    INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                    SELECT @CONT
                         , @CODE_TRAN
                         , 22
                         , '206 - AGUARDANDO TITULOS';

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                    UPDATE [TRANSACTION]
                    SET COD_SITUATION = 22
                      , MODIFY_DATE   = GETDATE()
                      , CODE_ERROR    = 206
                      , COMMENT       = '206 - AGUARDANDO TITULOS'
                    FROM [TRANSACTION] WITH (NOLOCK)
                    WHERE [TRANSACTION].COD_TRAN = @CONT;

                    IF @@rowcount < 1
                        THROW 60002, '002', 1;
                END;
            ELSE
                IF @SITUATION = 'PROCESSING UNDONE'
                    BEGIN
                        --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                        INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                        SELECT @CONT
                             , @CODE_TRAN
                             , 21
                             , '';

                        UPDATE [TRANSACTION]
                        SET COD_SITUATION = 21
                          , MODIFY_DATE   = GETDATE()
                          , COD_CURRRENCY = (SELECT COD_CURRRENCY
                                             FROM CURRENCY
                                             WHERE NUM = @CURRENCY)
                        FROM [TRANSACTION] WITH (NOLOCK)
                        WHERE [TRANSACTION].COD_TRAN = @CONT;

                        IF @@rowcount < 1
                            THROW 60002, '002', 1;
                    END;
                ELSE
                    IF @SITUATION = 'UNDONE FAIL'
                        BEGIN
                            --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                            INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                            SELECT @CONT
                                 , @CODE_TRAN
                                 , 23
                                 , '';

                            UPDATE [TRANSACTION]
                            SET COD_SITUATION = 23
                              , MODIFY_DATE   = GETDATE()
                              , COD_CURRRENCY = (SELECT COD_CURRRENCY
                                                 FROM CURRENCY
                                                 WHERE NUM = @CURRENCY)
                            FROM [TRANSACTION] WITH (NOLOCK)
                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                            IF @@rowcount < 1
                                THROW 60002, '002', 1;
                        END;
                    ELSE
                        IF @SITUATION = 'DENIED ACQUIRER'
                            BEGIN
                                --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                                INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                SELECT @CONT
                                     , @CODE_TRAN
                                     , 2
                                     , '';

                                UPDATE [TRANSACTION]
                                SET COD_SITUATION    = 2
                                  , MODIFY_DATE      = GETDATE()
                                  , COD_CURRRENCY    = (SELECT COD_CURRRENCY
                                                        FROM CURRENCY
                                                        WHERE NUM = @CURRENCY)
                                  , COMMENT          = @DESCRIPTION
                                  , CODE_ERROR       = @CODE_ERROR
                                  , CARD_HOLDER_NAME = @CARD_HOLDER_NAME
                                FROM [TRANSACTION] WITH (NOLOCK)
                                WHERE [TRANSACTION].COD_TRAN = @CONT;

                                IF @@rowcount < 1
                                    THROW 60002, '002', 1;
                            END;
                        ELSE
                            IF @SITUATION = 'BLOCKED'
                                BEGIN
                                    --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                                    INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                    SELECT @CONT
                                         , @CODE_TRAN
                                         , 14
                                         , '';

                                    UPDATE [TRANSACTION]
                                    SET COD_SITUATION = 14
                                      , MODIFY_DATE   = GETDATE()
                                      , COMMENT       = @DESCRIPTION
                                      , CODE_ERROR    = @CODE_ERROR
                                    FROM [TRANSACTION] WITH (NOLOCK)
                                    WHERE [TRANSACTION].COD_TRAN = @CONT;
                                    IF @@rowcount < 1
                                        THROW 60002, '002', 1;

                                    UPDATE TRANSACTION_TITLES
                                    SET TRANSACTION_TITLES.COD_SITUATION = 14
                                      , MODIFY_DATE                      = GETDATE()
                                      , COMMENT                          = @DESCRIPTION
                                      , COD_FIN_CALENDAR                 = NULL
                                    FROM TRANSACTION_TITLES WITH (NOLOCK)
                                             INNER JOIN [TRANSACTION]
                                                        ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                    WHERE [TRANSACTION].COD_TRAN = @CONT;

                                    UPDATE [TRANSACTION_TITLES_COST]
                                    SET COD_SITUATION = 14
                                      , MODIFY_DATE   = GETDATE()
                                      , COMMENT       = @DESCRIPTION
                                    FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                                             INNER JOIN [TRANSACTION_TITLES]
                                                        ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
                                             INNER JOIN [TRANSACTION]
                                                        ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                    WHERE [TRANSACTION].COD_TRAN = @CONT;


--- REPROCESS FINANCIAL CALENDAR

                                    DECLARE _CURSOR CURSOR FOR SELECT DISTINCT COD_EC
                                                               FROM [TRANSACTION_TITLES] WITH (NOLOCK)
                                                               WHERE COD_TRAN = @CONT

                                    OPEN _CURSOR

                                    FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

                                    WHILE @@fetch_status = 0
                                        BEGIN

                                            --EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
                                            INSERT INTO PROCESSING_QUEUE (COD_EC) VALUES (@COD_EC_TITTLE)

                                            FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


                                        END;

                                    CLOSE _CURSOR
                                    DEALLOCATE _CURSOR;

                                END;


                            ELSE
                                IF @SITUATION = 'AWAITING PAYMENT'
                                    BEGIN
                                        --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                                        INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                        SELECT @CONT
                                             , @CODE_TRAN
                                             , 4
                                             , '';

                                        UPDATE [TRANSACTION]
                                        SET COD_SITUATION = 3
                                          , MODIFY_DATE   = GETDATE()
                                          , COMMENT       = @DESCRIPTION
                                          , CODE_ERROR    = @CODE_ERROR
                                        FROM [TRANSACTION] WITH (NOLOCK)
                                        WHERE [TRANSACTION].COD_TRAN = @CONT;

                                        IF @@rowcount < 1
                                            THROW 60002, '002', 1;

                                        --UPDATE TRANSACTION_TITLES
--SET TRANSACTION_TITLES.COD_SITUATION = 4
--   ,MODIFY_DATE = GETDATE()
--   ,COMMENT = @DESCRIPTION
--   ,COD_FIN_CALENDAR = NULL
--FROM TRANSACTION_TITLES WITH (NOLOCK)
--INNER JOIN [TRANSACTION]
-- ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
--WHERE [TRANSACTION].COD_TRAN = @CONT;

                                        EXEC [UP_STATUS_AWAITING_PAYMENT] @COD_TRAN = @CONT,
                                             @DESCRIPTION = @DESCRIPTION;

                                        UPDATE [TRANSACTION_TITLES_COST]
                                        SET COD_SITUATION = 4
                                          , MODIFY_DATE   = GETDATE()
                                          , COMMENT       = @DESCRIPTION
                                        FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                                                 INNER JOIN [TRANSACTION_TITLES]
                                                            ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
                                                 INNER JOIN [TRANSACTION]
                                                            ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                        WHERE [TRANSACTION].COD_TRAN = @CONT;

--- REPROCESS FINANCIAL CALENDAR

                                        DECLARE _CURSOR CURSOR FOR SELECT DISTINCT COD_EC
                                                                   FROM [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                   WHERE COD_TRAN = @CONT

                                        OPEN _CURSOR

                                        FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

                                        WHILE @@fetch_status = 0
                                            BEGIN

                                                --EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
                                                INSERT INTO PROCESSING_QUEUE (COD_EC) VALUES (@COD_EC_TITTLE)


                                                FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


                                            END;

                                        CLOSE _CURSOR
                                        DEALLOCATE _CURSOR

                                    END;
                                ELSE
                                    IF @SITUATION = 'UNDONE'
                                        BEGIN
                                            --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                                            INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                            SELECT @CONT
                                                 , @CODE_TRAN
                                                 , 10
                                                 , '';

                                            UPDATE [TRANSACTION]
                                            SET COD_SITUATION = 10
                                              , MODIFY_DATE   = GETDATE()
                                              , COMMENT       = @DESCRIPTION
                                              , CODE_ERROR    = @CODE_ERROR
                                            FROM [TRANSACTION] WITH (NOLOCK)
                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                            IF @@rowcount < 1
                                                THROW 60002, '002', 1;

                                            UPDATE TRANSACTION_TITLES
                                            SET TRANSACTION_TITLES.COD_SITUATION = 6
                                              , MODIFY_DATE                      = GETDATE()
                                              , COMMENT                          = @DESCRIPTION
                                            FROM TRANSACTION_TITLES WITH (NOLOCK)
                                                     INNER JOIN [TRANSACTION]
                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                            UPDATE [TRANSACTION_TITLES_COST]
                                            SET COD_SITUATION = 6
                                              , MODIFY_DATE   = GETDATE()
                                              , COMMENT       = @DESCRIPTION
                                            FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                                                     INNER JOIN [TRANSACTION_TITLES]
                                                                ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
                                                     INNER JOIN [TRANSACTION]
                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                            WHERE [TRANSACTION].COD_TRAN = @CONT;
                                        END;
                                    ELSE
                                        IF @SITUATION = 'FAILED'
                                            BEGIN
                                                --EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
                                                INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                                SELECT @CONT
                                                     , @CODE_TRAN
                                                     , 7
                                                     , '';

                                                UPDATE [TRANSACTION]
                                                SET COD_SITUATION = 7
                                                  , MODIFY_DATE   = GETDATE()
                                                  , COMMENT       = @DESCRIPTION
                                                  , CODE_ERROR    = ISNULL(@CODE_ERROR, 700)
                                                FROM [TRANSACTION] WITH (NOLOCK)
                                                WHERE [TRANSACTION].COD_TRAN = @CONT

                                                IF @@rowcount < 1
                                                    THROW 60002, '002', 1;
                                            END;
                                        ELSE
                                            IF @SITUATION = 'CANCELED'
                                                BEGIN
                                                    IF @SIT = @SITUATION
                                                        THROW 60002, '703', 1;
                                                    IF @SIT = 'AWAITING TITLES'
                                                        BEGIN
                                                            INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                                            SELECT @CONT
                                                                 , @CODE_TRAN
                                                                 , 6
                                                                 , @DESCRIPTION;

                                                            UPDATE [TRANSACTION]
                                                            SET COD_SITUATION = 6
                                                              , MODIFY_DATE   = GETDATE()
                                                              , COMMENT       = @DESCRIPTION
                                                              , CODE_ERROR    = ISNULL(@CODE_ERROR, 300)
                                                              , COD_USER      = @COD_USER
                                                            FROM [TRANSACTION] WITH (NOLOCK)
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                                            IF @@rowcount < 1
                                                                THROW 60002, '002', 1;

                                                            UPDATE TRANSACTION_TITLES
                                                            SET TRANSACTION_TITLES.COD_SITUATION    = 6
                                                              , MODIFY_DATE                         = GETDATE()
                                                              , COMMENT                             = @DESCRIPTION
                                                              , TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
                                                            FROM TRANSACTION_TITLES WITH (NOLOCK)
                                                                     INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                                            UPDATE [TRANSACTION_TITLES_COST]
                                                            SET COD_SITUATION = 6
                                                              , MODIFY_DATE   = GETDATE()
                                                              , COMMENT       = @DESCRIPTION
                                                            FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                                                                     INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                                ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
                                                                     INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT;
                                                        END;
                                                    ELSE
                                                        BEGIN
                                                            SELECT @QTY = COUNT(*)
                                                            FROM TRANSACTION_TITLES WITH (NOLOCK)
                                                                     INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                                                     LEFT JOIN FINANCE_CALENDAR
                                                                               ON FINANCE_CALENDAR.COD_FIN_CALENDAR =
                                                                                  [TRANSACTION_TITLES].COD_FIN_CALENDAR
                                                                                   AND FINANCE_CALENDAR.ACTIVE = 1
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT
                                                              AND ISNULL(FINANCE_CALENDAR.COD_SITUATION,
                                                                         TRANSACTION_TITLES.COD_SITUATION) NOT IN
                                                                  (4, 20);

                                                            IF @QTY > 0
                                                                THROW 60002, '704', 1;
                                                            INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
                                                            SELECT @CONT
                                                                 , @CODE_TRAN
                                                                 , 6
                                                                 , @DESCRIPTION;

                                                            UPDATE [TRANSACTION]
                                                            SET COD_SITUATION = 6
                                                              , MODIFY_DATE   = GETDATE()
                                                              , COMMENT       = @DESCRIPTION
                                                              , CODE_ERROR    = ISNULL(@CODE_ERROR, 300)
                                                              , COD_USER      = @COD_USER
                                                            FROM [TRANSACTION] WITH (NOLOCK)
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                                            IF @@rowcount < 1
                                                                THROW 60002, '002', 1;

                                                            UPDATE TRANSACTION_TITLES
                                                            SET TRANSACTION_TITLES.COD_SITUATION    = 6
                                                              , MODIFY_DATE                         = GETDATE()
                                                              , COMMENT                             = @DESCRIPTION
                                                              , TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
                                                            FROM TRANSACTION_TITLES WITH (NOLOCK)
                                                                     INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                                            UPDATE [TRANSACTION_TITLES_COST]
                                                            SET COD_SITUATION = 6
                                                              , MODIFY_DATE   = GETDATE()
                                                              , COMMENT       = @DESCRIPTION
                                                            FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                                                                     INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                                ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
                                                                     INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                                ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                                                            WHERE [TRANSACTION].COD_TRAN = @CONT;

                                                            IF @DATE_TRAN = CAST(dbo.FN_FUS_UTF(GETDATE()) AS DATE)
                                                                BEGIN


                                                                    --- REPROCESS FINANCIAL CALENDAR

                                                                    DECLARE _CURSOR CURSOR FOR SELECT DISTINCT COD_EC
                                                                                               FROM [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                                               WHERE COD_TRAN = @CONT

                                                                    OPEN _CURSOR

                                                                    FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

                                                                    WHILE @@fetch_status = 0
                                                                        BEGIN

                                                                            --EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
                                                                            INSERT INTO PROCESSING_QUEUE (COD_EC) VALUES (@COD_EC_TITTLE)


                                                                            FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


                                                                        END;

                                                                    CLOSE _CURSOR
                                                                    DEALLOCATE _CURSOR;

                                                                END;

                                                            INSERT INTO PROCESSING_QUEUE (COD_EC) VALUES (@COD_EC_TITTLE)


                                                        END;

                                                END;
                                            ELSE
                                                IF @SITUATION = 'CANCELED PARTIAL'
                                                    BEGIN
                                                        IF @SIT = 'CANCELED'
                                                            THROW 60002, '703', 1;

                                                        INSERT INTO RELEASE_ADJUSTMENTS (COD_EC, VALUE,
                                                                                         PREVISION_PAY_DATE,
                                                                                         COD_TYPEJUST, COMMENT,
                                                                                         COD_SITUATION, COD_USER,
                                                                                         COD_REQ, COD_BRANCH, COD_TRAN,
                                                                                         COD_TITLE_REF)
                                                        SELECT CAST(TRANSACTION_TITLES.COD_EC AS INT)                               AS COD_EC
                                                             , (CAST(
                                                                        (
                                                                                (
                                                                                        (TRANSACTION_TITLES.AMOUNT *
                                                                                         (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
                                                                                        CASE
                                                                                            WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL
                                                                                                THEN 1
                                                                                            ELSE 1 -
                                                                                                 (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
                                                                                                   COALESCE(CASE
                                                                                                                WHEN TRANSACTION_TITLES.IS_SPOT = 1
                                                                                                                    THEN DATEDIFF(
                                                                                                                        DAY,
                                                                                                                        TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                                                                                        TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
                                                                                                                ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
                                                                                                                END,
                                                                                                            (TRANSACTION_TITLES.PLOT * 30) - 1)
                                                                                                      ) / 100)
                                                                                            END
                                                                                    )
                                                                                - (CASE
                                                                                       WHEN TRANSACTION_TITLES.PLOT = 1
                                                                                           THEN TRANSACTION_TITLES.RATE
                                                                                       ELSE 0
                                                                                END)
                                                                            ) AS DECIMAL(22, 6)) *
                                                                -1)                                                                 AS VALUE
                                                             , [TRANSACTION_TITLES].PREVISION_PAY_DATE                              AS PREVISION_PAY_DATE
                                                             , CAST(2 AS INT)                                                       AS COD_TYPEJUST
                                                             , CAST(
                                                                'CANCELAMENTO PARCIAL, NSU: ' + [TRANSACTION].CODE AS VARCHAR(200)) AS COMMENT
                                                             , CAST(4 AS INT)                                                       AS COD_SITUATION
                                                             , NULL                                                                 AS CODUSER
                                                             , NULL                                                                 AS COD_REQ
                                                             , CAST([COMMERCIAL_ESTABLISHMENT].COD_EC AS INT)                       AS COD_BRANCH
                                                             , CAST([TRANSACTION].COD_TRAN AS INT)                                  AS COD_TRAN
                                                             , CAST([TRANSACTION_TITLES].COD_TITLE AS INT)                          AS COD_TITLE_REF
                                                        FROM [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                 INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                            ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                                                 INNER JOIN [COMMERCIAL_ESTABLISHMENT]
                                                                            ON [COMMERCIAL_ESTABLISHMENT].COD_EC = [TRANSACTION_TITLES].COD_EC
                                                                 LEFT JOIN FINANCE_CALENDAR
                                                                           ON FINANCE_CALENDAR.COD_FIN_CALENDAR =
                                                                              [TRANSACTION_TITLES].COD_FIN_CALENDAR
                                                                               AND FINANCE_CALENDAR.ACTIVE = 1
                                                        WHERE [TRANSACTION].COD_TRAN = @CONT
                                                          AND ISNULL(FINANCE_CALENDAR.COD_SITUATION,
                                                                     TRANSACTION_TITLES.COD_SITUATION) NOT IN (4, 20);

                                                        IF @@rowcount < 1
                                                            THROW 60002, '002', 1;

                                                        UPDATE [TRANSACTION]
                                                        SET COD_SITUATION = 6
                                                          , MODIFY_DATE   = GETDATE()
                                                          , COMMENT       = @DESCRIPTION
                                                          , CODE_ERROR    = ISNULL(@CODE_ERROR, 300)
                                                          , COD_USER      = @COD_USER
                                                        FROM [TRANSACTION] WITH (NOLOCK)
                                                        WHERE [TRANSACTION].COD_TRAN = @CONT;

                                                        IF @@rowcount < 1
                                                            THROW 60002, '002', 1;

                                                        UPDATE [TRANSACTION_TITLES]
                                                        SET TRANSACTION_TITLES.COD_SITUATION    = 6
                                                          , MODIFY_DATE                         = GETDATE()
                                                          , COMMENT                             = @DESCRIPTION
                                                          , TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
                                                        FROM [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                 INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                            ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                                        WHERE [TRANSACTION].COD_TRAN = @CONT
                                                          AND [TRANSACTION_TITLES].COD_SITUATION = 4;

                                                        UPDATE [TRANSACTION_TITLES_COST]
                                                        SET COD_SITUATION = 6
                                                          , MODIFY_DATE   = GETDATE()
                                                          , COMMENT       = @DESCRIPTION
                                                        FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                                                                 INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                            ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
                                                                 INNER JOIN [TRANSACTION] WITH (NOLOCK)
                                                                            ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                                        WHERE [TRANSACTION].COD_TRAN = @CONT
                                                          AND [TRANSACTION_TITLES_COST].COD_SITUATION = 4;


                                                        DECLARE _CURSOR CURSOR FOR SELECT DISTINCT COD_EC
                                                                                   FROM [TRANSACTION_TITLES] WITH (NOLOCK)
                                                                                   WHERE COD_TRAN = @CONT

                                                        OPEN _CURSOR

                                                        FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

                                                        WHILE @@fetch_status = 0
                                                            BEGIN

                                                                --EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
                                                                INSERT INTO PROCESSING_QUEUE (COD_EC) VALUES (@COD_EC_TITTLE)


                                                                FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


                                                            END;

                                                        CLOSE _CURSOR
                                                        DEALLOCATE _CURSOR;


                                                    END;
go


IF OBJECT_ID('SP_LS_TRANSACTION_AUTH') IS NOT NULL DROP PROCEDURE SP_LS_TRANSACTION_AUTH;
GO
create procedure SP_LS_TRANSACTION_AUTH(
    @COD_AFF INT
)
AS
BEGIN

    SELECT COD_TRAN_AUTH_QUEUE,
           TRANSACTION_DATE,
           NSU,
           AMOUNT,
           TRANSACTION_TYPE,
           BRAND,
           PLOTS,
           PAN,
           MERCHANT_NAME,
           MERCHANT_DOC,
           NSU_EXT,
           AUTH_CODE,
           EQUIPMENT.SERIAL
    INTO #temp
    FROM TRANSACTION_AUTH_QUEUE (nolock)
    join EQUIPMENT on EQUIPMENT.COD_EQUIP = TRANSACTION_AUTH_QUEUE.COD_EQUIP
    WHERE PROCESSED = 0
      AND IN_PROGRESS = 0
      AND COD_AFFILIATOR = @COD_AFF;


    UPDATE TRANSACTION_AUTH_QUEUE
    SET IN_PROGRESS = 1
    WHERE COD_TRAN_AUTH_QUEUE IN (SELECT COD_TRAN_AUTH_QUEUE FROM #temp)


    SELECT COD_TRAN_AUTH_QUEUE,
           TRANSACTION_DATE,
           NSU,
           AMOUNT,
           TRANSACTION_TYPE,
           BRAND,
           PLOTS,
           PAN,
           MERCHANT_NAME,
           MERCHANT_DOC,
           NSU_EXT,
           AUTH_CODE,
           SERIAL
    FROM #temp

END
go


IF OBJECT_ID('SP_UP_TRANSACTION_AUTH') IS NOT NULL DROP PROCEDURE SP_UP_TRANSACTION_AUTH;
GO
CREATE PROCEDURE SP_UP_TRANSACTION_AUTH(@TP CODE_TYPE READONLY)
AS
BEGIN

    UPDATE TRANSACTION_AUTH_QUEUE
    SET PROCESSED = 1,
        IN_PROGRESS = 0
    FROM TRANSACTION_AUTH_QUEUE
    WHERE COD_TRAN_AUTH_QUEUE IN (SELECT CODE FROM @TP)
      AND PROCESSED = 0

END

GO

IF OBJECT_ID('SP_UP_TRANSACTION_AUTH_FAIL') IS NOT NULL DROP PROCEDURE SP_UP_TRANSACTION_AUTH_FAIL;
GO
CREATE PROCEDURE SP_UP_TRANSACTION_AUTH_FAIL(@TP CODE_TYPE READONLY)
AS
BEGIN

    UPDATE TRANSACTION_AUTH_QUEUE
    SET PROCESSED = 0, IN_PROGRESS = 0
    FROM TRANSACTION_AUTH_QUEUE
    WHERE COD_TRAN_AUTH_QUEUE IN (SELECT CODE FROM @TP)

END

GO


IF OBJECT_ID('SP_CLEAN_TRANSACTION_AUTH') IS NOT NULL DROP PROCEDURE SP_CLEAN_TRANSACTION_AUTH;
GO
CREATE PROCEDURE SP_CLEAN_TRANSACTION_AUTH
AS
BEGIN

    DELETE FROM TRANSACTION_AUTH_QUEUE WHERE DATEDIFF(day, getdate(), CREATED_AT) < -1

    -- TRANSAÇÕES TRAVADAS EM PROCESSANDO F
    UPDATE TRANSACTION_AUTH_QUEUE
    SET PROCESSED   = 0,
        IN_PROGRESS = 0
    WHERE PROCESSED = 0
      AND IN_PROGRESS = 1
      AND DATEDIFF(HOUR , getdate(), CREATED_AT) < -1
END
GO

IF OBJECT_ID('SP_LS_DATA_COMP_ACCESS_KEYS_EXTERNAL') IS NOT NULL DROP PROCEDURE SP_LS_DATA_COMP_ACCESS_KEYS_EXTERNAL;
GO
CREATE PROCEDURE [DBO].[SP_LS_DATA_COMP_ACCESS_KEYS_EXTERNAL]
/*----------------------------------------------------------------------------------------  
Project.......: TKPP
------------------------------------------------------------------------------------------  
Author                  VERSION        Date                 Description  
------------------------------------------------------------------------------------------  
Kennedy Alef   V1    27/07/2018   Creation  
Luiz Aquino             V2              13/04/2020          Add secondary secret  
------------------------------------------------------------------------------------------*/
AS
BEGIN

    SELECT COMPANY.COD_COMP,
           COMPANY.ACCESS_KEY,
           COMPANY.SECRET_KEY,
           ACCESS_APPAPI.APPNAME,
           ACCESS_APPAPI.CLIENT_ID,
           ACCESS_APPAPI.SECRETKEY [CLIENT_KEY],
           ACCESS_APPAPI.COD_AFFILIATOR
    FROM COMPANY
             INNER JOIN ACCESS_APPAPI ON ACCESS_APPAPI.COD_COMP = COMPANY.COD_COMP
        AND ACTIVE = 1
    GROUP BY COMPANY.COD_COMP,
             COMPANY.ACCESS_KEY,
             COMPANY.SECRET_KEY,
             ACCESS_APPAPI.APPNAME,
             ACCESS_APPAPI.CLIENT_ID,
             ACCESS_APPAPI.SECRETKEY,
             ACCESS_APPAPI.COD_AFFILIATOR;
END;
go


ALTER PROCEDURE [dbo].[SP_WebHook_List](@AppName VARCHAR(64),
                                         @UserName VARCHAR(128) = NULL,
                                         @HookId VARCHAR(128) = NULL)
AS
BEGIN

    SELECT [USERNAME]
         , [ID]
         , [DATA]
    FROM WEBHOOKS
    WHERE APPNAME = @AppName
      AND (@UserName IS NULL
        OR USERNAME = @UserName)
      AND (@HookId IS NULL
        OR ID = @HookId)

END
go
IF OBJECT_ID('SP_WebHook_All_List') IS NOT NULL DROP PROCEDURE SP_WebHook_All_List;
GO
CREATE PROCEDURE [dbo].[SP_WebHook_All_List]
AS
BEGIN

    SELECT [USERNAME]
         , [ID]
         , [DATA]
    FROM WEBHOOKS
END
go

--SD-77

GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'REPORT_EXP_WEBHOOK'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD REPORT_EXP_WEBHOOK INT
END


GO

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP]
GO
   
CREATE PROCEDURE [dbo].[SP_REG_REPORT_TRANSACTIONS_EXP]  
  
/*****************************************************************************************************************                  
----------------------------------------------------------------------------------------                                        
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                                        
 Project.......: TKPP                                        
 ------------------------------------------------------------------------------------------                                        
 Author                          VERSION        Date                            Description                                        
 ------------------------------------------------------------------------------------------                                        
 Fernando Henrique F.             V1       13/12/2018                          Creation                                         
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                                  
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                                
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                              
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE                  
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento                
 Caike Uch�a                      v7       30/04/2020                        insert ec prod                
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess              
 Caike Uch�a                      V9       17/08/2020                        Add SALES_TYPE          
 Luiz Aquino                      v10      01/07/2020                         add PlanDzero      
 Caike Uchoa                      V11      31/08/2020                        Add Cod_ec_prod      
 Caike Uchoa                      v12      28/09/2020                        Add branch business    
 Caike Uchoa                      v10      29/09/2020                        Add NET_VALUE     
 Caike Uchoa                      v14      28/12/2020              Add coluna relatório transações webhook
 ------------------------------------------------------------------------------------------                  
*****************************************************************************************************************/  
  
AS  
BEGIN  
  
 DECLARE @COUNT INT = 0;  
  
  
  
 BEGIN  
  
  ---------------------------------------------                                      
  --------------RECORDS INSERT-----------------                                      
  ---------------------------------------------                                        
  SELECT  
   [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TID]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[Brand]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE]  
     ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROEC  
     ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROAFF  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS_EC]  
     ,CAST(0 AS DECIMAL(22, 6)) AS NET_VALUE INTO #TB_REPORT_TRANSACTIONS_EXP_INSERT  
  FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
  WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;  
  
  
  
  SELECT  
   TRANSACTION_TITLES.COD_EC  
     ,[TRANSACTION].COD_TRAN  
     ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO  
  FROM TRANSACTION_SERVICES  
  INNER JOIN ITEMS_SERVICES_AVAILABLE  
   ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE  
  JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT  
   ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
  JOIN TRANSACTION_TITLES WITH (NOLOCK)  
   ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
    AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC  
  JOIN [TRANSACTION] WITH (NOLOCK)  
   ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
  WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'  
  GROUP BY TRANSACTION_TITLES.COD_EC  
    ,[TRANSACTION].COD_TRAN  
    ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC  
  
  
  SELECT  
   [TRANSACTION].COD_TRAN  
     ,CASE  
    WHEN (  
     #TEMP_DZERO.TAX_PLANDZERO_EC  
     )  
     > 0 THEN SUM(dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT,  
     (  
     #TEMP_DZERO.TAX_PLANDZERO_EC  
     )  
     , [TRANSACTION].COD_TTYPE))  
    ELSE CASE  
      WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](  
       TRANSACTION_TITLES.Amount,  
       TRANSACTION_TITLES.TAX_INITIAL,  
       TRANSACTION_TITLES.PLOT,  
       TRANSACTION_TITLES.ANTICIP_PERCENT,  
       (CASE  
        WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)  
        ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP  
       END)))  
      ELSE 0  
     END  
   END AS NET_VALUE INTO #TEMP_NET  
  FROM [TRANSACTION] WITH (NOLOCK)  
  LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)  
   ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN  
  LEFT JOIN #TEMP_DZERO  
   ON #TEMP_DZERO.COD_TRAN = TRANSACTION_TITLES.COD_TRAN  
    AND #TEMP_DZERO.COD_EC = TRANSACTION_TITLES.COD_EC  
  
  WHERE [TRANSACTION].COD_TRAN IN (SELECT  
    COD_TRAN  
   FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT)  
  GROUP BY TRANSACTION_TITLES.COD_TRAN  
    ,[TRANSACTION].COD_TRAN  
    ,#TEMP_DZERO.TAX_PLANDZERO_EC  
  
  
  UPDATE #TB_REPORT_TRANSACTIONS_EXP_INSERT  
  SET NET_VALUE = (SELECT  
    NET_VALUE  
   FROM #TEMP_NET  
   WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN)  
  FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT  
  
  
  SELECT  
   @COUNT = COUNT(*)  
  FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];  
  
  IF @COUNT > 0  
  BEGIN  
   INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],  
   [TRANSACTION_CODE],  
   [Amount],  
   [PLOTS],  
   [TRANSACTION_DATE],  
   [TRANSACTION_TYPE],  
   [CPF_CNPJ],  
   [NAME],  
   [SERIAL_EQUIP],  
   [TID],  
   [SITUATION],  
   [Brand],  
   [PAN],  
   [TRAN_DATA_EXT],  
   [TRAN_DATA_EXT_VALUE],  
   [AUTH_CODE],  
   [COD_AC],  
   [NAME_ACQUIRER],  
   [COMMENT],  
   [TAX],  
   [ANTICIPATION],  
   [COD_AFFILIATOR],  
   [NAME_AFFILIATOR],  
   [NET_VALUE],  
   [COD_COMP],  
   [COD_EC],  
   [COD_BRANCH],  
   [STATE_NAME],  
   [CITY_NAME],  
   [COD_SITUATION],  
   [COD_DEPTO_BRANCH],  
   [GROSS_VALUE_AGENCY],  
   [NET_VALUE_AGENCY],  
   [TYPE_TRAN],  
   [COD_SOURCE_TRAN],  
   [POSWEB],  
   [SEGMENTS_NAME],  
   [CREATED_TRANSACTION_DATE],  
   [COD_EC_TRANS],  
   [TRANS_EC_NAME],  
   [TRANS_EC_CPF_CNPJ],  
   [SPLIT],  
   [SALES_REP],  
   [COD_USER_REP],  
   [MODIFY_DATE],  
   [CREDITOR_DOCUMENT],  
   [COD_SALES_REP],  
   [MODEL_POS],  
   [CARD_NAME],  
   [CNAE],  
   [COD_USER],  
   [NAME_USER],  
   [LINK_PAYMENT_SERVICE],  
   [CUSTOMER_EMAIL],  
   [CUSTOMER_IDENTIFICATION],  
   [PAYMENT_LINK_TRACKING],  
   [NAME_PRODUCT_EC],  
   [EC_PRODUCT],  
   [EC_PRODUCT_CPF_CNPJ],  
   [SALES_TYPE],  
   DZERO_EC_TAX,  
   DZERO_AFF_TAX,  
   [COD_EC_PROD],  
   [BRANCH_BUSINESS],
   [REPORT_EXP_WEBHOOK])  
    (SELECT  
     [TEMP].[COD_TRAN]  
       ,[TEMP].[TRANSACTION_CODE]  
       ,[TEMP].[Amount]  
       ,[TEMP].[PLOTS]  
       ,[TEMP].[TRANSACTION_DATE]  
       ,[TEMP].[TRANSACTION_TYPE]  
       ,[TEMP].[CPF_CNPJ]  
       ,[TEMP].[NAME]  
       ,[TEMP].[SERIAL_EQUIP]  
       ,[TEMP].[TID]  
       ,[TEMP].[SITUATION]  
       ,[TEMP].[Brand]  
       ,[TEMP].[PAN]  
       ,[TEMP].[TRAN_DATA_EXT]  
       ,[TEMP].[TRAN_DATA_EXT_VALUE]  
       ,[TEMP].[AUTH_CODE]  
       ,[TEMP].[COD_AC]  
       ,[TEMP].[NAME_ACQUIRER]  
       ,[TEMP].[COMMENT]  
       ,[TEMP].[TAX]  
       ,[TEMP].[ANTICIPATION]  
       ,[TEMP].[COD_AFFILIATOR]  
       ,[TEMP].[NAME_AFFILIATOR]  
       ,[TEMP].[NET_VALUE]  
       ,[TEMP].[COD_COMP]  
       ,[TEMP].[COD_EC]  
       ,[TEMP].[COD_BRANCH]  
       ,[TEMP].[STATE_NAME]  
       ,[TEMP].[CITY_NAME]  
       ,[TEMP].[COD_SITUATION]  
       ,[TEMP].[COD_DEPTO_BRANCH]  
       ,[TEMP].[GROSS_VALUE_AGENCY]  
       ,[TEMP].[NET_VALUE_AGENCY]  
       ,[TEMP].[TYPE_TRAN]  
       ,[TEMP].[COD_SOURCE_TRAN]  
       ,[TEMP].[POSWEB]  
       ,[TEMP].[SEGMENTS_NAME]  
       ,[TEMP].[CREATED_AT]  
       ,[TEMP].[COD_EC_TRANS]  
       ,[TEMP].[TRANS_EC_NAME]  
       ,[TEMP].[TRANS_EC_CPF_CNPJ]  
       ,[TEMP].[SPLIT]  
       ,[SALES_REP]  
       ,[COD_USER_REP]  
       ,GETDATE()  
       ,[CREDITOR_DOCUMENT]  
       ,[COD_SALES_REP]  
       ,[TEMP].[MODEL_POS]  
       ,[CARD_NAME]  
       ,[CNAE]  
       ,[COD_USER]  
       ,[NAME_USER]  
       ,[LINK_PAYMENT]  
       ,[CUSTOMER_EMAIL]  
       ,[CUSTOMER_IDENTIFICATION]  
       ,[TEMP].[PAYMENT_LINK_TRACKING]  
       ,[TEMP].[NAME_PRODUCT_EC]  
       ,[TEMP].[EC_PRODUCT]  
       ,[TEMP].[EC_PRODUCT_CPF_CNPJ]  
       ,[TEMP].[SALES_TYPE]  
       ,[TEMP].PLAN_DZEROEC  
       ,[TEMP].PLAN_DZEROAFF  
       ,[TEMP].[COD_EC_PROD]  
       ,[TEMP].[BRANCH_BUSINESS_EC]  
	   ,0
    FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);  
  
   IF @@rowcount < 1  
    THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;  
  
   UPDATE [PROCESS_BG_STATUS]  
   SET [STATUS_PROCESSED] = 1  
      ,[MODIFY_DATE] = GETDATE()  
   FROM [PROCESS_BG_STATUS]  
   INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
    ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])  
   WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
   IF @@rowcount < 1  
    THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;  
  END;  
  
  
  ---------------------------------------------                                      
  --------------RECORDS UPDATE-----------------                                      
  ---------------------------------------------                                        
  SELECT  
   [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]  
     ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]  
     ,CAST(0 AS DECIMAL(22, 6)) AS [NET_VALUE] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
  FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
  WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;  
  
  
  SELECT  
   TRANSACTION_TITLES.COD_EC  
     ,[TRANSACTION].COD_TRAN  
     ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO_2  
  FROM TRANSACTION_SERVICES  
  INNER JOIN ITEMS_SERVICES_AVAILABLE  
   ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE  
  JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT  
   ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
  JOIN TRANSACTION_TITLES WITH (NOLOCK)  
   ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
    AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC  
  JOIN [TRANSACTION] WITH (NOLOCK)  
   ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
  WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'  
  GROUP BY TRANSACTION_TITLES.COD_EC  
    ,[TRANSACTION].COD_TRAN  
    ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC  
  
  
  SELECT  
   [TRANSACTION].COD_TRAN  
     ,CASE  
    WHEN (  
     #TEMP_DZERO_2.TAX_PLANDZERO_EC  
     )  
     > 0 THEN SUM(dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT, (  
     #TEMP_DZERO_2.TAX_PLANDZERO_EC  
     )  
     , [TRANSACTION].COD_TTYPE))  
    ELSE CASE  
      WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](  
       TRANSACTION_TITLES.Amount,  
       TRANSACTION_TITLES.TAX_INITIAL,  
       TRANSACTION_TITLES.PLOT,  
       TRANSACTION_TITLES.ANTICIP_PERCENT,  
       (CASE  
        WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)  
        ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP  
       END)))  
      ELSE 0  
     END  
   END AS NET_VALUE INTO #TEMP_NET_2  
  FROM [TRANSACTION] WITH (NOLOCK)  
  LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)  
   ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN  
  LEFT JOIN #TEMP_DZERO_2  
   ON #TEMP_DZERO_2.COD_TRAN = TRANSACTION_TITLES.COD_TRAN  
    AND #TEMP_DZERO_2.COD_EC = TRANSACTION_TITLES.COD_EC  
  WHERE [TRANSACTION].COD_TRAN IN (SELECT  
    COD_TRAN  
   FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE)  
  GROUP BY TRANSACTION_TITLES.COD_TRAN  
    ,[TRANSACTION].COD_TRAN  
    ,#TEMP_DZERO_2.TAX_PLANDZERO_EC  
  
  
  UPDATE #TB_REPORT_TRANSACTIONS_EXP_UPDATE  
  SET NET_VALUE = (SELECT  
    NET_VALUE  
   FROM #TEMP_NET_2  
   WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_UPDATE.COD_TRAN)  
  FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE  
  
  
  SELECT  
   @COUNT = COUNT(*)  
  FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];  
  
  IF @COUNT > 0  
  BEGIN  
   UPDATE [REPORT_TRANSACTIONS_EXP]  
   SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]  
      ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]  
      ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]  
      ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()  
      ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]  
      ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]  
      ,[REPORT_TRANSACTIONS_EXP].[Amount] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[Amount]  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NET_VALUE]  
	  ,[REPORT_TRANSACTIONS_EXP].[REPORT_EXP_WEBHOOK] = 0
   FROM [REPORT_TRANSACTIONS_EXP]  
   INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
    ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);  
  
   IF @@rowcount < 1  
    THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;  
  
   UPDATE [PROCESS_BG_STATUS]  
   SET [STATUS_PROCESSED] = 1  
      ,[MODIFY_DATE] = GETDATE()  
   FROM [PROCESS_BG_STATUS]  
   INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
    ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])  
   WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
   IF @@rowcount < 1  
    THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;  
  END;  
 END;  
END;


GO

IF TYPE_ID('TPV_UPDATE_REPORT_TRANS_WEBHOOK') IS NULL
CREATE TYPE [dbo].[TPV_UPDATE_REPORT_TRANS_WEBHOOK] AS TABLE(
	[TRANSACTION_CODE] [VARCHAR](100) NULL
)

GO

IF OBJECT_ID('UPDATE_REPORT_TRANS_WEBHOOK') IS NOT NULL
	DROP PROCEDURE [UPDATE_REPORT_TRANS_WEBHOOK]
GO
   
CREATE PROCEDURE [dbo].[UPDATE_REPORT_TRANS_WEBHOOK]  
  
/*****************************************************************************************************************                  
----------------------------------------------------------------------------------------                                        
 Procedure Name: [UPDATE_REPORT_TRANS_WEBHOOK]                                        
 Project.......: TKPP                                        
 ------------------------------------------------------------------------------------------                                        
 Author                          VERSION        Date                            Description                                        
 ------------------------------------------------------------------------------------------                                        
 Caike Uchoa                        V1       13/12/2018                          Creation             
  ------------------------------------------------------------------------------------------                  
*****************************************************************************************************************/  
(
@TPV_UPDATE_REPORT_TRANS_WEBHOOK [TPV_UPDATE_REPORT_TRANS_WEBHOOK] readonly
)
AS  
BEGIN  


UPDATE REPORT_TRANSACTIONS_EXP SET REPORT_EXP_WEBHOOK = 1 
FROM REPORT_TRANSACTIONS_EXP 
JOIN @TPV_UPDATE_REPORT_TRANS_WEBHOOK TPV_WEBHOOK
ON TPV_WEBHOOK.TRANSACTION_CODE = REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE



END



GO

IF OBJECT_ID('SP_REPORT_TRANSACTIONS_EXP_WEBHOOK') IS NOT NULL
DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP_WEBHOOK];

GO
CREATE PROCEDURE [dbo].[SP_REPORT_TRANSACTIONS_EXP_WEBHOOK]    
/***************************************************************************************                  
----------------------------------------------------------------------------------------                  
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP_WEBHOOK]                  
Project.......: TKPP                  
------------------------------------------------------------------------------------------                  
Author               VERSION         Date                     Description                  
------------------------------------------------------------------------------------------                  
Caike Uchoa            v1       28/12/2020                       CREATION
---------------------------------------------           ---------------------------------------------                  
********************************************************************************************/ 
(  
@CODCOMP VARCHAR(10), 
@INITIAL_DATE DATETIME,    
@FINAL_DATE DATETIME,    
@COD_AFFILIATOR INT = NULL,    
@REPORT_EXP_WEBHOOK VARCHAR(2) = NULL
)    

AS    
BEGIN    
 DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';    
 DECLARE @TIME_FINAL_DATE TIME;    
 SET NOCOUNT ON;    
 SET ARITHABORT ON;    
 BEGIN    
  SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');    
  --SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));                  
  --SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )                  
  SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);    
  IF (@TIME_FINAL_DATE = '00:00:00')    
   SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));    
  SET @QUERY_BASIS = '                  
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE                  
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT                  
      ,[REPORT_TRANSACTIONS_EXP].PLOTS                  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE                  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE                  
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ                  
      ,[REPORT_TRANSACTIONS_EXP].NAME                  
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP                  
      ,[REPORT_TRANSACTIONS_EXP].TID                  
,[REPORT_TRANSACTIONS_EXP].SITUATION                  
      ,[REPORT_TRANSACTIONS_EXP].BRAND                  
      ,[REPORT_TRANSACTIONS_EXP].PAN                  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE                  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT                  
   ,(        
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT                  
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN                  
      ) AS [AUTH_CODE]                  
      ,[REPORT_TRANSACTIONS_EXP].COD_AC                  
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER                  
      ,[REPORT_TRANSACTIONS_EXP].COMMENT                  
  ,[REPORT_TRANSACTIONS_EXP].TAX                  
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION                  
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR                  
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR                  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE                  
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY                  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY                  
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN                  
      ,[REPORT_TRANSACTIONS_EXP].POSWEB                  
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME                  
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME                  
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME                  
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS                  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME                  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ                  
      ,[REPORT_TRANSACTIONS_EXP].SPLIT                  
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]                  
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT                  
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP                  
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS                  
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME                  
      ,[REPORT_TRANSACTIONS_EXP].CNAE                  
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE                  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL                  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION                  
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING                  
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]                  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]                  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]                  
   ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]                
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_EC_TAX, 0) AS DZERO_EC_TAX        
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_AFF_TAX, 0)       AS DZERO_AFF_TAX      
   ,[REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]      
   ,[REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS]    
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]                  
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP                  
    ';    
  IF @INITIAL_DATE IS NOT NULL    
   AND @FINAL_DATE IS NOT NULL    
   SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');    
            
  IF @COD_AFFILIATOR IS NOT NULL    
   SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');    

   IF @REPORT_EXP_WEBHOOK IS NOT NULL    
   SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND ([REPORT_TRANSACTIONS_EXP].REPORT_EXP_WEBHOOK = @REPORT_EXP_WEBHOOK) OR ([REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR AND [REPORT_TRANSACTIONS_EXP].REPORT_EXP_WEBHOOK = @REPORT_EXP_WEBHOOK AND [REPORT_TRANSACTIONS_EXP].MODIFY_DATE BETWEEN DATEADD(DAY,-1,GETDATE()) AND GETDATE())'); 
     
   
  SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');    

  --SELECT @QUERY_BASIS                  
  EXEC [sp_executesql] @QUERY_BASIS    
       ,N'       
   @CODCOMP VARCHAR(10),  
   @INITIAL_DATE DATETIME,                  
   @FINAL_DATE DATETIME,                               
   @COD_AFFILIATOR INT,                  
   @REPORT_EXP_WEBHOOK INT
   '    
       ,@CODCOMP = @CODCOMP 
       ,@INITIAL_DATE = @INITIAL_DATE    
       ,@FINAL_DATE = @FINAL_DATE     
       ,@COD_AFFILIATOR = @COD_AFFILIATOR    
	   ,@REPORT_EXP_WEBHOOK = @REPORT_EXP_WEBHOOK;    
 END;    
END;  
  

  GO

IF(SELECT COUNT(*) FROM SYSINDEXES WHERE NAME = 'INDEX_REPORT_TRAN_EXP_WEBHOOK') = 0
  CREATE NONCLUSTERED INDEX [INDEX_REPORT_TRAN_EXP_WEBHOOK]
ON [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_AFFILIATOR],[REPORT_EXP_WEBHOOK])
INCLUDE ([CREATED_AT],[COD_TRAN],[TRANSACTION_CODE],[AMOUNT],[PLOTS],[TRANSACTION_DATE],[TRANSACTION_TYPE],[CPF_CNPJ],[NAME],[SERIAL_EQUIP],[TID],[SITUATION],[BRAND],[PAN],[TRAN_DATA_EXT],[TRAN_DATA_EXT_VALUE],[COMMENT],[TAX],[ANTICIPATION],[NAME_AFFILIATOR],[NET_VALUE],[COD_COMP],[STATE_NAME],[CITY_NAME],[GROSS_VALUE_AGENCY],[NET_VALUE_AGENCY],[TYPE_TRAN],[POSWEB],[SEGMENTS_NAME],[MODIFY_DATE],[COD_EC_TRANS],[TRANS_EC_NAME],[TRANS_EC_CPF_CNPJ],[SALES_REP],[SPLIT],[COD_SALES_REP],[COD_AC],[NAME_ACQUIRER],[CREDITOR_DOCUMENT],[CARD_NAME],[MODEL_POS],[CNAE],[LINK_PAYMENT_SERVICE],[CUSTOMER_EMAIL],[CUSTOMER_IDENTIFICATION],[PAYMENT_LINK_TRACKING],[EC_PRODUCT],[NAME_PRODUCT_EC],[EC_PRODUCT_CPF_CNPJ],[SALES_TYPE],[DZERO_EC_TAX],[DZERO_AFF_TAX],[COD_EC_PROD],[BRANCH_BUSINESS])

--SD-77

GO
