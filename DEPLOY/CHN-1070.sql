IF OBJECT_ID('SP_FD_EC') IS NOT NULL
	DROP PROCEDURE SP_FD_EC;
GO
CREATE PROCEDURE [dbo].[SP_FD_EC]

/*----------------------------------------------------------------------------------------        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Kennedy Alef                V1   27/07/2018   Creation        
Gian Luca Dalle Cort        V2   04/10/2018   Changed        
Lucas Aguiar                V3   15/10/2018   Changed        
Elir Ribeiro                V4   14/11/2018   Changed        
Luiz Aquino                 V5   26/12/2018   Add Column Spot_tax        
Lucas Aguiar                V6   01/07/2019   Add Rotina de travar agenda        
Elir Ribeiro                V7   02/08/2019   Add Situa??o Risco        
Lucas Aguiar                V8   04-09-2019   IS_PROVIDER        
Marcus Gall Barreira        V9   11-11-2019   Add parameter Branch Business        
Marcus Gall Barreira        V10  19-11-2019   Add informações de endereço do EC        
Marcus Gall                 v11  06-05-2020   Add ModifyDate        
Kennedy Alef                v12  05/08/2020   otimização da consulta    
Elir Ribeiro                v13  23/09/2020   add address to affiliator   
------------------------------------------------------------------------------------------*/ (@CPF_CNPJ VARCHAR(14),
@COD_REP INT,
@ID_EC INT,
@SEGMENT INT,
@COMP INT,
@TYPE VARCHAR(100),
@COD_PLAN INT = NULL,
@COD_AFF INT = NULL,
@Active BIT = NULL,
@PersonType VARCHAR(100) = NULL,
@CODSIT INT = NULL,
@WAS_BLOCKED_FINANCE INT = NULL,
@COD_SITUATION_RISK INT = NULL,
@IS_PROVIDER INT = NULL,
@BRANCH_BUSINESS INT = NULL,
@RISK_SITUATION_LIST [CODE_TYPE] READONLY,
@CREATED_FROM DATETIME = NULL,
@CREATED_UNTIL DATETIME = NULL)
AS
	DECLARE @QUERY_ NVARCHAR(MAX);
	DECLARE @COD_BLOCKED_FINANCE INT;
	BEGIN
		SET @QUERY_ = N'        
        SELECT   
    
    BRANCH_EC.COD_EC,        
    BRANCH_EC.CODE,        
    dbo.FN_FUS_UTF(BRANCH_EC.CREATED_AT) AS CREATED_AT,        
    BRANCH_EC.NAME,        
    COMMERCIAL_ESTABLISHMENT.TRADING_NAME,        
    BRANCH_EC.COD_BRANCH,        
    BRANCH_EC.CPF_CNPJ,        
    BRANCH_EC.DOCUMENT_TYPE,        
    BRANCH_EC.EMAIL,        
    BRANCH_EC.STATE_REGISTRATION,        
    BRANCH_EC.MUNICIPAL_REGISTRATION,        
    BRANCH_EC.TRANSACTION_LIMIT,        
    BRANCH_EC.LIMIT_TRANSACTION_DIALY,        
    BRANCH_EC.BIRTHDATE,        
    TYPE_ESTAB.CODE AS TYPE_EC,        
    BRANCH_EC.TYPE_BRANCH AS TYPE_BR,        
    SEGMENTS.NAME AS SEGMENTS,        
    BRANCH_EC.ACTIVE,        
    USERS.IDENTIFICATION AS SALES_REP,        
    DEPARTMENTS_BRANCH.COD_PLAN,        
    TYPE_RECEIPT.[CODE] AS ACCOUNT_TYPE,        
    COUNT(*) AS QTY,        
    AFFILIATOR.COD_AFFILIATOR,        
    ISNULL(AFFILIATOR.NAME, ''CELER'')  AS NAME_AFFILIATOR,        
    SITUATION_REQUESTS.NAME AS SIT_REQUEST,        
    ISNULL(COMMERCIAL_ESTABLISHMENT.DEFAULT_EC, 0) AS DEFAULT_EC,        
    COMMERCIAL_ESTABLISHMENT.SPOT_TAX,        
    TRADUCTION_SITUATION.SITUATION_TR,        
    TRADUCTION_RISK_SITUATION.RISK_SITUATION_TR        
    , COMMERCIAL_ESTABLISHMENT.IS_PROVIDER        
    , BRANCH_BUSINESS.NAME AS BRANCH_BUSINESS        
    , NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD        
    , CITY.[NAME] AS CITY        
    , STATE.[NAME] AS STATE        
    , dbo.FN_FUS_UTF(COMMERCIAL_ESTABLISHMENT.MODIFY_DATE) AS MODIFY_DATE      
 , COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED  
 ,ADDRESS_BRANCH.ADDRESS AS [ADDRESS_AFFILIATOR]  
 ,ADDRESS_BRANCH.NUMBER AS [NUMBER_AFFILIATOR]  
 ,ADDRESS_BRANCH.COMPLEMENT AS [COMPLEMENT_AFFILIATOR]  
 ,ADDRESS_BRANCH.CEP AS [ZIPCODE_AFFILIATOR]  
 ,(SELECT top 1 CONCAT(C.DDD,C.NUMBER) FROM CONTACT_BRANCH C WHERE C.ACTIVE = 1 AND BRANCH_EC.COD_BRANCH = C.COD_BRANCH) AS [PHONE_AFFILIATOR]  
       FROM COMMERCIAL_ESTABLISHMENT        
   INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC AND BRANCH_EC.CPF_CNPJ = COMMERCIAL_ESTABLISHMENT.CPF_CNPJ         
   INNER JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG        
   INNER JOIN TYPE_ESTAB ON COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = TYPE_ESTAB.COD_TYPE_ESTAB        
   INNER JOIN SALES_REPRESENTATIVE ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP        
   INNER JOIN USERS ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER        
   INNER JOIN DEPARTMENTS_BRANCH ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH          
   INNER JOIN TYPE_RECEIPT ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC        
   INNER JOIN SITUATION_REQUESTS ON SITUATION_REQUESTS.COD_SIT_REQ = COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ        
   LEFT JOIN BRANCH_BUSINESS ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS        
   LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR        
   LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_SITUATION        
   LEFT JOIN TRADUCTION_RISK_SITUATION ON TRADUCTION_RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION        
   INNER JOIN ADDRESS_BRANCH  ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH AND ADDRESS_BRANCH.ACTIVE = 1 AND  COMMERCIAL_ESTABLISHMENT.COD_EC =  BRANCH_EC.COD_EC      
   INNER JOIN NEIGHBORHOOD  ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH        
   INNER JOIN CITY    ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY        
   INNER JOIN STATE   ON STATE.COD_STATE = CITY.COD_STATE   
  
     
    
  WHERE        
   COMMERCIAL_ESTABLISHMENT.COD_COMP = @COMP ';
		SELECT
			@COD_BLOCKED_FINANCE = COD_SITUATION
		FROM SITUATION
		WHERE NAME = 'LOCKED FINANCIAL SCHEDULE';
		IF @ID_EC IS NOT NULL
		BEGIN
			IF @TYPE = 'BRANCH'
				SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.COD_BRANCH = @ID_EC ';
			ELSE
				SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @ID_EC ';
		END;
		IF @SEGMENT IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SEG = @SEGMENT ';
		IF @COD_REP IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = @COD_REP ';
		IF @TYPE IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.TYPE_BRANCH = @TYPE ';
		IF @CPF_CNPJ IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.CPF_CNPJ = @CPF_CNPJ ';
		IF @COD_PLAN IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND  DEPARTMENTS_BRANCH.COD_PLAN = @COD_PLAN ';
		IF @COD_AFF IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF';
		IF @Active IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.ACTIVE = @Active';
		IF @IS_PROVIDER IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.IS_PROVIDER = @IS_PROVIDER';
		IF @PersonType IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND TYPE_ESTAB.CODE = @PersonType';
		IF @CODSIT IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ = @CODSIT';
		IF @WAS_BLOCKED_FINANCE = 1
		BEGIN
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCKED_FINANCE';
		END;
		ELSE
		IF @WAS_BLOCKED_FINANCE = 0
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION <> @COD_BLOCKED_FINANCE';
		IF @COD_SITUATION_RISK IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = @COD_SITUATION_RISK';
		IF @BRANCH_BUSINESS IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS = @BRANCH_BUSINESS';
		IF EXISTS (SELECT TOP 1
					CODE
				FROM @RISK_SITUATION_LIST)
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION IN (SELECT CODE FROM @RISK_SITUATION_LIST)';
		SET @QUERY_ = CONCAT(@QUERY_, ' GROUP BY  
      BRANCH_EC.CREATED_AT,        
         BRANCH_EC.COD_EC,        
    COMMERCIAL_ESTABLISHMENT.TRADING_NAME,  
                            
                              BRANCH_EC.CODE,        
                              BRANCH_EC.NAME,        
                              BRANCH_EC.TRADING_NAME,        
                              BRANCH_EC.COD_BRANCH,        
                              BRANCH_EC.CPF_CNPJ,        
                              BRANCH_EC.DOCUMENT_TYPE,        
                              BRANCH_EC.EMAIL,        
                              BRANCH_EC.STATE_REGISTRATION,        
                              BRANCH_EC.MUNICIPAL_REGISTRATION,        
                              BRANCH_EC.TRANSACTION_LIMIT,        
                              BRANCH_EC.LIMIT_TRANSACTION_DIALY,        
                              BRANCH_EC.BIRTHDATE,        
                              TYPE_ESTAB.CODE,        
                              BRANCH_EC.TYPE_BRANCH,        
                              SEGMENTS.NAME,        
                              BRANCH_BUSINESS.NAME,        
                              BRANCH_EC.ACTIVE,        
                              USERS.IDENTIFICATION,        
                              DEPARTMENTS_BRANCH.COD_PLAN,        
                              TYPE_RECEIPT.[CODE],        
                              AFFILIATOR.COD_AFFILIATOR,        
                              AFFILIATOR.NAME,        
                              SITUATION_REQUESTS.NAME,        
                              COMMERCIAL_ESTABLISHMENT.DEFAULT_EC,        
                              COMMERCIAL_ESTABLISHMENT.SPOT_TAX ,        
                              TRADUCTION_SITUATION.SITUATION_TR,        
                              TRADUCTION_RISK_SITUATION.RISK_SITUATION_TR,        
                              COMMERCIAL_ESTABLISHMENT.IS_PROVIDER        
                              , NEIGHBORHOOD.[NAME]        
                              , CITY.[NAME]        
                              , STATE.[NAME]        
         , COMMERCIAL_ESTABLISHMENT.MODIFY_DATE      
   , COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED   
   ,ADDRESS_BRANCH.ADDRESS  
   ,ADDRESS_BRANCH.CEP  
   ,ADDRESS_BRANCH.COMPLEMENT  
   ,ADDRESS_BRANCH.NUMBER  
   ORDER BY COMMERCIAL_ESTABLISHMENT.TRADING_NAME  
     
                              ');
		EXEC sp_executesql @QUERY_
						  ,N'        
  @CPF_CNPJ VARCHAR(14),        
  @COD_REP INT,        
  @ID_EC INT,        
  @SEGMENT INT,        
  @COMP INT,        
  @TYPE VARCHAR(100),        
  @COD_PLAN INT,        
  @COD_AFF INT,        
  @Active BIT,        
  @PersonType VARCHAR(100),        
  @CODSIT INT,        
  @WAS_BLOCKED_FINANCE INT,        
  @COD_SITUATION_RISK INT,        
  @IS_PROVIDER INT,        
  @BRANCH_BUSINESS INT,        
  @RISK_SITUATION_LIST [CODE_TYPE] READONLY        
 '
						  ,@CPF_CNPJ = @CPF_CNPJ
						  ,@COD_REP = @COD_REP
						  ,@ID_EC = @ID_EC
						  ,@SEGMENT = @SEGMENT
						  ,@COMP = @COMP
						  ,@TYPE = @TYPE
						  ,@COD_PLAN = @COD_PLAN
						  ,@COD_AFF = @COD_AFF
						  ,@Active = @Active
						  ,@PersonType = @PersonType
						  ,@CODSIT = @CODSIT
						  ,@WAS_BLOCKED_FINANCE = @WAS_BLOCKED_FINANCE
						  ,@COD_SITUATION_RISK = @COD_SITUATION_RISK
						  ,@IS_PROVIDER = @IS_PROVIDER
						  ,@BRANCH_BUSINESS = @BRANCH_BUSINESS
						  ,@RISK_SITUATION_LIST = @RISK_SITUATION_LIST;
	END;

GO


IF OBJECT_ID('[SP_REG_ROUTE_ACQ]') IS NOT NULL
	DROP PROCEDURE [SP_REG_ROUTE_ACQ];
GO
CREATE PROCEDURE [dbo].[SP_REG_ROUTE_ACQ] (@Routes TVP_REG_ROUTE_ACQ READONLY)
AS
BEGIN



	DECLARE @COD_AC INT;
	DECLARE @GROUP VARCHAR(200);
	SELECT
		@GROUP = ACQUIRER.[GROUP]
	   ,@COD_AC = ACQUIRER.COD_AC
	FROM @Routes [routes]
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = [routes].COD_ACQ


	IF (@GROUP = 'PAGSEGURO')
	BEGIN
		SELECT
			@COD_AC =
			(CASE
				WHEN TYPE_ESTAB.CODE = 'PF' THEN 10
				ELSE ACQ_SEGMENT.COD_AC
			END)
		FROM @Routes AS R
		INNER JOIN EQUIPMENT
			ON EQUIPMENT.SERIAL = R.SERIAL
		INNER JOIN ASS_DEPTO_EQUIP
			ON ASS_DEPTO_EQUIP.COD_EQUIP = EQUIPMENT.COD_EQUIP
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		INNER JOIN SEGMENTS
			ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
		INNER JOIN SEGMENTS_GROUP
			ON SEGMENTS_GROUP.COD_SEG_GROUP = SEGMENTS.COD_SEG_GROUP
		LEFT JOIN ACQUIRER AS ACQ_SEGMENT
			ON ((SEGMENTS_GROUP.COD_SEG_GROUP = ACQ_SEGMENT.COD_SEG_GROUP)
					OR ACQ_SEGMENT.COD_SEG_GROUP IS NULL)
		INNER JOIN TYPE_ESTAB
			ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
		WHERE ASS_DEPTO_EQUIP.ACTIVE = 1
		AND ACQ_SEGMENT.[GROUP] = R.GROUP_ACQ
		AND ACQ_SEGMENT.LOGICAL_NUMBER = 1;
	END

	INSERT INTO ROUTE_ACQUIRER (COD_COMP, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			r.COD_COMP
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,r.COD_ACQ
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		WHERE r.CONF_TYPE = 4

	INSERT INTO ROUTE_ACQUIRER (COD_AFFILIATOR, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			r.COD_AFF
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,r.COD_ACQ
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		WHERE r.CONF_TYPE = 3

	INSERT INTO ROUTE_ACQUIRER (COD_EC, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			r.COD_EC
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,r.COD_ACQ
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		WHERE r.CONF_TYPE = 2

	INSERT INTO ROUTE_ACQUIRER (COD_EQUIP, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			eqp.COD_EQUIP
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,@COD_AC
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		JOIN EQUIPMENT eqp
			ON eqp.SERIAL = r.SERIAL
		WHERE r.CONF_TYPE = 1

	--------------------------------------------------------------------------------------------------        
	-- History Info        
	--------------------------------------------------------------------------------------------------        

	INSERT INTO [ROUTE_ACQUIRER_HIST] (COD_COMP, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			r.COD_COMP
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,r.COD_ACQ
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		WHERE r.CONF_TYPE = 4

	INSERT INTO [ROUTE_ACQUIRER_HIST] (COD_AFFILIATOR, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			r.COD_AFF
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,r.COD_ACQ
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		WHERE r.CONF_TYPE = 3

	INSERT INTO [ROUTE_ACQUIRER_HIST] (COD_EC, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			r.COD_EC
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,r.COD_ACQ
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		WHERE r.CONF_TYPE = 2

	INSERT INTO [ROUTE_ACQUIRER_HIST] (COD_EQUIP, COD_USER, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)
		SELECT
			eqp.COD_EQUIP
		   ,r.COD_USER
		   ,r.CONF_TYPE
		   ,b.COD_BRAND
		   ,@COD_AC
		   ,r.COD_SOURCE
		FROM @Routes r
		JOIN BRAND b
			ON b.[GROUP] = r.BRAND_GROUP
				AND b.COD_TTYPE = r.COD_TTYPE
		JOIN EQUIPMENT eqp
			ON eqp.SERIAL = r.SERIAL
		WHERE r.CONF_TYPE = 1


END



GO
IF OBJECT_ID('SP_VAL_REG_ROUTE_ACQ') IS NOT NULL
	DROP PROCEDURE SP_VAL_REG_ROUTE_ACQ;
GO

CREATE PROCEDURE [SP_VAL_REG_ROUTE_ACQ] (@Routes TVP_REG_ROUTE_ACQ READONLY)
AS
BEGIN

	DECLARE @COD_AC INT;
	DECLARE @GROUP VARCHAR(200);

	CREATE TABLE #ERRORS (
		[Reason] VARCHAR(100)
	   ,COD_SEQ INT
	   ,[COD_ROUTE] INT
	   ,COD_AC INT
	   ,[Priority] INT
	);
	DECLARE @VALIDATE_ROUTES AS CURSOR
	SET @VALIDATE_ROUTES = CURSOR FOR SELECT
		ACQUIRER.COD_AC
	   ,ACQUIRER.[GROUP]
	FROM @Routes [routes]
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = [routes].COD_ACQ

	OPEN @VALIDATE_ROUTES;

	FETCH NEXT FROM @VALIDATE_ROUTES INTO @COD_AC, @GROUP;

	WHILE @@fetch_status = 0
	BEGIN
	IF (@GROUP = 'PAGSEGURO')
	BEGIN

		SELECT
			@COD_AC =
			(CASE
				WHEN TYPE_ESTAB.CODE = 'PF' THEN 10
				ELSE ACQ_SEGMENT.COD_AC
			END)
		FROM @Routes AS R
		INNER JOIN EQUIPMENT
			ON EQUIPMENT.SERIAL = R.SERIAL
		INNER JOIN ASS_DEPTO_EQUIP
			ON ASS_DEPTO_EQUIP.COD_EQUIP = EQUIPMENT.COD_EQUIP
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		INNER JOIN SEGMENTS
			ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
		INNER JOIN SEGMENTS_GROUP
			ON SEGMENTS_GROUP.COD_SEG_GROUP = SEGMENTS.COD_SEG_GROUP
		LEFT JOIN ACQUIRER AS ACQ_SEGMENT
			ON ((SEGMENTS_GROUP.COD_SEG_GROUP = ACQ_SEGMENT.COD_SEG_GROUP)
					OR ACQ_SEGMENT.COD_SEG_GROUP IS NULL)
		INNER JOIN TYPE_ESTAB
			ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
		WHERE ASS_DEPTO_EQUIP.ACTIVE = 1
		AND ACQ_SEGMENT.[GROUP] = R.GROUP_ACQ
		AND ACQ_SEGMENT.LOGICAL_NUMBER = 1;

		IF (SELECT
					COUNT(*)
				FROM @Routes R
				JOIN EQUIPMENT EQUIP
					ON EQUIP.SERIAL = R.SERIAL
					AND EQUIP.ACTIVE = 1
				JOIN DATA_EQUIPMENT_AC
					ON DATA_EQUIPMENT_AC.COD_EQUIP = EQUIP.COD_EQUIP
				WHERE COD_AC = @COD_AC
				AND DATA_EQUIPMENT_AC.ACTIVE = 1)
			= 0
		BEGIN

			INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
				SELECT
					'EQUIPAMENTO SEM TID DA PAGSEGURO'
				   ,r.COD_SEQ
				   ,0
				   ,ACQ.COD_AC
				   ,10
				FROM @Routes r
				JOIN ACQUIRER ACQ
					ON ACQ.COD_AC = @COD_AC
						AND ACQ.[GROUP] = 'Pagseguro'
				JOIN EQUIPMENT EQUIP
					ON EQUIP.SERIAL = r.SERIAL
						AND EQUIP.ACTIVE = 1

		END
	END
	INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
		SELECT
			'Rota já Existe'
		   ,r.COD_SEQ
		   ,raq.[COD_ROUTE]
		   ,raq.COD_AC
		   ,10
		FROM @Routes r
		JOIN ROUTE_ACQUIRER raq
			ON raq.COD_COMP = r.COD_COMP
				AND raq.CONF_TYPE = r.CONF_TYPE
				AND raq.COD_SOURCE_TRAN = r.COD_SOURCE
				AND raq.ACTIVE = 1
		JOIN BRAND b
			ON b.COD_BRAND = raq.COD_BRAND
		WHERE r.CONF_TYPE = 4
		AND b.[GROUP] = r.BRAND_GROUP
		AND b.COD_TTYPE = r.COD_TTYPE

	INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
		SELECT
			'Rota já Existe'
		   ,r.COD_SEQ
		   ,raq.[COD_ROUTE]
		   ,raq.COD_AC
		   ,10
		FROM @Routes r
		JOIN ROUTE_ACQUIRER raq
			ON raq.COD_AFFILIATOR = r.COD_AFF
				AND raq.CONF_TYPE = r.CONF_TYPE
				AND raq.COD_SOURCE_TRAN = r.COD_SOURCE
				AND raq.ACTIVE = 1
		JOIN BRAND b
			ON b.COD_BRAND = raq.COD_BRAND
		WHERE r.CONF_TYPE = 3
		AND b.[GROUP] = r.BRAND_GROUP
		AND b.COD_TTYPE = r.COD_TTYPE

	INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
		SELECT
			'Rota já Existe'
		   ,r.COD_SEQ
		   ,raq.[COD_ROUTE]
		   ,raq.COD_AC
		   ,10
		FROM @Routes r
		JOIN ROUTE_ACQUIRER raq
			ON raq.COD_EC = r.COD_EC
				AND raq.CONF_TYPE = r.CONF_TYPE
				AND raq.COD_SOURCE_TRAN = r.COD_SOURCE
				AND raq.ACTIVE = 1
		JOIN BRAND b
			ON b.COD_BRAND = raq.COD_BRAND
		WHERE r.CONF_TYPE = 2
		AND b.[GROUP] = r.BRAND_GROUP
		AND b.COD_TTYPE = r.COD_TTYPE


	INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
		SELECT
			'Rota já Existe'
		   ,r.COD_SEQ
		   ,raq.[COD_ROUTE]
		   ,raq.COD_AC
		   ,10
		FROM @Routes r
		JOIN EQUIPMENT eqp
			ON eqp.SERIAL = r.SERIAL
				AND eqp.ACTIVE = 1
		JOIN ROUTE_ACQUIRER raq
			ON raq.COD_EQUIP = eqp.COD_EQUIP
				AND raq.CONF_TYPE = r.CONF_TYPE
				AND raq.COD_SOURCE_TRAN = r.COD_SOURCE
				AND raq.ACTIVE = 1
		JOIN BRAND b
			ON b.COD_BRAND = raq.COD_BRAND
		WHERE r.CONF_TYPE = 1
		AND b.[GROUP] = r.BRAND_GROUP
		AND b.COD_TTYPE = r.COD_TTYPE

	INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
		SELECT
			'Serial não consta na base de dados'
		   ,r.COD_SEQ
		   ,0
		   ,0
		   ,1
		FROM @Routes r
		LEFT JOIN EQUIPMENT eqp
			ON eqp.SERIAL = r.SERIAL
				AND eqp.ACTIVE = 1
		WHERE r.CONF_TYPE = 1
		AND eqp.SERIAL IS NULL

	INSERT INTO #ERRORS (Reason, COD_SEQ, COD_ROUTE, COD_AC, Priority)
		SELECT
			'Produto indisponível para o adquirente'
		   ,r.COD_SEQ
		   ,0
		   ,0
		   ,1
		FROM @Routes r
		LEFT JOIN SOURCE_TRANSACTION st
			ON st.COD_SOURCE_TRAN = r.COD_SOURCE
		LEFT JOIN BRAND b
			ON b.COD_TTYPE = r.COD_TTYPE
				AND b.[GROUP] = r.BRAND_GROUP
				AND (b.AVAILABLE_ONLINE = 1
					OR st.[DESCRIPTION] != 'ONLINE')
		LEFT JOIN PRODUCTS_ACQUIRER pa
			ON pa.COD_AC = @COD_AC
				AND pa.COD_BRAND = b.COD_BRAND
		WHERE pa.COD_PR_ACQ IS NULL
	FETCH NEXT FROM @VALIDATE_ROUTES INTO @COD_AC, @GROUP;
	END


	SELECT
		Reason
	   ,COD_SEQ
	   ,COD_ROUTE
	   ,COD_AC
	   ,Priority
	FROM #ERRORS

END


GO
