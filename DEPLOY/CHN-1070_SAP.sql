--1° arquivo SAP

IF OBJECT_ID('EXTERNAL_CLIENTS') IS NULL
BEGIN
	CREATE TABLE EXTERNAL_CLIENTS (
		COD_EXT_CLI INT NOT NULL PRIMARY KEY
	   ,CLIENT_DESCRIPTION VARCHAR(128)
	)
END
GO

IF NOT EXISTS (SELECT
			1
		FROM EXTERNAL_CLIENTS
		WHERE CLIENT_DESCRIPTION = 'SAP_CELER')
BEGIN
	INSERT INTO EXTERNAL_CLIENTS (COD_EXT_CLI, CLIENT_DESCRIPTION)
		VALUES (1, 'SAP_CELER')
END
GO

IF OBJECT_ID('EXTERNAL_PARTN_UP') IS NULL
BEGIN
	CREATE TABLE EXTERNAL_PARTN_UP (
		COD_EXTERNAL_PART INT NOT NULL PRIMARY KEY IDENTITY
	   ,COD_EXT_CLI INT NOT NULL FOREIGN KEY REFERENCES EXTERNAL_CLIENTS (COD_EXT_CLI)
	   ,UPDATED INT NOT NULL DEFAULT (0)
	   ,COD_EC INT NULL FOREIGN KEY REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC)
	   ,COD_AFFILIATOR INT NULL FOREIGN KEY REFERENCES AFFILIATOR (COD_AFFILIATOR)
	   ,COD_EXTERNAL NVARCHAR(15) NULL
	   ,CONSTRAINT EXTERNAL_PARTN_EC UNIQUE (COD_EXT_CLI, COD_EC, COD_AFFILIATOR)
	)
END
GO

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('EXTERNAL_PARTN_UP')
		AND NAME = 'EXT_PART_UP_EC')
BEGIN
	CREATE NONCLUSTERED INDEX EXT_PART_UP_EC ON EXTERNAL_PARTN_UP (COD_EXT_CLI, COD_EC, UPDATED, COD_EXTERNAL)
END
GO

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('EXTERNAL_PARTN_UP')
		AND NAME = 'EXT_PART_UP_AFF')
BEGIN
	CREATE NONCLUSTERED INDEX EXT_PART_UP_AFF ON EXTERNAL_PARTN_UP (COD_EXT_CLI, COD_AFFILIATOR, UPDATED, COD_EXTERNAL)
END
GO

IF NOT EXISTS (SELECT
			COD_EC
		FROM EXTERNAL_PARTN_UP
		WHERE COD_EC IS NOT NULL)
BEGIN
	INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_EC, COD_EXTERNAL)
		SELECT
			1
		   ,0
		   ,tempEc.COD_EC
		   ,NULL
		FROM (SELECT
				COD_EC
			   ,CPF_CNPJ
			   ,ROW_NUMBER() OVER (PARTITION BY CPF_CNPJ ORDER BY COD_EC) [ROW_ID]
			FROM COMMERCIAL_ESTABLISHMENT
			WHERE ACTIVE = 1) tempEc
		WHERE tempEc.[ROW_ID] = 1;
END
GO

IF NOT EXISTS (SELECT
			COD_AFFILIATOR
		FROM EXTERNAL_PARTN_UP
		WHERE COD_AFFILIATOR IS NOT NULL)
BEGIN
	INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_AFFILIATOR, COD_EXTERNAL)
		SELECT
			1
		   ,0
		   ,COD_AFFILIATOR
		   ,NULL
		FROM AFFILIATOR
		WHERE ACTIVE = 1;
END

IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
		AND NAME = 'CARDCODE_EXT')
BEGIN
	ALTER TABLE COMMERCIAL_ESTABLISHMENT ADD CARDCODE_EXT NVARCHAR(15) NULL;
END
GO

IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
		AND NAME = 'PENDING_EXT')
BEGIN
	ALTER TABLE COMMERCIAL_ESTABLISHMENT ADD PENDING_EXT INT NOT NULL DEFAULT (1)
END
GO
IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('AFFILIATOR')
		AND NAME = 'CARDCODE_EXT')
BEGIN
	ALTER TABLE AFFILIATOR ADD CARDCODE_EXT NVARCHAR(15) NULL
END
GO

IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('AFFILIATOR')
		AND NAME = 'PENDING_EXT')
BEGIN
	ALTER TABLE AFFILIATOR ADD PENDING_EXT INT NOT NULL DEFAULT (1);
END
GO
IF OBJECT_ID('SP_LIST_PARTNER_EXTERNAL') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_LIST_PARTNER_EXTERNAL
END
GO
CREATE PROCEDURE SP_LIST_PARTNER_EXTERNAL (@COD_EXT INT,
@COD_AFF INT = NULL)
AS
BEGIN

	INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_EC, COD_EXTERNAL)
		SELECT
			1
		   ,0
		   ,CE.COD_EC
		   ,NULL
		FROM COMMERCIAL_ESTABLISHMENT CE
		LEFT JOIN EXTERNAL_PARTN_UP EPU
			ON CE.COD_EC = EPU.COD_EC
		WHERE EPU.COD_EXTERNAL_PART IS NULL

	SELECT
		*
	FROM (SELECT
			COMMERCIAL_ESTABLISHMENT.COD_EC [COD_PTN]
		   ,COMMERCIAL_ESTABLISHMENT.[NAME] [CardName]
		   ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME [ForeignName]
		   ,'A' [Type]
		   ,COMMERCIAL_ESTABLISHMENT.EMAIL [MailAddress]
		   ,COALESCE(contact.[NUMBER], Cellphone.[NUMBER]) [NUMBER]
		   ,COALESCE(contact.[DDD], Cellphone.[DDD]) [DDD]
		   ,COALESCE(contact.[COD_CONT], Cellphone.COD_CONT) [COD_CONT]
		   ,(Cellphone.DDD + Cellphone.NUMBER) [Cellphone]
		   ,'BR' [BankCountry]
		   ,BANKS.CODE [BankCode]
		   ,BANK_DETAILS_EC.ACCOUNT
		   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
		   ,BANK_DETAILS_EC.AGENCY
		   ,BANK_DETAILS_EC.DIGIT_AGENCY
		   ,ACCOUNT_TYPE.[NAME] [ACCOUNT_TYPE]
		   ,OPERATION.CODE [OPERATION]
		   ,EXTERNAL_PARTN_UP.COD_EXTERNAL OldCode
		   ,'*' [ADDRESS_NAME]
		   ,ADDRESS_BRANCH.[ADDRESS] [Street]
		   ,ADDRESS_BRANCH.NUMBER [ADR_NUMBER]
		   ,Neighborhood.[NAME] Neighborhood
		   ,ADDRESS_BRANCH.CEP
		   ,CITY.[NAME] [CITY]
		   ,[STATE].UF [STATE]
		   ,COUNTRY.INITIALS [COUNTRY]
		   ,ADDRESS_BRANCH.COMPLEMENT
		   ,(IIF(LEN(COMMERCIAL_ESTABLISHMENT.CPF_CNPJ) = 11, NULL, COMMERCIAL_ESTABLISHMENT.CPF_CNPJ)) [CNPJ]
		   ,COMMERCIAL_ESTABLISHMENT.STATE_REGISTRATION
		   ,COMMERCIAL_ESTABLISHMENT.MUNICIPAL_REGISTRATION
		   ,(IIF(LEN(COMMERCIAL_ESTABLISHMENT.CPF_CNPJ) = 11, COMMERCIAL_ESTABLISHMENT.CPF_CNPJ, NULL)) [CPF]
		   ,SEGMENTS.CNAE [CNAE]
		   ,COMMERCIAL_ESTABLISHMENT.BIRTHDATE
		   ,ROW_NUMBER() OVER (PARTITION BY COMMERCIAL_ESTABLISHMENT.CPF_CNPJ ORDER BY COMMERCIAL_ESTABLISHMENT.COD_EC) [ROW_ID]
		FROM COMMERCIAL_ESTABLISHMENT
		JOIN BRANCH_EC
			ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
			AND BRANCH_EC.ACTIVE = 1
		JOIN CONTACT_BRANCH Cellphone
			ON Cellphone.COD_BRANCH = BRANCH_EC.COD_BRANCH
			AND Cellphone.ACTIVE = 1
			AND (SELECT
					COUNT(*)
				FROM TYPE_CONTACT tp
				WHERE tp.COD_TP_CONT = Cellphone.COD_TP_CONT
				AND tp.[NAME] = 'CELULAR')
			> 0
		JOIN BANK_DETAILS_EC
			ON BANK_DETAILS_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
			AND BANK_DETAILS_EC.ACTIVE = 1
			AND BANK_DETAILS_EC.IS_CERC = 0
		JOIN BANKS
			ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
		JOIN ACCOUNT_TYPE
			ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
		JOIN ADDRESS_BRANCH
			ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
			AND ADDRESS_BRANCH.ACTIVE = 1
		JOIN Neighborhood
			ON Neighborhood.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
		JOIN CITY
			ON CITY.COD_CITY = Neighborhood.COD_CITY
		JOIN [STATE]
			ON [STATE].COD_STATE = CITY.COD_STATE
		JOIN [COUNTRY]
			ON COUNTRY.COD_COUNTRY = [STATE].COD_COUNTRY
		JOIN EXTERNAL_PARTN_UP
			ON EXTERNAL_PARTN_UP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
			AND EXTERNAL_PARTN_UP.COD_EXT_CLI = @COD_EXT
			AND EXTERNAL_PARTN_UP.UPDATED = 0
		LEFT JOIN OPERATION_BANK
			ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
		LEFT JOIN OPERATION
			ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
		LEFT JOIN CONTACT_BRANCH contact
			ON contact.COD_BRANCH = BRANCH_EC.COD_BRANCH
			AND contact.ACTIVE = 1
			AND (SELECT
					COUNT(*)
				FROM TYPE_CONTACT tp
				WHERE tp.COD_TP_CONT = contact.COD_TP_CONT
				AND tp.[NAME] = 'COMERCIAL')
			> 0
		LEFT JOIN SEGMENTS
			ON COMMERCIAL_ESTABLISHMENT.COD_SEG = SEGMENTS.COD_SEG
		WHERE COMMERCIAL_ESTABLISHMENT.ACTIVE = 1
		AND (@COD_AFF IS NULL
		OR COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF)) PN
	WHERE PN.ROW_ID = 1

END
GO

IF OBJECT_ID('SP_LIST_PARTNER_EXTERNAL_AFF') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_LIST_PARTNER_EXTERNAL_AFF
END
GO
CREATE PROCEDURE SP_LIST_PARTNER_EXTERNAL_AFF (@COD_EXT INT)
AS
BEGIN

	INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_AFFILIATOR, COD_EXTERNAL)
		SELECT
			@COD_EXT
		   ,0
		   ,AFFILIATOR.COD_AFFILIATOR
		   ,NULL
		FROM AFFILIATOR
		LEFT JOIN EXTERNAL_PARTN_UP
			ON AFFILIATOR.COD_AFFILIATOR = EXTERNAL_PARTN_UP.COD_AFFILIATOR
				AND COD_EC IS NULL
		WHERE ACTIVE = 1
		AND EXTERNAL_PARTN_UP.COD_EXTERNAL_PART IS NULL

	SELECT
		AFFILIATOR.COD_AFFILIATOR [COD_PTN]
	   ,AFFILIATOR.[NAME] [CardName]
	   ,AFFILIATOR.[NAME] [ForeignName]
	   ,'A' [Type]
	   ,'' [MailAddress]
	   ,COALESCE(contact.[NUMBER], Cellphone.[NUMBER]) [NUMBER]
	   ,COALESCE(contact.[DDD], Cellphone.[DDD]) [DDD]
	   ,COALESCE(contact.COD_CONTACT_AFL, Cellphone.COD_CONTACT_AFL) [COD_CONT]
	   ,(Cellphone.DDD + Cellphone.NUMBER) [Cellphone]
	   ,'BR' [BankCountry]
	   ,BANKS.CODE [BankCode]
	   ,BANK_DETAILS_EC.ACCOUNT
	   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
	   ,BANK_DETAILS_EC.AGENCY
	   ,BANK_DETAILS_EC.DIGIT_AGENCY
	   ,ACCOUNT_TYPE.[NAME] [ACCOUNT_TYPE]
	   ,OPERATION.CODE [OPERATION]
	   ,AFFILIATOR.CARDCODE_EXT OldCode
	   ,'*' [ADDRESS_NAME]
	   ,ADDRESS_AFFILIATOR.[ADDRESS] [Street]
	   ,ADDRESS_AFFILIATOR.NUMBER
	   ,Neighborhood.[NAME] Neighborhood
	   ,ADDRESS_AFFILIATOR.CEP
	   ,CITY.[NAME] [CITY]
	   ,[STATE].UF [STATE]
	   ,COUNTRY.INITIALS [COUNTRY]
	   ,ADDRESS_AFFILIATOR.COMPLEMENT
	   ,(IIF(LEN(AFFILIATOR.CPF_CNPJ) = 11, NULL, AFFILIATOR.CPF_CNPJ)) [CNPJ]
	   ,AFFILIATOR.STATE_REGISTRATION [STATE_REGISTRATION]
	   ,AFFILIATOR.MUNICIPAL_REGISTRATION [MUNICIPAL_REGISTRATION]
	   ,(IIF(LEN(AFFILIATOR.CPF_CNPJ) = 11, AFFILIATOR.CPF_CNPJ, NULL)) [CPF]
	   ,'7319002' [CNAE]
	   ,AFFILIATOR.CREATED_AT BIRTHDATE
	FROM AFFILIATOR
	JOIN AFFILIATOR_CONTACT Cellphone
		ON Cellphone.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			AND Cellphone.ACTIVE = 1
			AND (SELECT
					COUNT(*)
				FROM TYPE_CONTACT tp
				WHERE tp.COD_TP_CONT = Cellphone.COD_TP_CONT
				AND tp.[NAME] = 'CELULAR')
			> 0
	JOIN BANK_DETAILS_EC
		ON BANK_DETAILS_EC.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			AND BANK_DETAILS_EC.COD_EC IS NULL
			AND BANK_DETAILS_EC.ACTIVE = 1
			AND BANK_DETAILS_EC.IS_CERC = 0
	JOIN BANKS
		ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
	JOIN ACCOUNT_TYPE
		ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
	JOIN ADDRESS_AFFILIATOR
		ON ADDRESS_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			AND ADDRESS_AFFILIATOR.ACTIVE = 1
	JOIN Neighborhood
		ON Neighborhood.COD_NEIGH = ADDRESS_AFFILIATOR.COD_NEIGH
	JOIN CITY
		ON CITY.COD_CITY = Neighborhood.COD_CITY
	JOIN [STATE]
		ON [STATE].COD_STATE = CITY.COD_STATE
	JOIN [COUNTRY]
		ON COUNTRY.COD_COUNTRY = [STATE].COD_COUNTRY
	JOIN EXTERNAL_PARTN_UP
		ON EXTERNAL_PARTN_UP.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			AND EXTERNAL_PARTN_UP.COD_EXT_CLI = @COD_EXT
	LEFT JOIN OPERATION_BANK
		ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
	LEFT JOIN OPERATION
		ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
	LEFT JOIN AFFILIATOR_CONTACT contact
		ON contact.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			AND contact.ACTIVE = 1
			AND (SELECT
					COUNT(*)
				FROM TYPE_CONTACT tp
				WHERE tp.COD_TP_CONT = contact.COD_TP_CONT
				AND tp.[NAME] = 'COMERCIAL')
			> 0
	LEFT JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = AFFILIATOR.CPF_CNPJ
			AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1
	WHERE AFFILIATOR.ACTIVE = 1
	AND EXTERNAL_PARTN_UP.UPDATED = 0
	AND COMMERCIAL_ESTABLISHMENT.CPF_CNPJ IS NULL
END
GO

IF OBJECT_ID('SP_UPDATE_STATUS_PARTNER_EC') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UPDATE_STATUS_PARTNER_EC
END
GO
CREATE PROCEDURE SP_UPDATE_STATUS_PARTNER_EC (@DOCUMENT VARCHAR(14),
@COD_EXT NVARCHAR(15))
AS
BEGIN
	UPDATE EXTERNAL_PARTN_UP
	SET UPDATED = 1
	   ,COD_EXTERNAL = REPLACE(@COD_EXT, ' ', '')
	FROM EXTERNAL_PARTN_UP
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = EXTERNAL_PARTN_UP.COD_EC
	WHERE COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = @DOCUMENT
END
GO

IF OBJECT_ID('SP_UPDATE_STATUS_PARTNER_AF') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UPDATE_STATUS_PARTNER_AF
END
GO
CREATE PROCEDURE SP_UPDATE_STATUS_PARTNER_AF (@DOCUMENT VARCHAR(14),
@COD_EXT NVARCHAR(15))
AS
BEGIN
	UPDATE EXTERNAL_PARTN_UP
	SET UPDATED = 1
	   ,COD_EXTERNAL = REPLACE(@COD_EXT, ' ', '')
	FROM EXTERNAL_PARTN_UP
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EXTERNAL_PARTN_UP.COD_AFFILIATOR
	WHERE AFFILIATOR.CPF_CNPJ = @DOCUMENT
END
GO
----------------------------------------------------------------------------------
--------------update
--------------------------------------------------
IF OBJECT_ID('SP_UPDATE_PARTNER_EXT_EC') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UPDATE_PARTNER_EXT_EC
END
GO
CREATE PROCEDURE SP_UPDATE_PARTNER_EXT_EC (@DOCUMENT VARCHAR(14))
AS
BEGIN
	UPDATE EXTERNAL_PARTN_UP
	SET UPDATED = 0
	FROM EXTERNAL_PARTN_UP
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = EXTERNAL_PARTN_UP.COD_EC
	WHERE COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = @DOCUMENT
END
GO

IF OBJECT_ID('SP_UPDATE_PARTNER_EXT_AF') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UPDATE_PARTNER_EXT_AF
END
GO
CREATE PROCEDURE SP_UPDATE_PARTNER_EXT_AF (@DOCUMENT VARCHAR(14))
AS
BEGIN
	UPDATE EXTERNAL_PARTN_UP
	SET UPDATED = 0
	FROM EXTERNAL_PARTN_UP
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EXTERNAL_PARTN_UP.COD_AFFILIATOR
	WHERE AFFILIATOR.CPF_CNPJ = @DOCUMENT
END
GO

IF OBJECT_ID('SP_REGISTER_PARTNER_EXT_EC') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REGISTER_PARTNER_EXT_EC
END
GO
CREATE PROCEDURE SP_REGISTER_PARTNER_EXT_EC (@COD_EXT_CLI INT,
@DOCUMENT VARCHAR(14))
AS
BEGIN
	IF (SELECT
				COUNT(*)
			FROM EXTERNAL_PARTN_UP ext
			JOIN COMMERCIAL_ESTABLISHMENT ec
				ON ec.COD_EC = ext.COD_EC
			WHERE ext.COD_EXT_CLI = @COD_EXT_CLI
			AND ec.CPF_CNPJ = @DOCUMENT)
		= 0
	BEGIN
		INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_EC, COD_EXTERNAL)
			VALUES (@COD_EXT_CLI, 0, (SELECT TOP 1 ec.COD_EC FROM COMMERCIAL_ESTABLISHMENT ec WHERE ec.CPF_CNPJ = @DOCUMENT), NULL)
	END
END
GO

IF OBJECT_ID('SP_REGISTER_PARTNER_EXT_AF') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REGISTER_PARTNER_EXT_AF
END
GO
CREATE PROCEDURE SP_REGISTER_PARTNER_EXT_AF (@COD_EXT_CLI INT,
@DOCUMENT VARCHAR(14))
AS
BEGIN
	IF (SELECT
				COUNT(*)
			FROM EXTERNAL_PARTN_UP ext
			JOIN AFFILIATOR af
				ON af.COD_AFFILIATOR = ext.COD_AFFILIATOR
			WHERE ext.COD_EXT_CLI = @COD_EXT_CLI
			AND af.CPF_CNPJ = @DOCUMENT)
		= 0
	BEGIN
		INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_AFFILIATOR, COD_EXTERNAL)
			VALUES (@COD_EXT_CLI, 0, (SELECT TOP 1 COD_AFFILIATOR FROM AFFILIATOR af WHERE af.CPF_CNPJ = @DOCUMENT), NULL)
	END
END
GO
IF OBJECT_ID('SP_LIST_PARTNER_EXTERNAL_ACQ') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_LIST_PARTNER_EXTERNAL_ACQ
END
GO
CREATE PROCEDURE SP_LIST_PARTNER_EXTERNAL_ACQ
/*---------------------------------r-------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author              VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Luiz Aquino        V1          2020-08-13       CREATED      
------------------------------------------------------------------------------------------*/
AS
BEGIN

	INSERT INTO ACQUIRE_PARTNER_EXT (COD_EXT_CLI, UPDATED, COD_AC)
		SELECT
			1
		   ,0
		   ,A.COD_AC
		FROM ACQUIRER(NOLOCK) A
		LEFT JOIN ACQUIRE_PARTNER_EXT(NOLOCK) APE
			ON A.COD_AC = APE.COD_AC
		WHERE ACTIVE = 1
		AND APE.COD_ACQ_EXT IS NULL;

	SELECT
		A.CODE [COD_PTN]
	   ,A.NAME [CardName]
	   ,A.NAME [ForeignName]
	   ,'C' [Type]
	FROM ACQUIRE_PARTNER_EXT APE
	JOIN ACQUIRER A
		ON APE.COD_AC = A.COD_AC
	WHERE APE.COD_EXTERNAL IS NULL
	OR APE.UPDATED = 1

END
GO
IF OBJECT_ID('SP_UP_PARTNER_EXTERNAL_ACQ') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UP_PARTNER_EXTERNAL_ACQ
END
GO
CREATE PROCEDURE SP_UP_PARTNER_EXTERNAL_ACQ
/*---------------------------------r-------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author              VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Luiz Aquino        V1          2020-08-13       CREATED      
------------------------------------------------------------------------------------------*/ (@CODE_AC VARCHAR(64),
@COD_EXT VARCHAR(128))
AS
BEGIN

	UPDATE APE
	SET COD_EXTERNAL = REPLACE(@COD_EXT, ' ', '')
	FROM ACQUIRE_PARTNER_EXT APE
	JOIN ACQUIRER A
		ON APE.COD_AC = A.COD_AC
	WHERE A.CODE = @CODE_AC

END
GO

--2° 

IF OBJECT_ID('OPEN_LEDGER_ESTABLISHMENT') IS NULL
BEGIN
	CREATE TABLE OPEN_LEDGER_ESTABLISHMENT (
		COD_LEDGER_ESTAB BIGINT IDENTITY
	   ,COD_EXT_CLI INT NOT NULL FOREIGN KEY REFERENCES EXTERNAL_CLIENTS (COD_EXT_CLI)
	   ,COD_EC INT NOT NULL FOREIGN KEY REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC)
	   ,DATE_TRANSACTION INT NOT NULL
	   ,PAY_DATE INT NOT NULL
	   ,PAY_TYPE INT NOT NULL
	   ,ANTECIPATION DECIMAL(22, 6) NOT NULL
	   ,MDR DECIMAL(22, 6) NOT NULL
	   ,TPV DECIMAL(22, 6) NOT NULL
	   ,TARIFF DECIMAL(22, 6) NOT NULL DEFAULT (0)
	   ,UPDATED INT NOT NULL DEFAULT (1)
	   ,LCM INT NULL
	   ,SENT_ON_INVOICE INT NOT NULL DEFAULT (0)
		CONSTRAINT PK_OPEN_LEGER_EC PRIMARY KEY NONCLUSTERED (COD_LEDGER_ESTAB)
	)
END
GO
IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('OPEN_LEDGER_ESTABLISHMENT')
		AND NAME = 'IDX_OPEN_LEDGER_EC_DATE')
BEGIN
	CREATE CLUSTERED INDEX IDX_OPEN_LEDGER_EC_DATE ON OPEN_LEDGER_ESTABLISHMENT (COD_EC, PAY_DATE, DATE_TRANSACTION);
END
GO
IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('OPEN_LEDGER_ESTABLISHMENT')
		AND NAME = 'IDX_OPEN_LEDGER_LCM')
BEGIN
	CREATE NONCLUSTERED INDEX IDX_OPEN_LEDGER_LCM ON OPEN_LEDGER_ESTABLISHMENT (COD_LEDGER_ESTAB) INCLUDE (LCM)
END
GO

IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('RELEASE_ADJUSTMENTS')
		AND NAME = 'COD_LEDGER_ESTAB')
BEGIN
	ALTER TABLE RELEASE_ADJUSTMENTS ADD COD_LEDGER_ESTAB BIGINT NULL REFERENCES OPEN_LEDGER_ESTABLISHMENT (COD_LEDGER_ESTAB)
END
GO

IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('TARIFF_EC')
		AND NAME = 'COD_LEDGER_ESTAB')
BEGIN
	ALTER TABLE TARIFF_EC ADD COD_LEDGER_ESTAB BIGINT NULL REFERENCES OPEN_LEDGER_ESTABLISHMENT (COD_LEDGER_ESTAB)
END
GO

IF NOT EXISTS (SELECT
			NAME
		FROM sys.columns
		WHERE object_id = OBJECT_ID('TRANSACTION_TITLES')
		AND NAME = 'COD_LEDGER_ESTAB')
BEGIN
	ALTER TABLE TRANSACTION_TITLES ADD COD_LEDGER_ESTAB BIGINT NULL REFERENCES OPEN_LEDGER_ESTABLISHMENT (COD_LEDGER_ESTAB)
END
GO

IF OBJECT_ID('VW_LIST_OPEN_LEDGER_EC') IS NOT NULL
BEGIN
	DROP VIEW VW_LIST_OPEN_LEDGER_EC
END
GO
CREATE VIEW VW_LIST_OPEN_LEDGER_EC
AS

SELECT
	title.COD_EC
   ,(YEAR([T].BRAZILIAN_DATE) * 10000 + MONTH([T].BRAZILIAN_DATE) * 100 + DAY([T].BRAZILIAN_DATE)) AS CREATED_AT
   ,(YEAR(title.PREVISION_PAY_DATE) * 10000 + MONTH(title.PREVISION_PAY_DATE) * 100 + DAY(title.PREVISION_PAY_DATE)) AS PREVISION_PAY_DATE
   ,CAST(((title.[AMOUNT] * (1 - (([title].[TAX_INITIAL] + IIF(title.TAX_PLANDZERO IS NULL, 0, title.TAX_PLANDZERO)) / 100)) *
	IIF([title].[ANTICIP_PERCENT] IS NULL, 1,
	1 - ((([title].[ANTICIP_PERCENT] / 30) * IIF([title].[IS_SPOT] = 0, IIF([title].[QTY_DAYS_ANTECIP] IS NULL, ([title].[PLOT] * 30) - 1, [title].[QTY_DAYS_ANTECIP]), DATEDIFF(DAY, [title].[PREVISION_PAY_DATE], [title].[ORIGINAL_RECEIVE_DATE]))) / 100))
	) - (IIF([title].[PLOT] = 1, [title].[RATE], 0))) AS DECIMAL(22, 6)) AS PLOT_VALUE_PAYMENT
   ,'TITLE' AS TYPE_RELEASE
   ,CAST(((title.AMOUNT * ([title].[TAX_INITIAL] + IIF(title.TAX_PLANDZERO IS NULL, 0, title.TAX_PLANDZERO)) / 100) + IIF(title.PLOT = 1, title.RATE, 0)) AS DECIMAL(22, 6)) [MDR]
   ,IIF(title.ANTICIP_PERCENT IS NULL, 0,
	title.[AMOUNT] * (1 - (([title].[TAX_INITIAL] + IIF(title.TAX_PLANDZERO IS NULL, 0, title.TAX_PLANDZERO)) / 100)) *
	((([title].[ANTICIP_PERCENT] / 30) * IIF([title].[IS_SPOT] = 0, IIF([title].[QTY_DAYS_ANTECIP] IS NULL, ([title].[PLOT] * 30) - 1, [title].[QTY_DAYS_ANTECIP]), DATEDIFF(DAY, [title].[PREVISION_PAY_DATE], [title].[ORIGINAL_RECEIVE_DATE]))) / 100)
	) ANTICIPATION
   ,title.COD_TITLE [COD_RELEASE]
   ,title.COD_LEDGER_ESTAB
FROM dbo.TRANSACTION_TITLES title WITH (NOLOCK)
INNER JOIN [TRANSACTION] T (NOLOCK)
	ON [T].COD_TRAN = title.COD_TRAN
INNER JOIN dbo.COMMERCIAL_ESTABLISHMENT(NOLOCK)
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = title.COD_EC
		AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION != 24
LEFT JOIN AFFILIATOR(NOLOCK)
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE (title.COD_SITUATION = 4)
AND (AFFILIATOR.COD_SITUATION IS NULL
OR AFFILIATOR.COD_SITUATION != 24)

UNION ALL

SELECT
	RA.COD_EC
   ,(YEAR(RA.CREATED_AT) * 10000 + MONTH(RA.CREATED_AT) * 100 + DAY(RA.CREATED_AT)) AS CREATED_AT
   ,(YEAR(RA.PREVISION_PAY_DATE) * 10000 + MONTH(RA.PREVISION_PAY_DATE) * 100 + DAY(RA.PREVISION_PAY_DATE)) AS PREVISION_PAY_DATE
   ,RA.[VALUE] AS PLOT_VALUE_PAYMENT
   ,'AJUSTE' AS TYPE_RELEASE
   ,0 AS [MDR]
   ,0 AS [ANTICIPATION]
   ,RA.COD_REL_ADJ AS [COD_RELEASE]
   ,RA.COD_LEDGER_ESTAB
FROM dbo.RELEASE_ADJUSTMENTS RA (NOLOCK)
INNER JOIN COMMERCIAL_ESTABLISHMENT(NOLOCK) EC
	ON EC.COD_EC = RA.COD_EC
		AND EC.COD_SITUATION != 24
LEFT JOIN AFFILIATOR(NOLOCK)
	ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
WHERE (RA.COD_SITUATION = 4)
AND (AFFILIATOR.COD_SITUATION IS NULL
OR AFFILIATOR.COD_SITUATION != 24)

UNION ALL

SELECT
	t.COD_EC
   ,CASE
		WHEN t.CREATED_AT < '2020-10-01' THEN 20201001
		ELSE (YEAR(t.CREATED_AT) * 10000 + MONTH(t.CREATED_AT) * 100 + DAY(t.CREATED_AT))
	END AS CREATED_AT
   ,(YEAR(t.PAYMENT_DAY) * 10000 + MONTH(t.PAYMENT_DAY) * 100 + DAY(t.PAYMENT_DAY)) AS PREVISION_PAY_DATE
   ,t.[VALUE] AS PLOT_VALUE_PAYMENT
   ,'TARIFA' AS TYPE_RELEASE
   ,0 AS [MDR]
   ,0 AS [ANTICIPATION]
   ,t.COD_TARIFF_EC AS [COD_RELEASE]
   ,t.COD_LEDGER_ESTAB
FROM dbo.TARIFF_EC t (NOLOCK)
INNER JOIN dbo.COMMERCIAL_ESTABLISHMENT(NOLOCK) AS EC
	ON EC.COD_EC = t.COD_EC
		AND EC.COD_SITUATION != 24
LEFT JOIN AFFILIATOR(NOLOCK)
	ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
WHERE (t.COD_SITUATION = 4)
AND (AFFILIATOR.COD_SITUATION IS NULL
OR AFFILIATOR.COD_SITUATION != 24)
GO

IF OBJECT_ID('SP_LIST_OPEN_LEDGER_EC') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_LIST_OPEN_LEDGER_EC
END
GO
CREATE PROCEDURE SP_LIST_OPEN_LEDGER_EC
/*---------------------------------r-------------------------------------------------------    
    Project.......: TKPP    
------------------------------------------------------------------------------------------    
    Author              VERSION     Date            Description    
------------------------------------------------------------------------------------------    
    Luiz Aquino            V1        23/09/2019      CREATED
------------------------------------------------------------------------------------------*/ (@REF_SMARTDATE INT,
@COD_EXT INT = 1 -- EXT 1 = SAP
)
AS
BEGIN
	SELECT
		OPEN_LEDGER_ESTABLISHMENT.COD_LEDGER_ESTAB
	   ,DATE_TRANSACTION
	   ,PAY_DATE
	   ,PAY_TYPE
	   ,ANTECIPATION
	   ,LCM
	   ,CASE
			WHEN OPEN_LEDGER_ESTABLISHMENT.PAY_TYPE = 1 THEN 0
			ELSE OPEN_LEDGER_ESTABLISHMENT.MDR
		END AS MDR
	   ,TPV
	   ,EXTERNAL_PARTN_UP.COD_EXTERNAL
	   ,TARIFF
	FROM OPEN_LEDGER_ESTABLISHMENT
	JOIN EXTERNAL_PARTN_UP
		ON EXTERNAL_PARTN_UP.COD_EC = OPEN_LEDGER_ESTABLISHMENT.COD_EC
			AND EXTERNAL_PARTN_UP.COD_EXT_CLI = @COD_EXT
	WHERE OPEN_LEDGER_ESTABLISHMENT.PAY_DATE >= @REF_SMARTDATE
	AND OPEN_LEDGER_ESTABLISHMENT.UPDATED = 1
	AND OPEN_LEDGER_ESTABLISHMENT.COD_EXT_CLI = @COD_EXT
END
GO

IF OBJECT_ID('SP_SET_OPEN_LEDGER_UPDATE') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_SET_OPEN_LEDGER_UPDATE
END
GO
CREATE PROCEDURE SP_SET_OPEN_LEDGER_UPDATE
/*---------------------------------r-------------------------------------------------------    
    Project.......: TKPP    
------------------------------------------------------------------------------------------    
    Author              VERSION     Date            Description    
------------------------------------------------------------------------------------------    
    Luiz Aquino            V1        23/09/2019      CREATED
------------------------------------------------------------------------------------------*/ (@REF_SMARTDATE INT,
@COD_EXT INT = 1 -- EXT 1 = SAP
)
AS
BEGIN

	DECLARE @TODAY INT = (YEAR(GETDATE()) * 10000 + MONTH(GETDATE()) * 100)

	CREATE TABLE #Temp_Open_Ledger (
		COD_EC INT NOT NULL
	   ,CREATED_AT INT NOT NULL
	   ,PREVISION_PAY_DATE INT NOT NULL
	   ,PLOT_VALUE_PAYMENT DECIMAL(22, 6) NOT NULL
	   ,TYPE_RELEASE VARCHAR(16)
	   ,TRAN_TYPE INT NOT NULL
	   ,MDR DECIMAL(22, 6) NOT NULL
	   ,[ANTICIPATION] DECIMAL(22, 6) NOT NULL
	   ,[COD_RELEASE] INT NOT NULL
	   ,COD_OPEN_LEDGER BIGINT NULL
	)

	CREATE CLUSTERED INDEX IDX_TEMP_LEDGER ON #Temp_Open_Ledger (COD_EC, CREATED_AT, PREVISION_PAY_DATE)

	CREATE NONCLUSTERED INDEX IDX_TEMP_LEDGER_COD ON #Temp_Open_Ledger (TYPE_RELEASE) INCLUDE ([COD_RELEASE], COD_OPEN_LEDGER)

	INSERT INTO #Temp_Open_Ledger (COD_EC, CREATED_AT, PREVISION_PAY_DATE, PLOT_VALUE_PAYMENT, TYPE_RELEASE, TRAN_TYPE, [MDR], [ANTICIPATION], [COD_RELEASE], COD_OPEN_LEDGER)
		SELECT
			COD_EC
		   ,CREATED_AT
		   ,PREVISION_PAY_DATE
		   ,PLOT_VALUE_PAYMENT
		   ,TYPE_RELEASE
		   ,IIF((PREVISION_PAY_DATE - @TODAY) < 100, 1, 2) [TRAN_TYPE]
		   ,[MDR]
		   ,[ANTICIPATION]
		   ,[COD_RELEASE]
		   ,COD_LEDGER_ESTAB
		FROM VW_LIST_OPEN_LEDGER_EC
		WHERE PREVISION_PAY_DATE BETWEEN @REF_SMARTDATE AND (@REF_SMARTDATE + 10000)
		OR (TYPE_RELEASE = 'TARIFA'
		AND PREVISION_PAY_DATE BETWEEN 20180609 AND (@REF_SMARTDATE + 10000))

	SELECT
		@COD_EXT [COD_EXT_CLI]
	   ,ldg.COD_EC
	   ,ldg.CREATED_AT
	   ,ldg.PREVISION_PAY_DATE
	   ,ldg.TRAN_TYPE
	   ,SUM(ldg.ANTICIPATION) [ANTICIPATION]
	   ,SUM(ldg.MDR) [MDR]
	   ,SUM(IIF(ldg.PLOT_VALUE_PAYMENT > 0, ldg.PLOT_VALUE_PAYMENT, 0)) [TPV]
	   ,SUM(IIF(ldg.PLOT_VALUE_PAYMENT < 0, (ldg.PLOT_VALUE_PAYMENT * -1), 0)) [TARIFF] INTO #temp_grouped
	FROM #Temp_Open_Ledger ldg
	GROUP BY ldg.COD_EC
			,ldg.CREATED_AT
			,ldg.PREVISION_PAY_DATE
			,ldg.TRAN_TYPE

	-------------------------------UPDATE ---------------------------------------------------------

	UPDATE OPEN_LEDGER_ESTABLISHMENT
	SET TPV = grpd.[TPV]
	   ,MDR = grpd.[MDR]
	   ,ANTECIPATION = grpd.[ANTICIPATION]
	   ,PAY_TYPE = grpd.TRAN_TYPE
	   ,TARIFF = grpd.TARIFF
	   ,UPDATED = 1
	FROM #temp_grouped grpd
	JOIN OPEN_LEDGER_ESTABLISHMENT ldger
		ON grpd.COD_EC = ldger.COD_EC
		AND grpd.CREATED_AT = ldger.DATE_TRANSACTION
		AND grpd.PREVISION_PAY_DATE = ldger.PAY_DATE
		AND grpd.[COD_EXT_CLI] = ldger.[COD_EXT_CLI]
	WHERE grpd.[ANTICIPATION] != ldger.ANTECIPATION
	OR grpd.[MDR] != ldger.[MDR]
	OR grpd.TPV != ldger.[TPV]
	OR grpd.TRAN_TYPE != ldger.PAY_TYPE
	OR ldger.TARIFF != grpd.TARIFF

	UPDATE OPEN_LEDGER_ESTABLISHMENT
	SET TPV = 0
	   ,MDR = 0
	   ,ANTECIPATION = 0
	   ,TARIFF = 0
	   ,UPDATED = 1
	FROM OPEN_LEDGER_ESTABLISHMENT ldger
	LEFT JOIN #temp_grouped grpd
		ON grpd.COD_EC = ldger.COD_EC
		AND grpd.CREATED_AT = ldger.DATE_TRANSACTION
		AND grpd.PREVISION_PAY_DATE = ldger.PAY_DATE
		AND grpd.[COD_EXT_CLI] = ldger.[COD_EXT_CLI]
	WHERE ldger.PAY_DATE > @REF_SMARTDATE
	AND (ldger.TPV > 0
	OR ldger.TARIFF > 0)
	AND grpd.COD_EC IS NULL

	-----------------------------INSERT-------------------------------------------------------------

	INSERT INTO OPEN_LEDGER_ESTABLISHMENT (COD_EXT_CLI, COD_EC, DATE_TRANSACTION, PAY_DATE, PAY_TYPE, ANTECIPATION, MDR, TPV, TARIFF)
		SELECT
			grpd.[COD_EXT_CLI]
		   ,grpd.COD_EC
		   ,grpd.CREATED_AT
		   ,grpd.PREVISION_PAY_DATE
		   ,grpd.TRAN_TYPE
		   ,grpd.[ANTICIPATION]
		   ,grpd.[MDR]
		   ,grpd.[TPV]
		   ,grpd.TARIFF
		FROM #temp_grouped grpd
		LEFT JOIN OPEN_LEDGER_ESTABLISHMENT ldger
			ON grpd.COD_EC = ldger.COD_EC
				AND grpd.CREATED_AT = ldger.DATE_TRANSACTION
				AND grpd.PREVISION_PAY_DATE = ldger.PAY_DATE
				AND grpd.TRAN_TYPE = ldger.PAY_TYPE
				AND grpd.[COD_EXT_CLI] = ldger.[COD_EXT_CLI]
		WHERE ldger.COD_LEDGER_ESTAB IS NULL

	--------------------------------UPDATE Entities-----------------------------------------------------------
	UPDATE RELEASE_ADJUSTMENTS
	SET COD_LEDGER_ESTAB = ldger.COD_LEDGER_ESTAB
	FROM #Temp_Open_Ledger temp_ldg
	JOIN OPEN_LEDGER_ESTABLISHMENT ldger
		ON temp_ldg.COD_EC = ldger.COD_EC
		AND temp_ldg.CREATED_AT = ldger.DATE_TRANSACTION
		AND temp_ldg.PREVISION_PAY_DATE = ldger.PAY_DATE
		AND temp_ldg.TRAN_TYPE = ldger.PAY_TYPE
		AND ldger.[COD_EXT_CLI] = @COD_EXT
		AND UPDATED = 1
	JOIN RELEASE_ADJUSTMENTS
		ON RELEASE_ADJUSTMENTS.COD_REL_ADJ = temp_ldg.COD_RELEASE
	WHERE temp_ldg.TYPE_RELEASE = 'AJUSTE'

	UPDATE TRANSACTION_TITLES
	SET COD_LEDGER_ESTAB = ldger.COD_LEDGER_ESTAB
	FROM #Temp_Open_Ledger temp_ldg
	JOIN OPEN_LEDGER_ESTABLISHMENT ldger
		ON temp_ldg.COD_EC = ldger.COD_EC
		AND temp_ldg.CREATED_AT = ldger.DATE_TRANSACTION
		AND temp_ldg.PREVISION_PAY_DATE = ldger.PAY_DATE
		AND temp_ldg.TRAN_TYPE = ldger.PAY_TYPE
		AND ldger.[COD_EXT_CLI] = @COD_EXT
		AND UPDATED = 1
	JOIN [TRANSACTION_TITLES]
		ON TRANSACTION_TITLES.COD_TITLE = temp_ldg.COD_RELEASE
	WHERE temp_ldg.TYPE_RELEASE = 'TITLE'

	UPDATE TARIFF_EC
	SET COD_LEDGER_ESTAB = ldger.COD_LEDGER_ESTAB
	FROM #Temp_Open_Ledger temp_ldg
	JOIN OPEN_LEDGER_ESTABLISHMENT ldger
		ON temp_ldg.COD_EC = ldger.COD_EC
		AND temp_ldg.CREATED_AT = ldger.DATE_TRANSACTION
		AND temp_ldg.PREVISION_PAY_DATE = ldger.PAY_DATE
		AND temp_ldg.TRAN_TYPE = ldger.PAY_TYPE
		AND ldger.[COD_EXT_CLI] = @COD_EXT
		AND UPDATED = 1
	JOIN TARIFF_EC
		ON TARIFF_EC.COD_TARIFF_EC = temp_ldg.COD_RELEASE
	WHERE temp_ldg.TYPE_RELEASE = 'TARIFA'

END
GO

IF OBJECT_ID('SP_SET_UPDATED_LEDGER_EC') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_SET_UPDATED_LEDGER_EC
END
GO
IF TYPE_ID('TP_UP_OPEN_LEDGER') IS NOT NULL
BEGIN
	DROP TYPE TP_UP_OPEN_LEDGER
END
GO
CREATE TYPE dbo.TP_UP_OPEN_LEDGER AS TABLE
(
COD_LEDGER_ESTAB BIGINT NOT NULL,
LCM INT NOT NULL
)
GO
CREATE PROCEDURE SP_SET_UPDATED_LEDGER_EC
/*---------------------------------r-------------------------------------------------------    
    Project.......: TKPP    
------------------------------------------------------------------------------------------    
    Author              VERSION     Date            Description    
------------------------------------------------------------------------------------------    
    Luiz Aquino            V1        23/09/2019      CREATED
------------------------------------------------------------------------------------------*/ (@Ledgers TP_UP_OPEN_LEDGER READONLY)
AS
BEGIN

	UPDATE OPEN_LEDGER_ESTABLISHMENT
	SET UPDATED = 0
	   ,LCM = ldg.LCM
	FROM @Ledgers ldg
	JOIN OPEN_LEDGER_ESTABLISHMENT
		ON OPEN_LEDGER_ESTABLISHMENT.COD_LEDGER_ESTAB = ldg.COD_LEDGER_ESTAB;
END
GO

--3°

IF OBJECT_ID('OPEN_LEDGER_SUBACQUIRE') IS NULL
BEGIN
	CREATE TABLE OPEN_LEDGER_SUBACQUIRE (
		COD_LEDGER_SUB INT NOT NULL IDENTITY
	   ,COD_EXT_CLI INT NOT NULL FOREIGN KEY REFERENCES EXTERNAL_CLIENTS (COD_EXT_CLI)
	   ,COD_AC INT NOT NULL FOREIGN KEY REFERENCES ACQUIRER (COD_AC)
	   ,RECEIVE_DATE INT NOT NULL
	   ,AMOUNT DECIMAL(26, 6) NOT NULL
	   ,UPDATED INT NOT NULL DEFAULT (1)
	   ,LCM INT NULL
	   ,CONSTRAINT PK_OPEN_LEDGER_SUB PRIMARY KEY NONCLUSTERED (COD_LEDGER_SUB)
	)
END
GO

IF NOT EXISTS (SELECT
			index_id
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('OPEN_LEDGER_SUBACQUIRE')
		AND NAME = 'IDX_OPEN_LEDGER_SUB_DATE')
BEGIN
	CREATE CLUSTERED INDEX IDX_OPEN_LEDGER_SUB_DATE ON OPEN_LEDGER_SUBACQUIRE (RECEIVE_DATE, COD_AC)
END
GO

IF NOT EXISTS (SELECT
			index_id
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('OPEN_LEDGER_SUBACQUIRE')
		AND NAME = 'IDX_OPEN_LEDGER_SUB_LCM')
BEGIN
	CREATE NONCLUSTERED INDEX IDX_OPEN_LEDGER_SUB_LCM ON OPEN_LEDGER_SUBACQUIRE (COD_LEDGER_SUB) INCLUDE (LCM)
END
GO
IF NOT EXISTS (SELECT
			column_id
		FROM sys.columns
		WHERE object_id = OBJECT_ID('TRANSACTION_TITLES')
		AND NAME = 'COD_LEDGER_SUB')
BEGIN
	ALTER TABLE TRANSACTION_TITLES ADD COD_LEDGER_SUB INT NULL FOREIGN KEY REFERENCES OPEN_LEDGER_SUBACQUIRE (COD_LEDGER_SUB)
END
GO
IF OBJECT_ID('VW_ACQUIRE_TO_RECEIVE') IS NOT NULL
BEGIN
	DROP VIEW VW_ACQUIRE_TO_RECEIVE
END
GO
CREATE VIEW VW_ACQUIRE_TO_RECEIVE
AS
SELECT
	(title.AMOUNT * ((100 - title.ACQ_TAX) / 100)) [Total]
   ,ACQUIRER.COD_AC
   ,(YEAR(title.PREVISION_RECEIVE_DATE) * 10000 + MONTH(title.PREVISION_RECEIVE_DATE) * 100 + DAY(title.PREVISION_RECEIVE_DATE)) RECEIVE_DATE
   ,title.COD_TITLE
   ,title.COD_LEDGER_SUB
FROM TRANSACTION_TITLES title
JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = title.COD_TRAN
JOIN PRODUCTS_ACQUIRER
	ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
JOIN ACQUIRER
	ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC

WHERE title.COD_SITUATION IN (4, 8)
GO


IF OBJECT_ID('SP_REVISE_LEDGER_SUB') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REVISE_LEDGER_SUB
END
GO
CREATE PROCEDURE SP_REVISE_LEDGER_SUB (@REF_SMARTDATE INT,
@COD_EXT INT = 1)
AS
BEGIN

	CREATE TABLE #Temp_Ledger (
		COD_AC INT NOT NULL
	   ,TOTAL DECIMAL(22, 6) NOT NULL
	   ,RECEIVE_DATE INT NOT NULL
	   ,COD_TITLE INT NOT NULL
	)

	CREATE CLUSTERED INDEX IDX_Temp_sub_ledger_date ON #Temp_Ledger (RECEIVE_DATE, COD_AC)

	INSERT INTO #Temp_Ledger (COD_AC, TOTAL, RECEIVE_DATE, COD_TITLE)
		SELECT
			COD_AC
		   ,[TOTAL]
		   ,RECEIVE_DATE
		   ,COD_TITLE
		FROM VW_ACQUIRE_TO_RECEIVE
		WHERE RECEIVE_DATE > @REF_SMARTDATE

	SELECT
		@COD_EXT [COD_EXT_CLI]
	   ,COD_AC
	   ,RECEIVE_DATE
	   ,SUM(TOTAL) [TOTAL] INTO #Group_Ledger
	FROM #Temp_Ledger
	GROUP BY RECEIVE_DATE
			,COD_AC

	UPDATE OPEN_LEDGER_SUBACQUIRE
	SET AMOUNT = grp.TOTAL
	   ,UPDATED = 1
	FROM #Group_Ledger grp
	JOIN OPEN_LEDGER_SUBACQUIRE
		ON OPEN_LEDGER_SUBACQUIRE.RECEIVE_DATE = grp.RECEIVE_DATE
		AND OPEN_LEDGER_SUBACQUIRE.COD_AC = grp.COD_AC
		AND OPEN_LEDGER_SUBACQUIRE.COD_EXT_CLI = grp.[COD_EXT_CLI]
		AND OPEN_LEDGER_SUBACQUIRE.AMOUNT != grp.TOTAL

	UPDATE OPEN_LEDGER_SUBACQUIRE
	SET AMOUNT = 0
	   ,UPDATED = 1
	FROM OPEN_LEDGER_SUBACQUIRE
	LEFT JOIN #Group_Ledger grp
		ON OPEN_LEDGER_SUBACQUIRE.RECEIVE_DATE = grp.RECEIVE_DATE
		AND OPEN_LEDGER_SUBACQUIRE.COD_AC = grp.COD_AC
		AND OPEN_LEDGER_SUBACQUIRE.COD_EXT_CLI = grp.[COD_EXT_CLI]
	WHERE OPEN_LEDGER_SUBACQUIRE.RECEIVE_DATE > @REF_SMARTDATE
	AND grp.COD_AC IS NULL

	INSERT INTO OPEN_LEDGER_SUBACQUIRE (COD_EXT_CLI, COD_AC, RECEIVE_DATE, AMOUNT)
		SELECT
			grp.[COD_EXT_CLI]
		   ,grp.COD_AC
		   ,grp.RECEIVE_DATE
		   ,grp.TOTAL
		FROM #Group_Ledger grp
		LEFT JOIN OPEN_LEDGER_SUBACQUIRE
			ON OPEN_LEDGER_SUBACQUIRE.RECEIVE_DATE = grp.RECEIVE_DATE
				AND OPEN_LEDGER_SUBACQUIRE.COD_AC = grp.COD_AC
				AND OPEN_LEDGER_SUBACQUIRE.COD_EXT_CLI = grp.[COD_EXT_CLI]
		WHERE OPEN_LEDGER_SUBACQUIRE.COD_LEDGER_SUB IS NULL


	UPDATE TRANSACTION_TITLES
	SET COD_LEDGER_SUB = ledger.COD_LEDGER_SUB
	FROM #Temp_Ledger tmp_ldg
	JOIN OPEN_LEDGER_SUBACQUIRE ledger
		ON ledger.RECEIVE_DATE = tmp_ldg.RECEIVE_DATE
		AND ledger.COD_AC = tmp_ldg.COD_AC
		AND ledger.UPDATED = 1
	JOIN TRANSACTION_TITLES
		ON TRANSACTION_TITLES.COD_TITLE = tmp_ldg.COD_TITLE

END
GO

IF OBJECT_ID('ACQUIRE_PARTNER_EXT') IS NULL
BEGIN
	CREATE TABLE ACQUIRE_PARTNER_EXT (
		COD_ACQ_EXT INT NOT NULL PRIMARY KEY IDENTITY
	   ,COD_EXT_CLI INT NOT NULL FOREIGN KEY REFERENCES EXTERNAL_CLIENTS (COD_EXT_CLI)
	   ,UPDATED INT NOT NULL DEFAULT (0)
	   ,COD_AC INT NOT NULL FOREIGN KEY REFERENCES ACQUIRER (COD_AC)
	   ,COD_EXTERNAL NVARCHAR(15) NULL
	   ,CONSTRAINT EXTERNAL_PARTN_ACQ UNIQUE (COD_EXT_CLI, COD_AC)
	)
END
GO

IF NOT EXISTS (SELECT
			index_id
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('ACQUIRE_PARTNER_EXT')
		AND NAME = 'ACQ_PART_UP_EXT')
BEGIN
	CREATE NONCLUSTERED INDEX ACQ_PART_UP_EXT ON ACQUIRE_PARTNER_EXT (COD_EXT_CLI, COD_AC, UPDATED, COD_EXTERNAL)
END
GO

IF NOT EXISTS (SELECT
			COD_EXT_CLI
		FROM ACQUIRE_PARTNER_EXT)
BEGIN
	INSERT INTO ACQUIRE_PARTNER_EXT (COD_EXT_CLI, UPDATED, COD_AC)
		SELECT
			1
		   ,0
		   ,COD_AC
		FROM ACQUIRER
END
GO

IF OBJECT_ID('SP_LS_SUBACQUIRE_LEDGE') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_LS_SUBACQUIRE_LEDGE
END
GO
CREATE PROCEDURE SP_LS_SUBACQUIRE_LEDGE (@COD_EXT INT = 1)
AS
BEGIN

	SELECT
		OPEN_LEDGER_SUBACQUIRE.RECEIVE_DATE
	   ,ACQUIRE_PARTNER_EXT.COD_EXTERNAL [CardCode]
	   ,OPEN_LEDGER_SUBACQUIRE.AMOUNT
	   ,OPEN_LEDGER_SUBACQUIRE.LCM
	   ,OPEN_LEDGER_SUBACQUIRE.COD_LEDGER_SUB
	FROM OPEN_LEDGER_SUBACQUIRE
	JOIN ACQUIRE_PARTNER_EXT
		ON ACQUIRE_PARTNER_EXT.COD_AC = OPEN_LEDGER_SUBACQUIRE.COD_AC
			AND OPEN_LEDGER_SUBACQUIRE.COD_EXT_CLI = ACQUIRE_PARTNER_EXT.COD_EXT_CLI
	WHERE OPEN_LEDGER_SUBACQUIRE.UPDATED = 1
	AND OPEN_LEDGER_SUBACQUIRE.AMOUNT > 0
	AND OPEN_LEDGER_SUBACQUIRE.RECEIVE_DATE >= (YEAR(current_timestamp) * 10000 + MONTH(current_timestamp) * 100 + DAY(current_timestamp))

END
GO

IF OBJECT_ID('SP_UP_SUBACQUIRE_LEDGE') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UP_SUBACQUIRE_LEDGE
END
GO
IF TYPE_ID('TP_UP_OPEN_LEDGER_SUB') IS NOT NULL
BEGIN
	DROP TYPE TP_UP_OPEN_LEDGER_SUB
END
GO
CREATE TYPE dbo.TP_UP_OPEN_LEDGER_SUB AS TABLE
(
COD_LEDGER_SUB BIGINT NOT NULL,
LCM INT NOT NULL
)
GO
CREATE PROCEDURE SP_UP_SUBACQUIRE_LEDGE (@LEDGER_SUB TP_UP_OPEN_LEDGER_SUB READONLY,
@COD_EXT INT = 1)
AS
BEGIN
	UPDATE OPEN_LEDGER_SUBACQUIRE
	SET LCM = ldg.LCM
	   ,UPDATED = 0
	FROM OPEN_LEDGER_SUBACQUIRE
	JOIN @LEDGER_SUB ldg
		ON ldg.COD_LEDGER_SUB = OPEN_LEDGER_SUBACQUIRE.COD_LEDGER_SUB
END
GO

--4°

IF OBJECT_ID('NOTIFY_EXT_PAY_INFO') IS NOT NULL
BEGIN
	DROP TABLE NOTIFY_EXT_PAY_INFO
END
GO

IF OBJECT_ID('NOTIFY_EXT_PAY_INFO') IS NULL
BEGIN
	CREATE TABLE NOTIFY_EXT_PAY_INFO (
		COD_EXT_PAY_INFO INT NOT NULL IDENTITY
	   ,CREATED_AT DATETIME NOT NULL DEFAULT (GETDATE())
	   ,PAYMENT_DATE DATETIME NOT NULL
	   ,AMOUNT DECIMAL(22, 6) NOT NULL
	   ,COD_PAY_PROT INT NOT NULL REFERENCES PROTOCOLS (COD_PAY_PROT)
	   ,COD_EC INT NOT NULL REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC)
	   ,UPDATED INT NOT NULL DEFAULT (1)
	   ,LCM INT NULL
	   ,DOC_NUM INT NULL
	   ,ORIGIN_PAYMENT VARCHAR(64) NULL
	   ,PROTOCOL VARCHAR(100) NULL
	)
END
GO
IF NOT EXISTS (SELECT
			*
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('NOTIFY_EXT_PAY_INFO')
		AND NAME = 'IX_EC_DATE_SAP_INFO')
BEGIN
	CREATE NONCLUSTERED INDEX IX_EC_DATE_SAP_INFO ON NOTIFY_EXT_PAY_INFO (PAYMENT_DATE, COD_EC) INCLUDE (AMOUNT)
END
GO
IF NOT EXISTS (SELECT
			*
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('NOTIFY_EXT_PAY_INFO')
		AND NAME = 'IX_UPDATED_SAP_INFO')
BEGIN
	CREATE NONCLUSTERED INDEX IX_UPDATED_SAP_INFO ON NOTIFY_EXT_PAY_INFO (UPDATED) INCLUDE (COD_EC, PAYMENT_DATE)
END
GO
IF NOT EXISTS (SELECT
			*
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('NOTIFY_EXT_PAY_INFO')
		AND NAME = 'IX_PAY_INFO_PROT')
BEGIN
	CREATE NONCLUSTERED INDEX IX_PAY_INFO_PROT ON NOTIFY_EXT_PAY_INFO (COD_PAY_PROT) INCLUDE (COD_EC)
END
GO

IF NOT EXISTS (SELECT
			column_id
		FROM sys.columns
		WHERE object_id = OBJECT_ID('FINANCE_CALENDAR')
		AND NAME = 'SAP_NOTIFIED')
BEGIN
	ALTER TABLE FINANCE_CALENDAR
	ADD SAP_NOTIFIED INT NOT NULL DEFAULT (0);
END
GO

IF NOT EXISTS (SELECT
			column_id
		FROM sys.columns
		WHERE object_id = OBJECT_ID('ASSOCIATE_GENERATE_CNAB')
		AND NAME = 'SAP_CODE')
BEGIN
	ALTER TABLE ASSOCIATE_GENERATE_CNAB
	ADD SAP_CODE VARCHAR(64) NULL
END
GO

IF NOT EXISTS (SELECT
			*
		FROM ASSOCIATE_GENERATE_CNAB
		WHERE SAP_CODE = '1110210'
		AND AGENCY = '6248'
		AND ACCOUNT = '45232')
BEGIN
	INSERT INTO ASSOCIATE_GENERATE_CNAB (COD_BANK, COD_COMP, ACTIVE, AGENCY, DIGIT_AGENCY, ACCOUNT, DIGIT_ACCOUNT, COD_TYPE_ACCOUNT, STANDARD_BANK, COD_OPER_BANK, COD_USER, SAP_CODE)
		VALUES (341, 8, 1, 6248, NULL, 45232, 5, 2, 1, NULL, NULL, '1110210');
END
GO

IF OBJECT_ID('SP_UP_EXTERNAL_PAYMENTS') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UP_EXTERNAL_PAYMENTS
END
GO
CREATE PROCEDURE SP_UP_EXTERNAL_PAYMENTS
/*----------------------------------------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author             VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Luiz Aquino        V1          2020-07-13      CREATED      
------------------------------------------------------------------------------------------*/
AS
BEGIN

	DECLARE @Default_SAP_CODE VARCHAR(64)

	SELECT TOP 1
		@Default_SAP_CODE = SAP_CODE
	FROM ASSOCIATE_GENERATE_CNAB
	WHERE SAP_CODE IS NOT NULL

	SELECT
		FC.PAYMENT_DATE
	   ,SUM(PLOT_VALUE_PAYMENT) AMOUNT
	   ,E.COD_EXTERNAL [PN_CODE]
	   ,0 ORIGIN_BANK
	   ,P.PROTOCOL FILE_SEQUENCE
	   ,E.COD_EC
	   ,FC.COD_PAY_PROT
	   ,IIF(AGC.SAP_CODE IS NOT NULL, AGC.SAP_CODE, @Default_SAP_CODE) [SAP_CODE] INTO #Payments
	FROM FINANCE_CALENDAR FC
	JOIN EXTERNAL_PARTN_UP E
		ON E.COD_EC = FC.COD_EC
			AND E.COD_EXTERNAL IS NOT NULL
	JOIN PROTOCOLS P
		ON FC.COD_PAY_PROT = P.COD_PAY_PROT
	LEFT JOIN ASSOCIATE_GENERATE_CNAB AGC
		ON AGC.COD_ASS_CNAB = P.COD_ASS_CNAB
	WHERE COD_SITUATION = 8
	AND FC.ACTIVE = 1
	AND SAP_NOTIFIED = 0
	GROUP BY PAYMENT_DATE
			,E.COD_EXTERNAL
			,P.PROTOCOL
			,E.COD_EC
			,FC.COD_PAY_PROT
			,AGC.SAP_CODE

	UPDATE NTE
	SET NTE.AMOUNT = P.AMOUNT
	   ,NTE.ORIGIN_PAYMENT = P.SAP_CODE
	   ,NTE.UPDATED = 1
	FROM NOTIFY_EXT_PAY_INFO NTE
	JOIN #Payments P
		ON NTE.PAYMENT_DATE = P.PAYMENT_DATE
		AND NTE.COD_EC = P.COD_EC
		AND (NTE.AMOUNT != P.AMOUNT
		OR P.SAP_CODE != COALESCE(NTE.ORIGIN_PAYMENT, ''))

	INSERT INTO NOTIFY_EXT_PAY_INFO (PAYMENT_DATE, AMOUNT, COD_PAY_PROT, COD_EC, ORIGIN_PAYMENT, PROTOCOL)
		SELECT
			P.PAYMENT_DATE
		   ,P.AMOUNT
		   ,P.COD_PAY_PROT
		   ,P.COD_EC
		   ,P.SAP_CODE
		   ,P.FILE_SEQUENCE
		FROM #Payments P
		LEFT JOIN NOTIFY_EXT_PAY_INFO NTE
			ON NTE.PAYMENT_DATE = P.PAYMENT_DATE
				AND NTE.COD_EC = P.COD_EC
		WHERE NTE.COD_EXT_PAY_INFO IS NULL

	UPDATE FINANCE_CALENDAR
	SET SAP_NOTIFIED = 1
	FROM FINANCE_CALENDAR
	JOIN #Payments P
		ON FINANCE_CALENDAR.COD_EC = P.COD_EC
		AND FINANCE_CALENDAR.COD_PAY_PROT = P.COD_PAY_PROT

END;
GO

IF OBJECT_ID('SP_FD_EXTERNAL_PAYMENTS') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_FD_EXTERNAL_PAYMENTS
END
GO
CREATE PROCEDURE SP_FD_EXTERNAL_PAYMENTS
/*----------------------------------------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author             VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Luiz Aquino        V1          2020-07-13      CREATED      
------------------------------------------------------------------------------------------*/ (@HAS_LCM INT = 0)
AS
BEGIN

	SELECT
		PAYMENT_DATE
	   ,AMOUNT
	   ,EP.COD_EXTERNAL [PN_CODE]
	   ,0 ORIGIN_BANK
	   ,PROTOCOL FILE_SEQUENCE
	   ,nte.ORIGIN_PAYMENT
	FROM NOTIFY_EXT_PAY_INFO nte
	JOIN EXTERNAL_PARTN_UP EP
		ON nte.COD_EC = EP.COD_EC
	WHERE nte.UPDATED = 1
	AND (@HAS_LCM = 0
	OR nte.LCM IS NOT NULL)

END
GO

IF OBJECT_ID('SP_CONFIRM_EXTERNAL_PAYMENTS') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_CONFIRM_EXTERNAL_PAYMENTS
END
GO
IF TYPE_ID('TP_UP_EXT_PAY') IS NOT NULL
BEGIN
	DROP TYPE TP_UP_EXT_PAY
END
GO
CREATE TYPE dbo.TP_UP_EXT_PAY AS TABLE
(
PROTOCOL VARCHAR(128) NOT NULL,
LCM INT NOT NULL,
DOC_NUM INT NOT NULL
)
GO
CREATE PROCEDURE SP_CONFIRM_EXTERNAL_PAYMENTS
/*----------------------------------------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author             VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Luiz Aquino        V1          2020-07-13      CREATED      
------------------------------------------------------------------------------------------*/ (@UPDATED TP_UP_EXT_PAY READONLY)
AS
BEGIN

	UPDATE NOTIFY_EXT_PAY_INFO
	SET LCM = u.LCM
	   ,DOC_NUM = u.DOC_NUM
	   ,UPDATED = 0
	FROM NOTIFY_EXT_PAY_INFO
	JOIN PROTOCOLS P
		ON NOTIFY_EXT_PAY_INFO.COD_PAY_PROT = P.COD_PAY_PROT
	JOIN @UPDATED u
		ON u.PROTOCOL = P.PROTOCOL
	WHERE NOTIFY_EXT_PAY_INFO.UPDATED = 1

END
GO

UPDATE FINANCE_CALENDAR
SET FINANCE_CALENDAR.SAP_NOTIFIED = 1
WHERE COD_SITUATION = 8
AND ACTIVE = 1
GO

--5°


IF OBJECT_ID('INVOICE_ORDER') IS NULL
BEGIN
	CREATE TABLE INVOICE_ORDER (
		COD_INVOICE_ORDER INT IDENTITY PRIMARY KEY
	   ,INVOICE_NUMBER VARCHAR(255) NOT NULL
	   ,DOC_NUM VARCHAR(255) NULL
	   ,INVOICE_DATE DATETIME NOT NULL
	   ,INVOICE_VALUE DECIMAL(22, 6) NOT NULL
	   ,EC_NAME VARCHAR(255) NOT NULL
	   ,COD_PARTNER INT NOT NULL
	   ,CREATED_AT DATETIME DEFAULT current_timestamp
	   ,MODIFY_DATE DATETIME NULL
	   ,ACTIVE INT DEFAULT 1
	   ,FOREIGN KEY (COD_PARTNER) REFERENCES EXTERNAL_PARTN_UP (COD_EXTERNAL_PART)
	);
END
GO
IF OBJECT_ID('SP_REG_INVOICE_ORDER') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REG_INVOICE_ORDER
END
GO
IF TYPE_ID('INVOICE_ORDER') IS NOT NULL
BEGIN
	DROP TYPE INVOICE_ORDER
END
GO
CREATE TYPE INVOICE_ORDER AS TABLE
(
INVOICE_NUMBER VARCHAR(255) NOT NULL,
INVOICE_DATE DATETIME NOT NULL,
CARD_CODE VARCHAR(255) NOT NULL,
CARD_NAME VARCHAR(255) NOT NULL,
INVOICE_VALUE DECIMAL(22, 6) NOT NULL,
DOC_NUM VARCHAR(255) NOT NULL
);

GO
CREATE PROCEDURE [dbo].[SP_REG_INVOICE_ORDER]
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_REG_INVOICE_ORDER]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION			Date                            Description  
------------------------------------------------------------------------------------------  
Lucas Aguiar					V1				2019-09-19						Creation  
------------------------------------------------------------------------------------------*/ (@INVOICE INVOICE_ORDER READONLY)

AS

BEGIN
	INSERT INTO INVOICE_ORDER (INVOICE_NUMBER,
	INVOICE_DATE,
	INVOICE_VALUE,
	EC_NAME,
	COD_PARTNER,
	DOC_NUM)
		SELECT
			INVOICE.INVOICE_NUMBER
		   ,INVOICE.INVOICE_DATE
		   ,INVOICE.INVOICE_VALUE
		   ,INVOICE.CARD_NAME
		   ,EXTERNAL_PARTN_UP.COD_EXTERNAL_PART
		   ,INVOICE.DOC_NUM
		FROM @INVOICE INVOICE
		JOIN EXTERNAL_PARTN_UP
			ON EXTERNAL_PARTN_UP.COD_EXTERNAL = INVOICE.CARD_CODE

	IF @@rowcount < 1
		THROW 60000, 'INVALID CARD CODE. PARTNER NOT FOUND.', 1
END;
GO

IF OBJECT_ID('SP_LS_INVOICE_ORDER') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_LS_INVOICE_ORDER
END
GO
CREATE PROCEDURE [dbo].[SP_LS_INVOICE_ORDER]
/*----------------------------------------------------------------------------------------  
  Project.......: TKPP  
------------------------------------------------------------------------------------------  
  Author                VERSION			Date           Description  
------------------------------------------------------------------------------------------  
  Lucas Aguiar		    V1				2019-09-19		Creation  
------------------------------------------------------------------------------------------*/ (@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@COD_EC INT = NULL)
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);

	SET @QUERY = '
        SELECT 
            INVOICE_ORDER.INVOICE_NUMBER,
            INVOICE_ORDER.INVOICE_DATE,
            INVOICE_ORDER.INVOICE_VALUE,
            COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,
            COMMERCIAL_ESTABLISHMENT.NAME
        FROM INVOICE_ORDER 
            JOIN EXTERNAL_PARTN_UP ON EXTERNAL_PARTN_UP.COD_EXTERNAL_PART = INVOICE_ORDER.COD_PARTNER
            JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = EXTERNAL_PARTN_UP.COD_EC
        WHERE INVOICE_ORDER.ACTIVE = 1 AND INVOICE_DATE BETWEEN @INITIAL_DATE AND @FINAL_DATE
     '

	IF @COD_EC IS NOT NULL
		SET @QUERY = @QUERY + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC';

	EXEC sp_executesql @QUERY
					  ,N'                                                          
           @INITIAL_DATE DATETIME,                                                          
           @FINAL_DATE DATETIME,                                   
           @COD_EC int 
       '
					  ,@INITIAL_DATE = @INITIAL_DATE
					  ,@FINAL_DATE = @FINAL_DATE
					  ,@COD_EC = @COD_EC

END
GO

IF OBJECT_ID('SP_DATA_PROVISION') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_DATA_PROVISION
END
GO
CREATE PROCEDURE SP_DATA_PROVISION
/*---------------------------------r-------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author              VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Lucas Aguiar        V1          23/09/2019      CREATED      
------------------------------------------------------------------------------------------*/ (@REF_INITIALDATE INT,
@REF_FINALDATE INT,
@COD_EC INT = NULL)
AS
BEGIN

	DECLARE @QUERY NVARCHAR(MAX);

	SET @QUERY = '    
        SELECT     
            OPEN_LEDGER_ESTABLISHMENT.COD_LEDGER_ESTAB,  
            OPEN_LEDGER_ESTABLISHMENT.MDR,    
            COMMERCIAL_ESTABLISHMENT.NAME,    
            COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,    
            EXTERNAL_PARTN_UP.COD_EXTERNAL,    
            OPEN_LEDGER_ESTABLISHMENT.SENT_ON_INVOICE,    
            OPEN_LEDGER_ESTABLISHMENT.LCM,  
            OPEN_LEDGER_ESTABLISHMENT.COD_EC,
            OPEN_LEDGER_ESTABLISHMENT.PAY_TYPE
        FROM OPEN_LEDGER_ESTABLISHMENT    
            JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = OPEN_LEDGER_ESTABLISHMENT.COD_EC    
            JOIN EXTERNAL_PARTN_UP ON EXTERNAL_PARTN_UP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC    
        WHERE    
            OPEN_LEDGER_ESTABLISHMENT.COD_EXT_CLI = 1    
            AND OPEN_LEDGER_ESTABLISHMENT.PAY_DATE BETWEEN @REF_INITIALDATE AND @REF_FINALDATE 
            AND OPEN_LEDGER_ESTABLISHMENT.SENT_ON_INVOICE = 0   
            AND EXTERNAL_PARTN_UP.COD_EXTERNAL IS NOT NULL
            AND OPEN_LEDGER_ESTABLISHMENT.MDR > 0
            AND OPEN_LEDGER_ESTABLISHMENT.LCM IS NOT NULL
     '

	IF @COD_EC IS NOT NULL
		SET @QUERY = @QUERY + ' AND OPEN_LEDGER_ESTABLISHMENT.COD_EC = @COD_EC';

	EXEC sp_executesql @QUERY
					  ,N'                                                              
           @REF_INITIALDATE INT,                                                              
           @REF_FINALDATE INT,                                       
           @COD_EC int     
        '
					  ,@REF_INITIALDATE = @REF_INITIALDATE
					  ,@REF_FINALDATE = @REF_FINALDATE
					  ,@COD_EC = @COD_EC
END
GO

IF OBJECT_ID('SP_UP_LCMS') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UP_LCMS
END
GO
CREATE PROCEDURE SP_UP_LCMS
/*---------------------------------r-------------------------------------------------------          
   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author              VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Lucas Aguiar        V1          25/09/2019      CREATED      
------------------------------------------------------------------------------------------*/ (@COD_TYPE [CODE_UQ_TYPE] READONLY)
AS
BEGIN

	UPDATE OPEN_LEDGER_ESTABLISHMENT
	SET SENT_ON_INVOICE = 1
	FROM OPEN_LEDGER_ESTABLISHMENT
	JOIN @COD_TYPE TP
		ON TP.CODE = OPEN_LEDGER_ESTABLISHMENT.LCM;

END
GO

EXEC SP_DATA_PROVISION 20200901
					  ,20200928
					  ,1435