--ST-1397

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'BRANCH_BUSINESS'
		AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
	ALTER TABLE REPORT_TRANSACTIONS_EXP
	ADD BRANCH_BUSINESS VARCHAR(400)
END


GO

IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP VIEW [VW_REPORT_TRANSACTIONS_EXP]

GO

CREATE VIEW [dbo].[VW_REPORT_TRANSACTIONS_EXP]
AS
/*----------------------------------------------------------------------------------------                                        
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                                        
Project.......: TKPP                                        
------------------------------------------------------------------------------------------                                        
Author                          VERSION        Date                            Description                                        
------------------------------------------------------------------------------------------                                        
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                              
Caike Uch�a                        v2       10/01/2020                         add CNAE                    
Kennedy Alef                       v3       08/04/2020                      add link de pagamento              
Caike Uch�a                        v4       30/04/2020                        insert ec prod              
Caike Uch�a                        v5       17/08/2020                        Add SALES_TYPE   
Luiz Aquino                        v6       01/07/2020                        Add PlanDZero  
Caike Uchoa                        v7       31/08/2020                        Add cod_ec_prod  
Kennedy Alef                       v8       02/09/2020                        Add change calculations       
Caike Uchoa                        v9       28/09/2020                        Add branch business
Caike Uchoa                        v10      29/09/2020                        remove NET_VALUE
------------------------------------------------------------------------------------------*/
WITH CTE
AS
(SELECT TOP (1000)
		[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
	   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
	   ,[TRANSACTION].[PLOTS] AS [PLOTS]
	   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
	   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
	   ,[EQUIPMENT].[TID] AS [TID]
	   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
	   ,[TRANSACTION].[Brand]
	   ,[TRANSACTION].[PAN]
	   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
	   , --TRANSACTION_DATA_EXT.NAME                                            
		[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
	   , --TRANSACTION_DATA_EXT.VALUE                                           
		(SELECT
				[TRANSACTION_DATA_EXT].[VALUE]
			FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
			WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[ACQUIRER].[COD_AC]
	   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
	   ,[TRANSACTION].[COMMENT] AS [COMMENT]
	   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
	   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
		--------------******------------                                            
	   ,[TRANSACTION].[COD_TTYPE]
	   ,[COMPANY].[COD_COMP]
	   ,[BRANCH_EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[STATE].[NAME] AS [STATE_NAME]
	   ,[CITY].[NAME] AS [CITY_NAME]
	   ,[SITUATION].[COD_SITUATION]
	   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
	   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
	   ,COALESCE([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]
	   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
	   ,[TRANSACTION].[COD_SOURCE_TRAN]
	   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
	   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
	   ,[TRANSACTION].[CREATED_AT]
	   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
	   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
	   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
	   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)
				> 0 THEN 1
			ELSE 0
		END AS [SPLIT]
	   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
	   ,[USERS].[COD_USER] AS [COD_USER_REP]
	   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
	   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
	   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
	   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
	   ,[SEGMENTS].[CNAE]
	   ,[TRANSACTION].[COD_USER]
	   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
				> 0 THEN 1
			ELSE 0
		END AS [LINK_PAYMENT]
	   ,[TRANSACTION].[CUSTOMER_EMAIL]
	   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
				> 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]
			ELSE NULL
		END AS [PAYMENT_LINK_TRACKING]
	   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
	   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
	   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
	   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROEC
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROAFF
	   ,[EC_PROD].COD_EC AS [COD_EC_PROD]
	   ,BRANCH_BUSINESS.[NAME] AS [BRANCH_BUSINESS_EC]
	FROM [TRANSACTION] WITH (NOLOCK)
	LEFT JOIN [dbo].[PROCESS_BG_STATUS]
		ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [ASS_DEPTO_EQUIP]
		ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
	LEFT JOIN [EQUIPMENT]
		ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
	LEFT JOIN [DEPARTMENTS_BRANCH]
		ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
	LEFT JOIN [DEPARTMENTS]
		ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
	LEFT JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
	LEFT JOIN [ADDRESS_BRANCH]
		ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
	LEFT JOIN [NEIGHBORHOOD]
		ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
	LEFT JOIN [ASS_TAX_DEPART]
		ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
	LEFT JOIN [PLAN]
		ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
	LEFT JOIN [CITY]
		ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
	LEFT JOIN [STATE]
		ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
	LEFT JOIN [COMPANY]
		ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	LEFT JOIN [TRANSACTION_TYPE]
		ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
	LEFT JOIN [SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
	LEFT JOIN [TRADUCTION_SITUATION]
		ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
	LEFT JOIN [SEGMENTS]
		ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
	LEFT JOIN [dbo].[REPORT_TRANSACTIONS_EXP]
		ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [POSWEB_DATA_TRANSACTION]
		ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [dbo].[SOURCE_TRANSACTION] WITH (NOLOCK)
		ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
		ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
	LEFT JOIN [SALES_REPRESENTATIVE]
		ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
	LEFT JOIN [USERS]
		ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
	LEFT JOIN [USERS] AS [USER_TRAN]
		ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
	LEFT JOIN [ASS_TR_TYPE_COMP]
		ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
	LEFT JOIN [ACQUIRER]
		ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
	LEFT JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
		ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
		ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	LEFT JOIN BRANCH_BUSINESS
		ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
	WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
	AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
	AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT])

SELECT
	CTE.COD_TRAN
   ,CTE.TRANSACTION_CODE
   ,CTE.Amount
   ,CTE.PLOTS
   ,CTE.TRANSACTION_DATE
   ,CTE.TRANSACTION_TYPE
   ,CTE.CPF_CNPJ
   ,CTE.[NAME]
   ,CTE.SERIAL_EQUIP
   ,CTE.TID
   ,CTE.SITUATION
   ,CTE.Brand
   ,CTE.PAN
   ,CTE.TRAN_DATA_EXT
   ,CTE.TRAN_DATA_EXT_VALUE
   ,CTE.AUTH_CODE
   ,CTE.COD_AC
   ,CTE.NAME_ACQUIRER
   ,CTE.COMMENT
   ,CTE.TAX
   ,CTE.ANTICIPATION
   ,CTE.COD_AFFILIATOR
   ,CTE.NAME_AFFILIATOR
   ,CTE.COD_TTYPE
   ,CTE.COD_COMP
   ,CTE.COD_EC
   ,CTE.COD_BRANCH
   ,CTE.STATE_NAME
   ,CTE.CITY_NAME
   ,CTE.COD_SITUATION
   ,CTE.COD_DEPTO_BRANCH
   ,CTE.GROSS_VALUE_AGENCY
   ,CTE.NET_VALUE_AGENCY
   ,CTE.TYPE_TRAN
   ,CTE.COD_SOURCE_TRAN
   ,CTE.POSWEB
   ,CTE.SEGMENTS_NAME
   ,CTE.CREATED_AT
   ,CTE.REP_COD_TRAN
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.SPLIT
   ,CTE.SALES_REP
   ,CTE.COD_USER_REP
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.COD_SALES_REP
   ,CTE.MODEL_POS
   ,CTE.CARD_NAME
   ,CTE.CNAE
   ,CTE.COD_USER
   ,CTE.NAME_USER
   ,CTE.LINK_PAYMENT
   ,CTE.CUSTOMER_EMAIL
   ,CTE.CUSTOMER_IDENTIFICATION
   ,CTE.PAYMENT_LINK_TRACKING
   ,CTE.NAME_PRODUCT_EC
   ,CTE.EC_PRODUCT
   ,CTE.EC_PRODUCT_CPF_CNPJ
   ,CTE.SALES_TYPE
   ,CTE.PLAN_DZEROEC
   ,CTE.PLAN_DZEROAFF
   ,CTE.COD_EC_PROD
   ,CTE.BRANCH_BUSINESS_EC

FROM CTE


GO

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP];

GO

CREATE PROCEDURE [dbo].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************                
----------------------------------------------------------------------------------------                                      
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                                      
 Project.......: TKPP                                      
 ------------------------------------------------------------------------------------------                                      
 Author                          VERSION        Date                            Description                                      
 ------------------------------------------------------------------------------------------                                      
 Fernando Henrique F.             V1       13/12/2018                          Creation                                       
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                                
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                              
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                            
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE                
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento              
 Caike Uch�a                      v7       30/04/2020                        insert ec prod              
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess            
 Caike Uch�a                      V9       17/08/2020                        Add SALES_TYPE        
 Luiz Aquino                      v10      01/07/2020                         add PlanDzero    
 Caike Uchoa                      V11      31/08/2020                        Add Cod_ec_prod    
 Caike Uchoa                      v12      28/09/2020                        Add branch business  
 Caike Uchoa                      v10      29/09/2020                        Add NET_VALUE   
 ------------------------------------------------------------------------------------------                
*****************************************************************************************************************/

AS
BEGIN

	DECLARE @COUNT INT = 0;



	BEGIN

		---------------------------------------------                                    
		--------------RECORDS INSERT-----------------                                    
		---------------------------------------------                                      
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[Brand]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROEC
		   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROAFF
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS_EC]
		   ,CAST(0 AS DECIMAL(22, 6)) AS NET_VALUE INTO #TB_REPORT_TRANSACTIONS_EXP_INSERT
		FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;



		SELECT
			TRANSACTION_TITLES.COD_EC
		   ,[TRANSACTION].COD_TRAN
		   ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO
		FROM TRANSACTION_SERVICES
		INNER JOIN ITEMS_SERVICES_AVAILABLE
			ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
		JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT
			ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		JOIN TRANSACTION_TITLES WITH (NOLOCK)
			ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
				AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC
		JOIN [TRANSACTION] WITH (NOLOCK)
			ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
		GROUP BY TRANSACTION_TITLES.COD_EC
				,[TRANSACTION].COD_TRAN
				,TRANSACTION_SERVICES.TAX_PLANDZERO_EC


		SELECT
			[TRANSACTION].COD_TRAN
		   ,CASE
				WHEN (
					#TEMP_DZERO.TAX_PLANDZERO_EC
					)
					> 0 THEN SUM(dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT,
					(
					#TEMP_DZERO.TAX_PLANDZERO_EC
					)
					, [TRANSACTION].COD_TTYPE))
				ELSE CASE
						WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](
							TRANSACTION_TITLES.Amount,
							TRANSACTION_TITLES.TAX_INITIAL,
							TRANSACTION_TITLES.PLOT,
							TRANSACTION_TITLES.ANTICIP_PERCENT,
							(CASE
								WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
								ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
							END)))
						ELSE 0
					END
			END AS NET_VALUE INTO #TEMP_NET
		FROM [TRANSACTION] WITH (NOLOCK)
		LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
			ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN
		LEFT JOIN #TEMP_DZERO
			ON #TEMP_DZERO.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
				AND #TEMP_DZERO.COD_EC = TRANSACTION_TITLES.COD_EC

		WHERE [TRANSACTION].COD_TRAN IN (SELECT
				COD_TRAN
			FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT)
		GROUP BY TRANSACTION_TITLES.COD_TRAN
				,[TRANSACTION].COD_TRAN
				,#TEMP_DZERO.TAX_PLANDZERO_EC


		UPDATE #TB_REPORT_TRANSACTIONS_EXP_INSERT
		SET NET_VALUE = (SELECT
				NET_VALUE
			FROM #TEMP_NET
			WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN)
		FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT


		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

		IF @COUNT > 0
		BEGIN
			INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
			[TRANSACTION_CODE],
			[Amount],
			[PLOTS],
			[TRANSACTION_DATE],
			[TRANSACTION_TYPE],
			[CPF_CNPJ],
			[NAME],
			[SERIAL_EQUIP],
			[TID],
			[SITUATION],
			[Brand],
			[PAN],
			[TRAN_DATA_EXT],
			[TRAN_DATA_EXT_VALUE],
			[AUTH_CODE],
			[COD_AC],
			[NAME_ACQUIRER],
			[COMMENT],
			[TAX],
			[ANTICIPATION],
			[COD_AFFILIATOR],
			[NAME_AFFILIATOR],
			[NET_VALUE],
			[COD_COMP],
			[COD_EC],
			[COD_BRANCH],
			[STATE_NAME],
			[CITY_NAME],
			[COD_SITUATION],
			[COD_DEPTO_BRANCH],
			[GROSS_VALUE_AGENCY],
			[NET_VALUE_AGENCY],
			[TYPE_TRAN],
			[COD_SOURCE_TRAN],
			[POSWEB],
			[SEGMENTS_NAME],
			[CREATED_TRANSACTION_DATE],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ],
			[SPLIT],
			[SALES_REP],
			[COD_USER_REP],
			[MODIFY_DATE],
			[CREDITOR_DOCUMENT],
			[COD_SALES_REP],
			[MODEL_POS],
			[CARD_NAME],
			[CNAE],
			[COD_USER],
			[NAME_USER],
			[LINK_PAYMENT_SERVICE],
			[CUSTOMER_EMAIL],
			[CUSTOMER_IDENTIFICATION],
			[PAYMENT_LINK_TRACKING],
			[NAME_PRODUCT_EC],
			[EC_PRODUCT],
			[EC_PRODUCT_CPF_CNPJ],
			[SALES_TYPE],
			DZERO_EC_TAX,
			DZERO_AFF_TAX,
			[COD_EC_PROD],
			[BRANCH_BUSINESS])
				(SELECT
					[TEMP].[COD_TRAN]
				   ,[TEMP].[TRANSACTION_CODE]
				   ,[TEMP].[Amount]
				   ,[TEMP].[PLOTS]
				   ,[TEMP].[TRANSACTION_DATE]
				   ,[TEMP].[TRANSACTION_TYPE]
				   ,[TEMP].[CPF_CNPJ]
				   ,[TEMP].[NAME]
				   ,[TEMP].[SERIAL_EQUIP]
				   ,[TEMP].[TID]
				   ,[TEMP].[SITUATION]
				   ,[TEMP].[Brand]
				   ,[TEMP].[PAN]
				   ,[TEMP].[TRAN_DATA_EXT]
				   ,[TEMP].[TRAN_DATA_EXT_VALUE]
				   ,[TEMP].[AUTH_CODE]
				   ,[TEMP].[COD_AC]
				   ,[TEMP].[NAME_ACQUIRER]
				   ,[TEMP].[COMMENT]
				   ,[TEMP].[TAX]
				   ,[TEMP].[ANTICIPATION]
				   ,[TEMP].[COD_AFFILIATOR]
				   ,[TEMP].[NAME_AFFILIATOR]
				   ,[TEMP].[NET_VALUE]
				   ,[TEMP].[COD_COMP]
				   ,[TEMP].[COD_EC]
				   ,[TEMP].[COD_BRANCH]
				   ,[TEMP].[STATE_NAME]
				   ,[TEMP].[CITY_NAME]
				   ,[TEMP].[COD_SITUATION]
				   ,[TEMP].[COD_DEPTO_BRANCH]
				   ,[TEMP].[GROSS_VALUE_AGENCY]
				   ,[TEMP].[NET_VALUE_AGENCY]
				   ,[TEMP].[TYPE_TRAN]
				   ,[TEMP].[COD_SOURCE_TRAN]
				   ,[TEMP].[POSWEB]
				   ,[TEMP].[SEGMENTS_NAME]
				   ,[TEMP].[CREATED_AT]
				   ,[TEMP].[COD_EC_TRANS]
				   ,[TEMP].[TRANS_EC_NAME]
				   ,[TEMP].[TRANS_EC_CPF_CNPJ]
				   ,[TEMP].[SPLIT]
				   ,[SALES_REP]
				   ,[COD_USER_REP]
				   ,GETDATE()
				   ,[CREDITOR_DOCUMENT]
				   ,[COD_SALES_REP]
				   ,[TEMP].[MODEL_POS]
				   ,[CARD_NAME]
				   ,[CNAE]
				   ,[COD_USER]
				   ,[NAME_USER]
				   ,[LINK_PAYMENT]
				   ,[CUSTOMER_EMAIL]
				   ,[CUSTOMER_IDENTIFICATION]
				   ,[TEMP].[PAYMENT_LINK_TRACKING]
				   ,[TEMP].[NAME_PRODUCT_EC]
				   ,[TEMP].[EC_PRODUCT]
				   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
				   ,[TEMP].[SALES_TYPE]
				   ,[TEMP].PLAN_DZEROEC
				   ,[TEMP].PLAN_DZEROAFF
				   ,[TEMP].[COD_EC_PROD]
				   ,[TEMP].[BRANCH_BUSINESS_EC]
				FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;


		---------------------------------------------                                    
		--------------RECORDS UPDATE-----------------                                    
		---------------------------------------------                                      
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]
		   ,CAST(0 AS DECIMAL(22, 6)) AS [NET_VALUE] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
		FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;


		SELECT
			TRANSACTION_TITLES.COD_EC
		   ,[TRANSACTION].COD_TRAN
		   ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO_2
		FROM TRANSACTION_SERVICES
		INNER JOIN ITEMS_SERVICES_AVAILABLE
			ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
		JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT
			ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		JOIN TRANSACTION_TITLES WITH (NOLOCK)
			ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
				AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC
		JOIN [TRANSACTION] WITH (NOLOCK)
			ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
		GROUP BY TRANSACTION_TITLES.COD_EC
				,[TRANSACTION].COD_TRAN
				,TRANSACTION_SERVICES.TAX_PLANDZERO_EC


		SELECT
			[TRANSACTION].COD_TRAN
		   ,CASE
				WHEN (
					#TEMP_DZERO_2.TAX_PLANDZERO_EC
					)
					> 0 THEN SUM(dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT, (
					#TEMP_DZERO_2.TAX_PLANDZERO_EC
					)
					, [TRANSACTION].COD_TTYPE))
				ELSE CASE
						WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](
							TRANSACTION_TITLES.Amount,
							TRANSACTION_TITLES.TAX_INITIAL,
							TRANSACTION_TITLES.PLOT,
							TRANSACTION_TITLES.ANTICIP_PERCENT,
							(CASE
								WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
								ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
							END)))
						ELSE 0
					END
			END AS NET_VALUE INTO #TEMP_NET_2
		FROM [TRANSACTION] WITH (NOLOCK)
		LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
			ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN
		LEFT JOIN #TEMP_DZERO_2
			ON #TEMP_DZERO_2.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
				AND #TEMP_DZERO_2.COD_EC = TRANSACTION_TITLES.COD_EC
		WHERE [TRANSACTION].COD_TRAN IN (SELECT
				COD_TRAN
			FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE)
		GROUP BY TRANSACTION_TITLES.COD_TRAN
				,[TRANSACTION].COD_TRAN
				,#TEMP_DZERO_2.TAX_PLANDZERO_EC


		UPDATE #TB_REPORT_TRANSACTIONS_EXP_UPDATE
		SET NET_VALUE = (SELECT
				NET_VALUE
			FROM #TEMP_NET_2
			WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_UPDATE.COD_TRAN)
		FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE


		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_TRANSACTIONS_EXP]
			SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
			   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
			   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[Amount] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[Amount]
			   ,[REPORT_TRANSACTIONS_EXP].NET_VALUE = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NET_VALUE]
			FROM [REPORT_TRANSACTIONS_EXP]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;
	END;
END;


GO

IF OBJECT_ID('SP_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP]

GO

CREATE PROCEDURE [dbo].[SP_REPORT_TRANSACTIONS_EXP]
/***************************************************************************************              
----------------------------------------------------------------------------------------              
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]              
Project.......: TKPP              
------------------------------------------------------------------------------------------              
Author               VERSION         Date                     Description              
------------------------------------------------------------------------------------------              
Fernando Henrique F.   V1         13/12/2018               Creation              
Kennedy Alef           V2         16/01/2018               Modify              
Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT              
Caike Uch�a            V3         15/08/2019               inserting coluns              
Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC              
Caike Uch�a            V5         20/01/2020               ADD CNAE              
Kennedy Alef           v3         08/04/2020               add link de pagamento              
Caike Uch�a            v4         30/04/2020               insert ec prod              
Caike Uch�a            v5         17/08/2020               Add SALES_TYPE            
Luiz Aquino            v6         01/07/2020                 add PlanDzero  
Caike Uchoa            v7         31/08/2020               Add cod_ec_prod  
 Caike Uchoa           v12        28/09/2020               Add branch business
---------------------------------------------           ---------------------------------------------              
********************************************************************************************/ (@CODCOMP VARCHAR(10),
@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@EC VARCHAR(10),
@BRANCH VARCHAR(10),
@DEPART VARCHAR(10),
@TERMINAL VARCHAR(100),
@STATE VARCHAR(100),
@CITY VARCHAR(100),
@TYPE_TRAN VARCHAR(10),
@SITUATION VARCHAR(10),
@NSU VARCHAR(100) = NULL,
@NSU_EXT VARCHAR(100) = NULL,
@BRAND VARCHAR(50) = NULL,
@PAN VARCHAR(50) = NULL,
@COD_AFFILIATOR INT = NULL,
@TRACKING_TRANSACTION VARCHAR(100) = NULL,
@DESCRIPTION VARCHAR(100) = NULL,
@SPOT_ELEGIBLE INT = 0,
@COD_ACQ INT = NULL,
@SOURCE_TRAN INT = NULL,
@POSWEB INT = 0,
@SPLIT INT = NULL,
@INITIAL_VALUE DECIMAL(22, 6) = NULL,
@FINAL_VALUE DECIMAL(22, 6) = NULL,
@COD_SALES_REP INT = NULL,
@COD_EC_PROD INT = NULL)
AS
BEGIN
	DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
	DECLARE @TIME_FINAL_DATE TIME;
	SET NOCOUNT ON;
	SET ARITHABORT ON;
	BEGIN
		SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');
		--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));              
		--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )              
		SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);
		IF (@TIME_FINAL_DATE = '00:00:00')
			SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));
		SET @QUERY_BASIS = '              
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE              
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT              
      ,[REPORT_TRANSACTIONS_EXP].PLOTS              
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE              
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE              
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ              
      ,[REPORT_TRANSACTIONS_EXP].NAME              
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP              
      ,[REPORT_TRANSACTIONS_EXP].TID              
      ,[REPORT_TRANSACTIONS_EXP].SITUATION              
      ,[REPORT_TRANSACTIONS_EXP].BRAND              
      ,[REPORT_TRANSACTIONS_EXP].PAN              
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE              
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT              
   ,(    
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT              
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN              
      ) AS [AUTH_CODE]              
      ,[REPORT_TRANSACTIONS_EXP].COD_AC              
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER              
      ,[REPORT_TRANSACTIONS_EXP].COMMENT              
  ,[REPORT_TRANSACTIONS_EXP].TAX              
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION              
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR              
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR              
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE              
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY              
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY              
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN              
      ,[REPORT_TRANSACTIONS_EXP].POSWEB              
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME              
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME              
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME              
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS              
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME              
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ              
      ,[REPORT_TRANSACTIONS_EXP].SPLIT              
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]              
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT              
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP              
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS              
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME              
      ,[REPORT_TRANSACTIONS_EXP].CNAE              
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE              
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL              
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION              
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING              
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]              
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]              
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]              
   ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]            
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_EC_TAX, 0) AS DZERO_EC_TAX    
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_AFF_TAX, 0)       AS DZERO_AFF_TAX  
   ,[REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]  
   ,[REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS]
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]              
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP              
    ';
		IF @INITIAL_DATE IS NOT NULL
			AND @FINAL_DATE IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');
		IF @EC IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');
		IF @BRANCH IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');
		IF @DEPART IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');
		IF LEN(@TERMINAL) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');
		IF LEN(@STATE) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');
		IF LEN(@CITY) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');
		IF LEN(@TYPE_TRAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');
		IF LEN(@SITUATION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');
		IF LEN(@BRAND) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');
		IF LEN(@PAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');
		IF LEN(@NSU) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');
		IF LEN(@NSU_EXT) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');
		--ELSE              
		-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL              
		-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');              
		IF @COD_AFFILIATOR IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');
		IF LEN(@TRACKING_TRANSACTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');
		IF LEN(@DESCRIPTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');
		IF @SPOT_ELEGIBLE = 1
		BEGIN
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE 
   
    
      
        
          
            
        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');
		END;
		IF @COD_ACQ IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');
		IF @SOURCE_TRAN IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');
		IF @POSWEB = 1
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');
		IF (@INITIAL_VALUE > 0)
			AND (@FINAL_VALUE >= @INITIAL_VALUE)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');
		IF (@SPLIT = 1)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');

		IF @COD_EC_PROD IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC_PROD = @COD_EC_PROD');

		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');
		--SELECT @QUERY_BASIS              
		EXEC [sp_executesql] @QUERY_BASIS
							,N'              
   @CODCOMP VARCHAR(10),              
   @INITIAL_DATE DATETIME,              
   @FINAL_DATE DATETIME,              
   @EC int,              
   @BRANCH int,              
   @DEPART int,              
   @TERMINAL varchar(14),              
   @STATE varchar(25),              
   @CITY varchar(40),              
   @TYPE_TRAN VARCHAR(10),              
   @SITUATION VARCHAR(10),              
   @NSU varchar(100),              
   @NSU_EXT varchar(100),              
   @BRAND varchar(50),              
   @COD_AFFILIATOR INT,              
   @PAN VARCHAR(50),              
   @SOURCE_TRAN INT,              
   @POSWEB INT,              
   @INITIAL_VALUE DECIMAL(22,6),              
   @FINAL_VALUE DECIMAL(22,6),              
   @COD_SALES_REP INT,              
   @COD_ACQ INT,  
   @COD_EC_PROD INT  
   '
							,@CODCOMP = @CODCOMP
							,@INITIAL_DATE = @INITIAL_DATE
							,@FINAL_DATE = @FINAL_DATE
							,@EC = @EC
							,@BRANCH = @BRANCH
							,@DEPART = @DEPART
							,@TERMINAL = @TERMINAL
							,@STATE = @STATE
							,@CITY = @CITY
							,@TYPE_TRAN = @TYPE_TRAN
							,@SITUATION = @SITUATION
							,@NSU = @NSU
							,@NSU_EXT = @NSU_EXT
							,@BRAND = @BRAND
							,@PAN = @PAN
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = @SOURCE_TRAN
							,@POSWEB = @POSWEB
							,@INITIAL_VALUE = @INITIAL_VALUE
							,@FINAL_VALUE = @FINAL_VALUE
							,@COD_SALES_REP = @COD_SALES_REP
							,@COD_ACQ = @COD_ACQ
							,@COD_EC_PROD = @COD_EC_PROD;
	END;
END;


GO

--ET-1073

GO

IF OBJECT_ID('ACCESS_TEF_API') IS NULL
BEGIN
	CREATE TABLE ACCESS_TEF_API (
		COD_ACCESS_TEF INT PRIMARY KEY IDENTITY NOT NULL
	   ,USERNAME VARCHAR(64) NOT NULL
	   ,PASSWORD VARCHAR(64) NOT NULL
	   ,CLIENT_ID VARCHAR(64) NOT NULL
	   ,ACTIVE INT NOT NULL DEFAULT (1)
	   ,COD_AC INT NOT NULL REFERENCES ACQUIRER (COD_AC)
	   ,COD_AFFILIATOR INT NOT NULL REFERENCES AFFILIATOR (COD_AFFILIATOR)
	   ,CREATED_AT DATETIME NOT NULL DEFAULT (GETDATE())
	   ,COD_COMP INT REFERENCES COMPANY (COD_COMP)
	   ,COD_USER INT REFERENCES USERS (COD_USER)
	   ,COD_USER_MODIFY INT REFERENCES USERS (COD_USER)
	   ,MODIFIED_DATE DATETIME NULL
	)
END
IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('ACCESS_TEF_API')
		AND NAME = 'IX_TEF_ACCESS')
BEGIN
	CREATE INDEX IX_TEF_ACCESS ON ACCESS_TEF_API (USERNAME) INCLUDE (COD_AC, COD_AFFILIATOR, PASSWORD, CLIENT_ID)
END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('ACCESS_TEF_API')
		AND NAME = 'IX_TEF_ACQUIRER')
BEGIN
	CREATE INDEX IX_TEF_ACQUIRER ON ACCESS_TEF_API (COD_AC) INCLUDE (ACTIVE, COD_AFFILIATOR)
END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('ACCESS_TEF_API')
		AND NAME = 'IX_TEF_AFFILIATOR')
BEGIN
	CREATE INDEX IX_TEF_AFFILIATOR ON ACCESS_TEF_API (COD_AFFILIATOR) INCLUDE (ACTIVE, COD_AC)
END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('ACCESS_TEF_API')
		AND NAME = 'IX_TEF_COMP')
BEGIN
	CREATE INDEX IX_TEF_COMP ON ACCESS_TEF_API (COD_COMP) INCLUDE (ACTIVE, COD_AC, COD_AFFILIATOR)
END

IF OBJECT_ID('SP_CREATE_TEF_LOGIN') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_CREATE_TEF_LOGIN
END
GO
CREATE PROCEDURE SP_CREATE_TEF_LOGIN
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                  VERSION        Date             Description
------------------------------------------------------------------------------------------
Luiz Aquino              V1            2020-09-16       CREATED
------------------------------------------------------------------------------------------*/ (@PASSWORD VARCHAR(64),
@COD_AC INT,
@COD_AFFILIATED INT,
@ACTIVE INT,
@COD_USER INT = NULL,
@RESET_PASSWORD INT = 0,
@COD_COMP INT = NULL)
AS
BEGIN

	IF @COD_COMP IS NULL
	BEGIN
		SELECT TOP 1
			@COD_COMP = COD_COMP
		FROM COMPANY
	END

	DECLARE @USERNAME VARCHAR(64)
		   ,@CLIENT_ID VARCHAR(64)
		   ,@AC_CODE VARCHAR(32)

	SELECT
		@AC_CODE = REVERSE(CODE)
	FROM ACQUIRER
	WHERE COD_AC = @COD_AC

	SELECT
		@USERNAME = CONCAT(REVERSE(CODE), REVERSE(CPF_CNPJ), @AC_CODE)
	   ,@CLIENT_ID = [GUID]
	FROM AFFILIATOR
	WHERE COD_AFFILIATOR = @COD_AFFILIATED

	IF @ACTIVE = 0
	BEGIN
		UPDATE ACCESS_TEF_API
		SET ACTIVE = 0
		   ,MODIFIED_DATE = GETDATE()
		   ,COD_USER_MODIFY = @COD_USER
		WHERE COD_AFFILIATOR = @COD_AFFILIATED
		AND COD_AC = @COD_AC
		AND ACTIVE = 1;
	END
	ELSE
	IF EXISTS (SELECT
				1
			FROM ACCESS_TEF_API
			WHERE COD_AFFILIATOR = @COD_AFFILIATED
			AND COD_AC = @COD_AC)
	BEGIN

		IF @RESET_PASSWORD = 1
		BEGIN
			UPDATE ACCESS_TEF_API
			SET ACTIVE = 1
			   ,PASSWORD = @PASSWORD
			   ,COD_USER_MODIFY = @COD_USER
			   ,MODIFIED_DATE = GETDATE()
			WHERE COD_AFFILIATOR = @COD_AFFILIATED
			AND COD_AC = @COD_AC
		END
		ELSE
		BEGIN
			UPDATE ACCESS_TEF_API
			SET ACTIVE = 1
			   ,COD_USER_MODIFY = @COD_USER
			   ,MODIFIED_DATE = GETDATE()
			WHERE COD_AFFILIATOR = @COD_AFFILIATED
			AND COD_AC = @COD_AC
			AND ACTIVE = 0
		END
	END
	ELSE
	BEGIN

		IF NOT EXISTS (SELECT
					1
				FROM ACCESS_TEF_API
				WHERE USERNAME = @USERNAME
				AND CLIENT_ID = @CLIENT_ID)
		BEGIN
			INSERT INTO ACCESS_TEF_API (USERNAME, PASSWORD, CLIENT_ID, COD_AC, COD_AFFILIATOR, COD_COMP, COD_USER)
				VALUES (@USERNAME, @PASSWORD, @CLIENT_ID, @COD_AC, @COD_AFFILIATED, @COD_COMP, @COD_USER)
		END
		ELSE
			THROW 62000, 'DEPLICATED USERNAME AND CLIENT_ID', 1

	END
END
GO

IF OBJECT_ID('SP_TEF_API_LOGIN') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_TEF_API_LOGIN
END
GO
CREATE PROCEDURE SP_TEF_API_LOGIN
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                  VERSION        Date             Description
------------------------------------------------------------------------------------------
Luiz Aquino              V1            2020-09-16       CREATED
------------------------------------------------------------------------------------------*/ (@USERNAME VARCHAR(64),
@CLIENT_ID VARCHAR(64))
AS
BEGIN

	SELECT
		[PASSWORD]
	   ,COD_AC
	   ,COD_AFFILIATOR
	   ,ACTIVE
	   ,COD_ACCESS_TEF
	   ,COD_COMP
	FROM ACCESS_TEF_API
	WHERE USERNAME = @USERNAME
	AND CLIENT_ID = @CLIENT_ID
END
GO

IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM ITEMS_SERVICES_AVAILABLE
		WHERE CODE = '19')
BEGIN
	INSERT INTO ITEMS_SERVICES_AVAILABLE (NAME, DESCRIPTION, CODE)
		VALUES ('ApiTef', 'Api Transacional (TEF)', '19')
END
GO

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('EQUIPMENT')
		AND NAME = 'IX_EQUIP_SERIAL')
BEGIN
	CREATE NONCLUSTERED INDEX IX_EQUIP_SERIAL ON EQUIPMENT (SERIAL) INCLUDE (ACTIVE, TID, COD_MODEL)
END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('PRODUCTS_ACQUIRER')
		AND NAME = 'IX_PROD_BRAND_ACQ')
BEGIN
	CREATE NONCLUSTERED INDEX IX_PROD_BRAND_ACQ ON PRODUCTS_ACQUIRER (COD_BRAND, COD_AC) INCLUDE (COD_SOURCE_TRAN, VISIBLE, NAME, EXTERNALCODE, IS_SIMULATED, PLOT_VALUE)
END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('PRODUCT_UNAVAILABLE_MODEL')
		AND NAME = 'IX_UNAVAILABLE_PROD_MODEL_ACQ')
BEGIN
	CREATE NONCLUSTERED INDEX IX_UNAVAILABLE_PROD_MODEL_ACQ ON PRODUCT_UNAVAILABLE_MODEL (COD_MODEL, COD_AFFILIATOR) INCLUDE (COD_PR_ACQ)
END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('ASS_TR_TYPE_COMP')
		AND NAME = 'IX_TR_TYPE_COMP_ACQ')
BEGIN
	CREATE NONCLUSTERED INDEX IX_TR_TYPE_COMP_ACQ ON ASS_TR_TYPE_COMP (COD_AC, COD_TTYPE, COD_BRAND) INCLUDE (COD_SOURCE_TRAN, PLOT_INI, PLOT_END, COD_COMP, ACTIVE)
END

IF NOT EXISTS (SELECT
			col.NAME
		FROM sys.indexes ind
		INNER JOIN sys.index_columns ic
			ON ind.object_id = ic.object_id
			AND ind.index_id = ic.index_id
		INNER JOIN sys.columns col
			ON ic.object_id = col.object_id
			AND ic.column_id = col.column_id
		WHERE ind.object_id = OBJECT_ID('ASS_TAX_DEPART')
		AND ind.NAME = 'IX_ASS_TAX_DEPART_COD_INCL_COD_TTYPE_INTERVAL_BRAND'
		AND col.NAME = 'COD_MODEL')
BEGIN

	DROP INDEX IX_ASS_TAX_DEPART_COD_INCL_COD_TTYPE_INTERVAL_BRAND ON ASS_TAX_DEPART

	CREATE NONCLUSTERED INDEX IX_ASS_TAX_DEPART_COD_INCL_COD_TTYPE_INTERVAL_BRAND ON ASS_TAX_DEPART (ACTIVE, COD_DEPTO_BRANCH, COD_SOURCE_TRAN, QTY_INI_PLOTS, QTY_FINAL_PLOTS) INCLUDE (COD_TTYPE, INTERVAL, COD_BRAND, COD_MODEL)

END

IF NOT EXISTS (SELECT
			*
		FROM sys.columns
		WHERE object_id = OBJECT_ID('TRANSACTION')
		AND NAME = 'EXTERNAL_NSU')
BEGIN
	ALTER TABLE [TRANSACTION]
	ADD EXTERNAL_NSU VARCHAR(32) NULL
END

IF NOT EXISTS (SELECT
			col.NAME
		FROM sys.indexes ind
		INNER JOIN sys.index_columns ic
			ON ind.object_id = ic.object_id
			AND ind.index_id = ic.index_id
		INNER JOIN sys.columns col
			ON ic.object_id = col.object_id
			AND ic.column_id = col.column_id
		WHERE ind.object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
		AND ind.NAME = 'IX_EC_COD_SITUATION'
		AND col.NAME = 'COD_RISK_SITUATION')
BEGIN

	DROP INDEX IX_EC_COD_SITUATION ON COMMERCIAL_ESTABLISHMENT

	CREATE INDEX IX_EC_COD_SITUATION ON COMMERCIAL_ESTABLISHMENT (CPF_CNPJ, COD_SITUATION) INCLUDE (COD_RISK_SITUATION, COD_AFFILIATOR)

END

IF NOT EXISTS (SELECT
			1
		FROM sys.indexes
		WHERE object_id = OBJECT_ID('TRANSACTION')
		AND NAME = 'IX_TRAN_EXT_NSU')
BEGIN
	CREATE NONCLUSTERED INDEX IX_TRAN_EXT_NSU ON [TRANSACTION] (COD_AFFILIATOR, EXTERNAL_NSU) INCLUDE (COD_TRAN, COD_EC, COD_ASS_DEPTO_TERMINAL, COD_AC, CODE, Amount)
END

IF OBJECT_ID('SEQ_TRANCODE_TEF') IS NULL
BEGIN
	CREATE SEQUENCE SEQ_TRANCODE_TEF START WITH 0 INCREMENT BY 1;
END
GO

IF OBJECT_ID('SP_REG_TEF_TRANSACTION') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REG_TEF_TRANSACTION
END
GO
IF TYPE_ID('REG_TEF_TP') IS NOT NULL
BEGIN
	DROP TYPE REG_TEF_TP
END
GO
CREATE TYPE REG_TEF_TP AS TABLE
(
TerminalId VARCHAR(128),
MerchantId VARCHAR(14),
TransactionType VARCHAR(12),
Amount DECIMAL(22, 6),
Installments INT,
Brand VARCHAR(32),
CardNumber VARCHAR(32),
CardHolderName VARCHAR(64),
AuthCode VARCHAR(64),
ExternalNSU VARCHAR(64),
Status VARCHAR(16),
CodAffiliated INT,
CodAc INT,
CodComp INT,
Type VARCHAR(64)
)
GO

CREATE PROCEDURE SP_REG_TEF_TRANSACTION
/*----------------------------------------------------------------------------------------        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author                  VERSION        Date             Description        
------------------------------------------------------------------------------------------        
    Luiz Aquino              V1            2020-09-17       CREATED        
------------------------------------------------------------------------------------------*/ (@Transactions REG_TEF_TP READONLY)
AS
BEGIN

	DECLARE @COD_SUCCESS INT
		   ,@COD_ERROR INT
		   ,@COD_TEF_SERVICE INT
		   ,@COD_SOURCE_TRAN INT
		   ,@EQUIPMENT_DATE DATETIME = GETDATE()
		   ,@COD_CURRENCY INT
		   ,@BASE_CODE VARCHAR(12)

	SET @BASE_CODE = CONCAT
	(
	'TEF',
	CAST(DATEPART(YEAR, @EQUIPMENT_DATE) AS VARCHAR(4)),
	CAST(DATEPART(MONTH, @EQUIPMENT_DATE) AS VARCHAR(4)),
	CAST(DATEPART(DAY, @EQUIPMENT_DATE) AS VARCHAR(4))
	);

	SELECT
		@COD_SUCCESS = COD_SITUATION
	FROM SITUATION(NOLOCK)
	WHERE NAME = 'CONFIRMED'
	SELECT
		@COD_ERROR = COD_SITUATION
	FROM SITUATION(NOLOCK)
	WHERE NAME = 'DENIED ACQUIRER'
	SELECT
		@COD_TEF_SERVICE = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE NAME = 'ApiTef'
	SELECT
		@COD_SOURCE_TRAN = COD_SOURCE_TRAN
	FROM SOURCE_TRANSACTION
	WHERE CODE = 'PRESENCIAL'
	SELECT
		@COD_CURRENCY = COD_CURRRENCY
	FROM CURRENCY
	WHERE CODE = 'BRL'

	SELECT
		CONCAT(@BASE_CODE, CAST((NEXT VALUE FOR SEQ_TRANCODE_TEF) AS VARCHAR(24))) CODE
	   ,T.TerminalId
	   ,T.MerchantId
	   ,T.TransactionType
	   ,T.Amount
	   ,T.Installments
	   ,T.Brand
	   ,T.CardNumber
	   ,T.CardHolderName
	   ,T.AuthCode
	   ,T.ExternalNSU
	   ,T.Status
	   ,T.CodAffiliated
	   ,T.CodAc
	   ,T.CodComp
	   ,IIF(T.Type IS NULL, 'TRANSACTION', T.Type) [Type]
	   ,IIF(T.Status = 'Authorized', @COD_SUCCESS, @COD_ERROR) [COD_SITUATION]
	   ,CE.COD_EC
	   ,E.COD_EQUIP
	   ,Type.COD_TTYPE
	   ,B.COD_BRAND
	   ,B.NAME [BRAND_NAME]
	   ,B.GEN_TITLES
	   ,ADE.COD_ASS_DEPTO_TERMINAL
	   ,PA.COD_PR_ACQ
	   ,ATTC.COD_ASS_TR_COMP
	   ,ATD.COD_ASS_TX_DEP
	   ,@COD_SOURCE_TRAN [COD_SOURCE_TRAN]
	   ,@EQUIPMENT_DATE [EQUIPMENT_DATE]
	   ,@COD_CURRENCY [COD_CURRENCY]
	   ,IIF(CE.COD_EC IS NOT NULL AND
		CE.ACTIVE = 1 AND
		E.COD_EQUIP IS NOT NULL AND
		E.ACTIVE = 1 AND
		Type.COD_TTYPE IS NOT NULL AND
		B.COD_BRAND IS NOT NULL AND
		PA.COD_PR_ACQ IS NOT NULL AND
		ADE.COD_ASS_DEPTO_TERMINAL IS NOT NULL AND
		ATTC.COD_ASS_TR_COMP IS NOT NULL AND
		ATD.COD_ASS_TX_DEP IS NOT NULL AND (
		ISNULL((SELECT
				COUNT(*)
			FROM @Transactions TVAL
			WHERE TVAL.ExternalNSU = T.ExternalNSU
			GROUP BY TVAL.ExternalNSU
			HAVING COUNT(*) > 1)
		, 0)
		= 0)
		, 1, 0) [VALID]
	   ,(CASE
			WHEN CE.COD_EC IS NULL THEN 'EC_INVALID'
			WHEN E.COD_EQUIP IS NULL THEN 'EQP_INVALID'
			WHEN Type.COD_TTYPE IS NULL THEN 'TYPE_INVALID'
			WHEN B.COD_BRAND IS NULL THEN 'BRAND_INVALID'
			WHEN ADE.COD_ASS_DEPTO_TERMINAL IS NULL THEN 'EQP_NOT_ASSOCIATED'
			WHEN PA.COD_PR_ACQ IS NULL THEN 'ACQ_PRODUT_NOT_FOUND'
			WHEN ATTC.COD_ASS_TR_COMP IS NULL THEN 'ACQ_TAX_NOT_FOUND'
			WHEN ATD.COD_ASS_TX_DEP IS NULL THEN 'EC_PLAN_TAX_NOT_FOUND'
			WHEN E.ACTIVE = 0 THEN 'EQP_INACTIVE'
			WHEN CE.ACTIVE = 0 THEN 'EC_INACTIVE'
			WHEN CE.COD_RISK_SITUATION <> 2 THEN 'EC_BLOCKED'
			WHEN ISNULL((SELECT
						COUNT(*)
					FROM @Transactions TVAL
					WHERE TVAL.ExternalNSU = T.ExternalNSU
					GROUP BY TVAL.ExternalNSU
					HAVING COUNT(*) > 1)
				, 0)
				> 1 THEN 'EXTERNALNSU_DUPLICATED'
			ELSE NULL
		END) [ERROR_CODE]
	   ,IIF(EXISTS (SELECT
				COD_TRAN
			FROM [TRANSACTION](NOLOCK) T2
			WHERE T2.COD_AFFILIATOR = T.CodAffiliated
			AND T2.EXTERNAL_NSU = T.ExternalNSU)
		, 1, 0) [DUPLICATED] INTO #TransactionInfo
	FROM @Transactions T
	LEFT JOIN TRANSACTION_TYPE(NOLOCK) Type
		ON Type.NAME = T.TransactionType
	LEFT JOIN Brand(NOLOCK) B
		ON B.[GROUP] = T.Brand
			AND Type.COD_TTYPE = B.COD_TTYPE
	LEFT JOIN COMMERCIAL_ESTABLISHMENT(NOLOCK) CE
		ON CE.COD_AFFILIATOR = T.CodAffiliated
			AND CE.CPF_CNPJ = T.MerchantId
	LEFT JOIN BRANCH_EC(NOLOCK) BR
		ON BR.COD_EC = CE.COD_EC
	LEFT JOIN DEPARTMENTS_BRANCH(NOLOCK) DBR
		ON DBR.COD_BRANCH = BR.COD_BRANCH
	LEFT JOIN EQUIPMENT(NOLOCK) E
		ON E.SERIAL = T.TerminalId
	LEFT JOIN PRODUCTS_ACQUIRER(NOLOCK) PA
		ON PA.COD_BRAND = B.COD_BRAND
			AND PA.COD_AC = T.CodAc
			AND PA.VISIBLE = 1
			AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
			AND IS_SIMULATED = 0
			AND PLOT_VALUE = IIF(T.Installments = 1, 1, 2)
	LEFT JOIN ASS_TAX_DEPART(NOLOCK) ATD
		ON ATD.ACTIVE = 1
			AND ATD.COD_DEPTO_BRANCH = DBR.COD_DEPTO_BRANCH
			AND ATD.COD_SOURCE_TRAN = @COD_SOURCE_TRAN
			AND ATD.QTY_INI_PLOTS <= T.Installments
			AND ATD.QTY_FINAL_PLOTS >= T.Installments
			AND ATD.COD_TTYPE = Type.COD_TTYPE
			AND ATD.COD_BRAND = B.COD_BRAND
			AND (ATD.COD_MODEL IS NULL
				OR ATD.COD_MODEL = E.COD_MODEL)
	LEFT JOIN ASS_DEPTO_EQUIP(NOLOCK) ADE
		ON ADE.ACTIVE = 1
			AND ADE.COD_DEPTO_BRANCH = DBR.COD_DEPTO_BRANCH
			AND ADE.COD_EQUIP = E.COD_EQUIP
	LEFT JOIN ASS_TR_TYPE_COMP(NOLOCK) ATTC
		ON ATTC.COD_AC = T.CodAc
			AND ATTC.COD_TTYPE = Type.COD_TTYPE
			AND ATTC.COD_BRAND = B.COD_BRAND
			AND ATTC.PLOT_INI <= T.Installments
			AND ATTC.PLOT_END >= T.Installments
			AND ATTC.ACTIVE = 1
			AND ATTC.COD_SOURCE_TRAN = @COD_SOURCE_TRAN

	DECLARE @inserted TABLE (
		[EXTERNAL_NSU] VARCHAR(32)
	   ,[COD_TRAN] INT
	   ,COD_EC INT
	)

	INSERT INTO [TRANSACTION] (CODE
	, Amount
	, PAN
	, COD_CURRRENCY
	, Brand
	, COD_ASS_DEPTO_TERMINAL
	, COD_TTYPE
	, PLOTS
	, COD_ASS_TX_DEP
	, COD_SITUATION
	, EQUIPMENT_DATE
	, COD_ASS_TR_COMP
	, COD_PR_ACQ
	, [Type]
	, [COD_COMP]
	, COD_AFFILIATOR
	, COD_SOURCE_TRAN
	, COD_EC
	, BRAZILIAN_DATE
	, CARD_HOLDER_NAME
	, EXTERNAL_NSU
	, COD_AC)
	OUTPUT INSERTED.EXTERNAL_NSU, INSERTED.COD_TRAN, INSERTED.COD_EC
	INTO @inserted
		SELECT
			T.CODE
		   ,T.Amount
		   ,T.CardNumber
		   ,T.COD_CURRENCY
		   ,T.BRAND_NAME
		   ,T.COD_ASS_DEPTO_TERMINAL
		   ,T.COD_TTYPE
		   ,T.Installments
		   ,T.COD_ASS_TX_DEP
		   ,T.COD_SITUATION
		   ,T.EQUIPMENT_DATE
		   ,T.COD_ASS_TR_COMP
		   ,T.COD_PR_ACQ
		   ,T.Type
		   ,T.CodComp
		   ,T.CodAffiliated
		   ,T.COD_SOURCE_TRAN
		   ,T.COD_EC
		   ,dbo.FN_FUS_UTF(T.EQUIPMENT_DATE) [BRAZILLIAN_DATE]
		   ,T.CardHolderName
		   ,T.ExternalNSU
		   ,T.CodAc
		FROM #TransactionInfo T
		WHERE T.VALID = 1
		AND T.DUPLICATED = 0;

	INSERT INTO PROCESS_BG_STATUS (CODE, COD_TYPE_PROCESS_BG, COD_SOURCE_PROCESS)
		SELECT
			COD_TRAN
		   ,1
		   ,COD_SOURCE_PROCESS
		FROM @inserted
		JOIN SOURCE_PROCESS(NOLOCK)
			ON COD_SOURCE_PROCESS > 0;

	INSERT INTO TRANSACTION_SERVICES (COD_ITEM_SERVICE, COD_TRAN, COD_EC)
		SELECT
			@COD_TEF_SERVICE
		   ,COD_TRAN
		   ,COD_EC
		FROM @inserted;

	INSERT INTO TRANSACTION_DATA_EXT (NAME, VALUE, COD_TRAN)
		SELECT
			'AUTHCODE'
		   ,T.AuthCode
		   ,i.COD_TRAN
		FROM #TransactionInfo T
		JOIN @inserted i
			ON i.EXTERNAL_NSU = T.ExternalNSU
		WHERE T.VALID = 1
		AND DUPLICATED = 0;

	INSERT INTO TRANSACTION_DATA_EXT (NAME, VALUE, COD_TRAN, NSU_EXT)
		SELECT
			'NSU'
		   ,T.ExternalNSU
		   ,i.COD_TRAN
		   ,1
		FROM #TransactionInfo T
		JOIN @inserted i
			ON i.EXTERNAL_NSU = T.ExternalNSU
		WHERE T.VALID = 1
		AND DUPLICATED = 0;

	SELECT
		T.ExternalNSU
	   ,i.COD_TRAN
	   ,T.VALID
	   ,T.ERROR_CODE AS ERRORCODE
	   ,T.DUPLICATED
	FROM #TransactionInfo T
	LEFT JOIN @inserted i
		ON i.EXTERNAL_NSU = T.ExternalNSU;

END;
GO


IF OBJECT_ID('SP_UP_TEF_TRANSACTION') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UP_TEF_TRANSACTION
END
GO
IF TYPE_ID('UP_TEF_TP') IS NOT NULL
BEGIN
	DROP TYPE UP_TEF_TP
END
GO
CREATE TYPE UP_TEF_TP AS TABLE
(
TerminalId VARCHAR(128),
MerchantId VARCHAR(14),
Amount DECIMAL(22, 6),
ExternalNSU VARCHAR(64),
Status VARCHAR(16),
CodAffiliated INT,
CodAc INT,
CodComp INT
)
GO
CREATE PROCEDURE SP_UP_TEF_TRANSACTION
/*----------------------------------------------------------------------------------------  
    Project.......: TKPP  
------------------------------------------------------------------------------------------  
    Author                  VERSION        Date             Description  
------------------------------------------------------------------------------------------  
    Luiz Aquino              V1            2020-09-22       CREATED  
------------------------------------------------------------------------------------------*/ (@Transactions UP_TEF_TP READONLY)
AS
BEGIN

	DECLARE @COD_CANCELED INT
		   ,@AWAITING_PAYMENT INT
		   ,@PROCESSADORA INT
		   ,@PAID INT

	SELECT
		@COD_CANCELED = COD_SITUATION
	FROM SITUATION(NOLOCK)
	WHERE NAME = 'CANCELED'
	SELECT
		@AWAITING_PAYMENT = COD_SITUATION
	FROM SITUATION(NOLOCK)
	WHERE NAME = 'AWAITING PAYMENT'

	SELECT
		@PROCESSADORA = COD_SITUATION
	FROM SITUATION(NOLOCK)
	WHERE NAME = 'LIQUIDACAO PROCESSADORA'

	SELECT
		@PAID = COD_SITUATION
	FROM SITUATION(NOLOCK)
	WHERE NAME = 'PAID'

	SELECT
		T.COD_TRAN
	   ,info.ExternalNSU
	   ,T.CODE
	   ,IIF(T.COD_TRAN IS NOT NULL AND
		info.Status = 'Canceled' AND
		T.Amount = info.Amount AND
		CE.CPF_CNPJ = info.MerchantId AND
		E.COD_EQUIP = ADE.COD_EQUIP AND
		T.COD_AFFILIATOR = info.CodAffiliated, 1, 0) VALID
	   ,(CASE
			WHEN T.COD_TRAN IS NULL THEN 'TRAN_INVALID'
			WHEN info.Status != 'Canceled' THEN 'STATUS_INVALID'
			WHEN T.Amount != info.Amount THEN 'AMOUNT_INVALID'
			WHEN CE.CPF_CNPJ != info.MerchantId THEN 'EC_INVALID'
			WHEN E.COD_EQUIP IS NULL OR
				E.COD_EQUIP != ADE.COD_EQUIP THEN 'EQP_INVALID'
			WHEN info.CodAffiliated != T.COD_AFFILIATOR THEN 'AF_INVALID'
			ELSE NULL
		END) ERROR_CODE
	   ,IIF(EXISTS (SELECT
				title.COD_TITLE
			FROM TRANSACTION_TITLES(NOLOCK) title
			LEFT JOIN FINANCE_CALENDAR(NOLOCK) FC
				ON FC.ACTIVE = 1
				AND FC.COD_EC = T.COD_EC
				AND title.COD_FIN_CALENDAR = FC.COD_FIN_CALENDAR
			WHERE title.COD_TRAN = T.COD_TRAN
			AND title.COD_EC = T.COD_EC
			AND ISNULL(FC.COD_SITUATION, title.COD_SITUATION) NOT IN (@AWAITING_PAYMENT, @PROCESSADORA, @PAID))
		, 1, 0) [INVALID_PAYMENT_SIT]
	   ,T.COD_EC INTO #TranData
	FROM @Transactions info
	LEFT JOIN [TRANSACTION](NOLOCK) T
		ON info.CodAffiliated = T.COD_AFFILIATOR
			AND info.ExternalNSU = T.EXTERNAL_NSU
	LEFT JOIN COMMERCIAL_ESTABLISHMENT(NOLOCK) CE
		ON CE.COD_AFFILIATOR = info.CodAffiliated
			AND T.COD_EC = CE.COD_EC
	LEFT JOIN ASS_DEPTO_EQUIP(NOLOCK) ADE
		ON T.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
	LEFT JOIN EQUIPMENT(NOLOCK) E
		ON E.SERIAL = info.TerminalId;



	INSERT INTO TRANSACTION_HISTORY (COD_TRAN, CODE, COD_SITUATION, COMMENT)
		SELECT
			COD_TRAN
		   ,CODE
		   ,@COD_CANCELED
		   ,'CANCELED BY TEF'
		FROM #TranData
		WHERE VALID = 1
		AND INVALID_PAYMENT_SIT = 0;

	INSERT INTO RELEASE_ADJUSTMENTS (COD_EC, VALUE, PREVISION_PAY_DATE, COD_TYPEJUST, COMMENT, COD_SITUATION, COD_USER, COD_REQ, COD_BRANCH, COD_TRAN, COD_TITLE_REF)
		SELECT
			CAST(TRANSACTION_TITLES.COD_EC AS INT) AS COD_EC
		   ,(CAST(
			(
			(
			(TRANSACTION_TITLES.Amount * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
			CASE
				WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
				ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
					COALESCE(CASE
						WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
						ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
					END, (TRANSACTION_TITLES.PLOT * 30) - 1)
					) / 100)
			END
			)
			- (CASE
				WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
				ELSE 0
			END)
			) AS DECIMAL(22, 6)) * -1) AS VALUE
		   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE AS PREVISION_PAY_DATE
		   ,CAST(2 AS INT) AS COD_TYPEJUST
		   ,CAST('CANCELAMENTO PARCIAL, NSU: ' + info.CODE AS VARCHAR(200)) AS COMMENT
		   ,CAST(4 AS INT) AS COD_SITUATION
		   ,NULL AS CODUSER
		   ,NULL AS COD_REQ
		   ,CAST([COMMERCIAL_ESTABLISHMENT].COD_EC AS INT) AS COD_BRANCH
		   ,CAST(info.COD_TRAN AS INT) AS COD_TRAN
		   ,CAST([TRANSACTION_TITLES].COD_TITLE AS INT) AS COD_TITLE_REF
		FROM [TRANSACTION_TITLES] WITH (NOLOCK)
		INNER JOIN #TranData info
			ON info.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
		INNER JOIN [COMMERCIAL_ESTABLISHMENT]
			ON [COMMERCIAL_ESTABLISHMENT].COD_EC = [TRANSACTION_TITLES].COD_EC
		LEFT JOIN FINANCE_CALENDAR
			ON FINANCE_CALENDAR.COD_FIN_CALENDAR = [TRANSACTION_TITLES].COD_FIN_CALENDAR
				AND FINANCE_CALENDAR.ACTIVE = 1
		WHERE ISNULL(FINANCE_CALENDAR.COD_SITUATION, TRANSACTION_TITLES.COD_SITUATION) = @PAID
		AND info.VALID = 1
		AND INVALID_PAYMENT_SIT = 0;


	UPDATE T
	SET COD_SITUATION = @COD_CANCELED
	   ,MODIFY_DATE = GETDATE()
	   ,COMMENT = 'CANCELED BY TEF_API'
	   ,CODE_ERROR = 300
	FROM #TranData info
	JOIN [TRANSACTION] T
		ON T.COD_TRAN = info.COD_TRAN
	WHERE info.VALID = 1
	AND INVALID_PAYMENT_SIT = 0;

	UPDATE title
	SET COD_SITUATION = 6
	   ,MODIFY_DATE = GETDATE()
	   ,COMMENT = 'CANCELED BY TEF_API'
	   ,COD_FIN_CALENDAR = NULL
	FROM #TranData info
	JOIN TRANSACTION_TITLES title
		ON title.COD_TRAN = info.COD_TRAN
	WHERE info.VALID = 1
	AND INVALID_PAYMENT_SIT = 0;

	UPDATE TRANSACTION_TITLES_COST
	SET COD_SITUATION = @COD_CANCELED
	   ,MODIFY_DATE = GETDATE()
	   ,COMMENT = 'CANCELED BY TEF_API'
	FROM #TranData info
	JOIN TRANSACTION_TITLES(NOLOCK) title
		ON title.COD_TRAN = info.COD_TRAN
	JOIN TRANSACTION_TITLES_COST TTC
		ON title.COD_TITLE = TTC.COD_TITLE
	WHERE info.VALID = 1
	AND INVALID_PAYMENT_SIT = 0;

	UPDATE PBS
	SET STATUS_PROCESSED = 0
	   ,MODIFY_DATE = GETDATE()
	FROM #TranData info
	JOIN PROCESS_BG_STATUS(NOLOCK) PBS
		ON PBS.CODE = info.COD_TRAN
		AND COD_TYPE_PROCESS_BG = 1
	WHERE info.VALID = 1
	AND INVALID_PAYMENT_SIT = 0;

	DECLARE @COD_EC_TITTLE INT;
	DECLARE _ECS CURSOR FOR SELECT DISTINCT
		COD_EC
	FROM [TRANSACTION_TITLES](NOLOCK)
	WHERE COD_TRAN IN (SELECT
			info.COD_TRAN
		FROM #TranData info
		WHERE info.VALID = 1
		AND INVALID_PAYMENT_SIT = 0);

	OPEN _ECS

	FETCH NEXT FROM _ECS INTO @COD_EC_TITTLE

	WHILE @@fetch_status = 0
	BEGIN
	EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

	FETCH NEXT FROM _ECS INTO @COD_EC_TITTLE
	END;

	CLOSE _ECS
	DEALLOCATE _ECS;

	SELECT
		ExternalNSU
	   ,VALID
	   ,INVALID_PAYMENT_SIT
	   ,ERROR_CODE
	FROM #TranData
END
GO

IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UPDATE_SERVICES_AFFILIATOR
END
GO
CREATE PROCEDURE [dbo].[SP_UPDATE_SERVICES_AFFILIATOR]
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author          VERSION      Date              Description
------------------------------------------------------------------------------------------
    Caike Ucha      v1           2020-02-26        Creation
    Elir Ribeiro    v2           2020-04-20        add service billet
    Caike Ucha      v3           2020-04-20        add service MultiEC
    Elir Ribeiro    v4           2020-04-22        alter proc
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero
    Luiz Aquino     V7           2020-09-24        ET-1073 TEF_GLOBAL
------------------------------------------------------------------------------------------*/ (@CODAFFILIATED INT,
@COD_COMP INT,
@COD_USER_ALT INT,
@SPOT_TAX DECIMAL(6, 2) = 0,
@HAS_SPOT INT = 0,
@SPLIT_OPT INT = 0,
@HAS_SPLIT INT = 0,
@HAS_NOTIFICATION INT = 0,
@PASSWORD_NOTIFICATION VARCHAR(255) = NULL,
@CLIENTID_NOTIFICATION VARCHAR(255) = NULL,
@LEDGERRETENTION INT = 0,
@LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,
@HAS_TRANSLATION INT = 0,
@OPERATION_AFF INT = 0,
@HAS_BILLET INT = 0,
@BILLET_TAX DECIMAL(6, 2) = 0,
@HAS_SPLIT_BILLET INT = 0,
@MULTIEC_ACTIVE INT = 0,
@TCU_DETAILED INT = 0,
@PLANDZERO INT = 0,
@PlanDZeroJson VARCHAR(256) = NULL,
@TefApiActive INT = 0,
@TefApiJson VARCHAR(256) = NULL)
AS
BEGIN
	DECLARE @CODSPOTSERVICE INT;
	DECLARE @COD_SPLIT_SERVICE INT;
	DECLARE @COD_GWNOTIFICATION INT;
	DECLARE @HAS_CREDENTIAL INT = 0;
	DECLARE @COD_AWAITSPLIT INT = 0;
	DECLARE @COD_TRANSLATE INT;
	DECLARE @CODBILLETSERVICE INT;
	DECLARE @CODSPLITBILLET INT;
	DECLARE @COD_MULTIEC_AFFILIATOR INT;
	DECLARE @COD_TCU_DETAILED INT;
	DECLARE @COD_PLANDZERO INT;
	DECLARE @COD_TEF_API INT;

	SELECT
		@CODSPOTSERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '1';

	SELECT
		@COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'SPLIT';

	SELECT
		@COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

	SELECT
		@COD_AWAITSPLIT = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '8';

	SELECT
		@HAS_CREDENTIAL = COUNT(*)
	FROM [ACCESS_APPAPI]
	WHERE [COD_AFFILIATOR] = @CODAFFILIATED
	AND [ACTIVE] = 1;

	SELECT
		@COD_TRANSLATE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'TRANSLATE';

	SELECT
		@CODBILLETSERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '12';

	SELECT
		@CODSPLITBILLET = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '13';

	SELECT
		@COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '14';

	SELECT
		@COD_TCU_DETAILED = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '16';

	SELECT
		@COD_PLANDZERO = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'PlanDZero';

	SELECT
		@COD_TEF_API = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'ApiTef';

	IF (@HAS_SPOT = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

	IF (@HAS_SPLIT = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

	IF (@HAS_SPLIT = 1
		AND @SPLIT_OPT = 1
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

	IF (@MULTIEC_ACTIVE = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;

	/*******************************************
    *********** UPDATE SPOT AFFILIATED *********
    *******************************************/

	IF (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = 1
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
		> 0
	BEGIN
		IF @HAS_SPOT = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		ELSE
		BEGIN
			IF @SPOT_TAX > (SELECT
						MIN([SPOT_TAX])
					FROM [COMMERCIAL_ESTABLISHMENT]
					WHERE [COD_AFFILIATOR] = @CODAFFILIATED
					AND [SPOT_TAX] <> 0
					AND [ACTIVE] = 1)
				THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
		END;
	END;
	ELSE
	IF @HAS_SPOT = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
			VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
	END;

	UPDATE AFFILIATOR
	SET SPOT_TAX = @SPOT_TAX
	   ,OPERATION_AFF = @OPERATION_AFF
	WHERE COD_AFFILIATOR = @CODAFFILIATED;

	/********************************************
    *********** UPDATE SPLIT AFFILIATED *********
    ********************************************/

	IF (@HAS_SPLIT = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END;
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
	END;

	/**********************************************
    *********** UPDATE LEDGER RETENTION ***********
    **********************************************/

	IF (@LEDGERRETENTION = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END;
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LEDGERRETENTIONCONFIG);

		DECLARE @DT_FROM DATE;
		DECLARE @DT_UNTIL DATE;

		SELECT
			@DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
		SELECT
			@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

		UPDATE [LEDGER_RETENTION_CONTROL]
		SET [ACTIVE] = 0
		FROM [LEDGER_RETENTION_CONTROL]
		JOIN [COMMERCIAL_ESTABLISHMENT]
			ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
		WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
		AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
		AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
		OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
		OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
	END;

	/************************************************
    *********** UPDATE TRANSLATE AFFILIATED *********
    ************************************************/

	IF @HAS_TRANSLATION = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END;
	ELSE
	BEGIN
		IF (SELECT
					COUNT(*)
				FROM [SERVICES_AVAILABLE]
				WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
				AND [COD_COMP] = @COD_COMP
				AND [COD_AFFILIATOR] = @CODAFFILIATED
				AND [COD_EC] IS NULL
				AND [ACTIVE] = 1)
			= 0
		BEGIN
			INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
			[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
				VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
		END;
	END;

	/***************************************************
    *********** UPDATE NOTIFICATION AFFILIATED *********
    ***************************************************/

	IF @HAS_NOTIFICATION = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		UPDATE [ACCESS_APPAPI]
		SET [ACTIVE] = 0
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [ACTIVE] = 1;
	END;
	ELSE
	IF @HAS_CREDENTIAL = 0
		AND @HAS_NOTIFICATION = 1
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);

		EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
											 ,@PASSWORD_NOTIFICATION
											 ,@CLIENTID_NOTIFICATION;
	END

	/*******************************************
    *********** UPDATE BILLET AFFILIATED *******
    *******************************************/

	IF (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
		> 0
	BEGIN
		IF @HAS_BILLET = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		IF @HAS_SPLIT_BILLET = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		ELSE
		BEGIN
			IF @BILLET_TAX > (SELECT
						MIN([BILLET_TAX])
					FROM [COMMERCIAL_ESTABLISHMENT]
					WHERE [COD_AFFILIATOR] = @CODAFFILIATED
					AND [BILLET_TAX] <> 0
					AND [ACTIVE] = 1)
				THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
		END;
	END;
	ELSE
	IF @HAS_BILLET = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
			VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
	END;

	IF @HAS_SPLIT_BILLET = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
			VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
	END;

	UPDATE AFFILIATOR
	SET BILLET_TAX = @BILLET_TAX
	WHERE COD_AFFILIATOR = @CODAFFILIATED;

	/*******************************************
    *********** UPDATE MULTIEC AFFILIATED *******
    *******************************************/

	IF (@MULTIEC_ACTIVE = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
	END

	/*******************************************
        *********** TCU DETAILED *******
    *******************************************/

	IF (@TCU_DETAILED = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
	END

	/*******************************************
        *********** Plano DZero *******
    *******************************************/

	IF @PLANDZERO = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
		[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
		CONFIG_JSON)
			VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PlanDZeroJson);
	END
	ELSE
	BEGIN

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = @PlanDZeroJson
		   ,COD_USER = @COD_USER_ALT
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1

		DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
		DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
		DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

		IF @CELERONLY = 'true'
		BEGIN
			DECLARE @CODBKCELER INT
			SELECT
				@CODBKCELER = COD_BANK
			FROM BANKS
			WHERE NAME = 'CELER DIGITAL'

			UPDATE SA
			SET ACTIVE = 0
			   ,MODIFY_DATE = GETDATE()
			FROM [SERVICES_AVAILABLE] SA
			JOIN BANK_DETAILS_EC BDE
				ON SA.COD_EC = BDE.COD_EC
				AND BDE.ACTIVE = 1
				AND IS_CERC = 0
				AND COD_BANK != @CODBKCELER
			WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
			AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
			AND SA.[COD_EC] IS NOT NULL
			AND SA.[ACTIVE] = 1
		END
	END

	/*******************************************
        *********** Plano DZero *******
    *******************************************/

	UPDATE ACCESS_TEF_API
	SET ACTIVE = 0
	   ,MODIFIED_DATE = GETDATE()
	   ,COD_USER_MODIFY = @COD_USER_ALT
	WHERE COD_AFFILIATOR = @CODAFFILIATED
	AND ACTIVE = 1;

	IF @TefApiActive = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = GETDATE()
		WHERE ACTIVE = 1
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_ITEM_SERVICE] = @COD_TEF_API
		AND COD_EC IS NULL;
	END
	ELSE
	BEGIN

		IF NOT EXISTS (SELECT
					COD_SERVICE
				FROM SERVICES_AVAILABLE
				WHERE [COD_AFFILIATOR] = @CODAFFILIATED
				AND [COD_ITEM_SERVICE] = @COD_TEF_API
				AND COD_EC IS NULL)
		BEGIN
			INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
			[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
			CONFIG_JSON)
				VALUES (GETDATE(), @COD_USER_ALT, @COD_TEF_API, @COD_COMP, @CODAFFILIATED, NULL, 1, GETDATE(), 1, @TefApiJson);
		END
		ELSE
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 1
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = GETDATE()
			   ,CONFIG_JSON = @TefApiJson
			WHERE [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_ITEM_SERVICE] = @COD_TEF_API
			AND COD_EC IS NULL;
		END

		SELECT
			a.CodAc
		   ,a.PASSWORD INTO #Acqs
		FROM OPENJSON(@TefApiJson) WITH (ACQUIRER NVARCHAR(MAX) '$.Acquirer' AS JSON) AS i
		CROSS APPLY (SELECT
				*
			FROM OPENJSON(i.ACQUIRER) WITH (CodAc INT '$.CodAc', PASSWORD VARCHAR(64) '$.Password')) a

		DECLARE @COD_AC INT;
		DECLARE @Password VARCHAR(64);
		DECLARE _ACS CURSOR FOR SELECT
			CodAc
		   ,PASSWORD
		FROM #Acqs;

		OPEN _ACS

		FETCH NEXT FROM _ACS INTO @COD_AC, @Password

		WHILE @@fetch_status = 0
		BEGIN
		EXEC SP_CREATE_TEF_LOGIN @Password
								,@COD_AC
								,@CODAFFILIATED
								,@TefApiActive
								,@COD_USER_ALT
								,0
								,@COD_COMP

		FETCH NEXT FROM _ACS INTO @COD_AC, @Password
		END;

		CLOSE _ACS
		DEALLOCATE _ACS;
	END

END;
GO

IF OBJECT_ID('SP_FD_CREDENTIALS_AFF') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_FD_CREDENTIALS_AFF
END
GO
CREATE PROCEDURE [SP_FD_CREDENTIALS_AFF]
/*----------------------------------------------------------------------------------------    
    Project.......: TKPP    
------------------------------------------------------------------------------------------    
    Author            VERSION   Date             Description    
------------------------------------------------------------------------------------------    
    Lucas Aguiar      V1        2019-08-23       Creation
    Luiz Aquino       V2        2020-09-25       ET-1073 TEF_GLOBAL
------------------------------------------------------------------------------------------*/ (@COD_AFF INT)
AS

BEGIN


	SELECT
		'GATEWAY NOTIFICATION' [SERVICE]
	   ,[NAME] AS [user]
	   ,CLIENT_ID
	   ,SECRETKEY
	FROM ACCESS_APPAPI
	WHERE COD_AFFILIATOR = @COD_AFF
	AND ACTIVE = 1

	UNION ALL

	SELECT
		'TEF API' [SERVICE]
	   ,USERNAME [user]
	   ,CLIENT_ID
	   ,PASSWORD [SECRETKEY]
	FROM ACCESS_TEF_API
	WHERE COD_AFFILIATOR = @COD_AFF
	AND ACTIVE = 1

END;
GO

IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_UP_SERVICES
END
GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]
/*----------------------------------------------------------------------------------------          
    Procedure Name: [SP_UP_SERVICES]           
    Project.......: TKPP          
------------------------------------------------------------------------------------------          
    Author    VERSION   Date   Description           
------------------------------------------------------------------------------------------           
    Caike Ucha   V1    04/09/2019  Creation           
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split           
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda           
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online                 
    Elir Ribeiro  v6    2020-04-17  addd split boleto online  
    Caike Ucha   V7    2020-04-22  add multi ec
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@COD_AFFILIATOR INT,
@COD_USER INT,
@SERVICE_NAME VARCHAR(100),
@VALUE DECIMAL(22, 6),
@ACTIVE INT,
@TAX_AFILIATOR DECIMAL(22, 6) = NULL,
@BILLET_TAX DECIMAL(22, 6) = NULL,
@VALUE_TAX_BILLET DECIMAL(22, 6) = 0,
@CONFIG_JSON VARCHAR(512) = NULL)
AS

	DECLARE @COD_ITEM_SERVICE INT;
	DECLARE @ONLINE_ACTIVE INT;
	DECLARE @CREDENCIAL INT;

	SELECT
		@CREDENCIAL = TRANSACTION_ONLINE
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC
	BEGIN
		SELECT
			@COD_ITEM_SERVICE = COD_ITEM_SERVICE
		FROM ITEMS_SERVICES_AVAILABLE
		WHERE [NAME] = @SERVICE_NAME

		IF @SERVICE_NAME = 'CREDENTIALS'
		BEGIN
			IF (@ACTIVE = 1)
			BEGIN
				IF ((SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						WHERE USER_ONLINE IS NULL
						AND COD_EC = @COD_EC)
					> 0)
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
					   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
					   ,HAS_CREDENTIALS = 1
					WHERE COD_EC = @COD_EC;
				ELSE
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET HAS_CREDENTIALS = 1
					WHERE COD_EC = @COD_EC;
			END
			ELSE
				UPDATE COMMERCIAL_ESTABLISHMENT
				SET HAS_CREDENTIALS = 0
				WHERE COD_EC = @COD_EC;
		END

		IF @SERVICE_NAME = 'SPOT'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET SPOT_TAX = 0
				WHERE COD_EC = @COD_EC
			END
			ELSE
			BEGIN
				IF (@COD_AFFILIATOR IS NULL
					AND @VALUE <= 0)
					THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET SPOT_TAX = @VALUE
				WHERE COD_EC = @COD_EC;
			END
		END

		IF @SERVICE_NAME = 'BOLETO'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET BILLET_TAX = 0
				WHERE COD_EC = @COD_EC
			END
			ELSE
			BEGIN
				IF (@COD_AFFILIATOR IS NULL
					AND @VALUE_TAX_BILLET <= 0)
					THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET BILLET_TAX = @VALUE_TAX_BILLET
				WHERE COD_EC = @COD_EC;
			END
		END

		IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
		END

		IF @SERVICE_NAME = 'SPLIT'
		BEGIN
			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END

		IF @SERVICE_NAME = 'PARCELADOCLIENTE'
		BEGIN
			SELECT TOP 1
				@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
			FROM SERVICES_AVAILABLE
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
			AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
			AND SERVICES_AVAILABLE.ACTIVE = 1

			IF @ACTIVE = 1
				AND (@ONLINE_ACTIVE = 0
				OR @ONLINE_ACTIVE IS NULL)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
			END
			ELSE
			BEGIN
				IF @ACTIVE = 0
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET ACTIVE = 0
					   ,COD_USER = @COD_USER
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND (@COD_AFFILIATOR IS NULL
					OR COD_AFFILIATOR = @COD_AFFILIATOR)
					AND COD_EC = @COD_EC
					AND ACTIVE = 1;
				END
			END;
		END

		IF @SERVICE_NAME = 'POSWEBDIRECT'
		BEGIN
			SELECT TOP 1
				@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
			FROM SERVICES_AVAILABLE
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
			AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
			AND SERVICES_AVAILABLE.ACTIVE = 1

			IF @ACTIVE = 1
				AND (@ONLINE_ACTIVE = 0
				OR @ONLINE_ACTIVE IS NULL)
			BEGIN
				IF (SELECT
							COUNT(COD_SOURCE_TRAN)
						FROM ASS_TAX_DEPART
						INNER JOIN DEPARTMENTS_BRANCH
							ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
						INNER JOIN BRANCH_EC
							ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
						INNER JOIN COMMERCIAL_ESTABLISHMENT
							ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
						WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
						AND ASS_TAX_DEPART.ACTIVE = 1
						AND COD_SOURCE_TRAN = 1)
					= 0
					THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

				IF (SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						LEFT JOIN AFFILIATOR
							ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
						LEFT JOIN PLAN_TAX_AFFILIATOR
							ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
						WHERE COD_EC = @COD_EC
						AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
						OR COD_SOURCE_TRAN IS NULL))
					= 0
					THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
			END
			IF @ACTIVE = 0
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;
			END;
		END

		IF @SERVICE_NAME = 'TRANSACTIONONLINE'
		BEGIN
			IF (@CREDENCIAL = 0
				AND @ACTIVE = 1)
			BEGIN
				IF (SELECT
							COUNT(COD_SOURCE_TRAN)
						FROM ASS_TAX_DEPART
						INNER JOIN DEPARTMENTS_BRANCH
							ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
						INNER JOIN BRANCH_EC
							ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
						INNER JOIN COMMERCIAL_ESTABLISHMENT
							ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
						WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
						AND ASS_TAX_DEPART.ACTIVE = 1
						AND COD_SOURCE_TRAN = 1)
					= 0
					THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

				IF (SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						LEFT JOIN AFFILIATOR
							ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
						LEFT JOIN PLAN_TAX_AFFILIATOR
							ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
						WHERE COD_EC = @COD_EC
						AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
						OR COD_SOURCE_TRAN IS NULL))
					= 0
					THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET TRANSACTION_ONLINE = 1
				WHERE COD_EC = @COD_EC;
			END
			ELSE
			BEGIN
				IF (@CREDENCIAL = 1
					AND @ACTIVE = 0)
				BEGIN
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET TRANSACTION_ONLINE = 0
					WHERE COD_EC = @COD_EC;
				END
			END
		END

		IF @SERVICE_NAME = 'LEDGER_RETENTION'
		BEGIN
			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END;

		IF @SERVICE_NAME = 'MULTIEC'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
				COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END;

		IF @SERVICE_NAME = 'PlanDZero'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND NOT EXISTS (SELECT
						COD_ITEM_SERVICE
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				)
				THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;

			DECLARE @AFFCONFIG NVARCHAR(512)
			DECLARE @CODBKCELER INT

			SELECT
				@AFFCONFIG = CONFIG_JSON
			FROM SERVICES_AVAILABLE
			WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
			AND COD_AFFILIATOR = @COD_AFFILIATOR
			AND COD_EC IS NULL
			AND ACTIVE = 1
			SELECT
				@CODBKCELER = COD_BANK
			FROM BANKS
			WHERE NAME = 'CELER DIGITAL'

			IF EXISTS (SELECT
						COD_BANK
					FROM BANK_DETAILS_EC BDE
					JOIN BANK_DETAILS_CERC_INFO BDCI
						ON BDE.COD_BK_EC = BDCI.COD_BK_EC
					WHERE COD_EC = @COD_EC
					AND ACTIVE = 1
					AND IS_CERC = 1
					AND END_DATE > GETDATE()
					AND BDCI.COD_SITUATION = 3)
				THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

			IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
				AND NOT EXISTS (SELECT
						1
					FROM BANK_DETAILS_EC
					WHERE COD_EC = @COD_EC
					AND ACTIVE = 1
					AND COD_BANK = @CODBKCELER)
				THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) >
				CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit',
				CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
			END

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) >
				CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit',
				CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
			END

			IF @ACTIVE = 1
			BEGIN
				IF EXISTS (SELECT
							COD_ITEM_SERVICE
						FROM SERVICES_AVAILABLE
						WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
						AND COD_AFFILIATOR = @COD_AFFILIATOR
						AND COD_EC = @COD_EC
						AND ACTIVE = 1)
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET CONFIG_JSON = @CONFIG_JSON
					   ,COD_USER = @COD_EC
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC = @COD_EC
					AND ACTIVE = 1
				END
				ELSE
				BEGIN
					INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
					COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
						VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
				END
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
		END

		IF @SERVICE_NAME = 'ApiTef'
		BEGIN

			IF @ACTIVE = 0
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE ACTIVE = 1
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC;
			END
			ELSE
			BEGIN

				IF NOT EXISTS (SELECT
							COD_SERVICE
						FROM SERVICES_AVAILABLE
						WHERE (@COD_AFFILIATOR IS NULL
						OR COD_AFFILIATOR = @COD_AFFILIATOR)
						AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
						AND COD_EC = @COD_EC)
				BEGIN

					INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
					COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
						VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)

				END
				ELSE
				BEGIN

					UPDATE SERVICES_AVAILABLE
					SET ACTIVE = 1
					   ,MODIFY_DATE = GETDATE()
					   ,COD_USER = @COD_USER
					WHERE (@COD_AFFILIATOR IS NULL
					OR COD_AFFILIATOR = @COD_AFFILIATOR)
					AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_EC = @COD_EC;

				END
			END
		END
	END;
GO

--ET-1073

GO



--ST-1397

GO

-- --ST-1416

UPDATE DOCS_BRANCH  SET  DOCS_BRANCH.COD_SIT_REQ =  12, DOCS_BRANCH.MODIFY_DATE = GETDATE()
FROM SITUATION_REQUESTS  
INNER JOIN DOCS_BRANCH ON DOCS_BRANCH.COD_SIT_REQ = SITUATION_REQUESTS.COD_SIT_REQ
INNER JOIN BRANCH_EC ON BRANCH_EC.COD_BRANCH = DOCS_BRANCH.COD_BRANCH
INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
WHERE COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2 AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1
AND SITUATION_REQUESTS.COD_SIT_REQ = 16 AND DOCS_BRANCH.PATH_DOC IS NOT NULL AND DOCS_BRANCH.ACTIVE = 1
AND BRANCH_EC.ACTIVE = 1


-- --ST-1416

-- GO

--ST-1417

IF OBJECT_ID('SP_UP_DATA_BR') 
 IS NOT NULL
    DROP PROCEDURE [SP_UP_DATA_BR];
	 GO
CREATE PROCEDURE [dbo].[SP_UP_DATA_BR]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_UP_DATA_BR]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION   Date                            Description        
------------------------------------------------------------------------------------------        
Kennedy Alef     V1  27/07/2018   Creation        
Elir Ribeiro     V2  07/11/2018   Changed        
Elir Ribeiro     V3  08/11/2018   Changed        
Kennedy Alef     V1  10/12/2018   Changed        
Luiz Aquino      V3  13/12/2018   Add Has_SPOT SPOT_TAX        
Lucas Aguiar     V6  14/12/2018   Add  TRANSACTION_DIGITED        
Lucas Aguiar     V7  01/07/2019   Desabilitar a agenda financeira do ec        
Elir Ribeiro     V8  24/07/2019   Data Ofac = null        
Lucas Aguiar     V9  06/08/2019   add servi?o parcelado cliente        
Elir Ribeiro     V9  02/08/2019   add RiskSituation and Reason Risck        
Elir Ribeiro     V10  21-08-2019   changed Active  de acordo com o RiskSituation        
Elir Ribeiro     V11  01-10-2019   changed Limit Transaction Monthly        
Marcus Gall      V12  11-11-2019   Add Branch Business        
Luiz Aquino      v13  11-03-2020   Add permissoes de transacao (ET-465)        
Caike Uchôa      v14  10-07-2020   retirar alteração do COD_USER    
Elir Ribeiro     v15  18-07-2020   add language  
Elir Ribeiro     v16 29-09-2020    alter situation document 
------------------------------------------------------------------------------------------*/  
(@NAME VARCHAR(100),  
 @TRADING_NAME VARCHAR(100),  
 @EMAIL VARCHAR(100),  
 @STATE_REG VARCHAR(30),  
 @MUN_REG VARCHAR(30),  
 @LIMIT_TRANSACTION_DIALY DECIMAL(22, 6),  
 @LIMIT_TRANSACTION DECIMAL(22, 6),  
 @LIMIT_TRANSACTION_MONTHLY DECIMAL(22, 6),  
 @BIRTHDATE DATETIME,  
 @COD_USER INT,  
 @TYPE_BRANCH VARCHAR(100),  
 @TYPE_ESTAB INT,  
 @DOCUMENT VARCHAR(100),  
 @SEX INT,  
 @COD_SALES_REP INT,  
 @ACTIVE INT,  
 @COD_BR INT,  
 @COD_EC INT,  
 @ADDRESS VARCHAR(400),  
 @NUMBER VARCHAR(10),  
 @COMPLEMENT VARCHAR(300),  
 @CEP VARCHAR(12),  
 @COD_NEIGH INT,  
 @REFERENCE_POINT VARCHAR(200),  
 @SEC_FACTOR_AUTH_ACTIVE INT,  
 @COD_SEG INT,  
 @NOTE VARCHAR(400) = null,  
 @CPF_CNPJ varchar(30),  
 @WAS_BLOCKED INT = NULL,  
 @COD_SITUATION INT = NULL,  
 @NOTE_FINANCE VARCHAR(MAX) = NULL,  
 @COD_RISK_SITUATION INT = NULL,  
 @RISK_REASON VARCHAR(500) = NULL,  
 @BRANCH_BUSINESS INT = NULL,  
 @REQUEST_ONLINE_TRANSACTION INT = 0,  
 @REQUEST_PRESENTIAL_TRANSACTION INT = 0,  
 @COD_CURRENCY INT =NULL,  
 @COD_LANGUAGE INT =NULL,  
 @COD_COUNTRY INT =NULL)  
AS  
  
DECLARE @REGISTRO VARCHAR(100)  
  
DECLARE @COD_ACTIVE_SITUATION_EC INT  
  
DECLARE @CURRENT_ACTIVE INT;  
  
DECLARE @CURRENT_CPF_CNPJ varchar(30);  
  
  
BEGIN  
  
  
    IF @COD_RISK_SITUATION IS NULL  
        SET @COD_RISK_SITUATION = 1  
  
    SELECT @COD_ACTIVE_SITUATION_EC = SITUATION_EC  
    FROM RISK_SITUATION  
    WHERE COD_RISK_SITUATION = @COD_RISK_SITUATION  
  
    --     IF @WAS_BLOCKED = 1  
--         SELECT @COD_SITUATION = COD_SITUATION  
--         FROM SITUATION  
--         WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';  
--     ELSE  
--         IF @WAS_BLOCKED = 0  
--             SELECT @COD_SITUATION = COD_SITUATION  
--             FROM SITUATION  
--             WHERE [NAME] = 'RELEASED';  
--         ELSE  
--             SELECT @COD_SITUATION = COD_SITUATION  
--             FROM COMMERCIAL_ESTABLISHMENT  
--             WHERE COD_EC = @COD_EC;  
  
    IF @WAS_BLOCKED = 1  
        SELECT @COD_SITUATION = COD_SITUATION  
        FROM SITUATION  
        WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';  
    ELSE  
        SELECT @COD_SITUATION = COD_SITUATION  
        FROM SITUATION  
        WHERE [NAME] = 'RELEASED';  
  
  
    SELECT @REGISTRO = CPF_CNPJ  
    FROM COMMERCIAL_ESTABLISHMENT  
    WHERE COD_EC = @COD_EC  
  
    SELECT @CURRENT_CPF_CNPJ = CPF_CNPJ  
         , @CURRENT_ACTIVE = ACTIVE  
    FROM COMMERCIAL_ESTABLISHMENT  
    WHERE COD_EC = @COD_EC;  
  
    IF (@CURRENT_CPF_CNPJ <> @CPF_CNPJ)  
        OR (@CURRENT_ACTIVE <> @ACTIVE)  
        UPDATE ASS_CERC_EC  
        SET ACTIVE      = @ACTIVE  
          , MODIFY_DATE = current_timestamp  
          , PROCESSED   = 0  
        WHERE COD_EC = @COD_EC;  
  
    UPDATE BRANCH_EC  
    SET [NAME]                  = @NAME  
      , TRADING_NAME            = @TRADING_NAME  
      , EMAIL                   = @EMAIL  
      , STATE_REGISTRATION      = @STATE_REG  
      , MUNICIPAL_REGISTRATION  = @MUN_REG  
      , TRANSACTION_LIMIT       = @LIMIT_TRANSACTION  
      , LIMIT_TRANSACTION_DIALY = @LIMIT_TRANSACTION_DIALY  
      , BIRTHDATE               = @BIRTHDATE  
      , COD_USER                = @COD_USER  
      , COD_TYPE_ESTAB          = @TYPE_ESTAB  
      , DOCUMENT                = @DOCUMENT  
      , COD_SEX                 = @SEX  
      , COD_SALES_REP           = @COD_SALES_REP  
      , ACTIVE                  = @ACTIVE  
      , [NOTE]                  = @NOTE  
      , CPF_CNPJ                = @CPF_CNPJ  
    WHERE COD_BRANCH = @COD_BR  
  
    IF @@rowcount < 1  
        THROW 60001, 'COULD NOT UPDATE BRANCH_EC', 1  
  
    UPDATE ADDRESS_BRANCH  
    SET ACTIVE      = 0  
      , MODIFY_DATE = GETDATE()  
    WHERE ACTIVE = 1  
      AND COD_BRANCH = @COD_BR  
  
    INSERT INTO ADDRESS_BRANCH (ADDRESS, number, COMPLEMENT, CEP, COD_NEIGH, COD_BRANCH, REFERENCE_POINT)  
    VALUES (@ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, @COD_BR, @REFERENCE_POINT)  
  
    IF @@rowcount < 1  
        THROW 60000, 'COULD NOT REGISTER ADDRESS_BRANCH ', 1  
  
  
    UPDATE REQ_LANGUAGE_COMERCIAL  
    SET ACTIVE          = 0  
            ,  
        MODIFY_DATE     = GETDATE(),  
        COD_USER_MODIFY = @COD_USER  
    WHERE COD_EC = @COD_EC  
  
    INSERT INTO REQ_LANGUAGE_COMERCIAL (CREATED_AT, COD_COUNTRY, COD_CURRRENCY, COD_LANGUAGE, COD_EC, COD_USER, ACTIVE)  
    VALUES (GETDATE(), @COD_COUNTRY, @COD_CURRENCY, @COD_LANGUAGE, @COD_EC, @COD_USER, 1)  
  
    IF @@rowcount < 1  
        THROW 60000, 'COULD NOT REGISTER REQ_LANGUAGE_COMERCIAL ', 1  
  
    IF @TYPE_BRANCH = 'PRINCIPAL'  
        BEGIN  
            EXEC SP_LOG_MERC_REG @COD_EC  
                , @COD_USER  
  
-- UPDATE MERCHANT TABLE        
  
            UPDATE COMMERCIAL_ESTABLISHMENT  
            SET [NAME]                           = @NAME  
              , TRADING_NAME                     = @TRADING_NAME  
              , EMAIL                            = @EMAIL  
              , STATE_REGISTRATION               = @STATE_REG  
              , MUNICIPAL_REGISTRATION           = @MUN_REG  
              , TRANSACTION_LIMIT                = @LIMIT_TRANSACTION  
              , LIMIT_TRANSACTION_DIALY          = @LIMIT_TRANSACTION_DIALY  
              , LIMIT_TRANSACTION_MONTHLY        = @LIMIT_TRANSACTION_MONTHLY  
              , BIRTHDATE                        = @BIRTHDATE  
              , COD_TYPE_ESTAB                   = @TYPE_ESTAB  
              , DOCUMENT                         = @DOCUMENT  
              , COD_SEX                          = @SEX  
              , COD_SALES_REP                    = @COD_SALES_REP  
              , ACTIVE                           = @COD_ACTIVE_SITUATION_EC  
              , SEC_FACTOR_AUTH_ACTIVE           = @SEC_FACTOR_AUTH_ACTIVE  
              , COD_SEG                          = @COD_SEG  
              , COD_USER_MODIFY                  = @COD_USER  
              , MODIFY_DATE                      = GETDATE()  
              , [NOTE]                           = @NOTE  
              , CPF_CNPJ                         = @CPF_CNPJ  
              , COD_SITUATION                    = @COD_SITUATION  
              , NOTE_FINANCE_SCHEDULE            = @NOTE_FINANCE  
              , DATE_OFAC                        = NULL  
              , COD_RISK_SITUATION               = @COD_RISK_SITUATION  
              , RISK_REASON                      = @RISK_REASON  
              , COD_BRANCH_BUSINESS              = @BRANCH_BUSINESS                , REQUESTED_ONLINE_TRANSACTION     = 1  
              , REQUESTED_PRESENTIAL_TRANSACTION = 1  
            WHERE COD_EC = @COD_EC  
        END  
		
		IF (@COD_RISK_SITUATION = 2)
			UPDATE DOCS_BRANCH SET COD_SIT_REQ = 12, MODIFY_DATE = GETDATE() WHERE COD_BRANCH = @COD_BR AND COD_SIT_REQ = 16 AND ACTIVE = 1  
		
END;  

--ST-1417

--ST-1420

GO

IF OBJECT_ID('SP_REPORT_TRANSACTION_BILLET') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_TRANSACTION_BILLET]

GO
CREATE PROCEDURE [dbo].[SP_REPORT_TRANSACTION_BILLET]
/*----------------------------------------------------------------------------------------        
    Procedure Name: [SP_REPORT_TRANSACTION_BILLET]  Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author              VERSION        Date         Description        
------------------------------------------------------------------------------------------        
    Marcus Gall           V1        22/04/2020      Creation        
    Caike Uchoa           V2        21/09/2020      add DESCRIPTION_TRAN_BILLET boleto  
	Caike Uchoa           v3        30/09/2020      add documento e email
------------------------------------------------------------------------------------------*/ (@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@AFF [CODE_TYPE] READONLY,
@EC [CODE_TYPE] READONLY,
@STATUS [CODE_TYPE] READONLY,
@NSU VARCHAR(255) = NULL,
@DOCUMENT VARCHAR(100) = NULL,
@EMAIL VARCHAR(100) = NULL)
AS

	DECLARE @QUERY_ NVARCHAR(MAX) = '';

	BEGIN
		SET @INITIAL_DATE = CONCAT(CAST(@INITIAL_DATE AS DATE), ' ', FORMAT(CAST('00:00:00' AS TIME), N'hh\:mm\:ss'))
		SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'))

		SET @QUERY_ = CONCAT(@QUERY_, '        
SELECT BILLET_TRANSACTION.TRANSACTION_CODE      
     , BILLET_TRANSACTION.COD_BILLET      
     , BILLET_TRANSACTION.CREATED_AT      
     , BILLET_TRANSACTION.BILLET_AMOUNT      
     , BILLET_TRANSACTION.RATE      
     , BILLET_TRANSACTION.NET_AMOUNT      
     , BILLET_TRANSACTION.DUE_DATE      
     , AFFILIATOR.NAME                AS AFFILIATOR_NAME      
     , COMMERCIAL_ESTABLISHMENT.NAME  AS EC_NAME      
     , IIF(FINANCE_CALENDAR.COD_FIN_CALENDAR IS NOT NULL, CALENDAR_SIT.SITUATION_TR,      
           TRADUCTION_SITUATION.SITUATION_TR) AS SITUATION_NAME      
     , BILLET_TRANSACTION.BILLET_URL      
     , BILLET_TRANSACTION.DIGITABLE_LINE      
     , BILLET_TRANSACTION.SPLIT_MODE      
     , BILLET_TRANSACTION.BARCODE    
     , COMMERCIAL_ESTABLISHMENT.CALLBACK_BILLET        
     , BILLET_TRANSACTION.DESCRIPTION_TRAN_BILLET  
  	 , CUSTOMER_BILLET.DOCUMENT
	 , BILLET_TRANSACTION.EMAIL
FROM BILLET_TRANSACTION      
         INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = BILLET_TRANSACTION.COD_EC      
         INNER JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR      
         LEFT JOIN SITUATION ON SITUATION.COD_SITUATION = BILLET_TRANSACTION.COD_SITUATION      
         LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = SITUATION.COD_SITUATION      
         LEFT JOIN FINANCIAL_BILLET ON BILLET_TRANSACTION.COD_BILLET = FINANCIAL_BILLET.COD_BILLET      
         LEFT JOIN FINANCE_CALENDAR ON FINANCIAL_BILLET.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR      
         LEFT JOIN TRADUCTION_SITUATION CALENDAR_SIT ON CALENDAR_SIT.COD_SITUATION = FINANCE_CALENDAR.COD_SITUATION  
		 LEFT JOIN CUSTOMER_BILLET ON CUSTOMER_BILLET.COD_BILLET = BILLET_TRANSACTION.COD_BILLET
 WHERE CAST(BILLET_TRANSACTION.CREATED_AT AS DATETIME) BETWEEN ''' + CAST(@INITIAL_DATE AS VARCHAR) + ''' AND ''' +
		CAST(@FINAL_DATE AS VARCHAR) + ''' ');

		IF (SELECT
					COUNT(*)
				FROM @EC)
			> 0
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC IN (SELECT [CODE] FROM @EC) ';

		IF (SELECT
					COUNT(*)
				FROM @AFF)
			> 0
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IN (SELECT [CODE] FROM @AFF) ';

		IF (SELECT
					COUNT(*)
				FROM @STATUS)
			> 0
			SET @QUERY_ = @QUERY_ + ' AND SITUATION.COD_SITUATION IN (SELECT [CODE] FROM @STATUS) ';

		IF (@NSU IS NOT NULL)
			SET @QUERY_ = @QUERY_ + ' AND BILLET_TRANSACTION.TRANSACTION_CODE = @NSU';

		IF (@DOCUMENT IS NOT NULL)
			SET @QUERY_ = @QUERY_ + ' AND CUSTOMER_BILLET.DOCUMENT = @DOCUMENT';

		IF (@EMAIL IS NOT NULL)
			SET @QUERY_ = @QUERY_ + ' AND BILLET_TRANSACTION.EMAIL = @EMAIL';


		SET @QUERY_ = CONCAT(@QUERY_, ' ORDER BY BILLET_TRANSACTION.CREATED_AT');

		EXEC sp_executesql @QUERY_
						  ,N' @INITIAL_DATE DATETIME, @FINAL_DATE DATETIME, @AFF [CODE_TYPE] READONLY, @EC [CODE_TYPE] READONLY, @STATUS [CODE_TYPE] READONLY, @NSU VARCHAR(255), @DOCUMENT VARCHAR(100), @EMAIL VARCHAR(100)'
						  ,@INITIAL_DATE = @INITIAL_DATE
						  ,@FINAL_DATE = @FINAL_DATE
						  ,@AFF = @AFF
						  ,@EC = @EC
						  ,@STATUS = @STATUS
						  ,@NSU = @NSU
						  ,@DOCUMENT = @DOCUMENT
						  ,@EMAIL = @EMAIL
	END

--ST-1420

GO

--ST-1421

IF OBJECT_ID('SP_REPORT_CANCELATED') 
 IS NOT NULL
    DROP PROCEDURE [SP_REPORT_CANCELATED];
	 GO
CREATE PROCEDURE [dbo].[SP_REPORT_CANCELATED]                     
/*----------------------------------------------------------------------------------------                     
Procedure Name: [SP_REPORT_CANCELATED]                     
Project.......: TKPP                     
------------------------------------------------------------------------------------------                     
Author                          VERSION        Date                            Description                     
------------------------------------------------------------------------------------------                     
Elir Ribeiro                      V1         18/02/2020                         Creation    
Caike Uch�a                       V2         25/05/2020               Add data transa��o e afiliador  
Elir Ribeiro                      V3         01/10/2020               add Uf 
------------------------------------------------------------------------------------------*/                     
(                     
 @INITIAL_DATE datetime = NULL,                   
 @FINAL_DATE datetime = NULL,                   
 @ACQUIRER VARCHAR(100),                   
 @BRAND VARCHAR(200),                   
 @TRANSACTION_TYPE VARCHAR(100),                 
 @VALUEINITIAL DECIMAL(22,6) = NULL,                   
 @VALUEFINAL DECIMAL(22,6) =  NULL,  
 @INITIAL_DATE_TRAN datetime = NULL,                   
 @FINAL_DATE_TRAN datetime = NULL                
)                     
AS                     
DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';  
                     
BEGIN  
  
SET @QUERY_BASIS = '                     
SELECT REPORTS.TRANSACTION_DATE,  
REPORTS.TRANSACTION_TYPE,  
AC.NAME,  
REPORTS.MODIFY_DATE,  
REPORTS.TRANSACTION_CODE,  
REPORTS.TRAN_DATA_EXT_VALUE,  
REPORTS.AMOUNT,REPORTS.TAX,  
REPORTS.COMMENT,  
REPORTS.NAME_USER,  
REPORTS.NAME_AFFILIATOR,
[STATE].UF 
FROM REPORT_TRANSACTIONS_EXP REPORTS INNER JOIN ACQUIRER AC                   
ON REPORTS.COD_AC  = AC.COD_AC     
INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC =  REPORTS.COD_EC
INNER JOIN ADDRESS_BRANCH ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH 
INNER JOIN NEIGHBORHOOD ON NEIGHBORHOOD.COD_NEIGH =  ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN [STATE] ON [STATE].COD_STATE = CITY.COD_STATE  
WHERE                   
REPORTS.SITUATION = ''CANCELADA'' AND  ADDRESS_BRANCH.ACTIVE = 1';  
    
   
IF (@INITIAL_DATE IS NOT NULL AND @FINAL_DATE IS NOT NULL)  
BEGIN  
SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'))  
  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'and                    
 CAST([dbo].[FN_FUS_UTF]([REPORTS].MODIFY_DATE) AS DATETIME)                                     
 BETWEEN  ''' + CAST(@INITIAL_DATE AS VARCHAR) + ''' AND ''' + CAST(@FINAL_DATE AS VARCHAR) + '''');  
END  
      
IF (@INITIAL_DATE_TRAN IS NOT NULL AND @FINAL_DATE_TRAN IS NOT NULL)  
BEGIN  
SET @FINAL_DATE_TRAN = CONCAT(CAST(@FINAL_DATE_TRAN AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'))  
  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'and                    
 CAST([dbo].[FN_FUS_UTF]([REPORTS].TRANSACTION_DATE) AS DATETIME)                                     
 BETWEEN  ''' + CAST(@INITIAL_DATE_TRAN AS VARCHAR) + ''' AND ''' + CAST(@FINAL_DATE_TRAN AS VARCHAR) + '''');  
END  
     
  
IF @ACQUIRER IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND AC.NAME = @ACQUIRER ');  
  
IF @BRAND IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND REPORTS.BRAND = @BRAND ');  
  
IF @TRANSACTION_TYPE IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND REPORTS.TRANSACTION_TYPE = @TRANSACTION_TYPE ');  
  
IF @VALUEINITIAL > 0  
 AND (@VALUEFINAL >= @VALUEINITIAL)  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND REPORTS.AMOUNT BETWEEN @VALUEINITIAL AND @VALUEFINAL ');  
  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'ORDER BY [REPORTS].TRANSACTION_DATE DESC ')  
EXEC sp_executesql @QUERY_BASIS  
      ,N'                     
 @INITIAL_DATE VARCHAR(100),                   
 @FINAL_DATE VARCHAR(100),                 
 @ACQUIRER VARCHAR(100),                   
 @BRAND VARCHAR(200),                   
 @VALUEINITIAL DECIMAL(22,6),                   
 @VALUEFINAL DECIMAL(22,6),                   
 @TRANSACTION_TYPE VARCHAR(100),  
 @INITIAL_DATE_TRAN VARCHAR(100),                   
 @FINAL_DATE_TRAN VARCHAR(100)  
                    
 '  
      ,@INITIAL_DATE = @INITIAL_DATE  
      ,@FINAL_DATE = @FINAL_DATE  
      ,@ACQUIRER = @ACQUIRER  
      ,@BRAND = @BRAND  
      ,@VALUEINITIAL = @VALUEINITIAL  
      ,@VALUEFINAL = @VALUEFINAL  
      ,@TRANSACTION_TYPE = @TRANSACTION_TYPE  
      ,@INITIAL_DATE_TRAN = @INITIAL_DATE_TRAN  
      ,@FINAL_DATE_TRAN = @FINAL_DATE_TRAN  
END;  
  
--ST-1421

GO

--ST-1435

GO

GO

IF OBJECT_ID('SP_CONTACT_DATA_EQUIP') IS NOT NULL
	DROP PROCEDURE [SP_CONTACT_DATA_EQUIP];

GO
CREATE PROCEDURE [dbo].[SP_CONTACT_DATA_EQUIP]
/*----------------------------------------------------------------------------------------            
Procedure Name: [SP_CONTACT_DATA_EQUIP]            
Project.......: TKPP            
------------------------------------------------------------------------------------------            
Author                          VERSION         Date                            Description            
------------------------------------------------------------------------------------------            
Kennedy Alef                      V1         27/07/2018                           Creation            
Fernando Henrique F. O            V2         03/04/2019                           Change              
Lucas Aguiar                      v3         22-04-2019                   Descer se � split ou n�o            
Caike Uch�a                       v4         15/01/2020                     descer MMC padr�o para PF    
Caike Uchoa                       v5         22/09/2020                    Add formatacao de strings  
Caike Uch�a                       v6         05/10/2020                    Limitar endereco 20 carac. 
------------------------------------------------------------------------------------------*/ (@TERMINALID INT)
AS
BEGIN
	SELECT
	TOP 1
		VW_COMPANY_EC_BR_DEP_EQUIP.CPF_CNPJ_BR
	   ,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF
	   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.TRADING_NAME_BR) AS TRADING_NAME_BR
	   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.BRANCH_NAME) AS BRANCH_NAME
	   ,CASE
			WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'
			ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC
		END AS MCC
	   ,COMMERCIAL_ESTABLISHMENT.CODE AS MERCHANT_CODE
	   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.[ADDRESS]), 20) AS [ADDRESS]
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(ADDRESS_BRANCH.[NUMBER])) AS [NUMBER]
	   ,ADDRESS_BRANCH.CEP
	   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.COMPLEMENT), 0) AS COMPLEMENT
	   ,[dbo].[FNC_REMOV_CARAC_ESP](NEIGHBORHOOD.NAME) AS NEIGHBORDHOOD
	   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY.[NAME]) AS CITY
	   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE].UF) AS [STATE]
	   ,COUNTRY.INITIALS
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDI)) AS DDI
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDD)) AS DDD
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].[FNC_REMOV_CARAC_ESP](CONTACT_BRANCH.[NUMBER])) AS TEL_NUMBER
	   ,TYPE_CONTACT.NAME AS TYPE_CONTACT
	   ,EQUIPMENT.COD_EQUIP
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC IS NULL
					AND COD_OPT_SERV = 4)
				> 0 THEN 1
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC IS NULL
					AND COD_OPT_SERV = 2)
				> 0 THEN 0
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
				> 0 THEN 1
			ELSE 0
		END AS [SPLIT]
	   ,(
		CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 13
					AND ACTIVE = 1
					AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
				> 0 THEN 1
			ELSE 0
		END
		) AS MANY_MERCHANTS

	FROM VW_COMPANY_EC_BR_DEP_EQUIP
	JOIN ADDRESS_BRANCH
		ON ADDRESS_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
	JOIN NEIGHBORHOOD
		ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
	JOIN CITY
		ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
	JOIN STATE
		ON STATE.COD_STATE = CITY.COD_STATE
	JOIN COUNTRY
		ON COUNTRY.COD_COUNTRY = STATE.COD_COUNTRY
	JOIN CONTACT_BRANCH
		ON CONTACT_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
	JOIN TYPE_CONTACT
		ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT
	JOIN ASS_DEPTO_EQUIP
		ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_DEPTO_BR
	JOIN EQUIPMENT
		ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	INNER JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
	--LEFT JOIN SERVICES_AVAILABLE            
	-- ON SERVICES_AVAILABLE.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC            
	WHERE EQUIPMENT.COD_EQUIP = @TERMINALID
	AND ASS_DEPTO_EQUIP.ACTIVE = 1
	ORDER BY ADDRESS_BRANCH.COD_ADDRESS DESC

END


GO

--ST-1435


GO

--GLOBAL PAYMENTS


INSERT INTO ACQUIRER (CREATED_AT, CODE, NAME, COD_USER, ALIAS, SUBTITLE, INTEGRATION, ACTIVE, [GROUP], LOGICAL_NUMBER, COD_SEG_GROUP, ONLINE)
	VALUES (current_timestamp, 'GLOBAL PAYMENTS', 'GLOBALPAYMENTS', NULL, NULL, 'GLOBALPAYMENTS', 0, CONVERT(BIT, 'True'), 'GLOBALPAYMENTS', 0, NULL, NULL)
GO

INSERT INTO PRODUCTS_ACQUIRER (COD_TTYPE, COD_AC, NAME, EXTERNALCODE, COD_BRAND, PLOT_VALUE, IS_SIMULATED, COD_SOURCE_TRAN, VISIBLE)
	SELECT
		COD_TTYPE
	   ,(SELECT TOP 1
				COD_AC
			FROM ACQUIRER
			ORDER BY 1 DESC)
	   ,NAME
	   ,EXTERNALCODE
	   ,COD_BRAND
	   ,PLOT_VALUE
	   ,IS_SIMULATED
	   ,COD_SOURCE_TRAN
	   ,VISIBLE
	FROM PRODUCTS_ACQUIRER pa
	WHERE COD_AC = 10


GO

INSERT INTO ASS_TR_TYPE_COMP (CREATED_AT, COD_USER, COD_TTYPE, COD_AC, COD_COMP, ACTIVE, MODIFY_DATE, CODE, TAX_VALUE, PLOT_INI, PLOT_END, INTERVAL, COD_BRAND, AVAILABLE, COD_SOURCE_TRAN)
	SELECT
		CREATED_AT
	   ,COD_USER
	   ,COD_TTYPE
	   ,(SELECT TOP 1
				COD_AC
			FROM ACQUIRER
			ORDER BY 1 DESC)
	   ,COD_COMP
	   ,ACTIVE
	   ,MODIFY_DATE
	   ,CODE
	   ,TAX_VALUE
	   ,PLOT_INI
	   ,PLOT_END
	   ,INTERVAL
	   ,COD_BRAND
	   ,AVAILABLE
	   ,COD_SOURCE_TRAN
	FROM ASS_TR_TYPE_COMP attc
	WHERE attc.COD_AC = 10

GO

ALTER PROCEDURE [dbo].[SP_DATA_COMP_ACQ]
/*----------------------------------------------------------------------------------------               
Procedure Name: [SP_DATA_COMP_ACQ]               
Project.......: TKPP               
------------------------------------------------------------------------------------------               
Author           VERSION           Date               Description               
------------------------------------------------------------------------------------------               
Kennedy Alef        V1           27/07/2018             Creation               
Caike Uchôa         V2           15/01/2020         Tirar join segments            
------------------------------------------------------------------------------------------*/ (@TERMINALID INT,
@ACQUIRER_NAME VARCHAR(100),
@SERVICE INT = NULL,
@COD_PRD_TRAN INT = NULL,
@COD_PRD_ACQ_OLD INT = NULL,
@NSU VARCHAR(400) = NULL)
AS

	DECLARE @ACQ INT;
	DECLARE @TID_NUMBER VARCHAR(400);
	BEGIN


		IF UPPER(@ACQUIRER_NAME) = 'PAGSEGURO'
		BEGIN

			IF (@NSU IS NOT NULL)
				SELECT
					@TID_NUMBER = t.LOGICAL_NUMBER_ACQ
				FROM [TRANSACTION] t WITH (NOLOCK)
				WHERE CODE = @NSU

			IF @COD_PRD_TRAN IS NOT NULL
			BEGIN


				WITH CTE
				AS
				(SELECT
						--MERCHANT_LOGICALNUMBERS_ACQ.[NAME]       
						MERCHANT_LOGICALNUMBERS_ACQ.COD_EC AS [VALUE]
					   ,ISNULL(@TID_NUMBER, MERCHANT_LOGICALNUMBERS_ACQ.LOGICAL_NUMBER_ACQ) TID_VALUE
					   ,'' ALIAS
					   ,'PagSeguro' SUBTITLE
					   ,(SELECT
								(SELECT
										PRD_NEW.COD_PR_ACQ
									FROM PRODUCTS_ACQUIRER PRD_NEW
									WHERE COD_AC = ACQUIRER.COD_AC
									AND PRODUCTS_ACQUIRER.[COD_TTYPE] = PRD_NEW.[COD_TTYPE]
									AND PRODUCTS_ACQUIRER.[NAME] = PRD_NEW.[NAME]
									AND PRODUCTS_ACQUIRER.[EXTERNALCODE] = PRD_NEW.[EXTERNALCODE]
									AND PRODUCTS_ACQUIRER.[COD_BRAND] = PRD_NEW.COD_BRAND
									AND PRODUCTS_ACQUIRER.[PLOT_VALUE] = PRD_NEW.PLOT_VALUE
									AND ISNULL(PRODUCTS_ACQUIRER.[IS_SIMULATED], 0) = ISNULL(PRD_NEW.IS_SIMULATED, 0)
									AND PRODUCTS_ACQUIRER.[COD_SOURCE_TRAN] = PRD_NEW.COD_SOURCE_TRAN
									AND PRODUCTS_ACQUIRER.[VISIBLE] = PRD_NEW.VISIBLE)
							FROM PRODUCTS_ACQUIRER
							WHERE PRODUCTS_ACQUIRER.COD_PR_ACQ = @COD_PRD_ACQ_OLD)
						AS COD_PRD_ACQ
					   ,MERCHANT_LOGICALNUMBERS_ACQ.COD_EC AS MERCHANT
					FROM MERCHANT_LOGICALNUMBERS_ACQ
					JOIN TRANSACTION_PRODUCTS
						ON TRANSACTION_PRODUCTS.COD_EC = MERCHANT_LOGICALNUMBERS_ACQ.COD_EC
					JOIN ACQUIRER
						ON ACQUIRER.COD_AC = MERCHANT_LOGICALNUMBERS_ACQ.COD_AC
					WHERE TRANSACTION_PRODUCTS.COD_TRAN_PROD = @COD_PRD_TRAN)
				SELECT
					'PAGSEGUROCODE' AS NAME_DATA
				   ,CTE.*
				FROM CTE
				UNION
				SELECT
					'SOFTDESCRIPTOR' AS NAME_DATA
				   ,CTE.*
				FROM CTE


			END
			ELSE
			BEGIN

				SELECT
					DADOS_COMP_ACQ.NAME AS NAME_DATA
				   ,CASE
						WHEN @SERVICE IS NULL THEN CONVERT(VARCHAR(100), [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EC)
						ELSE 2
					END AS VALUE
				   ,ISNULL(@TID_NUMBER, (SELECT TOP 1
							DATA_EQUIPMENT_AC.CODE
						FROM DATA_EQUIPMENT_AC
						JOIN ACQUIRER
							ON ACQUIRER.COD_AC = DATA_EQUIPMENT_AC.COD_AC
						WHERE DATA_EQUIPMENT_AC.ACTIVE = 1
						AND UPPER(ACQUIRER.[GROUP]) = 'pagseguro'
						AND DATA_EQUIPMENT_AC.COD_EQUIP = [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP
					--AND ACQUIRER.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP            
					)
					)
					AS TID_VALUE
				   ,ACQUIRER.ALIAS
				   ,ACQUIRER.SUBTITLE
				   ,CASE
						WHEN @SERVICE IS NOT NULL THEN 2
						ELSE [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EC
					END AS MERCHANT
				FROM DADOS_COMP_ACQ
				INNER JOIN ASS_TR_TYPE_COMP
					ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = DADOS_COMP_ACQ.COD_ASS_TR_COMP
				INNER JOIN [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ]
					ON [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_COMP = ASS_TR_TYPE_COMP.COD_COMP
				INNER JOIN ACQUIRER
					ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
				WHERE [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP = @TERMINALID
				AND ASS_TR_TYPE_COMP.ACTIVE = 1
				AND ACQUIRER.COD_AC = 10
				GROUP BY DADOS_COMP_ACQ.NAME
						,DADOS_COMP_ACQ.VALUE
						,[VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EC
						,ACQUIRER.ALIAS
						,ACQUIRER.SUBTITLE
						,[VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP
			END;
		END;

		IF UPPER(@ACQUIRER_NAME) = 'ADIQ'
		BEGIN

			SELECT
				DADOS_COMP_ACQ.NAME AS NAME_DATA
			   ,DADOS_COMP_ACQ.VALUE
			   ,DATA_EQUIPMENT_AC.CODE AS TID_VALUE
			   ,ACQUIRER.ALIAS
			   ,ACQUIRER.SUBTITLE
			   ,CASE
					WHEN @SERVICE IS NOT NULL THEN 2
					ELSE VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				END AS MERCHANT
			FROM DADOS_COMP_ACQ
			INNER JOIN ASS_TR_TYPE_COMP
				ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = DADOS_COMP_ACQ.COD_ASS_TR_COMP
			INNER JOIN VW_COMPANY_EC_BR_DEP_EQUIP
				ON VW_COMPANY_EC_BR_DEP_EQUIP.COD_COMP = ASS_TR_TYPE_COMP.COD_COMP
			INNER JOIN ACQUIRER
				ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
			LEFT JOIN DATA_EQUIPMENT_AC
				ON DATA_EQUIPMENT_AC.COD_AC = ACQUIRER.COD_AC
			WHERE VW_COMPANY_EC_BR_DEP_EQUIP.COD_EQUIP = @TERMINALID
			AND ASS_TR_TYPE_COMP.ACTIVE = 1
			AND ACQUIRER.NAME = @ACQUIRER_NAME
			GROUP BY DADOS_COMP_ACQ.NAME
					,DADOS_COMP_ACQ.VALUE
					,VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					,DATA_EQUIPMENT_AC.CODE
					,ACQUIRER.ALIAS
					,ACQUIRER.SUBTITLE
			UNION
			SELECT
				'BONSUCESSOCODE' AS NAME_DATA
			   ,EXTERNAL_DATA_EC_ACQ.[VALUE] AS VALUE
			   ,'1' AS TID_VALUE
			   ,ACQUIRER.ALIAS
			   ,ACQUIRER.SUBTITLE
			   ,CASE
					WHEN @SERVICE IS NOT NULL THEN 2
					ELSE VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				END AS MERCHANT
			FROM EXTERNAL_DATA_EC_ACQ
			INNER JOIN ACQUIRER
				ON ACQUIRER.COD_AC = EXTERNAL_DATA_EC_ACQ.COD_AC
			INNER JOIN VW_COMPANY_EC_BR_DEP_EQUIP
				ON VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC = EXTERNAL_DATA_EC_ACQ.COD_EC
			WHERE EXTERNAL_DATA_EC_ACQ.ACTIVE = 1
			AND VW_COMPANY_EC_BR_DEP_EQUIP.COD_EQUIP = @TERMINALID
			AND ACQUIRER.NAME = @ACQUIRER_NAME
			AND EXTERNAL_DATA_EC_ACQ.[NAME] = 'MID'
		--AND EXTERNAL_DATA_EC_ACQ.[NAME]= 'TID';               


		END;

		IF UPPER(@ACQUIRER_NAME) = 'STONE'

		BEGIN

			SELECT
				DADOS_COMP_ACQ.NAME AS NAME_DATA
			   ,DADOS_COMP_ACQ.[VALUE] AS VALUE
			   ,(SELECT
						DATA_EQUIPMENT_AC.CODE
					FROM DATA_EQUIPMENT_AC
					INNER JOIN ACQUIRER
						ON ACQUIRER.COD_AC = DATA_EQUIPMENT_AC.COD_AC
					WHERE DATA_EQUIPMENT_AC.COD_EQUIP =
					[VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP
					AND DATA_EQUIPMENT_AC.ACTIVE = 1
					AND UPPER(ACQUIRER.NAME) = UPPER(@ACQUIRER_NAME))
				AS TID_VALUE
			   ,ACQUIRER.ALIAS
			   ,ACQUIRER.SUBTITLE
			   ,CASE
					WHEN @SERVICE IS NOT NULL THEN 2
					ELSE [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EC
				END AS MERCHANT
			FROM DADOS_COMP_ACQ
			INNER JOIN ASS_TR_TYPE_COMP
				ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP =
					DADOS_COMP_ACQ.COD_ASS_TR_COMP
			INNER JOIN [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ]
				ON [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_COMP =
					ASS_TR_TYPE_COMP.COD_COMP
			INNER JOIN ACQUIRER
				ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
			WHERE [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP = @TERMINALID
			AND ASS_TR_TYPE_COMP.ACTIVE = 1
			AND ACQUIRER.NAME = @ACQUIRER_NAME
			GROUP BY DADOS_COMP_ACQ.NAME
					,DADOS_COMP_ACQ.VALUE
					,[VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EC
					,ACQUIRER.ALIAS
					,ACQUIRER.SUBTITLE
					,[VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP


		END;

		IF UPPER(@ACQUIRER_NAME) LIKE '%SOFTCRED%'

		BEGIN


			SELECT
				DADOS_COMP_ACQ.NAME AS NAME_DATA
			   ,DADOS_COMP_ACQ.VALUE
			   ,DATA_EQUIPMENT_AC.CODE AS TID_VALUE
			   ,ACQUIRER.ALIAS
			   ,ACQUIRER.SUBTITLE
			   ,CASE
					WHEN @SERVICE IS NOT NULL THEN 2
					ELSE VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				END AS MERCHANT
			FROM DADOS_COMP_ACQ
			INNER JOIN ASS_TR_TYPE_COMP
				ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = DADOS_COMP_ACQ.COD_ASS_TR_COMP
			INNER JOIN VW_COMPANY_EC_BR_DEP_EQUIP
				ON VW_COMPANY_EC_BR_DEP_EQUIP.COD_COMP = ASS_TR_TYPE_COMP.COD_COMP
			INNER JOIN ACQUIRER
				ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
			LEFT JOIN DATA_EQUIPMENT_AC
				ON DATA_EQUIPMENT_AC.COD_AC = ACQUIRER.COD_AC
			WHERE VW_COMPANY_EC_BR_DEP_EQUIP.COD_EQUIP = @TERMINALID
			AND ASS_TR_TYPE_COMP.ACTIVE = 1
			AND ACQUIRER.NAME = @ACQUIRER_NAME
			GROUP BY DADOS_COMP_ACQ.NAME
					,DADOS_COMP_ACQ.VALUE
					,VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					,DATA_EQUIPMENT_AC.CODE
					,ACQUIRER.ALIAS
					,ACQUIRER.SUBTITLE
			UNION
			SELECT
				EXTERNAL_DATA_EC_ACQ.NAME AS NAME_DATA
			   ,EXTERNAL_DATA_EC_ACQ.[VALUE] AS VALUE
			   ,'1' AS TID_VALUE
			   ,ACQUIRER.ALIAS
			   ,ACQUIRER.SUBTITLE
			   ,CASE
					WHEN @SERVICE IS NOT NULL THEN 2
					ELSE VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				END AS MERCHANT
			FROM EXTERNAL_DATA_EC_ACQ
			INNER JOIN ACQUIRER
				ON ACQUIRER.COD_AC = EXTERNAL_DATA_EC_ACQ.COD_AC
			INNER JOIN VW_COMPANY_EC_BR_DEP_EQUIP
				ON VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC = EXTERNAL_DATA_EC_ACQ.COD_EC
			WHERE EXTERNAL_DATA_EC_ACQ.ACTIVE = 1
			AND VW_COMPANY_EC_BR_DEP_EQUIP.COD_EQUIP = @TERMINALID
			AND ACQUIRER.NAME = @ACQUIRER_NAME;


		END;

		IF UPPER(@ACQUIRER_NAME) = 'ITSPAY'
		BEGIN

			SELECT
				'260200000000000' AS LOGICAL_NUMBER
		END;

		IF @ACQUIRER_NAME = 'Cielo Presencial'
			OR @ACQUIRER_NAME = 'Cielo'

			SELECT
				'Cielo' AS ALIAS
			   ,'Cielo' AS SUBTITLE
			   ,'' AS NAME_DATA
			   ,'' AS [VALUE]

		IF @ACQUIRER_NAME = 'GLOBAL PAYMENTS'
			OR @ACQUIRER_NAME = 'GLOBALPAYMENTS'

			SELECT
				'GLOBALPAYMENTS' AS ALIAS
			   ,'GLOBALPAYMENTS' AS SUBTITLE
			   ,'MID' AS NAME
			   ,'012043412506001' AS [value]


	END;


GO

ALTER PROCEDURE [dbo].[SP_DATA_EQUIP_AC]
/*----------------------------------------------------------------------------------------                   
Procedure Name: [SP_DATA_EQUIP_AC]                   
Project.......: TKPP                   
------------------------------------------------------------------------------------------                   
Author                          VERSION        Date                            Description                   
------------------------------------------------------------------------------------------                   
Kennedy Alef                      V1         27/07/2018                         Creation                   
Lucas Aguiar                      v2         01/04/2019              Alterao nome do acquire pelo group              
Kennedy Alef                      v3         14/08/2019                      Rollback - Stone                 
Kenendy Alef                      v4         26/09/2019                         Erro 015 PS            
Caike Uchôa                       v5         15/01/2020                  tirar join segments_group        
------------------------------------------------------------------------------------------*/ (@TERMINALID INT,
@ACQUIRER_NAME VARCHAR(100),
@COD_PRD_TRAN INT = NULL,
@COD_PRD_ACQ_OLD INT = NULL,
@NSU VARCHAR(400) = NULL)
AS
	DECLARE @ACQ VARCHAR(100);


	BEGIN


		IF UPPER(@ACQUIRER_NAME) = 'PAGSEGURO'
		BEGIN

			IF (@NSU IS NOT NULL)
			BEGIN
				SELECT
					'TID' AS 'NAME'
				   ,(SELECT
							t.LOGICAL_NUMBER_ACQ
						FROM [TRANSACTION] t
						WHERE CODE = @NSU)
					AS 'CODE'
				   ,a.NAME AS 'ACQ_NAME'
				   ,@TERMINALID AS 'COD_EQUIP'
				FROM ACQUIRER a
				WHERE a.COD_AC = 10

			END
			ELSE
			BEGIN
				IF @COD_PRD_TRAN IS NOT NULL
				BEGIN

					SELECT
						MERCHANT_LOGICALNUMBERS_ACQ.[NAME]
					   ,MERCHANT_LOGICALNUMBERS_ACQ.LOGICAL_NUMBER_ACQ CODE
					   ,ACQUIRER.COD_AC
					   ,ACQUIRER.[NAME] ACQ_NAME
					   ,(SELECT
								(SELECT
										PRD_NEW.COD_PR_ACQ
									FROM PRODUCTS_ACQUIRER PRD_NEW
									WHERE COD_AC = ACQUIRER.COD_AC
									AND PRODUCTS_ACQUIRER.[COD_TTYPE] = PRD_NEW.[COD_TTYPE]
									AND PRODUCTS_ACQUIRER.[NAME] = PRD_NEW.[NAME]
									AND PRODUCTS_ACQUIRER.[EXTERNALCODE] = PRD_NEW.[EXTERNALCODE]
									AND PRODUCTS_ACQUIRER.[COD_BRAND] = PRD_NEW.COD_BRAND
									AND PRODUCTS_ACQUIRER.[PLOT_VALUE] = PRD_NEW.PLOT_VALUE
									AND ISNULL(PRODUCTS_ACQUIRER.[IS_SIMULATED], 0) = ISNULL(PRD_NEW.IS_SIMULATED, 0)
									AND PRODUCTS_ACQUIRER.[COD_SOURCE_TRAN] = PRD_NEW.COD_SOURCE_TRAN
									AND PRODUCTS_ACQUIRER.[VISIBLE] = PRD_NEW.VISIBLE)
							FROM PRODUCTS_ACQUIRER
							WHERE PRODUCTS_ACQUIRER.COD_PR_ACQ = @COD_PRD_ACQ_OLD)
						AS COD_PRD_ACQ
					FROM MERCHANT_LOGICALNUMBERS_ACQ
					JOIN TRANSACTION_PRODUCTS
						ON TRANSACTION_PRODUCTS.COD_EC = MERCHANT_LOGICALNUMBERS_ACQ.COD_EC
					JOIN ACQUIRER
						ON ACQUIRER.COD_AC = MERCHANT_LOGICALNUMBERS_ACQ.COD_AC
					WHERE TRANSACTION_PRODUCTS.COD_TRAN_PROD = @COD_PRD_TRAN


				END;
				ELSE
				BEGIN
					SELECT
						DATA_EQUIPMENT_AC.NAME
					   ,DATA_EQUIPMENT_AC.CODE
					   ,ACQUIRER.[GROUP] AS ACQ_NAME
					   ,DATA_EQUIPMENT_AC.COD_EQUIP
					FROM [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ]
					JOIN DATA_EQUIPMENT_AC
						ON DATA_EQUIPMENT_AC.COD_EQUIP = [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EQUIP
					JOIN ACQUIRER
						ON ACQUIRER.COD_AC = DATA_EQUIPMENT_AC.COD_AC
					--JOIN COMMERCIAL_ESTABLISHMENT              
					-- ON COMMERCIAL_ESTABLISHMENT.COD_EC = [VW_COMPANY_EC_BR_DEP_EQUIP_ACQ].COD_EC              
					--JOIN SEGMENTS              
					-- ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG              
					--LEFT JOIN SEGMENTS_GROUP              
					-- ON SEGMENTS_GROUP.COD_SEG_GROUP = SEGMENTS.COD_SEG_GROUP              
					WHERE DATA_EQUIPMENT_AC.ACTIVE = 1
					AND UPPER(ACQUIRER.[GROUP]) = 'PAGSEGURO'
					AND DATA_EQUIPMENT_AC.COD_EQUIP = @TERMINALID
				--AND ACQUIRER.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP            
				END
			END
		END
		ELSE
		IF @ACQUIRER_NAME = 'Cielo'
			OR @ACQUIRER_NAME = 'Cielo Presencial'
		BEGIN


			CREATE TABLE #TMP_RETURN_CIELO (
				[NAME] VARCHAR(100)
			   ,CODE VARCHAR(100)
			)

			INSERT INTO #TMP_RETURN_CIELO
				VALUES ('CIELO_CLIENTID', 'dbd6cb1a-4075-4745-a8cb-164311b90bbf')
			INSERT INTO #TMP_RETURN_CIELO
				VALUES ('CIELO_CLIENTSECRET', 'IKwWlQ2SpmYBUvlIFe/gTomjyA7AYSgPHlCSZDC+F3c=')
			INSERT INTO #TMP_RETURN_CIELO
				VALUES ('SUBORDINATEDMERCHANTID', 'dbd6cb1a-4075-4745-a8cb-164311b90bbf')
			INSERT INTO #TMP_RETURN_CIELO
				VALUES ('TERMINALID', '00000001')


			SELECT
				@ACQUIRER_NAME AS ACQ_NAME
			   ,@TERMINALID AS COD_EQUIP
			   ,#TMP_RETURN_CIELO.*
			FROM #TMP_RETURN_CIELO


		END
		IF @ACQUIRER_NAME = 'GLOBAL PAYMENTS'
			OR @ACQUIRER_NAME = 'GLOBALPAYMENTS'
		BEGIN

			SELECT
				'MID' AS 'NAME'
			   ,'012043412506001' AS 'CODE'
			   ,'GLOBAL PAYMENTS' AS 'ACQ_NAME'
			   ,@TERMINALID AS 'COD_EQUIP'


		END
		ELSE
		BEGIN
			SELECT
				@ACQ = ACQUIRER.[NAME]
			FROM DATA_EQUIPMENT_AC
			JOIN ACQUIRER
				ON ACQUIRER.COD_AC = DATA_EQUIPMENT_AC.COD_AC
			WHERE COD_EQUIP = @TERMINALID
			AND [GROUP] = UPPER(@ACQUIRER_NAME);

			SELECT
				DATA_EQUIPMENT_AC.NAME
			   ,DATA_EQUIPMENT_AC.CODE
			   ,ACQUIRER.NAME AS ACQ_NAME
			   ,DATA_EQUIPMENT_AC.COD_EQUIP
			   ,@NSU
			FROM DATA_EQUIPMENT_AC
			INNER JOIN ACQUIRER
				ON ACQUIRER.COD_AC = DATA_EQUIPMENT_AC.COD_AC
			WHERE DATA_EQUIPMENT_AC.COD_EQUIP = @TERMINALID
			AND ACQUIRER.[GROUP] = @ACQ
			AND DATA_EQUIPMENT_AC.ACTIVE = 1
		END
	END


GO

--GLOBAL PAYMENTS


--et-87


--ET-87