--ST-1330

GO

IF OBJECT_ID('SP_GEN_TITLES_TRANS') IS NOT NULL
DROP PROCEDURE SP_GEN_TITLES_TRANS

GO

CREATE PROCEDURE [dbo].[SP_GEN_TITLES_TRANS]  
/*----------------------------------------------------------------------------------------                      
    PROJECT.......: TKPP                      
------------------------------------------------------------------------------------------                       
    AUTHOR                      VERSION     DATE            DESCRIPTION                      
------------------------------------------------------------------------------------------                      
    KENNEDY ALEF                V1          27/07/2018      CREATION                      
    KENNEDY ALEF                V2          27/08/2018      MODIFY                      
    FERNANDO HENRIQUE OLIVEIRA  V3          06/03/2019      MODIFY                      
    LUCAS AGUIAR                V4          2019-09-11      MODIFY                      
    LUCAS AGUIAR                V5          2019-09-30      WAITINGSPLIT                      
    LUIZ AQUINO                 V6          2019-11-01      Reteno de agenda                      
    Luiz Aquino                 V7          2020-06-26      ADD DZERO TAX (ET-895 PLANDZERO)     
	Caike Uchoa                 V8          2020-10-13      Reprocessar relatÃ³rios
------------------------------------------------------------------------------------------*/ 
(
@COD_TRAN VARCHAR(200),  
@TRAN_ID INT = NULL)  
AS  
 DECLARE @CONT INT;  
 DECLARE @VALUE DECIMAL(22, 6);  
 DECLARE @CODE BIGINT;  
 DECLARE @PAYDAY DATETIME;  
 DECLARE @PREVISION_PAY_DATE DATETIME  
 DECLARE @PLOTS INT;  
 DECLARE @AMOUNT DECIMAL(22, 6);  
 DECLARE @CODASS_EQUIP INT;  
 DECLARE @TAXINI DECIMAL(22, 6);  
 DECLARE @TAXEFFETIVE DECIMAL(22, 6);  
 DECLARE @RATE DECIMAL(22, 6);  
 DECLARE @INTERVAL INT;  
 DECLARE @TR_ID INT;  
 DECLARE @TAX_ACQ DECIMAL(22, 6)  
 DECLARE @TYPEPLAN INT  
 DECLARE @INTERVALRECEIVE INT;  
 DECLARE @RECEIVEDATE DATETIME;  
 DECLARE @ANTICIPATION DECIMAL(22, 6);  
 DECLARE @COD_AFFILIATOR INT;  
 DECLARE @QTY_PLOTS INT;  
 DECLARE @ANT_PERCENT DECIMAL(22, 6);  
 DECLARE @COD_OPER_COST INT;  
 DECLARE @OPER_VALUE DECIMAL(22, 6);  
 DECLARE @PLAN INT;  
 DECLARE @PERCENT DECIMAL(22, 6);  
 DECLARE @COD_TTYPE INT;  
 DECLARE @GEN_TITLES INT;  
 DECLARE @RATE_PLAN_AFF DECIMAL(22, 6);  
 DECLARE @ANTECIP_VALUE_AFF DECIMAL(22, 6);  
 DECLARE @TITLE_SIT INT  
 DECLARE @TEMP_TITLE_SIT INT  
 DECLARE @SOURCE_TRAN INT  
 DECLARE @BRAND_TRAN INT;  
 DECLARE @COD_EC INT;  
 DECLARE @COD_TX_EC INT;  
 DECLARE @ANTECIP_PERCENT_EC DECIMAL(22, 6);  
 DECLARE @TRANDATE DATETIME;  
 DECLARE @LEDGER_RETENTION INT = 0;  
 DECLARE @COD_CTRL INT = NULL;  
 DECLARE @COD_AWAIT_SPLIT INT = NULL  
 DECLARE @COD_AWAIT_PAY INT = NULL  
 DECLARE @COD_EXTERNAL_PROCESSING INT = NULL  
 DECLARE @HASPLANDZERO BIT = 0;  
 DECLARE @PLANDZEROTAX DECIMAL(22, 6) = NULL  
 DECLARE @PLANDZEROTAX_AFF DECIMAL(22, 6) = NULL  
 DECLARE @PLANDZEROTODAY BIT = 0;  
 DECLARE @CURRENTHOUR INT  
 DECLARE @PlanDZeroHour INT = 0;  
  
 BEGIN  
  
  IF @TRAN_ID IS NULL  
  BEGIN  
   SELECT  
    @PLOTS = [TRANSACTION].PLOTS  
      ,@AMOUNT = [TRANSACTION].AMOUNT  
      ,@CODASS_EQUIP = [TRANSACTION].COD_ASS_DEPTO_TERMINAL  
      ,@TAXEFFETIVE = ASS_TAX_DEPART.EFFECTIVE_PERCENTAGE  
      ,@TAXINI = ASS_TAX_DEPART.PARCENTAGE  
      ,@RATE = ASS_TAX_DEPART.RATE  
      ,@INTERVAL = ASS_TAX_DEPART.INTERVAL  
      ,@TR_ID = [TRANSACTION].COD_TRAN  
      ,@TAX_ACQ = ASS_TR_TYPE_COMP.TAX_VALUE  
      ,@TYPEPLAN = DEPARTMENTS_BRANCH.COD_T_PLAN  
      ,@INTERVALRECEIVE = ASS_TR_TYPE_COMP.INTERVAL  
      ,@ANTICIPATION = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE  
      ,@COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR  
      ,@QTY_PLOTS = [TRANSACTION].PLOTS  
      ,@COD_TTYPE = [TRANSACTION].COD_TTYPE  
      ,@GEN_TITLES = [BRAND].[GEN_TITLES]  
      ,@ANT_PERCENT = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE  
      ,@SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN  
      ,@BRAND_TRAN = [BRAND].COD_BRAND  
      ,@COD_EC = BRANCH_EC.COD_EC  
      ,@COD_TX_EC = [TRANSACTION].COD_ASS_TX_DEP  
      ,@TRANDATE = [TRANSACTION].BRAZILIAN_DATE  
   FROM [TRANSACTION] WITH (NOLOCK)  
   JOIN ASS_TAX_DEPART  
    ON ASS_TAX_DEPART.COD_ASS_TX_DEP = [TRANSACTION].COD_ASS_TX_DEP  
   JOIN DEPARTMENTS_BRANCH  
    ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH  
   JOIN BRANCH_EC  
    ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH  
   JOIN ASS_TR_TYPE_COMP  
    ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = [TRANSACTION].COD_ASS_TR_COMP  
   JOIN [PLAN]  
    ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN  
   JOIN [BRAND]  
    ON BRAND.[NAME] = [TRANSACTION].BRAND  
     AND [BRAND].COD_TTYPE = [TRANSACTION].COD_TTYPE  
   WHERE [TRANSACTION].CODE = @COD_TRAN;  
  END;  
  ELSE  
  BEGIN  
   SELECT  
    @PLOTS = [TRANSACTION].PLOTS  
      ,@AMOUNT = [TRANSACTION].AMOUNT  
      ,@CODASS_EQUIP = [TRANSACTION].COD_ASS_DEPTO_TERMINAL  
      ,@TAXEFFETIVE = ASS_TAX_DEPART.EFFECTIVE_PERCENTAGE  
      ,@TAXINI = ASS_TAX_DEPART.PARCENTAGE  
      ,@RATE = ASS_TAX_DEPART.RATE  
      ,@INTERVAL = ASS_TAX_DEPART.INTERVAL  
      ,@TR_ID = [TRANSACTION].COD_TRAN  
      ,@TAX_ACQ = ASS_TR_TYPE_COMP.TAX_VALUE  
      ,@TYPEPLAN = [PLAN].COD_T_PLAN  
      ,@INTERVALRECEIVE = ASS_TR_TYPE_COMP.INTERVAL  
      ,@ANTICIPATION = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE  
      ,@COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR  
      ,@QTY_PLOTS = [TRANSACTION].PLOTS  
      ,@COD_TTYPE = [TRANSACTION].COD_TTYPE  
      ,@GEN_TITLES = [BRAND].[GEN_TITLES]  
      ,@ANT_PERCENT = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE  
      ,@SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN  
      ,@BRAND_TRAN = [BRAND].COD_BRAND  
      ,@COD_EC = BRANCH_EC.COD_EC  
      ,@COD_TX_EC = [TRANSACTION].COD_ASS_TX_DEP  
      ,@TRANDATE = [TRANSACTION].BRAZILIAN_DATE  
   FROM [TRANSACTION] WITH (NOLOCK)  
   INNER JOIN ASS_TAX_DEPART  
    ON ASS_TAX_DEPART.COD_ASS_TX_DEP = [TRANSACTION].COD_ASS_TX_DEP  
   INNER JOIN DEPARTMENTS_BRANCH  
    ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH  
   INNER JOIN BRANCH_EC  
    ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH  
   INNER JOIN ASS_TR_TYPE_COMP  
    ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = [TRANSACTION].COD_ASS_TR_COMP  
   INNER JOIN [PLAN]  
    ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN  
   INNER JOIN [BRAND]  
    ON BRAND.[NAME] = [TRANSACTION].BRAND  
     AND [BRAND].COD_TTYPE = [TRANSACTION].COD_TTYPE  
   WHERE [TRANSACTION].COD_TRAN = @TRAN_ID;  
  END;  
  
  SELECT  
   @COD_AWAIT_SPLIT = COD_SITUATION  
  FROM SITUATION  
  WHERE [NAME] = 'WAITING FOR SPLIT OF FINANCE SCHEDULE'  
  SELECT  
   @COD_AWAIT_PAY = COD_SITUATION  
  FROM SITUATION  
  WHERE [NAME] = 'AWAITING PAYMENT'  
  SELECT  
   @COD_EXTERNAL_PROCESSING = COD_SITUATION  
  FROM SITUATION  
  WHERE [NAME] = 'LIQUIDACAO PROCESSADORA'  
  
  SELECT  
   @LEDGER_RETENTION = COUNT(*)  
  FROM SERVICES_AVAILABLE s  
  JOIN ITEMS_SERVICES_AVAILABLE item  
   ON item.COD_ITEM_SERVICE = s.COD_ITEM_SERVICE  
  WHERE s.COD_EC = @COD_EC  
  AND item.CODE = '8'  
  AND s.ACTIVE = 1  
  
  SELECT  
   @HASPLANDZERO = 1  
     ,@PLANDZEROTAX = CAST(JSON_VALUE(CONFIG_JSON, IIF(@COD_TTYPE = 1, '$.credit', '$.debit')) AS DECIMAL(22, 6))  
  FROM SERVICES_AVAILABLE SA  
  JOIN ITEMS_SERVICES_AVAILABLE item  
   ON item.NAME = 'PlanDZero'  
    AND item.COD_ITEM_SERVICE = SA.COD_ITEM_SERVICE  
  WHERE SA.COD_EC = @COD_EC  
  AND SA.ACTIVE = 1  
  
  IF @HASPLANDZERO = 1  
   AND @COD_AFFILIATOR IS NOT NULL  
  BEGIN  
   SELECT  
    @PLANDZEROTAX_AFF = CAST(JSON_VALUE(CONFIG_JSON, IIF(@COD_TTYPE = 1, '$.credit', '$.debit')) AS DECIMAL(22, 6))  
   FROM SERVICES_AVAILABLE SA  
   JOIN ITEMS_SERVICES_AVAILABLE item  
    ON item.NAME = 'PlanDZero'  
     AND item.COD_ITEM_SERVICE = SA.COD_ITEM_SERVICE  
   WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR  
   AND SA.COD_EC IS NULL  
   AND SA.ACTIVE = 1  
  END  
  
  SET @CURRENTHOUR = DATEPART(HOUR, @TRANDATE)  
  IF @HASPLANDZERO = 1  
   AND EXISTS (SELECT  
     COD_SCH_PLANDZERO  
    FROM PlanDZeroSchedule  
    WHERE WindowMaxHour > @CURRENTHOUR)  
  BEGIN  
   SET @PLANDZEROTODAY = 1;  
   SET @PlanDZeroHour = (SELECT TOP 1  
     WindowMaxHour  
    FROM PlanDZeroSchedule  
    WHERE WindowMaxHour > @CURRENTHOUR  
    ORDER BY WindowMaxHour);  
  END  
  
  IF (@HASPLANDZERO = 1  
   AND @PLANDZEROTODAY = 0  
   AND @INTERVAL = 1)  
   OR @TYPEPLAN = 1  
  BEGIN  
   SET @HASPLANDZERO = 0;  
   SET @PLANDZEROTAX = NULL;  
   SET @PLANDZEROTAX_AFF = NULL;  
  END  
  
  IF @GEN_TITLES = 1  
   AND @LEDGER_RETENTION = 0  
   SET @TITLE_SIT = @COD_AWAIT_PAY;  
  ELSE  
  IF @GEN_TITLES <> 1  
   AND @LEDGER_RETENTION = 0  
   SET @TITLE_SIT = @COD_EXTERNAL_PROCESSING;  
  ELSE  
   SET @TITLE_SIT = @COD_AWAIT_SPLIT;  
  
  SET @TEMP_TITLE_SIT = @TITLE_SIT  
  
  CREATE TABLE #retentionRules (  
   COD_RET_CTRL INT NOT NULL  
     ,FROM_DATE DATETIME NOT NULL  
     ,UNTIL_DATE DATETIME NOT NULL  
  )  
  
  IF @TITLE_SIT = @COD_AWAIT_SPLIT  
  BEGIN  
   INSERT INTO #retentionRules (COD_RET_CTRL, FROM_DATE, UNTIL_DATE)  
    SELECT  
     ctrl.COD_RET_CTRL  
       ,ctrl.FROM_DATE  
       ,ctrl.UNTIL_DATE  
    FROM LEDGER_RETENTION_CONTROL ctrl  
    WHERE ctrl.COD_EC = @COD_EC  
    AND (ctrl.UNTIL_DATE IS NULL  
    OR ctrl.UNTIL_DATE >= CAST(GETDATE() AS DATE))  
  END  
  
  SET @ANTECIP_PERCENT_EC = @ANT_PERCENT  
  
  IF @COD_AFFILIATOR IS NOT NULL  
  BEGIN  
   SELECT  
    @COD_OPER_COST = OP_COST.COD_OPER_COST_AFF  
      ,@OPER_VALUE = OP_COST.PERCENTAGE_COST  
      ,@PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN_TAX_AFF  
      ,@PERCENT = PLAN_TAX_AFFILIATOR.[PERCENTAGE]  
      ,@RATE_PLAN_AFF = PLAN_TAX_AFFILIATOR.RATE  
      ,@ANTECIP_VALUE_AFF = PLAN_TAX_AFFILIATOR.ANTICIPATION_PERCENTAGE  
   FROM AFFILIATOR  
   INNER JOIN OPERATION_COST_AFFILIATOR OP_COST  
    ON OP_COST.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR  
   INNER JOIN PROGRESSIVE_COST_AFFILIATOR PROG_COST  
    ON PROG_COST.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR  
   INNER JOIN PLAN_TAX_AFFILIATOR  
    ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR  
   INNER JOIN [PLAN]  
    ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN  
     AND [PLAN].COD_PLAN_CATEGORY <> 3  
   WHERE [PLAN_TAX_AFFILIATOR].COD_TTYPE = @COD_TTYPE  
   AND [PLAN_TAX_AFFILIATOR].QTY_INI_PLOTS <= @QTY_PLOTS  
   AND [PLAN_TAX_AFFILIATOR].QTY_FINAL_PLOTS >= @QTY_PLOTS  
   AND [PLAN_TAX_AFFILIATOR].ACTIVE = 1  
   AND [OP_COST].ACTIVE = 1  
   AND PROG_COST.ACTIVE = 1  
   AND AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATOR  
   AND AFFILIATOR.ACTIVE = 1  
   AND ([PLAN_TAX_AFFILIATOR].COD_BRAND = @BRAND_TRAN  
   OR PLAN_TAX_AFFILIATOR.COD_BRAND IS NULL)  
   AND [PLAN_TAX_AFFILIATOR].COD_SOURCE_TRAN = @SOURCE_TRAN  
  END;  
  
  IF @TYPEPLAN = 1  
  BEGIN  
   SET @CONT = 0;  
   SET @VALUE = (@AMOUNT / @PLOTS);  
  
   SET @PAYDAY = CAST(@TRANDATE AS DATETIME);  
   SET @RECEIVEDATE = CAST(@TRANDATE AS DATETIME);  
  
   SET @INTERVAL = IIF(@HASPLANDZERO = 0, @INTERVAL, IIF(@PLANDZEROTODAY = 1, 0, 1))  
  
   IF @HASPLANDZERO = 1  
    SET @PAYDAY = IIF(@PLANDZEROTODAY = 1, @PAYDAY, DATEADD(DAY, 1, @PAYDAY))  
  
   WHILE @CONT < @PLOTS  
   BEGIN  
   SELECT  
    @CODE = NEXT VALUE FOR SEQ_TRANSACTION_TITLE;  
  
   SET @PAYDAY = IIF(@HASPLANDZERO = 0, DATEADD(DAY, @INTERVAL, @PAYDAY), @PAYDAY);  
   SET @PREVISION_PAY_DATE = [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY)  
   SET @RECEIVEDATE = DATEADD(DAY, @INTERVALRECEIVE, @RECEIVEDATE);  
  
   IF @TITLE_SIT != @TEMP_TITLE_SIT  
    SET @TITLE_SIT = @TEMP_TITLE_SIT;  
  
   SET @COD_CTRL = NULL  
  
   IF @TITLE_SIT = @COD_AWAIT_SPLIT  
   BEGIN  
    SELECT  
     @COD_CTRL = COD_RET_CTRL  
    FROM #retentionRules r  
    WHERE @PREVISION_PAY_DATE BETWEEN r.FROM_DATE AND r.UNTIL_DATE  
    IF @COD_CTRL IS NULL  
     SET @TITLE_SIT = @COD_AWAIT_PAY  
   END  
  
   IF @RECEIVEDATE <= @PAYDAY  
    SET @ANTICIPATION = 0;  
  
   IF @HASPLANDZERO = 1  
    AND @COD_TTYPE != 1  
    SET @ANTICIPATION = 0  
  
   IF @HASPLANDZERO = 1  
    AND @PLANDZEROTODAY = 1  
    SET @PREVISION_PAY_DATE = DATEADD(HOUR, @PlanDZeroHour, @PREVISION_PAY_DATE)  
  
   INSERT INTO [TRANSACTION_TITLES] (CODE,  
   COD_TRAN,  
   PLOT,  
   AMOUNT,  
   COD_ASS_DEPTO_TERMINAL,  
   TAX_INITIAL,  
   ANTICIP_PERCENT,  
   RATE,  
   PREVISION_PAY_DATE,  
   COD_SITUATION,  
   ACQ_TAX,  
   INTERVAL_INITIAL,  
   PREVISION_RECEIVE_DATE,  
   COD_SITUATION_RECEIVE,  
   COD_TYPE_TRAN_TITLE,  
   COD_EC,  
   COD_ASS_TX_DEP,  
   QTY_DAYS_ANTECIP,  
   QTY_BUSINESS_DAY,  
   COD_RET_CTRL,  
   TAX_PLANDZERO)  
    VALUES (CONCAT(@CODE, @COD_EC), @TR_ID, (@CONT + 1), @VALUE, @CODASS_EQUIP, @TAXINI, @ANTICIPATION, @RATE, @PREVISION_PAY_DATE, @TITLE_SIT, @TAX_ACQ, @INTERVAL, [dbo].[FN_NEXT_BUSINESS_DAY](@RECEIVEDATE), @TITLE_SIT, 1, @COD_EC, @COD_TX_EC, (((@CONT +
 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), @PAYDAY)), (((@CONT + 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY))), @COD_CTRL, @PLANDZEROTAX);  
  
   IF @@rowcount < 1  
    THROW 60001, 'COULD NOT REGISTER [TRANSACTION_TITLES] ', 1;  
  
   --  AFFILIATOR INSERT COST (RECEIVE)                      
   IF @COD_AFFILIATOR IS NOT NULL  
   BEGIN  
    IF @RECEIVEDATE <= @PAYDAY  
     SET @ANTECIP_VALUE_AFF = 0;  
  
    IF @HASPLANDZERO = 1  
     SET @ANTECIP_VALUE_AFF = 0  
  
    INSERT INTO TRANSACTION_TITLES_COST (COD_AFFILIATOR,  
    COD_TITLE,  
    COD_OPER_COST_AFF,  
    OPER_VALUE,  
    COD_PLAN_TAX_AFF,  
    [PERCENTAGE],  
    PREVISION_PAY_DATE,  
    COD_SITUATION,  
    RATE_PLAN,  
    ANTICIP_PERCENT,  
    TAX_PLANDZERO)  
     VALUES (@COD_AFFILIATOR, SCOPE_IDENTITY(), @COD_OPER_COST, @OPER_VALUE, @PLAN, @PERCENT, [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY), @COD_AWAIT_PAY, @RATE_PLAN_AFF, @ANTECIP_VALUE_AFF, @PLANDZEROTAX_AFF)  
   END;  
  
   SET @CONT = @CONT + 1;  
   END;  
   IF (@PLANDZEROTAX IS NOT NULL)  
    INSERT INTO TRANSACTION_SERVICES (CREATED_AT, COD_ITEM_SERVICE, COD_TRAN, TAX_PLANDZERO_EC, TAX_PLANDZERO_AFF, COD_EC)  
     VALUES (current_timestamp, (SELECT isa.COD_ITEM_SERVICE FROM ITEMS_SERVICES_AVAILABLE isa WHERE isa.NAME = 'PlanDZero'), @TR_ID, @PLANDZEROTAX, @PLANDZEROTAX_AFF, @COD_EC)  
  END;  
  ELSE  
  BEGIN  
   SET @CONT = 0;  
   SET @VALUE = (@AMOUNT / @PLOTS);  
   SET @PAYDAY = CAST(@TRANDATE AS DATETIME);  
   SET @RECEIVEDATE = CAST(@TRANDATE AS DATETIME);  
   SET @PAYDAY = IIF(@HASPLANDZERO = 0, DATEADD(DAY, @INTERVAL, @PAYDAY), IIF(@PLANDZEROTODAY = 1, @PAYDAY, DATEADD(DAY, 1, @PAYDAY)));  
  
   SET @INTERVAL = IIF(@HASPLANDZERO = 0, @INTERVAL, IIF(@PLANDZEROTODAY = 1, 0, 1))  
  
   IF @HASPLANDZERO = 1  
    AND @COD_TTYPE != 1  
    SET @ANTECIP_PERCENT_EC = 0  
  
   SET @PREVISION_PAY_DATE = [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY)  
  
   IF @HASPLANDZERO = 1  
    AND @PLANDZEROTODAY = 1  
    SET @PREVISION_PAY_DATE = DATEADD(HOUR, @PlanDZeroHour, @PREVISION_PAY_DATE)  
  
   IF @TITLE_SIT != @TEMP_TITLE_SIT  
    SET @TITLE_SIT = @TEMP_TITLE_SIT;  
  
   SET @COD_CTRL = NULL  
  
   IF @TITLE_SIT = @COD_AWAIT_SPLIT  
   BEGIN  
    SELECT  
     @COD_CTRL = COD_RET_CTRL  
    FROM #retentionRules r  
    WHERE @PREVISION_PAY_DATE BETWEEN r.FROM_DATE AND r.UNTIL_DATE  
  
    IF @COD_CTRL IS NULL  
     SET @TITLE_SIT = @COD_AWAIT_PAY  
   END  
  
   WHILE @CONT < @PLOTS  
   BEGIN  
   SELECT  
    @CODE = NEXT VALUE FOR SEQ_TRANSACTION_TITLE;  
  
   SET @RECEIVEDATE = DATEADD(DAY, @INTERVALRECEIVE, @RECEIVEDATE);  
  
   IF @RECEIVEDATE <= @PAYDAY  
    SET @ANT_PERCENT = 0;  
   ELSE  
    SET @ANT_PERCENT = @ANTECIP_PERCENT_EC;  
  
   INSERT INTO [TRANSACTION_TITLES] (CODE,  
   COD_TRAN,  
   PLOT,  
   AMOUNT,  
   COD_ASS_DEPTO_TERMINAL,  
   TAX_INITIAL,  
   RATE,  
   PREVISION_PAY_DATE,  
   COD_SITUATION,  
   ACQ_TAX,  
   INTERVAL_INITIAL,  
   PREVISION_RECEIVE_DATE,  
   COD_SITUATION_RECEIVE,  
   COD_TYPE_TRAN_TITLE,  
   ANTICIP_PERCENT,  
   COD_EC,  
   COD_ASS_TX_DEP,  
   QTY_DAYS_ANTECIP,  
   QTY_BUSINESS_DAY,  
   COD_RET_CTRL,  
   TAX_PLANDZERO)  
    VALUES (CONCAT(@CODE, @COD_EC), @TR_ID, (@CONT + 1), @VALUE, @CODASS_EQUIP, @TAXINI, @RATE, @PREVISION_PAY_DATE, @TITLE_SIT, @TAX_ACQ, @INTERVAL, [dbo].[FN_NEXT_BUSINESS_DAY](@RECEIVEDATE), @TITLE_SIT, 1, @ANT_PERCENT, @COD_EC, @COD_TX_EC, (((@CONT + 
1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), @PAYDAY)), (((@CONT + 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY))), @COD_CTRL, @PLANDZEROTAX);  
  
   IF @@rowcount < 1  
    THROW 60001, 'COULD NOT REGISTER [TRANSACTION_TITLES] ', 1;  
  
   IF @COD_AFFILIATOR IS NOT NULL  
   BEGIN  
    IF @RECEIVEDATE <= @PAYDAY  
     SET @ANTECIP_VALUE_AFF = 0;  
  
    IF @HASPLANDZERO = 1  
     AND @COD_TTYPE != 1  
     SET @ANTECIP_VALUE_AFF = 0  
  
    INSERT INTO TRANSACTION_TITLES_COST (COD_AFFILIATOR,  
    COD_TITLE,  
    COD_OPER_COST_AFF,  
    OPER_VALUE,  
    COD_PLAN_TAX_AFF,  
    [PERCENTAGE],  
    PREVISION_PAY_DATE,  
    COD_SITUATION,  
    RATE_PLAN,  
    ANTICIP_PERCENT,  
    TAX_PLANDZERO)  
     VALUES (@COD_AFFILIATOR, SCOPE_IDENTITY(), @COD_OPER_COST, @OPER_VALUE, @PLAN, @PERCENT, [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY), @COD_AWAIT_PAY, @RATE_PLAN_AFF, @ANTECIP_VALUE_AFF, @PLANDZEROTAX_AFF)  
   END;  
  
   SET @CONT = @CONT + 1;  
   END;  
   IF (@PLANDZEROTAX IS NOT NULL)  
    INSERT INTO TRANSACTION_SERVICES (CREATED_AT, COD_ITEM_SERVICE, COD_TRAN, TAX_PLANDZERO_EC, TAX_PLANDZERO_AFF, COD_EC)  
     VALUES (current_timestamp, (SELECT isa.COD_ITEM_SERVICE FROM ITEMS_SERVICES_AVAILABLE isa WHERE isa.NAME = 'PlanDZero'), @TR_ID, @PLANDZEROTAX, @PLANDZEROTAX_AFF, @COD_EC)  
  END;  

  UPDATE PROCESS_BG_STATUS
  SET STATUS_PROCESSED = 0 
  WHERE CODE= @TR_ID 

 END;  

 GO 

 
SELECT COD_TRAN 
 INTO #TEMP_TRAN
FROM REPORT_TRANSACTIONS_EXP WHERE COD_REP_TRANS_EXP > 5063148

    SELECT     
   TRANSACTION_TITLES.COD_EC,  
      [TRANSACTION].COD_TRAN,  
      TRANSACTION_SERVICES.TAX_PLANDZERO_EC    
   INTO #TEMP_DZERO  
     FROM TRANSACTION_SERVICES      
     INNER JOIN ITEMS_SERVICES_AVAILABLE      
      ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE  
  JOIN #TEMP_TRAN   
   ON #TEMP_TRAN.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
  JOIN TRANSACTION_TITLES WITH (NOLOCK)  
   ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN  
   AND TRANSACTION_TITLES.COD_EC =  TRANSACTION_SERVICES.COD_EC  
  JOIN [TRANSACTION] WITH (NOLOCK)
   ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
     WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'      
  GROUP BY    
  TRANSACTION_TITLES.COD_EC,
  [TRANSACTION].COD_TRAN, 
   TRANSACTION_SERVICES.TAX_PLANDZERO_EC  
    
  
  SELECT  
    [TRANSACTION].COD_TRAN,  
      CASE      
   WHEN (  
    #TEMP_DZERO.TAX_PLANDZERO_EC
    )    
    > 0 THEN SUM(dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT,   
 (  
  #TEMP_DZERO.TAX_PLANDZERO_EC  
  )      
    , [TRANSACTION].COD_TTYPE))      
   ELSE     
  CASE   
  WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN  
  SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
  WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)  
  ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)))  
  ELSE 0 END  
 END AS NET_VALUE  
  INTO #TEMP_NET_VALUE  
  FROM [TRANSACTION] WITH (NOLOCK)     
LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)  
 ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN  
LEFT JOIN #TEMP_DZERO ON #TEMP_DZERO.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
   AND #TEMP_DZERO.COD_EC = TRANSACTION_TITLES.COD_EC
WHERE [TRANSACTION].COD_TRAN IN (SELECT COD_TRAN FROM #TEMP_TRAN)  
GROUP BY  
    TRANSACTION_TITLES.COD_TRAN  
    ,[TRANSACTION].COD_TRAN  
 ,#TEMP_DZERO.TAX_PLANDZERO_EC


GO

CREATE TABLE #DELETE
(
NET_VALUE_EC DECIMAL(22,6),
COD_TRAN INT
)

DECLARE @CONT INT;

SET @CONT = 0;

WHILE @CONT < 100
BEGIN 

INSERT INTO #DELETE
SELECT TOP 16000 NET_VALUE,COD_TRAN FROM #TEMP_NET_VALUE


UPDATE REPORT_TRANSACTIONS_EXP SET NET_VALUE= #DELETE.NET_VALUE_EC
FROM REPORT_TRANSACTIONS_EXP
JOIN #DELETE ON #DELETE.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
WHERE REPORT_TRANSACTIONS_EXP.COD_TRAN IN (SELECT COD_TRAN FROM #DELETE) 

DELETE FROM #TEMP_NET_VALUE WHERE COD_TRAN IN (SELECT COD_TRAN FROM #DELETE)

DELETE FROM #DELETE

SELECT @CONT AS QTY;

SET @CONT = @CONT + 1;

END

DROP TABLE #TEMP_NET_VALUE
DROP TABLE #DELETE
DROP TABLE #TEMP_TRAN
DROP TABLE #TEMP_DZERO


--ST-1330

GO

--ET-1108

--------------------------------------
-- ALTERACOES NO ENVIO DE PARCEIROS
--------------------------------------
IF OBJECT_ID('SP_LIST_PARTNER_EXTERNAL') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LIST_PARTNER_EXTERNAL
END
GO
CREATE PROCEDURE SP_LIST_PARTNER_EXTERNAL
(
    @COD_EXT INT,
    @COD_AFF INT = NULL
)
AS BEGIN

    INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_EC, COD_EXTERNAL)
    SELECT 1, 0, CE.COD_EC, NULL
    FROM COMMERCIAL_ESTABLISHMENT CE
        LEFT JOIN EXTERNAL_PARTN_UP EPU ON CE.COD_EC = EPU.COD_EC
    WHERE EPU.COD_EXTERNAL_PART IS NULL

    SELECT * FROM 
        (SELECT
            COMMERCIAL_ESTABLISHMENT.COD_EC [COD_PTN],
            COMMERCIAL_ESTABLISHMENT.[NAME] [CardName],
            COMMERCIAL_ESTABLISHMENT.TRADING_NAME [ForeignName],
            'A' [Type],
            COMMERCIAL_ESTABLISHMENT.EMAIL [MailAddress],
            COALESCE(contact.[NUMBER], cellphone.[NUMBER]) [NUMBER],
            COALESCE(contact.[DDD], cellphone.[DDD]) [DDD],
            COALESCE(contact.[COD_CONT], cellphone.COD_CONT) [COD_CONT],
            (cellphone.DDD + cellphone.NUMBER) [Cellphone],
            'BR' [BankCountry],
            BANKS.CODE [BankCode],
            BANK_DETAILS_EC.ACCOUNT,
            BANK_DETAILS_EC.DIGIT_ACCOUNT,
            BANK_DETAILS_EC.AGENCY,
            BANK_DETAILS_EC.DIGIT_AGENCY,
            ACCOUNT_TYPE.[NAME] [ACCOUNT_TYPE],
            OPERATION.CODE [OPERATION],
            EXTERNAL_PARTN_UP.COD_EXTERNAL                                                              OldCode,
            '*'                                                                                         [ADDRESS_NAME],
            ADDRESS_BRANCH.[ADDRESS]                                                                    [Street],
            ADDRESS_BRANCH.NUMBER                                                                       [ADR_NUMBER],
            NEIGHBORHOOD.[NAME]                                                                         Neighborhood,
            ADDRESS_BRANCH.CEP,
            CITY.[NAME]                                                                                 [CITY],
            [STATE].UF                                                                                  [STATE],
            COUNTRY.INITIALS                                                                            [COUNTRY],
            ADDRESS_BRANCH.COMPLEMENT,
            (IIF(LEN(COMMERCIAL_ESTABLISHMENT.CPF_CNPJ) = 11, NULL, COMMERCIAL_ESTABLISHMENT.CPF_CNPJ)) [CNPJ],
            CASE 
				WHEN COMMERCIAL_ESTABLISHMENT.STATE_REGISTRATION IS NOT NULL AND COMMERCIAL_ESTABLISHMENT.STATE_REGISTRATION <> 'ISENTO' THEN COMMERCIAL_ESTABLISHMENT.STATE_REGISTRATION
				ELSE 'Isento' 
			END AS STATE_REGISTRATION,
            CASE 
				WHEN COMMERCIAL_ESTABLISHMENT.MUNICIPAL_REGISTRATION IS NOT NULL AND COMMERCIAL_ESTABLISHMENT.MUNICIPAL_REGISTRATION <> 'ISENTO' THEN COMMERCIAL_ESTABLISHMENT.MUNICIPAL_REGISTRATION
				ELSE NULL 
			END AS MUNICIPAL_REGISTRATION,
            (IIF(LEN(COMMERCIAL_ESTABLISHMENT.CPF_CNPJ) = 11, COMMERCIAL_ESTABLISHMENT.CPF_CNPJ, NULL)) [CPF],
            SEGMENTS.CNAE                                                                               [CNAE],
            COMMERCIAL_ESTABLISHMENT.BIRTHDATE,
            ROW_NUMBER() OVER (PARTITION BY COMMERCIAL_ESTABLISHMENT.CPF_CNPJ ORDER BY COMMERCIAL_ESTABLISHMENT.COD_EC) [ROW_ID],
            CASE 
				WHEN COMMERCIAL_ESTABLISHMENT.STATE_REGISTRATION IS NOT NULL AND COMMERCIAL_ESTABLISHMENT.STATE_REGISTRATION <> 'ISENTO' THEN '1'
				ELSE '2' 
			END AS CONTRIBUITOR,
			CASE
				WHEN COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = 1 THEN '3'
				ELSE '1'
			END AS SIMPLE_TAXATION,
			'1' AS CONSUMER_OPERATION
        FROM COMMERCIAL_ESTABLISHMENT
                 JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC AND BRANCH_EC.ACTIVE = 1
                 JOIN CONTACT_BRANCH cellphone ON cellphone.COD_BRANCH = BRANCH_EC.COD_BRANCH AND cellphone.ACTIVE = 1 AND (SELECT COUNT(*) FROM TYPE_CONTACT tp WHERE tp.COD_TP_CONT = cellphone.COD_TP_CONT AND tp.[NAME] = 'CELULAR') > 0
                 JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC ANd BANK_DETAILS_EC.ACTIVE = 1 AND BANK_DETAILS_EC.IS_CERC = 0
                 JOIN BANKS ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
                 JOIN ACCOUNT_TYPE ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
                 JOIN ADDRESS_BRANCH ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH AND ADDRESS_BRANCH.ACTIVE = 1
                 JOIN NEIGHBORHOOD On NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
                 JOIN CITY ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
                 JOIN [STATE] ON [STATE].COD_STATE = CITY.COD_STATE
                 JOIN [COUNTRY] ON COUNTRY.COD_COUNTRY = [STATE].COD_COUNTRY
                 JOIN EXTERNAL_PARTN_UP ON EXTERNAL_PARTN_UP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC AND EXTERNAL_PARTN_UP.COD_EXT_CLI = @COD_EXT AND EXTERNAL_PARTN_UP.UPDATED = 0
                 LEFT JOIN OPERATION_BANK ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
                 LEFT JOIN OPERATION ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
                 LEFT JOIN CONTACT_BRANCH contact on contact.COD_BRANCH = BRANCH_EC.COD_BRANCH AND contact.ACTIVE = 1 AND (SELECT COUNT(*) FROM TYPE_CONTACT tp WHERE tp.COD_TP_CONT = contact.COD_TP_CONT AND tp.[NAME] = 'COMERCIAL') > 0
                 LEFT JOIN SEGMENTS ON COMMERCIAL_ESTABLISHMENT.COD_SEG = SEGMENTS.COD_SEG
        WHERE COMMERCIAL_ESTABLISHMENT.ACTIVE = 1 AND ( @COD_AFF IS NULL OR COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF )) PN
    WHERE PN.ROW_ID = 1
    
END
GO 

IF OBJECT_ID('SP_LIST_PARTNER_EXTERNAL_AFF') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LIST_PARTNER_EXTERNAL_AFF
END
GO
CREATE PROCEDURE SP_LIST_PARTNER_EXTERNAL_AFF
(
    @COD_EXT INT
)
AS BEGIN

    INSERT INTO EXTERNAL_PARTN_UP (COD_EXT_CLI, UPDATED, COD_AFFILIATOR, COD_EXTERNAL)
    SELECT @COD_EXT, 0, AFFILIATOR.COD_AFFILIATOR, NULL FROM AFFILIATOR
        LEFT JOIN EXTERNAL_PARTN_UP ON AFFILIATOR.COD_AFFILIATOR = EXTERNAL_PARTN_UP.COD_AFFILIATOR AND COD_EC IS NULL
    WHERE ACTIVE = 1 AND EXTERNAL_PARTN_UP.COD_EXTERNAL_PART IS NULL

    SELECT
        AFFILIATOR.COD_AFFILIATOR [COD_PTN],
        AFFILIATOR.[NAME] [CardName],
        AFFILIATOR.[NAME] [ForeignName],
        'A' [Type],
        '' [MailAddress],
        COALESCE(contact.[NUMBER], cellphone.[NUMBER]) [NUMBER],
        COALESCE(contact.[DDD], cellphone.[DDD]) [DDD],
        COALESCE(contact.COD_CONTACT_AFL, cellphone.COD_CONTACT_AFL) [COD_CONT],
        (cellphone.DDD + cellphone.NUMBER) [Cellphone],
        'BR' [BankCountry],
        BANKS.CODE [BankCode],
        BANK_DETAILS_EC.ACCOUNT,
        BANK_DETAILS_EC.DIGIT_ACCOUNT,
        BANK_DETAILS_EC.AGENCY,
        BANK_DETAILS_EC.DIGIT_AGENCY,
        ACCOUNT_TYPE.[NAME] [ACCOUNT_TYPE],
        OPERATION.CODE [OPERATION],
        EXTERNAL_PARTN_UP.COD_EXTERNAL                                         OldCode,
        '*'                                                             [ADDRESS_NAME],
        ADDRESS_AFFILIATOR.[ADDRESS]                                    [Street],
        ADDRESS_AFFILIATOR.NUMBER,
        NEIGHBORHOOD.[NAME]                                             Neighborhood,
        ADDRESS_AFFILIATOR.CEP,
        CITY.[NAME]                                                     [CITY],
        [STATE].UF                                                      [STATE],
        COUNTRY.INITIALS                                                [COUNTRY],
        ADDRESS_AFFILIATOR.COMPLEMENT,
        (IIF(LEN(AFFILIATOR.CPF_CNPJ) = 11, NULL, AFFILIATOR.CPF_CNPJ)) [CNPJ],
        CASE 
			WHEN AFFILIATOR.STATE_REGISTRATION IS NOT NULL AND AFFILIATOR.STATE_REGISTRATION <> 'ISENTO' THEN AFFILIATOR.STATE_REGISTRATION
			ELSE 'Isento' 
		END AS STATE_REGISTRATION,
        CASE 
			WHEN AFFILIATOR.MUNICIPAL_REGISTRATION IS NOT NULL AND AFFILIATOR.MUNICIPAL_REGISTRATION <> 'ISENTO' THEN AFFILIATOR.MUNICIPAL_REGISTRATION
			ELSE NULL 
		END AS MUNICIPAL_REGISTRATION,
        (IIF(LEN(AFFILIATOR.CPF_CNPJ) = 11, AFFILIATOR.CPF_CNPJ, NULL)) [CPF],
        '7319002'                                                       [CNAE],
        AFFILIATOR.CREATED_AT                                           BIRTHDATE,
        CASE 
			WHEN AFFILIATOR.STATE_REGISTRATION IS NOT NULL AND AFFILIATOR.STATE_REGISTRATION <> 'ISENTO' THEN '1'
			ELSE '2' 
		END AS CONTRIBUITOR,
		'2' AS SIMPLE_TAXATION,
		'1' AS CONSUMER_OPERATION
    FROM AFFILIATOR
        JOIN AFFILIATOR_CONTACT cellphone ON cellphone.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR AND cellphone.ACTIVE = 1 AND (SELECT COUNT(*) FROM TYPE_CONTACT tp WHERE tp.COD_TP_CONT = cellphone.COD_TP_CONT AND tp.[NAME] = 'CELULAR') > 0
        JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR AND BANK_DETAILS_EC.COD_EC Is NULL AND BANK_DETAILS_EC.ACTIVE = 1 AND BANK_DETAILS_EC.IS_CERC = 0
        JOIN BANKS ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
        JOIN ACCOUNT_TYPE ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
        JOIN ADDRESS_AFFILIATOR ON ADDRESS_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR AND ADDRESS_AFFILIATOR.ACTIVE = 1
        JOIN NEIGHBORHOOD On NEIGHBORHOOD.COD_NEIGH = ADDRESS_AFFILIATOR.COD_NEIGH
        JOIN CITY ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
        JOIN [STATE] ON [STATE].COD_STATE = CITY.COD_STATE
        JOIN [COUNTRY] ON COUNTRY.COD_COUNTRY = [STATE].COD_COUNTRY
        JOIN EXTERNAL_PARTN_UP ON EXTERNAL_PARTN_UP.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR AND EXTERNAL_PARTN_UP.COD_EXT_CLI = @COD_EXT
        LEFT JOIN OPERATION_BANK ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
        LEFT JOIN OPERATION ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
        LEFT JOIN AFFILIATOR_CONTACT contact on contact.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR AND contact.ACTIVE = 1 AND (SELECT COUNT(*) FROM TYPE_CONTACT tp WHERE tp.COD_TP_CONT = contact.COD_TP_CONT AND tp.[NAME] = 'COMERCIAL') > 0
        LEFT JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = AFFILIATOR.CPF_CNPJ AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1
    WHERE AFFILIATOR.ACTIVE = 1 AND EXTERNAL_PARTN_UP.UPDATED = 0 AND COMMERCIAL_ESTABLISHMENT.CPF_CNPJ IS NULL 
END
GO








--------------------------------------
-- LIMPEZA DE PARCEIROS DUPLICADOS
--------------------------------------
DROP TABLE #temp_clear_EXTERNAL_PARTN_UP;
GO

SELECT DISTINCT PN1.COD_EXTERNAL
INTO #temp_clear_EXTERNAL_PARTN_UP
FROM EXTERNAL_PARTN_UP AS PN1 
JOIN EXTERNAL_PARTN_UP AS PN2 ON PN1.COD_EXTERNAL = PN2.COD_EXTERNAL
JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = PN1.COD_AFFILIATOR
WHERE PN1.COD_AFFILIATOR IS NOT NULL AND PN2.COD_EC IS NOT NULL AND PN1.COD_EXTERNAL IS NOT NULL
GO

UPDATE EXTERNAL_PARTN_UP SET UPDATED = 0, COD_EXTERNAL = NULL FROM EXTERNAL_PARTN_UP
	JOIN #temp_clear_EXTERNAL_PARTN_UP AS CEP ON CEP.COD_EXTERNAL = EXTERNAL_PARTN_UP.COD_EXTERNAL
	WHERE EXTERNAL_PARTN_UP.COD_EXTERNAL IS NOT NULL
GO


-----------------------------------------------
-- CONFERENCIA DE DUPLICIDADE DE PARCEIROS
--------------------------------------------
SELECT PN1.*, AFFILIATOR.NAME, PN2.COD_EC
FROM EXTERNAL_PARTN_UP AS PN1 
JOIN EXTERNAL_PARTN_UP AS PN2 ON PN1.COD_EXTERNAL = PN2.COD_EXTERNAL
JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = PN1.COD_AFFILIATOR
WHERE PN1.COD_AFFILIATOR IS NOT NULL AND PN2.COD_EC IS NOT NULL AND PN1.COD_EXTERNAL IS NOT NULL;


--ET-1108
