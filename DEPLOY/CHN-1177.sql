GO
 
--ST-1502

IF OBJECT_ID('SP_VAL_SPLIT_MULT_EC') IS NOT NULL
DROP PROCEDURE [SP_VAL_SPLIT_MULT_EC];

GO

CREATE PROCEDURE [SP_VAL_SPLIT_MULT_EC]
(    
 @COD_TRAN_PROD   INT,     
 @COD_EC          INT,     
 @QTY_PLOTS       INT,     
 @BRAND           VARCHAR(200),  
 @COD_ERROR    INT OUTPUT,  
 @ERROR_DESCRIPTION VARCHAR(100) OUTPUT,
 @COD_MODEL INT NULL
 )    
AS    
BEGIN
  
    
    
    DECLARE @PERCENT_SPLIT DECIMAL(22, 6);

SELECT
	[TRANSACTION_PRODUCTS].[COD_TRAN_PROD]
   ,[TRANSACTION_PRODUCTS].[COD_EC]
   ,[TRANSACTION_PRODUCTS].[NAME]
   ,[COMMERCIAL_ESTABLISHMENT].[ACTIVE] AS [EC_ACTIVE] INTO [#TMP_PRD]
FROM [TRANSACTION_PRODUCTS]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_PRODUCTS].[COD_EC]
WHERE [COD_TRAN_PROD] = @COD_TRAN_PROD
AND [TRANSACTION_PRODUCTS].[ACTIVE] = 1;


IF (SELECT
			COUNT(*)
		FROM [#TMP_PRD])
	<= 0
BEGIN
SET @COD_ERROR = 030;
SET @ERROR_DESCRIPTION = 'The commercial product is inactive or does not exist';
  
   
   RETURN;
  
    --THROW 60000, '000 - The commercial product is inactive or does not exist.', 1;  
 END  
    
 ELSE IF    
    ( SELECT
		COUNT(*)
	FROM [#TMP_PRD]
	WHERE [EC_ACTIVE] = 0)
> 0
BEGIN
SET @COD_ERROR = 031;
SET @ERROR_DESCRIPTION = 'Product merchant is inactive';
  
   
 --THROW 60000, '000 - Product merchant is inactive.', 1;    
  RETURN;
  
  END;
ELSE
IF (SELECT
			COUNT(*)
		FROM [ASS_EC_TRAN_PRODUCT]
		WHERE [COD_EC] = @COD_EC
		AND [COD_TRAN_PROD] = @COD_TRAN_PROD
		AND [ACTIVE] = 1)
	<= 0
BEGIN
SET @COD_ERROR = 032;
SET @ERROR_DESCRIPTION = 'The merchant is not associated with the product';
  
   
 --THROW 60000, '000 - The merchant is not associated with the product.', 1;    
    RETURN;
  
 END

SELECT
	[SPLIT_PRODUCTS].[COD_EC]
   ,[SPLIT_PRODUCTS].[PERCENTAGE]
   ,[SPLIT_PRODUCTS].[COD_TRAN_PROD]
   ,[COMMERCIAL_ESTABLISHMENT].[ACTIVE] AS [ACTIVE_EC] INTO [#TMP_SPLIT_EC]
FROM [SPLIT_PRODUCTS]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [SPLIT_PRODUCTS].[COD_EC]
WHERE [COD_TRAN_PROD] = @COD_TRAN_PROD
AND [SPLIT_PRODUCTS].[ACTIVE] = 1;

IF (SELECT
			COUNT(*)
		FROM [#TMP_SPLIT_EC]
		WHERE [ACTIVE_EC] = 1)
	<= 0
BEGIN
SET @COD_ERROR = 033;
SET @ERROR_DESCRIPTION = 'The product has no merchants for the split';
  
   
   RETURN;
  
    --THROW 60000, '000 - The product has no merchants for the split.', 1;    
 END;
ELSE
IF (SELECT
			COUNT(*)
		FROM [#TMP_SPLIT_EC]
		WHERE [ACTIVE_EC] = 0)
	> 0
BEGIN
SET @COD_ERROR = 034;
SET @ERROR_DESCRIPTION = 'One or More Merchants are inactive to split';
  
   
   RETURN;
  
 END;

ELSE

--THROW 60000, '000 - One or More Merchants are inactive to split.', 1;    

SELECT
	@PERCENT_SPLIT = SUM([PERCENTAGE])
FROM [#TMP_SPLIT_EC]
WHERE [ACTIVE_EC] = 1;

IF @PERCENT_SPLIT < 100
	OR @PERCENT_SPLIT > 100
BEGIN
SET @COD_ERROR = 035;
SET @ERROR_DESCRIPTION = 'Total percentage for split invalid';
  
   
   RETURN;
  
    --THROW 60000, '000 - Total percentage for split invalid', 1;    
    end  
    
    ELSE
SELECT
	[ASS_TAX_DEPART].[COD_ASS_TX_DEP] AS [COD_TX_MERCHANT] INTO [#TMP_TAX_SPLIT]
FROM [#TMP_SPLIT_EC] AS [TMP_SPLIT]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TMP_SPLIT].[COD_EC]
JOIN [BRANCH_EC]
	ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
JOIN [DEPARTMENTS_BRANCH]
	ON [DEPARTMENTS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
JOIN [ASS_TAX_DEPART]
	ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_TAX_DEPART].[COD_DEPTO_BRANCH]
JOIN [PLAN]
	ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
LEFT JOIN [BRAND]
	ON [BRAND].[COD_BRAND] = [ASS_TAX_DEPART].[COD_BRAND]
WHERE [TMP_SPLIT].[ACTIVE_EC] = 1
AND [ASS_TAX_DEPART].[ACTIVE] = 1
AND [ASS_TAX_DEPART].[COD_SOURCE_TRAN] = 2
AND @QTY_PLOTS BETWEEN [ASS_TAX_DEPART].[QTY_INI_PLOTS] AND [ASS_TAX_DEPART].[QTY_FINAL_PLOTS]
AND ([BRAND].[NAME] = @BRAND
OR [BRAND].[COD_BRAND] IS NULL)
AND (ASS_TAX_DEPART.COD_MODEL = @COD_MODEL
OR ASS_TAX_DEPART.COD_MODEL IS NULL);

IF (SELECT
			COUNT(*)
		FROM [#TMP_TAX_SPLIT])
	<> (SELECT
			COUNT(*)
		FROM [#TMP_SPLIT_EC]
		WHERE [ACTIVE_EC] = 1)
SET @COD_ERROR = 036;
SET @ERROR_DESCRIPTION = 'One or More Merchants don''t have plan available';
  
   
    --THROW 60000, '00 - One or More Merchants don''t have plan available', 1;    
  RETURN;
  
END;


GO
 

IF OBJECT_ID('SP_VALIDATE_TRANSACTION') IS NOT NULL
DROP PROCEDURE [SP_VALIDATE_TRANSACTION];

GO

CREATE PROCEDURE [dbo].[SP_VALIDATE_TRANSACTION]  
  
/***********************************************************************************************************************************************************************        
------------------------------------------------------------------------------------------------------------------------------------------------                              
Procedure Name: [SP_VALIDATE_TRANSACTION]                              
Project.......: TKPP                              
--------------------------------------------------------------------------------------------------------------------------------------------------                              
Author                          VERSION        Date                            Description                              
------------------------         --------------------------------------------------------------------------------------------------------------------------                              
Kennedy Alef                      V1         27/07/2018                          Creation                              
Gian Luca Dalle Cort              V1         14/08/2018                          Changed              
Lucas Aguiar                      v3         17-04-2019           Passar parâmetro opcional (CODE_SPLIT) e fazer suas respectivas inserções                
Lucas Aguiar                      v4         23-04-2019                    Parametro opc cod ec          
Kennedy Alef                      v5         12-11-2019           Card holder name, doc holder, logical number              
Caike Uchoa                       V6         26-10-2020                        ADD COD_MODEL
--------------------------------------------------------------------------------------------------------------------------------------------------        
***********************************************************************************************************************************************************************/ (@TERMINALID INT,  
@TYPETRANSACTION VARCHAR(100),  
@AMOUNT DECIMAL(22, 6),  
@QTY_PLOTS INT,  
@PAN VARCHAR(100),  
@BRAND VARCHAR(200),  
@TRCODE VARCHAR(200),  
@TERMINALDATE DATETIME,  
@CODPROD_ACQ INT,  
@TYPE VARCHAR(100),  
@COD_BRANCH INT,  
@CODE_SPLIT INT = NULL,  
@COD_EC INT = NULL,  
@HOLDER_NAME VARCHAR(100) = NULL,  
@HOLDER_DOC VARCHAR(100) = NULL,  
@LOGICAL_NUMBER VARCHAR(100) = NULL,  
@COD_TRAN_PROD INT = NULL,  
@COD_EC_PRD INT = NULL)  
AS  
BEGIN
  
  
  
  
 DECLARE @CODTX INT;
  
  
  
  
 DECLARE @CODPLAN INT;
  
  
  
  
 DECLARE @INTERVAL INT;
  
  
  
  
 DECLARE @TERMINALACTIVE INT;
  
  
  
  
 DECLARE @CODEC INT;
  
  
  
  
 DECLARE @CODASS INT;
  
  
  
  
 DECLARE @CODAC INT;
  
  
  
  
 DECLARE @COMPANY INT;
  
  
  
  
 DECLARE @BRANCH INT = 0;
  
  
  
  
 DECLARE @TYPETRAN INT;
  
  
  
  
 DECLARE @ACTIVE_EC INT;
  
  
  
  
 DECLARE @CONT INT;
  
  
  
  
 DECLARE @COD_COMP INT;
  
  
  
  
 DECLARE @LIMIT DECIMAL(22, 6);
  
  
  
  
 DECLARE @COD_AFFILIATOR INT;
  
  
  
  
 DECLARE @PLAN_AFF INT;
  
  
  
  
 DECLARE @CODTR_RETURN INT;
  
  
  
  
 DECLARE @EC_TRANS INT;
  
  
  
  
 DECLARE @GEN_TITLES INT;
  
  
  
  
 DECLARE @COD_ERROR INT;
  
  
  
 DECLARE @ERROR_DESCRIPTION VARCHAR(100)
  
  
 DECLARE @COD_RISK_SITUATION INT;
 
 
 DECLARE @COD_MODEL INT;
  
  
 BEGIN

SELECT TOP 1
	@CODTX = [ASS_TAX_DEPART].[COD_ASS_TX_DEP]
   ,@CODPLAN = [ASS_TAX_DEPART].[COD_ASS_TX_DEP]
   ,@INTERVAL = [ASS_TAX_DEPART].[INTERVAL]
   ,@TERMINALACTIVE = [EQUIPMENT].[ACTIVE]
   ,@CODEC = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
   ,@CODASS = [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL]
   ,@COMPANY = [COMPANY].[COD_COMP]
   ,@TYPETRAN = [TRANSACTION_TYPE].[COD_TTYPE]
   ,@ACTIVE_EC = [COMMERCIAL_ESTABLISHMENT].[ACTIVE]
   ,@BRANCH = [BRANCH_EC].[COD_BRANCH]
   ,@COD_COMP = [COMPANY].[COD_COMP]
   ,@LIMIT = [COMMERCIAL_ESTABLISHMENT].[TRANSACTION_LIMIT]
   ,@COD_AFFILIATOR = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
   ,@GEN_TITLES = [BRAND].[GEN_TITLES]
   ,@COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,@COD_MODEL = [EQUIPMENT_MODEL].COD_MODEL
FROM [ASS_DEPTO_EQUIP]
LEFT JOIN [EQUIPMENT]
	ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
LEFT JOIN [EQUIPMENT_MODEL]
	ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
LEFT JOIN [DEPARTMENTS_BRANCH]
	ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
LEFT JOIN [BRANCH_EC]
	ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
LEFT JOIN [DEPARTMENTS]
	ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
LEFT JOIN [COMPANY]
	ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
LEFT JOIN [ASS_TAX_DEPART]
	ON [ASS_TAX_DEPART].[COD_DEPTO_BRANCH] = [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
LEFT JOIN [TRANSACTION_TYPE]
	ON [TRANSACTION_TYPE].[COD_TTYPE] = [ASS_TAX_DEPART].[COD_TTYPE]
LEFT JOIN [BRAND]
	ON [BRAND].[COD_BRAND] = [ASS_TAX_DEPART].[COD_BRAND]
		AND [BRAND].[COD_TTYPE] = [TRANSACTION_TYPE].[COD_TTYPE]
WHERE [ASS_TAX_DEPART].[ACTIVE] = 1
AND [ASS_DEPTO_EQUIP].[ACTIVE] = 1
AND [ASS_TAX_DEPART].[COD_SOURCE_TRAN] = 2
AND [EQUIPMENT].[COD_EQUIP] = @TERMINALID
AND LOWER([TRANSACTION_TYPE].[NAME]) = @TYPETRANSACTION
AND [ASS_TAX_DEPART].[QTY_INI_PLOTS] <=
@QTY_PLOTS
AND [ASS_TAX_DEPART].[QTY_FINAL_PLOTS] >= @QTY_PLOTS
AND ([BRAND].[NAME] = @BRAND
OR [BRAND].[COD_BRAND] IS NULL)
AND ([ASS_TAX_DEPART].COD_MODEL = [EQUIPMENT_MODEL].COD_MODEL
OR [ASS_TAX_DEPART].COD_MODEL IS NULL);


IF (@COD_EC IS NOT NULL)
SET @EC_TRANS = @COD_EC;
ELSE
SET @EC_TRANS = @CODEC;


IF @AMOUNT > @LIMIT
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '402 - Transaction limit value exceeded"d'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '402', 1;

END;

IF @CODTX IS NULL

/*******************************************        
 PROCEDURE DE REGISTRO DE TRANSAÇÕES NEGADAS        
*******************************************/

BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '404 - PLAN/TAX NOT FOUND'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '404', 1;
END;

IF @COD_AFFILIATOR IS NOT NULL
BEGIN

SELECT TOP 1
	@PLAN_AFF = [COD_PLAN_TAX_AFF]
FROM [PLAN_TAX_AFFILIATOR]
INNER JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [PLAN_TAX_AFFILIATOR].[COD_AFFILIATOR]
WHERE [PLAN_TAX_AFFILIATOR].[COD_AFFILIATOR] = @COD_AFFILIATOR
AND @QTY_PLOTS BETWEEN [QTY_INI_PLOTS] AND [QTY_FINAL_PLOTS]
AND [COD_TTYPE] = @TYPETRAN
AND [PLAN_TAX_AFFILIATOR].[ACTIVE] = 1;

IF @PLAN_AFF IS NULL
BEGIN

EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '404 - PLAN/TAX NOT FOUND TO AFFILIATOR'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '404', 1;

END;

END;


IF @TERMINALACTIVE = 0

BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '003 - Blocked terminal'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '003', 1;

END;

IF @COD_RISK_SITUATION <> 2

BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '009 - Blocked commercial establishment'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '009', 1;

END;

EXEC [SP_VAL_LIMIT_EC] @CODEC
					  ,@AMOUNT
					  ,@PAN = @PAN
					  ,@BRAND = @BRAND
					  ,@CODASS_DEPTO_TERMINAL = @CODASS
					  ,@COD_TTYPE = @TYPETRAN
					  ,@PLOTS = @QTY_PLOTS
					  ,@CODTAX_ASS = @CODTX
					  ,@CODETR = @TRCODE
					  ,@TYPE = @TYPE
					  ,@TERMINALDATE = @TERMINALDATE
					  ,@COD_COMP = @COD_COMP
					  ,@COD_AFFILIATOR = @COD_AFFILIATOR
					  ,@CODE_SPLIT = @CODE_SPLIT
					  ,@EC_TRANS = @EC_TRANS
					  ,@HOLDER_NAME = @HOLDER_NAME
					  ,@HOLDER_DOC = @HOLDER_DOC
					  ,@LOGICAL_NUMBER = @LOGICAL_NUMBER
					  ,@SOURCE_TRAN = 2;



EXEC @CODAC = [SP_DEFINE_ACQ] @TR_TYPE = @TYPETRAN
							 ,@COMPANY = @COMPANY
							 ,@QTY_PLOTS = @QTY_PLOTS
							 ,@BRAND = @BRAND
							 ,@COD_PR = @CODPROD_ACQ;

IF @CODAC = 0

BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '004 - Acquirer key not found for terminal  '
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '004', 1;

END;

IF @GEN_TITLES = 0
	AND @CODE_SPLIT IS NOT NULL
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '012 - PRIVATE LABELS ESTABLISHMENTS CAN NOT HAVE SPLIT'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, '012', 1;
END;

--IF @COD_RISK_SITUATION <> 2  
--BEGIN  
-- EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT  
--         ,@PAN = @PAN  
--         ,@BRAND = @BRAND  
--         ,@CODASS_DEPTO_TERMINAL = @CODASS  
--         ,@COD_TTYPE = @TYPETRAN  
--         ,@PLOTS = @QTY_PLOTS  
--         ,@CODTAX_ASS = @CODTX  
--         ,@CODAC = NULL  
--         ,@CODETR = @TRCODE  
--         ,@COMMENT = '020 - PENDING RISK RELEASE ESTABLISHMENT'  
--         ,@TERMINALDATE = @TERMINALDATE  
--         ,@TYPE = @TYPE  
--         ,@COD_COMP = @COD_COMP  
--         ,@COD_AFFILIATOR = @COD_AFFILIATOR  
--         ,@SOURCE_TRAN = 2  
--         ,@CODE_SPLIT = @CODE_SPLIT  
--         ,@COD_EC = @EC_TRANS  
--         ,@HOLDER_NAME = @HOLDER_NAME  
--         ,@HOLDER_DOC = @HOLDER_DOC  
--         ,@LOGICAL_NUMBER = @LOGICAL_NUMBER;  
-- THROW 60002, '020', 1;  

--END  


IF @COD_TRAN_PROD IS NOT NULL
BEGIN

EXEC [SP_VAL_SPLIT_MULT_EC] @COD_TRAN_PROD = @COD_TRAN_PROD
						   ,@COD_EC = @EC_TRANS
						   ,@QTY_PLOTS = @QTY_PLOTS
						   ,@BRAND = @BRAND
						   ,@COD_ERROR = @COD_ERROR OUTPUT
						   ,@ERROR_DESCRIPTION = @ERROR_DESCRIPTION OUTPUT
						   ,@COD_MODEL = @COD_MODEL;

IF @COD_ERROR IS NOT NULL
BEGIN

EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = @ERROR_DESCRIPTION
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
THROW 60002, @COD_ERROR, 1;



END;


END;



EXECUTE [SP_REG_TRANSACTION] @AMOUNT
							,@PAN
							,@BRAND
							,@CODASS_DEPTO_TERMINAL = @CODASS
							,@COD_TTYPE = @TYPETRAN
							,@PLOTS = @QTY_PLOTS
							,@CODTAX_ASS = @CODTX
							,@CODAC = @CODAC
							,@CODETR = @TRCODE
							,@TERMINALDATE = @TERMINALDATE
							,@COD_ASS_TR_ACQ = @CODAC
							,@CODPROD_ACQ = @CODPROD_ACQ
							,@TYPE = @TYPE
							,@COD_COMP = @COD_COMP
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = 2
							,@CODE_SPLIT = @CODE_SPLIT
							,@EC_TRANS = @EC_TRANS
							,@RET_CODTRAN = @CODTR_RETURN OUTPUT
							,@HOLDER_NAME = @HOLDER_NAME
							,@HOLDER_DOC = @HOLDER_DOC
							,@LOGICAL_NUMBER = @LOGICAL_NUMBER
							,@COD_PRD = @COD_TRAN_PROD
							,@COD_EC_PRD = @COD_EC_PRD

SELECT
	@CODAC AS [ACQUIRER]
   ,@TRCODE AS [TRAN_CODE]
   ,@CODTR_RETURN AS [COD_TRAN];


END;
END;
--ST-1502  
GO

--ST-1503
GO

IF OBJECT_ID('SP_LS_ESTABLISHMENT_SERVICES') IS NOT NULL
DROP PROCEDURE [SP_LS_ESTABLISHMENT_SERVICES];

GO
CREATE PROCEDURE [dbo].[SP_LS_ESTABLISHMENT_SERVICES]  
/*----------------------------------------------------------------------------------------          
    Procedure Name: [SP_LS_ESTABLISHMENT_SERVICES]          
    Project.......: TKPP          
------------------------------------------------------------------------------------------          
    Author                   VERSION Date            Description          
------------------------------------------------------------------------------------------  
    Luiz Aquino     v1  18/12/2018     CREATE  
    Ams Corcino dos Santos  V2  27/12/2018   ALTER  
    Lucas Aguiar    v3  18-04-2019  ADD PARMETRO ALL_SERVICE  
    Luiz Aquino                 v4      24-06-2020      Add ConfigJson (ET-895 PlanDZero)  
------------------------------------------------------------------------------------------*/ 
(
@EstablishmentCode INT
)  
AS  
BEGIN
SELECT
	Item.CODE
   ,Item.[NAME]
   ,available.COD_AFFILIATOR
   ,available.COD_EC
   ,available.CREATED_AT
   ,Item.COD_ITEM_SERVICE AS ITEM_PK
   ,Item.[DESCRIPTION] AS ITEM_DESCRIPTION
   ,OPT.CODE AS CODE_OPTION
   ,OPT.DESCRIPTION
   ,available.CONFIG_JSON
   ,available.SERVICE_AMOUNT
FROM SERVICES_AVAILABLE available
JOIN ITEMS_SERVICES_AVAILABLE Item
	ON Item.COD_ITEM_SERVICE = available.COD_ITEM_SERVICE
JOIN OPTIONS_SERVICES OPT
	ON OPT.COD_OPT_SERV = available.COD_OPT_SERV
WHERE available.COD_EC = @EstablishmentCode
AND available.ACTIVE = 1
END;

--ST-1503

GO

--ST-1516


IF( SELECT
		COUNT(*)
	FROM CONTROL_ERRORS
	WHERE CODE = '61073')
= 0
INSERT INTO CONTROL_ERRORS (CODE, DESCRIPTION, DESCRIPTION_SOURCE, TYPE_ERROR, MODULE_ERROR)
	VALUES ('61073', 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 'Afiliador não pode ativar SPLIT BOLETO do EC por não ter SPLIT BOLETO ativo', 'SERVICES', 'BACKOFFICE')

GO
 

IF OBJECT_ID('SP_FD_DATA_EC') IS NOT NULL
DROP PROCEDURE SP_FD_DATA_EC;

GO
CREATE PROCEDURE SP_FD_DATA_EC  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_FD_DATA_EC]        
------------------------------------------------------------------------------------------        
Author        VERSION     Date      Description        
------------------------------------------------------------------------------------------        
Kennedy Alef  V1        2018-07-27  Creation        
Elir Ribeiro  V2        2018-11-07  Changed        
Lucas Aguiar  V3        2019-04-22  Add split        
Lucas Aguiar  V4        2019-07-01  rotina de travar agenda do ec        
Luiz Aquino   V5        2019-07-03  Is_Cerc        
Elir Ribeiro  V6        2019-10-01  changed Limit transaction monthy        
Caike Uchoa   V7        2019-10-03  add case split pelo afiliador        
Luiz Aquino   V8        2019-10-16  Add retencao de agenda        
Lucas Aguiar  V9        2019-10-28  Conta Cessao        
Marcus Gall   V10       2019-11-11  Add FK with BRANCH BUSINESS        
Marcus Gall   V11       2019-12-06  Add field HAS_CREDENTIALS        
Elir Ribeiro  V12       2020-01-08  trazendo dados meet consumer        
Elir Ribeiro  V13       2020-01-15  ajustando procedure        
Marcus Gall   V14       2020-01-22  Add Translate service        
Luiz Aquino   v15       2020-03-11  (ET-465) Add requested transaction type        
Elir Ribeiro  v16       2020-04-15  add serviço de boleto        
Elir Ribeiro  v17       2020-04-17  add split boleto        
Caike Uchôa   v18       2020-04-22  add Multi EC        
Luiz Aquino   v19       2020-05-18  ET--598 Termo de aceite        
Elir Ribeiro  v20       2020-07-18  ET- 932 Integracao Visa      
Caike uchoa   v21       2020-10-28  Correção billettax
------------------------------------------------------------------------------------------*/ 
(
@COD_EC INT
)  
AS  
BEGIN
  
  
 DECLARE @CodSpotService INT
  
  
 DECLARE @COD_SPLIT_SERVICE INT;
  
  
 DECLARE @COD_BLOCK_SITUATION INT;
  
  
 DECLARE @COD_CUSTOMERINSTALLMENT INT;
  
  
 DECLARE @CodSchRetention INT;
  
  
 DECLARE @COD_TRANSLATE_SERVICE INT;
  
 DECLARE @CodBillet INT;
  
 DECLARE @CODSPLITBILLET INT;
  
 DECLARE @COD_MULTIEC_SERVICE INT;

SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';

SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

SELECT
	@CodBillet = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'BOLETO'
AND ACTIVE = 1;

SELECT
	@CODSPLITBILLET = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT BOLETO ONLINE'
AND ACTIVE = 1;

SELECT
	@COD_BLOCK_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';

SELECT
	@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PARCELADOCLIENTE';

SELECT
	@CodSchRetention = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SCHEDULEDRETENTION';

SELECT
	@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';

SELECT
	@COD_MULTIEC_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'MULTI EC';

SELECT
	BRANCH_EC.[NAME]
   ,BRANCH_EC.TRADING_NAME
   ,COMMERCIAL_ESTABLISHMENT.CODE AS CODE_EC
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,BRANCH_EC.BIRTHDATE
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,BRANCH_EC.NOTE AS NOTE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.ACTIVE
   ,ADDRESS_BRANCH.[ADDRESS]
   ,ADDRESS_BRANCH.number AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.[NAME] AS CITY
   ,[STATE].COD_STATE
   ,[STATE].[NAME] AS [STATE]
   ,COUNTRY.COD_COUNTRY
   ,COUNTRY.[NAME] AS COUNTRY
   ,BANKS.COD_BANK AS BANK_INSIDECODE
   ,BANKS.[NAME] AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
   ,BANK_DETAILS_EC.AGENCY AS AGENCY
   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,TYPE_RECEIPT.COD_TYPE_REC
   ,TYPE_RECEIPT.CODE AS TYPE_RECEIPT
   ,CARDS_TOBRANCH.CARDNUMBER
   ,CARDS_TOBRANCH.ACCOUNTID AS 'ACCOUNTID'
   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS 'COD_CARD_BRANCH'
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS 'TRANSACTION_ONLINE'
   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN (SELECT
					SERVICES_AVAILABLE.SERVICE_AMOUNT
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
		ELSE 0
	END [BILLET_TAX]
	--  , COMMERCIAL_ESTABLISHMENT.BILLET_DEAD        
   ,CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
		ELSE 0
	END [FINANCE_BLOCK]
   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPOT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_BILLET]

   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CODSPLITBILLET
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT_BILLET]

   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1
				AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
				AND SERVICES_AVAILABLE.COD_EC IS NULL)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_CUSTOMERINSTALLMENT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SCHRETENTION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_MULTIEC_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_MULTI_EC]

   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
   ,MEET_COSTUMER.CNPJ [ACCEPTANCE]
   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) QTY_EMPLOYEES
   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AVERAGE_BILLING
   ,MEET_COSTUMER.URL_SITE
   ,MEET_COSTUMER.FACEBOOK
   ,MEET_COSTUMER.INSTAGRAM
   ,MEET_COSTUMER.STREET
   ,MEET_COSTUMER.COMPLEMENT [COMPLEMENTO]
   ,MEET_COSTUMER.ANOTHER_INFO
   ,MEET_COSTUMER.number
   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
   ,MEET_COSTUMER.CITY AS MEET_CITY
   ,MEET_COSTUMER.STATES
   ,MEET_COSTUMER.REFERENCEPOINT
   ,MEET_COSTUMER.ZIPCODE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_TRANSLATE]
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_PRESENTIAL_TRANSACTION]
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_ONLINE_TRANSACTION]
   ,COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED
   ,REQ_LANGUAGE_COMERCIAL.COD_COUNTRY
   ,REQ_LANGUAGE_COMERCIAL.COD_CURRRENCY
   ,REQ_LANGUAGE_COMERCIAL.COD_LANGUAGE
   ,rs.SITUATION_EC
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
INNER JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
INNER JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
INNER JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
INNER JOIN TYPE_RECEIPT
	ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN CARDS_TOBRANCH
	ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN BRANCH_BUSINESS
	ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
LEFT JOIN MEET_COSTUMER
	ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
LEFT JOIN REQ_LANGUAGE_COMERCIAL
	ON REQ_LANGUAGE_COMERCIAL.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND REQ_LANGUAGE_COMERCIAL.ACTIVE = 1
INNER JOIN RISK_SITUATION rs
	ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND (CARDS_TOBRANCH.COD_SITUATION = 15
OR CARDS_TOBRANCH.COD_SITUATION IS NULL)


END;


GO
 

IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
DROP PROCEDURE [SP_UP_SERVICES];

GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]  
/*----------------------------------------------------------------------------------------            
    Procedure Name: [SP_UP_SERVICES]             
    Project.......: TKPP            
------------------------------------------------------------------------------------------            
    Author    VERSION   Date   Description             
------------------------------------------------------------------------------------------             
    Caike Ucha   V1    04/09/2019  Creation             
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split             
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda             
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online                   
    Elir Ribeiro  v6    2020-04-17  addd split boleto online    
    Caike Ucha    V7    2020-04-22  add multi ec  
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero  
	Caike uchoa   v9    2020-10-27  alter planDzero
	Caike Uchoa   v10   2020-10-28  alter code error splitbillet
------------------------------------------------------------------------------------------*/ 
(
@COD_EC INT,  
@COD_AFFILIATOR INT,  
@COD_USER INT,  
@SERVICE_NAME VARCHAR(100),  
@VALUE DECIMAL(22, 6),  
@ACTIVE INT,  
@TAX_AFILIATOR DECIMAL(22, 6) = NULL,  
@BILLET_TAX DECIMAL(22, 6) = NULL,  
@VALUE_TAX_BILLET DECIMAL(22, 6) = 0,  
@CONFIG_JSON VARCHAR(512) = NULL)  
AS  
  
 DECLARE @COD_ITEM_SERVICE INT;
  
 DECLARE @ONLINE_ACTIVE INT;
  
 DECLARE @CREDENCIAL INT;

SELECT
	@CREDENCIAL = TRANSACTION_ONLINE
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
BEGIN
SELECT
	@COD_ITEM_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = @SERVICE_NAME

IF @SERVICE_NAME = 'CREDENTIALS'
BEGIN
IF (@ACTIVE = 1)
BEGIN
IF ((SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE USER_ONLINE IS NULL
		AND COD_EC = @COD_EC)
	> 0)
UPDATE COMMERCIAL_ESTABLISHMENT
SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
   ,HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
END
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 0
WHERE COD_EC = @COD_EC;
END

IF @SERVICE_NAME = 'SPOT'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE <= 0)
THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = @VALUE
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'BOLETO'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE_TAX_BILLET <= 0)
THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = @VALUE_TAX_BILLET
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61073, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
END

IF @SERVICE_NAME = 'SPLIT'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END

IF @SERVICE_NAME = 'PARCELADOCLIENTE'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
ELSE
BEGIN
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END
END;
END

IF @SERVICE_NAME = 'POSWEBDIRECT'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END;
END

IF @SERVICE_NAME = 'TRANSACTIONONLINE'
BEGIN
IF (@CREDENCIAL = 0
	AND @ACTIVE = 1)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 1
WHERE COD_EC = @COD_EC;
END
ELSE
BEGIN
IF (@CREDENCIAL = 1
	AND @ACTIVE = 0)
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 0
WHERE COD_EC = @COD_EC;
END
END
END

IF @SERVICE_NAME = 'LEDGER_RETENTION'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'MULTIEC'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'PlanDZero'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	)
THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;


IF @ACTIVE = 1
BEGIN

DECLARE @AFFCONFIG NVARCHAR(512)
DECLARE @CODBKCELER INT

SELECT
	@AFFCONFIG = CONFIG_JSON
FROM SERVICES_AVAILABLE
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC IS NULL
AND ACTIVE = 1
SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

IF EXISTS (SELECT
			COD_BANK
		FROM BANK_DETAILS_EC BDE
		JOIN BANK_DETAILS_CERC_INFO BDCI
			ON BDE.COD_BK_EC = BDCI.COD_BK_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND IS_CERC = 1
		AND END_DATE > GETDATE()
		AND BDCI.COD_SITUATION = 3)
THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
	AND NOT EXISTS (SELECT
			1
		FROM BANK_DETAILS_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND COD_BANK = @CODBKCELER)
THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) >
	CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit',
CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
  
   END
  
  
   IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) >  
    CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))  
   BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit',
CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
  
   END
  

    IF EXISTS (SELECT
		COD_ITEM_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_AFFILIATOR = @COD_AFFILIATOR
	AND COD_EC = @COD_EC
	AND ACTIVE = 1)
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = @CONFIG_JSON
   ,COD_USER = @COD_EC
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
END
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
END

IF @SERVICE_NAME = 'ApiTef'
BEGIN

IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
ELSE
BEGIN

IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE (COD_AFFILIATOR IS NULL
		OR COD_AFFILIATOR = @COD_AFFILIATOR)
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC = @COD_EC)
BEGIN

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)

END
ELSE
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 1
   ,MODIFY_DATE = GETDATE()
   ,COD_USER = @COD_USER
WHERE (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;

END
END
END
END;

--ST-1516

GO
--ST-1520

GO
 

IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
DROP PROCEDURE [SP_UP_SERVICES];

GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]  
/*----------------------------------------------------------------------------------------            
    Procedure Name: [SP_UP_SERVICES]             
    Project.......: TKPP            
------------------------------------------------------------------------------------------            
    Author    VERSION   Date   Description             
------------------------------------------------------------------------------------------             
    Caike Ucha   V1    04/09/2019  Creation             
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split             
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda             
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online                   
    Elir Ribeiro  v6    2020-04-17  addd split boleto online    
    Caike Ucha    V7    2020-04-22  add multi ec  
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero  
	Caike uchoa   v9    2020-10-27  alter planDzero
------------------------------------------------------------------------------------------*/ (@COD_EC INT,  
@COD_AFFILIATOR INT,  
@COD_USER INT,  
@SERVICE_NAME VARCHAR(100),  
@VALUE DECIMAL(22, 6),  
@ACTIVE INT,  
@TAX_AFILIATOR DECIMAL(22, 6) = NULL,  
@BILLET_TAX DECIMAL(22, 6) = NULL,  
@VALUE_TAX_BILLET DECIMAL(22, 6) = 0,  
@CONFIG_JSON VARCHAR(512) = NULL)  
AS  
  
 DECLARE @COD_ITEM_SERVICE INT;
  
 DECLARE @ONLINE_ACTIVE INT;
  
 DECLARE @CREDENCIAL INT;

SELECT
	@CREDENCIAL = TRANSACTION_ONLINE
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
BEGIN
SELECT
	@COD_ITEM_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = @SERVICE_NAME

IF @SERVICE_NAME = 'CREDENTIALS'
BEGIN
IF (@ACTIVE = 1)
BEGIN
IF ((SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE USER_ONLINE IS NULL
		AND COD_EC = @COD_EC)
	> 0)
UPDATE COMMERCIAL_ESTABLISHMENT
SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
   ,HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
END
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 0
WHERE COD_EC = @COD_EC;
END

IF @SERVICE_NAME = 'SPOT'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE <= 0)
THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = @VALUE
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'BOLETO'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE_TAX_BILLET <= 0)
THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = @VALUE_TAX_BILLET
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61073, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
END

IF @SERVICE_NAME = 'SPLIT'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END

IF @SERVICE_NAME = 'PARCELADOCLIENTE'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
ELSE
BEGIN
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END
END;
END

IF @SERVICE_NAME = 'POSWEBDIRECT'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END;
END

IF @SERVICE_NAME = 'TRANSACTIONONLINE'
BEGIN
IF (@CREDENCIAL = 0
	AND @ACTIVE = 1)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 1
WHERE COD_EC = @COD_EC;
END
ELSE
BEGIN
IF (@CREDENCIAL = 1
	AND @ACTIVE = 0)
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 0
WHERE COD_EC = @COD_EC;
END
END
END

IF @SERVICE_NAME = 'LEDGER_RETENTION'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'MULTIEC'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'PlanDZero'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	)
THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;


IF @ACTIVE = 1
BEGIN

DECLARE @AFFCONFIG NVARCHAR(512)
DECLARE @CODBKCELER INT

SELECT
	@AFFCONFIG = CONFIG_JSON
FROM SERVICES_AVAILABLE
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC IS NULL
AND ACTIVE = 1
SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

IF EXISTS (SELECT
			COD_BANK
		FROM BANK_DETAILS_EC BDE
		JOIN BANK_DETAILS_CERC_INFO BDCI
			ON BDE.COD_BK_EC = BDCI.COD_BK_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND IS_CERC = 1
		AND END_DATE > GETDATE()
		AND BDCI.COD_SITUATION = 3)
THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
	AND NOT EXISTS (SELECT
			1
		FROM BANK_DETAILS_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND COD_BANK = @CODBKCELER)
THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) >
	CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit',
CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
  
   END
  
  
   IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) >  
    CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))  
   BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit',
CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
  
   END
  

    IF EXISTS (SELECT
		COD_ITEM_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_AFFILIATOR = @COD_AFFILIATOR
	AND COD_EC = @COD_EC
	AND ACTIVE = 1)
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = @CONFIG_JSON
   ,COD_USER = @COD_EC
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
END
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
END

IF @SERVICE_NAME = 'ApiTef'
BEGIN

IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
ELSE
BEGIN

IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE (COD_AFFILIATOR IS NULL
		OR COD_AFFILIATOR = @COD_AFFILIATOR)
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC = @COD_EC)
BEGIN

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)

END
ELSE
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 1
   ,MODIFY_DATE = GETDATE()
   ,COD_USER = @COD_USER
WHERE (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;

END
END
END
END;

--ST-1520

GO

--ST-1407

GO
 

IF OBJECT_ID('SP_GW_VALIDATE_PLAN_EC_AFF_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_VALIDATE_PLAN_EC_AFF_MODEL_EQUIPMENT]

GO
CREATE PROCEDURE [dbo].[SP_GW_VALIDATE_PLAN_EC_AFF_MODEL_EQUIPMENT]  
/*----------------------------------------------------------------------------------------            
Procedure Name: [SP_GW_VALIDATE_PLAN_EC_AFF_MODEL_EQUIPMENT]            
Project.......: TKPP            
------------------------------------------------------------------------------------------            
Author                          VERSION        Date                            Description            
------------------------------------------------------------------------------------------            
Marcus Gall      V1   2020-07-13  ET-921: Handle Plan by Equipment     
Caike Uchôa      v2   2020-09-25    Correção plan_category  
Caike Uchoa      v3   2020-09-28      Return taxes         
------------------------------------------------------------------------------------------*/ 
(@TP_RATES_EC_MODEL_EQUIPMENT [TP_RATES_EC_MODEL_EQUIPMENT] READONLY)  
AS  
BEGIN

SELECT
	ITEM.INTERVAL
   ,ITEM.[PERCENTAGE]
   ,ITEM.QTY_INI_PL
   ,ITEM.QTY_FINAL_FL
   ,ITEM.ANTICIPATION
   ,ITEM.COD_TRAN_TYPE
   ,ITEM.COD_SOURCE_TRAN
   ,ITEM.COD_AFFILIATOR
   ,ITEM.COD_BRAND
   ,ITEM.COD_TYPE_PLAN
   ,ITEM.RATE
   ,ITEM.COD_MODEL INTO #TEMP_TAX_EC
FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM



DECLARE @OPT_PLAN INT;

SELECT
	@OPT_PLAN =
	CASE
		WHEN PLAN_TAX_AFFILIATOR.COD_MODEL IS NULL THEN NULL
		ELSE 0
	END
FROM PLAN_TAX_AFFILIATOR
INNER JOIN #TEMP_TAX_EC TAX
	ON TAX.COD_AFFILIATOR = PLAN_TAX_AFFILIATOR.COD_AFFILIATOR
INNER JOIN [PLAN]
	ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN
WHERE PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 2

IF (@OPT_PLAN IS NOT NULL)
BEGIN
IF (SELECT
			COUNT(*)
		FROM #TEMP_TAX_EC
		WHERE COD_SOURCE_TRAN = 2
		AND COD_MODEL IS NULL)
	> 0
THROW 89131, 'INVALID OPTION PLAN FOR THIS AFFILIATOR', 1;

END
ELSE
BEGIN

IF (SELECT
			COUNT(*)
		FROM #TEMP_TAX_EC
		WHERE COD_SOURCE_TRAN = 2
		AND COD_MODEL IS NOT NULL)
	> 0
THROW 89131, 'INVALID OPTION PLAN FOR THIS AFFILIATOR', 1;


END

SELECT
	[PLAN_TAX_AFFILIATOR].INTERVAL
   ,[PLAN_TAX_AFFILIATOR].[PERCENTAGE]
   ,[PLAN_TAX_AFFILIATOR].QTY_INI_PLOTS
   ,[PLAN_TAX_AFFILIATOR].QTY_FINAL_PLOTS
   ,[PLAN_TAX_AFFILIATOR].ANTICIPATION_PERCENTAGE
   ,[PLAN_TAX_AFFILIATOR].COD_TTYPE
   ,[PLAN_TAX_AFFILIATOR].COD_SOURCE_TRAN
   ,[PLAN_TAX_AFFILIATOR].COD_BRAND
   ,[PLAN_TAX_AFFILIATOR].RATE
   ,[PLAN_TAX_AFFILIATOR].COD_MODEL INTO #TEMP_INCORRETS_AFILIATOR
FROM [PLAN_TAX_AFFILIATOR]
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = PLAN_TAX_AFFILIATOR.COD_AFFILIATOR
JOIN BRAND
	ON BRAND.COD_BRAND = PLAN_TAX_AFFILIATOR.COD_BRAND
JOIN [PLAN]
	ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN
JOIN TYPE_PLAN
	ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN
LEFT JOIN EQUIPMENT_MODEL
	ON EQUIPMENT_MODEL.COD_MODEL = PLAN_TAX_AFFILIATOR.COD_MODEL
JOIN #TEMP_TAX_EC TAX_EC
	ON TAX_EC.COD_AFFILIATOR = PLAN_TAX_AFFILIATOR.COD_AFFILIATOR
		AND TAX_EC.COD_SOURCE_TRAN = PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN
		AND ([PLAN].COD_PLAN_OPT = 3
			OR [PLAN].COD_PLAN_OPT IS NULL)
		AND (ISNULL(TAX_EC.COD_MODEL, 0) =
		CASE
			WHEN ((PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 2 AND
				PLAN_TAX_AFFILIATOR.COD_MODEL IS NULL) OR
				(PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1)) THEN 0
			ELSE PLAN_TAX_AFFILIATOR.COD_MODEL
		END)
		AND TAX_EC.COD_BRAND = PLAN_TAX_AFFILIATOR.COD_BRAND
		--AND TAX_EC.COD_MODEL = PLAN_TAX_AFFILIATOR.COD_MODEL  
		AND (TAX_EC.QTY_INI_PL BETWEEN PLAN_TAX_AFFILIATOR.QTY_INI_PLOTS AND PLAN_TAX_AFFILIATOR.QTY_FINAL_PLOTS
			OR TAX_EC.QTY_FINAL_FL BETWEEN PLAN_TAX_AFFILIATOR.QTY_INI_PLOTS AND PLAN_TAX_AFFILIATOR.QTY_FINAL_PLOTS)
JOIN PLAN_CATEGORY
	ON PLAN_CATEGORY.COD_PLAN_CATEGORY = [PLAN].COD_PLAN_CATEGORY
		AND PLAN_CATEGORY.COD_PLAN_CATEGORY <> 3
WHERE PLAN_TAX_AFFILIATOR.ACTIVE = 1
AND ([PLAN_TAX_AFFILIATOR].[PERCENTAGE] > TAX_EC.[PERCENTAGE]
OR (TAX_EC.COD_TYPE_PLAN = 2
AND [PLAN_TAX_AFFILIATOR].ANTICIPATION_PERCENTAGE > TAX_EC.ANTICIPATION)
OR (TYPE_PLAN.COD_T_PLAN = 2
AND [PLAN_TAX_AFFILIATOR].INTERVAL > TAX_EC.INTERVAL)
OR [PLAN_TAX_AFFILIATOR].RATE > TAX_EC.RATE)



IF (SELECT
			COUNT(*)
		FROM #TEMP_INCORRETS_AFILIATOR)
	> 0
BEGIN

SELECT
	#TEMP_INCORRETS_AFILIATOR.INTERVAL
   ,#TEMP_INCORRETS_AFILIATOR.[PERCENTAGE]
   ,#TEMP_INCORRETS_AFILIATOR.QTY_INI_PLOTS
   ,#TEMP_INCORRETS_AFILIATOR.QTY_FINAL_PLOTS
   ,#TEMP_INCORRETS_AFILIATOR.ANTICIPATION_PERCENTAGE
   ,TRAN_TYPE_EC.CODE AS TRAN_TYPE
   ,SOURCE_TRAN_EC.CODE AS SOURCE_TRAN
   ,BRAND_EC.[GROUP] AS [BRAND_GROUP]
   ,#TEMP_INCORRETS_AFILIATOR.RATE
   ,EQUIP_MODEL_EC.CODIGO AS MODEL_EQUIP
FROM #TEMP_INCORRETS_AFILIATOR
JOIN BRAND BRAND_EC
	ON BRAND_EC.COD_BRAND = #TEMP_INCORRETS_AFILIATOR.COD_BRAND
JOIN SOURCE_TRANSACTION SOURCE_TRAN_EC
	ON SOURCE_TRAN_EC.COD_SOURCE_TRAN = #TEMP_INCORRETS_AFILIATOR.COD_SOURCE_TRAN
JOIN TRANSACTION_TYPE TRAN_TYPE_EC
	ON TRAN_TYPE_EC.COD_TTYPE = #TEMP_INCORRETS_AFILIATOR.COD_TTYPE
LEFT JOIN EQUIPMENT_MODEL EQUIP_MODEL_EC
	ON EQUIP_MODEL_EC.COD_MODEL = #TEMP_INCORRETS_AFILIATOR.COD_MODEL



END

END


GO

IF OBJECT_ID('SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT];

GO
CREATE PROCEDURE [dbo].[SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Marcus Gall                         V1      2020-07-13          ET-921: Handle Plan by Equipment  
Caike Uchoa                         v2      2020-10-16                       return cod_plan
------------------------------------------------------------------------------------------*/ 
(
@TP_RATES_EC_MODEL_EQUIPMENT [TP_RATES_EC_MODEL_EQUIPMENT] READONLY,  
@COD_EC INT,  
@COD_T_PLAN VARCHAR(100) = NULL)  
AS  
BEGIN
  
  
 DECLARE @COD_DEPTO_BRANCH INT;
  
  
 DECLARE @COD_USER INT;
  
  
 DECLARE @COD_AFFILIATOR INT;
  
  
 DECLARE @QTD_TAX INT;
  
  
 DECLARE @COUNT_TAX_EQUALS INT;
  
  
 DECLARE @_COD_PLAN INT;
  
  
 DECLARE @COD_T_PLAN_INS INT = 0;

SELECT
	@COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
   ,@QTD_TAX = COUNT(*)
   ,@_COD_PLAN = ASS_TAX_DEPART.COD_PLAN
FROM ASS_TAX_DEPART
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND ASS_TAX_DEPART.ACTIVE = 1
GROUP BY ASS_TAX_DEPART.COD_DEPTO_BRANCH
		,ASS_TAX_DEPART.COD_PLAN


SET @COD_T_PLAN_INS = (SELECT
		CASE
			WHEN @COD_T_PLAN = 'PARCELADO' THEN 1
			WHEN @COD_T_PLAN = 'AGRUPADO' THEN 2
			ELSE NULL
		END);

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
AND ACTIVE = 1;

SELECT
	@COD_USER = COD_USER_INT
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @COD_AFFILIATOR;

INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_DEPTO_BRANCH,
COD_USER,
EFFECTIVE_PERCENTAGE,
COD_MODEL)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,@_COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,@COD_DEPTO_BRANCH
	   ,@COD_USER
	   ,0
	   ,ITEM.COD_MODEL
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE DEPARTMENTS_BRANCH
SET COD_T_PLAN = ISNULL(@COD_T_PLAN_INS, COD_T_PLAN)
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH

SELECT
	@_COD_PLAN AS COD_PLAN

END;

GO

--ST-1407


GO

--SD-22

GO

GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_USER_MODIFY'
	AND object_id = OBJECT_ID(N'ACCESS_APPAPI'))
BEGIN

ALTER TABLE ACCESS_APPAPI ADD COD_USER_MODIFY INT

END


GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'CREATED_AT'
	AND object_id = OBJECT_ID(N'ACCESS_APPAPI'))
BEGIN

ALTER TABLE ACCESS_APPAPI ADD CREATED_AT DATETIME

END


GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'MODIFY_DATE'
	AND object_id = OBJECT_ID(N'ACCESS_APPAPI'))
BEGIN

ALTER TABLE ACCESS_APPAPI ADD MODIFY_DATE DATETIME

END


GO
 

IF OBJECT_ID('SP_REG_ACCESS_APPAPI') IS NOT NULL
DROP PROCEDURE [SP_REG_ACCESS_APPAPI];

GO
 

CREATE PROCEDURE [dbo].[SP_REG_ACCESS_APPAPI]  
/*----------------------------------------------------------------------------------------      
Procedure Name: [SP_REG_ACCESS_APPAPI]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                            VERSION        Date                          Description      
------------------------------------------------------------------------------------------      
Fernando Henrique Francesco de O    V1        23/08/2018                      CREATION      
Caike Uchôa                         V2        26/08/2020                     add user aff  
Caike Uchoa                         V3        21/10/2020                     Add created_at 
------------------------------------------------------------------------------------------*/ 
(
@APPNAME VARCHAR(255),  
@CLIENT_ID VARCHAR(255),  
@NAME VARCHAR(255),  
@CODCOMP INT,  
@CODAFFILIATOR INT)  
AS  
 DECLARE @COUNT INT;
  
  
 BEGIN
SET @COUNT = 0;
SELECT
	@COUNT = COUNT(*)
FROM ACCESS_APPAPI
WHERE APPNAME = @APPNAME;

IF @COUNT > 0
THROW 61005, 'ACCESS_APP ALREADY REGISTERED', 1;

IF (SELECT
			COUNT(*)
		FROM USERS
		WHERE COD_AFFILIATOR = @CODAFFILIATOR
		AND COD_MODULE IS NULL
		AND ACTIVE = 1)
	= 0
BEGIN
INSERT INTO USERS (COD_ACCESS, IDENTIFICATION, ACTIVE, FIRST_LOGIN, COD_AFFILIATOR)
	SELECT
		CONCAT('INTEGRACAO_', CPF_CNPJ)
	   ,CONCAT('API -', [NAME])
	   ,1
	   ,1
	   ,AFFILIATOR.COD_AFFILIATOR
	FROM AFFILIATOR
	WHERE COD_AFFILIATOR = @CODAFFILIATOR
	AND ACTIVE = 1
END

BEGIN
INSERT INTO ACCESS_APPAPI (APPNAME,
CLIENT_ID,
NAME,
SECRETKEY,
COD_COMP,
COD_AFFILIATOR,
COD_USER_INT,
CREATED_AT)
	VALUES (@APPNAME, @CLIENT_ID, @NAME, NULL, @CODCOMP, @CODAFFILIATOR, (SELECT TOP 1 COD_USER FROM USERS WHERE COD_AFFILIATOR = @CODAFFILIATOR AND COD_MODULE IS NULL AND ACTIVE = 1), CURRENT_TIMESTAMP);
END

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [ACCESS_APP] ', 1;

SELECT
	@@identity AS COD_ACCESS_APP
END;


GO
 

IF OBJECT_ID('SP_REG_ACCESS_NOTIFICATION_AFF') IS NOT NULL
DROP PROCEDURE [SP_REG_ACCESS_NOTIFICATION_AFF];

GO
CREATE PROCEDURE [SP_REG_ACCESS_NOTIFICATION_AFF]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_REG_ACCESS_NOTIFICATION_AFF]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION      Date                            Description        
------------------------------------------------------------------------------------------        
Lucas Aguiar                       V1      2019-08-23                          Creation        
Caike Uchôa                        v2      2020-08-25                       add user aff  
Caike Uchoa                        V3      21/10/2020                Add cod_user_modify, created_at e modify_date
------------------------------------------------------------------------------------------*/ 
(
@COD_AFF INT,  
@SECRETKEY VARCHAR(255),  
@CLIENTID VARCHAR(255),
@COD_USER_MODIFY INT NULL
)  
AS  
  
 DECLARE @COD_ACCESS INT = NULL;
  
  
 BEGIN

SELECT
	@COD_ACCESS = COD_ACCESS_APP
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @COD_AFF
AND ACCESS_APPAPI.ACTIVE = 1;

IF @COD_ACCESS IS NOT NULL
UPDATE ACCESS_APPAPI
SET ACTIVE = 0
   ,COD_USER_MODIFY = @COD_USER_MODIFY
   ,MODIFY_DATE = CURRENT_TIMESTAMP
WHERE COD_ACCESS_APP = @COD_ACCESS;


IF (SELECT
			COUNT(*)
		FROM USERS
		WHERE COD_AFFILIATOR = @COD_AFF
		AND COD_MODULE IS NULL
		AND ACTIVE = 1)
	= 0
BEGIN
INSERT INTO USERS (COD_ACCESS, IDENTIFICATION, ACTIVE, FIRST_LOGIN, COD_AFFILIATOR)
	SELECT
		CONCAT('INTEGRACAO_', CPF_CNPJ)
	   ,CONCAT('API -', [NAME])
	   ,1
	   ,1
	   ,AFFILIATOR.COD_AFFILIATOR
	FROM AFFILIATOR
	WHERE COD_AFFILIATOR = @COD_AFF
	AND ACTIVE = 1
END

INSERT INTO ACCESS_APPAPI (APPNAME, CLIENT_ID, [NAME], COD_COMP, SECRETKEY, COD_AFFILIATOR, CLAIMS, COD_USER_INT, CREATED_AT, COD_USER_MODIFY)
	SELECT
		AFFILIATOR.[NAME] [APPNAME]
	   ,@CLIENTID
	   ,AFFILIATOR.[NAME] [NAME]
	   ,AFFILIATOR.COD_COMP
	   ,@SECRETKEY
	   ,@COD_AFF
	   ,'0.0'
	   ,(SELECT TOP 1
				COD_USER
			FROM USERS
			WHERE COD_AFFILIATOR = @COD_AFF
			AND COD_MODULE IS NULL
			AND ACTIVE = 1)
	   ,CURRENT_TIMESTAMP
	   ,@COD_USER_MODIFY
	FROM AFFILIATOR
	WHERE COD_AFFILIATOR = @COD_AFF


IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ACCESS_APPAPI', 1;

END;


GO
 

IF OBJECT_ID('SP_REG_AFFILIATOR') IS NOT NULL
DROP PROCEDURE [SP_REG_AFFILIATOR];

GO
 
CREATE PROCEDURE [dbo].[SP_REG_AFFILIATOR]                                                                                            
 /*----------------------------------------------------------------------------------------                                                    
 Procedure Name: SP_REG_AFFILIATOR                                                    
 Project.......: TKPP                                                    
 ------------------------------------------------------------------------------------------                                                    
 Author                          VERSION        Date              Description                                                    
 ------------------------------------------------------------------------------------------                                                    
 Gian Luca Dalle Cort              V1          31/07/2018          CREATION                                                    
 Gian Luca Dalle Cort              V2          31/07/2018          CHANGE                                                    
 Kennedy Alef de Oliveira          V3          25/08/2018          CHANGE                                               
 Elir  Ribeiro                     V4          31/08/2018          CHANGE                                
 Luiz Aquino                       v5          13/12/2018     INCLUDE HAS_SPOT AND SPOT_TAX                                
 Lucas Aguiar                      v6          14/12/2018     Add  TRANSACTION_DIGITED                                
 Elir Ribeiro                      v7          21/03/2019     changed COD_COMP,CODUSER                            
 Lucas Aguiar                      v8          2019-04-17     Add Split service                             
 Lucas Aguiar                      v9          2019-08-28     Add serviço do notification                            
 Elir Ribeiro                      v10         20200-01-21    add contracts affiliator                           
 Elir Ribeiro                      v11         2020-01-22     add propposed number                       
 Elir Ribeiro                      v12         2020-01-23     add documents                
 Elir Ribeiro                      v13         2020-01-29     add description in documents              
 Caike Uchôa                       v10         20/02/2019     Add service Afiliator operation   
 Caike Uchoa                       V3          21/10/2020     Add cod_user_modify, created_at e modify_date
 ------------------------------------------------------------------------------------------*/                                
(                                                
-- INFO BASE                                              
  @COD_COMP INT,                                                    
  @NAME VARCHAR(100),                                                            
  @CPF_CNPJ VARCHAR(14),                                                     
  @COD_USER_CAD INT,                                                    
  @FIREBASE_NAME VARCHAR(100) = NULL,                                                    
  @COD_USER_ALT INT,                                           
 -- ADDRESS                                          
  @ADDRESS VARCHAR(250),                                                    
  @NUMBER VARCHAR(50),                                                    
  @COMPLEMENT VARCHAR(400) = NULL,                                                    
  @CEP VARCHAR(80),                                                    
  @COD_NEIGH INT,                                                    
  @REFERENCE_POINT VARCHAR(200) = NULL,                                             
 ----- CONTACT                                                 
 @CELL_NUMBER VARCHAR(30),                                                     
 @COD_TP_CONT INT,                                                    
 @COD_OPER INT,                                                    
 @DDI VARCHAR(20),                                                    
 @DDD VARCHAR(20),                                    
 -- SUBDOMAIN      
 @SUBDOMAIN varchar(100),                                                
 -- PLAN                                    
 @COD_PLAN [CODE_TYPE] READONLY,                                            
 -- THEME                                          
  @LOGO_AFFILIATE VARCHAR(400),                                              
  @LOGO_HEADER_AFFILIATE VARCHAR(400),                                                
  @COLOR_HEADER VARCHAR(400) = NULL,                                              
  @BACKGROUND_IMAGE VARCHAR(400) = NULL,                                              
  @SECONDARY_COLOR VARCHAR(400) = NULL ,                                          
  @CSS_FILE VARCHAR(100) = NULL,           
  @PROGRESSIVE_COST INT,                                          
 -- BANK DETAILS                                              
 @AGENCY VARCHAR(100) = NULL,                                            
 @DIGIT VARCHAR(100) = NULL,                         
 @ACCOUNT VARCHAR(100)= NULL,                                           
 @DIGIT_ACCOUNT VARCHAR(100)= NULL,                                           
 @BANK INT = NULL,                  
 @ACCOUNT_TYPE INT = NULL,                                
--SPOT                                
 @HAS_SPOT INT = 0,                                
 @SPOT_TAX DECIMAL(6,2)= 0,                            
--SPLIT                            
 @HAS_SPLIT INT = 0,                              
 @SPLIT INT = 0,                            
 --Notification Afiliador                            
 @HAS_NOTIFICATION INT = 0,                            
 @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,                            
 @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,                          
 @PLATFORM_NAME VARCHAR(100) = NULL,                          
 @COMPANY_NAME VARCHAR(100) = NULL,                          
 @STATE_REGISTRATION VARCHAR(100) = NULL,                          
 @MUNICIPAL_REGISTRATION VARCHAR(100) = NULL ,                          
 @TYPECONTRACTS INT = NULL,                          
 @CONTROLNUMBER VARCHAR (100) = NULL,                          
 @DESCRIPTION VARCHAR(100) = NULL ,                      
 @PROPOSED_NUMBER varchar(100) = NULL,                          
 @NAME_CONTACT VARCHAR(100) = NULL,                    
 @MAIL_CONTACT VARCHAR(100) = NULL,                  
 @DOCUMENTS VARCHAR(100) = NULL,               
 @DESCRIPTION_DOCUMENT VARCHAR(200) = NULL,                 
 @CONTRACTS VARCHAR(100) = NULL,                
 @TYPEDOCS int = NULL,      
 @OPERATION_AFF INT,      
 -- Translate Service          
 @HAS_TRANSLATION INT = 0                              
)                                                    
AS                                
                                                    
DECLARE @SEQ INT;
  
        
          
                             
DECLARE @IDAFL INT;
  
        
          
                            
DECLARE @CONT INT;
  
        
          
                             
DECLARE @PROG INT;
  
        
          
                             
DECLARE @COD_SPLIT INT;
  
        
          
                            
DECLARE @cod_plan_int int;
  
        
          
                            
DECLARE @COD_GWNOTIFICATION INT;
  
        
         
            
DECLARE @COD_TRANSLATE INT;
  
        
          
         
                              
                            
BEGIN


(SELECT
	@cod_plan_int = CODE
FROM @COD_PLAN);
SELECT
	@CONT = COUNT(*)
FROM AFFILIATOR
WHERE CPF_CNPJ = @CPF_CNPJ

IF @CONT > 0
THROW 61002, 'AFILIADOR Já CADASTRADO', 1;

SET @SEQ = NEXT VALUE FOR [SEQ_AFLCODE];

SELECT
	@COD_GWNOTIFICATION = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

SELECT
	@COD_TRANSLATE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';
/********************** REGISTER AFFILIATOR ****************/

INSERT INTO AFFILIATOR (COD_COMP,
NAME,
CREATED_AT,
ACTIVE,
CODE,
CPF_CNPJ,
COD_USER_CAD,
FIREBASE_NAME,
MODIFY_DATE,
COD_USER_ALT,
SUBDOMAIN,
COD_OPER_COST,
--HAS_SPOT,                                
SPOT_TAX,
COD_SITUATION,
PLATFORM_NAME,
COMPANY_NAME,
STATE_REGISTRATION,
MUNICIPAL_REGISTRATION,
PROPOSED_NUMBER,
OPERATION_AFF)
	VALUES (@COD_COMP, @NAME, current_timestamp, 1, @SEQ, @CPF_CNPJ, @COD_USER_CAD, @FIREBASE_NAME, current_timestamp, @COD_USER_ALT, @SUBDOMAIN, (SELECT TOP 1 COD_OPER_COST FROM OPERATION_COST WHERE COD_COMP = @COD_COMP AND ACTIVE = 1), @SPOT_TAX, (SELECT COD_SITUATION FROM SITUATION WHERE [NAME] = 'RELEASED'), @PLATFORM_NAME, @COMPANY_NAME, @STATE_REGISTRATION, @MUNICIPAL_REGISTRATION, @PROPOSED_NUMBER, @OPERATION_AFF);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER AFFILIATOR', 1;

SET @IDAFL = @@identity;
  
        
          
                            
                                
                                
 IF @HAS_SPOT = 1                                
 BEGIN
  
        
          
                            
                 
                                
 DECLARE @CodSpotService INT
SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1'

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_CAD, @CodSpotService, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)

END

IF @HAS_SPLIT = 1
BEGIN
SELECT
	@COD_SPLIT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (current_timestamp, @COD_USER_CAD, @COD_SPLIT, @COD_COMP, @IDAFL, NULL, 1, current_timestamp, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE CODE = @SPLIT))
END;

/************ UPDATE TRANSLATE SERVICE **********/
IF @HAS_TRANSLATION = 1
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)
END;
/************ UPDATE NOTIFICATION AFFILIATED **********/

IF @HAS_NOTIFICATION = 0
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @IDAFL
AND COD_EC IS NULL;

UPDATE ACCESS_APPAPI
SET ACTIVE = 0
   ,COD_USER_MODIFY = @COD_USER_ALT
   ,MODIFY_DATE = CURRENT_TIMESTAMP
WHERE COD_AFFILIATOR = @IDAFL
AND ACTIVE = 1
END
ELSE
IF @HAS_NOTIFICATION = 1
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @IDAFL
AND COD_EC IS NULL;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)

EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @IDAFL
									 ,@PASSWORD_NOTIFICATION
									 ,@CLIENTID_NOTIFICATION
									 ,@COD_USER_ALT;

END



/************ REGISTER PROGRESSIVEE COST AFFILIATOR **********/

INSERT INTO PROGRESSIVE_COST_AFFILIATOR (COD_AFFILIATOR,
COD_PROG_COST,
COD_TYPE_PROG,
COD_USER)
	SELECT
		@IDAFL
	   ,COD_PROG_COST
	   ,COD_TYPE_PROG
	   ,@COD_USER_CAD
	FROM PROGRESSIVE_COST
	WHERE COD_COMP = @COD_COMP
	AND ACTIVE = 1
	AND COD_TYPE_PROG = @PROGRESSIVE_COST

SET @PROG = @@identity;

INSERT INTO ITENS_PROG_COST_AFF (COD_PROG_COST_AF,
QTY_INITIAL,
QTY_FINAL,
FIX_COST,
ADITIONAL_COST)
	SELECT
		@PROG
	   ,ITENS_PROG_COST.QTY_INITIAL
	   ,ITENS_PROG_COST.QTY_FINAL
	   ,ITENS_PROG_COST.FIX_COST
	   ,ITENS_PROG_COST.ADITIONAL_COST
	FROM ITENS_PROG_COST
	INNER JOIN PROGRESSIVE_COST
		ON PROGRESSIVE_COST.COD_PROG_COST = ITENS_PROG_COST.COD_PROG_COST
	WHERE COD_COMP = @COD_COMP
	AND PROGRESSIVE_COST.ACTIVE = 1
	AND ITENS_PROG_COST.ACTIVE = 1
	AND COD_TYPE_PROG = @PROGRESSIVE_COST


/* ******************* ADDRESS AFFILIATOR *****************************/


UPDATE ADDRESS_AFFILIATOR
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND COD_AFFILIATOR = @IDAFL;

INSERT INTO ADDRESS_AFFILIATOR (COD_AFFILIATOR,
CREATED_AT,
COD_USER_CAD,
ADDRESS,
number,
COMPLEMENT,
CEP,
COD_NEIGH,
ACTIVE,
MODIFY_DATE,
COD_USER_ALT,
REFERENCE_POINT)
	VALUES (@IDAFL, current_timestamp, @COD_USER_CAD, @ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, 1, current_timestamp, @COD_USER_ALT, @REFERENCE_POINT);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ADDRESS_AFFILIATOR ', 1;

/************************* AFFILIATOR CONTACT ***************************/

INSERT INTO AFFILIATOR_CONTACT (COD_AFFILIATOR,
CREATED_AT,
COD_USER_CAD,
number,
COD_TP_CONT,
COD_OPER,
MODIFY_DATE,
COD_USER_ALT,
DDI,
DDD,
ACTIVE,
NAME,
MAIL)
	VALUES (@IDAFL, current_timestamp, @COD_USER_CAD, @CELL_NUMBER, @COD_TP_CONT, @COD_OPER, current_timestamp, @COD_USER_ALT, @DDI, @DDD, 1, @NAME_CONTACT, @MAIL_CONTACT);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER AFFILIATOR_CONTACT ', 1;

/**********  UPDATE AND REGISTER THEMES ****************/

UPDATE THEMES
SET ACTIVE = 0
   ,MODIFY_DATE = current_timestamp
   ,COD_USER_ALT = @COD_USER_CAD
WHERE COD_AFFILIATOR = @IDAFL
AND ACTIVE = 1;


INSERT INTO THEMES (CREATED_AT,
LOGO_AFFILIATE,
LOGO_HEADER_AFFILIATE,
COD_AFFILIATOR,
COLOR_HEADER,
ACTIVE,
COD_USER_CAD,
BACKGROUND_IMAGE,
SECONDARY_COLOR)
	VALUES (current_timestamp, @LOGO_AFFILIATE, @LOGO_HEADER_AFFILIATE, @IDAFL, @COLOR_HEADER, 1, @COD_USER_CAD, @BACKGROUND_IMAGE, @SECONDARY_COLOR);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER THEMES ', 1;


/********************** BANK DETAILS **********************/

INSERT INTO BANK_DETAILS_EC (AGENCY,
DIGIT_AGENCY,
COD_TYPE_ACCOUNT,
COD_BANK,
ACCOUNT,
DIGIT_ACCOUNT,
COD_USER,
COD_OPER_BANK,
COD_AFFILIATOR)
	VALUES (@AGENCY, @DIGIT, @ACCOUNT_TYPE, @BANK, @ACCOUNT, @DIGIT_ACCOUNT, @COD_USER_CAD, @COD_OPER, @IDAFL)

INSERT INTO CONTRACTS_AFFILIATOR (TYPECONTRACTS, CONTROLNUMBER, DESCRIPTION, COD_USER_CREATE, CREATED_AT, ACTIVE, CONTRACTS, COD_AFFILIATOR)
	VALUES (@TYPECONTRACTS, @CONTROLNUMBER, @DESCRIPTION, @COD_USER_CAD, current_timestamp, 1, @CONTRACTS, @IDAFL)

INSERT INTO DOCS_AFFILIATOR (DOCUMENTS, COD_USER_CREATE, CREATED_AT, ACTIVE, COD_AFFILIATOR, COD_TYPE_CONTRACTS, DESCRIPTION)
	VALUES (@DOCUMENTS, @COD_USER_CAD, current_timestamp, 1, @IDAFL, @TYPEDOCS, @DESCRIPTION_DOCUMENT)


/******** REGISTER TAX PLAN OF AFFILIATOR **********/

EXEC SP_ASS_AFF_PLAN @CODPLAN = @COD_PLAN
					,@COD_AFF = @IDAFL
					,@CODUSER = @COD_USER_CAD;


/******** REGISTER TAX PLAN OF AFFILIATOR **********/

EXEC SP_REG_OPER_COST_AFF @COD_AFFILIATOR = @IDAFL
						 ,@COD_COMP = @COD_COMP;

/****** REGISTER PRODUCTS UNAVAILABLE TO MODELS *****/

EXEC SP_REG_UNAVAILABLE_PRODUCT @COD_AFF = @IDAFL

SELECT
	@IDAFL AS 'COD_AFFILIATOR'
   ,@COD_COMP AS 'COD_COMP'
   ,@COD_USER_CAD AS 'CODUSER';


END;



GO
 

IF OBJECT_ID('SP_UP_CREDENTIAL_AFF') IS NOT NULL
DROP PROCEDURE [SP_UP_CREDENTIAL_AFF];

GO
  
CREATE PROCEDURE [SP_UP_CREDENTIAL_AFF]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_UP_CREDENTIAL_AFF]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION      Date                            Description        
------------------------------------------------------------------------------------------        
Lucas Aguiar                      V1         2019-08-23                        Creation        
Caike Uchôa                       V2         2020-08-25                       add user aff  
Caike Uchoa                       V3         21/10/2020           Add cod_user_modify, created_at e modify_date
------------------------------------------------------------------------------------------*/ 
(
@COD_AFF INT,  
@CLIENTID VARCHAR(255),  
@SECRETKEY VARCHAR(255),
@COD_USER_MODIFY INT 
)  
AS  
  
 DECLARE @COUNT INT = 0;
  
  
 BEGIN

SELECT
	@COUNT = COUNT(*)
FROM SERVICES_AVAILABLE
WHERE ACTIVE = 1
AND COD_ITEM_SERVICE = 6
AND COD_AFFILIATOR = @COD_AFF
AND COD_EC IS NULL;

IF @COUNT <= 0
THROW 68651, 'NO ACTIVE SERVICES TO AFFILIATOR', 1;

UPDATE ACCESS_APPAPI
SET ACTIVE = 0
   ,COD_USER_MODIFY = @COD_USER_MODIFY
   ,MODIFY_DATE = CURRENT_TIMESTAMP
WHERE COD_AFFILIATOR = @COD_AFF
AND ACTIVE = 1;

IF (SELECT
			COUNT(*)
		FROM USERS
		WHERE COD_AFFILIATOR = @COD_AFF
		AND COD_MODULE IS NULL
		AND ACTIVE = 1)
	= 0
BEGIN
INSERT INTO USERS (COD_ACCESS, IDENTIFICATION, ACTIVE, FIRST_LOGIN, COD_AFFILIATOR)
	SELECT
		CONCAT('INTEGRACAO_', CPF_CNPJ)
	   ,CONCAT('API -', [NAME])
	   ,1
	   ,1
	   ,AFFILIATOR.COD_AFFILIATOR
	FROM AFFILIATOR
	WHERE COD_AFFILIATOR = @COD_AFF
	AND ACTIVE = 1
END

INSERT INTO ACCESS_APPAPI (APPNAME, CLIENT_ID, [NAME], COD_COMP, SECRETKEY, COD_AFFILIATOR, CLAIMS, COD_USER_INT, CREATED_AT, COD_USER_MODIFY)
	SELECT
		AFFILIATOR.[NAME] [APPNAME]
	   ,@CLIENTID
	   ,AFFILIATOR.[NAME] [NAME]
	   ,AFFILIATOR.COD_COMP
	   ,@SECRETKEY
	   ,@COD_AFF
	   ,'0.0'
	   ,(SELECT TOP 1
				COD_USER
			FROM USERS
			WHERE COD_AFFILIATOR = @COD_AFF
			AND COD_MODULE IS NULL
			AND ACTIVE = 1)
	   ,CURRENT_TIMESTAMP
	   ,@COD_USER_MODIFY
	FROM AFFILIATOR
	WHERE COD_AFFILIATOR = @COD_AFF

END;


GO
 

IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL
DROP PROCEDURE [SP_UPDATE_SERVICES_AFFILIATOR];

GO

CREATE PROCEDURE [dbo].[SP_UPDATE_SERVICES_AFFILIATOR]  
/*----------------------------------------------------------------------------------------  
    Project.......: TKPP  
------------------------------------------------------------------------------------------  
    Author          VERSION      Date              Description  
------------------------------------------------------------------------------------------  
    Caike Ucha      v1           2020-02-26        Creation  
    Elir Ribeiro    v2           2020-04-20        add service billet  
    Caike Ucha      v3           2020-04-20        add service MultiEC  
    Elir Ribeiro    v4           2020-04-22        alter proc  
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento  
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero  
    Luiz Aquino     V7           2020-09-24        ET-1073 TEF_GLOBAL  
	Caike Uchoa     V3           21/10/2020    Add cod_user_modify, created_at e modify_date
------------------------------------------------------------------------------------------*/ 
(
@CODAFFILIATED INT,  
@COD_COMP INT,  
@COD_USER_ALT INT,  
@SPOT_TAX DECIMAL(6, 2) = 0,  
@HAS_SPOT INT = 0,  
@SPLIT_OPT INT = 0,  
@HAS_SPLIT INT = 0,  
@HAS_NOTIFICATION INT = 0,  
@PASSWORD_NOTIFICATION VARCHAR(255) = NULL,  
@CLIENTID_NOTIFICATION VARCHAR(255) = NULL,  
@LEDGERRETENTION INT = 0,  
@LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,  
@HAS_TRANSLATION INT = 0,  
@OPERATION_AFF INT = 0,  
@HAS_BILLET INT = 0,  
@BILLET_TAX DECIMAL(6, 2) = 0,  
@HAS_SPLIT_BILLET INT = 0,  
@MULTIEC_ACTIVE INT = 0,  
@TCU_DETAILED INT = 0,  
@PLANDZERO INT = 0,  
@PlanDZeroJson VARCHAR(256) = NULL,  
@TefApiActive INT = 0,  
@TefApiJson VARCHAR(256) = NULL)  
AS  
BEGIN
  
 DECLARE @CODSPOTSERVICE INT;
  
 DECLARE @COD_SPLIT_SERVICE INT;
  
 DECLARE @COD_GWNOTIFICATION INT;
  
 DECLARE @HAS_CREDENTIAL INT = 0;
  
 DECLARE @COD_AWAITSPLIT INT = 0;
  
 DECLARE @COD_TRANSLATE INT;
  
 DECLARE @CODBILLETSERVICE INT;
  
 DECLARE @CODSPLITBILLET INT;
  
 DECLARE @COD_MULTIEC_AFFILIATOR INT;
  
 DECLARE @COD_TCU_DETAILED INT;
  
 DECLARE @COD_PLANDZERO INT;
  
 DECLARE @COD_TEF_API INT;

SELECT
	@CODSPOTSERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '1';

SELECT
	@COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'SPLIT';

SELECT
	@COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

SELECT
	@COD_AWAITSPLIT = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '8';

SELECT
	@HAS_CREDENTIAL = COUNT(*)
FROM [ACCESS_APPAPI]
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;

SELECT
	@COD_TRANSLATE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'TRANSLATE';

SELECT
	@CODBILLETSERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '12';

SELECT
	@CODSPLITBILLET = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '13';

SELECT
	@COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '14';

SELECT
	@COD_TCU_DETAILED = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '16';

SELECT
	@COD_PLANDZERO = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'PlanDZero';

SELECT
	@COD_TEF_API = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'ApiTef';

IF (@HAS_SPOT = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

IF (@HAS_SPLIT = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@HAS_SPLIT = 1
	AND @SPLIT_OPT = 1
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@MULTIEC_ACTIVE = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;

/*******************************************  
   *********** UPDATE SPOT AFFILIATED *********  
   *******************************************/

IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = 1
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	> 0
BEGIN
IF @HAS_SPOT = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF @SPOT_TAX > (SELECT
			MIN([SPOT_TAX])
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [SPOT_TAX] <> 0
		AND [ACTIVE] = 1)
THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
END;
END;
ELSE
IF @HAS_SPOT = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
END;

UPDATE AFFILIATOR
SET SPOT_TAX = @SPOT_TAX
   ,OPERATION_AFF = @OPERATION_AFF
WHERE COD_AFFILIATOR = @CODAFFILIATED;

/********************************************  
   *********** UPDATE SPLIT AFFILIATED *********  
   ********************************************/

IF (@HAS_SPLIT = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
END;

/**********************************************  
   *********** UPDATE LEDGER RETENTION ***********  
   **********************************************/

IF (@LEDGERRETENTION = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LEDGERRETENTIONCONFIG);

DECLARE @DT_FROM DATE;
DECLARE @DT_UNTIL DATE;

SELECT
	@DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
SELECT
	@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

UPDATE [LEDGER_RETENTION_CONTROL]
SET [ACTIVE] = 0
FROM [LEDGER_RETENTION_CONTROL]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
END;

/************************************************  
   *********** UPDATE TRANSLATE AFFILIATED *********  
   ************************************************/

IF @HAS_TRANSLATION = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	= 0
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
END;
END;

/***************************************************  
   *********** UPDATE NOTIFICATION AFFILIATED *********  
   ***************************************************/

IF @HAS_NOTIFICATION = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

UPDATE [ACCESS_APPAPI]
SET [ACTIVE] = 0
   ,COD_USER_MODIFY = @COD_USER_ALT
   ,MODIFY_DATE = CURRENT_TIMESTAMP
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;
END;
ELSE
IF @HAS_CREDENTIAL = 0
	AND @HAS_NOTIFICATION = 1
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);

EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
									 ,@PASSWORD_NOTIFICATION
									 ,@CLIENTID_NOTIFICATION
									 ,@COD_USER_ALT;
END

/*******************************************  
   *********** UPDATE BILLET AFFILIATED *******  
   *******************************************/

IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	> 0
BEGIN
IF @HAS_BILLET = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
IF @HAS_SPLIT_BILLET = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF @BILLET_TAX > (SELECT
			MIN([BILLET_TAX])
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [BILLET_TAX] <> 0
		AND [ACTIVE] = 1)
THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
END;
END;
ELSE
IF @HAS_BILLET = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
	VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
END;

IF @HAS_SPLIT_BILLET = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
	VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
END;

UPDATE AFFILIATOR
SET BILLET_TAX = @BILLET_TAX
WHERE COD_AFFILIATOR = @CODAFFILIATED;

/*******************************************  
   *********** UPDATE MULTIEC AFFILIATED *******  
   *******************************************/

IF (@MULTIEC_ACTIVE = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END

/*******************************************  
       *********** TCU DETAILED *******  
   *******************************************/

IF (@TCU_DETAILED = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END

/*******************************************  
       *********** Plano DZero *******  
   *******************************************/

IF @PLANDZERO = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
CONFIG_JSON)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PlanDZeroJson);
END
ELSE
BEGIN

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = @PlanDZeroJson
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL
AND [ACTIVE] = 1

DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NOT NULL
AND [ACTIVE] = 1
AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NOT NULL
AND [ACTIVE] = 1
AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

IF @CELERONLY = 'true'
BEGIN
DECLARE @CODBKCELER INT
SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

UPDATE SA
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
FROM [SERVICES_AVAILABLE] SA
JOIN BANK_DETAILS_EC BDE
	ON SA.COD_EC = BDE.COD_EC
	AND BDE.ACTIVE = 1
	AND IS_CERC = 0
	AND COD_BANK != @CODBKCELER
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
AND SA.[COD_EC] IS NOT NULL
AND SA.[ACTIVE] = 1
END
END

/*******************************************  
       *********** Plano DZero *******  
   *******************************************/

UPDATE ACCESS_TEF_API
SET ACTIVE = 0
   ,MODIFIED_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER_ALT
WHERE COD_AFFILIATOR = @CODAFFILIATED
AND ACTIVE = 1;

IF @TefApiActive = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = GETDATE()
WHERE ACTIVE = 1
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_ITEM_SERVICE] = @COD_TEF_API
AND COD_EC IS NULL;
END
ELSE
BEGIN

IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_ITEM_SERVICE] = @COD_TEF_API
		AND COD_EC IS NULL)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER_ALT, @COD_TEF_API, @COD_COMP, @CODAFFILIATED, NULL, 1, GETDATE(), 1, @TefApiJson);
END
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 1
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = GETDATE()
   ,CONFIG_JSON = @TefApiJson
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_ITEM_SERVICE] = @COD_TEF_API
AND COD_EC IS NULL;
END

SELECT
	a.CodAc
   ,a.PASSWORD INTO #Acqs
FROM OPENJSON(@TefApiJson) WITH (ACQUIRER NVARCHAR(MAX) '$.Acquirer' AS JSON) AS i
CROSS APPLY (SELECT
		*
	FROM OPENJSON(i.ACQUIRER) WITH (CodAc INT '$.CodAc', PASSWORD VARCHAR(64) '$.Password')) a

DECLARE @COD_AC INT;
DECLARE @Password VARCHAR(64);
DECLARE _ACS CURSOR FOR SELECT
	CodAc
   ,PASSWORD
FROM #Acqs;

OPEN _ACS

FETCH NEXT FROM _ACS INTO @COD_AC, @Password

WHILE @@fetch_status = 0
BEGIN
EXEC SP_CREATE_TEF_LOGIN @Password
						,@COD_AC
						,@CODAFFILIATED
						,@TefApiActive
						,@COD_USER_ALT
						,0
						,@COD_COMP

FETCH NEXT FROM _ACS INTO @COD_AC, @Password
END;

CLOSE _ACS
DEALLOCATE _ACS;
END

END;


GO
 

IF OBJECT_ID('SP_UPDATE_AFFILIATOR') IS NOT NULL
DROP PROCEDURE [SP_UPDATE_AFFILIATOR];

GO

CREATE PROCEDURE SP_UPDATE_AFFILIATOR            
/*----------------------------------------------------------------------------------------      
Procedure Name: [SP_UPDATE_AFFILIATOR]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author          VERSION       Date              Description      
------------------------------------------------------------------------------------------      
Luiz Aquino       V1       01/10/2018          Creation      
Luiz Aquino       V2       18/12/2018          Add SPOT_TAX      
Lucas Aguiar      v3       2019-04-19          add rotina de split      
Lucas Aguiar      v4       2019-07-19          Rotina de agenda bloqueada          
Lucas Aguiar      v5       2019-08-23          Add serviço de notificações    
Luiz Aquino       V6       2019-10-24          Add Serviço de retenção de agenda    
Ana Paula Liick   V7       2020-01-22          Add Serviço Tradução  
Caike Uchoa       V3       21/10/2020          Add cod_user_modify, created_at e modify_date
------------------------------------------------------------------------------------------*/      
(      
  @CODAFFILIATED INT,      
  -- INFO BASE        
  @COD_COMP INT,      
  @NAME VARCHAR(100),        
  @CPF_CNPJ VARCHAR(14),      
  @COD_USER_CAD INT,       
  @FIREBASE_NAME VARCHAR(100) = NULL,       
  @COD_USER_ALT INT,       
  @PROGRESSIVE_COST INT,       
  -- ADDRESS          
  @ADDRESS VARCHAR(250),       
  @NUMBER VARCHAR(50),      
  @COMPLEMENT VARCHAR(400) = NULL,       
  @CEP VARCHAR(80),        
  @COD_NEIGH INT,       
  @REFERENCE_POINT VARCHAR(200) = NULL,      
  -- CONTACT       
  @CELL_NUMBER VARCHAR(30),       
  @COD_TP_CONT INT,       
  @COD_OPER INT,      
  @DDI VARCHAR(20),      
  @DDD VARCHAR(20),      
  @PHONE_NUMBER VARCHAR(30) = null,       
  @PHONE_COD_TP_CONT INT = null,       
  @PHONE_COD_OPER INT = null,       
  @PHONE_DDI VARCHAR(20) = null,       
  @PHONE_DDD VARCHAR(20) = null,       
  -- SUBDOMAIN        
  @SUBDOMAIN varchar(100),      
  -- BANK DETAILS        
  @AGENCY VARCHAR(100) = NULL,       
  @DIGIT VARCHAR(100) = NULL,       
  @ACCOUNT VARCHAR(100)= NULL,       
  @DIGIT_ACCOUNT VARCHAR(100)= NULL,       
  @BANK INT = NULL,      
  @ACCOUNT_TYPE INT = NULL,      
  @SPOT_TAX DECIMAL(6,2) = 0,      
  @HAS_SPOT INT = 0,      
  @SPLIT_OPT INT = 0,      
  @HAS_SPLIT INT = 0,      
  @WAS_BLOCKED INT = NULL,      
  @NOTE_FINANCE VARCHAR(MAX) = NULL,    
    
  @HAS_NOTIFICATION INT = 0,    
  @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,    
  @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,    
  @LedgerRetention INT = 0,    
  @LedgerRetentionConfig VARCHAR(512) = NULL,  
  @HAS_TRANSLATION INT = 0  
)      
AS      
BEGIN
  
    
      
       
 DECLARE @CodSpotService INT;
  
    
      
 DECLARE @COD_SPLIT_SERVICE INT;
  
    
      
 DECLARE @COD_SITUATION INT;
  
    
      
 DECLARE @COD_GWNOTIFICATION INT;
  
 DECLARE @COD_TRANSLATE INT;
  
 DECLARE @HAS_CREDENTIAL INT = 0;
  
    
 DECLARE @COD_AwaitSplit INT = 0;

SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';

SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

SELECT
	@COD_GWNOTIFICATION = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

SELECT
	@COD_AwaitSplit = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '8';

SELECT
	@HAS_CREDENTIAL = COUNT(*)
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @CODAFFILIATED
AND ACTIVE = 1;

SELECT
	@COD_TRANSLATE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';

IF (@HAS_SPOT = 0
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @CodSpotService
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NOT NULL
		AND ACTIVE = 1)
	> 0)
THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

IF (@HAS_SPLIT = 0
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NOT NULL
		AND ACTIVE = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@HAS_SPLIT = 1
	AND @SPLIT_OPT = 1
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NOT NULL
		AND ACTIVE = 1)
	> 0
	)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

/************ UPDATE SPOT AFFILIATED **********/

IF (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = 1
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	> 0
BEGIN
IF @HAS_SPOT = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @CodSpotService
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL
END
ELSE
BEGIN
IF @SPOT_TAX > (SELECT
			MIN(SPOT_TAX)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE COD_AFFILIATOR = @CODAFFILIATED
		AND SPOT_TAX <> 0
		AND ACTIVE = 1)
THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1
END
END
ELSE
IF @HAS_SPOT = 1
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @CodSpotService, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp)
END

/************ UPDATE SPLIT AFFILIATED **********/

IF (@HAS_SPLIT = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL;
END;
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE CODE = @SPLIT_OPT))
END;

/************ UPDATE LEDGER RETENTION ************/

IF (@LedgerRetention = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_AwaitSplit
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED;
END;
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_AwaitSplit
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_AwaitSplit, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LedgerRetentionConfig)

DECLARE @DT_FROM DATE
DECLARE @DT_UNTIL DATE

SELECT
	@DT_FROM = CONVERT(DATE, JSON_VALUE(@LedgerRetentionConfig, '$.from'), 103)
SELECT
	@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LedgerRetentionConfig, '$.until'), 103)

UPDATE LEDGER_RETENTION_CONTROL
SET ACTIVE = 0
FROM LEDGER_RETENTION_CONTROL
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = LEDGER_RETENTION_CONTROL.COD_EC
WHERE COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = 1
AND LEDGER_RETENTION_CONTROL.ACTIVE = 1
AND (LEDGER_RETENTION_CONTROL.FROM_DATE < @DT_FROM
OR LEDGER_RETENTION_CONTROL.FROM_DATE > @DT_UNTIL
OR LEDGER_RETENTION_CONTROL.UNTIL_DATE > @DT_UNTIL)

END;

/************ UPDATE TRANSLATE AFFILIATED **********/

IF @HAS_TRANSLATION = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_TRANSLATE
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL;
END
ELSE
BEGIN
IF (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_TRANSLATE
		AND COD_COMP = @COD_COMP
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	= 0
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp)
END

END;


/************ UPDATE NOTIFICATION AFFILIATED **********/

IF @HAS_NOTIFICATION = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL;

UPDATE ACCESS_APPAPI
SET ACTIVE = 0
   ,COD_USER_MODIFY = @COD_USER_ALT
   ,MODIFY_DATE = CURRENT_TIMESTAMP
WHERE COD_AFFILIATOR = @CODAFFILIATED
AND ACTIVE = 1
END
ELSE
IF @HAS_CREDENTIAL = 0
	AND @HAS_NOTIFICATION = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @CODAFFILIATED
AND COD_EC IS NULL;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp)

EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
									 ,@PASSWORD_NOTIFICATION
									 ,@CLIENTID_NOTIFICATION
									 ,@COD_USER_ALT;
END


/************ UPDATE PROGRESSIVEE COST AFFILIATOR **********/

/*BLOCKED FINANCE SCHEDULE*/

IF @WAS_BLOCKED = 1
SELECT
	@COD_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';
ELSE
IF @WAS_BLOCKED = 0
SELECT
	@COD_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'RELEASED';
ELSE
SELECT
	@COD_SITUATION = COD_SITUATION
FROM AFFILIATOR
WHERE COD_AFFILIATOR = @CODAFFILIATED

/*LOGS AFFILIATOR*/

EXEC [SP_LOG_AFF_REG] @COD_USER = @COD_USER_ALT
					 ,@COD_AFF = @CODAFFILIATED;

/*AFFILIATOR*/

UPDATE AFFILIATOR
SET [NAME] = @NAME
   ,MODIFY_DATE = current_timestamp
   ,CPF_CNPJ = @CPF_CNPJ
   ,COD_USER_ALT = @COD_USER_CAD
   ,FIREBASE_NAME = @FIREBASE_NAME
   ,SUBDOMAIN = @SUBDOMAIN
   ,SPOT_TAX = @SPOT_TAX
   ,COD_SITUATION = @COD_SITUATION
   ,NOTE_FINANCE_SCHEDULE = @NOTE_FINANCE
WHERE COD_AFFILIATOR = @CODAFFILIATED


/* ******************* ADDRESS AFFILIATOR *****************************/

UPDATE ADDRESS_AFFILIATOR
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND COD_AFFILIATOR = @CODAFFILIATED;

INSERT INTO ADDRESS_AFFILIATOR (COD_AFFILIATOR, CREATED_AT, COD_USER_CAD, [ADDRESS], NUMBER, COMPLEMENT, CEP, COD_NEIGH, ACTIVE, MODIFY_DATE, COD_USER_ALT, REFERENCE_POINT)
	VALUES (@CODAFFILIATED, current_timestamp, @COD_USER_CAD, @ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, 1, current_timestamp, @COD_USER_ALT, @REFERENCE_POINT);

/************************* AFFILIATOR CONTACT ***************************/

UPDATE AFFILIATOR_CONTACT
SET ACTIVE = 0
   ,MODIFY_DATE = current_timestamp
WHERE COD_AFFILIATOR = @CODAFFILIATED
AND ACTIVE = 1

INSERT INTO AFFILIATOR_CONTACT (COD_AFFILIATOR, CREATED_AT, COD_USER_CAD, NUMBER, COD_TP_CONT, COD_OPER, MODIFY_DATE, COD_USER_ALT, DDI, DDD, ACTIVE)
	VALUES (@CODAFFILIATED, current_timestamp, @COD_USER_CAD, @CELL_NUMBER, @COD_TP_CONT, @COD_OPER, current_timestamp, @COD_USER_ALT, @DDI, @DDD, 1);


IF (@PHONE_NUMBER IS NOT NULL)
BEGIN
INSERT INTO AFFILIATOR_CONTACT (COD_AFFILIATOR, CREATED_AT, COD_USER_CAD, NUMBER, COD_TP_CONT, COD_OPER, MODIFY_DATE, COD_USER_ALT, DDI, DDD, ACTIVE)
	VALUES (@CODAFFILIATED, current_timestamp, @COD_USER_CAD, @PHONE_NUMBER, @PHONE_COD_TP_CONT, @PHONE_COD_OPER, current_timestamp, @COD_USER_ALT, @PHONE_DDI, @PHONE_DDD, 1);
END

/********************** BANK DETAILS **********************/

UPDATE BANK_DETAILS_EC
SET ACTIVE = 0
   ,MODIFY_DATE = current_timestamp
WHERE COD_AFFILIATOR = @CODAFFILIATED

INSERT INTO BANK_DETAILS_EC (AGENCY, DIGIT_AGENCY, COD_TYPE_ACCOUNT, COD_BANK, ACCOUNT, DIGIT_ACCOUNT, COD_USER, COD_OPER_BANK, COD_AFFILIATOR)
	VALUES (@AGENCY, @DIGIT, @ACCOUNT_TYPE, @BANK, @ACCOUNT, @DIGIT_ACCOUNT, @COD_USER_CAD, @COD_OPER, @CODAFFILIATED)

SELECT
	@CODAFFILIATED AS 'COD_AFFILIATOR';
END

GO

--SD-22

