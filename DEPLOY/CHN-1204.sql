
--ST-1546

GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'PROGRAM_MANAGER'
	AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN

ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
ADD PROGRAM_MANAGER VARCHAR(100)

END

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'PROGRAM_MANAGER'
	AND object_id = OBJECT_ID(N'AFFILIATOR'))
BEGIN
ALTER TABLE AFFILIATOR
ADD PROGRAM_MANAGER VARCHAR(100)
END




GO
 

IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL
DROP VIEW [VW_REPORT_FULL_CASH_FLOW];
GO
	
CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]    
    /*----------------------------------------------------------------------------------------                                                      
    View Name: [VW_REPORT_FULL_CASH_FLOW]                                                      
    Project.......: TKPP                                                      
    ----------------------------------------------------------------------------------------                                                      
    Author                          VERSION        Date                        Description                                                      
    ---------------------------------------------------------------------------------------                                                       
    Caike Uch?a                       V1         30/03/2020            mdr afiliador-pela parcela                                       
    Caike Uch?a                       V2         30/04/2020               add colunas produto ec                                
    Caike Uch?a                       V3         03/08/2020                   add QTY_DAYS_ANTECIP                              
    Caike Uch?a                       V4         20/08/2020                Corre??o val liquid afiliador         
    Luiz Aquino                       v5         01/09/2020                    Plan DZero      
    Caike Uchoa                       v6         01/09/2020                   Add cod_ec_prod      
    Caike Uchoa                       V7         04/09/2020               Add correção qtd_days quando spot      
	Caike Uchoa                       v8         10/11/2020                Add Program Manager
    ---------------------------------------------------------------------------------------*/    
AS
WITH CTE
AS
(SELECT --TOP(1000)                                                                   
		TRANSACTION_TITLES.TAX_INITIAL
	   ,TRANSACTION_TITLES.ANTICIP_PERCENT AS ANTECIP_EC
	   ,COALESCE(AFFILIATOR.[NAME], 'CELER') AS AFFILIATOR
	   ,[TRANSACTION_TYPE].CODE AS TRAN_TYPE
	   ,TRANSACTION_TITLES.PLOT
	   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME) AS TRANSACTION_DATE
	   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS MERSHANT
	   ,[TRANSACTION_TITLES].ACQ_TAX
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE
	   ,[TRANSACTION_TITLES].PREVISION_RECEIVE_DATE
	   ,[TRANSACTION_TITLES].AMOUNT
	   ,[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT
	   ,[TRANSACTION].CODE AS NSU
	   ,[TRANSACTION].BRAND AS BRAND
	   ,ACQUIRER.[NAME] AS ACQUIRER
	   ,(IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0)) AS RATE
	   ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB
	   ,COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0) AS ANTECIP_AFF
	   ,COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0) AS MDR_AFF
	   ,IIF((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		> 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, [TRANSACTION].COD_TTYPE), dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))) AS EC
	   ,0 AS '0'
	   ,(IIF((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		> 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED
		(TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, [TRANSACTION].COD_TTYPE), (dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		(
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(
		DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		) - (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))))) AS EC_TARIFF
	   ,[TRANSACTION].PLOTS AS TOTAL_PLOTS
	   ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),
		TRANSACTION_TITLES.PLOT,
		COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))) AS AFF_DISCOUNT
	   ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		(TRANSACTION_TITLES.AMOUNT),
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
		TRANSACTION_TITLES.TAX_INITIAL),
		TRANSACTION_TITLES.PLOT,
		COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,
		TRANSACTION_TITLES.ANTICIP_PERCENT)
		, (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
		)) AS AFF_DISCOUNT_TARIFF
	   ,(
		dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		(
		TRANSACTION_TITLES.AMOUNT,
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
		TRANSACTION_TITLES.TAX_INITIAL) +
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		TRANSACTION_TITLES.PLOT,
		[TRANSACTION_TITLES_COST].ANTICIP_PERCENT +
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		)
		-
		dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL + (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT + (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))
		) AS AFF
	   ,((
		dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		((TRANSACTION_TITLES.AMOUNT),
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL)
		+
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		TRANSACTION_TITLES.PLOT,
		COALESCE(
		[TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT)
		+
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
		))
		-
		dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		(TRANSACTION_TITLES.AMOUNT),
		TRANSACTION_TITLES.TAX_INITIAL
		+ (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT
		+ (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))
		)
		+ (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))
		-
		(IIF(TRANSACTION_TITLES.PLOT = 1, ISNULL([TRANSACTION_TITLES_COST].RATE_PLAN, 0), 0))
		)
		AS AFF_TARIFF
	   ,[TRANSACTION].COD_ASS_TR_COMP
	   ,TRANSACTION_TITLES.COD_TITLE
	   ,CE_DESTINY.COD_EC
	   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	   ,BRANCH_EC.COD_BRANCH
	   ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
	   ,[TRANSACTION].PAN
	   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS 'CPF_CNPJ_ORIGINATOR'
	   ,CE_DESTINY.[NAME] AS 'EC_NAME_DESTINY'
	   ,CE_DESTINY.CPF_CNPJ AS 'CPF_CNPJ_DESTINY'
	   ,AFFILIATOR.CPF_CNPJ AS 'CPF_AFF'
	   ,(SELECT
				EQUIPMENT.SERIAL
			FROM ASS_DEPTO_EQUIP
			INNER JOIN EQUIPMENT
				ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
			WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)
		AS SERIAL
	   ,[TRANSACTION_DATA_EXT].[VALUE] AS 'EXTERNAL_NSU'
	   ,[TRANSACTION].CODE
	   ,[TRANSACTION].COD_TRAN
	   ,[COMPANY].COD_COMP
	   ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN AS REP_COD_TRAN
	   ,[TRANSACTION].COD_SITUATION
	   ,dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL +
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
		, 0), 0))
		, [TRANSACTION_TITLES].AMOUNT) AS LIQUID_MDR_EC
	   ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS
		(
		COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT +
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
		, 0), 0)), 0),
		[TRANSACTION_TITLES].PLOT,
		dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		) AS ANTECIP_DISCOUNT_EC
	   ,IIF([TRANSACTION].PLOTS = 1, dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE] +
		IIF([TRANSACTION].COD_TTYPE = 2,
		TRANSACTION_TITLES_COST.TAX_PLANDZERO,
		0), TRANSACTION_TITLES.AMOUNT),
		dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], TRANSACTION_TITLES.AMOUNT)) AS LIQUID_MDR_AFF
	   ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS
		(
		COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0) +
		IIF([TRANSACTION].COD_TTYPE = 1, TRANSACTION_TITLES_COST.TAX_PLANDZERO, 0),
		[TRANSACTION_TITLES].PLOT,
		dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,
		[TRANSACTION_TITLES_COST].[PERCENTAGE]),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		) AS ANTECIP_DISCOUNT_AFF
	   ,IIF((SELECT
				COUNT(*)
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND TRANSACTION_SERVICES.COD_ITEM_SERVICE IN (4, 19))
		> 0, 1, 0) AS SPLIT
	   ,EC_TRAN.COD_EC AS COD_EC_TRANS
	   ,EC_TRAN.NAME AS TRANS_EC_NAME
	   ,EC_TRAN.CPF_CNPJ AS TRANS_EC_CPF_CNPJ
	   ,[TRANSACTION_TITLES].[ASSIGNED]
	   ,[ASSIGN_FILE_TITLE].RETAINED_AMOUNT
	   ,[ASSIGN_FILE_TITLE].[ORIGINAL_DATE]
	   ,CAST([TRANSACTION_TITLES].CREATED_AT AS DATE) TRAN_TITTLE_DATE
	   ,CAST([TRANSACTION_TITLES].CREATED_AT AS TIME) TRAN_TITTLE_TIME
	   ,(SELECT TOP 1
				[NAME]
			FROM ACQUIRER(NOLOCK)
			JOIN ASSIGN_FILE_ACQUIRE(NOLOCK) fType
				ON fType.COD_AC = ACQUIRER.COD_AC
				AND fType.COD_ASSIGN_FILE_MODEL = assignModel.COD_ASSIGN_FILE_MODEL)
		[ASSIGNEE]
	   ,(SELECT
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[TRANSACTION].CREDITOR_DOCUMENT
	   ,(SELECT
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')
		AS ORDER_CODE
	   ,TRANSACTION_TITLES.COD_SITUATION [COD_SITUATION_TITLE]
	   ,[EQUIPMENT_MODEL].CODIGO AS MODEL_POS
	   ,[SEGMENTS].[NAME] AS SEGMENT_EC
	   ,[State].UF AS STATE_EC
	   ,[CITY].[NAME] AS CITY_EC
	   ,[NEIGHBORHOOD].[NAME] AS NEIGHBORHOOD_EC
	   ,[ADDRESS_BRANCH].COD_ADDRESS
	   ,SOURCE_TRANSACTION.DESCRIPTION AS TYPE_TRAN
	   ,EC_PROD.[NAME] AS [EC_PROD]
	   ,EC_PROD.CPF_CNPJ AS [EC_PROD_CPF_CNPJ]
	   ,TRAN_PROD.[NAME] AS [NAME_PROD]
	   ,SPLIT_PROD.[PERCENTAGE] AS [PERCENT_PARTICIP_SPLIT]
	   ,[TRANSACTION_TITLES_COST].RATE_PLAN
	   ,IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP) AS QTY_DAYS_ANTECIP
	   ,IIF([TRANSACTION_TITLES].TAX_PLANDZERO IS NULL, 0, 1) AS IS_PLANDZERO
	   ,COALESCE([TRANSACTION_TITLES].TAX_PLANDZERO, 0) TAX_PLANDZERO
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION].COD_EC
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS TAX_PLANDZEROAFF
	   ,USER_REPRESENTANTE.IDENTIFICATION AS SALES_REPRESENTANTE
	   ,USER_REPRESENTANTE.CPF_CNPJ AS CPF_CNPJ_REPRESENTANTE
	   ,USER_REPRESENTANTE.EMAIL AS EMAIL_REPRESENTANTE
	   ,EC_PROD.COD_EC AS [COD_EC_PROD]
	   ,IIF((SELECT
				COUNT(*)
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			JOIN ITEMS_SERVICES_AVAILABLE ISA
				ON ISA.COD_ITEM_SERVICE = TRANSACTION_SERVICES.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND ISA.NAME = 'RECURRING')
		> 0, 1, 0) AS IS_RECURRING
	   ,AFFILIATOR.PROGRAM_MANAGER
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	INNER JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
	LEFT JOIN [TRANSACTION_TITLES_COST] WITH (NOLOCK)
		ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE
	INNER JOIN [TRANSACTION_TYPE] WITH (NOLOCK)
		ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE
	LEFT JOIN AFFILIATOR WITH (NOLOCK)
		ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
	INNER JOIN ASS_DEPTO_EQUIP WITH (NOLOCK)
		ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
	INNER JOIN DEPARTMENTS_BRANCH WITH (NOLOCK)
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	INNER JOIN DEPARTMENTS WITH (NOLOCK)
		ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
	INNER JOIN BRANCH_EC WITH (NOLOCK)
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	INNER JOIN COMMERCIAL_ESTABLISHMENT WITH (NOLOCK)
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY WITH (NOLOCK)
		ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC
	INNER JOIN PRODUCTS_ACQUIRER WITH (NOLOCK)
		ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	INNER JOIN ACQUIRER WITH (NOLOCK)
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN
	INNER JOIN [dbo].[PROCESS_BG_STATUS] WITH (NOLOCK)
		ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)
	LEFT JOIN COMPANY WITH (NOLOCK)
		ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
	LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] WITH (NOLOCK)
		ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)
	LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN WITH (NOLOCK)
		ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC
	LEFT JOIN [ASSIGN_FILE_TITLE](NOLOCK)
		ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE
		AND [ASSIGN_FILE_TITLE].ACTIVE = 1
	LEFT JOIN ASSIGN_FILE(NOLOCK)
		ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE
	LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)
		ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_FILE.COD_ASSIGN_FILE_MODEL
	INNER JOIN [EQUIPMENT] WITH (NOLOCK)
		ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
	INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL
	INNER JOIN [SEGMENTS] WITH (NOLOCK)
		ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG
	INNER JOIN [ADDRESS_BRANCH] WITH (NOLOCK)
		ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH
		AND [ADDRESS_BRANCH].ACTIVE = 1
	INNER JOIN [NEIGHBORHOOD] WITH (NOLOCK)
		ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH
	INNER JOIN [CITY] WITH (NOLOCK)
		ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY
	INNER JOIN [State] WITH (NOLOCK)
		ON [State].COD_STATE = [CITY].COD_STATE
	INNER JOIN SOURCE_TRANSACTION WITH (NOLOCK)
		ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
		AND [TRAN_PROD].ACTIVE = 1
	LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD WITH (NOLOCK)
		ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD WITH (NOLOCK)
		ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN SALES_REPRESENTATIVE
		ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
	LEFT JOIN USERS USER_REPRESENTANTE
		ON USER_REPRESENTANTE.COD_USER = SALES_REPRESENTATIVE.COD_USER
	WHERE
	--[TRANSACTION].COD_SITUATION IN (3, 6, 10)                                        
	[TRANSACTION].COD_SITUATION = 3
	AND [TRANSACTION_TITLES].COD_SITUATION != 26
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0
	AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].CREATED_AT  
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION_TITLES].CREATED_AT  
	AND DATEPART(YEAR, [TRANSACTION].CREATED_AT) = DATEPART(YEAR, GETDATE())  
	-- AND [TRANSACTION].CODE = '16050359598592041'
	AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)
SELECT
	AFFILIATOR
   ,MERSHANT
   ,SERIAL
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE
   ,CAST(TRANSACTION_DATE AS TIME) AS TRANSACTION_TIME
   ,NSU
   ,EXTERNAL_NSU
   ,TRAN_TYPE
   ,TRANSACTION_AMOUNT
   ,TOTAL_PLOTS AS QUOTA_TOTAL
   ,AMOUNT AS 'QUOTA_AMOUNT'
   ,PLOT AS QUOTA
   ,ACQUIRER
   ,ACQ_TAX AS 'MDR_ACQ'
   ,BRAND
   ,CTE.TAX_INITIAL AS 'MDR_EC'
   ,ANTECIP_EC AS 'ANTICIP_EC'
   ,MDR_AFF AS 'MDR_AFF'
   ,ANTECIP_AFF AS 'ANTICIP_AFF'
   ,LIQUID_SUB AS 'TO_RECEIVE_ACQ'
   ,CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'
   ,(LIQUID_SUB - AFF_DISCOUNT) AS 'NET_WITHOUT_FEE_SUB'
   ,RATE_PLAN AS 'FEE_AFFILIATOR'
   ,(LIQUID_SUB - AFF_DISCOUNT_TARIFF) AS 'NET_SUB'
   ,AFF AS 'NET_WITHOUT_FEE_AFF'
   ,AFF_TARIFF AS 'NET_AFF'
   ,EC AS 'MERCHANT_WITHOUT_FEE'
   ,CTE.RATE AS 'FEE_MERCHANT'
   ,EC_TARIFF AS 'MERCHANT_NET'
   ,CAST(PREVISION_PAY_DATE AS DATE) AS 'PREDICTION_PAY_DATE'
   ,IIF(TRAN_TYPE = 'CREDITO' AND
	(CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)), 1, 0) AS ANTECIPATED
   ,COD_EC
   ,CTE.COD_AFFILIATOR
   ,COD_BRANCH
   ,CTE.COD_DEPTO_BRANCH
   ,PAN
   ,CPF_CNPJ_ORIGINATOR
   ,EC_NAME_DESTINY
   ,CPF_CNPJ_DESTINY
   ,CPF_AFF
   ,CTE.CODE
   ,CTE.COD_TRAN
   ,CTE.COD_COMP
   ,CTE.REP_COD_TRAN
   ,CTE.COD_SITUATION
   ,CTE.LIQUID_MDR_EC
   ,CTE.ANTECIP_DISCOUNT_EC
   ,CTE.LIQUID_MDR_AFF
   ,CTE.ANTECIP_DISCOUNT_AFF
   ,CTE.SPLIT
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.[ASSIGNED]
   ,CTE.RETAINED_AMOUNT
   ,CTE.[ORIGINAL_DATE]
   ,CTE.[ASSIGNEE]
   ,CTE.TRAN_TITTLE_DATE
   ,CTE.TRAN_TITTLE_TIME
   ,CTE.AUTH_CODE
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.ORDER_CODE
   ,CTE.COD_TITLE
   ,CTE.[COD_SITUATION_TITLE]
   ,CTE.MODEL_POS
   ,CTE.SEGMENT_EC
   ,CTE.STATE_EC
   ,CTE.CITY_EC
   ,CTE.NEIGHBORHOOD_EC
   ,CTE.COD_ADDRESS
   ,CTE.TYPE_TRAN
   ,CTE.NAME_PROD
   ,CTE.EC_PROD
   ,CTE.EC_PROD_CPF_CNPJ
   ,CTE.PERCENT_PARTICIP_SPLIT
   ,CTE.QTY_DAYS_ANTECIP
   ,CTE.IS_PLANDZERO
   ,CTE.TAX_PLANDZERO
   ,CTE.EC_TARIFF
   ,CTE.AFF_TARIFF
   ,AFF
   ,CTE.TAX_PLANDZEROAFF
   ,CTE.SALES_REPRESENTANTE
   ,CTE.CPF_CNPJ_REPRESENTANTE
   ,CTE.EMAIL_REPRESENTANTE
   ,CTE.COD_EC_PROD
   ,CTE.IS_RECURRING
   ,CTE.PROGRAM_MANAGER
FROM CTE


GO
 

IF OBJECT_ID('SP_REG_REPORT_CONSOLIDATED_TRANS_SUB') IS NOT NULL
DROP PROCEDURE [SP_REG_REPORT_CONSOLIDATED_TRANS_SUB];
GO

  CREATE PROCEDURE [dbo].[SP_REG_REPORT_CONSOLIDATED_TRANS_SUB] WITH RECOMPILE  
/*----------------------------------------------------------------------------------------                                  
    Project.......: TKPP                                  
------------------------------------------------------------------------------------------                                  
    Author                          VERSION        Date             Description                                  
------------------------------------------------------------------------------------------                                  
    Fernando Henrique F. de O       V1              28/12/2018      Creation                                
    Fernando Henrique F. de O       V2              07/02/2019      Changed                            
    Luiz Aquino                     V3              22/02/2019      Remove Incomplete Installments                               
    Lucas Aguiar                    V4              22-04-2019      add originador e destino                           
    Caike Ucha                     V5              16/08/2019      add columns AUTH_CODE e CREDITOR_DOCUMENT                       
    Caike Ucha                     V6              11/09/2019      add column ORDER_CODE                        
    Marcus Gall                     V7              27/11/2019      Add Model_POS, Segment, Location_EC                
    Ana Paula Liick                 V8              31/01/2020      Add Origem_Trans              
    Caike Ucha                      V9              30/04/2020      add produto ec      
 Caike Uchoa                     V10             03/08/2020      add QTY_DAYS_ANTECIP      
    Caike Uchoa                     V11             06/08/2020      Add AMOUNT_NEW    
    Caike Uchoa                     V12             27/08/2020      add representante   
    Luiz Aquino                    V10            02/07/2020      PlanDZero (ET-895)        
    Caike Uchoa                     v12             01/09/2020      Add cod_ec_prod  
 	Caike Uchoa                      v8            10/11/2020        Add Program Manager
------------------------------------------------------------------------------------------*/  
AS  
 DECLARE @COUNT INT = 0;
  
 BEGIN

---------------------------------------------                                
--------------RECORDS INSERT-----------------                                
---------------------------------------------                                  
SELECT
	--TOP (1000)                    
	[VW_REPORT_FULL_CASH_FLOW].COD_TRAN
   ,[VW_REPORT_FULL_CASH_FLOW].AFFILIATOR
   ,[VW_REPORT_FULL_CASH_FLOW].MERSHANT
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_TIME
   ,[VW_REPORT_FULL_CASH_FLOW].NSU
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_TOTAL
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TYPE
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_AMOUNT AMOUNT
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_AMOUNT
   ,[VW_REPORT_FULL_CASH_FLOW].ACQUIRER
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_ACQ
   ,[VW_REPORT_FULL_CASH_FLOW].BRAND
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_EC
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_EC
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_RATE
   ,[VW_REPORT_FULL_CASH_FLOW].ANTECIPATED
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_PAY_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].TO_RECEIVE_ACQ
   ,[VW_REPORT_FULL_CASH_FLOW].NET_AFF
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_EC                                           
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF AS NET_WITHOUT_FEE_AFF_RATE
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_ACQ
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_RECEIVE_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_MERCHANT AS RATE
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_AFF, 0) AS ANTECIP_DISCOUNT_AFF
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_EC, 0) AS ANTECIP_DISCOUNT_EC
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].MDR_CURRENT_ACQ, 0) AS MDR_CURRENT_ACQ                                      
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_AFF, 0) AS LIQUID_MDR_AFF
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_AFF, 0) AS RATE_CURRENT_AFF                                 
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_CURRENT_EC                                  
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_EC, 0) AS LIQUID_MDR_EC
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_WITHOUT_FEE
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_AFFILIATOR
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_SUB
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_NET
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_ORIGINATOR AS 'CPF_EC'
   ,[VW_REPORT_FULL_CASH_FLOW].EC_NAME_DESTINY AS 'ECNAME_DESTINY'
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_DESTINY AS 'DESTINY'
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_AFF AS CPF_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].SERIAL
   ,[VW_REPORT_FULL_CASH_FLOW].EXTERNAL_NSU
   ,[VW_REPORT_FULL_CASH_FLOW].PAN
   ,[VW_REPORT_FULL_CASH_FLOW].CODE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_COMP
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC
   ,[VW_REPORT_FULL_CASH_FLOW].COD_BRANCH
   ,[VW_REPORT_FULL_CASH_FLOW].COD_DEPTO_BRANCH
   ,[VW_REPORT_FULL_CASH_FLOW].COD_AFFILIATOR
   ,[VW_REPORT_FULL_CASH_FLOW].SPLIT
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_TRANS
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_NAME
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_CPF_CNPJ
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNED]
   ,[VW_REPORT_FULL_CASH_FLOW].[RETAINED_AMOUNT]
   ,[VW_REPORT_FULL_CASH_FLOW].[ORIGINAL_DATE]
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNEE]
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_TIME
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].AUTH_CODE
   ,[VW_REPORT_FULL_CASH_FLOW].CREDITOR_DOCUMENT
   ,[VW_REPORT_FULL_CASH_FLOW].ORDER_CODE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_TITLE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION_TITLE
   ,[VW_REPORT_FULL_CASH_FLOW].MODEL_POS
   ,[VW_REPORT_FULL_CASH_FLOW].SEGMENT_EC
   ,[VW_REPORT_FULL_CASH_FLOW].STATE_EC
   ,[VW_REPORT_FULL_CASH_FLOW].CITY_EC
   ,[VW_REPORT_FULL_CASH_FLOW].NEIGHBORHOOD_EC
   ,[VW_REPORT_FULL_CASH_FLOW].COD_ADDRESS
   ,[VW_REPORT_FULL_CASH_FLOW].TYPE_TRAN
   ,[VW_REPORT_FULL_CASH_FLOW].NAME_PROD
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD_CPF_CNPJ
   ,[VW_REPORT_FULL_CASH_FLOW].PERCENT_PARTICIP_SPLIT
   ,[VW_REPORT_FULL_CASH_FLOW].IS_PLANDZERO
   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZERO
   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZEROAFF
   ,dbo.VW_REPORT_FULL_CASH_FLOW.QTY_DAYS_ANTECIP
   ,[VW_REPORT_FULL_CASH_FLOW].SALES_REPRESENTANTE
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_REPRESENTANTE
   ,[VW_REPORT_FULL_CASH_FLOW].EMAIL_REPRESENTANTE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_PROD
   ,[VW_REPORT_FULL_CASH_FLOW].IS_RECURRING
   ,[VW_REPORT_FULL_CASH_FLOW].PROGRAM_MANAGER INTO #TB_REPORT_FULL_CASH_FLOW_INSERT
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW]
ORDER BY COD_TRAN, QUOTA
OFFSET 0 ROWS FETCH FIRST 500 ROWS ONLY;

WITH TRANINFO
AS
(SELECT
		COUNT(COD_TRAN) AVAILABLE_INSTALLMENTS
	   ,COD_TRAN
	   ,QUOTA_TOTAL
	FROM #TB_REPORT_FULL_CASH_FLOW_INSERT installments
	GROUP BY COD_TRAN
			,QUOTA_TOTAL)
DELETE INSTALLMENT
	FROM #TB_REPORT_FULL_CASH_FLOW_INSERT INSTALLMENT
	JOIN TRANINFO
		ON TRANINFO.COD_TRAN = INSTALLMENT.COD_TRAN
WHERE TRANINFO.QUOTA_TOTAL > TRANINFO.AVAILABLE_INSTALLMENTS

SELECT
	@COUNT = COUNT(*)
FROM #TB_REPORT_FULL_CASH_FLOW_INSERT;

IF @COUNT > 0
BEGIN
INSERT INTO [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([COD_TRAN],
[AFFILIATOR],
[COMMERCIALESTABLISHMENT],
[TRANSACTION_DATE],
[TRANSACTION_TIME],
[NSU],
[QUOTA_TOTAL],
[TRANSACTION_TYPE],
[PLOT],
[AMOUNT],
[TRANSACTION_AMOUNT],
[ACQUIRER],
[MDR_ACQUIRER],
[BRAND],
[MDR_EC],
[ANTECIP_PERCENT],
[ANTECIP_AFFILIATOR],
[MDR_AFFILIATOR],
[LIQUID_VALUE_SUB],
[ANTECIPATED],
[PREVISION_PAY_DATE],
[TO_RECEIVE_ACQ],
[LIQUID_VALUE_AFFILIATOR],
[LIQUID_AFF_RATE],
[LIQUID_SUB_RATE],
[PREVISION_RECEIVE_DATE],
[RATE],
[ANTECIP_CURRENT_AFF],
[ANTECIP_CURRENT_EC],
[MDR_CURRENT_AFF],
[MDR_CURRENT_EC],
[LIQUID_VALUE_EC],
[FEE_AFFILIATOR],
[NET_SUB_AQUIRER],
[NET_WITHOUT_FEE_SUB],
[NET_WITHOUT_FEE_AFF], [MERCHANT_NET],
[CPF_EC],
[DESTINY],
[CPF_AFF],
[SERIAL],
[EXTERNALNSU],
[PAN],
[CODE],
[COD_COMP],
[COD_EC],
[COD_BRANCH],
[COD_DEPTO_BRANCH],
[COD_AFFILIATOR],
[COD_SITUATION],
[SPLIT],
[COD_EC_TRANS],
[TRANS_EC_NAME],
[TRANS_EC_CPF_CNPJ]
, [ASSIGNED]
, [RETAINED_AMOUNT]
, [ORIGINAL_DATE]
, [ASSIGNEE]
, [MODIFY_DATE]
, EC_NAME_DESTINY
, TRANSACTION_TITTLE_DATE
, TRANSACTION_TITTLE_TIME
, AUTH_CODE
, CREDITOR_DOCUMENT
, ORDER_CODE
, COD_TITLE
, COD_SITUATION_TITLE
, MODEL_POS
, SEGMENT_EC
, STATE_EC
, CITY_EC
, NEIGHBORHOOD_EC
, COD_ADDRESS
, TYPE_TRAN
, NAME_PROD
, EC_PROD
, EC_PROD_CPF_CNPJ
, PERCENT_PARTICIP_SPLIT
, IS_PLANDZERO
, TAX_PLANDZERO
, QTY_DAYS_ANTECIP
, TAX_PLANDZERO_AFF
, SALES_REPRESENTANTE
, CPF_CNPJ_REPRESENTANTE
, EMAIL_REPRESENTANTE
, COD_EC_PROD
, IS_RECURRING
, PROGRAM_MANAGER)
	(SELECT
		TEMP.[COD_TRAN]
	   ,TEMP.[AFFILIATOR]
	   ,TEMP.[MERSHANT]
	   ,TEMP.[TRANSACTION_DATE]
	   ,TEMP.[TRANSACTION_TIME]
	   ,TEMP.[NSU]
	   ,TEMP.[QUOTA_TOTAL]
	   ,TEMP.[TRAN_TYPE]
	   ,TEMP.[QUOTA]
	   ,TEMP.[AMOUNT]
	   ,TEMP.[TRANSACTION_AMOUNT]
	   ,TEMP.[ACQUIRER]
	   ,TEMP.[MDR_ACQ]
	   ,TEMP.[BRAND]
	   ,TEMP.[MDR_EC]
	   ,TEMP.[ANTICIP_EC]
	   ,TEMP.[ANTICIP_AFF]
	   ,TEMP.[MDR_AFF]
	   ,TEMP.[NET_SUB_RATE]
	   ,TEMP.[ANTECIPATED]
	   ,TEMP.[PREDICTION_PAY_DATE]
	   ,TEMP.[TO_RECEIVE_ACQ]
	   ,TEMP.[NET_AFF]
	   ,TEMP.[NET_WITHOUT_FEE_AFF_RATE]
	   ,TEMP.[NET_SUB_ACQ]
	   ,TEMP.[PREDICTION_RECEIVE_DATE]
	   ,TEMP.[RATE]
	   ,TEMP.[ANTECIP_DISCOUNT_AFF]
	   ,TEMP.[ANTECIP_DISCOUNT_EC]
	   ,TEMP.[LIQUID_MDR_AFF]
	   ,TEMP.[LIQUID_MDR_EC]
	   ,TEMP.[MERCHANT_WITHOUT_FEE]
	   ,TEMP.[FEE_AFFILIATOR]
	   ,TEMP.[NET_SUB]
	   ,TEMP.[NET_WITHOUT_FEE_SUB]
	   ,TEMP.[NET_WITHOUT_FEE_AFF]
	   ,TEMP.[MERCHANT_NET]
	   ,TEMP.[CPF_AFF]
	   ,TEMP.[DESTINY]
	   ,TEMP.[CPF_EC]
	   ,TEMP.[SERIAL]
	   ,TEMP.[EXTERNAL_NSU]
	   ,TEMP.[PAN]
	   ,TEMP.[CODE]
	   ,TEMP.[COD_COMP]
	   ,TEMP.[COD_EC]
	   ,TEMP.[COD_BRANCH]
	   ,TEMP.[COD_DEPTO_BRANCH]
	   ,TEMP.[COD_AFFILIATOR]
	   ,TEMP.[COD_SITUATION]
	   ,TEMP.[SPLIT]
	   ,TEMP.[COD_EC_TRANS]
	   ,TEMP.[TRANS_EC_NAME]
	   ,TEMP.[TRANS_EC_CPF_CNPJ]
	   ,TEMP.[ASSIGNED]
	   ,TEMP.[RETAINED_AMOUNT]
	   ,TEMP.[ORIGINAL_DATE]
	   ,TEMP.[ASSIGNEE]
	   ,GETDATE()
	   ,TEMP.ECNAME_DESTINY
	   ,TRAN_TITTLE_DATE
	   ,TRAN_TITTLE_TIME
	   ,TEMP.AUTH_CODE
	   ,TEMP.CREDITOR_DOCUMENT
	   ,TEMP.ORDER_CODE
	   ,TEMP.COD_TITLE
	   ,TEMP.COD_SITUATION_TITLE
	   ,TEMP.MODEL_POS
	   ,TEMP.SEGMENT_EC
	   ,TEMP.STATE_EC
	   ,TEMP.CITY_EC
	   ,TEMP.NEIGHBORHOOD_EC
	   ,TEMP.COD_ADDRESS
	   ,TEMP.TYPE_TRAN
	   ,TEMP.NAME_PROD
	   ,TEMP.EC_PROD
	   ,TEMP.EC_PROD_CPF_CNPJ
	   ,TEMP.PERCENT_PARTICIP_SPLIT
	   ,TEMP.IS_PLANDZERO
	   ,TEMP.TAX_PLANDZERO
	   ,TEMP.QTY_DAYS_ANTECIP
	   ,TEMP.TAX_PLANDZEROAFF
	   ,TEMP.SALES_REPRESENTANTE
	   ,TEMP.CPF_CNPJ_REPRESENTANTE
	   ,TEMP.EMAIL_REPRESENTANTE
	   ,TEMP.COD_EC_PROD
	   ,TEMP.IS_RECURRING
	   ,TEMP.PROGRAM_MANAGER
	FROM #TB_REPORT_FULL_CASH_FLOW_INSERT TEMP
	)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [REPORT_CONSOLIDATED_TRANS_SUB] ', 1;

UPDATE [PROCESS_BG_STATUS]
SET STATUS_PROCESSED = 1
   ,MODIFY_DATE = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_INSERT
	ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_INSERT.COD_TRAN)
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
END;

---------------------------------------------                                  
--------------RECORDS UPDATE-----------------                                  
---------------------------------------------                                    
SELECT
	[VW_REPORT_FULL_CASH_FLOW_UP].COD_TRAN
   ,[VW_REPORT_FULL_CASH_FLOW_UP].COD_SITUATION
   ,[VW_REPORT_FULL_CASH_FLOW_UP].TRANSACTION_AMOUNT INTO #TB_REPORT_FULL_CASH_FLOW_UPDATE
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW_UP]


SELECT
	@COUNT = COUNT(*)
FROM #TB_REPORT_FULL_CASH_FLOW_UPDATE;

IF @COUNT > 0
BEGIN
UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]
SET [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_SITUATION
   ,[REPORT_CONSOLIDATED_TRANS_SUB].MODIFY_DATE = GETDATE()
   ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT = #TB_REPORT_FULL_CASH_FLOW_UPDATE.TRANSACTION_AMOUNT
FROM [REPORT_CONSOLIDATED_TRANS_SUB]
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE
	ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN =
	#TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN);

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]', 1;

UPDATE [PROCESS_BG_STATUS]
SET STATUS_PROCESSED = 1
   ,MODIFY_DATE = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE
	ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN)
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
END;
END;


GO
 

IF OBJECT_ID('SP_REPORT_CONSOLIDATED_TRANSACTION_SUB') IS NOT NULL
DROP PROCEDURE [SP_REPORT_CONSOLIDATED_TRANSACTION_SUB];
GO

CREATE PROCEDURE [dbo].[SP_REPORT_CONSOLIDATED_TRANSACTION_SUB]  
  
/**************************************************************************************************************                
    Project.......: TKPP                                    
 ------------------------------------------------------------------------------------------                                    
     Author                          VERSION        Date                            Description                                    
 ------------------------------------------------------------------------------------------                                    
    Fernando Henrique F. de O       V1         28/12/2018                          Creation                                  
    Fernando Henrique F. de O       V2         07/02/2019                          Changed                                      
    Elir Ribeiro                    V3         29/07/2019                          Changed date                            
    Caike Ucha Almeida             V4         16/08/2019                        Inserting columns                           
    Caike Ucha Almeida             V5         11/09/2019                        Inserting column                          
    Marcus Gall                     V6         27/11/2019               Add Model_POS, Segment, Location_EC                  
    Ana Paula Liick                 V8         31/01/2020                       Add Origem_Trans                  
    Caike Ucha                     V9         30/04/2020                       add produto ec              
    Luiz Aquino                     V10        02/07/2020                   PlanoDZero (ET-895)     
    Caike Uch�a                     V10        03/08/2020                       add QTY_DAYS_ANTECIP      
    Caike Uch�a                     V11        07/08/2020                       ISNULL na RATE_PLAN    
    Caike Uchoa                     v12        01/09/2020                       Add cod_ec_prod  
    Caike Uchoa                     v8         10/11/2020                  Add Program Manager
**************************************************************************************************************/ (@CODCOMP VARCHAR(10),  
@INITIAL_DATE DATETIME,  
@FINAL_DATE DATETIME,  
@EC VARCHAR(10),  
@BRANCH VARCHAR(10),  
@DEPART VARCHAR(10),  
@TERMINAL VARCHAR(100),  
@STATE VARCHAR(100),  
@CITY VARCHAR(100),  
@TYPE_TRAN VARCHAR(10),  
@SITUATION VARCHAR(10),  
@NSU VARCHAR(100) = NULL,  
@NSU_EXT VARCHAR(100) = NULL,  
@BRAND VARCHAR(50) = NULL,  
@PAN VARCHAR(50) = NULL,  
@CODAFF INT = NULL,  
@SPLIT INT = NULL,  
@CODACQUIRER INT = NULL,  
@ISPlanDZero INT = NULL,  
@COD_EC_PROD INT = NULL)  
AS  
BEGIN
  
  
  
 DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
  
  
  
 DECLARE @AWAITINGSPLIT INT = NULL;
SET NOCOUNT ON;
SET ARITHABORT ON;

SELECT TOP 1
	@AWAITINGSPLIT = [COD_SITUATION]
FROM [SITUATION]
WHERE [NAME] = 'WAITING FOR SPLIT OF FINANCE SCHEDULE';

SET @QUERY_BASIS = 'SELECT                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].AFFILIATOR AS AFFILIATOR,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].COMMERCIALESTABLISHMENT AS MERCHANT,                                            
        [REPORT_CONSOLIDATED_TRANS_SUB].SERIAL  AS SERIAL,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE  AS TRANSACTION_DATE,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TIME  AS TRANSACTION_TIME,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].NSU  AS NSU ,                    
        [REPORT_CONSOLIDATED_TRANS_SUB].EXTERNALNSU  AS EXTERNAL_NSU,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TYPE  AS TRAN_TYPE,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT  AS TRANSACTION_AMOUNT,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].QUOTA_TOTAL  AS QUOTA_TOTAL,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].AMOUNT  AS  AMOUNT,           
        [REPORT_CONSOLIDATED_TRANS_SUB].PLOT  AS QUOTA,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].ACQUIRER  AS ACQUIRER,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_ACQUIRER  AS MDR_ACQ,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].BRAND  AS BRAND,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_EC  AS MDR_EC,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_PERCENT  AS ANTICIP_EC,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_AFFILIATOR  AS MDR_AFF,                     
      [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_AFFILIATOR  AS ANTICIP_AFF,                    
        [REPORT_CONSOLIDATED_TRANS_SUB].TO_RECEIVE_ACQ  AS TO_RECEIVE_ACQ,                              
        [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_RECEIVE_DATE  AS PREDICTION_RECEIVE_DATE,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_SUB  AS NET_WITHOUT_FEE_SUB,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].FEE_AFFILIATOR  AS FEE_AFFILIATOR,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_SUB_AQUIRER  AS NET_SUB,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_AFF  AS NET_WITHOUT_FEE_AFF,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_AFFILIATOR  AS NET_AFF,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_EC  AS MERCHANT_WITHOUT_FEE,                    
        [REPORT_CONSOLIDATED_TRANS_SUB].MERCHANT_NET  AS MERCHANT_NET,                     
        IIF([REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED] = 1, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ,[REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE )  AS PREDICTION_PAY_DATE,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIPATED  AS ANTECIPATED,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].RATE,                                  
        --[REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_ACQ  AS MDR_CURRENT_ACQ,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_EC  AS MDR_CURRENT_EC,                    
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_EC  AS ANTICIP_CURRENT_EC,                                          
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_EC  AS RATE_CURRENT_EC,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_AFF  AS MDR_CURRENT_AFF,                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_AFF  AS ANTICIP_CURRENT_AFF,                                     
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_AFF  AS RATE_CURRENT_AFF,                    
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_EC  AS CPF_AFF,                                
        [REPORT_CONSOLIDATED_TRANS_SUB].DESTINY  AS DESTINY,                     
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_AFFILIATOR  AS COD_AFFILIATOR,                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_BRANCH  AS COD_BRANCH,                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_DEPTO_BRANCH  AS COD_DEPTO_BRANCH,                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].PAN  AS PAN,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_AFF AS ORIGINATOR,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].CODE  AS CODE,                                     
        [REPORT_CONSOLIDATED_TRANS_SUB].SPLIT,                                
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_NAME,                                
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_CPF_CNPJ                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED]                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[RETAINED_AMOUNT]                                   
        --, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE]                    
        ,IIF( [REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED] = 1, [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ) [ORIGINAL_DATE]                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNEE]                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_NAME_DESTINY                              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_DATE                              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_TIME                           
        ,[REPORT_CONSOLIDATED_TRANS_SUB].AUTH_CODE                          
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CREDITOR_DOCUMENT                          
       ,[REPORT_CONSOLIDATED_TRANS_SUB].ORDER_CODE                        
        ,CASE WHEN [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION_TITLE = @AwaitingSplit THEN 1 ELSE 0 END [AWAITINGSPLIT]                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].MODEL_POS                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].SEGMENT_EC                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].STATE_EC                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CITY_EC                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NEIGHBORHOOD_EC                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TYPE_TRAN                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NAME_PROD              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD_CPF_CNPJ              
        ,ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].PERCENT_PARTICIP_SPLIT,0) PERCENT_PARTICIP_SPLIT             
        ,[REPORT_CONSOLIDATED_TRANS_SUB].IS_PLANDZERO            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO              
  ,[REPORT_CONSOLIDATED_TRANS_SUB].QTY_DAYS_ANTECIP            
  ,isnull([REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO_AFF, 0) TAX_PLANDZERO_AFF          
  ,[REPORT_CONSOLIDATED_TRANS_SUB].SALES_REPRESENTANTE        
  ,[REPORT_CONSOLIDATED_TRANS_SUB].CPF_CNPJ_REPRESENTANTE        
  ,[REPORT_CONSOLIDATED_TRANS_SUB].EMAIL_REPRESENTANTE  
  ,[REPORT_CONSOLIDATED_TRANS_SUB].IS_RECURRING     
  ,[REPORT_CONSOLIDATED_TRANS_SUB].PROGRAM_MANAGER
  FROM [REPORT_CONSOLIDATED_TRANS_SUB]                                           
   WHERE REPORT_CONSOLIDATED_TRANS_SUB.COD_COMP = @CODCOMP                                                                
   AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = 3                                    
';
  
  
  
 IF @INITIAL_DATE IS NOT NULL  
  AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE BETWEEN @INITIAL_DATE AND @FINAL_DATE  ');

IF @EC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_EC = @EC ');
IF @BRANCH IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '  AND COD_BRANCH =  @BRANCH ');
IF @DEPART IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_DEPTO_BRANCH =  @DEPART ');
IF (@CODAFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_AFFILIATOR = @CodAff ');
IF LEN(@BRAND) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND BRAND = @BRAND ');
IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CODE = @NSU ');
IF @PAN IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND PAN = @PAN ');
IF (@SPLIT = 1)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SPLIT = 1');

IF (@ISPlanDZero = 1)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND IS_PLANDZERO = 1');

IF @COD_EC_PROD IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_EC_PROD = @COD_EC_PROD');

IF @CODACQUIRER IS NOT NULL
SET @QUERY_BASIS =
CONCAT(@QUERY_BASIS, ' AND ACQUIRER = (SELECT [NAME] FROM ACQUIRER WHERE COD_AC = @CODACQUIRER ) ');

EXEC [sp_executesql] @QUERY_BASIS
					,N'                                   
           @CODCOMP VARCHAR(10),                           
           @INITIAL_DATE DATE,                           
           @FINAL_DATE DATE,                          
           @EC int,                           
           @BRANCH int,                           
           @DEPART int,                         
           @TERMINAL varchar(100),                           
           @STATE varchar(25),                           
           @CITY varchar(40),                           
           @TYPE_TRAN int,                           
           @SITUATION int,                           
           @NSU varchar(100),               
           @NSU_EXT varchar(100),                                        
     @BRAND varchar(50) ,                         
           @PAN VARCHAR(50),                           
           @CodAff INT,                      
           @CODACQUIRER INT,                    
           @AwaitingSplit INT = NULL,  
     @COD_EC_PROD INT  
           '
					,@CODCOMP = @CODCOMP
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@EC = @EC
					,@BRANCH = @BRANCH
					,@DEPART = @DEPART
					,@TERMINAL = @TERMINAL
					,@STATE = @STATE
					,@CITY = @CITY
					,@TYPE_TRAN = @TYPE_TRAN
					,@SITUATION = @SITUATION
					,@NSU = @NSU
					,@NSU_EXT = @NSU_EXT
					,@BRAND = @BRAND
					,@PAN = @PAN
					,@CODAFF = @CODAFF
					,@CODACQUIRER = @CODACQUIRER
					,@AWAITINGSPLIT = @AWAITINGSPLIT
					,@COD_EC_PROD = @COD_EC_PROD;

END;


GO
 

IF OBJECT_ID('SP_LS_AFFILIATOR_COMP') IS NOT NULL
DROP PROCEDURE [SP_LS_AFFILIATOR_COMP];

GO
CREATE PROCEDURE [DBO].[SP_LS_AFFILIATOR_COMP]                                
        
/*****************************************************************************************************************        
----------------------------------------------------------------------------------------                                
Procedure Name: SP_LS_AFFILIATOR_COMP                                
Project.......: TKPP                                
------------------------------------------------------------------------------------------                                
Author                          VERSION       Date              Description                                
------------------------------------------------------------------------------------------                                
Gian Luca Dalle Cort              V1        01/08/2018            CREATION                         
Luiz Aquino                       V2        01/10/2018            UPDATE                        
Luiz Aquino                       v3        18/12/2018            ADD SPOT_TAX                        
Lucas Aguiar                      v4        01/07/2019            Rotina de bloqueio bancario                 
Caike Uchôa                       v5        26/02/2020            add OperationAff              
Elir Ribeiro                      v6        16/04/2020           add tax and deadline billet            
Caike Uchôa                       v7        17/04/2020           add busca por cnpj        
Caike Uchoa                       v8        16/09/2020           add correcao billetTax    
Caike uchoa                       v9        21/10/2020           add email  
Caike Uchoa                       v10       10/11/2020           Add Program Manager
------------------------------------------------------------------------------------------        
*****************************************************************************************************************/        
                                
(        
 @ACCESS_KEY          VARCHAR(300),         
 @NAME                VARCHAR(100) = NULL,         
 @ACTIVE              INT          = 1,         
 @CODAFF              INT          = NULL,         
 @WAS_BLOCKED_FINANCE INT          = NULL)        
AS        
BEGIN
      
        
        
    DECLARE @QUERY_ NVARCHAR(MAX);
      
        
        
    DECLARE @COD_BLOCK_SITUATION INT;
      
        
        
    DECLARE @BUSCA VARCHAR(255);




SET @BUSCA = '%' + @NAME + '%';

SELECT
	@COD_BLOCK_SITUATION = [COD_SITUATION]
FROM [SITUATION]
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';

SET @QUERY_ = '                        
                        
  SELECT                                 
  AFFILIATOR.COD_AFFILIATOR,                                
  AFFILIATOR.CREATED_AT,                                
  AFFILIATOR.ACTIVE,                                
  AFFILIATOR.NAME AS NAME,                                
  AFFILIATOR.CODE,                                
  AFFILIATOR.CPF_CNPJ AS CPF_CNPJ,                                
  AFFILIATOR.COD_USER_CAD,                        
  u.IDENTIFICATION AFF_USER,                        
  AFFILIATOR.ACCESS_KEY_AFL,                                
  AFFILIATOR.SECRET_KEY_AFL,                                
  AFFILIATOR.CLIENT_ID_AFL,                                
  AFFILIATOR.FIREBASE_NAME,                                
  AFFILIATOR.MODIFY_DATE,                                
  AFFILIATOR.COD_USER_ALT,                                
  AFFILIATOR.GUID AS GUID,                                
  COMPANY.COD_COMP,                                
  COMPANY.NAME AS COMPANY_NAME,                                
  COMPANY.CODE AS COMPANY_CODE,                                 
  COMPANY.CPF_CNPJ AS CNPJ_COMPANY,                                
  AFFILIATOR.SUBDOMAIN SUB_DOMAIN,                              
  THEMES.LOGO_AFFILIATE,                              
  THEMES.LOGO_HEADER_AFFILIATE,                              
  THEMES.COLOR_HEADER,                        
  THEMES.BACKGROUND_IMAGE,                        
  THEMES.SECONDARY_COLOR,                        
  THEMES.SELF_REG_IMG_INITIAL,                        
  THEMES.SELF_REG_IMG_FINAL,                        
  AFFILIATOR.SPOT_TAX,              
  CASE                        
   WHEN AFFILIATOR.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1                        
   ELSE 0                         
  END [FINANCE_BLOCK],                        
  AFFILIATOR.NOTE_FINANCE_SCHEDULE  ,                
  TRADUCTION_SITUATION.SITUATION_TR,                
  AFFILIATOR.PLATFORM_NAME PlatformName,                              
  AFFILIATOR.PROPOSED_NUMBER  ProposedNumber,                
  AFFILIATOR.STATE_REGISTRATION  StateRegistration,                
  AFFILIATOR.MUNICIPAL_REGISTRATION  MunicipalRegistration,                
  AFFILIATOR.COMPANY_NAME  CompanyTraddingName,              
  AFFILIATOR.OPERATION_AFF,       
  COMPANY_DOMAIN.DOMAIN,      
  (    
  SELECT TOP 1 SERVICE_AMOUNT FROM SERVICES_AVAILABLE    
  WHERE COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR    
  AND ACTIVE = 1    
  AND COD_EC IS NULL     
  AND COD_ITEM_SERVICE = 11    
  ) AS [billet_tax],  
 AFFILIATOR_CONTACT.MAIL AS EMAIL,
 AFFILIATOR.PROGRAM_MANAGER 
 FROM AFFILIATOR                                 
  INNER JOIN COMPANY ON AFFILIATOR.COD_COMP = COMPANY.COD_COMP       
  JOIN COMPANY_DOMAIN ON COMPANY_DOMAIN.COD_COMP = COMPANY.COD_COMP AND COMPANY_DOMAIN.ACTIVE = 1      
  LEFT JOIN THEMES ON THEMES.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR AND THEMES.ACTIVE = 1                        
  LEFT JOIN USERS u ON u.COD_USER = AFFILIATOR.COD_USER_CAD                        
  LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = AFFILIATOR.COD_SITUATION         
  LEFT JOIN AFFILIATOR_CONTACT ON AFFILIATOR_CONTACT.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR  
  AND AFFILIATOR_CONTACT.ACTIVE =1  
 WHERE COMPANY.ACCESS_KEY = @ACCESS_KEY AND AFFILIATOR.ACTIVE = @Active';
      
        
        
        
        
        
    IF @NAME IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND AFFILIATOR.NAME LIKE @BUSCA OR AFFILIATOR.CPF_CNPJ LIKE @BUSCA';

IF (@CODAFF IS NOT NULL)
SET @QUERY_ = @QUERY_ + ' AND AFFILIATOR.COD_AFFILIATOR = @CodAff ';

IF @WAS_BLOCKED_FINANCE = 1
SET @QUERY_ = @QUERY_ + ' AND AFFILIATOR.COD_SITUATION = @COD_BLOCK_SITUATION ';
ELSE
IF @WAS_BLOCKED_FINANCE = 0
SET @QUERY_ = @QUERY_ + ' AND AFFILIATOR.COD_SITUATION <> @COD_BLOCK_SITUATION';


EXEC [sp_executesql] @QUERY_
					,N'                          
  @ACCESS_KEY VARCHAR(300),                        
  @Name VARCHAR(100) ,                        
  @Active INT,                        
  @CodAff INT,                        
  @COD_BLOCK_SITUATION INT,                      
  @BUSCA VARCHAR(255)                      
  '
					,@ACCESS_KEY = @ACCESS_KEY
					,@NAME = @NAME
					,@ACTIVE = @ACTIVE
					,@CODAFF = @CODAFF
					,@COD_BLOCK_SITUATION = @COD_BLOCK_SITUATION
					,@BUSCA = @BUSCA;



END;




GO
 

IF OBJECT_ID('SP_UPDATE_AFFILIATED') IS NOT NULL
DROP PROCEDURE [SP_UPDATE_AFFILIATED];

GO
CREATE PROCEDURE [DBO].[SP_UPDATE_AFFILIATED]                                 
/*----------------------------------------------------------------------------------------                      
Procedure Name: [SP_UPDATE_AFFILIATOR]                      
Project.......: TKPP                      
------------------------------------------------------------------------------------------                      
Author                       VERSION           Date              Description                      
------------------------------------------------------------------------------------------                      
Luiz Aquino                    V1           01/10/2018             Creation                      
Luiz Aquino                    V2           18/12/2018            Add SPOT_TAX                      
Lucas Aguiar                   v3           2019-04-19        add rotina de split                      
Lucas Aguiar                   v4           2019-07-19        Rotina de agenda bloqueada                          
Lucas Aguiar                   v5           2019-08-23        Add serviço de notificações                    
Luiz Aquino                    V6           2019-10-24        Add Serviço de retenção de agenda           
Caike Uchôa                    v7           2020-02-26           drop services     
Caike uchoa                    v9           21/10/2020           add email   
Caike Uchoa                    v10          10/11/2020           Add Program Manager
------------------------------------------------------------------------------------------            
*************************************************************************************************/            
                      
(            
 @CODAFFILIATED          INT,                      
 -- INFO BASE                        
 @COD_COMP               INT,             
 @NAME                   VARCHAR(100),          
 @ACTIVE                 INT = NULL,        
 @CPF_CNPJ               VARCHAR(14),             
 @COD_USER_CAD           INT,             
 @FIREBASE_NAME          VARCHAR(100)  = NULL,             
 @COD_USER_ALT           INT,                      
 -- ADDRESS                          
 @ADDRESS                VARCHAR(250),             
 @NUMBER                 VARCHAR(50),             
 @COMPLEMENT             VARCHAR(400)  = NULL,             
 @CEP                    VARCHAR(80),             
 @COD_NEIGH              INT,             
 @REFERENCE_POINT        VARCHAR(200)  = NULL,                      
 -- CONTACT                       
 @CELL_NUMBER            VARCHAR(30),             
 @COD_TP_CONT            INT,             
 @COD_OPER               INT,             
 @DDI                    VARCHAR(20),             
 @DDD                    VARCHAR(20),             
 @PHONE_NUMBER           VARCHAR(30)   = NULL,             
 @PHONE_COD_TP_CONT      INT           = NULL,             
 @PHONE_COD_OPER         INT           = NULL,             
 @PHONE_DDI              VARCHAR(20)   = NULL,             
 @PHONE_DDD              VARCHAR(20)   = NULL,                       
 -- SUBDOMAIN                        
 @SUBDOMAIN              VARCHAR(100),                      
 -- BANK DETAILS                        
 @AGENCY                 VARCHAR(100)  = NULL,             
 @DIGIT                  VARCHAR(100)  = NULL,             
 @ACCOUNT                VARCHAR(100)  = NULL,             
 @DIGIT_ACCOUNT          VARCHAR(100)  = NULL,             
 @BANK                   INT           = NULL,             
 @ACCOUNT_TYPE           INT           = NULL,                 
 @PLATFORMNAME           VARCHAR(100)  = NULL,             
 @COMPANY_NAME           VARCHAR(100)  = NULL,             
 @STATE_REGISTRATION     VARCHAR(100)  = NULL,             
 @MUNICIPAL_REGISTRATION VARCHAR(100)  = NULL,             
 @PROPOSED_NUMBER        VARCHAR(100)  = NULL,          
 --        
 @PROGRESSIVE_COST       INT,           
 @NOTE_FINANCE           VARCHAR(MAX)  = NULL,         
 @WAS_BLOCKED            INT           = NULL,  
 @EMAIL                  VARCHAR(100),
 @PROGRAM_MANAGER VARCHAR(100)
)            
AS            
BEGIN
      
          
             
   DECLARE             
   @COD_SITUATION INT;
      
         
           
   /********************************************************            
*********** UPDATE PROGRESSIVEE COST AFFILIATOR *********          
********************************************************/          
          
/***********************            
BLOCKED FINANCE SCHEDULE            
***********************/          
          
IF @WAS_BLOCKED = 1
SELECT
	@COD_SITUATION = [COD_SITUATION]
FROM [SITUATION]
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';
ELSE
IF @WAS_BLOCKED = 0
SELECT
	@COD_SITUATION = [COD_SITUATION]
FROM [SITUATION]
WHERE [NAME] = 'RELEASED';
ELSE
SELECT
	@COD_SITUATION = [COD_SITUATION]
FROM [AFFILIATOR]
WHERE [COD_AFFILIATOR] = @CODAFFILIATED;

/**************            
LOGS AFFILIATOR            
**************/

EXEC [SP_LOG_AFF_REG] @COD_USER = @COD_USER_ALT
					 ,@COD_AFF = @CODAFFILIATED;

/*********            
AFFILIATOR            
*********/

UPDATE [AFFILIATOR]
SET [NAME] = @NAME
   ,[MODIFY_DATE] = current_timestamp
   ,[CPF_CNPJ] = @CPF_CNPJ
   ,[COD_USER_ALT] = @COD_USER_CAD
   ,[FIREBASE_NAME] = @FIREBASE_NAME
   ,[SUBDOMAIN] = @SUBDOMAIN
   ,[COD_SITUATION] = @COD_SITUATION
   ,[NOTE_FINANCE_SCHEDULE] = @NOTE_FINANCE
   ,[ACTIVE] = ISNULL(@ACTIVE, [ACTIVE])
   ,[PLATFORM_NAME] = @PLATFORMNAME
   ,[COMPANY_NAME] = @COMPANY_NAME
   ,[STATE_REGISTRATION] = @STATE_REGISTRATION
   ,[MUNICIPAL_REGISTRATION] = @MUNICIPAL_REGISTRATION
   ,[PROPOSED_NUMBER] = @PROPOSED_NUMBER
   ,[PROGRAM_MANAGER] = @PROGRAM_MANAGER
WHERE [COD_AFFILIATOR] = @CODAFFILIATED;


/*******************************************************************            
 ******************* ADDRESS AFFILIATOR ****************************            
*******************************************************************/

UPDATE [ADDRESS_AFFILIATOR]
SET [ACTIVE] = 0
   ,[MODIFY_DATE] = GETDATE()
WHERE [ACTIVE] = 1
AND [COD_AFFILIATOR] = @CODAFFILIATED;

INSERT INTO [ADDRESS_AFFILIATOR] ([COD_AFFILIATOR],
[CREATED_AT],
[COD_USER_CAD],
[ADDRESS],
[NUMBER],
[COMPLEMENT],
[CEP],
[COD_NEIGH],
[ACTIVE],
[MODIFY_DATE],
[COD_USER_ALT],
[REFERENCE_POINT])
	VALUES (@CODAFFILIATED, current_timestamp, @COD_USER_CAD, @ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, 1, current_timestamp, @COD_USER_ALT, @REFERENCE_POINT);

/*********************************************************************            
************************ AFFILIATOR CONTACT **************************            
*********************************************************************/

UPDATE [AFFILIATOR_CONTACT]
SET [ACTIVE] = 0
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;

INSERT INTO [AFFILIATOR_CONTACT] ([COD_AFFILIATOR],
[CREATED_AT],
[COD_USER_CAD],
[NUMBER],
[COD_TP_CONT],
[COD_OPER],
[MODIFY_DATE],
[COD_USER_ALT],
[DDI],
[DDD],
[ACTIVE],
MAIL)
	VALUES (@CODAFFILIATED, current_timestamp, @COD_USER_CAD, @CELL_NUMBER, @COD_TP_CONT, @COD_OPER, current_timestamp, @COD_USER_ALT, @DDI, @DDD, 1, @EMAIL);

IF (@PHONE_NUMBER IS NOT NULL)
BEGIN
INSERT INTO [AFFILIATOR_CONTACT] ([COD_AFFILIATOR],
[CREATED_AT],
[COD_USER_CAD],
[NUMBER],
[COD_TP_CONT],
[COD_OPER],
[MODIFY_DATE],
[COD_USER_ALT],
[DDI],
[DDD],
[ACTIVE],
MAIL)
	VALUES (@CODAFFILIATED, current_timestamp, @COD_USER_CAD, @PHONE_NUMBER, @PHONE_COD_TP_CONT, @PHONE_COD_OPER, current_timestamp, @COD_USER_ALT, @PHONE_DDI, @PHONE_DDD, 1, @EMAIL);
END;

/*******************************************************            
********************* BANK DETAILS *********************            
*******************************************************/

UPDATE [BANK_DETAILS_EC]
SET [ACTIVE] = 0
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_AFFILIATOR] = @CODAFFILIATED;

INSERT INTO [BANK_DETAILS_EC] ([AGENCY],
[DIGIT_AGENCY],
[COD_TYPE_ACCOUNT],
[COD_BANK],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_USER],
[COD_OPER_BANK],
[COD_AFFILIATOR])
	VALUES (@AGENCY, @DIGIT, @ACCOUNT_TYPE, @BANK, @ACCOUNT, @DIGIT_ACCOUNT, @COD_USER_CAD, @COD_OPER, @CODAFFILIATED);

SELECT
	@CODAFFILIATED AS 'COD_AFFILIATOR';
END;


GO
 

IF OBJECT_ID ('SP_REG_AFFILIATOR') IS NOT NULL
DROP PROCEDURE [SP_REG_AFFILIATOR];

GO
CREATE PROCEDURE [dbo].[SP_REG_AFFILIATOR]                                                                                                
 /*----------------------------------------------------------------------------------------                                                        
 Procedure Name: SP_REG_AFFILIATOR                                                        
 Project.......: TKPP                                                        
 ------------------------------------------------------------------------------------------                                                        
 Author                          VERSION        Date              Description                                                        
 ------------------------------------------------------------------------------------------                                                        
 Gian Luca Dalle Cort              V1          31/07/2018          CREATION                                                        
 Gian Luca Dalle Cort              V2          31/07/2018          CHANGE                                                        
 Kennedy Alef de Oliveira          V3          25/08/2018          CHANGE                                                   
 Elir  Ribeiro                     V4          31/08/2018          CHANGE                                    
 Luiz Aquino                       v5          13/12/2018     INCLUDE HAS_SPOT AND SPOT_TAX                                    
 Lucas Aguiar                      v6          14/12/2018     Add  TRANSACTION_DIGITED                                    
 Elir Ribeiro                      v7          21/03/2019     changed COD_COMP,CODUSER                                
 Lucas Aguiar                      v8          2019-04-17     Add Split service                                 
 Lucas Aguiar                      v9          2019-08-28     Add serviço do notification                                
 Elir Ribeiro                      v10         20200-01-21    add contracts affiliator                               
 Elir Ribeiro                      v11         2020-01-22     add propposed number                           
 Elir Ribeiro                      v12         2020-01-23     add documents                    
 Elir Ribeiro                      v13         2020-01-29     add description in documents                  
 Caike Uchôa                       v14         20/02/2019     Add service Afiliator operation       
 Caike Uchoa                       V15         21/10/2020     Add cod_user_modify, created_at e modify_date
 Caike Uchoa                       v17         10/11/2020     Add Program Manager
 ------------------------------------------------------------------------------------------*/                                    
(                                                    
-- INFO BASE                                                  
  @COD_COMP INT,                                                        
  @NAME VARCHAR(100),                                                                
  @CPF_CNPJ VARCHAR(14),                                                         
  @COD_USER_CAD INT,                                                        
  @FIREBASE_NAME VARCHAR(100) = NULL,                                                        
  @COD_USER_ALT INT,                                               
 -- ADDRESS                                              
  @ADDRESS VARCHAR(250),                                                        
  @NUMBER VARCHAR(50),                                                        
  @COMPLEMENT VARCHAR(400) = NULL,                                                        
  @CEP VARCHAR(80),                                                        
  @COD_NEIGH INT,                                                        
  @REFERENCE_POINT VARCHAR(200) = NULL,                                                 
 ----- CONTACT                        
 @CELL_NUMBER VARCHAR(30),                                                         
 @COD_TP_CONT INT,                   
 @COD_OPER INT,                                                        
 @DDI VARCHAR(20),                                                        
 @DDD VARCHAR(20),                                        
 -- SUBDOMAIN          
 @SUBDOMAIN varchar(100),                                                    
 -- PLAN                                        
 @COD_PLAN [CODE_TYPE] READONLY,                                                
 -- THEME                                              
  @LOGO_AFFILIATE VARCHAR(400),                                                  
  @LOGO_HEADER_AFFILIATE VARCHAR(400),                                                    
  @COLOR_HEADER VARCHAR(400) = NULL,                                                  
  @BACKGROUND_IMAGE VARCHAR(400) = NULL,                                                  
  @SECONDARY_COLOR VARCHAR(400) = NULL ,                                              
  @CSS_FILE VARCHAR(100) = NULL,               
  @PROGRESSIVE_COST INT,                                              
 -- BANK DETAILS                                                  
 @AGENCY VARCHAR(100) = NULL,                                                
 @DIGIT VARCHAR(100) = NULL,                             
 @ACCOUNT VARCHAR(100)= NULL,                                               
 @DIGIT_ACCOUNT VARCHAR(100)= NULL,                                               
 @BANK INT = NULL,                      
 @ACCOUNT_TYPE INT = NULL,                                    
--SPOT                                    
 @HAS_SPOT INT = 0,                                    
 @SPOT_TAX DECIMAL(6,2)= 0,                                
--SPLIT                                
 @HAS_SPLIT INT = 0,                                  
 @SPLIT INT = 0,                                
 --Notification Afiliador                                
 @HAS_NOTIFICATION INT = 0,                                
 @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,                                
 @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,                              
 @PLATFORM_NAME VARCHAR(100) = NULL,                              
 @COMPANY_NAME VARCHAR(100) = NULL,                              
 @STATE_REGISTRATION VARCHAR(100) = NULL,                              
 @MUNICIPAL_REGISTRATION VARCHAR(100) = NULL ,                              
 @TYPECONTRACTS INT = NULL,                              
 @CONTROLNUMBER VARCHAR (100) = NULL,                              
 @DESCRIPTION VARCHAR(100) = NULL ,                          
 @PROPOSED_NUMBER varchar(100) = NULL,                              
 @NAME_CONTACT VARCHAR(100) = NULL,                        
 @MAIL_CONTACT VARCHAR(100) = NULL,                      
 @DOCUMENTS VARCHAR(100) = NULL,                   
 @DESCRIPTION_DOCUMENT VARCHAR(200) = NULL,                     
 @CONTRACTS VARCHAR(100) = NULL,                    
 @TYPEDOCS int = NULL,          
 @OPERATION_AFF INT,          
 -- Translate Service              
 @HAS_TRANSLATION INT = 0,
 @PROGRAM_MANAGER VARCHAR(100)
)                                                        
AS                                    
                                                        
DECLARE @SEQ INT;
    
      
            
              
                                 
DECLARE @IDAFL INT;
    
      
            
              
                                
DECLARE @CONT INT;
    
      
            
              
                                 
DECLARE @PROG INT;
    
      
            
              
                                 
DECLARE @COD_SPLIT INT;
    
      
            
              
                                
DECLARE @cod_plan_int int;
    
      
            
              
                                
DECLARE @COD_GWNOTIFICATION INT;
    
      
            
             
                
DECLARE @COD_TRANSLATE INT;
    
      
            
                           
                                  
                                
BEGIN


(SELECT
	@cod_plan_int = CODE
FROM @COD_PLAN);
SELECT
	@CONT = COUNT(*)
FROM AFFILIATOR
WHERE CPF_CNPJ = @CPF_CNPJ

IF @CONT > 0
THROW 61002, 'AFILIADOR Já CADASTRADO', 1;

SET @SEQ = NEXT VALUE FOR [SEQ_AFLCODE];

SELECT
	@COD_GWNOTIFICATION = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

SELECT
	@COD_TRANSLATE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';
/********************** REGISTER AFFILIATOR ****************/

INSERT INTO AFFILIATOR (COD_COMP,
NAME,
CREATED_AT,
ACTIVE,
CODE,
CPF_CNPJ,
COD_USER_CAD,
FIREBASE_NAME,
MODIFY_DATE,
COD_USER_ALT,
SUBDOMAIN,
COD_OPER_COST,
--HAS_SPOT,                                    
SPOT_TAX,
COD_SITUATION,
PLATFORM_NAME,
COMPANY_NAME,
STATE_REGISTRATION,
MUNICIPAL_REGISTRATION,
PROPOSED_NUMBER,
OPERATION_AFF,
PROGRAM_MANAGER)
	VALUES (@COD_COMP, @NAME, current_timestamp, 1, @SEQ, @CPF_CNPJ, @COD_USER_CAD, @FIREBASE_NAME, current_timestamp, @COD_USER_ALT, @SUBDOMAIN, (SELECT TOP 1 COD_OPER_COST FROM OPERATION_COST WHERE COD_COMP = @COD_COMP AND ACTIVE = 1), @SPOT_TAX, (SELECT COD_SITUATION FROM SITUATION WHERE [NAME] = 'RELEASED'), @PLATFORM_NAME, @COMPANY_NAME, @STATE_REGISTRATION, @MUNICIPAL_REGISTRATION, @PROPOSED_NUMBER, @OPERATION_AFF, @PROGRAM_MANAGER);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER AFFILIATOR', 1;

SET @IDAFL = @@identity;
    
      
            
              
                                
                                    
                                    
 IF @HAS_SPOT = 1                                    
 BEGIN
    
      
            
              
                                
                     
                                    
 DECLARE @CodSpotService INT
SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1'

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_CAD, @CodSpotService, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)

END

IF @HAS_SPLIT = 1
BEGIN
SELECT
	@COD_SPLIT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (current_timestamp, @COD_USER_CAD, @COD_SPLIT, @COD_COMP, @IDAFL, NULL, 1, current_timestamp, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE CODE = @SPLIT))
END;

/************ UPDATE TRANSLATE SERVICE **********/
IF @HAS_TRANSLATION = 1
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)
END;
/************ UPDATE NOTIFICATION AFFILIATED **********/

IF @HAS_NOTIFICATION = 0
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @IDAFL
AND COD_EC IS NULL;

UPDATE ACCESS_APPAPI
SET ACTIVE = 0
   ,COD_USER_MODIFY = @COD_USER_ALT
   ,MODIFY_DATE = CURRENT_TIMESTAMP
WHERE COD_AFFILIATOR = @IDAFL
AND ACTIVE = 1
END
ELSE
IF @HAS_NOTIFICATION = 1
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = current_timestamp
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION
AND COD_COMP = @COD_COMP
AND COD_AFFILIATOR = @IDAFL
AND COD_EC IS NULL;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)

EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @IDAFL
									 ,@PASSWORD_NOTIFICATION
									 ,@CLIENTID_NOTIFICATION
									 ,@COD_USER_ALT;

END



/************ REGISTER PROGRESSIVEE COST AFFILIATOR **********/

INSERT INTO PROGRESSIVE_COST_AFFILIATOR (COD_AFFILIATOR,
COD_PROG_COST,
COD_TYPE_PROG,
COD_USER)
	SELECT
		@IDAFL
	   ,COD_PROG_COST
	   ,COD_TYPE_PROG
	   ,@COD_USER_CAD
	FROM PROGRESSIVE_COST
	WHERE COD_COMP = @COD_COMP
	AND ACTIVE = 1
	AND COD_TYPE_PROG = @PROGRESSIVE_COST

SET @PROG = @@identity;

INSERT INTO ITENS_PROG_COST_AFF (COD_PROG_COST_AF,
QTY_INITIAL,
QTY_FINAL,
FIX_COST,
ADITIONAL_COST)
	SELECT
		@PROG
	   ,ITENS_PROG_COST.QTY_INITIAL
	   ,ITENS_PROG_COST.QTY_FINAL
	   ,ITENS_PROG_COST.FIX_COST
	   ,ITENS_PROG_COST.ADITIONAL_COST
	FROM ITENS_PROG_COST
	INNER JOIN PROGRESSIVE_COST
		ON PROGRESSIVE_COST.COD_PROG_COST = ITENS_PROG_COST.COD_PROG_COST
	WHERE COD_COMP = @COD_COMP
	AND PROGRESSIVE_COST.ACTIVE = 1
	AND ITENS_PROG_COST.ACTIVE = 1
	AND COD_TYPE_PROG = @PROGRESSIVE_COST


/* ******************* ADDRESS AFFILIATOR *****************************/


UPDATE ADDRESS_AFFILIATOR
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND COD_AFFILIATOR = @IDAFL;

INSERT INTO ADDRESS_AFFILIATOR (COD_AFFILIATOR,
CREATED_AT,
COD_USER_CAD,
ADDRESS,
number,
COMPLEMENT,
CEP,
COD_NEIGH,
ACTIVE,
MODIFY_DATE,
COD_USER_ALT,
REFERENCE_POINT)
	VALUES (@IDAFL, current_timestamp, @COD_USER_CAD, @ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, 1, current_timestamp, @COD_USER_ALT, @REFERENCE_POINT);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ADDRESS_AFFILIATOR ', 1;

/************************* AFFILIATOR CONTACT ***************************/

INSERT INTO AFFILIATOR_CONTACT (COD_AFFILIATOR,
CREATED_AT,
COD_USER_CAD,
number,
COD_TP_CONT,
COD_OPER,
MODIFY_DATE,
COD_USER_ALT,
DDI,
DDD,
ACTIVE,
NAME,
MAIL)
	VALUES (@IDAFL, current_timestamp, @COD_USER_CAD, @CELL_NUMBER, @COD_TP_CONT, @COD_OPER, current_timestamp, @COD_USER_ALT, @DDI, @DDD, 1, @NAME_CONTACT, @MAIL_CONTACT);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER AFFILIATOR_CONTACT ', 1;

/**********  UPDATE AND REGISTER THEMES ****************/

UPDATE THEMES
SET ACTIVE = 0
   ,MODIFY_DATE = current_timestamp
   ,COD_USER_ALT = @COD_USER_CAD
WHERE COD_AFFILIATOR = @IDAFL
AND ACTIVE = 1;


INSERT INTO THEMES (CREATED_AT,
LOGO_AFFILIATE,
LOGO_HEADER_AFFILIATE,
COD_AFFILIATOR,
COLOR_HEADER,
ACTIVE,
COD_USER_CAD,
BACKGROUND_IMAGE,
SECONDARY_COLOR)
	VALUES (current_timestamp, @LOGO_AFFILIATE, @LOGO_HEADER_AFFILIATE, @IDAFL, @COLOR_HEADER, 1, @COD_USER_CAD, @BACKGROUND_IMAGE, @SECONDARY_COLOR);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER THEMES ', 1;


/********************** BANK DETAILS **********************/

INSERT INTO BANK_DETAILS_EC (AGENCY,
DIGIT_AGENCY,
COD_TYPE_ACCOUNT,
COD_BANK,
ACCOUNT,
DIGIT_ACCOUNT,
COD_USER,
COD_OPER_BANK,
COD_AFFILIATOR)
	VALUES (@AGENCY, @DIGIT, @ACCOUNT_TYPE, @BANK, @ACCOUNT, @DIGIT_ACCOUNT, @COD_USER_CAD, @COD_OPER, @IDAFL)

INSERT INTO CONTRACTS_AFFILIATOR (TYPECONTRACTS, CONTROLNUMBER, DESCRIPTION, COD_USER_CREATE, CREATED_AT, ACTIVE, CONTRACTS, COD_AFFILIATOR)
	VALUES (@TYPECONTRACTS, @CONTROLNUMBER, @DESCRIPTION, @COD_USER_CAD, current_timestamp, 1, @CONTRACTS, @IDAFL)

INSERT INTO DOCS_AFFILIATOR (DOCUMENTS, COD_USER_CREATE, CREATED_AT, ACTIVE, COD_AFFILIATOR, COD_TYPE_CONTRACTS, DESCRIPTION)
	VALUES (@DOCUMENTS, @COD_USER_CAD, current_timestamp, 1, @IDAFL, @TYPEDOCS, @DESCRIPTION_DOCUMENT)


/******** REGISTER TAX PLAN OF AFFILIATOR **********/

EXEC SP_ASS_AFF_PLAN @CODPLAN = @COD_PLAN
					,@COD_AFF = @IDAFL
					,@CODUSER = @COD_USER_CAD;


/******** REGISTER TAX PLAN OF AFFILIATOR **********/

EXEC SP_REG_OPER_COST_AFF @COD_AFFILIATOR = @IDAFL
						 ,@COD_COMP = @COD_COMP;

/****** REGISTER PRODUCTS UNAVAILABLE TO MODELS *****/

EXEC SP_REG_UNAVAILABLE_PRODUCT @COD_AFF = @IDAFL


SELECT
	@IDAFL AS 'COD_AFFILIATOR'
   ,@COD_COMP AS 'COD_COMP'
   ,@COD_USER_CAD AS 'CODUSER';


END;

GO

--ET-693


IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL
    DROP PROCEDURE SP_UPDATE_SERVICES_AFFILIATOR
GO
CREATE PROCEDURE [dbo].[SP_UPDATE_SERVICES_AFFILIATOR]
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author          VERSION      Date              Description
------------------------------------------------------------------------------------------
    Caike Ucha      v1           2020-02-26        Creation
    Elir Ribeiro    v2           2020-04-20        add service billet
    Caike Ucha      v3           2020-04-20        add service MultiEC
    Elir Ribeiro    v4           2020-04-22        alter proc
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero
    Luiz Aquino     V7           2020-09-24        ET-1073 TEF_GLOBAL
    Luiz Aquino     V9           2020-10-27        ET-1150 Split Programado
------------------------------------------------------------------------------------------*/ 
(
    @CODAFFILIATED INT,
    @COD_COMP INT,
    @COD_USER_ALT INT,
    @SPOT_TAX DECIMAL(6, 2) = 0,
    @HAS_SPOT INT = 0,
    @SPLIT_OPT INT = 0,
    @HAS_SPLIT INT = 0,
    @HAS_NOTIFICATION INT = 0,
    @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,
    @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,
    @LEDGERRETENTION INT = 0,
    @LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,
    @HAS_TRANSLATION INT = 0,
    @OPERATION_AFF INT = 0,
    @HAS_BILLET INT = 0,
    @BILLET_TAX DECIMAL(6, 2) = 0,
    @HAS_SPLIT_BILLET INT = 0,
    @MULTIEC_ACTIVE INT = 0,
    @TCU_DETAILED INT = 0,
    @PLANDZERO INT = 0,
    @PlanDZeroJson VARCHAR(256) = NULL,
    @TefApiActive INT = 0,
    @TefApiJson VARCHAR(256) = NULL,
    @SplitProgrammed INT = 0
)
AS
BEGIN
    DECLARE @CODSPOTSERVICE INT,
     @COD_SPLIT_SERVICE INT,
     @COD_GWNOTIFICATION INT,
     @HAS_CREDENTIAL INT = 0,
     @COD_AWAITSPLIT INT = 0,
     @COD_TRANSLATE INT,
     @CODBILLETSERVICE INT,
     @CODSPLITBILLET INT,
     @COD_MULTIEC_AFFILIATOR INT,
     @COD_TCU_DETAILED INT,
     @COD_PLANDZERO INT,
     @COD_TEF_API INT,
     @COD_SPLIT_PROG INT;
        
    SELECT @CODSPOTSERVICE = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [CODE] = '1';

    SELECT @COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [NAME] = 'SPLIT';

    SELECT @COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

    SELECT @COD_AWAITSPLIT = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [CODE] = '8';

    SELECT @HAS_CREDENTIAL = COUNT(*)
    FROM [ACCESS_APPAPI]
    WHERE [COD_AFFILIATOR] = @CODAFFILIATED
      AND [ACTIVE] = 1;

    SELECT @COD_TRANSLATE = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [NAME] = 'TRANSLATE';

    SELECT @CODBILLETSERVICE = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [CODE] = '12';

    SELECT @CODSPLITBILLET = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [CODE] = '13';

    SELECT @COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [CODE] = '14';

    SELECT @COD_TCU_DETAILED = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [CODE] = '16';

    SELECT @COD_PLANDZERO = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [NAME] = 'PlanDZero';

    SELECT @COD_TEF_API = [COD_ITEM_SERVICE]
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [NAME] = 'ApiTef';

    SELECT @COD_SPLIT_PROG = COD_ITEM_SERVICE
    FROM [ITEMS_SERVICES_AVAILABLE]
    WHERE [NAME] = 'SplitProgrammed'
    
    IF (@HAS_SPOT = 0
        AND (SELECT COUNT(*)
             FROM [SERVICES_AVAILABLE]
             WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
               AND [COD_AFFILIATOR] = @CODAFFILIATED
               AND [COD_EC] IS NOT NULL
               AND [ACTIVE] = 1)
            > 0)
        THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

    IF (@HAS_SPLIT = 0
        AND (SELECT COUNT(*)
             FROM [SERVICES_AVAILABLE]
             WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
               AND [COD_AFFILIATOR] = @CODAFFILIATED
               AND [COD_EC] IS NOT NULL
               AND [ACTIVE] = 1)
            > 0)
        THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

    IF (@HAS_SPLIT = 1
        AND @SPLIT_OPT = 1
        AND (SELECT COUNT(*)
             FROM [SERVICES_AVAILABLE]
             WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
               AND [COD_AFFILIATOR] = @CODAFFILIATED
               AND [COD_EC] IS NOT NULL
               AND [ACTIVE] = 1)
            > 0)
        THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

    IF (@MULTIEC_ACTIVE = 0
        AND (SELECT COUNT(*)
             FROM [SERVICES_AVAILABLE]
             WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
               AND [COD_AFFILIATOR] = @CODAFFILIATED
               AND [COD_EC] IS NOT NULL
               AND [ACTIVE] = 1)
            > 0)
        THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;

    /*******************************************
    *********** UPDATE SPOT AFFILIATED *********
    *******************************************/

    IF (SELECT COUNT(*)
        FROM [SERVICES_AVAILABLE]
        WHERE [COD_ITEM_SERVICE] = 1
          AND [COD_AFFILIATOR] = @CODAFFILIATED
          AND [COD_EC] IS NULL
          AND [ACTIVE] = 1)
        > 0
        BEGIN
            IF @HAS_SPOT = 0
                BEGIN
                    UPDATE [SERVICES_AVAILABLE]
                    SET [ACTIVE]      = 0
                      , [COD_USER]    = @COD_USER_ALT
                      , [MODIFY_DATE] = current_timestamp
                    WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
                      AND [COD_COMP] = @COD_COMP
                      AND [COD_AFFILIATOR] = @CODAFFILIATED
                      AND [COD_EC] IS NULL;
                END;
            ELSE
                BEGIN
                    IF @SPOT_TAX > (SELECT MIN([SPOT_TAX])
                                    FROM [COMMERCIAL_ESTABLISHMENT]
                                    WHERE [COD_AFFILIATOR] = @CODAFFILIATED
                                      AND [SPOT_TAX] <> 0
                                      AND [ACTIVE] = 1)
                        THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
                END;
        END;
    ELSE
        IF @HAS_SPOT = 1
            BEGIN
                INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                  [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
                VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1,
                        current_timestamp);
            END;

    UPDATE AFFILIATOR
    SET SPOT_TAX      = @SPOT_TAX
      , OPERATION_AFF = @OPERATION_AFF
    WHERE COD_AFFILIATOR = @CODAFFILIATED;

    /********************************************
    *********** UPDATE SPLIT AFFILIATED *********
    ********************************************/

    IF (@HAS_SPLIT = 0)
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;
        END;
    ELSE
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;

            INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                              [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
            VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1,
                    current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
        END;

    /**********************************************
    *********** UPDATE LEDGER RETENTION ***********
    **********************************************/

    IF (@LEDGERRETENTION = 0)
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED;
        END;
    ELSE
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;

            INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                              [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
            VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1,
                    current_timestamp, @LEDGERRETENTIONCONFIG);

            DECLARE @DT_FROM DATE;
            DECLARE @DT_UNTIL DATE;

            SELECT @DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
            SELECT @DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

            UPDATE [LEDGER_RETENTION_CONTROL]
            SET [ACTIVE] = 0
            FROM [LEDGER_RETENTION_CONTROL]
                     JOIN [COMMERCIAL_ESTABLISHMENT]
                          ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
            WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
              AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
              AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
                OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
                OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
        END;

    /************************************************
    *********** UPDATE TRANSLATE AFFILIATED *********
    ************************************************/

    IF @HAS_TRANSLATION = 0
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;
        END;
    ELSE
        BEGIN
            IF (SELECT COUNT(*)
                FROM [SERVICES_AVAILABLE]
                WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
                  AND [COD_COMP] = @COD_COMP
                  AND [COD_AFFILIATOR] = @CODAFFILIATED
                  AND [COD_EC] IS NULL
                  AND [ACTIVE] = 1)
                = 0
                BEGIN
                    INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                      [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
                    VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1,
                            current_timestamp);
                END;
        END;

    /***************************************************
    *********** UPDATE NOTIFICATION AFFILIATED *********
    ***************************************************/

    IF @HAS_NOTIFICATION = 0
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;

            UPDATE [ACCESS_APPAPI]
            SET [ACTIVE] = 0
            WHERE [COD_AFFILIATOR] = @CODAFFILIATED
              AND [ACTIVE] = 1;
        END;
    ELSE
        IF @HAS_CREDENTIAL = 0
            AND @HAS_NOTIFICATION = 1
            BEGIN
                UPDATE [SERVICES_AVAILABLE]
                SET [ACTIVE]      = 0
                  , [COD_USER]    = @COD_USER_ALT
                  , [MODIFY_DATE] = current_timestamp
                WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
                  AND [COD_COMP] = @COD_COMP
                  AND [COD_AFFILIATOR] = @CODAFFILIATED
                  AND [COD_EC] IS NULL;

                INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                  [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
                VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1,
                        current_timestamp);

                EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
                    , @PASSWORD_NOTIFICATION
                    , @CLIENTID_NOTIFICATION;
            END

    /*******************************************
    *********** UPDATE BILLET AFFILIATED *******
    *******************************************/

    IF (SELECT COUNT(*)
        FROM [SERVICES_AVAILABLE]
        WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
          AND [COD_AFFILIATOR] = @CODAFFILIATED
          AND [COD_EC] IS NULL
          AND [ACTIVE] = 1)
        > 0
        BEGIN
            IF @HAS_BILLET = 0
                BEGIN
                    UPDATE [SERVICES_AVAILABLE]
                    SET [ACTIVE]      = 0
                      , [COD_USER]    = @COD_USER_ALT
                      , [MODIFY_DATE] = current_timestamp
                    WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
                      AND [COD_COMP] = @COD_COMP
                      AND [COD_AFFILIATOR] = @CODAFFILIATED
                      AND [COD_EC] IS NULL;
                END;
            IF @HAS_SPLIT_BILLET = 0
                BEGIN
                    UPDATE [SERVICES_AVAILABLE]
                    SET [ACTIVE]      = 0
                      , [COD_USER]    = @COD_USER_ALT
                      , [MODIFY_DATE] = current_timestamp
                    WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
                      AND [COD_COMP] = @COD_COMP
                      AND [COD_AFFILIATOR] = @CODAFFILIATED
                      AND [COD_EC] IS NULL;
                END;
            ELSE
                BEGIN
                    IF @BILLET_TAX > (SELECT MIN([BILLET_TAX])
                                      FROM [COMMERCIAL_ESTABLISHMENT]
                                      WHERE [COD_AFFILIATOR] = @CODAFFILIATED
                                        AND [BILLET_TAX] <> 0
                                        AND [ACTIVE] = 1)
                        THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
                END;
        END;
    ELSE
        IF @HAS_BILLET = 1
            BEGIN
                INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                  [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
                VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1,
                        current_timestamp, @BILLET_TAX);
            END;

    IF @HAS_SPLIT_BILLET = 1
        BEGIN
            INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                              [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
            VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1,
                    current_timestamp, @BILLET_TAX);
        END;

    UPDATE AFFILIATOR
    SET BILLET_TAX = @BILLET_TAX
    WHERE COD_AFFILIATOR = @CODAFFILIATED;

    /*******************************************
    *********** UPDATE MULTIEC AFFILIATED *******
    *******************************************/

    IF (@MULTIEC_ACTIVE = 0)
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;
        END
    ELSE
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;

            INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                              [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
            VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1,
                    current_timestamp, 1);
        END

    /*******************************************
        *********** TCU DETAILED *******
    *******************************************/

    IF (@TCU_DETAILED = 0)
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
              AND [COD_COMP] = @COD_COMP
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_EC] IS NULL;
        END
    ELSE
        IF NOT EXISTS(SELECT COD_ITEM_SERVICE
                      FROM [SERVICES_AVAILABLE]
                      WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
                        AND [COD_COMP] = @COD_COMP
                        AND [COD_AFFILIATOR] = @CODAFFILIATED
                        AND [COD_EC] IS NULL
                        AND [ACTIVE] = 1)
            BEGIN
                INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                  [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
                VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1,
                        current_timestamp, 1);
            END

    /*******************************************
        *********** Plano DZero *******
    *******************************************/

    IF @PLANDZERO = 0
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = current_timestamp
            WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
              AND [COD_AFFILIATOR] = @CODAFFILIATED;
        END
    ELSE
        IF NOT EXISTS(SELECT COD_ITEM_SERVICE
                      FROM [SERVICES_AVAILABLE]
                      WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
                        AND [COD_COMP] = @COD_COMP
                        AND [COD_AFFILIATOR] = @CODAFFILIATED
                        AND [COD_EC] IS NULL
                        AND [ACTIVE] = 1)
            BEGIN
                INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                  [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
                                                  CONFIG_JSON)
                VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1,
                        current_timestamp, 1, @PlanDZeroJson);
            END
        ELSE
            BEGIN

                UPDATE [SERVICES_AVAILABLE]
                SET CONFIG_JSON = @PlanDZeroJson
                  , COD_USER    = @COD_USER_ALT
                  , MODIFY_DATE = GETDATE()
                WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
                  AND [COD_COMP] = @COD_COMP
                  AND [COD_AFFILIATOR] = @CODAFFILIATED
                  AND [COD_EC] IS NULL
                  AND [ACTIVE] = 1

                DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
                DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
                DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

                UPDATE [SERVICES_AVAILABLE]
                SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
                  , MODIFY_DATE = GETDATE()
                WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
                  AND [COD_AFFILIATOR] = @CODAFFILIATED
                  AND [COD_EC] IS NOT NULL
                  AND [ACTIVE] = 1
                  AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

                UPDATE [SERVICES_AVAILABLE]
                SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
                  , MODIFY_DATE = GETDATE()
                WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
                  AND [COD_AFFILIATOR] = @CODAFFILIATED
                  AND [COD_EC] IS NOT NULL
                  AND [ACTIVE] = 1
                  AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

                IF @CELERONLY = 'true'
                    BEGIN
                        DECLARE @CODBKCELER INT
                        SELECT @CODBKCELER = COD_BANK
                        FROM BANKS
                        WHERE NAME = 'CELER DIGITAL'

                        UPDATE SA
                        SET ACTIVE      = 0
                          , MODIFY_DATE = GETDATE()
                        FROM [SERVICES_AVAILABLE] SA
                                 JOIN BANK_DETAILS_EC BDE
                                      ON SA.COD_EC = BDE.COD_EC
                                          AND BDE.ACTIVE = 1
                                          AND IS_CERC = 0
                                          AND COD_BANK != @CODBKCELER
                        WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
                          AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
                          AND SA.[COD_EC] IS NOT NULL
                          AND SA.[ACTIVE] = 1
                    END
            END

    /*******************************************
        *********** TEF API *******
    *******************************************/

    UPDATE ACCESS_TEF_API
    SET ACTIVE          = 0
      , MODIFIED_DATE   = GETDATE()
      , COD_USER_MODIFY = @COD_USER_ALT
    WHERE COD_AFFILIATOR = @CODAFFILIATED
      AND ACTIVE = 1;

    IF @TefApiActive = 0
        BEGIN
            UPDATE [SERVICES_AVAILABLE]
            SET [ACTIVE]      = 0
              , [COD_USER]    = @COD_USER_ALT
              , [MODIFY_DATE] = GETDATE()
            WHERE ACTIVE = 1
              AND [COD_AFFILIATOR] = @CODAFFILIATED
              AND [COD_ITEM_SERVICE] = @COD_TEF_API
              AND COD_EC IS NULL;
        END
    ELSE
        BEGIN

            IF NOT EXISTS(SELECT COD_SERVICE
                          FROM SERVICES_AVAILABLE
                          WHERE [COD_AFFILIATOR] = @CODAFFILIATED
                            AND [COD_ITEM_SERVICE] = @COD_TEF_API
                            AND COD_EC IS NULL)
                BEGIN
                    INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
                                                      [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE],
                                                      [COD_OPT_SERV],
                                                      CONFIG_JSON)
                    VALUES (GETDATE(), @COD_USER_ALT, @COD_TEF_API, @COD_COMP, @CODAFFILIATED, NULL, 1, GETDATE(), 1,
                            @TefApiJson);
                END
            ELSE
                BEGIN
                    UPDATE [SERVICES_AVAILABLE]
                    SET [ACTIVE]      = 1
                      , [COD_USER]    = @COD_USER_ALT
                      , [MODIFY_DATE] = GETDATE()
                      , CONFIG_JSON   = @TefApiJson
                    WHERE [COD_AFFILIATOR] = @CODAFFILIATED
                      AND [COD_ITEM_SERVICE] = @COD_TEF_API
                      AND COD_EC IS NULL;
                END

            SELECT a.CodAc
                 , a.PASSWORD
            INTO #Acqs
            FROM OPENJSON(@TefApiJson) WITH (ACQUIRER NVARCHAR(MAX) '$.Acquirer' AS JSON) AS i
                     CROSS APPLY (SELECT *
                                  FROM OPENJSON(i.ACQUIRER)
                                                WITH (CodAc INT '$.CodAc', PASSWORD VARCHAR(64) '$.Password')) a

            DECLARE @COD_AC INT;
            DECLARE @Password VARCHAR(64);
            DECLARE _ACS CURSOR FOR SELECT CodAc
                                         , PASSWORD
                                    FROM #Acqs;

            OPEN _ACS

            FETCH NEXT FROM _ACS INTO @COD_AC, @Password

            WHILE @@fetch_status = 0
                BEGIN
                    EXEC SP_CREATE_TEF_LOGIN @Password
                        , @COD_AC
                        , @CODAFFILIATED
                        , @TefApiActive
                        , @COD_USER_ALT
                        , 0
                        , @COD_COMP

                    FETCH NEXT FROM _ACS INTO @COD_AC, @Password
                END;

            CLOSE _ACS
            DEALLOCATE _ACS;
        END

    /*******************************************
        *********** Split Program *******
    *******************************************/
    
    IF @SplitProgrammed = 0 BEGIN
        UPDATE SERVICES_AVAILABLE SET ACTIVE = 0, MODIFY_DATE = GETDATE(), COD_USER = @COD_USER_ALT
        WHERE ACTIVE = 1 AND COD_ITEM_SERVICE = @COD_SPLIT_PROG AND COD_AFFILIATOR = @CODAFFILIATED
    END ELSE IF NOT EXISTS(SELECT COD_SERVICE 
                FROM SERVICES_AVAILABLE 
                WHERE ACTIVE = 1 AND 
                      COD_ITEM_SERVICE = @COD_SPLIT_PROG AND 
                      COD_AFFILIATOR = @CODAFFILIATED AND 
                      COD_EC IS NULL) 
    BEGIN
        INSERT INTO SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR)
        VALUES (@COD_USER_ALT, @COD_SPLIT_PROG, @COD_COMP, @CODAFFILIATED)
    END

END;
go


IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
    DROP PROCEDURE SP_UP_SERVICES
GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]
/*----------------------------------------------------------------------------------------            
    Procedure Name: [SP_UP_SERVICES]             
    Project.......: TKPP            
------------------------------------------------------------------------------------------            
    Author    VERSION   Date   Description             
------------------------------------------------------------------------------------------             
    Caike Ucha   V1    04/09/2019  Creation             
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split             
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda             
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online                   
    Elir Ribeiro  v6    2020-04-17  addd split boleto online    
    Caike Ucha    V7    2020-04-22  add multi ec  
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero  
	  Caike uchoa   v9    2020-10-27  alter planDzero
    Luiz Aquino   v10   2020-10-29  ET-693 Split Programado
------------------------------------------------------------------------------------------*/ 
  (@COD_EC INT,
  @COD_AFFILIATOR INT,
  @COD_USER INT,
  @SERVICE_NAME VARCHAR(100),
  @VALUE DECIMAL(22, 6),
  @ACTIVE INT,
  @TAX_AFILIATOR DECIMAL(22, 6) = NULL,
  @BILLET_TAX DECIMAL(22, 6) = NULL,
  @VALUE_TAX_BILLET DECIMAL(22, 6) = 0,
  @CONFIG_JSON VARCHAR(512) = NULL)
AS

DECLARE @COD_ITEM_SERVICE INT;
DECLARE @ONLINE_ACTIVE INT;
DECLARE @CREDENCIAL INT;

SELECT @CREDENCIAL = TRANSACTION_ONLINE
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
BEGIN
    SELECT @COD_ITEM_SERVICE = COD_ITEM_SERVICE
    FROM ITEMS_SERVICES_AVAILABLE
    WHERE [NAME] = @SERVICE_NAME

    IF @SERVICE_NAME = 'CREDENTIALS'
        BEGIN
            IF (@ACTIVE = 1)
                BEGIN
                    IF ((SELECT COUNT(*)
                         FROM COMMERCIAL_ESTABLISHMENT
                         WHERE USER_ONLINE IS NULL
                           AND COD_EC = @COD_EC)
                        > 0)
                        UPDATE COMMERCIAL_ESTABLISHMENT
                        SET USER_ONLINE     = NEXT VALUE FOR [SEQ_TR_ON_EC]
                          , PWD_ONLINE      = CONVERT(VARCHAR(255), NEWID())
                          , HAS_CREDENTIALS = 1
                        WHERE COD_EC = @COD_EC;
                    ELSE
                        UPDATE COMMERCIAL_ESTABLISHMENT
                        SET HAS_CREDENTIALS = 1
                        WHERE COD_EC = @COD_EC;
                END
            ELSE
                UPDATE COMMERCIAL_ESTABLISHMENT
                SET HAS_CREDENTIALS = 0
                WHERE COD_EC = @COD_EC;
        END

    IF @SERVICE_NAME = 'SPOT'
        BEGIN
            IF (@ACTIVE = 1
                AND @COD_AFFILIATOR IS NOT NULL
                AND (SELECT COUNT(*)
                     FROM SERVICES_AVAILABLE
                     WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                       AND COD_AFFILIATOR = @COD_AFFILIATOR
                       AND COD_EC IS NULL
                       AND ACTIVE = 1)
                    <= 0)
                THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

            IF (@ACTIVE = 0)
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1

                    UPDATE COMMERCIAL_ESTABLISHMENT
                    SET SPOT_TAX = 0
                    WHERE COD_EC = @COD_EC
                END
            ELSE
                BEGIN
                    IF (@COD_AFFILIATOR IS NULL
                        AND @VALUE <= 0)
                        THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

                    UPDATE COMMERCIAL_ESTABLISHMENT
                    SET SPOT_TAX = @VALUE
                    WHERE COD_EC = @COD_EC;
                END
        END

    IF @SERVICE_NAME = 'BOLETO'
        BEGIN
            IF (@ACTIVE = 1
                AND @COD_AFFILIATOR IS NOT NULL
                AND (SELECT COUNT(*)
                     FROM SERVICES_AVAILABLE
                     WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                       AND COD_AFFILIATOR = @COD_AFFILIATOR
                       AND COD_EC IS NULL
                       AND ACTIVE = 1)
                    <= 0)
                THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

            IF (@ACTIVE = 0)
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1

                    UPDATE COMMERCIAL_ESTABLISHMENT
                    SET BILLET_TAX = 0
                    WHERE COD_EC = @COD_EC
                END
            ELSE
                BEGIN
                    IF (@COD_AFFILIATOR IS NULL
                        AND @VALUE_TAX_BILLET <= 0)
                        THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL,
                            @VALUE_TAX_BILLET)

                    UPDATE COMMERCIAL_ESTABLISHMENT
                    SET BILLET_TAX = @VALUE_TAX_BILLET
                    WHERE COD_EC = @COD_EC;
                END
        END

    IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
        BEGIN
            IF (@ACTIVE = 1
                AND @COD_AFFILIATOR IS NOT NULL
                AND (SELECT COUNT(*)
                     FROM SERVICES_AVAILABLE
                     WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                       AND COD_AFFILIATOR = @COD_AFFILIATOR
                       AND COD_EC IS NULL
                       AND ACTIVE = 1)
                    <= 0)
                THROW 61073, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

            IF (@ACTIVE = 0)
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1
                END
            ELSE
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
                END
        END

    IF @SERVICE_NAME = 'SPLIT'
        BEGIN
            IF @ACTIVE = 1
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1;

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL,
                            (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
                END
            ELSE
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1
                END;
        END

    IF @SERVICE_NAME = 'PARCELADOCLIENTE'
        BEGIN
            SELECT TOP 1 @ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
            FROM SERVICES_AVAILABLE
                     INNER JOIN ITEMS_SERVICES_AVAILABLE
                                ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
            WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
              AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
              AND SERVICES_AVAILABLE.ACTIVE = 1

            IF @ACTIVE = 1
                AND (@ONLINE_ACTIVE = 0
                    OR @ONLINE_ACTIVE IS NULL)
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1;

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
                END
            ELSE
                BEGIN
                    IF @ACTIVE = 0
                        BEGIN
                            UPDATE SERVICES_AVAILABLE
                            SET ACTIVE      = 0
                              , COD_USER    = @COD_USER
                              , MODIFY_DATE = GETDATE()
                            WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                              AND (COD_AFFILIATOR IS NULL
                                OR COD_AFFILIATOR = @COD_AFFILIATOR)
                              AND COD_EC = @COD_EC
                              AND ACTIVE = 1;
                        END
                END;
        END

    IF @SERVICE_NAME = 'POSWEBDIRECT'
        BEGIN
            SELECT TOP 1 @ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
            FROM SERVICES_AVAILABLE
                     INNER JOIN ITEMS_SERVICES_AVAILABLE
                                ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
            WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
              AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
              AND SERVICES_AVAILABLE.ACTIVE = 1

            IF @ACTIVE = 1
                AND (@ONLINE_ACTIVE = 0
                    OR @ONLINE_ACTIVE IS NULL)
                BEGIN
                    IF (SELECT COUNT(COD_SOURCE_TRAN)
                        FROM ASS_TAX_DEPART
                                 INNER JOIN DEPARTMENTS_BRANCH
                                            ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
                                 INNER JOIN BRANCH_EC
                                            ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
                                 INNER JOIN COMMERCIAL_ESTABLISHMENT
                                            ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
                        WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
                          AND ASS_TAX_DEPART.ACTIVE = 1
                          AND COD_SOURCE_TRAN = 1)
                        = 0
                        THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

                    IF (SELECT COUNT(*)
                        FROM COMMERCIAL_ESTABLISHMENT
                                 LEFT JOIN AFFILIATOR
                                           ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
                                 LEFT JOIN PLAN_TAX_AFFILIATOR
                                           ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
                        WHERE COD_EC = @COD_EC
                          AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
                            OR COD_SOURCE_TRAN IS NULL))
                        = 0
                        THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
                END
            IF @ACTIVE = 0
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1;
                END;
        END

    IF @SERVICE_NAME = 'TRANSACTIONONLINE'
        BEGIN
            IF (@CREDENCIAL = 0
                AND @ACTIVE = 1)
                BEGIN
                    IF (SELECT COUNT(COD_SOURCE_TRAN)
                        FROM ASS_TAX_DEPART
                                 INNER JOIN DEPARTMENTS_BRANCH
                                            ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
                                 INNER JOIN BRANCH_EC
                                            ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
                                 INNER JOIN COMMERCIAL_ESTABLISHMENT
                                            ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
                        WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
                          AND ASS_TAX_DEPART.ACTIVE = 1
                          AND COD_SOURCE_TRAN = 1)
                        = 0
                        THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

                    IF (SELECT COUNT(*)
                        FROM COMMERCIAL_ESTABLISHMENT
                                 LEFT JOIN AFFILIATOR
                                           ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
                                 LEFT JOIN PLAN_TAX_AFFILIATOR
                                           ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
                        WHERE COD_EC = @COD_EC
                          AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
                            OR COD_SOURCE_TRAN IS NULL))
                        = 0
                        THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

                    UPDATE COMMERCIAL_ESTABLISHMENT
                    SET TRANSACTION_ONLINE = 1
                    WHERE COD_EC = @COD_EC;
                END
            ELSE
                BEGIN
                    IF (@CREDENCIAL = 1
                        AND @ACTIVE = 0)
                        BEGIN
                            UPDATE COMMERCIAL_ESTABLISHMENT
                            SET TRANSACTION_ONLINE = 0
                            WHERE COD_EC = @COD_EC;
                        END
                END
        END

    IF @SERVICE_NAME = 'LEDGER_RETENTION'
        BEGIN
            IF @ACTIVE = 1
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1;

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
                END
            ELSE
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1
                END;
        END;

    IF @SERVICE_NAME = 'MULTIEC'
        BEGIN
            IF (@ACTIVE = 1
                AND @COD_AFFILIATOR IS NOT NULL
                AND (SELECT COUNT(*)
                     FROM SERVICES_AVAILABLE
                     WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                       AND COD_AFFILIATOR = @COD_AFFILIATOR
                       AND COD_EC IS NULL
                       AND ACTIVE = 1)
                    <= 0)
                THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

            IF @ACTIVE = 1
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1;

                    INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
                                                    COD_EC, ACTIVE, MODIFY_DATE)
                    VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
                END
            ELSE
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1
                END;
        END;

    IF @SERVICE_NAME = 'PlanDZero'
        BEGIN
            IF (@ACTIVE = 1
                AND @COD_AFFILIATOR IS NOT NULL
                AND NOT EXISTS(SELECT COD_ITEM_SERVICE
                               FROM SERVICES_AVAILABLE
                               WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                                 AND COD_AFFILIATOR = @COD_AFFILIATOR
                                 AND COD_EC IS NULL
                                 AND ACTIVE = 1)
                )
                THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;


            IF @ACTIVE = 1
                BEGIN

                    DECLARE @AFFCONFIG NVARCHAR(512)
                    DECLARE @CODBKCELER INT

                    SELECT @AFFCONFIG = CONFIG_JSON
                    FROM SERVICES_AVAILABLE
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND COD_AFFILIATOR = @COD_AFFILIATOR
                      AND COD_EC IS NULL
                      AND ACTIVE = 1
                    SELECT @CODBKCELER = COD_BANK
                    FROM BANKS
                    WHERE NAME = 'CELER DIGITAL'

                    IF EXISTS(SELECT COD_BANK
                              FROM BANK_DETAILS_EC BDE
                                       JOIN BANK_DETAILS_CERC_INFO BDCI
                                            ON BDE.COD_BK_EC = BDCI.COD_BK_EC
                              WHERE COD_EC = @COD_EC
                                AND ACTIVE = 1
                                AND IS_CERC = 1
                                AND END_DATE > GETDATE()
                                AND BDCI.COD_SITUATION = 3)
                        THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

                    IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
                        AND NOT EXISTS(SELECT 1
                                       FROM BANK_DETAILS_EC
                                       WHERE COD_EC = @COD_EC
                                         AND ACTIVE = 1
                                         AND COD_BANK = @CODBKCELER)
                        THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

                    IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) >
                       CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
                        BEGIN
                            SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit',
                                                           CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
                        END

                    IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) >
                       CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))
                        BEGIN
                            SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit',
                                                           CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
                        END

                    IF EXISTS(SELECT COD_ITEM_SERVICE
                              FROM SERVICES_AVAILABLE
                              WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                                AND COD_AFFILIATOR = @COD_AFFILIATOR
                                AND COD_EC = @COD_EC
                                AND ACTIVE = 1)
                        BEGIN
                            UPDATE SERVICES_AVAILABLE
                            SET CONFIG_JSON = @CONFIG_JSON
                              , COD_USER    = @COD_EC
                              , MODIFY_DATE = GETDATE()
                            WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                              AND COD_AFFILIATOR = @COD_AFFILIATOR
                              AND COD_EC = @COD_EC
                              AND ACTIVE = 1
                        END
                    ELSE
                        BEGIN
                            INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
                                                            COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
                            VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL,
                                    @CONFIG_JSON)
                        END
                END
            ELSE
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_EC = @COD_EC
                      AND ACTIVE = 1
                END
        END

    IF @SERVICE_NAME = 'ApiTef'
        BEGIN

            IF @ACTIVE = 0
                BEGIN
                    UPDATE SERVICES_AVAILABLE
                    SET ACTIVE      = 0
                      , COD_USER    = @COD_USER
                      , MODIFY_DATE = GETDATE()
                    WHERE ACTIVE = 1
                      AND (COD_AFFILIATOR IS NULL
                        OR COD_AFFILIATOR = @COD_AFFILIATOR)
                      AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                      AND COD_EC = @COD_EC;
                END
            ELSE
                BEGIN

                    IF NOT EXISTS(SELECT COD_SERVICE
                                  FROM SERVICES_AVAILABLE
                                  WHERE (COD_AFFILIATOR IS NULL
                                      OR COD_AFFILIATOR = @COD_AFFILIATOR)
                                    AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                                    AND COD_EC = @COD_EC)
                        BEGIN

                            INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
                                                            COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
                            VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL,
                                    @CONFIG_JSON)

                        END
                    ELSE
                        BEGIN

                            UPDATE SERVICES_AVAILABLE
                            SET ACTIVE      = 1
                              , MODIFY_DATE = GETDATE()
                              , COD_USER    = @COD_USER
                            WHERE (COD_AFFILIATOR IS NULL
                                OR COD_AFFILIATOR = @COD_AFFILIATOR)
                              AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                              AND COD_EC = @COD_EC;

                        END
                END
        END

    IF @SERVICE_NAME = 'SplitProgrammed' BEGIN
        IF @ACTIVE = 1 AND @COD_AFFILIATOR IS NOT NULL BEGIN
            IF NOT EXISTS(SELECT COD_SERVICE
                          FROM SERVICES_AVAILABLE
                          WHERE ACTIVE = 1 AND
                                  COD_AFFILIATOR = @COD_AFFILIATOR AND
                                  COD_ITEM_SERVICE = @COD_ITEM_SERVICE AND
                              COD_EC IS NULL) BEGIN
                SET @ACTIVE = 0;
                THROW 61080, 'AFFILIATED DOES NOT HAVE SplitProgrammed SERVICE', 1;
            END
        END

        IF @ACTIVE = 1 AND NOT EXISTS(SELECT COD_SERVICE
                                      FROM SERVICES_AVAILABLE WHERE ACTIVE = 1
                                                                AND (@COD_AFFILIATOR IS NULL OR COD_AFFILIATOR = @COD_AFFILIATOR)
                                                                AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
                                                                AND COD_EC = @COD_EC) BEGIN
            INSERT SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, MODIFY_DATE, CONFIG_JSON, SERVICE_AMOUNT)
            VALUES (@COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, GETDATE(), @CONFIG_JSON, NULL)
        END ELSE BEGIN
            UPDATE SERVICES_AVAILABLE
            SET CONFIG_JSON = IIF(@ACTIVE = 1, @CONFIG_JSON, CONFIG_JSON)
              , COD_USER    = @COD_USER
              , MODIFY_DATE = GETDATE()
              , ACTIVE = @ACTIVE
            WHERE ACTIVE = 1
              AND (@COD_AFFILIATOR IS NULL OR COD_AFFILIATOR = @COD_AFFILIATOR)
              AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
              AND COD_EC = @COD_EC;
        END
    END
END;
go

IF OBJECT_ID('SP_LS_EC_AFFILIATOR') IS NOT NULL
    DROP PROCEDURE SP_LS_EC_AFFILIATOR
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_AFFILIATOR]
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_LS_EC_AFFILIATOR]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author VERSION Date Description  
------------------------------------------------------------------------------------------  
Gian Luca Dalle Cort V1 02/08/2018 CREATION  
LUCAS AGUIAR V2 08/04/2019 PEGAR O SERVIÇO CERTO E ADD GROUP BY  
Caike Uchôa V3 31/05/2019 Ajuste no Left join da service_avaliable  
Caike Uchôa V4 23/09/2019 pegar o COD_RISK_SITUATION  
---------------------------------------- --------------------------------------------------*/ 
(
    @COD_AFFILIATOR INT,
    @HAS_SPOT INT = NULL,
    @COD_SALES_REP INT = NULL,
    @Prefix VARCHAR(128) = null
)
AS
DECLARE @QUERY_ NVARCHAR(MAX)
BEGIN
    SET @QUERY_ = N'
     SELECT  
          EC.COD_EC 
        , EC.CPF_CNPJ
        , EC.NAME
        , EC.TRADING_NAME  
        , BRANCH_EC.COD_BRANCH
        , AFFILIATOR.NAME AS ''AFL_NAME''  
        , AFFILIATOR.COD_AFFILIATOR
        , ISNULL(SPOT.ACTIVE, 0) AS HAS_SPOT  
        , EC.DEFAULT_EC  
        , EC.COD_RISK_SITUATION  
        , RISK_SITUATION.SITUATION_EC
    FROM COMMERCIAL_ESTABLISHMENT EC
        JOIN BRANCH_EC ON BRANCH_EC.COD_EC = EC.COD_EC  
        LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR  
        LEFT JOIN SERVICES_AVAILABLE SPOT ON EC.COD_EC = SPOT.COD_EC AND SPOT.COD_ITEM_SERVICE = 1 AND SPOT.ACTIVE= 1  
        JOIN RISK_SITUATION ON RISK_SITUATION.COD_RISK_SITUATION = EC.COD_RISK_SITUATION
     WHERE EC.COD_AFFILIATOR = @COD_AFFILIATOR AND 
           EC.ACTIVE = 1 AND 
           BRANCH_EC.TYPE_BRANCH = ''PRINCIPAL'' ';
    
    IF @HAS_SPOT IS NOT NULL
        SET @QUERY_ = @QUERY_ + N' AND SPOT.ACTIVE = @HAS_SPOT';
    
    IF @COD_SALES_REP IS NOT NULL
        SET @QUERY_ = @QUERY_ + N' AND EC.COD_SALES_REP = @COD_SALES_REP';
    
    IF @Prefix IS NOT NULL BEGIN
        SET @QUERY_ = @QUERY_ + N' AND (EC.NAME LIKE @Prefix OR EC.TRADING_NAME LIKE @Prefix OR EC.CPF_CNPJ LIKE @Prefix) ';
        SET @Prefix = CONCAT('%', @Prefix, '%')
    END
        
    SET @QUERY_ = @QUERY_ + N' GROUP BY EC.COD_EC,
                                      EC.CPF_CNPJ,
                                      EC.NAME,
                                      EC.TRADING_NAME,
                                      BRANCH_EC.COD_BRANCH,
                                      AFFILIATOR.NAME,
                                      AFFILIATOR.COD_AFFILIATOR,
                                      SPOT.ACTIVE,
                                      EC.DEFAULT_EC,
                                      EC.COD_RISK_SITUATION, 
                                      RISK_SITUATION.SITUATION_EC';
    
        EXEC sp_executesql @QUERY_,N'
            @COD_AFFILIATOR INT,
            @HAS_SPOT INT,
            @COD_SALES_REP INT,
            @Prefix VARCHAR(128)
            ',
            @COD_AFFILIATOR = @COD_AFFILIATOR,
            @HAS_SPOT = @HAS_SPOT,
            @COD_SALES_REP = @COD_SALES_REP,
            @Prefix = @Prefix;
END;
go

IF OBJECT_ID('SP_GEN_SPLIT_PRG_TITLES') IS NOT NULL
    DROP PROCEDURE SP_GEN_SPLIT_PRG_TITLES
GO
CREATE PROCEDURE SP_GEN_SPLIT_PRG_TITLES
(
    @COD_TRAN INT
)
AS
BEGIN

    DECLARE @CONFIG_JSON NVARCHAR(512),
        @DOC_EC_TRAN VARCHAR(100),
        @SPLIT_INFO ITEM_SPLIT,
        @COD_AFF INT,
        @AMOUNT DECIMAL(22, 6),
        @COD_SITUATION INT,
        @NSU VARCHAR(100),
        @COD_EC INT;

    SELECT @COD_AFF = COD_AFFILIATOR, @AMOUNT = AMOUNT, @COD_SITUATION = COD_SITUATION, @NSU = CODE, @COD_EC = COD_EC
    FROM [TRANSACTION]
    WHERE COD_TRAN = @COD_TRAN

    IF @COD_SITUATION != 22 BEGIN
        UPDATE [TRANSACTION] SET COD_SITUATION = 22, MODIFY_DATE = GETDATE()
        WHERE COD_TRAN = @COD_TRAN
    end

    DECLARE @COD_SPLIT_PROG INT;    
    SELECT @COD_SPLIT_PROG = COD_ITEM_SERVICE FROM ITEMS_SERVICES_AVAILABLE WHERE NAME = 'SplitProgrammed';
    
    INSERT INTO TRANSACTION_SERVICES (COD_ITEM_SERVICE, COD_TRAN, MODIFY_DATE, TAX_PLANDZERO_EC, COD_EC, TAX_PLANDZERO_AFF) 
    VALUES(@COD_SPLIT_PROG, @COD_TRAN, GETDATE(), NULL, NULL, NULL)
    
    SELECT @DOC_EC_TRAN = CODE
    FROM COMMERCIAL_ESTABLISHMENT CE
    WHERE CE.COD_EC = @COD_EC;

    SELECT @CONFIG_JSON = CONFIG_JSON
    FROM SERVICES_AVAILABLE SA
    WHERE SA.ACTIVE = 1 AND ( @COD_AFF IS NULL OR COD_AFFILIATOR = @COD_AFF) AND SA.COD_ITEM_SERVICE = @COD_SPLIT_PROG AND COD_EC = @COD_EC;

    SELECT e.COD_EC, e.PERCENTAGE
    INTO #SPLIT_PRG
    FROM OPENJSON(@CONFIG_JSON) WITH ( Ecs NVARCHAR(MAX) '$.ecs' AS JSON ) i
             CROSS APPLY ( SELECT * FROM OPENJSON(i.Ecs) WITH ( COD_EC INT '$.codEc',  PERCENTAGE DECIMAL(5, 2) '$.value') ) e

    INSERT INTO @SPLIT_INFO (DOC_MERCHANT, DOC_AFFILIATOR, AMOUNT)
    SELECT CE.CPF_CNPJ [DOC_EC], A.CPF_CNPJ [DOC_AFF], ( (PRG.PERCENTAGE / 100) * @AMOUNT ) [AMOUNT]
    FROM #SPLIT_PRG PRG
             JOIN COMMERCIAL_ESTABLISHMENT CE on PRG.COD_EC = CE.COD_EC
             JOIN AFFILIATOR A ON CE.COD_AFFILIATOR = A.COD_AFFILIATOR;

    EXEC SP_GEN_SPLIT_TRANSACTION @SPLIT_INFO, @NSU, @DOC_EC_TRAN

END
GO


IF OBJECT_ID('SP_FD_PENDING_TITLES') IS NOT NULL
    DROP PROCEDURE SP_FD_PENDING_TITLES
GO
CREATE PROCEDURE SP_FD_PENDING_TITLES
AS
BEGIN

    DECLARE @TRAN_ID INT
        , @TRANCODE VARCHAR(100)
        , @COD_PRD_TRAN INT
        , @COD_AFF INT
        , @AMOUNT DECIMAL(22, 6)
        , @COD_SITUATION INT
        , @COD_EC INT
        , @HAS_SPLIT_PROGRAM INT
        , @WINDOW DATETIME = DATEADD(MINUTE, -5, GETDATE());

    DECLARE tran_cursor CURSOR FOR
    SELECT [TRANSACTION].COD_TRAN
        , [TRANSACTION].CODE
        , [TRANSACTION].COD_TRAN_PROD
        , [TRANSACTION].COD_AFFILIATOR
        , [TRANSACTION].AMOUNT
        , [TRANSACTION].COD_SITUATION
        , [TRANSACTION].COD_EC
        , IIF(EXISTS(
                      SELECT COD_SERVICE
                      FROM SERVICES_AVAILABLE SA
                          JOIN ITEMS_SERVICES_AVAILABLE ISA 
                                on SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE AND 
                                ISA.NAME = 'SplitProgrammed'
                      WHERE SA.ACTIVE = 1 AND
                              SA.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR AND
                              [TRANSACTION].COD_EC = SA.COD_EC), 1, 0) HAS_SPLIT_PROGRAM
    FROM [TRANSACTION] WITH (NOLOCK)
        INNER JOIN BRAND
                ON BRAND.[NAME] = [TRANSACTION].BRAND AND
                  BRAND.GEN_TITLES = 1
    WHERE   [TRANSACTION].COD_SITUATION IN (3, 22) AND 
            [TRANSACTION].CREATED_AT < @WINDOW AND
            NOT EXISTS(SELECT COD_TITLE FROM TRANSACTION_TITLES title WHERE title.COD_TRAN = [TRANSACTION].COD_TRAN)

    OPEN tran_cursor

    FETCH NEXT FROM tran_cursor
        INTO @TRAN_ID, @TRANCODE, @COD_PRD_TRAN, @COD_AFF, @AMOUNT, @COD_SITUATION, @COD_EC, @HAS_SPLIT_PROGRAM

    WHILE @@fetch_status = 0 BEGIN
        IF @HAS_SPLIT_PROGRAM = 1 BEGIN
            EXEC SP_GEN_SPLIT_PRG_TITLES @TRAN_ID
        END 
        ELSE IF @COD_PRD_TRAN IS NOT NULL BEGIN
            IF @COD_SITUATION = 22 BEGIN
                EXEC SP_GEN_TITLES_TRANS_PRD_TRAN @TRAN_ID
                    , @COD_PRD_TRAN
                    , @COD_AFF
                    , @AMOUNT
            END
        END 
        ELSE IF @COD_SITUATION = 3 BEGIN
            EXEC SP_GEN_TITLES_TRANS @TRANCODE
                , @TRAN_ID
        END;
        
        FETCH NEXT FROM tran_cursor
            INTO @TRAN_ID, @TRANCODE, @COD_PRD_TRAN, @COD_AFF, @AMOUNT, @COD_SITUATION, @COD_EC, @HAS_SPLIT_PROGRAM
    END

    CLOSE tran_cursor;
    DEALLOCATE tran_cursor;
END;
go

IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL
    DROP VIEW VW_REPORT_FULL_CASH_FLOW
GO
CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]
    /*----------------------------------------------------------------------------------------                                                  
    View Name: [VW_REPORT_FULL_CASH_FLOW]                                                  
    Project.......: TKPP                                                  
    ----------------------------------------------------------------------------------------                                                  
    Author                          VERSION        Date                        Description                                                  
    ---------------------------------------------------------------------------------------                                                   
    Caike Uch?a                       V1         30/03/2020            mdr afiliador-pela parcela                                   
    Caike Uch?a                       V2         30/04/2020               add colunas produto ec                            
    Caike Uch?a                       V3         03/08/2020                   add QTY_DAYS_ANTECIP                          
    Caike Uch?a                       V4         20/08/2020                Corre??o val liquid afiliador     
    Luiz Aquino                       v5         01/09/2020                    Plan DZero  
    Caike Uchoa                       v6         01/09/2020                   Add cod_ec_prod  
    Caike Uchoa                       V7         04/09/2020               Add correção qtd_days quando spot  
    ---------------------------------------------------------------------------------------*/
AS
WITH CTE AS
    (SELECT --TOP(1000)                                                               
      TRANSACTION_TITLES.TAX_INITIAL
       , TRANSACTION_TITLES.ANTICIP_PERCENT                                         AS ANTECIP_EC
       , COALESCE(AFFILIATOR.[NAME], 'CELER')                                       AS AFFILIATOR
       , [TRANSACTION_TYPE].CODE                                                    AS TRAN_TYPE
       , TRANSACTION_TITLES.PLOT
       , CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME)             AS TRANSACTION_DATE
       , COMMERCIAL_ESTABLISHMENT.[NAME]                                            AS MERSHANT
       , [TRANSACTION_TITLES].ACQ_TAX
       , [TRANSACTION_TITLES].PREVISION_PAY_DATE
       , [TRANSACTION_TITLES].PREVISION_RECEIVE_DATE
       , [TRANSACTION_TITLES].AMOUNT
       , [TRANSACTION].AMOUNT                                                       AS TRANSACTION_AMOUNT
       , [TRANSACTION].CODE                                                         AS NSU
       , [TRANSACTION].BRAND                                                        AS BRAND
       , ACQUIRER.[NAME]                                                            AS ACQUIRER
       , (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))             AS RATE
       , dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB
       , COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0)                     AS ANTECIP_AFF
       , COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0)                        AS MDR_AFF
       , IIF((SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
               FROM TRANSACTION_SERVICES
                        INNER JOIN ITEMS_SERVICES_AVAILABLE
                                   ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                      ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
               WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                 AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                 AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                                 > 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT,
                                                                                TRANSACTION_TITLES.PLOT,
                                                                                TRANSACTION_TITLES.TAX_INITIAL,
                                                                                TRANSACTION_TITLES.ANTICIP_PERCENT,
                                                                                (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                                                                                 FROM TRANSACTION_SERVICES
                                                                                          INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                                                                     ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                                                                        ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                                                                                 WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                                                                                   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                                                                   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                                 , [TRANSACTION].COD_TTYPE), dbo.[FNC_ANT_VALUE_LIQ_DAYS](
                                     TRANSACTION_TITLES.AMOUNT,
                                     TRANSACTION_TITLES.TAX_INITIAL,
                                     TRANSACTION_TITLES.PLOT,
                                     TRANSACTION_TITLES.ANTICIP_PERCENT,
                                     (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
                                                                                   TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                                                   TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                                          TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))) AS EC
       , 0                                       AS '0'
       , (IIF((SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
               FROM TRANSACTION_SERVICES
                        INNER JOIN ITEMS_SERVICES_AVAILABLE
                                   ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                      ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
               WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                 AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                 AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                                 > 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED
                                     (TRANSACTION_TITLES.AMOUNT,
                                        TRANSACTION_TITLES.PLOT,
                                        TRANSACTION_TITLES.TAX_INITIAL,
                                        TRANSACTION_TITLES.ANTICIP_PERCENT,
                                        (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                                         FROM TRANSACTION_SERVICES
                                                  INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                             ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                                ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                                         WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                                           AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                           AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                                 , [TRANSACTION].COD_TTYPE), (dbo.[FNC_ANT_VALUE_LIQ_DAYS]
                                     (
                                      TRANSACTION_TITLES.AMOUNT,
                                      TRANSACTION_TITLES.TAX_INITIAL,
                                      TRANSACTION_TITLES.PLOT,
                                      TRANSACTION_TITLES.ANTICIP_PERCENT,
                                      (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(
                                              DAY,
                                              TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                              TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                                           TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
                                      ) - (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))))) AS EC_TARIFF
       , [TRANSACTION].PLOTS                                                        AS TOTAL_PLOTS
       , dbo.[FNC_ANT_VALUE_LIQ_DAYS](
             TRANSACTION_TITLES.AMOUNT,
             COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),
             TRANSACTION_TITLES.PLOT,
             COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),
             (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                           TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))) AS AFF_DISCOUNT
       , dbo.[FNC_ANT_VALUE_LIQ_DAYS](
             (TRANSACTION_TITLES.AMOUNT),
             COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
                      TRANSACTION_TITLES.TAX_INITIAL),
             TRANSACTION_TITLES.PLOT,
             COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,
                      TRANSACTION_TITLES.ANTICIP_PERCENT)
         , (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                         TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
                 ))                                                                 AS AFF_DISCOUNT_TARIFF
       , (
             dbo.[FNC_ANT_VALUE_LIQ_DAYS]
             (
                 TRANSACTION_TITLES.AMOUNT,
                 COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
                          TRANSACTION_TITLES.TAX_INITIAL) +
                 (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL(
                         (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
                          FROM TRANSACTION_SERVICES
                                   INNER JOIN ITEMS_SERVICES_AVAILABLE
                                              ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                 ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                          WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                            AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                            AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                     , 0), 0)),
                 TRANSACTION_TITLES.PLOT,
                 [TRANSACTION_TITLES_COST].ANTICIP_PERCENT +
                 (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL(
                         (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
                          FROM TRANSACTION_SERVICES
                                   INNER JOIN ITEMS_SERVICES_AVAILABLE
                                              ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                 ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                          WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                            AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                            AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                     , 0), 0)),
                 (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
                                                               TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                               TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                      TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
             )
         -
         dbo.[FNC_ANT_VALUE_LIQ_DAYS](
                 TRANSACTION_TITLES.AMOUNT,
                 TRANSACTION_TITLES.TAX_INITIAL + (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL(
                         (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                          FROM TRANSACTION_SERVICES
                                   INNER JOIN ITEMS_SERVICES_AVAILABLE
                                              ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                 ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                          WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                            AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                            AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                     , 0), 0)),
                 TRANSACTION_TITLES.PLOT,
                 TRANSACTION_TITLES.ANTICIP_PERCENT + (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL(
                         (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                          FROM TRANSACTION_SERVICES
                                   INNER JOIN ITEMS_SERVICES_AVAILABLE
                                              ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                 ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                          WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                            AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                            AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                     , 0), 0)),
                 (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
                                                               TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                               TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                      TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))
     )                                                                          AS AFF
   , ((
              dbo.[FNC_ANT_VALUE_LIQ_DAYS]
                  ((TRANSACTION_TITLES.AMOUNT),
                   COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL)
                       +
                   (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL(
                           (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
                            FROM TRANSACTION_SERVICES
                                     INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                   ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                            WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                              AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                              AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                       , 0), 0))
                  ,
                   TRANSACTION_TITLES.PLOT,
                   COALESCE(
                           [TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT)
                       +
                   (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL(
                           (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
                            FROM TRANSACTION_SERVICES
                                     INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                   ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                            WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                              AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                              AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                       , 0), 0))
                  ,
                   (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
                                                                 TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                                 TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                        TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
                       ))
              -
              dbo.[FNC_ANT_VALUE_LIQ_DAYS](
                      (TRANSACTION_TITLES.AMOUNT),
                      TRANSACTION_TITLES.TAX_INITIAL
                          + (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL(
                              (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                               FROM TRANSACTION_SERVICES
                                        INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                   ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                      ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                               WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                                 AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                 AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                          , 0), 0))
                  ,
                      TRANSACTION_TITLES.PLOT,
                      TRANSACTION_TITLES.ANTICIP_PERCENT
                          + (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL(
                              (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                               FROM TRANSACTION_SERVICES
                                        INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                   ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                      ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                               WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                                 AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                 AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
                          , 0), 0))
                  ,
                      (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
                                                                    TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                                    TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                           TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))
          )
          + (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))
     -
      (IIF(TRANSACTION_TITLES.PLOT = 1, ISNULL([TRANSACTION_TITLES_COST].RATE_PLAN, 0), 0))
     )
                                                                                AS AFF_TARIFF
   , [TRANSACTION].COD_ASS_TR_COMP
   , TRANSACTION_TITLES.COD_TITLE
   , CE_DESTINY.COD_EC
   , COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   , BRANCH_EC.COD_BRANCH
   , DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
   , [TRANSACTION].PAN
   , COMMERCIAL_ESTABLISHMENT.CPF_CNPJ                                          AS 'CPF_CNPJ_ORIGINATOR'
   , CE_DESTINY.[NAME]                                                          AS 'EC_NAME_DESTINY'
   , CE_DESTINY.CPF_CNPJ                                                        AS 'CPF_CNPJ_DESTINY'
   , AFFILIATOR.CPF_CNPJ                                                        AS 'CPF_AFF'
   , (SELECT EQUIPMENT.SERIAL
      FROM ASS_DEPTO_EQUIP
               INNER JOIN EQUIPMENT
                          ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
      WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)
                                                                                AS SERIAL
   , [TRANSACTION_DATA_EXT].[VALUE]                                             AS 'EXTERNAL_NSU'
   , [TRANSACTION].CODE
   , [TRANSACTION].COD_TRAN
   , [COMPANY].COD_COMP
   , [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN                                   AS REP_COD_TRAN
   , [TRANSACTION].COD_SITUATION
   , dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL +
                          (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL(
                                  (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                                   FROM TRANSACTION_SERVICES
                                            INNER JOIN ITEMS_SERVICES_AVAILABLE
                                                       ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                          ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                                   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                                     AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
                                     AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
                              , 0), 0))
     , [TRANSACTION_TITLES].AMOUNT)                                             AS LIQUID_MDR_EC
   , dbo.FNC_CALC_LIQ_ANTICIP_DAYS
     (
         COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT +
                  (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL(
                          (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
                           FROM TRANSACTION_SERVICES
                                    INNER JOIN ITEMS_SERVICES_AVAILABLE
                                               ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
                                                  ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
                           WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
                             AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
                             AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
                      , 0), 0)), 0),
         [TRANSACTION_TITLES].PLOT,
         dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),
         (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                       TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
              TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
     )                                                                          AS ANTECIP_DISCOUNT_EC
   , IIF([TRANSACTION].PLOTS = 1, dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE] +
                                                       IIF([TRANSACTION].COD_TTYPE = 2,
                                                           TRANSACTION_TITLES_COST.TAX_PLANDZERO,
                                                           0), TRANSACTION_TITLES.AMOUNT),
         dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], TRANSACTION_TITLES.AMOUNT)) AS LIQUID_MDR_AFF
   , dbo.FNC_CALC_LIQ_ANTICIP_DAYS
     (
             COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0) +
             IIF([TRANSACTION].COD_TTYPE = 1, TRANSACTION_TITLES_COST.TAX_PLANDZERO, 0),
             [TRANSACTION_TITLES].PLOT,
             dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,
                                 [TRANSACTION_TITLES_COST].[PERCENTAGE]),
             (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
                                                           TRANSACTION_TITLES.PREVISION_PAY_DATE,
                                                           TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
                  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
     )                                                                          AS ANTECIP_DISCOUNT_AFF
   , IIF((SELECT COUNT(*)
          FROM TRANSACTION_SERVICES WITH (NOLOCK)
          WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
            AND TRANSACTION_SERVICES.COD_ITEM_SERVICE IN (4, 19))
                            > 0, 1, 0) AS SPLIT
   , EC_TRAN.COD_EC                                                             AS COD_EC_TRANS
   , EC_TRAN.NAME                                                               AS TRANS_EC_NAME
   , EC_TRAN.CPF_CNPJ                                                           AS TRANS_EC_CPF_CNPJ
   , [TRANSACTION_TITLES].[ASSIGNED]
   , [ASSIGN_FILE_TITLE].RETAINED_AMOUNT
   , [ASSIGN_FILE_TITLE].[ORIGINAL_DATE]
   , CAST([TRANSACTION_TITLES].CREATED_AT AS DATE)                                 TRAN_TITTLE_DATE
   , CAST([TRANSACTION_TITLES].CREATED_AT AS TIME)                                 TRAN_TITTLE_TIME
   , (SELECT TOP 1 [NAME]
      FROM ACQUIRER (NOLOCK)
               JOIN ASSIGN_FILE_ACQUIRE (NOLOCK) fType
                    ON fType.COD_AC = ACQUIRER.COD_AC
                        AND fType.COD_ASSIGN_FILE_MODEL = assignModel.COD_ASSIGN_FILE_MODEL)
                                                                                   [ASSIGNEE]
   , (SELECT TRANSACTION_DATA_EXT.[VALUE]
      FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
      WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
        AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')
                                                                                AS [AUTH_CODE]
   , [TRANSACTION].CREDITOR_DOCUMENT
   , (SELECT TRANSACTION_DATA_EXT.[VALUE]
      FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
      WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
        AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')
                                                                                AS ORDER_CODE
   , TRANSACTION_TITLES.COD_SITUATION                                              [COD_SITUATION_TITLE]
   , [EQUIPMENT_MODEL].CODIGO                                                   AS MODEL_POS
   , [SEGMENTS].[NAME]                                                          AS SEGMENT_EC
   , [STATE].UF                                                                 AS STATE_EC
   , [CITY].[NAME]                                                              AS CITY_EC
   , [NEIGHBORHOOD].[NAME]                                                      AS NEIGHBORHOOD_EC
   , [ADDRESS_BRANCH].COD_ADDRESS
   , SOURCE_TRANSACTION.DESCRIPTION                                             AS TYPE_TRAN
   , EC_PROD.[NAME]                                                             AS [EC_PROD]
   , EC_PROD.CPF_CNPJ                                                           AS [EC_PROD_CPF_CNPJ]
   , TRAN_PROD.[NAME]                                                           AS [NAME_PROD]
   , SPLIT_PROD.[PERCENTAGE]                                                    AS [PERCENT_PARTICIP_SPLIT]
   , [TRANSACTION_TITLES_COST].RATE_PLAN
   , IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
         TRANSACTION_TITLES.QTY_DAYS_ANTECIP) AS QTY_DAYS_ANTECIP
   , IIF([TRANSACTION_TITLES].TAX_PLANDZERO IS NULL, 0, 1)                      AS IS_PLANDZERO
   , COALESCE([TRANSACTION_TITLES].TAX_PLANDZERO, 0)                               TAX_PLANDZERO
   , ISNULL((SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
             FROM TRANSACTION_SERVICES WITH (NOLOCK)
                      INNER JOIN ITEMS_SERVICES_AVAILABLE isa
                                 ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
             WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
               AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION].COD_EC
               AND isa.NAME = 'PlanDZero')
     , 0)
                                                                                AS TAX_PLANDZEROAFF
   , USER_REPRESENTANTE.IDENTIFICATION                                          AS SALES_REPRESENTANTE
   , USER_REPRESENTANTE.CPF_CNPJ                                                AS CPF_CNPJ_REPRESENTANTE
   , USER_REPRESENTANTE.EMAIL                                                   AS EMAIL_REPRESENTANTE
   , EC_PROD.COD_EC                                                             AS [COD_EC_PROD]
   , IIF((SELECT COUNT(*)
          FROM TRANSACTION_SERVICES WITH (NOLOCK)
                   JOIN ITEMS_SERVICES_AVAILABLE ISA
                        ON ISA.COD_ITEM_SERVICE = TRANSACTION_SERVICES.COD_ITEM_SERVICE
          WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
            AND ISA.NAME = 'RECURRING')
                            > 0, 1, 0) AS IS_RECURRING
  FROM [TRANSACTION_TITLES] WITH (NOLOCK)
       INNER JOIN [TRANSACTION] WITH (NOLOCK)
                  ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
       LEFT JOIN [TRANSACTION_TITLES_COST] WITH (NOLOCK)
                 ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE
       INNER JOIN [TRANSACTION_TYPE] WITH (NOLOCK)
                  ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE
       LEFT JOIN AFFILIATOR WITH (NOLOCK)
                 ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
       INNER JOIN ASS_DEPTO_EQUIP WITH (NOLOCK)
                  ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
       INNER JOIN DEPARTMENTS_BRANCH WITH (NOLOCK)
                  ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
       INNER JOIN DEPARTMENTS WITH (NOLOCK)
                  ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
       INNER JOIN BRANCH_EC WITH (NOLOCK)
                  ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
       INNER JOIN COMMERCIAL_ESTABLISHMENT WITH (NOLOCK)
                  ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
       INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY WITH (NOLOCK)
                  ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC
       INNER JOIN PRODUCTS_ACQUIRER WITH (NOLOCK)
                  ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
       INNER JOIN ACQUIRER WITH (NOLOCK)
                  ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
       LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
                 ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN
       INNER JOIN [dbo].[PROCESS_BG_STATUS] WITH (NOLOCK)
                  ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)
       LEFT JOIN COMPANY WITH (NOLOCK)
                 ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
       LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] WITH (NOLOCK)
                 ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)
       LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN WITH (NOLOCK)
                 ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC
       LEFT JOIN [ASSIGN_FILE_TITLE] (NOLOCK)
                 ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE
                     AND [ASSIGN_FILE_TITLE].ACTIVE = 1
       LEFT JOIN ASSIGN_FILE (NOLOCK)
                 ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE
       LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)
                 ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_FILE.COD_ASSIGN_FILE_MODEL
       INNER JOIN [EQUIPMENT] WITH (NOLOCK)
                  ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
       INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
                  ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL
       INNER JOIN [SEGMENTS] WITH (NOLOCK)
                  ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG
       INNER JOIN [ADDRESS_BRANCH] WITH (NOLOCK)
                  ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH
                      AND [ADDRESS_BRANCH].ACTIVE = 1
       INNER JOIN [NEIGHBORHOOD] WITH (NOLOCK)
                  ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH
       INNER JOIN [CITY] WITH (NOLOCK)
                  ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY
       INNER JOIN [STATE] WITH (NOLOCK)
                  ON [STATE].COD_STATE = [CITY].COD_STATE
       INNER JOIN SOURCE_TRANSACTION WITH (NOLOCK)
                  ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
       LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
                 ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
                     AND [TRAN_PROD].ACTIVE = 1
       LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD WITH (NOLOCK)
                 ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD
       LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD WITH (NOLOCK)
                 ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC
       LEFT JOIN SALES_REPRESENTATIVE
                 ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
       LEFT JOIN USERS USER_REPRESENTANTE
                 ON USER_REPRESENTANTE.COD_USER = SALES_REPRESENTATIVE.COD_USER
  WHERE
    --[TRANSACTION].COD_SITUATION IN (3, 6, 10)                                    
          [TRANSACTION].COD_SITUATION = 3
    AND [TRANSACTION_TITLES].COD_SITUATION != 26
    AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
    AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0
    AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3
    AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].CREATED_AT
    AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION_TITLES].CREATED_AT
    AND DATEPART(YEAR, [TRANSACTION].CREATED_AT) = DATEPART(YEAR, GETDATE())
    AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)
SELECT AFFILIATOR
     , MERSHANT
     , Serial
     , CAST(TRANSACTION_DATE AS DATE)       AS TRANSACTION_DATE
     , CAST(TRANSACTION_DATE AS TIME)       AS TRANSACTION_TIME
     , NSU
     , EXTERNAL_NSU
     , TRAN_TYPE
     , TRANSACTION_AMOUNT
     , TOTAL_PLOTS                          AS QUOTA_TOTAL
     , AMOUNT                               AS 'QUOTA_AMOUNT'
     , PLOT                                 AS QUOTA
     , ACQUIRER
     , ACQ_TAX                              AS 'MDR_ACQ'
     , BRAND
     , CTE.TAX_INITIAL                      AS 'MDR_EC'
     , ANTECIP_EC                           AS 'ANTICIP_EC'
     , MDR_AFF                              AS 'MDR_AFF'
     , ANTECIP_AFF                          AS 'ANTICIP_AFF'
     , LIQUID_SUB                           AS 'TO_RECEIVE_ACQ'
     , CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'
     , (LIQUID_SUB - AFF_DISCOUNT)          AS 'NET_WITHOUT_FEE_SUB'
     , RATE_PLAN                            AS 'FEE_AFFILIATOR'
     , (LIQUID_SUB - AFF_DISCOUNT_TARIFF)   AS 'NET_SUB'
     , AFF                                  AS 'NET_WITHOUT_FEE_AFF'
     , AFF_TARIFF                           AS 'NET_AFF'
     , EC                                   AS 'MERCHANT_WITHOUT_FEE'
     , CTE.RATE                             AS 'FEE_MERCHANT'
     , EC_TARIFF                            AS 'MERCHANT_NET'
     , CAST(PREVISION_PAY_DATE AS DATE)     AS 'PREDICTION_PAY_DATE'
     , IIF(TRAN_TYPE = 'CREDITO' AND
           (CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)), 1, 0) AS ANTECIPATED
     , COD_EC
     , CTE.COD_AFFILIATOR
     , COD_BRANCH
     , CTE.COD_DEPTO_BRANCH
     , PAN
     , CPF_CNPJ_ORIGINATOR
     , EC_NAME_DESTINY
     , CPF_CNPJ_DESTINY
     , CPF_AFF
     , CTE.CODE
     , CTE.COD_TRAN
     , CTE.COD_COMP
     , CTE.REP_COD_TRAN
     , CTE.COD_SITUATION
     , CTE.LIQUID_MDR_EC
     , CTE.ANTECIP_DISCOUNT_EC
     , CTE.LIQUID_MDR_AFF
     , CTE.ANTECIP_DISCOUNT_AFF
     , CTE.SPLIT
     , CTE.COD_EC_TRANS
     , CTE.TRANS_EC_NAME
     , CTE.TRANS_EC_CPF_CNPJ
     , CTE.[ASSIGNED]
     , CTE.RETAINED_AMOUNT
     , CTE.[ORIGINAL_DATE]
     , CTE.[ASSIGNEE]
     , CTE.TRAN_TITTLE_DATE
     , CTE.TRAN_TITTLE_TIME
     , CTE.AUTH_CODE
     , CTE.CREDITOR_DOCUMENT
     , CTE.ORDER_CODE
     , CTE.COD_TITLE
     , CTE.[COD_SITUATION_TITLE]
     , CTE.MODEL_POS
     , CTE.SEGMENT_EC
     , CTE.STATE_EC
     , CTE.CITY_EC
     , CTE.NEIGHBORHOOD_EC
     , CTE.COD_ADDRESS
     , CTE.TYPE_TRAN
     , CTE.NAME_PROD
     , CTE.EC_PROD
     , CTE.EC_PROD_CPF_CNPJ
     , CTE.PERCENT_PARTICIP_SPLIT
     , CTE.QTY_DAYS_ANTECIP
     , CTE.IS_PLANDZERO
     , CTE.TAX_PLANDZERO
     , CTE.EC_TARIFF
     , CTE.AFF_TARIFF
     , AFF
     , CTE.TAX_PLANDZEROAFF
     , CTE.SALES_REPRESENTANTE
     , CTE.CPF_CNPJ_REPRESENTANTE
     , CTE.EMAIL_REPRESENTANTE
     , CTE.COD_EC_PROD
     , CTE.IS_RECURRING
FROM CTE
go

IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL
    DROP VIEW VW_REPORT_TRANSACTIONS_EXP
GO
CREATE VIEW [dbo].[VW_REPORT_TRANSACTIONS_EXP]
AS
/*----------------------------------------------------------------------------------------                                        
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                                        
Project.......: TKPP                                        
------------------------------------------------------------------------------------------                                        
Author                          VERSION        Date                            Description                                        
------------------------------------------------------------------------------------------                                        
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                              
Caike Uchoa                        v2       10/01/2020                         add CNAE                    
Kennedy Alef                       v3       08/04/2020                      add link de pagamento              
Caike Uchoa                        v4       30/04/2020                        insert ec prod              
Caike Uchoa                        v5       17/08/2020                        Add SALES_TYPE   
Luiz Aquino                        v6       01/07/2020                        Add PlanDZero  
Caike Uchoa                        v7       31/08/2020                        Add cod_ec_prod  
Kennedy Alef                       v8       02/09/2020                        Add change calculations       
Caike Uchoa                        v9       28/09/2020                        Add branch business
Caike Uchoa                        v10      29/09/2020                        remove NET_VALUE
------------------------------------------------------------------------------------------*/
WITH CTE  AS
    (SELECT TOP (1000) 
        [TRANSACTION].[COD_TRAN]
      , [TRANSACTION].[CODE]                                                 AS [TRANSACTION_CODE]
      , [TRANSACTION].[AMOUNT]                                               AS [AMOUNT]
      , [TRANSACTION].[PLOTS]                                                AS [PLOTS]
      , CAST([dbo].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME)     AS [TRANSACTION_DATE]
      , [TRANSACTION_TYPE].[CODE]                                            AS [TRANSACTION_TYPE]
      , [COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
      , [COMMERCIAL_ESTABLISHMENT].[NAME]
      , [EQUIPMENT].[SERIAL]                                                 AS [SERIAL_EQUIP]
      , [EQUIPMENT].[TID]                                                    AS [TID]
      , [TRADUCTION_SITUATION].[SITUATION_TR]                                AS [SITUATION]
      , [TRANSACTION].[Brand]
      , [TRANSACTION].[PAN]
      , [TRANSACTION_DATA_EXT].[NAME]                                        AS [TRAN_DATA_EXT]
      , --TRANSACTION_DATA_EXT.NAME                                            
        [TRANSACTION_DATA_EXT].[VALUE]                                                     AS [TRAN_DATA_EXT_VALUE]
      , --TRANSACTION_DATA_EXT.VALUE                                           
      (SELECT [TRANSACTION_DATA_EXT].[VALUE]
       FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
       WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
         AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
                                                                                         AS [AUTH_CODE]
      , [ACQUIRER].[COD_AC]
      , [ACQUIRER].[NAME]                                                    AS [NAME_ACQUIRER]
      , [TRANSACTION].[COMMENT]                                              AS [COMMENT]
      , [ASS_TAX_DEPART].[PARCENTAGE]                                        AS [TAX]
      , COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0)              AS [ANTICIPATION]
      , [AFFILIATOR].[COD_AFFILIATOR]
      , [AFFILIATOR].[NAME]                                                  AS [NAME_AFFILIATOR]
      --------------******------------                                            
      , [TRANSACTION].[COD_TTYPE]
      , [COMPANY].[COD_COMP]
      , [BRANCH_EC].[COD_EC]
      , [BRANCH_EC].[COD_BRANCH]
      , [STATE].[NAME]                                                       AS [STATE_NAME]
      , [CITY].[NAME]                                                        AS [CITY_NAME]
      , [SITUATION].[COD_SITUATION]
      , [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
      , COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0)                      AS [GROSS_VALUE_AGENCY]
      , COALESCE([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT],
                                                [POSWEB_DATA_TRANSACTION].[MDR],
                                                [POSWEB_DATA_TRANSACTION].[PLOTS],
                                                [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) -
                 [POSWEB_DATA_TRANSACTION].[TARIFF], 0)                      AS [NET_VALUE_AGENCY]
      , [SOURCE_TRANSACTION].[DESCRIPTION]                                   AS [TYPE_TRAN]
      , [TRANSACTION].[COD_SOURCE_TRAN]
      , COALESCE([TRANSACTION].[POSWEB], 0)                                  AS [POSWEB]
      , [SEGMENTS].[NAME]                                                    AS [SEGMENTS_NAME]
      , [TRANSACTION].[CREATED_AT]
      , [REPORT_TRANSACTIONS_EXP].[COD_TRAN]                                 AS [REP_COD_TRAN]
      , [EC_TRAN].[COD_EC]                                                   AS [COD_EC_TRANS]
      , [EC_TRAN].[NAME]                                                     AS [TRANS_EC_NAME]
      , [EC_TRAN].[CPF_CNPJ]                                                 AS [TRANS_EC_CPF_CNPJ]
      , IIF((SELECT COUNT(*)
             FROM [TRANSACTION_SERVICES]
             WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
               AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] IN (4, 19))
                                  > 0, 1, 0)                                       AS [SPLIT]
      , [USERS].[IDENTIFICATION]                                             AS [SALES_REP]
      , [USERS].[COD_USER]                                                   AS [COD_USER_REP]
      , COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
      , [SALES_REPRESENTATIVE].[COD_SALES_REP]
      , [EQUIPMENT_MODEL].[CODIGO]                                           AS [MODEL_POS]
      , [TRANSACTION].[CARD_HOLDER_NAME]                                     AS [CARD_NAME]
      , [SEGMENTS].[CNAE]
      , [TRANSACTION].[COD_USER]
      , [USER_TRAN].[IDENTIFICATION]                                         AS [NAME_USER]
      , IIF((SELECT COUNT(*)
             FROM [TRANSACTION_SERVICES]
             WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
               AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
                                  > 0, 1, 0)                                       AS [LINK_PAYMENT]
      , [TRANSACTION].[CUSTOMER_EMAIL]
      , [TRANSACTION].[CUSTOMER_IDENTIFICATION]
      , IIF((SELECT COUNT(*)
             FROM [TRANSACTION_SERVICES]
             WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
               AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
                                  > 0, [TRANSACTION].[TRACKING_TRANSACTION], NULL) AS [PAYMENT_LINK_TRACKING]
      , [TRAN_PROD].[NAME]                                                   AS [NAME_PRODUCT_EC]
      , [EC_PROD].[NAME]                                                     AS [EC_PRODUCT]
      , [EC_PROD].CPF_CNPJ                                                   AS [EC_PRODUCT_CPF_CNPJ]
      , [PROD_ACQ].[NAME]                                                    AS [SALES_TYPE]
      , (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_EC
         FROM TRANSACTION_SERVICES WITH (NOLOCK)
                  INNER JOIN ITEMS_SERVICES_AVAILABLE isa
                             ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
         WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
           AND isa.NAME = 'PlanDZero')
                                                                             AS PLAN_DZEROEC
      , (SELECT TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
         FROM TRANSACTION_SERVICES WITH (NOLOCK)
                  INNER JOIN ITEMS_SERVICES_AVAILABLE isa
                             ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
         WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
           AND isa.NAME = 'PlanDZero')
                                                                             AS PLAN_DZEROAFF
      , [EC_PROD].COD_EC                                                     AS [COD_EC_PROD]
      , BRANCH_BUSINESS.[NAME]                                               AS [BRANCH_BUSINESS_EC]
    FROM [TRANSACTION] WITH (NOLOCK)
           LEFT JOIN [dbo].[PROCESS_BG_STATUS] ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
           LEFT JOIN [ASS_DEPTO_EQUIP]
                     ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
           LEFT JOIN [EQUIPMENT] ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
           LEFT JOIN [DEPARTMENTS_BRANCH]
                     ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
           LEFT JOIN [DEPARTMENTS] ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
           LEFT JOIN [BRANCH_EC] ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
           LEFT JOIN [ADDRESS_BRANCH] ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
           LEFT JOIN [NEIGHBORHOOD] ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
           LEFT JOIN [ASS_TAX_DEPART] ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
           LEFT JOIN [PLAN] ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
           LEFT JOIN [CITY] ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
           LEFT JOIN [STATE] ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
           LEFT JOIN [COMMERCIAL_ESTABLISHMENT] ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
           LEFT JOIN [COMPANY] ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
           LEFT JOIN [TRANSACTION_TYPE] ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
           LEFT JOIN [SITUATION] ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
           LEFT JOIN [TRADUCTION_SITUATION]
                     ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
           LEFT JOIN [SEGMENTS] ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
           LEFT JOIN [dbo].[REPORT_TRANSACTIONS_EXP]
                     ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
           LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
                     ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
           LEFT JOIN [AFFILIATOR] ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
           LEFT JOIN [POSWEB_DATA_TRANSACTION]
                     ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
           LEFT JOIN [dbo].[SOURCE_TRANSACTION] WITH (NOLOCK)
                     ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
           LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
                     ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
           LEFT JOIN [SALES_REPRESENTATIVE]
                     ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
           LEFT JOIN [USERS] ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
           LEFT JOIN [USERS] AS [USER_TRAN] ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
           LEFT JOIN [ASS_TR_TYPE_COMP]
                     ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
           LEFT JOIN [ACQUIRER] ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
           LEFT JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
                     ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
           LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
                     ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
           LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
                     ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
           LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
                     ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
           LEFT JOIN BRANCH_BUSINESS
                     ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
    WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
    AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
    AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
    AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
    AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT])

SELECT CTE.COD_TRAN
     , CTE.TRANSACTION_CODE
     , CTE.Amount
     , CTE.PLOTS
     , CTE.TRANSACTION_DATE
     , CTE.TRANSACTION_TYPE
     , CTE.CPF_CNPJ
     , CTE.[NAME]
     , CTE.SERIAL_EQUIP
     , CTE.TID
     , CTE.SITUATION
     , CTE.Brand
     , CTE.PAN
     , CTE.TRAN_DATA_EXT
     , CTE.TRAN_DATA_EXT_VALUE
     , CTE.AUTH_CODE
     , CTE.COD_AC
     , CTE.NAME_ACQUIRER
     , CTE.COMMENT
     , CTE.TAX
     , CTE.ANTICIPATION
     , CTE.COD_AFFILIATOR
     , CTE.NAME_AFFILIATOR
     , CTE.COD_TTYPE
     , CTE.COD_COMP
     , CTE.COD_EC
     , CTE.COD_BRANCH
     , CTE.STATE_NAME
     , CTE.CITY_NAME
     , CTE.COD_SITUATION
     , CTE.COD_DEPTO_BRANCH
     , CTE.GROSS_VALUE_AGENCY
     , CTE.NET_VALUE_AGENCY
     , CTE.TYPE_TRAN
     , CTE.COD_SOURCE_TRAN
     , CTE.POSWEB
     , CTE.SEGMENTS_NAME
     , CTE.CREATED_AT
     , CTE.REP_COD_TRAN
     , CTE.COD_EC_TRANS
     , CTE.TRANS_EC_NAME
     , CTE.TRANS_EC_CPF_CNPJ
     , CTE.SPLIT
     , CTE.SALES_REP
     , CTE.COD_USER_REP
     , CTE.CREDITOR_DOCUMENT
     , CTE.COD_SALES_REP
     , CTE.MODEL_POS
     , CTE.CARD_NAME
     , CTE.CNAE
     , CTE.COD_USER
     , CTE.NAME_USER
     , CTE.LINK_PAYMENT
     , CTE.CUSTOMER_EMAIL
     , CTE.CUSTOMER_IDENTIFICATION
     , CTE.PAYMENT_LINK_TRACKING
     , CTE.NAME_PRODUCT_EC
     , CTE.EC_PRODUCT
     , CTE.EC_PRODUCT_CPF_CNPJ
     , CTE.SALES_TYPE
     , CTE.PLAN_DZEROEC
     , CTE.PLAN_DZEROAFF
     , CTE.COD_EC_PROD
     , CTE.BRANCH_BUSINESS_EC

FROM CTE
go



--ET-693