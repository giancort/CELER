--ST-1594

IF NOT EXISTS(SELECT * FROM sys.indexes where object_id = OBJECT_ID('ASS_TAX_DEPART') AND name = 'IX_ASS_TAX_DEPART_HISTORY') BEGIN
	CREATE NONCLUSTERED INDEX IX_ASS_TAX_DEPART_HISTORY
	ON [dbo].[ASS_TAX_DEPART] ([COD_DEPTO_BRANCH])
	INCLUDE ([CREATED_AT],[COD_TTYPE],[QTY_INI_PLOTS],[QTY_FINAL_PLOTS],[PARCENTAGE],[RATE],[INTERVAL],[COD_USER]
	,[ACTIVE],[MODIFY_DATE],[COD_PLAN],[ANTICIPATION_PERCENTAGE],[EFFECTIVE_PERCENTAGE],[COD_BRAND],[COD_SOURCE_TRAN],[COD_MODEL])
END
GO

IF OBJECT_ID('SP_REPORT_HISTORY_PLAN') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_HISTORY_PLAN
END
GO
CREATE PROCEDURE SP_REPORT_HISTORY_PLAN
/*----------------------------------------------------------------------------------------          
   Procedure Name: [SP_REPORT_HISTORY_PLAN]						   Project.......: TKPP          
------------------------------------------------------------------------------------------          
   Author             VERSION     Date            Description          
------------------------------------------------------------------------------------------          
   Marcus Gall        V1          2020-11-11      Created
------------------------------------------------------------------------------------------*/
(
	@AFF INT = NULL,
	@EC INT = NULL
) 
AS 

DECLARE @QUERY_ NVARCHAR(MAX) = '';

BEGIN
	SET @QUERY_ = @QUERY_ + ' 
	SELECT
	   COMMERCIAL_ESTABLISHMENT.COD_EC						AS [COD_EC]
	  ,COMMERCIAL_ESTABLISHMENT.[NAME]						AS [NAME_EC]
	  ,[PLAN].COD_PLAN										AS [COD_PLAN]
	  ,[PLAN].CODE											AS [PLAN_NAME]
	  ,[PLAN].[DESCRIPTION]									AS [PLAN_DESCRIPTION]
	  ,[PLAN].ACTIVE										AS [PLAN_ACTIVE]
	  ,TYPE_PLAN.CODE										AS [PLAN_TYPE]
	  ,PLAN_CATEGORY.CATEGORY								AS [PLAN_CATEGORY]
	  ,CONVERT(VARCHAR(16), ASS_TAX_DEPART.CREATED_AT, 120) AS [ASSOCIATED_AT]
	  ,[USERS].COD_USER										AS [COD_USER] 
	  ,[USERS].[IDENTIFICATION]								AS [USER_NAME] 
	  ,ASS_TAX_DEPART.ACTIVE								AS [PLAN_CURRENT]
	  ,ASS_TAX_DEPART.COD_DEPTO_BRANCH						AS [COD_DEPTO_BRANCH]

	FROM COMMERCIAL_ESTABLISHMENT 
	INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	INNER JOIN DEPARTMENTS_BRANCH ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
	INNER JOIN ASS_TAX_DEPART ON ASS_TAX_DEPART.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
	INNER JOIN [PLAN] ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN
	INNER JOIN TYPE_PLAN ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN
	INNER JOIN PLAN_CATEGORY ON PLAN_CATEGORY.COD_PLAN_CATEGORY = [PLAN].COD_PLAN_CATEGORY
	INNER JOIN [USERS] ON [USERS].COD_USER = ASS_TAX_DEPART.COD_USER
	WHERE COMMERCIAL_ESTABLISHMENT.COD_EC > 0';

	IF (@EC IS NOT NULL)
		SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @EC '
	ELSE
		SET @QUERY_ = @QUERY_ + ' AND ASS_TAX_DEPART.COD_ASS_TX_DEP > ((SELECT MAX(COD_ASS_TX_DEP) FROM ASS_TAX_DEPART) - 9999) '

	IF (@AFF IS NOT NULL) 
		SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @AFF '

	SET @QUERY_ = @QUERY_ + '
	GROUP BY COMMERCIAL_ESTABLISHMENT.COD_EC,COMMERCIAL_ESTABLISHMENT.[NAME],[PLAN].COD_PLAN, [PLAN].CODE, [PLAN].[DESCRIPTION]
	, [PLAN].ACTIVE, TYPE_PLAN.CODE,PLAN_CATEGORY.CATEGORY, CONVERT(VARCHAR(16), ASS_TAX_DEPART.CREATED_AT, 120), [USERS].COD_USER
	, [USERS].[IDENTIFICATION], ASS_TAX_DEPART.ACTIVE, ASS_TAX_DEPART.COD_DEPTO_BRANCH

	ORDER BY CONVERT(VARCHAR(16), ASS_TAX_DEPART.CREATED_AT, 120) DESC, ASS_TAX_DEPART.ACTIVE DESC'

	EXEC sp_executesql @QUERY_, N' @AFF INT, @EC INT'
	, @AFF = @AFF, @EC = @EC
END
GO

--ST-1594

GO

--ST-1641

GOGO

IF OBJECT_ID ('SP_PAYMENT_PROTOCOL_TITLES_ARRANGE') IS NOT NULL
DROP PROCEDURE [SP_PAYMENT_PROTOCOL_TITLES_ARRANGE] ;

GO
CREATE PROCEDURE [DBO].[SP_PAYMENT_PROTOCOL_TITLES_ARRANGE](      
 @COD_PAY_PROT INT)  
 /*******************************************************************************************    
----------------------------------------------------------------------------------------      
Procedure Name: [SP_PAYMENT_PROTOCOL_TITLES_ARRANGE]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author            VERSION         Date          Description      
------------------------------------------------------------------------------------------      
Elir Ribeiro        v?        16-11-2020     add groos amount   
Caike Uchoa         v2        24-11-2020     Add auth_code
------------------------------------------------------------------------------------------    
*******************************************************************************************/    
AS      
BEGIN      
      
 -- CONDITIONAL FOR LEGACY    
    
IF (SELECT COUNT(*) FROM PROTOCOLS WHERE COD_PAY_PROT=@COD_PAY_PROT AND ISNULL(LEGACY,1) = 0) >0    
BEGIN    
    
SELECT      
 [T].[CODE] AS [TRANSACTION_CODE]      
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]      
   ,CONCAT(CONCAT([TRANSACTION_TITLES].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]      
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]      
   ,[ARRANG_TO_PAY].[COD_EC]      
   ,CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *      
  IIF([TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL, 1,      
  1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(IIF([TRANSACTION_TITLES].[IS_SPOT] = 1,      
  DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE]), [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]),      
  ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) /      
  100))) - (IIF([TRANSACTION_TITLES].[PLOT] = 1, [TRANSACTION_TITLES].[RATE], 0))) AS DECIMAL(22, 6)) AS [PLOT_AMOUNT_NET]    
 ,DETAILS_ARRANG_TO_PAY.AMOUNT AS NET_TO_PAY     
   ,[TRANSACTION_TITLES].[PREVISION_PAY_DATE]      
   ,'TITLE' AS [TYPE_RELEASE]      
   ,ARRANG_TO_PAY.[COD_FIN_SCH_FILE]      
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]      
   ,[FINANCE_SCHEDULE_FILE].file_name      
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]      
   ,ARRANG_TO_PAY.[IS_LOCK]      
   ,[TRANSACTION_TITLES].[IS_SPOT]      
   ,[P].[PROTOCOL]  
   , CAST([T].[AMOUNT] / [T].[PLOTS] AS DECIMAL (22,6)) AS [GROSS_AMOUNT]   
   ,(SELECT [TRANSACTION_DATA_EXT].[VALUE] FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
   WHERE TRANSACTION_DATA_EXT.[NAME]= 'AUTHCODE'
   AND TRANSACTION_DATA_EXT.COD_TRAN = T.COD_TRAN) AS [AUTH_CODE]
   --,ISNULL([TRANSACTION_DATA_EXT].[VALUE],'') AS [AUTH_CODE] 
FROM [ARRANG_TO_PAY]    
JOIN DETAILS_ARRANG_TO_PAY     
ON DETAILS_ARRANG_TO_PAY.COD_ARR_PAY = [ARRANG_TO_PAY].COD_ARR_PAY    
JOIN FINANCE_CALENDAR     
 ON FINANCE_CALENDAR.COD_FIN_CALENDAR = ARRANG_TO_PAY.COD_FIN_CALENDAR    
JOIN [TRANSACTION_TITLES]  WITH (NOLOCK)      
 ON [TRANSACTION_TITLES].COD_TITLE = DETAILS_ARRANG_TO_PAY.COD_TITTLE      
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)      
 ON [T].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]      
JOIN [PROTOCOLS] AS [P]      
 ON [P].[COD_PAY_PROT] = [ARRANG_TO_PAY].[COD_PAY_PROT]      
LEFT JOIN [FINANCE_SCHEDULE_FILE]      
 ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = ARRANG_TO_PAY.[COD_FIN_SCH_FILE]     
WHERE    
--FINANCE_CALENDAR.[ACTIVE]  <> 99      
--AND FINANCE_CALENDAR.[COD_SITUATION] = 8      
--AND    
[P].COD_PAY_PROT = @COD_PAY_PROT;      
    
END;    
ELSE    
BEGIN    
    
SELECT      
 [T].[CODE] AS [TRANSACTION_CODE]      
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]      
   ,CONCAT(CONCAT([TRANSACTION_TITLES].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]      
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]      
   ,FINANCE_CALENDAR.[COD_EC]      
   ,CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *      
  IIF([TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL, 1,      
  1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(IIF([TRANSACTION_TITLES].[IS_SPOT] = 1,      
  DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE]), [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]),      
  ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) /      
  100))) - (IIF([TRANSACTION_TITLES].[PLOT] = 1, [TRANSACTION_TITLES].[RATE], 0))) AS DECIMAL(22, 6)) AS [PLOT_AMOUNT_NET]    
 ,CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *      
  IIF([TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL, 1,      
  1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(IIF([TRANSACTION_TITLES].[IS_SPOT] = 1,      
  DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE]), [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]),      
  ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) /      
  100))) - (IIF([TRANSACTION_TITLES].[PLOT] = 1, [TRANSACTION_TITLES].[RATE], 0))) AS DECIMAL(22, 6)) AS NET_TO_PAY     
   ,[TRANSACTION_TITLES].[PREVISION_PAY_DATE]      
   ,'TITLE' AS [TYPE_RELEASE]      
   ,FINANCE_CALENDAR.[COD_FIN_SCH_FILE]      
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]      
   ,[FINANCE_SCHEDULE_FILE].file_name      
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]      
   ,FINANCE_CALENDAR.[IS_LOCK]      
   ,[TRANSACTION_TITLES].[IS_SPOT]      
   ,[P].[PROTOCOL]  
   ,CAST([T].[AMOUNT] / [T].[PLOTS] AS DECIMAL (22,6)) AS [GROSS_AMOUNT] 
      ,(
   SELECT [TRANSACTION_DATA_EXT].[VALUE] FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
   WHERE TRANSACTION_DATA_EXT.[NAME]= 'AUTHCODE'
   AND TRANSACTION_DATA_EXT.COD_TRAN = T.COD_TRAN
   ) AS [AUTH_CODE]
FROM  FINANCE_CALENDAR     
JOIN [TRANSACTION_TITLES]  WITH (NOLOCK)      
 ON [TRANSACTION_TITLES].COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR      
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)      
 ON [T].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]      
JOIN [PROTOCOLS] AS [P]      
 ON [P].[COD_PAY_PROT] = FINANCE_CALENDAR.[COD_PAY_PROT]      
LEFT JOIN [FINANCE_SCHEDULE_FILE]      
ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = FINANCE_CALENDAR.[COD_FIN_SCH_FILE]    
WHERE    
--FINANCE_CALENDAR.[ACTIVE]  <> 99      
--AND FINANCE_CALENDAR.[COD_SITUATION] = 8      
--AND    
[P].COD_PAY_PROT = @COD_PAY_PROT;      
    
    
    
END;    
    
    
END;      
      
--ST-1641


GO

--ST-1152

IF OBJECT_ID('SP_GW_LS_EC_COMPANY') IS NOT NULL BEGIN
    DROP PROCEDURE SP_GW_LS_EC_COMPANY
END
GO
CREATE PROCEDURE [dbo].[SP_GW_LS_EC_COMPANY]
/*----------------------------------------------------------------------------------------         
Procedure Name: [SP_LS_EC_COMPANY]								Project.......: TKPP         
------------------------------------------------------------------------------------------         
Author        Version		Date                       Description         
------------------------------------------------------------------------------------------ 
        
Kennedy Alef     V1		27/07/2018      Creation         
Elir Ribeiro     V2		05/08/2019		Changed Cod Risk Situation       
Marcus Gall		 V3		2020-07-08		ET-957: Address and Bank Details on return   
Marcus Gall		 V4		2020-11-05		ET-1153: Add CSC, Segment, Type EC and others info
------------------------------------------------------------------------------------------*/ 
(
	@COD_COMP INT,
	@SEARCH VARCHAR(100) = NULL,
	@CODESAFF CODE_TYPE READONLY,
	@QTD_BY_PAGE INT,
	@NEXT_PAGE INT
)
AS
BEGIN
 
 SELECT
	COMMERCIAL_ESTABLISHMENT.COD_EC						AS [COD_EC]
    ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ					AS [CPF_CNPJ]
    ,COMMERCIAL_ESTABLISHMENT.[NAME]					AS [NAME]
    ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME				AS [TRADING_NAME]
    ,BRANCH_EC.COD_BRANCH								AS [COD_BRANCH]
    ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION		AS [COD_RISK_SITUATION]
    ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER				AS [IS_PROVIDER]
    ,AFFILIATOR.[NAME]									AS [AFF_NAME]
    ,ADDRESS_BRANCH.[ADDRESS]							AS [STREET]
    ,ADDRESS_BRANCH.[NUMBER]							AS [STREET_NUMBER]
    ,ADDRESS_BRANCH.COMPLEMENT							AS [COMPLEMENT]
    ,ADDRESS_BRANCH.REFERENCE_POINT						AS [REFERENCE_POINT]
    ,ADDRESS_BRANCH.CEP									AS [CEP]
    ,NEIGHBORHOOD.[NAME]								AS [NEIGHBORHOOD]
    ,CITY.[NAME]										AS [CITY]
    ,[STATE].[NAME]										AS [STATE]
    ,[COUNTRY].[NAME]									AS [COUNTRY]
    ,BANKS.CODE											AS [BANK_CODE]
    ,BANKS.[NAME]										AS [BANK_NAME]
    ,BANK_DETAILS_EC.AGENCY								AS [AGENCY]
    ,BANK_DETAILS_EC.DIGIT_AGENCY						AS [AGENCY_DIGIT]
    ,BANK_DETAILS_EC.ACCOUNT							AS [ACCOUNT]
    ,BANK_DETAILS_EC.DIGIT_ACCOUNT						AS [ACCOUNT_DIGIT]
    ,ACCOUNT_TYPE.[NAME]								AS [ACCOUNT_TYPE]
	-- ET-1153
	,TYPE_ESTAB.CODE									AS [TYPE_ESTABLISHMENT]
	,SEGMENTS.CODE										AS [MCC]
	,COMMERCIAL_ESTABLISHMENT.BIRTHDATE					AS [BIRTHDATE]
	,COMMERCIAL_ESTABLISHMENT.CREATED_AT				AS [CREATED_AT]
	,COMMERCIAL_ESTABLISHMENT.MODIFY_DATE				AS [MODIFY_DATE]
	,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY AS [LIMIT_TRANSACTION_MONTHLY]
	,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY	AS [LIMIT_TRANSACTION_DIALY]
	,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT			AS [TRANSACTION_LIMIT]
	,MEET_COSTUMER.QTY_EMPLOYEES						AS [QTY_EMPLOYEES]
	,MEET_COSTUMER.URL_SITE								AS [URL_SITE]
	,MEET_COSTUMER.INSTAGRAM							AS [INSTAGRAM]
	,MEET_COSTUMER.FACEBOOK								AS [FACEBOOK]
	,MEET_COSTUMER.CNPJ									AS [MEET_COSTUMER_CNPJ]
	,MEET_COSTUMER.AVERAGE_BILLING						AS [AVERAGE_BILLING]
	,MEET_COSTUMER.STREET								AS [MEET_COSTUMER_STREET]
	,MEET_COSTUMER.NUMBER								AS [MEET_COSTUMER_STREET_NUMBER]
	,MEET_COSTUMER.COMPLEMENT							AS [MEET_COSTUMER_COMPLEMENT]
	,MEET_COSTUMER.NEIGHBORHOOD							AS [MEET_COSTUMER_NEIGHBORHOOD]
	,MEET_COSTUMER.CITY									AS [MEET_COSTUMER_CITY]
	,MEET_COSTUMER.STATES 								AS [MEET_COSTUMER_STATE]
	,MEET_COSTUMER.REFERENCEPOINT						AS [MEET_COSTUMER_REFERENCE_POINT]
	,MEET_COSTUMER.ZIPCODE								AS [MEET_COSTUMER_ZIPCODE]

	FROM COMMERCIAL_ESTABLISHMENT 
	INNER JOIN COMPANY ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
	INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	LEFT JOIN ADDRESS_BRANCH ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
	LEFT JOIN NEIGHBORHOOD ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
	LEFT JOIN CITY ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
	LEFT JOIN [STATE] ON [STATE].COD_STATE = CITY.COD_STATE
	LEFT JOIN [COUNTRY] ON [COUNTRY].COD_COUNTRY = [STATE].COD_COUNTRY
	LEFT JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
	LEFT JOIN BANKS ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
	LEFT JOIN ACCOUNT_TYPE ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
	-- ET-1153
	LEFT JOIN TYPE_ESTAB ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB 
	LEFT JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
	LEFT JOIN MEET_COSTUMER ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC

	WHERE COMPANY.COD_COMP = 8 
	AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1
	AND ADDRESS_BRANCH.ACTIVE = 1
	AND BANK_DETAILS_EC.ACTIVE = 1
	AND BRANCH_EC.TYPE_BRANCH = 'PRINCIPAL'
	AND (@SEARCH IS NULL
		OR (COMMERCIAL_ESTABLISHMENT.[NAME] LIKE ('%' + @SEARCH + '%'))
		OR (COMMERCIAL_ESTABLISHMENT.CPF_CNPJ LIKE ('%' + @SEARCH + '%'))
	)
	AND ((SELECT COUNT(*) FROM @CODESAFF) = 0 
		OR COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IN (SELECT [CODE] FROM @CODESAFF)
	)
	ORDER BY 1 DESC OFFSET (@NEXT_PAGE - 1) * @QTD_BY_PAGE 
	ROWS FETCH NEXT @QTD_BY_PAGE ROWS ONLY
END
GO

IF OBJECT_ID('SP_GW_LS_EC_CONTACT') IS NOT NULL BEGIN
    DROP PROCEDURE SP_GW_LS_EC_CONTACT
END
GO
CREATE PROCEDURE [dbo].[SP_GW_LS_EC_CONTACT]
/*----------------------------------------------------------------------------------------         
Procedure Name: [SP_GW_LS_EC_CONTACT]						Project.......: TKPP         
------------------------------------------------------------------------------------------         
Author        Version		Date                       Description         
------------------------------------------------------------------------------------------ 
        
Marcus Gall		 V1		2020-11-05					ET-1153:Get EC details contacts
------------------------------------------------------------------------------------------*/ 
(
	@COD_EC INT = 0
)
AS
BEGIN
  SELECT 
	COMMERCIAL_ESTABLISHMENT.COD_EC				AS [COD_EC]

	,[USERS].[IDENTIFICATION]					AS [CONTACT_NAME]
	,SEX_TYPE.[NAME]							AS [CONTACT_GENRE]
	,[USERS].EMAIL								AS [CONTACT_EMAIL]
	,[USERS].ALTERNATIVE_EMAIL					AS [CONTACT_EMAIL_ALTERNATIVE]
	,TYPE_CONTACT.[NAME]						AS [CONTACT_TYPE]
	,CONTACT_BRANCH.DDD							AS [CONTACT_DDD]
	,CONTACT_BRANCH.NUMBER						AS [CONTACT_NUMBER]

	FROM COMMERCIAL_ESTABLISHMENT
	INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	LEFT JOIN CONTACT_BRANCH ON CONTACT_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH 
	LEFT JOIN [USERS] ON [USERS].COD_USER = CONTACT_BRANCH.COD_USER
	INNER JOIN SEX_TYPE ON SEX_TYPE.COD_SEX = [USERS].COD_SEX
	LEFT JOIN TYPE_CONTACT ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT

	WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
	AND CONTACT_BRANCH.ACTIVE = 1
END 
GO

IF OBJECT_ID('SP_GW_LS_EC_PARTNER') IS NOT NULL BEGIN
    DROP PROCEDURE SP_GW_LS_EC_PARTNER
END
GO
CREATE PROCEDURE [dbo].[SP_GW_LS_EC_PARTNER]
/*----------------------------------------------------------------------------------------         
Procedure Name: [SP_GW_LS_EC_PARTNER]						Project.......: TKPP         
------------------------------------------------------------------------------------------         
Author        Version		Date                       Description         
------------------------------------------------------------------------------------------ 
        
Marcus Gall		 V1		2020-11-05					ET-1153:Get EC details partners
------------------------------------------------------------------------------------------*/ 
(
	@COD_EC INT = 0
)
AS
BEGIN
  SELECT 
	COMMERCIAL_ESTABLISHMENT.COD_EC				AS [COD_EC]

	,ADITIONAL_DATA_TYPE_EC.[NAME]				AS [PARTNER_NAME]
	,ADITIONAL_DATA_TYPE_EC.CPF					AS [PARTNER_CPF]
	,ADITIONAL_DATA_TYPE_EC.DOCUMENT			AS [PARTNER_DOCUMENT]
	,ADITIONAL_DATA_TYPE_EC.BIRTH_DATA			AS [PARTNER_BIRTHDATE]
	,ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS	AS [PERCENTEGE_QUOTAS]
	,TYPE_PARTNER.[NAME]						AS [TYPE_PARTNER]

	FROM COMMERCIAL_ESTABLISHMENT
	LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER

	WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
	AND ADITIONAL_DATA_TYPE_EC.ACTIVE = 1
END 
GO

IF OBJECT_ID('SP_GW_PAYMENT_PROTOCOL') IS NOT NULL BEGIN
    DROP PROCEDURE SP_GW_PAYMENT_PROTOCOL
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[SP_GW_PAYMENT_PROTOCOL]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_GW_PAYMENT_PROTOCOL]							Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author            Version		Date                       Description        
------------------------------------------------------------------------------------------        
Marcus Gall			V1		2020-11-10					Creation        
------------------------------------------------------------------------------------------*/  
(
  @INITIAL_DATE DATETIME = NULL,  
  @FINAL_DATE DATETIME = NULL,  
  @COD_COMP INT,  
  @COD_EC INT = NULL,  
  @COD_AFF INT = NULL,
  @COD_BANK INT = NULL,  
  @PROTOCOL VARCHAR(100) = NULL,
  @QTD_BY_PAGE INT,
  @NEXT_PAGE INT
)  
AS  
DECLARE @QUERY_BASIS NVARCHAR(MAX);  
  
BEGIN  
  
	SET @QUERY_BASIS = N'        
		SELECT         
			CAST([dbo].[FN_FUS_UTF](PROTOCOLS.CREATED_AT) AS DATETIME)	AS [CREATED_AT],        
			PROTOCOLS.PROTOCOL											AS [PROTOCOL],        
			PROTOCOLS.VALUE												AS [AMOUNT], 
			COMMERCIAL_ESTABLISHMENT.COD_EC        						AS [COD_EC],
			COMMERCIAL_ESTABLISHMENT.NAME        						AS [EC_NAME],
			COMMERCIAL_ESTABLISHMENT.CPF_CNPJ        					AS [CPF_CNPJ],
			ISNULL(BANKS.CODE,''N�O CADASTRADO'')			        	AS [BANK_CODE],
			ISNULL(BANKS.NAME,''N�O CADASTRADO'')		        		AS [BANK_NAME],
			CONCAT(AGENCY ,DIGIT_AGENCY)					   			AS [BANK_AGENCY],
			ACCOUNT_TYPE.NAME			        						AS [BANK_ACCOUNT_TYPE],
			CONCAT(ACCOUNT,DIGIT_ACCOUNT)				      			AS [BANK_ACCOUNT],
			AFFILIATOR.COD_AFFILIATOR      								AS [COD_AFFILIATOR],
			AFFILIATOR.NAME						      					AS [NAME_AFFILIATOR],
			0	      													AS [IS_SPOT],
			BANK_DETAILS_EC.IS_CERC      								AS [IS_CERC]
			
		FROM PROTOCOLS        
			INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = PROTOCOLS.COD_EC        
			INNER JOIN COMPANY ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP        
			INNER JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_BK_EC =  PROTOCOLS.COD_BK_EC        
			INNER JOIN BANKS ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK        
			INNER JOIN ACCOUNT_TYPE ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT      
			LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR         
		WHERE        
			PROTOCOLS.COD_TYPE_PROT = 1  AND         
			COMPANY.COD_COMP = @COD_COMP';  
  
  
    IF @INITIAL_DATE IS NOT NULL AND @FINAL_DATE IS NOT NULL
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND PROTOCOLS.CREATED_AT BETWEEN 
								CAST([dbo].[FN_FUS_UTF](@INITIAL_DATE) AS DATETIME) AND CAST([dbo].[FN_FUS_UTF](@FINAL_DATE) AS DATETIME) ')  
    
    IF @COD_EC IS NOT NULL  
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND  COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC ');  
  
    IF @COD_BANK IS NOT NULL  
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND BANKS.COD_BANK  = @COD_BANK ');  
  
    IF @PROTOCOL IS NOT NULL  
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND PROTOCOLS.PROTOCOL  = @PROTOCOL ');  
  
    IF @COD_AFF IS NOT NULL  
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF ');  
  
    SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '
	ORDER BY 4, 1 DESC OFFSET (@NEXT_PAGE - 1) * @QTD_BY_PAGE 
	ROWS FETCH NEXT @QTD_BY_PAGE ROWS ONLY');
  
	--EXEC  (@QUERY_BASIS);        
  
    EXEC sp_executesql @QUERY_BASIS  
        , N'        
    @INITIAL_DATE DATETIME,        
    @FINAL_DATE DATETIME,        
    @COD_EC INT,        
    @COD_BANK INT,        
    @PROTOCOL VARCHAR(20),        
    @COD_AFF INT,  
    @COD_COMP INT,
	@QTD_BY_PAGE INT,
	@NEXT_PAGE INT
    '  
        , @INITIAL_DATE = @INITIAL_DATE  
        , @FINAL_DATE = @FINAL_DATE  
        , @COD_EC = @COD_EC  
        , @COD_BANK = @COD_BANK  
        , @PROTOCOL = @PROTOCOL  
        , @COD_AFF = @COD_AFF  
        , @COD_COMP = @COD_COMP
		, @QTD_BY_PAGE = @QTD_BY_PAGE
		, @NEXT_PAGE = @NEXT_PAGE

	--SELECT @QUERY_BASIS  
END
GO

--EXEC SP_GW_PAYMENT_PROTOCOL @QTD_BY_PAGE = 1, @NEXT_PAGE = 1, @COD_COMP = 8, @COD_EC = 10045
    
ALTER PROCEDURE [dbo].[SP_VAL_LIMIT_EC]         
/*----------------------------------------------------------------------------------------------------------------------         
Procedure Name: [SP_VAL_LIMIT_EC]         
Project.......: TKPP         
------------------------------------------------------------------------------------------------------------------------         
Author VERSION Date Description         
------------------------------------------------------------------------------------------------------------------------         
Kennedy Alef V1 27/07/2018 Creation        
Lucas Aguair V2 17-04-2019 ADD PARÂMETRO OPCIONAL DO SPLIT E SUA INSERÇÃO         
Lucas Aguiar v4 23-04-2019 Parametro opc cod ec
Kennedy Alef V5 25-01-2020 Alteracao de busca para between
------------------------------------------------------------------------------------------------------------------------*/         
(         
@CODEC INT,         
@AMOUNT DECIMAL(22,6),         
@PAN VARCHAR(200),         
@BRAND VARCHAR(200),         
@CODASS_DEPTO_TERMINAL int ,         
@COD_TTYPE int,         
@PLOTS int,         
@CODTAX_ASS INT,         
@CODETR VARCHAR(200),         
@TYPE VARCHAR(100),         
@TERMINALDATE DATETIME,         
@COD_COMP INT,         
@COD_AFFILIATOR INT = NULL,         
@CODE_SPLIT INT = NULL,        
@EC_TRANS INT = NULL,    
@HOLDER_NAME VARCHAR(100)  = NULL,    
@HOLDER_DOC VARCHAR(100)  = NULL,     
@LOGICAL_NUMBER VARCHAR(100)  = NULL,    
@SOURCE_TRAN INT = NULL,  
@CUSTOMER_EMAIL VARCHAR(100) = NULL,  
@LINK_MODE INT = NULL,  
@CUSTOMER_IDENTIFICATION VARCHAR(100) = NULL  
             
        
)         
AS         
DECLARE @VALUE DECIMAL(22,6);  
    
      
         
DECLARE @LIMIT_DAILY DECIMAL(22,6);  
    
      
         
DECLARE @LIMIT DECIMAL(22,6);  
    
      
         
DECLARE @MONTLY DECIMAL(22,6);  
    
DECLARE @DATE_NOW DATE = dbo.FN_FUS_UTF(GETDATE());
      
         
BEGIN  
SET @LIMIT_DAILY = 0;  
SET @VALUE = 0;  
SET @DATE_NOW = dbo.FN_FUS_UTF(GETDATE());
  
SELECT  
 @LIMIT_DAILY = EC.LIMIT_TRANSACTION_DIALY  
   ,@LIMIT = EC.TRANSACTION_LIMIT  
   ,@MONTLY = EC.LIMIT_TRANSACTION_MONTHLY  
FROM COMMERCIAL_ESTABLISHMENT EC  
WHERE EC.COD_EC = @CODEC;  
  
IF @AMOUNT > @LIMIT  
  
BEGIN  
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT  
        ,@PAN = @PAN  
        ,@BRAND = @BRAND  
        ,@CODASS_DEPTO_TERMINAL = @CODASS_DEPTO_TERMINAL  
        ,@COD_TTYPE = @COD_TTYPE  
        ,@PLOTS = @PLOTS  
        ,@CODTAX_ASS = @CODTAX_ASS  
        ,@CODAC = NULL  
        ,@CODETR = @CODETR  
        ,@COMMENT = '402 - Transaction limit value exceeded'  
        ,@TERMINALDATE = @TERMINALDATE  
        ,@TYPE = @TYPE  
        ,@COD_COMP = @COD_COMP  
        ,@COD_AFFILIATOR = @COD_AFFILIATOR  
        ,@CODE_SPLIT = @CODE_SPLIT  
        ,@COD_EC = @EC_TRANS  
        ,@HOLDER_NAME = @HOLDER_NAME  
        ,@HOLDER_DOC = @HOLDER_DOC  
        ,@LOGICAL_NUMBER = @LOGICAL_NUMBER  
        ,@SOURCE_TRAN = @SOURCE_TRAN  
        ,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL  
        ,@LINK_MODE = @LINK_MODE  
        ,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION;  
  
--select @VALUE as value, @AMOUNT as amout, @LIMIT_DAILY as limit         
THROW 60002, '402', 1;  
  
END;  
  
  
--  DIALY      
  
SELECT  
 @VALUE = SUM(ISNULL([TRANSACTION].AMOUNT, 0))  
FROM [TRANSACTION] WITH (NOLOCK)  
INNER JOIN [ASS_DEPTO_EQUIP]  
 ON [ASS_DEPTO_EQUIP].COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL  
INNER JOIN [DEPARTMENTS_BRANCH]  
 ON [DEPARTMENTS_BRANCH].COD_DEPTO_BRANCH = [ASS_DEPTO_EQUIP].COD_DEPTO_BRANCH  
INNER JOIN [BRANCH_EC]  
 ON [BRANCH_EC].COD_BRANCH = [DEPARTMENTS_BRANCH].COD_BRANCH  
INNER JOIN COMMERCIAL_ESTABLISHMENT  
 ON COMMERCIAL_ESTABLISHMENT.COD_EC = [BRANCH_EC].COD_EC  
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @CODEC  
AND [TRANSACTION].BRAZILIAN_DATE 
BETWEEN
CONCAT(@DATE_NOW, ' ', FORMAT(CAST('00:00:00' AS TIME), N'hh\:mm\:ss')) AND 
CONCAT(@DATE_NOW, ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'))
AND [TRANSACTION].COD_SITUATION = 3  
GROUP BY COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY  
  
IF ((ISNULL(@VALUE, 0) + @AMOUNT) > @LIMIT_DAILY)  
  
BEGIN  
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT  
        ,@PAN = @PAN  
        ,@BRAND = @BRAND  
        ,@CODASS_DEPTO_TERMINAL = @CODASS_DEPTO_TERMINAL  
        ,@COD_TTYPE = @COD_TTYPE  
        ,@PLOTS = @PLOTS  
        ,@CODTAX_ASS = @CODTAX_ASS  
        ,@CODAC = NULL  
        ,@CODETR = @CODETR  
        ,@COMMENT = '403 - Daily limit value exceeded'  
        ,@TERMINALDATE = @TERMINALDATE  
        ,@TYPE = @TYPE  
        ,@COD_COMP = @COD_COMP  
        ,@COD_AFFILIATOR = @COD_AFFILIATOR  
        ,@CODE_SPLIT = @CODE_SPLIT  
        ,@COD_EC = @EC_TRANS  
        ,@HOLDER_NAME = @HOLDER_NAME  
        ,@HOLDER_DOC = @HOLDER_DOC  
        ,@LOGICAL_NUMBER = @LOGICAL_NUMBER  
        ,@SOURCE_TRAN = @SOURCE_TRAN  
        ,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL  
        ,@LINK_MODE = @LINK_MODE  
        ,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION;  
  
  
  
--select @VALUE as value, @AMOUNT as amout, @LIMIT_DAILY as limit         
THROW 60002, '403', 1;  
  
END;  
  
-- MONTH      
  
SELECT  
 @VALUE = SUM(ISNULL([TRANSACTION].AMOUNT, 0))  
FROM [TRANSACTION] WITH (NOLOCK)  
INNER JOIN [ASS_DEPTO_EQUIP]  
 ON [ASS_DEPTO_EQUIP].COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL  
INNER JOIN [DEPARTMENTS_BRANCH]  
 ON [DEPARTMENTS_BRANCH].COD_DEPTO_BRANCH = [ASS_DEPTO_EQUIP].COD_DEPTO_BRANCH  
INNER JOIN [BRANCH_EC]  
 ON [BRANCH_EC].COD_BRANCH = [DEPARTMENTS_BRANCH].COD_BRANCH  
INNER JOIN COMMERCIAL_ESTABLISHMENT  
 ON COMMERCIAL_ESTABLISHMENT.COD_EC = [BRANCH_EC].COD_EC  
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @CODEC  
AND [TRANSACTION].BRAZILIAN_DATE 
BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) AND  
DATEADD(SECOND, 86399, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 30))  
AND [TRANSACTION].COD_SITUATION = 3  
GROUP BY COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY  
  
IF ((ISNULL(@VALUE, 0) + @AMOUNT) > @MONTLY)  
  
BEGIN  
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT  
        ,@PAN = @PAN  
        ,@BRAND = @BRAND  
        ,@CODASS_DEPTO_TERMINAL = @CODASS_DEPTO_TERMINAL  
        ,@COD_TTYPE = @COD_TTYPE  
        ,@PLOTS = @PLOTS  
        ,@CODTAX_ASS = @CODTAX_ASS  
        ,@CODAC = NULL  
        ,@CODETR = @CODETR  
        ,@COMMENT = '407 - Monthly limit value exceeded'  
        ,@TERMINALDATE = @TERMINALDATE  
        ,@TYPE = @TYPE  
        ,@COD_COMP = @COD_COMP  
        ,@COD_AFFILIATOR = @COD_AFFILIATOR  
        ,@CODE_SPLIT = @CODE_SPLIT  
        ,@COD_EC = @EC_TRANS  
        ,@HOLDER_NAME = @HOLDER_NAME  
        ,@HOLDER_DOC = @HOLDER_DOC  
        ,@LOGICAL_NUMBER = @LOGICAL_NUMBER  
        ,@SOURCE_TRAN = @SOURCE_TRAN  
        ,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL  
        ,@LINK_MODE = @LINK_MODE  
        ,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION;  
  
  
--select @VALUE as value, @AMOUNT as amout, @LIMIT_DAILY as limit         
THROW 60002, '407', 1;  
  
END;  
  
  
  
END;

GO