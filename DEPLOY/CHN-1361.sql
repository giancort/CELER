IF OBJECT_ID('SP_GW_LS_ASSEQUIPMENT') IS NOT NULL
DROP PROCEDURE SP_GW_LS_ASSEQUIPMENT;
GO
CREATE PROCEDURE SP_GW_LS_ASSEQUIPMENT
/******************************************************
--------------------------------------------------------
Procedure Name: SP_GW_LS_ASSEQUIPMENT
Project.....: Notification
------------------------------------------------------------------------------------------                         
Author         VERSION        Date             Description                         
------------------------------------------------------------------------------------------                         
Caio Vitalino    V1         17/12/2020           Creation                         
------------------------------------------------------------------------------------------
*******************************************************/ (@SERIAL VARCHAR(300),
@COD_AFF INT)
AS
BEGIN
SELECT
	COMMERCIAL_ESTABLISHMENT.COD_EC AS [COD_EC]
   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS [NAME]
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS [CPF_CNPJ]
FROM ASS_DEPTO_EQUIP
JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE EQUIPMENT.SERIAL = @SERIAL
AND AFFILIATOR.COD_AFFILIATOR = @COD_AFF
AND ASS_DEPTO_EQUIP.ACTIVE = 1
END;

GO

IF OBJECT_ID('TRANSACTION_AUTH_QUEUE') IS NOT NULL DROP TABLE TRANSACTION_AUTH_QUEUE;
GO
CREATE TABLE TRANSACTION_AUTH_QUEUE
(
    COD_TRAN_AUTH_QUEUE INT PRIMARY KEY IDENTITY,
    TRANSACTION_DATE    DATETIME,
    NSU                 VARCHAR(255),
    AUTH_CODE           VARCHAR(255),
    NSU_EXT             VARCHAR(255),
    AMOUNT              DECIMAL(22, 6),
    TRANSACTION_TYPE    VARCHAR(255),
    BRAND               VARCHAR(255),
    PLOTS               INT,
    PAN                 VARCHAR(255),
    MERCHANT_NAME       VARCHAR(255),
    MERCHANT_DOC        VARCHAR(14),
    COD_EC              INT,
    COD_AFFILIATOR      INT,
    COD_TRAN            INT,
    COD_EQUIP           INT,
    PROCESSED           BIT      DEFAULT 0,
    IN_PROGRESS         BIT      DEFAULT 0,
    CREATED_AT          DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
    FOREIGN KEY (COD_TRAN) REFERENCES [TRANSACTION] (COD_TRAN),
    FOREIGN KEY (COD_EQUIP) REFERENCES [EQUIPMENT] (COD_EQUIP),
    FOREIGN KEY (COD_EC) REFERENCES [COMMERCIAL_ESTABLISHMENT] (COD_EC),
    FOREIGN KEY (COD_AFFILIATOR) REFERENCES [AFFILIATOR] (COD_AFFILIATOR),

)

GO

IF OBJECT_ID('SP_UP_TRANSACTION') IS NOT NULL
DROP PROCEDURE SP_UP_TRANSACTION;
GO
CREATE PROCEDURE [dbo].[SP_UP_TRANSACTION]
/*----------------------------------------------------------------------------------------
Procedure Name: [SP_UP_TRANSACTION]
Project.......: TKPP
------------------------------------------------------------------------------------------
Author   Version  Date   Description
------------------------------------------------------------------------------------------
Kennedy Alef V1   27/07/2018  Creation
Lucas Aguiar V2   17-04-2019  rotina de aw. titles e cancelamento
Elir Ribeiro V3   12-08-2019  Changed situation Blocked
Elir Ribeiro V4   20-08-2019  Changed situation AWAITING PAYMENT
Marcus Gall  V5   01-02-2020  Changes CONFIRMED, New CANCELED after RELEASED
Elir Ribeiro v6   27-02-2020  Changes Cod_user
Kennedy Alef v7   11-05-2020  Reprocess financial calendar
Caike Uch�a  v8   13-07-2020  Canceled partial pela Finance calendar
Caike Uch�a  V9   31-07-2020  Add cod_ec transaction_titles
Kennedy Alef V10  07-10-2020  add enqueue finance
Caike uchoa  v11  18/11/2020  alter awaiting payment
------------------------------------------------------------------------------------------*/
(@CODE_TRAN VARCHAR(200),
 @SITUATION VARCHAR(100),
 @DESCRIPTION VARCHAR(200) = NULL,
 @CURRENCY VARCHAR(100),
 @CODE_ERROR VARCHAR(100) = NULL,
 @TRAN_ID INT = NULL,
 @LOGICAL_NUMBER_ACQ VARCHAR(100) = NULL,
 @CARD_HOLDER_NAME VARCHAR(100) = NULL,
 @COD_USER INT = NULL)
AS

DECLARE @QTY INT=0;
DECLARE @CONT INT;
DECLARE @SIT VARCHAR(100);
DECLARE @BRANCH INT;
DECLARE @COD_EC_TITTLE INT;
DECLARE @DATE_TRAN DATE;


DECLARE
    @DATA_TRANSACTION TABLE
                      (
                          TRANSACTION_AMOUNT     DECIMAL(22, 6),
                          COD_TTYPE              INT,
                          BRAND                  VARCHAR(255),
                          PLOTS                  INT,
                          NSU                    VARCHAR(255),
                          PAN                    VARCHAR(255),
                          COD_ASS_DEPTO_TERMINAL INT,
                          TRANSACTION_DATE       DATETIME
                      );


    IF @TRAN_ID IS NULL
        BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.[NAME]
   ,@DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE CODE = @CODE_TRAN;
END;
ELSE
BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.NAME
   ,@DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE COD_TRAN = @TRAN_ID;
END;

IF @CONT < 1
	OR @CONT IS NULL
THROW 60002, '601', 1;

UPDATE PROCESS_BG_STATUS
SET STATUS_PROCESSED = 0
   ,MODIFY_DATE = GETDATE()
FROM PROCESS_BG_STATUS WITH (NOLOCK)
WHERE CODE = @CONT
AND COD_TYPE_PROCESS_BG = 1;

-- @SITUATION CONDITIONALS
IF @SITUATION = 'APPROVED'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,1
	   ,'100 - APROVADA';

UPDATE [TRANSACTION]
SET COD_SITUATION = 1
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '100 - APROVADA')
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 100)
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,LOGICAL_NUMBER_ACQ = @LOGICAL_NUMBER_ACQ
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CONFIRMED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '603', 1;

INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,3
	   ,@DESCRIPTION;

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 200)
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '200 - CONFIRMADA')

OUTPUT INSERTED.AMOUNT,
INSERTED.COD_TTYPE,
INSERTED.BRAND,
INSERTED.PLOTS,
INSERTED.CODE,
INSERTED.PAN,
INSERTED.COD_ASS_DEPTO_TERMINAL,
INSERTED.BRAZILIAN_DATE INTO @DATA_TRANSACTION (TRANSACTION_AMOUNT, COD_TTYPE,
BRAND, PLOTS, NSU, PAN,
COD_ASS_DEPTO_TERMINAL, TRANSACTION_DATE)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;


INSERT INTO TRANSACTION_AUTH_QUEUE (TRANSACTION_DATE, NSU, AUTH_CODE, NSU_EXT, AMOUNT, TRANSACTION_TYPE,
BRAND, PLOTS, PAN,
COD_TRAN, MERCHANT_NAME, MERCHANT_DOC, COD_EC, COD_EQUIP,
COD_AFFILIATOR)
	SELECT
		DT.TRANSACTION_DATE
	   ,DT.NSU
	   ,(SELECT TOP 1
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = @CONT
			AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')
	   ,(SELECT TOP 1
				[TRANSACTION_DATA_EXT].[VALUE]
			FROM TRANSACTION_DATA_EXT
			WHERE COD_TRAN = @CONT
			AND [TRANSACTION_DATA_EXT].[NAME] IN ('NSU', 'RCPTTXID', 'AUTO', '0'))
	   ,DT.TRANSACTION_AMOUNT
	   ,TRANSACTION_TYPE.CODE
	   ,DT.BRAND
	   ,DT.PLOTS
	   ,DT.PAN
	   ,@CONT
	   ,CE.NAME
	   ,CE.CPF_CNPJ
	   ,CE.COD_EC
	   ,ASS_DEPTO_EQUIP.COD_EQUIP
	   ,CE.COD_AFFILIATOR
	FROM @DATA_TRANSACTION DT
	JOIN TRANSACTION_TYPE
		ON TRANSACTION_TYPE.COD_TTYPE = DT.COD_TTYPE
	JOIN ASS_DEPTO_EQUIP
		ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = DT.COD_ASS_DEPTO_TERMINAL
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT CE
		ON BRANCH_EC.COD_EC = CE.COD_EC

END;
ELSE
IF @SITUATION = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,22
	   ,'206 - AGUARDANDO TITULOS';

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
UPDATE [TRANSACTION]
SET COD_SITUATION = 22
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = 206
   ,COMMENT = '206 - AGUARDANDO TITULOS'
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'PROCESSING UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,21
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 21
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'UNDONE FAIL'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,23
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 23
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'DENIED ACQUIRER'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,2
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 2
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'BLOCKED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,14
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;
IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;


--- REPROCESS FINANCIAL CALENDAR

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;


ELSE
IF @SITUATION = 'AWAITING PAYMENT'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,4
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

--UPDATE TRANSACTION_TITLES
--SET TRANSACTION_TITLES.COD_SITUATION = 4
--   ,MODIFY_DATE = GETDATE()
--   ,COMMENT = @DESCRIPTION
--   ,COD_FIN_CALENDAR = NULL
--FROM TRANSACTION_TITLES WITH (NOLOCK)
--INNER JOIN [TRANSACTION]
-- ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
--WHERE [TRANSACTION].COD_TRAN = @CONT;

EXEC [UP_STATUS_AWAITING_PAYMENT] @COD_TRAN = @CONT
								 ,@DESCRIPTION = @DESCRIPTION;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 4
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

--- REPROCESS FINANCIAL CALENDAR

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR

END;
ELSE
IF @SITUATION = 'UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,10
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 10
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
IF @SITUATION = 'FAILED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,7
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 7
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 700)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CANCELED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '703', 1;
IF @SIT = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
BEGIN
SELECT
	@QTY = COUNT(*)
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
LEFT JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_CALENDAR =
		[TRANSACTION_TITLES].COD_FIN_CALENDAR
		AND FINANCE_CALENDAR.ACTIVE = 1
WHERE [TRANSACTION].COD_TRAN = @CONT
AND ISNULL(FINANCE_CALENDAR.COD_SITUATION,
TRANSACTION_TITLES.COD_SITUATION) NOT IN
(4, 20);

IF @QTY > 0
THROW 60002, '704', 1;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @DATE_TRAN = CAST(dbo.FN_FUS_UTF(GETDATE()) AS DATE)
BEGIN


--- REPROCESS FINANCIAL CALENDAR

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;

INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


END;

END;
ELSE
IF @SITUATION = 'CANCELED PARTIAL'
BEGIN
IF @SIT = 'CANCELED'
THROW 60002, '703', 1;

INSERT INTO RELEASE_ADJUSTMENTS (COD_EC, VALUE,
PREVISION_PAY_DATE,
COD_TYPEJUST, COMMENT,
COD_SITUATION, COD_USER,
COD_REQ, COD_BRANCH, COD_TRAN,
COD_TITLE_REF)
	SELECT
		CAST(TRANSACTION_TITLES.COD_EC AS INT) AS COD_EC
	   ,(CAST(
		(
		(
		(TRANSACTION_TITLES.AMOUNT *
		(1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 -
				(((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(
						DAY,
						TRANSACTION_TITLES.PREVISION_PAY_DATE,
						TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END,
				(TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS DECIMAL(22, 6)) *
		-1) AS VALUE
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE AS PREVISION_PAY_DATE
	   ,CAST(2 AS INT) AS COD_TYPEJUST
	   ,CAST(
		'CANCELAMENTO PARCIAL, NSU: ' + [TRANSACTION].CODE AS VARCHAR(200)) AS COMMENT
	   ,CAST(4 AS INT) AS COD_SITUATION
	   ,NULL AS CODUSER
	   ,NULL AS COD_REQ
	   ,CAST([COMMERCIAL_ESTABLISHMENT].COD_EC AS INT) AS COD_BRANCH
	   ,CAST([TRANSACTION].COD_TRAN AS INT) AS COD_TRAN
	   ,CAST([TRANSACTION_TITLES].COD_TITLE AS INT) AS COD_TITLE_REF
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	INNER JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
	INNER JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].COD_EC = [TRANSACTION_TITLES].COD_EC
	LEFT JOIN FINANCE_CALENDAR
		ON FINANCE_CALENDAR.COD_FIN_CALENDAR =
			[TRANSACTION_TITLES].COD_FIN_CALENDAR
			AND FINANCE_CALENDAR.ACTIVE = 1
	WHERE [TRANSACTION].COD_TRAN = @CONT
	AND ISNULL(FINANCE_CALENDAR.COD_SITUATION,
	TRANSACTION_TITLES.COD_SITUATION) NOT IN (4, 20);

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION_TITLES]
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES].COD_SITUATION = 4;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES_COST].COD_SITUATION = 4;


DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;


END;
GO


IF OBJECT_ID('SP_LS_TRANSACTION_AUTH') IS NOT NULL DROP PROCEDURE SP_LS_TRANSACTION_AUTH;
GO
create procedure SP_LS_TRANSACTION_AUTH(
    @COD_AFF INT
)
AS
BEGIN

SELECT
	COD_TRAN_AUTH_QUEUE
   ,TRANSACTION_DATE
   ,NSU
   ,AMOUNT
   ,TRANSACTION_TYPE
   ,BRAND
   ,PLOTS
   ,PAN
   ,MERCHANT_NAME
   ,MERCHANT_DOC
   ,NSU_EXT
   ,AUTH_CODE
   ,EQUIPMENT.SERIAL INTO #temp
FROM TRANSACTION_AUTH_QUEUE(nolock)
JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = TRANSACTION_AUTH_QUEUE.COD_EQUIP
WHERE PROCESSED = 0
AND IN_PROGRESS = 0
AND COD_AFFILIATOR = @COD_AFF;


UPDATE TRANSACTION_AUTH_QUEUE
SET IN_PROGRESS = 1
WHERE COD_TRAN_AUTH_QUEUE IN (SELECT
		COD_TRAN_AUTH_QUEUE
	FROM #temp)


SELECT
	COD_TRAN_AUTH_QUEUE
   ,TRANSACTION_DATE
   ,NSU
   ,AMOUNT
   ,TRANSACTION_TYPE
   ,BRAND
   ,PLOTS
   ,PAN
   ,MERCHANT_NAME
   ,MERCHANT_DOC
   ,NSU_EXT
   ,AUTH_CODE
   ,SERIAL
FROM #temp

END
GO


IF OBJECT_ID('SP_UP_TRANSACTION_AUTH') IS NOT NULL DROP PROCEDURE SP_UP_TRANSACTION_AUTH;
GO
CREATE PROCEDURE SP_UP_TRANSACTION_AUTH(@TP CODE_TYPE READONLY)
AS
BEGIN

UPDATE TRANSACTION_AUTH_QUEUE
SET PROCESSED = 1
   ,IN_PROGRESS = 0
FROM TRANSACTION_AUTH_QUEUE
WHERE COD_TRAN_AUTH_QUEUE IN (SELECT
		CODE
	FROM @TP)
AND PROCESSED = 0

END

GO

IF OBJECT_ID('SP_UP_TRANSACTION_AUTH_FAIL') IS NOT NULL DROP PROCEDURE SP_UP_TRANSACTION_AUTH_FAIL;
GO
CREATE PROCEDURE SP_UP_TRANSACTION_AUTH_FAIL(@TP CODE_TYPE READONLY)
AS
BEGIN

UPDATE TRANSACTION_AUTH_QUEUE
SET PROCESSED = 0
   ,IN_PROGRESS = 0
FROM TRANSACTION_AUTH_QUEUE
WHERE COD_TRAN_AUTH_QUEUE IN (SELECT
		CODE
	FROM @TP)

END

GO


IF OBJECT_ID('SP_CLEAN_TRANSACTION_AUTH') IS NOT NULL DROP PROCEDURE SP_CLEAN_TRANSACTION_AUTH;
GO
CREATE PROCEDURE SP_CLEAN_TRANSACTION_AUTH
AS
BEGIN

DELETE FROM TRANSACTION_AUTH_QUEUE
WHERE DATEDIFF(DAY, GETDATE(), CREATED_AT) < -1

-- TRANSA��ES TRAVADAS EM PROCESSANDO F
UPDATE TRANSACTION_AUTH_QUEUE
SET PROCESSED = 0
   ,IN_PROGRESS = 0
WHERE PROCESSED = 0
AND IN_PROGRESS = 1
AND DATEDIFF(HOUR, GETDATE(), CREATED_AT) < -1
END
GO

IF OBJECT_ID('SP_LS_DATA_COMP_ACCESS_KEYS_EXTERNAL') IS NOT NULL DROP PROCEDURE SP_LS_DATA_COMP_ACCESS_KEYS_EXTERNAL;
GO
CREATE PROCEDURE [DBO].[SP_LS_DATA_COMP_ACCESS_KEYS_EXTERNAL]
/*----------------------------------------------------------------------------------------  
Project.......: TKPP
------------------------------------------------------------------------------------------  
Author                  VERSION        Date                 Description  
------------------------------------------------------------------------------------------  
Kennedy Alef   V1    27/07/2018   Creation  
Luiz Aquino             V2              13/04/2020          Add secondary secret  
------------------------------------------------------------------------------------------*/
AS
BEGIN

SELECT
	COMPANY.COD_COMP
   ,COMPANY.ACCESS_KEY
   ,COMPANY.SECRET_KEY
   ,ACCESS_APPAPI.APPNAME
   ,ACCESS_APPAPI.CLIENT_ID
   ,ACCESS_APPAPI.SECRETKEY [CLIENT_KEY]
   ,ACCESS_APPAPI.COD_AFFILIATOR
FROM COMPANY
INNER JOIN ACCESS_APPAPI
	ON ACCESS_APPAPI.COD_COMP = COMPANY.COD_COMP
		AND ACTIVE = 1
GROUP BY COMPANY.COD_COMP
		,COMPANY.ACCESS_KEY
		,COMPANY.SECRET_KEY
		,ACCESS_APPAPI.APPNAME
		,ACCESS_APPAPI.CLIENT_ID
		,ACCESS_APPAPI.SECRETKEY
		,ACCESS_APPAPI.COD_AFFILIATOR;
END;
GO


IF OBJECT_ID('SP_WebHook_List') IS NOT NULL DROP PROCEDURE SP_WebHook_List;
GO
CREATE PROCEDURE [dbo].[SP_WebHook_List](@AppName VARCHAR(64),
                                         @UserName VARCHAR(128) = NULL,
                                         @HookId VARCHAR(128) = NULL)
AS
BEGIN

SELECT
	[USERNAME]
   ,[ID]
   ,[DATA]
FROM WEBHOOKS
WHERE APPNAME = @AppName
AND (@UserName IS NULL
OR USERNAME = @UserName)
AND (@HookId IS NULL
OR ID = @HookId)

END
GO
IF OBJECT_ID('SP_WebHook_All_List') IS NOT NULL DROP PROCEDURE SP_WebHook_All_List;
GO
CREATE PROCEDURE [dbo].[SP_WebHook_All_List]
AS
BEGIN

SELECT
	[USERNAME]
   ,[ID]
   ,[DATA]
FROM WEBHOOKS
END
GO

---TESTE



IF OBJECT_ID('PRODUCT_ACQUIRE_FILTER') IS NULL BEGIN
    CREATE TABLE PRODUCT_ACQUIRE_FILTER
    (
        COD_PRD_ACQ_FILTER INT IDENTITY NOT NULL PRIMARY KEY,
        COD_AFFILIATOR INT NULL REFERENCES AFFILIATOR,
        COD_EC INT NULL REFERENCES COMMERCIAL_ESTABLISHMENT, 
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP,
        COD_AC INT NULL REFERENCES ACQUIRER,
        COD_MODEL INT NULL REFERENCES EQUIPMENT_MODEL,
        COD_BRAND INT NULL REFERENCES BRAND,
        ONLINE INT NOT NULL DEFAULT(0),
        PRESENTIAL INT NOT NULL DEFAULT (0),
        DEBIT INT NOT NULL DEFAULT(0),
        CREDIT INT NOT NULL DEFAULT (0),
        CREDIT_INSTALLMENTS INT NOT NULL DEFAULT(0),
        CLIENT_INSTALLMENT INT NOT NULL DEFAULT (0),
        CLIENT_DEBIT INT NOT NULL DEFAULT(0),
        CLIENT_CREDIT INT NOT NULL DEFAULT(0),
        RATE_FREE INT NOT NULL DEFAULT (0),
        CREATED_AT DATETIME NOT NULL DEFAULT(GETDATE()),
        COD_USER INT NULL REFERENCES USERS
    )
END
GO

CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_AF ON PRODUCT_ACQUIRE_FILTER (COD_AFFILIATOR, COD_AC, COD_MODEL, COD_BRAND)
GO
CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_EC ON PRODUCT_ACQUIRE_FILTER (COD_EC, COD_AC, COD_MODEL, COD_BRAND)
GO
CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_EQP ON PRODUCT_ACQUIRE_FILTER (COD_ASS_DEPTO_TERMINAL, COD_AC, COD_MODEL, COD_BRAND)
GO
CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_SUB ON PRODUCT_ACQUIRE_FILTER (COD_AFFILIATOR, COD_EC, COD_ASS_DEPTO_TERMINAL, COD_AC, COD_MODEL, COD_BRAND)
GO

CREATE INDEX IX_RA_EC ON ROUTE_ACQUIRER (COD_EC, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO
CREATE INDEX IX_RA_AF ON ROUTE_ACQUIRER (COD_AFFILIATOR, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO
CREATE INDEX IX_RA_EQP ON ROUTE_ACQUIRER (COD_EQUIP, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO
CREATE INDEX IX_RA_COMP ON ROUTE_ACQUIRER (COD_COMP, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO

UPDATE PRODUCTS_ACQUIRER 
SET PLOT_VALUE = 1
WHERE PLOT_VALUE = 2 AND CHARINDEX('À vista', NAME) > 0 
GO

IF OBJECT_ID('SP_LOAD_TABLES_EQUIP') IS NOT NULL DROP PROCEDURE SP_LOAD_TABLES_EQUIP
GO
CREATE PROCEDURE [DBO].[SP_LOAD_TABLES_EQUIP]
(
    @TERMINALID INT
)
AS 
BEGIN

    
IF @TERMINALID IN (  
3,  
7385,  
60193,  
60149,  
32528,  
4044,  
60192  
)  
BEGIN

SELECT
	ACQUIRER_NAME
   ,PRODUCT_ID
   ,PRODUCT_NAME
   ,PRODUCT_EXT_CODE
   ,TRAN_TYPE
   ,TRAN_TYPE_NAME
   ,CODE_EC_ACQ
   ,BRAND
   ,CONF_TYPE
   ,IS_SIMULATED
   ,(CASE
		WHEN dbo.FN_FUS_UTF(DATE_PLAN) > CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME) THEN dbo.FN_FUS_UTF(DATE_PLAN)
		ELSE CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME)
	END) DATE_PLAN
   ,COD_EQUIP
FROM TABLE_LOAD_PRCS
WHERE COD_EQUIP = @TERMINALID
END

--  OLD VERSION   
ELSE
BEGIN    

    DECLARE @COD_EC INT,
        @COD_AFF INT, 
        @COD_SUB INT, 
        @DATE_PLAN DATETIME, 
        @EQUIP_MODEL VARCHAR(100),
        @TODAY DATETIME = CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME),
        @COD_DPTO_TERM INT;
        --@TERMINALID INT = 19886;

    WITH CTE_DATA AS (
        SELECT ISNULL(CE.COD_AFFILIATOR, 0) AS  COD_AFFILIATOR
             , E.COD_COMP
             , BE.COD_EC
             , MAX(ATD.CREATED_AT)          AS  DATE_PLAN
             , E.COD_MODEL
             , ADE.COD_ASS_DEPTO_TERMINAL
        FROM ASS_DEPTO_EQUIP ADE
                 JOIN EQUIPMENT E ON E.COD_EQUIP = ADE.COD_EQUIP AND E.ACTIVE = 1
                 JOIN DEPARTMENTS_BRANCH DB ON DB.COD_DEPTO_BRANCH = ADE.COD_DEPTO_BRANCH
                 JOIN BRANCH_EC BE ON BE.COD_BRANCH = DB.COD_BRANCH
                 JOIN COMMERCIAL_ESTABLISHMENT CE ON BE.COD_EC = CE.COD_EC
                 JOIN ASS_TAX_DEPART ATD ON DB.COD_DEPTO_BRANCH = ATD.COD_DEPTO_BRANCH AND ATD.ACTIVE = 1
        WHERE ADE.COD_EQUIP = @TERMINALID AND ADE.ACTIVE = 1
        GROUP BY E.COD_COMP
               , ISNULL(CE.COD_AFFILIATOR, 0)
               , BE.COD_EC
               , E.COD_EQUIP
               , E.COD_MODEL
               , ADE.COD_ASS_DEPTO_TERMINAL
    )
    SELECT @COD_AFF = COD_AFFILIATOR
         , @COD_SUB = COD_COMP
         , @COD_EC = COD_EC
         , @DATE_PLAN = IIF(DATE_PLAN > @TODAY, DATE_PLAN, @TODAY)
         , @EQUIP_MODEL = COD_MODEL
         , @COD_DPTO_TERM = COD_ASS_DEPTO_TERMINAL
    FROM CTE_DATA;

    SELECT COD_BRAND
    INTO #BRAND_EQP
    FROM ROUTE_ACQUIRER
    WHERE COD_EQUIP = @TERMINALID AND ACTIVE = 1 AND COD_SOURCE_TRAN = 2

    SELECT RA.COD_BRAND
    INTO #BRAND_EC
    FROM ROUTE_ACQUIRER RA
    LEFT JOIN #BRAND_EQP EQP ON EQP.COD_BRAND = RA.COD_BRAND
    WHERE RA.COD_EC = @COD_EC AND
          RA.ACTIVE = 1 AND
          EQP.COD_BRAND IS NULL

    SELECT RA.COD_BRAND
    INTO #BRAND_AFF
    FROM ROUTE_ACQUIRER RA
         LEFT JOIN #BRAND_EQP EQP ON EQP.COD_BRAND = RA.COD_BRAND
         LEFT JOIN #BRAND_EC EC ON EC.COD_BRAND = RA.COD_BRAND
    WHERE RA.COD_AFFILIATOR = @COD_AFF AND 
        RA.ACTIVE = 1 AND
        EQP.COD_BRAND IS NULL AND
        EC.COD_BRAND IS NULL

    SELECT  RA.COD_BRAND
    INTO #BRAND_SUB
    FROM ROUTE_ACQUIRER RA
        LEFT JOIN #BRAND_EQP EQP ON EQP.COD_BRAND = RA.COD_BRAND
        LEFT JOIN #BRAND_EC EC ON EC.COD_BRAND = RA.COD_BRAND
        LEFT JOIN #BRAND_AFF AF ON AF.COD_BRAND = RA.COD_BRAND
    WHERE RA.COD_COMP = @COD_SUB AND
        RA.ACTIVE = 1  AND
        EQP.COD_BRAND IS NULL AND
        EC.COD_BRAND IS NULL AND
        AF.COD_BRAND IS NULL
          
    CREATE TABLE #ROUTES_TERMINAL(
        ACQUIRER_NAME VARCHAR(128),
        PRODUCT_ID INT,
        PRODUCT_NAME VARCHAR(64),
        PRODUCT_EXT_CODE VARCHAR(64),
        TRAN_TYPE INT,
        TRAN_TYPE_NAME VARCHAR(32),
        CODE_EC_ACQ VARCHAR(10),
        BRAND VARCHAR(64),
        CONF_TYPE INT,
        IS_SIMULATED INT,
        DATE_PLAN DATETIME,
        
        COD_AC INT,
        COD_BRAND INT,
        DEBIT INT,
        CREDIT INT,
        CREDIT_INSTALLMENTS INT,
        CLIENT_INSTALLMENT INT,
        CLIENT_DEBIT INT,
        CLIENT_CREDIT INT,
        ONLINE INT,
        PRESENTIAL INT,
        RATE_FREE INT        
    )
        
    INSERT INTO #ROUTES_TERMINAL(ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE) 
    SELECT ACQUIRER.[GROUP]         AS ACQUIRER_NAME
         , PA.COD_PR_ACQ            AS PRODUCT_ID
         , PA.NAME                  AS PRODUCT_NAME
         , PA.EXTERNALCODE          AS PRODUCT_EXT_CODE
         , [TT].COD_TTYPE           AS TRAN_TYPE
         , [TT].NAME                AS TRAN_TYPE_NAME
         , '0'                      AS CODE_EC_ACQ
         , B.NAME                   AS BRAND
         , RA.CONF_TYPE
         , PA.IS_SIMULATED
         , @DATE_PLAN               AS DATE_PLAN
         , PA.COD_AC
         , B.COD_BRAND
         , IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
         , IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
         , IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
         , IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
         , IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
         , IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
    FROM #BRAND_SUB CTE_SUB
        INNER JOIN ROUTE_ACQUIRER RA ON 
            RA.COD_BRAND = CTE_SUB.COD_BRAND AND
            RA.ACTIVE = 1 AND
            RA.COD_SOURCE_TRAN = 2 AND
            RA.COD_COMP = @COD_SUB AND
            RA.CONF_TYPE = 4
        INNER JOIN BRAND B ON 
            B.COD_BRAND = CTE_SUB.COD_BRAND
        INNER JOIN [TRANSACTION_TYPE] TT ON 
            [TT].COD_TTYPE = B.COD_TTYPE
        INNER JOIN ACQUIRER ON 
            ACQUIRER.COD_AC = RA.COD_AC
        INNER JOIN PRODUCTS_ACQUIRER PA ON 
            PA.COD_BRAND = CTE_SUB.COD_BRAND AND
            PA.COD_AC = RA.COD_AC AND
            PA.COD_SOURCE_TRAN = 2 AND
            PA.VISIBLE = 1

    INSERT INTO #ROUTES_TERMINAL(ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
    SELECT ACQUIRER.[GROUP]         AS ACQUIRER_NAME
         , PA.COD_PR_ACQ            AS PRODUCT_ID
         , PA.NAME                  AS PRODUCT_NAME
         , PA.EXTERNALCODE          AS PRODUCT_EXT_CODE
         , [TT].COD_TTYPE           AS TRAN_TYPE
         , [TT].NAME                AS TRAN_TYPE_NAME
         , '0'                      AS CODE_EC_ACQ
         , B.NAME                   AS BRAND
         , RA.CONF_TYPE
         , PA.IS_SIMULATED
         , @DATE_PLAN               AS DATE_PLAN
         , PA.COD_AC
         , B.COD_BRAND
         , IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
         , IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
         , IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
         , IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
         , IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
         , IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
    FROM #BRAND_AFF CTE_AFF
        INNER JOIN ROUTE_ACQUIRER RA ON 
            RA.COD_BRAND = CTE_AFF.COD_BRAND AND
            RA.ACTIVE = 1 AND
            RA.COD_SOURCE_TRAN = 2 AND
            RA.COD_AFFILIATOR = @COD_AFF AND
            RA.CONF_TYPE = 3
        INNER JOIN BRAND B ON 
            B.COD_BRAND = CTE_AFF.COD_BRAND
        INNER JOIN [TRANSACTION_TYPE] TT ON 
            [TT].COD_TTYPE = B.COD_TTYPE
        INNER JOIN ACQUIRER ON 
            ACQUIRER.COD_AC = RA.COD_AC
        INNER JOIN PRODUCTS_ACQUIRER PA ON 
            PA.COD_BRAND = CTE_AFF.COD_BRAND AND
            PA.COD_AC = RA.COD_AC AND
            PA.COD_SOURCE_TRAN = 2 AND
            PA.VISIBLE = 1

    INSERT INTO #ROUTES_TERMINAL(ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
    SELECT ACQUIRER.[GROUP]     AS ACQUIRER_NAME
         , PA.COD_PR_ACQ        AS PRODUCT_ID
         , PA.NAME              AS PRODUCT_NAME
         , PA.EXTERNALCODE      AS PRODUCT_EXT_CODE
         , [TT].COD_TTYPE       AS TRAN_TYPE
         , [TT].NAME            AS TRAN_TYPE_NAME
         , '0'                  AS CODE_EC_ACQ
         , B.NAME               AS BRAND
         , RA.CONF_TYPE
         , PA.IS_SIMULATED
         , @DATE_PLAN           AS DATE_PLAN
         , PA.COD_AC
         , B.COD_BRAND
         , IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
         , IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
         , IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
         , IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
         , IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
         , IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
    FROM #BRAND_EC [CTE_EC]
        INNER JOIN ROUTE_ACQUIRER RA ON 
            RA.COD_BRAND = [CTE_EC].COD_BRAND AND
            RA.ACTIVE = 1 AND
            RA.COD_SOURCE_TRAN = 2 AND
            RA.COD_EC = @COD_EC AND
            RA.CONF_TYPE = 2
        INNER JOIN BRAND B ON 
            B.COD_BRAND = [CTE_EC].COD_BRAND
        INNER JOIN [TRANSACTION_TYPE] TT ON 
            [TT].COD_TTYPE = B.COD_TTYPE
        INNER JOIN ACQUIRER ON 
            ACQUIRER.COD_AC = RA.COD_AC
        INNER JOIN PRODUCTS_ACQUIRER PA ON 
            PA.COD_BRAND = [CTE_EC].COD_BRAND AND
            PA.COD_AC = RA.COD_AC AND
            PA.COD_SOURCE_TRAN = 2 AND
            PA.VISIBLE = 1

    INSERT INTO #ROUTES_TERMINAL(ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
    SELECT ACQUIRER.[GROUP]         AS ACQUIRER_NAME
         , PA.COD_PR_ACQ            AS PRODUCT_ID
         , PA.NAME                  AS PRODUCT_NAME
         , PA.EXTERNALCODE          AS PRODUCT_EXT_CODE
         , [TT].COD_TTYPE           AS TRAN_TYPE
         , [TT].NAME                AS TRAN_TYPE_NAME
         , '0'                      AS CODE_EC_ACQ
         , B.NAME                   AS BRAND
         , RA.CONF_TYPE
         , PA.IS_SIMULATED
         , @DATE_PLAN               AS DATE_PLAN
         , PA.COD_AC
         , B.COD_BRAND
         , IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
         , IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
         , IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
         , IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
         , IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
         , IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
         , IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
    FROM #BRAND_EQP [CTE_EQUIP]
        INNER JOIN ROUTE_ACQUIRER RA ON 
            RA.COD_BRAND = [CTE_EQUIP].COD_BRAND AND
            RA.ACTIVE = 1 AND
            RA.COD_SOURCE_TRAN = 2 AND
            RA.COD_EQUIP = @TERMINALID AND
            RA.CONF_TYPE = 1
        INNER JOIN BRAND B ON 
            B.COD_BRAND = [CTE_EQUIP].COD_BRAND
        INNER JOIN [TRANSACTION_TYPE] TT ON 
            [TT].COD_TTYPE = B.COD_TTYPE
        INNER JOIN ACQUIRER ON 
            ACQUIRER.COD_AC = RA.COD_AC
        INNER JOIN PRODUCTS_ACQUIRER PA ON 
            PA.COD_BRAND = [CTE_EQUIP].COD_BRAND AND
            PA.COD_AC = RA.COD_AC AND
            PA.COD_SOURCE_TRAN = 2 AND
            PA.VISIBLE = 1
    
    CREATE TABLE #TERMINAL_FILTER
    (
        COD_AC INT,
        COD_MODEL INT,
        COD_BRAND INT,
        ONLINE INT,
        PRESENTIAL INT,
        CREDIT INT,
        DEBIT INT,
        CREDIT_INSTALLMENTS INT,
        CLIENT_INSTALLMENT INT,
        CLIENT_CREDIT INT,
        CLIENT_DEBIT INT,
        RATE_FREE INT 
    )
    
    IF EXISTS(SELECT COD_PRD_ACQ_FILTER FROM PRODUCT_ACQUIRE_FILTER WHERE COD_ASS_DEPTO_TERMINAL = @COD_DPTO_TERM) BEGIN
        INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
        SELECT COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE 
        FROM PRODUCT_ACQUIRE_FILTER WHERE COD_ASS_DEPTO_TERMINAL = @COD_DPTO_TERM  
    END 
    ELSE IF EXISTS(SELECT COD_PRD_ACQ_FILTER FROM PRODUCT_ACQUIRE_FILTER WHERE COD_EC = @COD_EC) BEGIN
        INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
        SELECT COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE
        FROM PRODUCT_ACQUIRE_FILTER WHERE COD_EC = @COD_EC
    END
    ELSE IF EXISTS(SELECT COD_PRD_ACQ_FILTER FROM PRODUCT_ACQUIRE_FILTER WHERE COD_AFFILIATOR = @COD_AFF) BEGIN
        INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
        SELECT COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE
        FROM PRODUCT_ACQUIRE_FILTER WHERE COD_AFFILIATOR = @COD_AFF
    END 
    ELSE BEGIN
        INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
        SELECT COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE
        FROM PRODUCT_ACQUIRE_FILTER 
        WHERE COD_AFFILIATOR IS NULL AND COD_EC IS NULL AND COD_ASS_DEPTO_TERMINAL IS NULL
    END
    
    DELETE RT 
    FROM #ROUTES_TERMINAL RT
    JOIN #TERMINAL_FILTER PAF ON 
        (PAF.COD_AC IS NULL OR PAF.COD_AC = RT.COD_AC) AND
        (PAF.COD_MODEL IS NULL OR PAF.COD_MODEL = @EQUIP_MODEL) AND
        (PAF.COD_BRAND IS NULL OR PAF.COD_BRAND = RT.COD_BRAND) AND
        (
            PAF.ONLINE = RT.ONLINE OR
            PAF.PRESENTIAL = RT.PRESENTIAL OR
            PAF.CREDIT = RT.CREDIT OR
            PAF.DEBIT = RT.DEBIT OR
            PAF.CREDIT_INSTALLMENTS = RT.CREDIT_INSTALLMENTS OR
            PAF.CLIENT_INSTALLMENT = RT.CLIENT_INSTALLMENT OR
            PAF.CLIENT_CREDIT = RT.CLIENT_CREDIT OR
            PAF.CLIENT_DEBIT = RT.CLIENT_DEBIT OR
            PAF.RATE_FREE = RT.RATE_FREE
        )    
    
    SELECT ACQUIRER_NAME
         , PRODUCT_ID
         , PRODUCT_NAME
         , PRODUCT_EXT_CODE
         , TRAN_TYPE
         , TRAN_TYPE_NAME
         , CODE_EC_ACQ
         , BRAND
         , CONF_TYPE
         , IS_SIMULATED
         , DATE_PLAN
    FROM #ROUTES_TERMINAL
    END
END;
go

IF OBJECT_ID('SP_LS_SOURCE_TRANSACTION') IS NOT NULL
    DROP PROCEDURE SP_LS_SOURCE_TRANSACTION
GO
CREATE PROCEDURE SP_LS_SOURCE_TRANSACTION
AS
BEGIN

    SELECT COD_SOURCE_TRAN
         , CODE
    FROM SOURCE_TRANSACTION

END;
GO


IF OBJECT_ID('SP_LS_FILTER_PRDCT_ACQ') IS NOT NULL
    DROP PROCEDURE SP_LS_FILTER_PRDCT_ACQ
GO
CREATE PROCEDURE SP_LS_FILTER_PRDCT_ACQ
(
    @COD_AFF INT = NULL,
    @COD_EC INT = NULL,
    @SERIAL VARCHAR(96) = NULL,
    @COD_AC INT = NULL,
    @COD_MODEL INT = NULL,
    @BRANDGROUP VARCHAR(64) = NULL,
    @ONLINE INT = 0,
    @PRESENTIAL INT = 0,
    @PAGE INT = 1,
    @PAGESIZE INT = 10,
    @SEARCH_TYPE INT = 1,
    @QtyRows INT OUTPUT
) AS BEGIN
    SET NOCOUNT ON
    SET ARITHABORT ON

    DECLARE @Skip INT = (@PAGE - 1) * @PAGESIZE;
    DECLARE @Sql NVARCHAR(MAX)

    SET @Sql = ' 
    SELECT 
        COD_PRD_ACQ_FILTER
         , PAF.COD_AFFILIATOR
         , A.NAME AF_NAME
         , PAF.COD_EC
         , CE.NAME EC_NAME
         , PAF.COD_ASS_DEPTO_TERMINAL
         , E.SERIAL
         , PAF.COD_AC
         , ACQ.NAME ACQ_NAME
         , PAF.COD_MODEL
         , EM.CODIGO MODEL
         , CONCAT(B.[GROUP], '' '', TT.CODE)  BRAND_GROUP
         , PAF.ONLINE
         , PAF.PRESENTIAL
         , PAF.DEBIT
         , PAF.CREDIT
         , PAF.CREDIT_INSTALLMENTS
         , PAF.CLIENT_INSTALLMENT
         , PAF.CLIENT_DEBIT
         , PAF.CLIENT_CREDIT
         , PAF.RATE_FREE
    FROM PRODUCT_ACQUIRE_FILTER PAF 
    LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = PAF.COD_AFFILIATOR
    LEFT JOIN COMMERCIAL_ESTABLISHMENT CE ON CE.COD_EC = PAF.COD_EC
    LEFT JOIN ACQUIRER ACQ ON ACQ.COD_AC = PAF.COD_AC
    LEFT JOIN EQUIPMENT_MODEL EM ON EM.COD_MODEL = PAF.COD_MODEL
    LEFT JOIN BRAND B ON B.COD_BRAND = PAF.COD_BRAND
    LEFT JOIN TRANSACTION_TYPE TT ON TT.COD_TTYPE = B.COD_TTYPE
    LEFT JOIN ASS_DEPTO_EQUIP ADE on PAF.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
    LEFT JOIN EQUIPMENT E ON E.COD_EQUIP = ADE.COD_EQUIP
    WHERE '

    IF @COD_AFF IS NOT NULL BEGIN
        SET @Sql = @Sql + ' PAF.COD_AFFILIATOR = @COD_AFF';
    END ELSE IF @SEARCH_TYPE = 2 BEGIN
        SET @Sql = @Sql + ' PAF.COD_AFFILIATOR IS NOT NULL '
    END
    ELSE IF @COD_EC IS NOT NULL BEGIN
        SET @Sql = @Sql + ' PAF.COD_EC = @COD_EC ';
    END ELSE IF @SEARCH_TYPE = 3 BEGIN
        SET @Sql = @Sql + ' PAF.COD_EC IS NOT NULL '
    END
    ELSE IF @SERIAL IS NOT NULL BEGIN
        SET @Sql = @Sql + ' E.SERIAL = @SERIAL '
    END ELSE IF @SEARCH_TYPE = 4 BEGIN
        SET @Sql = @Sql + ' PAF.COD_ASS_DEPTO_TERMINAL IS NOT NULL '
    END
    ELSE BEGIN
        SET @Sql = @Sql + ' PAF.COD_AFFILIATOR IS NULL AND PAF.COD_EC IS NULL AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL '
    END

    IF @ONLINE = 1 BEGIN
        SET @Sql = @Sql + ' AND PAF.ONLINE = 1 ';
    END

    IF @PRESENTIAL = 1 BEGIN
        SET @Sql = @Sql + ' AND PAF.PRESENTIAL = 1 ';
    END

    IF @COD_AC IS NOT NULL BEGIN
        SET @Sql = @Sql + ' AND PAF.COD_AC = @COD_AC ';
    END

    IF @COD_MODEL IS NOT NULL BEGIN
        SET @Sql = @Sql + ' AND PAF.COD_MODEL = @COD_MODEL '
    END

    IF @BRANDGROUP IS NOT NULL BEGIN
        SET @Sql =  @Sql + ' AND B.[GROUP] = @BRANDGROUP '
    END

    DECLARE @CTQUERY NVARCHAR(MAX) = N'SELECT @QtyRows=COUNT(*) FROM (' + @Sql + ') r ';

    EXEC SP_EXECUTESQL @CTQUERY
        ,N'@COD_AFF INT,
    @COD_EC INT,
    @SERIAL VARCHAR(96),
    @COD_AC INT,
    @COD_MODEL INT,
    @BRANDGROUP VARCHAR(64),
    @ONLINE INT,
    @PRESENTIAL INT,
    @PAGE INT,
    @PAGESIZE INT,
    @Skip INT,
    @QtyRows INT OUTPUT
    ', @COD_AFF = @COD_AFF,
         @COD_EC = @COD_EC,
         @SERIAL = @SERIAL,
         @COD_AC = @COD_AC,
         @COD_MODEL = @COD_MODEL,
         @BRANDGROUP = @BRANDGROUP,
         @ONLINE = @ONLINE,
         @PRESENTIAL = @PRESENTIAL,
         @PAGE = @PAGE,
         @PAGESIZE = @PAGESIZE,
         @Skip = @Skip,
         @QtyRows = @QtyRows OUTPUT;

    SET @Sql = @Sql + ' ORDER BY COD_PRD_ACQ_FILTER DESC
    OFFSET @Skip ROWS
    FETCH NEXT @PAGESIZE ROWS ONLY 
    '

    EXEC SP_EXECUTESQL @Sql
        ,N'@COD_AFF INT,
    @COD_EC INT,
    @SERIAL VARCHAR(96),
    @COD_AC INT,
    @COD_MODEL INT,
    @BRANDGROUP VARCHAR(64),
    @ONLINE INT,
    @PRESENTIAL INT,
    @PAGE INT,
    @PAGESIZE INT,
    @Skip INT
    ', @COD_AFF = @COD_AFF,
         @COD_EC = @COD_EC,
         @SERIAL = @SERIAL,
         @COD_AC = @COD_AC,
         @COD_MODEL = @COD_MODEL,
         @BRANDGROUP = @BRANDGROUP,
         @ONLINE = @ONLINE,
         @PRESENTIAL = @PRESENTIAL,
         @PAGE = @PAGE,
         @PAGESIZE = @PAGESIZE,
         @Skip = @Skip;

END
GO

IF OBJECT_ID('SP_RM_FILTER_PRDCT_ACQ') IS NOT NULL BEGIN
    DROP PROCEDURE SP_RM_FILTER_PRDCT_ACQ
END
GO
CREATE PROCEDURE SP_RM_FILTER_PRDCT_ACQ
(
    @Ids CODE_TYPE READONLY 
) AS BEGIN
   
    DELETE PRODUCT_ACQUIRE_FILTER
    FROM PRODUCT_ACQUIRE_FILTER
    JOIN @Ids i ON i.CODE  = PRODUCT_ACQUIRE_FILTER.COD_PRD_ACQ_FILTER
    
END
GO


IF OBJECT_ID('SP_CREATE_FILTER_PRDCT_ACQ') IS NOT NULL
    DROP PROCEDURE SP_CREATE_FILTER_PRDCT_ACQ
GO
IF OBJECT_ID('SP_FD_CONFLICT_FILTER_PRDT_ACQ') IS NOT NULL
    DROP PROCEDURE SP_FD_CONFLICT_FILTER_PRDT_ACQ
GO
IF TYPE_ID('PRD_ACQ_FILTER_TP') IS NOT NULL BEGIN
    DROP TYPE PRD_ACQ_FILTER_TP
END 
GO
CREATE TYPE PRD_ACQ_FILTER_TP AS table
(
    [COD_AF] INT,
    [COD_EC] INT,
    [COD_EQP] INT,
    [COD_ACQ] INT,
    [ONLINE] INT,
    [PRESENTIAL] INT,
    [COD_MODEL] INT,
    [BRAND_GROUP] VARCHAR(64),
    [CREDIT] INT,
    [DEBIT] INT,
    [CREDIT_INSTALLMENTS] INT,
    [CLIENT_INSTALLMENTS] INT,
    [CLIENT_CREDIT] INT,
    [CLIENT_DEBIT] INT,
    [RATE_FREE] INT
)
GO
CREATE PROCEDURE SP_CREATE_FILTER_PRDCT_ACQ
/*----------------------------------------------------------------------------------------        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author                  VERSION        Date             Description        
------------------------------------------------------------------------------------------        
    Luiz Aquino              V1            2020-11-25       CREATED  
------------------------------------------------------------------------------------------*/
(
@ITEMS PRD_ACQ_FILTER_TP READONLY,
@COD_USER INT = null
) AS BEGIN
    
    DELETE PAF 
    FROM PRODUCT_ACQUIRE_FILTER PAF
        LEFT JOIN ASS_DEPTO_EQUIP ADE ON ADE.COD_ASS_DEPTO_TERMINAL = PAF.COD_ASS_DEPTO_TERMINAL
        LEFT JOIN BRAND B ON B.COD_BRAND = PAF.COD_BRAND
    JOIN @ITEMS I ON ((PAF.COD_AFFILIATOR = I.COD_AF) OR
                    (PAF.COD_EC = I.COD_EC) OR
                    (ADE.COD_EQUIP = I.COD_EQP) OR
                    (PAF.COD_AFFILIATOR IS NULL AND PAF.COD_EC IS NULL AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL)) AND
                    ( (PAF.COD_MODEL IS NULL AND I.COD_MODEL IS NULL) OR PAF.COD_MODEL = I.COD_MODEL ) AND
                    ( (PAF.COD_AC IS NULL AND I.COD_ACQ IS NULL) OR PAF.COD_AC = I.COD_ACQ ) AND
                    ( PAF.PRESENTIAL = I.PRESENTIAL ) AND
                    ( PAF.ONLINE = I.ONLINE ) AND
                    ( ( B.[GROUP] IS NULL AND I.BRAND_GROUP IS NULL) OR B.[GROUP] = I.BRAND_GROUP )
                    
    INSERT INTO PRODUCT_ACQUIRE_FILTER 
    (
        COD_AFFILIATOR, 
        COD_EC, 
        COD_ASS_DEPTO_TERMINAL, 
        COD_AC, 
        COD_MODEL, 
        COD_BRAND, 
        ONLINE, 
        PRESENTIAL, 
        DEBIT, 
        CREDIT, 
        CREDIT_INSTALLMENTS, 
        CLIENT_INSTALLMENT, 
        CLIENT_DEBIT, 
        CLIENT_CREDIT, 
        RATE_FREE,
        CREATED_AT, 
        COD_USER
    ) 
    SELECT 
        COD_AF,
        COD_EC,
        ADE.COD_ASS_DEPTO_TERMINAL,
        COD_ACQ,
        COD_MODEL,
        B.COD_BRAND,
        ONLINE,
        PRESENTIAL,
        DEBIT,
        CREDIT,
        CREDIT_INSTALLMENTS,
        CLIENT_INSTALLMENTS,
        CLIENT_DEBIT,
        CLIENT_CREDIT,
        RATE_FREE,
        GETDATE(),
        @COD_USER
    FROM @ITEMS I
    LEFT JOIN ASS_DEPTO_EQUIP ADE ON ADE.COD_EQUIP = I.COD_EQP AND ACTIVE=  1
    LEFT JOIN BRAND B ON B.[GROUP] = I.BRAND_GROUP AND 
                        ((COD_TTYPE = 1 AND (CREDIT = 1 OR CREDIT_INSTALLMENTS = 1 OR CLIENT_INSTALLMENTS = 1 OR CLIENT_CREDIT = 1 OR RATE_FREE = 1) ) OR 
                        (COD_TTYPE = 2 AND (DEBIT = 1 OR CLIENT_DEBIT = 1)))
END 
GO
CREATE PROCEDURE SP_FD_CONFLICT_FILTER_PRDT_ACQ
/*----------------------------------------------------------------------------------------        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author                  VERSION        Date             Description        
------------------------------------------------------------------------------------------        
    Luiz Aquino              V1            2020-11-25       CREATED  
------------------------------------------------------------------------------------------*/
(
    @ITEMS PRD_ACQ_FILTER_TP READONLY
) AS BEGIN

    SELECT PAF.*
    FROM PRODUCT_ACQUIRE_FILTER PAF
            LEFT JOIN ASS_DEPTO_EQUIP ADE ON ADE.COD_ASS_DEPTO_TERMINAL = PAF.COD_ASS_DEPTO_TERMINAL
            LEFT JOIN BRAND B ON B.COD_BRAND = PAF.COD_BRAND
            JOIN @ITEMS I ON ((PAF.COD_AFFILIATOR = I.COD_AF) OR
                            (PAF.COD_EC = I.COD_EC) OR
                            (ADE.COD_EQUIP = I.COD_EQP) OR
                            (PAF.COD_AFFILIATOR IS NULL AND PAF.COD_EC IS NULL AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL)) AND
                            ( (PAF.COD_MODEL IS NULL AND I.COD_MODEL IS NULL) OR PAF.COD_MODEL = I.COD_MODEL ) AND
                            ( (PAF.COD_AC IS NULL AND I.COD_ACQ IS NULL) OR PAF.COD_AC = I.COD_ACQ ) AND
                            ( PAF.PRESENTIAL = I.PRESENTIAL ) AND
                            ( PAF.ONLINE = I.ONLINE ) AND
                            ( ( B.[GROUP] IS NULL AND I.BRAND_GROUP IS NULL) OR B.[GROUP] = I.BRAND_GROUP )
    
END
    
   
    
    