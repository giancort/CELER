
-- IF OBJECT_ID('RECONCILE_ACQUIRER_TRANSACTION') IS NOT NULL DROP TABLE RECONCILE_ACQUIRER_TRANSACTION;
-- GO
-- create table RECONCILE_ACQUIRER_TRANSACTION
-- (
--     COD_REC_ACQ_TRAN int identity primary key,
--     RECONCILE_DATE   DATETIME,
--     HAS_DIVERGENCE   BIT,
--     DESCRIPTION      VARCHAR(255),
--     ACTIVE           BIT DEFAULT 1,
--     COD_TRAN         int not null,
--     COD_AC           int,
--     COD_SITUATION    INT,
--     FILE_NAME        VARCHAR(255),
--     LINE             VARCHAR(MAX),
--     foreign key (COD_SITUATION) references [SITUATION] (COD_SITUATION),
--     foreign key (COD_TRAN) references [TRANSACTION] (COD_TRAN),
--     foreign key (COD_AC) references ACQUIRER (COD_AC)
-- )
-- GO
--ET-1167

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILED'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD RECONCILED BIT DEFAULT 0;


END;
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'COD_REC_SIT'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD COD_REC_SIT INT FOREIGN KEY (COD_REC_SIT) REFERENCES SITUATION (COD_SITUATION);

END;
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILE_DESCRIPTION'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD RECONCILE_DESCRIPTION VARCHAR(255);

END;
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'LOGICAL_NUMBER_ACQ'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD LOGICAL_NUMBER_ACQ VARCHAR(255)


END;
GO
IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'COD_ACQ_SEGMENT'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD COD_ACQ_SEGMENT INT;

END;

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILE_DATE'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD RECONCILE_DATE DATETIME;

END;
GO


IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILE_ID'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD RECONCILE_ID VARCHAR(255);

END;
GO

IF NOT EXISTS (SELECT
		OBJECT_ID('FK_ACQ_SEGMENT'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD CONSTRAINT FK_ACQ_SEGMENT FOREIGN KEY (COD_ACQ_SEGMENT) REFERENCES ACQUIRER (COD_AC)
END

GO

GO

UPDATE ACQUIRER
SET CODE = '115122641'
WHERE COD_AC = 10

GO

UPDATE REPORT_TRANSACTIONS_EXP
SET RECONCILED = 0
WHERE RECONCILED IS NULL

GO

IF ( SELECT
		COUNT(*)
	FROM SITUATION
	WHERE NAME = 'RECONCILED')
= 0
INSERT INTO SITUATION (name, viewer, transaction_viewer)
	VALUES ('RECONCILED', 1, 1),
	('PARTIAL RECONCILIATION', 1, 1),
	('NOT RECONCILED', 1, 1),
	('MANUALLY RECONCILED', 1, 1)
GO



IF ( SELECT
		COUNT(*)
	FROM TRADUCTION_SITUATION
	WHERE SITUATION_TR = 'CONCILIADO')
= 0
INSERT INTO TRADUCTION_SITUATION (COD_SITUATION, LANGUAGE, SITUATION_TR)
	VALUES ((SELECT TOP 1 SITUATION.COD_SITUATION FROM SITUATION WHERE NAME = 'RECONCILED'), 'PORTUGUES', 'CONCILIADO'),
	((SELECT TOP 1 SITUATION.COD_SITUATION FROM SITUATION WHERE NAME = 'PARTIAL RECONCILIATION'), 'PORTUGUES', 'CONCILIA��O PARCIAL'),
	((SELECT TOP 1 SITUATION.COD_SITUATION FROM SITUATION WHERE NAME = 'NOT RECONCILED'), 'PORTUGUES', 'N�O CONCILIADO'),
	((SELECT TOP 1 SITUATION.COD_SITUATION FROM SITUATION WHERE NAME = 'MANUALLY RECONCILED'), 'PORTUGUES', 'CONCILIADO MANUALMENTE')


GO

IF TYPE_ID('TP_RECONCILE') IS NOT NULL
DROP TYPE TP_RECONCILE
GO
create type TP_RECONCILE AS TABLE
(
    COD_TRAN      INT,
    COD_SITUATION INT,
    DESCRIPTION   VARCHAR(250),
    TRANSACTION_ID VARCHAR(250)
);

GO

IF OBJECT_ID('SP_REG_RECONCILE_ACQUIRER_TRANSACTION') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_ACQUIRER_TRANSACTION;
GO

CREATE PROCEDURE SP_REG_RECONCILE_ACQUIRER_TRANSACTION(
    @TP TP_RECONCILE READONLY
)
AS
BEGIN

    DECLARE @GETDATE DATETIME = DBO.FN_FUS_UTF(GETDATE());


UPDATE REPORT_TRANSACTIONS_EXP
SET RECONCILED = 1
   ,COD_REC_SIT = TP.COD_SITUATION
   ,RECONCILE_DATE = @GETDATE
   ,RECONCILE_DESCRIPTION = TP.DESCRIPTION
   ,RECONCILE_ID = TP.TRANSACTION_ID
FROM REPORT_TRANSACTIONS_EXP
JOIN @TP TP
	ON TP.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN

END

GO

UPDATE DATA_TID_AVAILABLE_EC
SET ACTIVE = 0
WHERE COD_DATA_EQUIP IN (643, 647, 759, 641, 695)
AND ACTIVE = 1
GO

ALTER VIEW [dbo].[VW_REPORT_TRANSACTIONS_EXP]
AS
/*----------------------------------------------------------------------------------------                                        
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                                        
Project.......: TKPP                                        
------------------------------------------------------------------------------------------                                        
Author                          VERSION        Date                            Description                                        
------------------------------------------------------------------------------------------                                        
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                              
Caike Uchoa                        v2       10/01/2020                         add CNAE                    
Kennedy Alef                       v3       08/04/2020                      add link de pagamento              
Caike Uchoa                        v4       30/04/2020                        insert ec prod              
Caike Uchoa                        v5       17/08/2020                        Add SALES_TYPE   
Luiz Aquino                        v6       01/07/2020                        Add PlanDZero  
Caike Uchoa                        v7       31/08/2020                        Add cod_ec_prod  
Kennedy Alef                       v8       02/09/2020                        Add change calculations       
Caike Uchoa                        v9       28/09/2020                        Add branch business
Caike Uchoa                        v10      29/09/2020                        remove NET_VALUE
------------------------------------------------------------------------------------------*/
WITH CTE
AS
(SELECT TOP (1000)
		[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
	   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
	   ,[TRANSACTION].[PLOTS] AS [PLOTS]
	   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
	   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
	   ,[EQUIPMENT].[TID] AS [TID]
	   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
	   ,[TRANSACTION].[Brand]
	   ,[TRANSACTION].[PAN]
	   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
	   , --TRANSACTION_DATA_EXT.NAME                                            
		[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
	   , --TRANSACTION_DATA_EXT.VALUE                                           
		(SELECT
				[TRANSACTION_DATA_EXT].[VALUE]
			FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
			WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[ACQUIRER].[COD_AC]
	   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
	   ,[TRANSACTION].[COMMENT] AS [COMMENT]
	   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
	   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
		--------------******------------                                            
	   ,[TRANSACTION].[COD_TTYPE]
	   ,[COMPANY].[COD_COMP]
	   ,[BRANCH_EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[STATE].[NAME] AS [STATE_NAME]
	   ,[CITY].[NAME] AS [CITY_NAME]
	   ,[SITUATION].[COD_SITUATION]
	   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
	   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
	   ,COALESCE([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT],
		[POSWEB_DATA_TRANSACTION].[MDR],
		[POSWEB_DATA_TRANSACTION].[PLOTS],
		[POSWEB_DATA_TRANSACTION].[ANTICIPATION]) -
		[POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]
	   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
	   ,[TRANSACTION].[COD_SOURCE_TRAN]
	   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
	   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
	   ,[TRANSACTION].[CREATED_AT]
	   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
	   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
	   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
	   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
	   ,IIF((SELECT
				COUNT(*)
			FROM [TRANSACTION_SERVICES]
			WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] IN (4, 19))
		> 0, 1, 0) AS [SPLIT]
	   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
	   ,[USERS].[COD_USER] AS [COD_USER_REP]
	   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
	   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
	   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
	   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
	   ,[SEGMENTS].[CNAE]
	   ,[TRANSACTION].[COD_USER]
	   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
	   ,IIF((SELECT
				COUNT(*)
			FROM [TRANSACTION_SERVICES]
			WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
		> 0, 1, 0) AS [LINK_PAYMENT]
	   ,[TRANSACTION].[CUSTOMER_EMAIL]
	   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
	   ,IIF((SELECT
				COUNT(*)
			FROM [TRANSACTION_SERVICES]
			WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
		> 0, [TRANSACTION].[TRACKING_TRANSACTION],
		NULL) AS [PAYMENT_LINK_TRACKING]
	   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
	   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
	   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
	   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROEC
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROAFF
	   ,[EC_PROD].COD_EC AS [COD_EC_PROD]
	   ,BRANCH_BUSINESS.[NAME] AS [BRANCH_BUSINESS_EC]
	   ,[TRANSACTION].LOGICAL_NUMBER_ACQ AS LOGICAL_NUMBER_ACQ
	   ,DATA_TID_AVAILABLE_EC.COD_AC AS COD_ACQ_SEGMENT
	FROM [TRANSACTION] WITH (NOLOCK)
	LEFT JOIN [dbo].[PROCESS_BG_STATUS]
		ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [ASS_DEPTO_EQUIP]
		ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
	LEFT JOIN [EQUIPMENT]
		ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
	LEFT JOIN [DEPARTMENTS_BRANCH]
		ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
	LEFT JOIN [DEPARTMENTS]
		ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
	LEFT JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
	LEFT JOIN [ADDRESS_BRANCH]
		ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
	LEFT JOIN [NEIGHBORHOOD]
		ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
	LEFT JOIN [ASS_TAX_DEPART]
		ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
	LEFT JOIN [PLAN]
		ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
	LEFT JOIN [CITY]
		ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
	LEFT JOIN [STATE]
		ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
	LEFT JOIN [COMPANY]
		ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	LEFT JOIN [TRANSACTION_TYPE]
		ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
	LEFT JOIN [SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
	LEFT JOIN [TRADUCTION_SITUATION]
		ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
	LEFT JOIN [SEGMENTS]
		ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
	LEFT JOIN [dbo].[REPORT_TRANSACTIONS_EXP]
		ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [POSWEB_DATA_TRANSACTION]
		ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [dbo].[SOURCE_TRANSACTION] WITH (NOLOCK)
		ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
		ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
	LEFT JOIN [SALES_REPRESENTATIVE]
		ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
	LEFT JOIN [USERS]
		ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
	LEFT JOIN [USERS] AS [USER_TRAN]
		ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
	LEFT JOIN [ASS_TR_TYPE_COMP]
		ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
	LEFT JOIN [ACQUIRER]
		ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
	LEFT JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
		ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
		ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	LEFT JOIN BRANCH_BUSINESS
		ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
	LEFT JOIN DATA_TID_AVAILABLE_EC
		ON DATA_TID_AVAILABLE_EC.TID = [TRANSACTION].LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
	WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
	AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
	AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT])

SELECT
	CTE.COD_TRAN
   ,CTE.TRANSACTION_CODE
   ,CTE.Amount
   ,CTE.PLOTS
   ,CTE.TRANSACTION_DATE
   ,CTE.TRANSACTION_TYPE
   ,CTE.CPF_CNPJ
   ,CTE.[NAME]
   ,CTE.SERIAL_EQUIP
   ,CTE.TID
   ,CTE.SITUATION
   ,CTE.Brand
   ,CTE.PAN
   ,CTE.TRAN_DATA_EXT
   ,CTE.TRAN_DATA_EXT_VALUE
   ,CTE.AUTH_CODE
   ,CTE.COD_AC
   ,CTE.NAME_ACQUIRER
   ,CTE.COMMENT
   ,CTE.TAX
   ,CTE.ANTICIPATION
   ,CTE.COD_AFFILIATOR
   ,CTE.NAME_AFFILIATOR
   ,CTE.COD_TTYPE
   ,CTE.COD_COMP
   ,CTE.COD_EC
   ,CTE.COD_BRANCH
   ,CTE.STATE_NAME
   ,CTE.CITY_NAME
   ,CTE.COD_SITUATION
   ,CTE.COD_DEPTO_BRANCH
   ,CTE.GROSS_VALUE_AGENCY
   ,CTE.NET_VALUE_AGENCY
   ,CTE.TYPE_TRAN
   ,CTE.COD_SOURCE_TRAN
   ,CTE.POSWEB
   ,CTE.SEGMENTS_NAME
   ,CTE.CREATED_AT
   ,CTE.REP_COD_TRAN
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.SPLIT
   ,CTE.SALES_REP
   ,CTE.COD_USER_REP
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.COD_SALES_REP
   ,CTE.MODEL_POS
   ,CTE.CARD_NAME
   ,CTE.CNAE
   ,CTE.COD_USER
   ,CTE.NAME_USER
   ,CTE.LINK_PAYMENT
   ,CTE.CUSTOMER_EMAIL
   ,CTE.CUSTOMER_IDENTIFICATION
   ,CTE.PAYMENT_LINK_TRACKING
   ,CTE.NAME_PRODUCT_EC
   ,CTE.EC_PRODUCT
   ,CTE.EC_PRODUCT_CPF_CNPJ
   ,CTE.SALES_TYPE
   ,CTE.PLAN_DZEROEC
   ,CTE.PLAN_DZEROAFF
   ,CTE.COD_EC_PROD
   ,CTE.BRANCH_BUSINESS_EC
   ,CTE.LOGICAL_NUMBER_ACQ
   ,CTE.COD_ACQ_SEGMENT

FROM CTE
GO



ALTER PROCEDURE [dbo].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************                
----------------------------------------------------------------------------------------                                      
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                                      
 Project.......: TKPP                                      
 ------------------------------------------------------------------------------------------                                      
 Author                          VERSION        Date                            Description                                      
 ------------------------------------------------------------------------------------------                                      
 Fernando Henrique F.             V1       13/12/2018                          Creation                                       
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                                
 Caike Uch?a                      V3       15/08/2019                       inserting coluns                              
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                            
 Caike Uch?a                      V5       20/01/2020                            ADD CNAE                
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento              
 Caike Uch?a                      v7       30/04/2020                        insert ec prod              
 Caike Uch?a                      V8       06/08/2020                    Add [AMOUNT] to reprocess            
 Caike Uch?a                      V9       17/08/2020                        Add SALES_TYPE        
 Luiz Aquino                      v10      01/07/2020                         add PlanDzero    
 Caike Uchoa                      V11      31/08/2020                        Add Cod_ec_prod    
 Caike Uchoa                      v12      28/09/2020                        Add branch business  
 Caike Uchoa                      v10      29/09/2020                        Add NET_VALUE   
 ------------------------------------------------------------------------------------------                
*****************************************************************************************************************/

AS
BEGIN

    DECLARE @COUNT INT = 0;


    BEGIN

---------------------------------------------                                    
--------------RECORDS INSERT-----------------                                    
---------------------------------------------                                      
SELECT
	[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]
   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[Brand]
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROEC
   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROAFF
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]
   ,[VW_REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS_EC]
   ,CAST(0 AS DECIMAL(22, 6)) AS NET_VALUE
   ,[VW_REPORT_TRANSACTIONS_EXP].[LOGICAL_NUMBER_ACQ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_ACQ_SEGMENT] INTO #TB_REPORT_TRANSACTIONS_EXP_INSERT
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;


SELECT
	TRANSACTION_TITLES.COD_EC
   ,[TRANSACTION].COD_TRAN
   ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO
FROM TRANSACTION_SERVICES
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT
	ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
JOIN TRANSACTION_TITLES WITH (NOLOCK)
	ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC
JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
GROUP BY TRANSACTION_TITLES.COD_EC
		,[TRANSACTION].COD_TRAN
		,TRANSACTION_SERVICES.TAX_PLANDZERO_EC


SELECT
	[TRANSACTION].COD_TRAN
   ,CASE
		WHEN (
			#TEMP_DZERO.TAX_PLANDZERO_EC
			)
			> 0 THEN SUM(
			dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT,
			TRANSACTION_TITLES.TAX_INITIAL,
			TRANSACTION_TITLES.ANTICIP_PERCENT,
			(
			#TEMP_DZERO.TAX_PLANDZERO_EC
			)
			, [TRANSACTION].COD_TTYPE))
		ELSE CASE
				WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](
					TRANSACTION_TITLES.Amount,
					TRANSACTION_TITLES.TAX_INITIAL,
					TRANSACTION_TITLES.PLOT,
					TRANSACTION_TITLES.ANTICIP_PERCENT,
					(CASE
						WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY,
							TRANSACTION_TITLES.PREVISION_PAY_DATE,
							TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
						ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
					END)))
				ELSE 0
			END
	END AS NET_VALUE INTO #TEMP_NET
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN
LEFT JOIN #TEMP_DZERO
	ON #TEMP_DZERO.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
		AND #TEMP_DZERO.COD_EC = TRANSACTION_TITLES.COD_EC

WHERE [TRANSACTION].COD_TRAN IN (SELECT
		COD_TRAN
	FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT)
GROUP BY TRANSACTION_TITLES.COD_TRAN
		,[TRANSACTION].COD_TRAN
		,#TEMP_DZERO.TAX_PLANDZERO_EC


UPDATE #TB_REPORT_TRANSACTIONS_EXP_INSERT
SET NET_VALUE = (SELECT
		NET_VALUE
	FROM #TEMP_NET
	WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN)
FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT


SELECT
	@COUNT = COUNT(*)
FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

IF @COUNT > 0
BEGIN
INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
[TRANSACTION_CODE],
[Amount],
[PLOTS],
[TRANSACTION_DATE],
[TRANSACTION_TYPE],
[CPF_CNPJ],
[NAME],
[SERIAL_EQUIP],
[TID],
[SITUATION],
[Brand],
[PAN],
[TRAN_DATA_EXT],
[TRAN_DATA_EXT_VALUE],
[AUTH_CODE],
[COD_AC],
[NAME_ACQUIRER],
[COMMENT],
[TAX],
[ANTICIPATION],
[COD_AFFILIATOR],
[NAME_AFFILIATOR],
[NET_VALUE],
[COD_COMP],
[COD_EC],
[COD_BRANCH],
[STATE_NAME],
[CITY_NAME],
[COD_SITUATION],
[COD_DEPTO_BRANCH],
[GROSS_VALUE_AGENCY],
[NET_VALUE_AGENCY],
[TYPE_TRAN],
[COD_SOURCE_TRAN],
[POSWEB],
[SEGMENTS_NAME],
[CREATED_TRANSACTION_DATE],
[COD_EC_TRANS],
[TRANS_EC_NAME],
[TRANS_EC_CPF_CNPJ],
[SPLIT],
[SALES_REP],
[COD_USER_REP],
[MODIFY_DATE],
[CREDITOR_DOCUMENT],
[COD_SALES_REP],
[MODEL_POS],
[CARD_NAME],
[CNAE],
[COD_USER],
[NAME_USER],
[LINK_PAYMENT_SERVICE],
[CUSTOMER_EMAIL],
[CUSTOMER_IDENTIFICATION],
[PAYMENT_LINK_TRACKING],
[NAME_PRODUCT_EC],
[EC_PRODUCT],
[EC_PRODUCT_CPF_CNPJ],
[SALES_TYPE],
DZERO_EC_TAX,
DZERO_AFF_TAX,
[COD_EC_PROD],
[BRANCH_BUSINESS],
LOGICAL_NUMBER_ACQ,
COD_ACQ_SEGMENT)
	(SELECT
		[TEMP].[COD_TRAN]
	   ,[TEMP].[TRANSACTION_CODE]
	   ,[TEMP].[Amount]
	   ,[TEMP].[PLOTS]
	   ,[TEMP].[TRANSACTION_DATE]
	   ,[TEMP].[TRANSACTION_TYPE]
	   ,[TEMP].[CPF_CNPJ]
	   ,[TEMP].[NAME]
	   ,[TEMP].[SERIAL_EQUIP]
	   ,[TEMP].[TID]
	   ,[TEMP].[SITUATION]
	   ,[TEMP].[Brand]
	   ,[TEMP].[PAN]
	   ,[TEMP].[TRAN_DATA_EXT]
	   ,[TEMP].[TRAN_DATA_EXT_VALUE]
	   ,[TEMP].[AUTH_CODE]
	   ,[TEMP].[COD_AC]
	   ,[TEMP].[NAME_ACQUIRER]
	   ,[TEMP].[COMMENT]
	   ,[TEMP].[TAX]
	   ,[TEMP].[ANTICIPATION]
	   ,[TEMP].[COD_AFFILIATOR]
	   ,[TEMP].[NAME_AFFILIATOR]
	   ,[TEMP].[NET_VALUE]
	   ,[TEMP].[COD_COMP]
	   ,[TEMP].[COD_EC]
	   ,[TEMP].[COD_BRANCH]
	   ,[TEMP].[STATE_NAME]
	   ,[TEMP].[CITY_NAME]
	   ,[TEMP].[COD_SITUATION]
	   ,[TEMP].[COD_DEPTO_BRANCH]
	   ,[TEMP].[GROSS_VALUE_AGENCY]
	   ,[TEMP].[NET_VALUE_AGENCY]
	   ,[TEMP].[TYPE_TRAN]
	   ,[TEMP].[COD_SOURCE_TRAN]
	   ,[TEMP].[POSWEB]
	   ,[TEMP].[SEGMENTS_NAME]
	   ,[TEMP].[CREATED_AT]
	   ,[TEMP].[COD_EC_TRANS]
	   ,[TEMP].[TRANS_EC_NAME]
	   ,[TEMP].[TRANS_EC_CPF_CNPJ]
	   ,[TEMP].[SPLIT]
	   ,[SALES_REP]
	   ,[COD_USER_REP]
	   ,GETDATE()
	   ,[CREDITOR_DOCUMENT]
	   ,[COD_SALES_REP]
	   ,[TEMP].[MODEL_POS]
	   ,[CARD_NAME]
	   ,[CNAE]
	   ,[COD_USER]
	   ,[NAME_USER]
	   ,[LINK_PAYMENT]
	   ,[CUSTOMER_EMAIL]
	   ,[CUSTOMER_IDENTIFICATION]
	   ,[TEMP].[PAYMENT_LINK_TRACKING]
	   ,[TEMP].[NAME_PRODUCT_EC]
	   ,[TEMP].[EC_PRODUCT]
	   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
	   ,[TEMP].[SALES_TYPE]
	   ,[TEMP].PLAN_DZEROEC
	   ,[TEMP].PLAN_DZEROAFF
	   ,[TEMP].[COD_EC_PROD]
	   ,[TEMP].[BRANCH_BUSINESS_EC]
	   ,TEMP.LOGICAL_NUMBER_ACQ
	   ,TEMP.COD_ACQ_SEGMENT
	FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

UPDATE [PROCESS_BG_STATUS]
SET [STATUS_PROCESSED] = 1
   ,[MODIFY_DATE] = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
	ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
END;


---------------------------------------------                                    
--------------RECORDS UPDATE-----------------                                    
---------------------------------------------                                      
SELECT
	[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]
   ,CAST(0 AS DECIMAL(22, 6)) AS [NET_VALUE] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;


SELECT
	TRANSACTION_TITLES.COD_EC
   ,[TRANSACTION].COD_TRAN
   ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO_2
FROM TRANSACTION_SERVICES
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT
	ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
JOIN TRANSACTION_TITLES WITH (NOLOCK)
	ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC
JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
GROUP BY TRANSACTION_TITLES.COD_EC
		,[TRANSACTION].COD_TRAN
		,TRANSACTION_SERVICES.TAX_PLANDZERO_EC


SELECT
	[TRANSACTION].COD_TRAN
   ,CASE
		WHEN (
			#TEMP_DZERO_2.TAX_PLANDZERO_EC
			)
			> 0 THEN SUM(
			dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT,
			TRANSACTION_TITLES.TAX_INITIAL,
			TRANSACTION_TITLES.ANTICIP_PERCENT, (
			#TEMP_DZERO_2.TAX_PLANDZERO_EC
			)
			, [TRANSACTION].COD_TTYPE))
		ELSE CASE
				WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](
					TRANSACTION_TITLES.Amount,
					TRANSACTION_TITLES.TAX_INITIAL,
					TRANSACTION_TITLES.PLOT,
					TRANSACTION_TITLES.ANTICIP_PERCENT,
					(CASE
						WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY,
							TRANSACTION_TITLES.PREVISION_PAY_DATE,
							TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
						ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
					END)))
				ELSE 0
			END
	END AS NET_VALUE INTO #TEMP_NET_2
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN
LEFT JOIN #TEMP_DZERO_2
	ON #TEMP_DZERO_2.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
		AND #TEMP_DZERO_2.COD_EC = TRANSACTION_TITLES.COD_EC
WHERE [TRANSACTION].COD_TRAN IN (SELECT
		COD_TRAN
	FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE)
GROUP BY TRANSACTION_TITLES.COD_TRAN
		,[TRANSACTION].COD_TRAN
		,#TEMP_DZERO_2.TAX_PLANDZERO_EC


UPDATE #TB_REPORT_TRANSACTIONS_EXP_UPDATE
SET NET_VALUE = (SELECT
		NET_VALUE
	FROM #TEMP_NET_2
	WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_UPDATE.COD_TRAN)
FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE


SELECT
	@COUNT = COUNT(*)
FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

IF @COUNT > 0
BEGIN
UPDATE [REPORT_TRANSACTIONS_EXP]
SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
   ,[REPORT_TRANSACTIONS_EXP].[Amount] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[Amount]
   ,[REPORT_TRANSACTIONS_EXP].NET_VALUE = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NET_VALUE]
FROM [REPORT_TRANSACTIONS_EXP]
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
	ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] =
	[#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

UPDATE [PROCESS_BG_STATUS]
SET [STATUS_PROCESSED] = 1
   ,[MODIFY_DATE] = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
	ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
END;
END;
END;
GO

-- LEGADO REPORT_TRANSACTIONS_EXP -- tempo (15m +/-)

-- select de verifica��o
-- select count(*)
-- from REPORT_TRANSACTIONS_EXP
--          join [TRANSACTION] (nolock) TLN on REPORT_TRANSACTIONS_EXP.COD_TRAN = TLN.COD_TRAN
--          join DATA_TID_AVAILABLE_EC DTAE on TLN.LOGICAL_NUMBER_ACQ = DTAE.TID and DTAE.ACTIVE = 1
-- where REPORT_TRANSACTIONS_EXP.COD_ACQ_SEGMENT is null


IF OBJECT_ID('sp_up_temp_exp') IS NOT NULL DROP PROCEDURE sp_up_temp_exp;
GO

create procedure sp_up_temp_exp
as
begin

UPDATE TOP (50000) REPORT_TRANSACTIONS_EXP
SET COD_ACQ_SEGMENT = DTAE.COD_AC
   ,LOGICAL_NUMBER_ACQ = TLN.LOGICAL_NUMBER_ACQ
FROM REPORT_TRANSACTIONS_EXP
JOIN [TRANSACTION](nolock) TLN
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TLN.COD_TRAN
JOIN DATA_TID_AVAILABLE_EC DTAE
	ON TLN.LOGICAL_NUMBER_ACQ = DTAE.TID
	AND DTAE.ACTIVE = 1
WHERE REPORT_TRANSACTIONS_EXP.COD_ACQ_SEGMENT IS NULL
END
GO

declare @control int = 1;

while (@control = 1)
    begin
EXEC sp_up_temp_exp;
IF (@@rowcount <= 0)
SET @control = 0;

PRINT ('sp_up_temp_exp executado')
END

GO

IF OBJECT_ID('sp_up_temp_exp') IS NOT NULL DROP PROCEDURE sp_up_temp_exp;
GO

--cod

IF OBJECT_ID('SP_FD_DATA_RECONCILE') IS NOT NULL DROP PROCEDURE SP_FD_DATA_RECONCILE;
GO
create procedure SP_FD_DATA_RECONCILE(@INITIAL_DATE DATE,
                                      @FINAL_DATE DATE,
                                      @ACQCODE varchar(255))
AS
BEGIN

    DECLARE @INITIAL DATETIME2 = convert(datetime, @INITIAL_DATE, 103);
    DECLARE @FINAL DATETIME2 = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL_DATE)))


SELECT
	exp.COD_TRAN
   ,exp.TRANSACTION_CODE
   ,exp.AMOUNT
   ,exp.PLOTS
   ,exp.TRANSACTION_DATE
   ,exp.TRANSACTION_TYPE
   ,exp.AUTH_CODE
   ,exp.TRAN_DATA_EXT
   ,exp.TRAN_DATA_EXT_VALUE
   ,exp.BRAND
   ,exp.SITUATION
   ,exp.COD_SITUATION
   ,ACQUIRER.CODE AS ACQ_CODE
   ,exp.LOGICAL_NUMBER_ACQ
   ,exp.COD_ACQ_SEGMENT AS COD_AC
FROM REPORT_TRANSACTIONS_EXP(nolock) exp
JOIN ACQUIRER
	ON ACQUIRER.COD_AC = exp.COD_ACQ_SEGMENT
WHERE exp.TRANSACTION_DATE BETWEEN @INITIAL AND @FINAL
AND exp.COD_SITUATION IN (3, 6, 22, 14)
AND ACQUIRER.CODE = @ACQCODE
AND ISNULL(exp.RECONCILED, 0) = 0
UNION ALL
SELECT
	exp.COD_TRAN
   ,exp.TRANSACTION_CODE
   ,exp.AMOUNT
   ,exp.PLOTS
   ,exp.TRANSACTION_DATE
   ,exp.TRANSACTION_TYPE
   ,exp.AUTH_CODE
   ,exp.TRAN_DATA_EXT
   ,exp.TRAN_DATA_EXT_VALUE
   ,exp.BRAND
   ,exp.SITUATION
   ,exp.COD_SITUATION
   ,ACQUIRER.CODE AS ACQ_CODE
   ,exp.LOGICAL_NUMBER_ACQ
   ,exp.COD_AC
FROM REPORT_TRANSACTIONS_EXP(nolock) exp
JOIN ACQUIRER
	ON ACQUIRER.COD_AC = exp.COD_AC
		AND ACQUIRER.COD_AC = 25
WHERE exp.TRANSACTION_DATE BETWEEN @INITIAL AND @FINAL
AND exp.COD_SITUATION IN (3, 6, 22, 14)
AND ACQUIRER.CODE = @ACQCODE
AND ISNULL(exp.RECONCILED, 0) = 0
END
GO


IF OBJECT_ID('RECONCILE_TRAN_INVALID') IS NOT NULL DROP TABLE RECONCILE_TRAN_INVALID;
GO
CREATE TABLE RECONCILE_TRAN_INVALID
(
    COD_REC_TRAN_INVALID INT IDENTITY PRIMARY KEY,
    FILE_NAME            VARCHAR(255),
    CREATED_AT           DATETIME DEFAULT [dbo].[FN_FUS_UTF](getdate()),
    ACTIVE               BIT      DEFAULT 1,
    COD_AC               INT,
    NSU_EXT              varchar(255),
    AUTH_CODE            varchar(255),
    AMOUNT               DECIMAL(22, 6),
    NET_AMOUNT           DECIMAL(22, 6),
    BRAND                varchar(255),
    TRANSACTION_DATE     DATETIME,
    PAN                  VARCHAR(255),
    RECONCILE_DATE       DATE,
    CONSTRAINT FK_RECONCILE_TRAN_INVALID FOREIGN KEY (COD_AC) REFERENCES ACQUIRER (COD_AC)
)
GO

IF OBJECT_ID('SP_LS_TRANSACTION_RECONCILE') IS NOT NULL DROP PROCEDURE SP_LS_TRANSACTION_RECONCILE;
GO
create procedure SP_LS_TRANSACTION_RECONCILE @INTIAL DATE = NULL,
                                             @FINAL DATE = NULL,
                                             @NSU varchar(255) = null,
                                             @COD_AC INT = NULL
AS
BEGIN

    DECLARE @I DATETIME2;
    DECLARE @F DATETIME2;


    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';

SET @QUERY_BASIS = '
   with cte as (
    select exp.TRANSACTION_CODE,
           exp.TRANSACTION_DATE,
           exp.TRAN_DATA_EXT_VALUE,
           exp.AUTH_CODE,
           exp.LOGICAL_NUMBER_ACQ,
           exp.COD_ACQ_SEGMENT,
           exp.RECONCILE_DATE,
           exp.COD_REC_SIT,
           exp.RECONCILE_DESCRIPTION,
           ACQUIRER.NAME,
           ACQUIRER.[GROUP],
           ACQUIRER.[CODE],
           TRADUCTION_SITUATION.SITUATION_TR,
           exp.AMOUNT,
           exp.PAN,
           exp.COD_TRAN
    from REPORT_TRANSACTIONS_EXP exp
             join TRADUCTION_SITUATION on TRADUCTION_SITUATION.COD_SITUATION = exp.COD_REC_SIT
             join ACQUIRER on ACQUIRER.COD_AC = exp.COD_ACQ_SEGMENT
    where exp.RECONCILED = 1
      and exp.cod_rec_sit in (38, 39, 40)
    union all
    select exp.TRANSACTION_CODE,
           exp.TRANSACTION_DATE,
           exp.TRAN_DATA_EXT_VALUE,
           exp.AUTH_CODE,
           exp.LOGICAL_NUMBER_ACQ,
           exp.COD_AC as COD_ACQ_SEGMENT,
           exp.RECONCILE_DATE,
           exp.COD_REC_SIT,
           exp.RECONCILE_DESCRIPTION,
           ACQUIRER.NAME,
           ACQUIRER.[GROUP],
           ACQUIRER.[CODE],
           TRADUCTION_SITUATION.SITUATION_TR,
           exp.AMOUNT,
           exp.PAN,
           exp.COD_TRAN
    from REPORT_TRANSACTIONS_EXP exp
             join TRADUCTION_SITUATION on TRADUCTION_SITUATION.COD_SITUATION = exp.COD_REC_SIT
             join ACQUIRER on ACQUIRER.COD_AC = exp.COD_AC and ACQUIRER.COD_AC = 25
    where exp.RECONCILED = 1
      and exp.cod_rec_sit in (38, 39, 40)
)
select TRANSACTION_CODE,
       TRANSACTION_DATE,
       TRAN_DATA_EXT_VALUE,
       AUTH_CODE,
       LOGICAL_NUMBER_ACQ,
       COD_ACQ_SEGMENT,
       RECONCILE_DATE,
       COD_REC_SIT,
       RECONCILE_DESCRIPTION,
       NAME,
       [GROUP],
       [CODE],
       SITUATION_TR,
       AMOUNT,
       PAN,
       COD_TRAN
from cte where COD_ACQ_SEGMENT > 0
';

    IF @INTIAL IS NOT NULL OR @FINAL IS NOT NULL
        begin
SET @I = CONVERT(DATETIME, @INTIAL, 103);
SET @F = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL)))

SET @QUERY_BASIS = @QUERY_BASIS + ' AND transaction_date between @I and @F ';
        end

    if @NSU is not null
SET @QUERY_BASIS = @QUERY_BASIS + ' and transaction_code = @NSU or TRAN_DATA_EXT_VALUE = @NSU ';

IF @COD_AC IS NOT NULL
SET @QUERY_BASIS = @QUERY_BASIS + ' and COD_ACQ_SEGMENT = @COD_AC ';


SET @QUERY_BASIS = @QUERY_BASIS + ' order by TRANSACTION_DATE desc'

EXEC [sp_executesql] @QUERY_BASIS
					,N'
           @I DATETIME2,
           @F DATETIME2,
           @NSU varchar(255),
           @COD_AC INT
        '
					,@I = @I
					,@F = @F
					,@NSU = @NSU
					,@COD_AC = @COD_AC
END
GO



IF NOT EXISTS (SELECT
		1
	FROM sys.indexes
	WHERE object_id = OBJECT_ID('REPORT_TRANSACTIONS_EXP')
	AND name = 'IX_REP_EXP_RECONCILE')
BEGIN
CREATE INDEX IX_REP_EXP_RECONCILE
ON REPORT_TRANSACTIONS_EXP (COD_REC_SIT, RECONCILED) INCLUDE (TRANSACTION_CODE,
TRANSACTION_DATE,
TRAN_DATA_EXT_VALUE,
AUTH_CODE,
LOGICAL_NUMBER_ACQ,
COD_ACQ_SEGMENT,
RECONCILE_DATE,
RECONCILE_DESCRIPTION,
AMOUNT,
PAN)

END

GO
IF TYPE_ID('TP_INVALID_TRANSACTION') IS NOT NULL
DROP TYPE TP_INVALID_TRANSACTION
GO
create type TP_INVALID_TRANSACTION as table
(

    FILE_NAME      VARCHAR(255),
    COD_AC         INT,
    NSU_EXT        VARCHAR(255),
    AUTH_CODE      VARCHAR(255),
    BRAND          VARCHAR(255),
    AMOUNT         DECIMAL(22, 6),
    NET_AMOUNT     DECIMAL(22, 6),
    TRAN_DATE      DATETIME,
    PAN            VARCHAR(255),
    RECONCILE_DATE DATE
);
GO

IF OBJECT_ID('SP_REG_RECONCILE_INVALID') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_INVALID;
GO
CREATE PROCEDURE SP_REG_RECONCILE_INVALID(@TP TP_INVALID_TRANSACTION READONLY)
AS
BEGIN

UPDATE RECONCILE_TRAN_INVALID
SET ACTIVE = 0
FROM RECONCILE_TRAN_INVALID
JOIN @TP TP
	ON TP.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
	AND TP.RECONCILE_DATE = RECONCILE_TRAN_INVALID.RECONCILE_DATE
WHERE RECONCILE_TRAN_INVALID.ACTIVE = 1

INSERT INTO RECONCILE_TRAN_INVALID (FILE_NAME, COD_AC, NSU_EXT, AUTH_CODE, BRAND, AMOUNT, TRANSACTION_DATE, PAN,
NET_AMOUNT)
	SELECT
		FILE_NAME
	   ,COD_AC
	   ,NSU_EXT
	   ,AUTH_CODE
	   ,BRAND
	   ,AMOUNT
	   ,TRAN_DATE
	   ,PAN
	   ,NET_AMOUNT
	FROM @TP;
END
GO


IF OBJECT_ID('SP_LS_INVALID_TRANSACTION_RECONCILE') IS NOT NULL DROP PROCEDURE SP_LS_INVALID_TRANSACTION_RECONCILE;
GO
create procedure SP_LS_INVALID_TRANSACTION_RECONCILE(@INTIAL DATE = NULL,
                                                     @FINAL DATE = NULL,
                                                     @NSU varchar(255) = null,
                                                     @COD_AC INT = NULL)
AS
BEGIN

    DECLARE @I DATETIME2;
    DECLARE @F DATETIME2;


    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
SET @QUERY_BASIS = '
    select FILE_NAME,
           ACQUIRER.NAME,
           NSU_EXT,
           AUTH_CODE,
           BRAND,
           AMOUNT,
           NET_AMOUNT,
           TRANSACTION_DATE,
           PAN,
           RECONCILE_TRAN_INVALID.COD_AC
    from RECONCILE_TRAN_INVALID
             join ACQUIRER on ACQUIRER.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
    where RECONCILE_TRAN_INVALID.ACTIVE = 1 ';


    IF @INTIAL IS NOT NULL OR @FINAL IS NOT NULL
        begin
SET @I = CONVERT(DATETIME, @INTIAL, 103);
SET @F = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL)))

SET @QUERY_BASIS = @QUERY_BASIS + ' AND RECONCILE_TRAN_INVALID.TRANSACTION_DATE between @I and @F ';
        end

    if @NSU is not null
SET @QUERY_BASIS = @QUERY_BASIS + 'and RECONCILE_TRAN_INVALID.NSU_EXT = @NSU ';

IF @COD_AC IS NOT NULL
SET @QUERY_BASIS = @QUERY_BASIS + 'and RECONCILE_TRAN_INVALID.COD_AC = @COD_AC ';

EXEC [sp_executesql] @QUERY_BASIS
					,N'
           @I DATETIME2,
           @F DATETIME2,
           @NSU varchar(255),
           @COD_AC INT
        '
					,@I = @I
					,@F = @F
					,@NSU = @NSU
					,@COD_AC = @COD_AC

END
GO

UPDATE ACQUIRER
SET code = '130464863'
WHERE COD_AC = 25

GO

IF OBJECT_ID('RECONCILE_RESUME') IS NOT NULL DROP TABLE RECONCILE_RESUME;
GO
create table RECONCILE_RESUME
(
    COD_REC_RESUME INT PRIMARY KEY IDENTITY,
    RECONCILE_DATE DATE,
    QTY_TKPP       INT,
    QTY_ACQ        INT,
    AMOUNT_TKPP    DECIMAL(22, 6),
    AMOUNT_ACQ     DECIMAL(22, 6),
    ACTIVE BIT DEFAULT 1,
    COD_AC         INT FOREIGN KEY (COD_AC) REFERENCES ACQUIRER (COD_AC)
)

GO
IF OBJECT_ID('SP_REG_RECONCILE_RESUME') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_RESUME;
GO
CREATE PROCEDURE SP_REG_RECONCILE_RESUME(@RECONCILE_DATE DATE,
                                         @QTY_TKPP INT,
                                         @QTY_ACQ INT,
                                         @AMOUNT_TKPP DECIMAL(22, 6),
                                         @AMOUNT_ACQ DECIMAL(22, 6),
                                         @COD_AC INT)
AS
BEGIN

UPDATE RECONCILE_RESUME
SET ACTIVE = 0
WHERE ACTIVE = 1
AND RECONCILE_DATE = @RECONCILE_DATE
AND COD_AC = @COD_AC

INSERT INTO RECONCILE_RESUME (RECONCILE_DATE, QTY_TKPP, QTY_ACQ, AMOUNT_TKPP, AMOUNT_ACQ, COD_AC)
	VALUES (@RECONCILE_DATE, @QTY_TKPP, @QTY_ACQ, @AMOUNT_TKPP, @AMOUNT_ACQ, @COD_AC);

END;

GO

IF OBJECT_ID('SP_LS_RECONCILE_RESUME') IS NOT NULL DROP PROCEDURE SP_LS_RECONCILE_RESUME;
GO
create procedure SP_LS_RECONCILE_RESUME(@INITIAL DATE = null,
                                        @FINAL DATE = null,
                                        @COD_AC INT = null)
AS
BEGIN

    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
SET @QUERY_BASIS = '
select RECONCILE_DATE,
       QTY_TKPP,
       QTY_ACQ,
       AMOUNT_TKPP,
       AMOUNT_ACQ,
       ACQUIRER.NAME
from RECONCILE_RESUME
         join ACQUIRER on RECONCILE_RESUME.COD_AC = ACQUIRER.COD_AC
where RECONCILE_RESUME.ACTIVE = 1 ';

    IF @INITIAL IS NOT NULL OR @FINAL IS NOT NULL
SET @QUERY_BASIS = @QUERY_BASIS + ' and RECONCILE_RESUME.RECONCILE_DATE between @INITIAL AND @FINAL ';

IF @COD_AC IS NOT NULL
SET @QUERY_BASIS = @QUERY_BASIS + ' and RECONCILE_RESUME.COD_AC  = @COD_AC';


EXEC [sp_executesql] @QUERY_BASIS
					,N'
           @INITIAL DATE,
           @FINAL DATE,
           @COD_AC INT
        '
					,@INITIAL = @INITIAL
					,@FINAL = @FINAL
					,@COD_AC = @COD_AC

END
GO


alter PROCEDURE [dbo].[SP_LS_ACQUIRER_BY_GROUP]
    /*----------------------------------------------------------------------------------------
    Procedure Name: [SP_LS_ACQUIRER]
    Project.......: BACKOFFICE
    ------------------------------------------------------------------------------------------
    Author                          VERSION        Date                            Description
    ------------------------------------------------------------------------------------------
    Lucas Aguiar      v1       25-07-2019    Procedure que busca um ACQUIRER
                        por grupo
    ------------------------------------------------------------------------------------------*/

AS

BEGIN

SELECT
	COD_AC
   ,CREATED_AT
   ,CODE
   ,NAME AS ACQUIRER_NAME
   ,COD_USER
   ,ALIAS
   ,SUBTITLE
   ,INTEGRATION
   ,ACTIVE
   ,[GROUP]
   ,LOGICAL_NUMBER
   ,COD_SEG_GROUP
FROM ACQUIRER
WHERE CODE = '115122641'
UNION
SELECT
	COD_AC
   ,CREATED_AT
   ,CODE
   ,NAME ACQUIRER_NAME
   ,COD_USER
   ,ALIAS
   ,SUBTITLE
   ,INTEGRATION
   ,ACTIVE
   ,[GROUP]
   ,LOGICAL_NUMBER
   ,COD_SEG_GROUP
FROM ACQUIRER
WHERE ACTIVE = 1
AND [GROUP] <> 'PAGSEGURO';

END;
GO

IF OBJECT_ID('SP_UP_RECONCILE_SITUATION') IS NOT NULL DROP PROCEDURE SP_UP_RECONCILE_SITUATION;
GO
create procedure SP_UP_RECONCILE_SITUATION(@COD_TRAN INT,
                                           @COD_SIT INT)
AS

BEGIN

UPDATE REPORT_TRANSACTIONS_EXP
SET COD_REC_SIT = @COD_SIT
WHERE COD_TRAN = @COD_TRAN
AND RECONCILED = 1

END

GO

--ET-1167

GO

--ET-1151

IF OBJECT_ID('PRODUCT_ACQUIRE_FILTER') IS NULL BEGIN
    CREATE TABLE PRODUCT_ACQUIRE_FILTER
    (
        COD_PRD_ACQ_FILTER INT IDENTITY NOT NULL PRIMARY KEY,
        COD_AFFILIATOR INT NULL REFERENCES AFFILIATOR,
        COD_EC INT NULL REFERENCES COMMERCIAL_ESTABLISHMENT, 
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP,
        COD_AC INT NULL REFERENCES ACQUIRER,
        COD_MODEL INT NULL REFERENCES EQUIPMENT_MODEL,
        COD_BRAND INT NULL REFERENCES BRAND,
        ONLINE INT NOT NULL DEFAULT(0),
        PRESENTIAL INT NOT NULL DEFAULT (0),
        DEBIT INT NOT NULL DEFAULT(0),
        CREDIT INT NOT NULL DEFAULT (0),
        CREDIT_INSTALLMENTS INT NOT NULL DEFAULT(0),
        CLIENT_INSTALLMENT INT NOT NULL DEFAULT (0),
        CLIENT_DEBIT INT NOT NULL DEFAULT(0),
        CLIENT_CREDIT INT NOT NULL DEFAULT(0),
        RATE_FREE INT NOT NULL DEFAULT (0),
        CREATED_AT DATETIME NOT NULL DEFAULT(GETDATE()),
        COD_USER INT NULL REFERENCES USERS
    )
END
GO

CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_AF ON PRODUCT_ACQUIRE_FILTER (COD_AFFILIATOR, COD_AC, COD_MODEL, COD_BRAND)
GO
CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_EC ON PRODUCT_ACQUIRE_FILTER (COD_EC, COD_AC, COD_MODEL, COD_BRAND)
GO
CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_EQP ON PRODUCT_ACQUIRE_FILTER (COD_ASS_DEPTO_TERMINAL, COD_AC, COD_MODEL, COD_BRAND)
GO
CREATE NONCLUSTERED INDEX IX_PRD_ACQ_FILTER_SUB ON PRODUCT_ACQUIRE_FILTER (COD_AFFILIATOR, COD_EC, COD_ASS_DEPTO_TERMINAL, COD_AC, COD_MODEL, COD_BRAND)
GO

CREATE INDEX IX_RA_EC ON ROUTE_ACQUIRER (COD_EC, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO
CREATE INDEX IX_RA_AF ON ROUTE_ACQUIRER (COD_AFFILIATOR, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO
CREATE INDEX IX_RA_EQP ON ROUTE_ACQUIRER (COD_EQUIP, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO
CREATE INDEX IX_RA_COMP ON ROUTE_ACQUIRER (COD_COMP, ACTIVE) INCLUDE (COD_BRAND, COD_SOURCE_TRAN, CONF_TYPE, COD_AC)
GO

UPDATE PRODUCTS_ACQUIRER
SET PLOT_VALUE = 1
WHERE PLOT_VALUE = 2
AND CHARINDEX('? vista', NAME) > 0
GO

IF OBJECT_ID('SP_LOAD_TABLES_EQUIP') IS NOT NULL DROP PROCEDURE SP_LOAD_TABLES_EQUIP
GO
CREATE PROCEDURE [DBO].[SP_LOAD_TABLES_EQUIP]
(
    @TERMINALID INT
)
AS BEGIN

    DECLARE @COD_EC INT,
        @COD_AFF INT, 
        @COD_SUB INT, 
        @DATE_PLAN DATETIME, 
        @EQUIP_MODEL VARCHAR(100),
        @TODAY DATETIME = CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME),
        @COD_DPTO_TERM INT;
--@TERMINALID INT = 19886;

WITH CTE_DATA
AS
(SELECT
		ISNULL(CE.COD_AFFILIATOR, 0) AS COD_AFFILIATOR
	   ,E.COD_COMP
	   ,BE.COD_EC
	   ,MAX(ATD.CREATED_AT) AS DATE_PLAN
	   ,E.COD_MODEL
	   ,ADE.COD_ASS_DEPTO_TERMINAL
	FROM ASS_DEPTO_EQUIP ADE
	JOIN EQUIPMENT E
		ON E.COD_EQUIP = ADE.COD_EQUIP
		AND E.ACTIVE = 1
	JOIN DEPARTMENTS_BRANCH DB
		ON DB.COD_DEPTO_BRANCH = ADE.COD_DEPTO_BRANCH
	JOIN BRANCH_EC BE
		ON BE.COD_BRANCH = DB.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT CE
		ON BE.COD_EC = CE.COD_EC
	JOIN ASS_TAX_DEPART ATD
		ON DB.COD_DEPTO_BRANCH = ATD.COD_DEPTO_BRANCH
		AND ATD.ACTIVE = 1
	WHERE ADE.COD_EQUIP = @TERMINALID
	AND ADE.ACTIVE = 1
	GROUP BY E.COD_COMP
			,ISNULL(CE.COD_AFFILIATOR, 0)
			,BE.COD_EC
			,E.COD_EQUIP
			,E.COD_MODEL
			,ADE.COD_ASS_DEPTO_TERMINAL)
SELECT
	@COD_AFF = COD_AFFILIATOR
   ,@COD_SUB = COD_COMP
   ,@COD_EC = COD_EC
   ,@DATE_PLAN = IIF(DATE_PLAN > @TODAY, DATE_PLAN, @TODAY)
   ,@EQUIP_MODEL = COD_MODEL
   ,@COD_DPTO_TERM = COD_ASS_DEPTO_TERMINAL
FROM CTE_DATA;

SELECT
	COD_BRAND INTO #BRAND_EQP
FROM ROUTE_ACQUIRER
WHERE COD_EQUIP = @TERMINALID
AND ACTIVE = 1
AND COD_SOURCE_TRAN = 2

SELECT
	RA.COD_BRAND INTO #BRAND_EC
FROM ROUTE_ACQUIRER RA
LEFT JOIN #BRAND_EQP EQP
	ON EQP.COD_BRAND = RA.COD_BRAND
WHERE RA.COD_EC = @COD_EC
AND RA.ACTIVE = 1
AND EQP.COD_BRAND IS NULL

SELECT
	RA.COD_BRAND INTO #BRAND_AFF
FROM ROUTE_ACQUIRER RA
LEFT JOIN #BRAND_EQP EQP
	ON EQP.COD_BRAND = RA.COD_BRAND
LEFT JOIN #BRAND_EC EC
	ON EC.COD_BRAND = RA.COD_BRAND
WHERE RA.COD_AFFILIATOR = @COD_AFF
AND RA.ACTIVE = 1
AND EQP.COD_BRAND IS NULL
AND EC.COD_BRAND IS NULL

SELECT
	RA.COD_BRAND INTO #BRAND_SUB
FROM ROUTE_ACQUIRER RA
LEFT JOIN #BRAND_EQP EQP
	ON EQP.COD_BRAND = RA.COD_BRAND
LEFT JOIN #BRAND_EC EC
	ON EC.COD_BRAND = RA.COD_BRAND
LEFT JOIN #BRAND_AFF AF
	ON AF.COD_BRAND = RA.COD_BRAND
WHERE RA.COD_COMP = @COD_SUB
AND RA.ACTIVE = 1
AND EQP.COD_BRAND IS NULL
AND EC.COD_BRAND IS NULL
AND AF.COD_BRAND IS NULL

CREATE TABLE #ROUTES_TERMINAL (
	ACQUIRER_NAME VARCHAR(128)
   ,PRODUCT_ID INT
   ,PRODUCT_NAME VARCHAR(64)
   ,PRODUCT_EXT_CODE VARCHAR(64)
   ,TRAN_TYPE INT
   ,TRAN_TYPE_NAME VARCHAR(32)
   ,CODE_EC_ACQ VARCHAR(10)
   ,BRAND VARCHAR(64)
   ,CONF_TYPE INT
   ,IS_SIMULATED INT
   ,DATE_PLAN DATETIME
   ,COD_AC INT
   ,COD_BRAND INT
   ,DEBIT INT
   ,CREDIT INT
   ,CREDIT_INSTALLMENTS INT
   ,CLIENT_INSTALLMENT INT
   ,CLIENT_DEBIT INT
   ,CLIENT_CREDIT INT
   ,ONLINE INT
   ,PRESENTIAL INT
   ,RATE_FREE INT
)

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_SUB CTE_SUB
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = CTE_SUB.COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_COMP = @COD_SUB
			AND RA.CONF_TYPE = 4
	INNER JOIN BRAND B
		ON B.COD_BRAND = CTE_SUB.COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = CTE_SUB.COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_AFF CTE_AFF
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = CTE_AFF.COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_AFFILIATOR = @COD_AFF
			AND RA.CONF_TYPE = 3
	INNER JOIN BRAND B
		ON B.COD_BRAND = CTE_AFF.COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = CTE_AFF.COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_EC [CTE_EC]
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = [CTE_EC].COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_EC = @COD_EC
			AND RA.CONF_TYPE = 2
	INNER JOIN BRAND B
		ON B.COD_BRAND = [CTE_EC].COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = [CTE_EC].COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_EQP [CTE_EQUIP]
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = [CTE_EQUIP].COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_EQUIP = @TERMINALID
			AND RA.CONF_TYPE = 1
	INNER JOIN BRAND B
		ON B.COD_BRAND = [CTE_EQUIP].COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = [CTE_EQUIP].COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

CREATE TABLE #TERMINAL_FILTER (
	COD_AC INT
   ,COD_MODEL INT
   ,COD_BRAND INT
   ,ONLINE INT
   ,PRESENTIAL INT
   ,CREDIT INT
   ,DEBIT INT
   ,CREDIT_INSTALLMENTS INT
   ,CLIENT_INSTALLMENT INT
   ,CLIENT_CREDIT INT
   ,CLIENT_DEBIT INT
   ,RATE_FREE INT
)

IF EXISTS (SELECT
			COD_PRD_ACQ_FILTER
		FROM PRODUCT_ACQUIRE_FILTER
		WHERE COD_ASS_DEPTO_TERMINAL = @COD_DPTO_TERM)
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_ASS_DEPTO_TERMINAL = @COD_DPTO_TERM
END
ELSE
IF EXISTS (SELECT
			COD_PRD_ACQ_FILTER
		FROM PRODUCT_ACQUIRE_FILTER
		WHERE COD_EC = @COD_EC)
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_EC = @COD_EC
END
ELSE
IF EXISTS (SELECT
			COD_PRD_ACQ_FILTER
		FROM PRODUCT_ACQUIRE_FILTER
		WHERE COD_AFFILIATOR = @COD_AFF)
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_AFFILIATOR = @COD_AFF
END
ELSE
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_AFFILIATOR IS NULL
	AND COD_EC IS NULL
	AND COD_ASS_DEPTO_TERMINAL IS NULL
END

DELETE RT
	FROM #ROUTES_TERMINAL RT
	JOIN #TERMINAL_FILTER PAF
		ON (PAF.COD_AC IS NULL
		OR PAF.COD_AC = RT.COD_AC)
		AND (PAF.COD_MODEL IS NULL
		OR PAF.COD_MODEL = @EQUIP_MODEL)
		AND (PAF.COD_BRAND IS NULL
		OR PAF.COD_BRAND = RT.COD_BRAND)
		AND (
		PAF.ONLINE = RT.ONLINE
		OR PAF.PRESENTIAL = RT.PRESENTIAL
		OR PAF.CREDIT = RT.CREDIT
		OR PAF.DEBIT = RT.DEBIT
		OR PAF.CREDIT_INSTALLMENTS = RT.CREDIT_INSTALLMENTS
		OR PAF.CLIENT_INSTALLMENT = RT.CLIENT_INSTALLMENT
		OR PAF.CLIENT_CREDIT = RT.CLIENT_CREDIT
		OR PAF.CLIENT_DEBIT = RT.CLIENT_DEBIT
		OR PAF.RATE_FREE = RT.RATE_FREE
		)

SELECT
	ACQUIRER_NAME
   ,PRODUCT_ID
   ,PRODUCT_NAME
   ,PRODUCT_EXT_CODE
   ,TRAN_TYPE
   ,TRAN_TYPE_NAME
   ,CODE_EC_ACQ
   ,BRAND
   ,CONF_TYPE
   ,IS_SIMULATED
   ,DATE_PLAN
FROM #ROUTES_TERMINAL

END;
GO

IF OBJECT_ID('SP_LS_SOURCE_TRANSACTION') IS NOT NULL
DROP PROCEDURE SP_LS_SOURCE_TRANSACTION
GO
CREATE PROCEDURE SP_LS_SOURCE_TRANSACTION
AS
BEGIN

SELECT
	COD_SOURCE_TRAN
   ,CODE
FROM SOURCE_TRANSACTION

END;
GO


IF OBJECT_ID('SP_LS_FILTER_PRDCT_ACQ') IS NOT NULL
DROP PROCEDURE SP_LS_FILTER_PRDCT_ACQ
GO
CREATE PROCEDURE SP_LS_FILTER_PRDCT_ACQ
(
    @COD_AFF INT = NULL,
    @COD_EC INT = NULL,
    @SERIAL VARCHAR(96) = NULL,
    @COD_AC INT = NULL,
    @COD_MODEL INT = NULL,
    @BRANDGROUP VARCHAR(64) = NULL,
    @ONLINE INT = 0,
    @PRESENTIAL INT = 0,
    @PAGE INT = 1,
    @PAGESIZE INT = 10,
    @SEARCH_TYPE INT = 1,
    @QtyRows INT OUTPUT
) AS BEGIN
SET NOCOUNT ON
SET ARITHABORT ON

    DECLARE @Skip INT = (@PAGE - 1) * @PAGESIZE;
    DECLARE @Sql NVARCHAR(MAX)

SET @Sql = ' 
    SELECT 
        COD_PRD_ACQ_FILTER
         , PAF.COD_AFFILIATOR
         , A.NAME AF_NAME
         , PAF.COD_EC
         , CE.NAME EC_NAME
         , PAF.COD_ASS_DEPTO_TERMINAL
         , E.SERIAL
         , PAF.COD_AC
         , ACQ.NAME ACQ_NAME
         , PAF.COD_MODEL
         , EM.CODIGO MODEL
         , CONCAT(B.[GROUP], '' '', TT.CODE)  BRAND_GROUP
         , PAF.ONLINE
         , PAF.PRESENTIAL
         , PAF.DEBIT
         , PAF.CREDIT
         , PAF.CREDIT_INSTALLMENTS
         , PAF.CLIENT_INSTALLMENT
         , PAF.CLIENT_DEBIT
         , PAF.CLIENT_CREDIT
         , PAF.RATE_FREE
    FROM PRODUCT_ACQUIRE_FILTER PAF 
    LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = PAF.COD_AFFILIATOR
    LEFT JOIN COMMERCIAL_ESTABLISHMENT CE ON CE.COD_EC = PAF.COD_EC
    LEFT JOIN ACQUIRER ACQ ON ACQ.COD_AC = PAF.COD_AC
    LEFT JOIN EQUIPMENT_MODEL EM ON EM.COD_MODEL = PAF.COD_MODEL
    LEFT JOIN BRAND B ON B.COD_BRAND = PAF.COD_BRAND
    LEFT JOIN TRANSACTION_TYPE TT ON TT.COD_TTYPE = B.COD_TTYPE
    LEFT JOIN ASS_DEPTO_EQUIP ADE on PAF.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
    LEFT JOIN EQUIPMENT E ON E.COD_EQUIP = ADE.COD_EQUIP
    WHERE '

    IF @COD_AFF IS NOT NULL BEGIN
SET @Sql = @Sql + ' PAF.COD_AFFILIATOR = @COD_AFF';
    END ELSE IF @SEARCH_TYPE = 2 BEGIN
SET @Sql = @Sql + ' PAF.COD_AFFILIATOR IS NOT NULL '
    END
    ELSE IF @COD_EC IS NOT NULL BEGIN
SET @Sql = @Sql + ' PAF.COD_EC = @COD_EC ';
    END ELSE IF @SEARCH_TYPE = 3 BEGIN
SET @Sql = @Sql + ' PAF.COD_EC IS NOT NULL '
    END
    ELSE IF @SERIAL IS NOT NULL BEGIN
SET @Sql = @Sql + ' E.SERIAL = @SERIAL '
    END ELSE IF @SEARCH_TYPE = 4 BEGIN
SET @Sql = @Sql + ' PAF.COD_ASS_DEPTO_TERMINAL IS NOT NULL '
    END
    ELSE BEGIN
SET @Sql = @Sql + ' PAF.COD_AFFILIATOR IS NULL AND PAF.COD_EC IS NULL AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL '
    END

    IF @ONLINE = 1 BEGIN
SET @Sql = @Sql + ' AND PAF.ONLINE = 1 ';
    END

    IF @PRESENTIAL = 1 BEGIN
SET @Sql = @Sql + ' AND PAF.PRESENTIAL = 1 ';
    END

    IF @COD_AC IS NOT NULL BEGIN
SET @Sql = @Sql + ' AND PAF.COD_AC = @COD_AC ';
    END

    IF @COD_MODEL IS NOT NULL BEGIN
SET @Sql = @Sql + ' AND PAF.COD_MODEL = @COD_MODEL '
    END

    IF @BRANDGROUP IS NOT NULL BEGIN
SET @Sql = @Sql + ' AND B.[GROUP] = @BRANDGROUP '
    END

    DECLARE @CTQUERY NVARCHAR(MAX) = N'SELECT @QtyRows=COUNT(*) FROM (' + @Sql + ') r ';

EXEC SP_EXECUTESQL @CTQUERY
				  ,N'@COD_AFF INT,
    @COD_EC INT,
    @SERIAL VARCHAR(96),
    @COD_AC INT,
    @COD_MODEL INT,
    @BRANDGROUP VARCHAR(64),
    @ONLINE INT,
    @PRESENTIAL INT,
    @PAGE INT,
    @PAGESIZE INT,
    @Skip INT,
    @QtyRows INT OUTPUT
    '
				  ,@COD_AFF = @COD_AFF
				  ,@COD_EC = @COD_EC
				  ,@SERIAL = @SERIAL
				  ,@COD_AC = @COD_AC
				  ,@COD_MODEL = @COD_MODEL
				  ,@BRANDGROUP = @BRANDGROUP
				  ,@ONLINE = @ONLINE
				  ,@PRESENTIAL = @PRESENTIAL
				  ,@PAGE = @PAGE
				  ,@PAGESIZE = @PAGESIZE
				  ,@Skip = @Skip
				  ,@QtyRows = @QtyRows OUTPUT;

SET @Sql = @Sql + ' ORDER BY COD_PRD_ACQ_FILTER DESC
    OFFSET @Skip ROWS
    FETCH NEXT @PAGESIZE ROWS ONLY 
    '

EXEC SP_EXECUTESQL @Sql
				  ,N'@COD_AFF INT,
    @COD_EC INT,
    @SERIAL VARCHAR(96),
    @COD_AC INT,
    @COD_MODEL INT,
    @BRANDGROUP VARCHAR(64),
    @ONLINE INT,
    @PRESENTIAL INT,
    @PAGE INT,
    @PAGESIZE INT,
    @Skip INT
    '
				  ,@COD_AFF = @COD_AFF
				  ,@COD_EC = @COD_EC
				  ,@SERIAL = @SERIAL
				  ,@COD_AC = @COD_AC
				  ,@COD_MODEL = @COD_MODEL
				  ,@BRANDGROUP = @BRANDGROUP
				  ,@ONLINE = @ONLINE
				  ,@PRESENTIAL = @PRESENTIAL
				  ,@PAGE = @PAGE
				  ,@PAGESIZE = @PAGESIZE
				  ,@Skip = @Skip;

END
GO

IF OBJECT_ID('SP_RM_FILTER_PRDCT_ACQ') IS NOT NULL BEGIN
DROP PROCEDURE SP_RM_FILTER_PRDCT_ACQ
END
GO
CREATE PROCEDURE SP_RM_FILTER_PRDCT_ACQ
(
    @Ids CODE_TYPE READONLY 
) AS BEGIN

DELETE PRODUCT_ACQUIRE_FILTER
	FROM PRODUCT_ACQUIRE_FILTER
	JOIN @Ids i
		ON i.CODE = PRODUCT_ACQUIRE_FILTER.COD_PRD_ACQ_FILTER

END
GO


IF OBJECT_ID('SP_CREATE_FILTER_PRDCT_ACQ') IS NOT NULL
DROP PROCEDURE SP_CREATE_FILTER_PRDCT_ACQ
GO
IF OBJECT_ID('SP_FD_CONFLICT_FILTER_PRDT_ACQ') IS NOT NULL
DROP PROCEDURE SP_FD_CONFLICT_FILTER_PRDT_ACQ
GO
IF TYPE_ID('PRD_ACQ_FILTER_TP') IS NOT NULL BEGIN
DROP TYPE PRD_ACQ_FILTER_TP
END
GO
CREATE TYPE PRD_ACQ_FILTER_TP AS table
(
    [COD_AF] INT,
    [COD_EC] INT,
    [COD_EQP] INT,
    [COD_ACQ] INT,
    [ONLINE] INT,
    [PRESENTIAL] INT,
    [COD_MODEL] INT,
    [BRAND_GROUP] VARCHAR(64),
    [CREDIT] INT,
    [DEBIT] INT,
    [CREDIT_INSTALLMENTS] INT,
    [CLIENT_INSTALLMENTS] INT,
    [CLIENT_CREDIT] INT,
    [CLIENT_DEBIT] INT,
    [RATE_FREE] INT
)
GO
CREATE PROCEDURE SP_CREATE_FILTER_PRDCT_ACQ
/*----------------------------------------------------------------------------------------        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author                  VERSION        Date             Description        
------------------------------------------------------------------------------------------        
    Luiz Aquino              V1            2020-11-25       CREATED  
------------------------------------------------------------------------------------------*/
(
@ITEMS PRD_ACQ_FILTER_TP READONLY,
@COD_USER INT = null
) AS BEGIN

DELETE PAF
	FROM PRODUCT_ACQUIRE_FILTER PAF
	LEFT JOIN ASS_DEPTO_EQUIP ADE
		ON ADE.COD_ASS_DEPTO_TERMINAL = PAF.COD_ASS_DEPTO_TERMINAL
	LEFT JOIN BRAND B
		ON B.COD_BRAND = PAF.COD_BRAND
	JOIN @ITEMS I
		ON ((PAF.COD_AFFILIATOR = I.COD_AF)
		OR (PAF.COD_EC = I.COD_EC)
		OR (ADE.COD_EQUIP = I.COD_EQP)
		OR (PAF.COD_AFFILIATOR IS NULL
		AND PAF.COD_EC IS NULL
		AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL))
		AND ((PAF.COD_MODEL IS NULL
		AND I.COD_MODEL IS NULL)
		OR PAF.COD_MODEL = I.COD_MODEL)
		AND ((PAF.COD_AC IS NULL
		AND I.COD_ACQ IS NULL)
		OR PAF.COD_AC = I.COD_ACQ)
		AND (PAF.PRESENTIAL = I.PRESENTIAL)
		AND (PAF.ONLINE = I.ONLINE)
		AND ((B.[GROUP] IS NULL
		AND I.BRAND_GROUP IS NULL)
		OR B.[GROUP] = I.BRAND_GROUP)

INSERT INTO PRODUCT_ACQUIRE_FILTER (COD_AFFILIATOR,
COD_EC,
COD_ASS_DEPTO_TERMINAL,
COD_AC,
COD_MODEL,
COD_BRAND,
ONLINE,
PRESENTIAL,
DEBIT,
CREDIT,
CREDIT_INSTALLMENTS,
CLIENT_INSTALLMENT,
CLIENT_DEBIT,
CLIENT_CREDIT,
RATE_FREE,
CREATED_AT,
COD_USER)
	SELECT
		COD_AF
	   ,COD_EC
	   ,ADE.COD_ASS_DEPTO_TERMINAL
	   ,COD_ACQ
	   ,COD_MODEL
	   ,B.COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,DEBIT
	   ,CREDIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENTS
	   ,CLIENT_DEBIT
	   ,CLIENT_CREDIT
	   ,RATE_FREE
	   ,GETDATE()
	   ,@COD_USER
	FROM @ITEMS I
	LEFT JOIN ASS_DEPTO_EQUIP ADE
		ON ADE.COD_EQUIP = I.COD_EQP
			AND ACTIVE = 1
	LEFT JOIN BRAND B
		ON B.[GROUP] = I.BRAND_GROUP
			AND ((COD_TTYPE = 1
					AND (CREDIT = 1
						OR CREDIT_INSTALLMENTS = 1
						OR CLIENT_INSTALLMENTS = 1
						OR CLIENT_CREDIT = 1
						OR RATE_FREE = 1))
				OR (COD_TTYPE = 2
					AND (DEBIT = 1
						OR CLIENT_DEBIT = 1)))
END
GO
CREATE PROCEDURE SP_FD_CONFLICT_FILTER_PRDT_ACQ
/*----------------------------------------------------------------------------------------        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author                  VERSION        Date             Description        
------------------------------------------------------------------------------------------        
    Luiz Aquino              V1            2020-11-25       CREATED  
------------------------------------------------------------------------------------------*/
(
    @ITEMS PRD_ACQ_FILTER_TP READONLY
) AS BEGIN

SELECT
	PAF.*
FROM PRODUCT_ACQUIRE_FILTER PAF
LEFT JOIN ASS_DEPTO_EQUIP ADE
	ON ADE.COD_ASS_DEPTO_TERMINAL = PAF.COD_ASS_DEPTO_TERMINAL
LEFT JOIN BRAND B
	ON B.COD_BRAND = PAF.COD_BRAND
JOIN @ITEMS I
	ON ((PAF.COD_AFFILIATOR = I.COD_AF)
			OR (PAF.COD_EC = I.COD_EC)
			OR (ADE.COD_EQUIP = I.COD_EQP)
			OR (PAF.COD_AFFILIATOR IS NULL
				AND PAF.COD_EC IS NULL
				AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL))
		AND ((PAF.COD_MODEL IS NULL
				AND I.COD_MODEL IS NULL)
			OR PAF.COD_MODEL = I.COD_MODEL)
		AND ((PAF.COD_AC IS NULL
				AND I.COD_ACQ IS NULL)
			OR PAF.COD_AC = I.COD_ACQ)
		AND (PAF.PRESENTIAL = I.PRESENTIAL)
		AND (PAF.ONLINE = I.ONLINE)
		AND ((B.[GROUP] IS NULL
				AND I.BRAND_GROUP IS NULL)
			OR B.[GROUP] = I.BRAND_GROUP)

END

GO
IF OBJECT_ID('SP_LS_SERIAL') IS NOT NULL DROP PROCEDURE SP_LS_SERIAL
GO
CREATE PROCEDURE [dbo].[SP_LS_SERIAL]    
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_LS_SERIAL]    
Project.......: TKPP    
----------------------------------------------------------
--------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Lucas Aguiar     v1      09/
11/2018      Creation    
------------------------------------------------------------------------------------------*/    
(    
@COD_COMP INT,    
@SERIAL VARCHAR(255) = NULL    
)    
AS    
DECLARE @QUERY NVARCHAR(MAX);
        
BEGIN

 

SET @QUERY = 
'      
 SELECT     
  EQ.COD_EQUIP,  
  EQ.SERIAL,    
  EQM.CODIGO,    
  EQ.CHIP,  
  EQ.ACTIVE,
  IIF(ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL > 1, 1, 0) AS IS_ASSOCIATED
 FROM    
   EQUIPMENT EQ     
 INNER JOIN    
  EQUIPMENT_MODEL EQM ON EQM.COD_MODEL = EQ.COD_MODEL       
LEFT JOIN ASS_DEPTO_EQUIP ON 
    ASS_DEPTO_EQUIP.COD_EQUIP = EQ.COD_EQUIP AND ASS_DEPTO_EQUIP.ACTIVE = 1
 WHERE COD_COMP = @COD_COMP    
 '
    
IF @SERIAL IS NOT NULL
SET @QUERY = @QUERY + 'AND EQ.SERIAL = @SERIAL'

 

SET @QUERY = @QUERY + ' ORDER BY 1 DESC'



EXEC sp_executesql @QUERY
				  ,N'                      
   @COD_COMP INT        
  ,@SERIAL VARCHAR(255)                
  '
				  ,@COD_COMP = @COD_COMP
				  ,@SERIAL = @SERIAL


 

END

--ET-1151

GO

--ET-1151-LEGADO
DECLARE @DEBIT_PS_QTY INT = ( SELECT
		COUNT(*)
	FROM PRODUCTS_ACQUIRER
	JOIN ACQUIRER
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	JOIN BRAND
		ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
	WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
	AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
	AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
	AND PRODUCTS_ACQUIRER.VISIBLE = 1
	AND BRAND.COD_TTYPE = 2)

DECLARE @CREDIT_PS_QTY INT = ( SELECT
		COUNT(*)
	FROM PRODUCTS_ACQUIRER
	JOIN ACQUIRER
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	JOIN BRAND
		ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
	WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
	AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
	AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
	AND PRODUCTS_ACQUIRER.VISIBLE = 1
	AND BRAND.COD_TTYPE = 1)

DECLARE @INSTALLMENTS_PS_QTY INT = ( SELECT
		COUNT(*)
	FROM PRODUCTS_ACQUIRER
	JOIN ACQUIRER
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	JOIN BRAND
		ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
	WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
	AND PRODUCTS_ACQUIRER.PLOT_VALUE = 2
	AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
	AND PRODUCTS_ACQUIRER.VISIBLE = 1
	AND BRAND.COD_TTYPE = 1)

--PARCELADO CLIENTE

	DECLARE @CLIENTDEBIT_PS_QTY INT = ( SELECT
		COUNT(*)
	FROM PRODUCTS_ACQUIRER
	JOIN ACQUIRER
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	JOIN BRAND
		ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
	WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
	AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
	AND PRODUCTS_ACQUIRER.IS_SIMULATED = 1
	AND PRODUCTS_ACQUIRER.VISIBLE = 1
	AND BRAND.COD_TTYPE = 2)

DECLARE @CLIENTCREDIT_PS_QTY INT = ( SELECT
		COUNT(*)
	FROM PRODUCTS_ACQUIRER
	JOIN ACQUIRER
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	JOIN BRAND
		ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
	WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
	AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
	AND PRODUCTS_ACQUIRER.IS_SIMULATED = 1
	AND PRODUCTS_ACQUIRER.VISIBLE = 1
	AND BRAND.COD_TTYPE = 1)

DECLARE @CLIENTINSTALLMENTS_PS_QTY INT = ( SELECT
		COUNT(*)
	FROM PRODUCTS_ACQUIRER
	JOIN ACQUIRER
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	JOIN BRAND
		ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
	WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
	AND PRODUCTS_ACQUIRER.PLOT_VALUE = 2
	AND PRODUCTS_ACQUIRER.IS_SIMULATED = 1
	AND PRODUCTS_ACQUIRER.VISIBLE = 1
	AND BRAND.COD_TTYPE = 1)

SELECT
	* INTO #TMP_PRD_UNA_EC
FROM PRODUCTS_UNAVAILABLE_EC
WHERE COD_EC IS NOT NULL
--AND PRODUCTS_CUSTOMIZED = 1

WHILE ( SELECT
		COUNT(*)
	FROM #TMP_PRD_UNA_EC)
> 0
BEGIN

DECLARE @CURRENT_EC INT = (SELECT TOP 1
		COD_EC
	FROM #TMP_PRD_UNA_EC)

INSERT INTO PRODUCT_ACQUIRE_FILTER (COD_EC
, ONLINE
, PRESENTIAL
, DEBIT
, CREDIT
, CREDIT_INSTALLMENTS
, CLIENT_INSTALLMENT
, CLIENT_DEBIT
, CLIENT_CREDIT
, RATE_FREE
, CREATED_AT
, COD_USER)
	VALUES (@CURRENT_EC, 0, 0, 0, 0, 0, 0, 0, 0, 0, CURRENT_TIMESTAMP, 173)

DECLARE @CURRENT_LINE INT = @@identity


IF (SELECT TOP 1
			IS_SIMULATED
		FROM #TMP_PRD_UNA_EC
		WHERE COD_EC = @CURRENT_EC)
	= 0
BEGIN

UPDATE PRODUCT_ACQUIRE_FILTER
SET CLIENT_INSTALLMENT = 1
   ,CLIENT_DEBIT = 1
   ,CLIENT_CREDIT = 1
WHERE COD_EC = @CURRENT_EC

END

IF (SELECT TOP 1
			NOT_SIMULATED
		FROM #TMP_PRD_UNA_EC
		WHERE COD_EC = @CURRENT_EC)
	= 0
BEGIN

UPDATE PRODUCT_ACQUIRE_FILTER
SET DEBIT = 1
   ,CREDIT = 1
   ,CREDIT_INSTALLMENTS = 1
WHERE COD_EC = @CURRENT_EC

END


IF (SELECT TOP 1
			PRODUCTS_CUSTOMIZED
		FROM #TMP_PRD_UNA_EC
		WHERE COD_EC = @CURRENT_EC)
	= 1
BEGIN

DECLARE @DEBIT_ACTUAL INT;
DECLARE @CREDIT_ACTUAL INT;
DECLARE @INSTALLMENT_ACTUAL INT;
DECLARE @CL_DEBIT_ACTUAL INT;
DECLARE @CL_CREDIT_ACTUAL INT;
DECLARE @CL_INSTALLMENT_ACTUAL INT;

SELECT
	@DEBIT_ACTUAL = (SELECT
			COUNT(*)
		FROM PRODUCTS_UNAVAILABLE_EC
		JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
			ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
		JOIN PRODUCTS_ACQUIRER
			ON PRODUCTS_ACQUIRER.COD_PR_ACQ = CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_ACQ
		JOIN ACQUIRER
			ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		JOIN BRAND
			ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
		WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
		AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
		AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
		AND PRODUCTS_ACQUIRER.VISIBLE = 1
		AND BRAND.COD_TTYPE = 2
		AND COD_EC = @CURRENT_EC)
   ,@CREDIT_ACTUAL = (SELECT
			COUNT(*)
		FROM PRODUCTS_UNAVAILABLE_EC
		JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
			ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
		JOIN PRODUCTS_ACQUIRER
			ON PRODUCTS_ACQUIRER.COD_PR_ACQ = CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_ACQ
		JOIN ACQUIRER
			ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		JOIN BRAND
			ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
		WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
		AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
		AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
		AND PRODUCTS_ACQUIRER.VISIBLE = 1
		AND BRAND.COD_TTYPE = 1
		AND COD_EC = @CURRENT_EC)
   ,@INSTALLMENT_ACTUAL = (SELECT
			COUNT(*)
		FROM PRODUCTS_UNAVAILABLE_EC
		JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
			ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
		JOIN PRODUCTS_ACQUIRER
			ON PRODUCTS_ACQUIRER.COD_PR_ACQ = CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_ACQ
		JOIN ACQUIRER
			ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		JOIN BRAND
			ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
		WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
		AND PRODUCTS_ACQUIRER.PLOT_VALUE = 2
		AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
		AND PRODUCTS_ACQUIRER.VISIBLE = 1
		AND BRAND.COD_TTYPE = 1
		AND COD_EC = @CURRENT_EC)
   ,@CL_DEBIT_ACTUAL = (SELECT
			COUNT(*)
		FROM PRODUCTS_UNAVAILABLE_EC
		JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
			ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
		JOIN PRODUCTS_ACQUIRER
			ON PRODUCTS_ACQUIRER.COD_PR_ACQ = CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_ACQ
		JOIN ACQUIRER
			ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		JOIN BRAND
			ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
		WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
		AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
		AND PRODUCTS_ACQUIRER.IS_SIMULATED = 1
		AND PRODUCTS_ACQUIRER.VISIBLE = 1
		AND BRAND.COD_TTYPE = 2
		AND COD_EC = @CURRENT_EC)
   ,@CL_CREDIT_ACTUAL = (SELECT
			COUNT(*)
		FROM PRODUCTS_UNAVAILABLE_EC
		JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
			ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
		JOIN PRODUCTS_ACQUIRER
			ON PRODUCTS_ACQUIRER.COD_PR_ACQ = CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_ACQ
		JOIN ACQUIRER
			ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		JOIN BRAND
			ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
		WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
		AND PRODUCTS_ACQUIRER.PLOT_VALUE = 1
		AND PRODUCTS_ACQUIRER.IS_SIMULATED = 0
		AND PRODUCTS_ACQUIRER.VISIBLE = 1
		AND BRAND.COD_TTYPE = 1
		AND COD_EC = @CURRENT_EC)
   ,@CL_INSTALLMENT_ACTUAL = (SELECT
			COUNT(*)
		FROM PRODUCTS_UNAVAILABLE_EC
		JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
			ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
		JOIN PRODUCTS_ACQUIRER
			ON PRODUCTS_ACQUIRER.COD_PR_ACQ = CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_ACQ
		JOIN ACQUIRER
			ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		JOIN BRAND
			ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
		WHERE ACQUIRER.[GROUP] = 'PAGSEGURO'
		AND PRODUCTS_ACQUIRER.PLOT_VALUE = 2
		AND PRODUCTS_ACQUIRER.IS_SIMULATED = 1
		AND PRODUCTS_ACQUIRER.VISIBLE = 1
		AND BRAND.COD_TTYPE = 1
		AND COD_EC = @CURRENT_EC)
FROM PRODUCTS_UNAVAILABLE_EC
JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
	ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
WHERE COD_EC = @CURRENT_EC

UPDATE PRODUCT_ACQUIRE_FILTER
SET DEBIT =
	CASE
		WHEN (SELECT TOP 1
					NOT_SIMULATED
				FROM PRODUCTS_UNAVAILABLE_EC
				WHERE COD_EC = @CURRENT_EC)
			= 1 THEN IIF(@DEBIT_ACTUAL = @DEBIT_PS_QTY, 1, 0)
		ELSE 1
	END
   ,CREDIT =
	CASE
		WHEN (SELECT TOP 1
					NOT_SIMULATED
				FROM PRODUCTS_UNAVAILABLE_EC
				WHERE COD_EC = @CURRENT_EC)
			= 1 THEN IIF(@CREDIT_ACTUAL = @CREDIT_PS_QTY, 1, 0)
		ELSE 1
	END
   ,CREDIT_INSTALLMENTS =
	CASE
		WHEN (SELECT TOP 1
					NOT_SIMULATED
				FROM PRODUCTS_UNAVAILABLE_EC
				WHERE COD_EC = @CURRENT_EC)
			= 1 THEN IIF(@INSTALLMENT_ACTUAL = @INSTALLMENTS_PS_QTY, 1, 0)
		ELSE 1
	END
   ,CLIENT_DEBIT =
	CASE
		WHEN (SELECT TOP 1
					IS_SIMULATED
				FROM PRODUCTS_UNAVAILABLE_EC
				WHERE COD_EC = @CURRENT_EC)
			= 1 THEN IIF(@CL_DEBIT_ACTUAL = @CLIENTDEBIT_PS_QTY, 1, 0)
		ELSE 1
	END
   ,CLIENT_CREDIT =
	CASE
		WHEN (SELECT TOP 1
					IS_SIMULATED
				FROM PRODUCTS_UNAVAILABLE_EC
				WHERE COD_EC = @CURRENT_EC)
			= 1 THEN IIF(@CL_CREDIT_ACTUAL = @CLIENTCREDIT_PS_QTY, 1, 0)
		ELSE 1
	END
   ,CLIENT_INSTALLMENT =
	CASE
		WHEN (SELECT TOP 1
					IS_SIMULATED
				FROM PRODUCTS_UNAVAILABLE_EC
				WHERE COD_EC = @CURRENT_EC)
			= 1 THEN IIF(@CL_INSTALLMENT_ACTUAL = @CLIENTINSTALLMENTS_PS_QTY, 1, 0)
		ELSE 1
	END
WHERE COD_EC = @CURRENT_EC

END

DELETE FROM #TMP_PRD_UNA_EC
WHERE COD_EC = @CURRENT_EC

END;

DROP TABLE #TMP_PRD_UNA_EC
--DELETE FROM PRODUCT_ACQUIRE_FILTER

GO


INSERT INTO PRODUCT_ACQUIRE_FILTER (COD_AFFILIATOR, COD_EC, COD_MODEL, ONLINE, PRESENTIAL, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, RATE_FREE, CREATED_AT, COD_USER)
	SELECT DISTINCT
		PRODUCTS_UNAVAILABLE_EC.COD_AFFILIATOR
	   ,NULL
	   ,NULL
	   ,0
	   ,0
	   ,0
	   ,0
	   ,0
	   ,0
	   ,1
	   ,1
	   ,0
	   ,CURRENT_TIMESTAMP
	   ,173
	FROM PRODUCTS_UNAVAILABLE_EC
	JOIN CUSTOMIZED_UNAVAILABLE_PRODUCTS
		ON CUSTOMIZED_UNAVAILABLE_PRODUCTS.COD_PR_UN_EC = PRODUCTS_UNAVAILABLE_EC.COD_PR_UN_EC
	WHERE COD_AFFILIATOR IS NOT NULL
--ET-1151-LEGADO

GO


IF OBJECT_ID('SP_FD_ASSIGN_TITLE') IS NOT NULL DROP PROCEDURE SP_FD_ASSIGN_TITLE;
GO
IF OBJECT_ID('SP_REG_ASSIGN_DATA') IS NOT NULL DROP PROCEDURE SP_REG_ASSIGN_DATA;
GO
IF OBJECT_ID('SP_LS_ASSIGN_FILE_AVAILABLE') IS NOT NULL DROP PROCEDURE SP_LS_ASSIGN_FILE_AVAILABLE;
GO
IF OBJECT_ID('SP_REG_ASSIGN_FILE') IS NOT NULL DROP PROCEDURE SP_REG_ASSIGN_FILE;
GO
IF OBJECT_ID('SP_REG_INVALID_ASSIGN') IS NOT NULL DROP PROCEDURE SP_REG_INVALID_ASSIGN;
GO
IF OBJECT_ID('ASSIGN_DATA') IS NOT NULL DROP TABLE ASSIGN_DATA;
GO
create table ASSIGN_DATA
(
    COD_ASSIGN_DATA  INT PRIMARY KEY IDENTITY,
    COD_ASSIGN_FILE  INT,
    COD_TITLE        INT,
    TRANSACTION_ID   VARCHAR(255),
    PLOT             INT,
    NEW_PREVISION    DATE,
    NEW_ANTICIPATION DECIMAL(22, 6),
    ASSIGNMENT_RATE  DECIMAL(22, 6),
    NET_VALUE        DECIMAL(22, 6),
    DESCRIPTION      VARCHAR(255),
    ACTIVE           BIT DEFAULT 1
    FOREIGN KEY (COD_TITLE) REFERENCES TRANSACTION_TITLES (COD_TITLE),
    FOREIGN KEY (COD_ASSIGN_FILE) REFERENCES ASSIGN_FILE (COD_ASSIGN_FILE)
)
GO

IF OBJECT_ID('INVALID_ASSIGN') IS NOT NULL DROP TABLE INVALID_ASSIGN;
GO
create table INVALID_ASSIGN
(
    COD_INVALID_ASSIG INT PRIMARY KEY IDENTITY,
    COD_ASSIGN_FILE   INT,
    TRANSACTION_ID    VARCHAR(255),
    PLOT              INT,
    NEW_PREVISION     DATE,
    NEW_ANTICIPATION  DECIMAL(22, 6),
    ASSIGNMENT_RATE   DECIMAL(22, 6),
    NET_VALUE         DECIMAL(22, 6),
    DESCRIPTION       VARCHAR(255),
    ACTIVE            BIT DEFAULT 1,
    ORDER_CODE        VARCHAR(255),
    CV_CODE           VARCHAR(255)
        FOREIGN KEY (COD_ASSIGN_FILE) REFERENCES ASSIGN_FILE (COD_ASSIGN_FILE)
)
GO

IF TYPE_ID('TP_ASSIGN_DATA') IS NOT NULL
DROP TYPE TP_ASSIGN_DATA
GO
create type TP_ASSIGN_DATA AS TABLE
(
    TRAN_INITIAL_DATE DATETIME,
    TRAN_FINAL_DATE   DATETIME,
    TRAN_VALUE        DECIMAL(22, 6),
    TRAN_PLOT         INT,
    TITLE_PLOT        INT,
    CV_CODE           VARCHAR(255),
    ORDER_CODE        VARCHAR(255),
    TRANSACTION_ID    VARCHAR(255),
    NEW_PREVISION     DATE,
    NEW_ANTICIPATION  DECIMAL(22, 6),
    ASSIGNMENT_RATE   DECIMAL(22, 6),
    NET_VALUE         DECIMAL(22, 6),
    DESCRIPTION       VARCHAR(255),
    COD_TITLE         INT
)
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'IS_ASSIGN'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD IS_ASSIGN BIT DEFAULT 0;


END;
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_PREVISION'
	AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
ADD ASSIGN_PREVISION DATE;
END;
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_ANTICIPATION'
	AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
ADD ASSIGN_ANTICIPATION DECIMAL(22, 6);
END;
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_RATE'
	AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
ADD ASSIGN_RATE DECIMAL(22, 6);
END;
GO


IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_NET_VALUE'
	AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
ADD ASSIGN_NET_VALUE DECIMAL(22, 6);
END;
GO


IF NOT EXISTS (SELECT
		1
	FROM sys.indexes
	WHERE object_id = OBJECT_ID('REPORT_CONSOLIDATED_TRANS_SUB')
	AND name = 'IX_REPORT_CONSOLIDATED_TRANS_SUB_ASSIGNED')
BEGIN
CREATE NONCLUSTERED INDEX [IX_REPORT_CONSOLIDATED_TRANS_SUB_ASSIGNED]
ON [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([ASSIGNED])
END
GO


UPDATE REPORT_CONSOLIDATED_TRANS_SUB
SET ASSIGNED = 0
WHERE ASSIGNED = 1;

GO

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.IS_ASSIGN = 0
WHERE TRANSACTION_TITLES.IS_ASSIGN IS NULL

GO

-- executar só depois de rodar o serviço dos arquivos

SELECT
	COD_TITLE INTO #assign_tite
FROM TRANSACTION_TITLES
WHERE IS_ASSIGN = 1
GO

SELECT
	a.COD_TITLE
   ,ASSIGN_DATA.NET_VALUE
   ,NEW_ANTICIPATION
   ,ASSIGNMENT_RATE
   ,NEW_PREVISION
   ,COD_REP_CONSO_TRANS_SUB INTO #dt_assign
FROM #assign_tite a
JOIN REPORT_CONSOLIDATED_TRANS_SUB
	ON REPORT_CONSOLIDATED_TRANS_SUB.COD_TITLE = a.COD_TITLE
JOIN ASSIGN_DATA
	ON ASSIGN_DATA.COD_TITLE = a.COD_TITLE
		AND ASSIGN_DATA.ACTIVE = 1

GO

GO


declare @control int = 1;

while (@control = 1)
    begin
UPDATE TOP (10000) REPORT_CONSOLIDATED_TRANS_SUB
SET ASSIGNED = 1
   ,ASSIGNEE = 'PagSeguro'
   ,ASSIGN_NET_VALUE = da.NET_VALUE
   ,ASSIGN_ANTICIPATION = da.NEW_ANTICIPATION
   ,ASSIGN_RATE = da.ASSIGNMENT_RATE
   ,ASSIGN_PREVISION = da.NEW_PREVISION
FROM REPORT_CONSOLIDATED_TRANS_SUB
JOIN #dt_assign da
	ON REPORT_CONSOLIDATED_TRANS_SUB.COD_REP_CONSO_TRANS_SUB = da.COD_REP_CONSO_TRANS_SUB
WHERE ASSIGNED = 0
IF (@@rowcount <= 0)
SET @control = 0;

PRINT ('sp_up_temp_exp executado')
END

GO
DROP TABLE #assign_tite
GO
DROP TABLE #dt_assign;

IF NOT EXISTS (SELECT
		1
	FROM [SYS].[COLUMNS]
	WHERE name = N'COD_NOTIFY_MESSAGE'
	AND object_id = OBJECT_ID(N'ASSIGN_FILE'))
BEGIN

ALTER TABLE ASSIGN_FILE
ADD COD_NOTIFY_MESSAGE INT FOREIGN KEY REFERENCES NOTIFICATION_MESSAGES (COD_NOTIFY_MESSAGE);

END;
GO


IF NOT EXISTS (SELECT
		1
	FROM [SYS].[COLUMNS]
	WHERE name = N'PROCESSED'
	AND object_id = OBJECT_ID(N'ASSIGN_FILE'))
BEGIN

ALTER TABLE ASSIGN_FILE
ADD PROCESSED BIT DEFAULT 0;

END;
GO

UPDATE ASSIGN_FILE
SET ASSIGN_FILE.PROCESSED = 0
WHERE ASSIGN_FILE.PROCESSED IS NULL;

GO


create PROCEDURE SP_FD_ASSIGN_TITLE(@TP TP_ASSIGN_DATA READONLY)
AS
BEGIN

SELECT
	TRANSACTION_TITLES.COD_TITLE
   ,TP.TRANSACTION_ID TransactionCode
   ,TP.NEW_PREVISION DateAvailable
   ,TP.NEW_ANTICIPATION AnticipationFee
   ,TP.ASSIGNMENT_RATE InstallmentIntermediationFee
   ,TP.NET_VALUE NetInstallmentValue
   ,tp.DESCRIPTION
   ,TP.TITLE_PLOT Plot
FROM TRANSACTION_TITLES(nolock)
JOIN [TRANSACTION](nolock)
	ON TRANSACTION_TITLES.COD_TRAN = [TRANSACTION].COD_TRAN
JOIN @TP TP
	ON TP.TITLE_PLOT = TRANSACTION_TITLES.PLOT
		AND BRAZILIAN_DATE BETWEEN
		TP.TRAN_INITIAL_DATE AND TP.TRAN_FINAL_DATE
		AND TP.TRAN_VALUE = [TRANSACTION].AMOUNT
		AND [TRANSACTION].PLOTS = TP.TRAN_PLOT
WHERE [TRANSACTION].COD_SITUATION = 3
AND EXISTS (SELECT
		COD_DATA_EXT
	FROM TRANSACTION_DATA_EXT(nolock)
	WHERE TRANSACTION_DATA_EXT.COD_TRAN =
	[TRANSACTION].COD_TRAN
	AND [VALUE] = tp.ORDER_CODE)
AND EXISTS (SELECT
		COD_DATA_EXT
	FROM TRANSACTION_DATA_EXT(nolock)
	WHERE TRANSACTION_DATA_EXT.COD_TRAN =
	[TRANSACTION].COD_TRAN
	AND [VALUE] = tp.CV_CODE)
END
GO


CREATE PROCEDURE SP_REG_ASSIGN_DATA(@TP TP_ASSIGN_DATA READONLY,    
                                    @COD_FILE int)    
AS    
BEGIN
  
    
    
    DECLARE @RetryCount INT
  
    
    DECLARE @Success BIT
SELECT
	@RetryCount = 1
   ,@Success = 0
WHILE @RetryCount <= 3
AND @Success = 0
BEGIN
BEGIN TRY
BEGIN TRANSACTION
UPDATE ASSIGN_DATA
SET ACTIVE = 0
FROM ASSIGN_DATA
JOIN @TP tp
	ON tp.TRANSACTION_ID = ASSIGN_DATA.TRANSACTION_ID
	AND tp.TITLE_PLOT = ASSIGN_DATA.PLOT
	AND ASSIGN_DATA.ACTIVE = 1


INSERT INTO ASSIGN_DATA (COD_ASSIGN_FILE, COD_TITLE, TRANSACTION_ID, PLOT, NEW_PREVISION,
NEW_ANTICIPATION,
ASSIGNMENT_RATE, NET_VALUE, DESCRIPTION)
	SELECT
		@COD_FILE
	   ,COD_TITLE
	   ,TRANSACTION_ID
	   ,TITLE_PLOT
	   ,NEW_PREVISION
	   ,NEW_ANTICIPATION
	   ,ASSIGNMENT_RATE
	   ,NET_VALUE
	   ,DESCRIPTION
	FROM @TP

UPDATE TRANSACTION_TITLES
SET IS_ASSIGN = 1
FROM TRANSACTION_TITLES
JOIN @TP TP
	ON TP.COD_TITLE = TRANSACTION_TITLES.COD_TITLE

DELETE FROM REPORT_CONSOLIDATED_TRANS_SUB
WHERE COD_TRAN IN (SELECT
			COD_TRAN
		FROM TRANSACTION_TITLES
		JOIN @TP TP
			ON TP.COD_TITLE = TRANSACTION_TITLES.COD_TITLE)

UPDATE PROCESS_BG_STATUS
SET STATUS_PROCESSED = 0
FROM PROCESS_BG_STATUS
JOIN TRANSACTION_TITLES
	ON TRANSACTION_TITLES.COD_TRAN = PROCESS_BG_STATUS.CODE
JOIN @TP TP
	ON TP.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
WHERE PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3

COMMIT TRANSACTION

SELECT
	'Success!'
SELECT
	@Success = 1 -- To exit the loop    
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION
IF ERROR_NUMBER() IN (1204, -- SqlOutOfLocks    
	1205, -- SqlDeadlockVictim    
	1222 -- SqlLockRequestTimeout    
	)
BEGIN
SET @RetryCount = @RetryCount + 1
  
    
                        WAITFOR DELAY '00:00:02'
  
    
                    END    
                ELSE    
                    BEGIN
  
    
                        THROW;
  
    
                    END
  
    
            END CATCH
  
    
        END
  
    
    
    
END;
GO


create procedure SP_LS_ASSIGN_FILE_AVAILABLE(
    @TP TP_STRING_CODE READONLY
) AS
BEGIN

SELECT
	TP.CODE AS FILE_NAME
FROM @TP TP
LEFT JOIN ASSIGN_FILE(nolock)
	ON TP.CODE = ASSIGN_FILE.FILENAME
		AND ACTIVE = 1
WHERE ASSIGN_FILE.COD_ASSIGN_FILE IS NULL
UNION
SELECT
	ASSIGN_FILE.FILENAME AS FILE_NAME
FROM ASSIGN_FILE
WHERE ASSIGN_FILE.PROCESSED = 0
AND ACTIVE = 1
END
GO


create procedure SP_REG_ASSIGN_FILE(@NAME VARCHAR(255))
AS
BEGIN
    DECLARE @COD_ASSIGN_FILE INT = NULL;
    DECLARE @COD_NOTIFY_MESSAGE INT = NULL;

SELECT
	@COD_ASSIGN_FILE = COD_ASSIGN_FILE
   ,@COD_NOTIFY_MESSAGE = COD_NOTIFY_MESSAGE
FROM ASSIGN_FILE
WHERE FILENAME = @NAME
AND ACTIVE = 1
AND PROCESSED = 0

IF @COD_ASSIGN_FILE IS NOT NULL
BEGIN
SELECT
	@COD_ASSIGN_FILE AS [COD_ASSIGN_FILE]
   ,@COD_NOTIFY_MESSAGE AS COD_NOTIFY_MESSAGE
RETURN
END

INSERT INTO ASSIGN_FILE (COD_ASSIGN_FILE_MODEL, FILENAME, PATH, COD_NOTIFY_MESSAGE)
	VALUES (2, @NAME, @NAME, NULL)

SET @COD_ASSIGN_FILE = @@IDENTITY;

SELECT
	@COD_ASSIGN_FILE AS [COD_ASSIGN_FILE];

END
GO




CREATE PROCEDURE SP_REG_INVALID_ASSIGN(@TP TP_ASSIGN_DATA READONLY,
                                       @COD_FILE int)
AS
BEGIN


UPDATE INVALID_ASSIGN
SET ACTIVE = 0
FROM INVALID_ASSIGN
JOIN @TP tp
	ON tp.TRANSACTION_ID = INVALID_ASSIGN.TRANSACTION_ID
	AND tp.TITLE_PLOT = INVALID_ASSIGN.PLOT
	AND INVALID_ASSIGN.ACTIVE = 1


INSERT INTO INVALID_ASSIGN (COD_ASSIGN_FILE, TRANSACTION_ID, PLOT, NEW_PREVISION, NEW_ANTICIPATION,
ASSIGNMENT_RATE, NET_VALUE, DESCRIPTION, ORDER_CODE, CV_CODE)
	SELECT
		@COD_FILE
	   ,TRANSACTION_ID
	   ,TITLE_PLOT
	   ,NEW_PREVISION
	   ,NEW_ANTICIPATION
	   ,ASSIGNMENT_RATE
	   ,NET_VALUE
	   ,DESCRIPTION
	   ,ORDER_CODE
	   ,CV_CODE
	FROM @TP

END;

GO

IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL
DROP VIEW VW_REPORT_FULL_CASH_FLOW
GO
CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]    
    /*----------------------------------------------------------------------------------------                                                          
    View Name: [VW_REPORT_FULL_CASH_FLOW]                                                          
    Project.......: TKPP                                                          
    ----------------------------------------------------------------------------------------                                                          
    Author                          VERSION        Date                        Description                                                          
    ---------------------------------------------------------------------------------------                                                           
    Caike Uch?a                       V1         30/03/2020            mdr afiliador-pela parcela                                           
    Caike Uch?a                       V2         30/04/2020               add colunas produto ec                                    
    Caike Uch?a                       V3         03/08/2020                   add QTY_DAYS_ANTECIP                                  
    Caike Uch?a                       V4         20/08/2020                Corre??o val liquid afiliador             
    Luiz Aquino                       v5         01/09/2020                    Plan DZero          
    Caike Uchoa                       v6         01/09/2020                   Add cod_ec_prod          
    Caike Uchoa                       V7         04/09/2020               Add correção qtd_days quando spot          
 Caike Uchoa                       v8         10/11/2020                Add Program Manager    
    ---------------------------------------------------------------------------------------*/    
AS
WITH CTE
AS
(SELECT --TOP(1000)                                                                       
		TRANSACTION_TITLES.TAX_INITIAL
	   ,TRANSACTION_TITLES.ANTICIP_PERCENT AS ANTECIP_EC
	   ,COALESCE(AFFILIATOR.[NAME], 'CELER') AS AFFILIATOR
	   ,[TRANSACTION_TYPE].CODE AS TRAN_TYPE
	   ,TRANSACTION_TITLES.PLOT
	   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME) AS TRANSACTION_DATE
	   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS MERSHANT
	   ,[TRANSACTION_TITLES].ACQ_TAX
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE
	   ,[TRANSACTION_TITLES].PREVISION_RECEIVE_DATE
	   ,[TRANSACTION_TITLES].AMOUNT
	   ,[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT
	   ,[TRANSACTION].CODE AS NSU
	   ,[TRANSACTION].BRAND AS BRAND
	   ,ACQUIRER.[NAME] AS ACQUIRER
	   ,(IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0)) AS RATE
	   ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB
	   ,COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0) AS ANTECIP_AFF
	   ,COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0) AS MDR_AFF
	   ,IIF((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		> 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, [TRANSACTION].COD_TTYPE), dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))) AS EC
	   ,0 AS '0'
	   ,(IIF((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		> 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED
		(TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, [TRANSACTION].COD_TTYPE), (dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		(
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(
		DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		) -
		(IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))))) AS EC_TARIFF
	   ,[TRANSACTION].PLOTS AS TOTAL_PLOTS
	   ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),
		TRANSACTION_TITLES.PLOT,
		COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))) AS AFF_DISCOUNT
	   ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		(TRANSACTION_TITLES.AMOUNT),
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
		TRANSACTION_TITLES.TAX_INITIAL),
		TRANSACTION_TITLES.PLOT,
		COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,
		TRANSACTION_TITLES.ANTICIP_PERCENT)
		, (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
		)) AS AFF_DISCOUNT_TARIFF
	   ,(
		dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		(
		TRANSACTION_TITLES.AMOUNT,
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
		TRANSACTION_TITLES.TAX_INITIAL) +
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		TRANSACTION_TITLES.PLOT,
		[TRANSACTION_TITLES_COST].ANTICIP_PERCENT +
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		)
		-
		dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL +
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT +
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0)),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))
		) AS AFF
	   ,((
		dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		((TRANSACTION_TITLES.AMOUNT),
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL)
		+
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		TRANSACTION_TITLES.PLOT,
		COALESCE(
		[TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT)
		+
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
		))
		-
		dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		(TRANSACTION_TITLES.AMOUNT),
		TRANSACTION_TITLES.TAX_INITIAL
		+
		(IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT
		+
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
		, 0), 0))
		,
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))
		)
		+ (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))
		-
		(IIF(TRANSACTION_TITLES.PLOT = 1, ISNULL([TRANSACTION_TITLES_COST].RATE_PLAN, 0), 0))
		)
		AS AFF_TARIFF
	   ,[TRANSACTION].COD_ASS_TR_COMP
	   ,TRANSACTION_TITLES.COD_TITLE
	   ,CE_DESTINY.COD_EC
	   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	   ,BRANCH_EC.COD_BRANCH
	   ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
	   ,[TRANSACTION].PAN
	   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS 'CPF_CNPJ_ORIGINATOR'
	   ,CE_DESTINY.[NAME] AS 'EC_NAME_DESTINY'
	   ,CE_DESTINY.CPF_CNPJ AS 'CPF_CNPJ_DESTINY'
	   ,AFFILIATOR.CPF_CNPJ AS 'CPF_AFF'
	   ,(SELECT
				EQUIPMENT.SERIAL
			FROM ASS_DEPTO_EQUIP
			INNER JOIN EQUIPMENT
				ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
			WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)
		AS SERIAL
	   ,[TRANSACTION_DATA_EXT].[VALUE] AS 'EXTERNAL_NSU'
	   ,[TRANSACTION].CODE
	   ,[TRANSACTION].COD_TRAN
	   ,[COMPANY].COD_COMP
	   ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN AS REP_COD_TRAN
	   ,[TRANSACTION].COD_SITUATION
	   ,dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL +
		(IIF([TRANSACTION].COD_TTYPE = 2,
		ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
		, 0), 0))
		,
		[TRANSACTION_TITLES].AMOUNT) AS LIQUID_MDR_EC
	   ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS
		(
		COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT +
		(IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =
				ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
			AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
		, 0), 0)), 0),
		[TRANSACTION_TITLES].PLOT,
		dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		) AS ANTECIP_DISCOUNT_EC
	   ,IIF([TRANSACTION].PLOTS = 1, dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE] +
		IIF([TRANSACTION].COD_TTYPE = 2,
		TRANSACTION_TITLES_COST.TAX_PLANDZERO,
		0), TRANSACTION_TITLES.AMOUNT),
		dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE],
		TRANSACTION_TITLES.AMOUNT)) AS LIQUID_MDR_AFF
	   ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS
		(
		COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0) +
		IIF([TRANSACTION].COD_TTYPE = 1, TRANSACTION_TITLES_COST.TAX_PLANDZERO, 0),
		[TRANSACTION_TITLES].PLOT,
		dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,
		[TRANSACTION_TITLES_COST].[PERCENTAGE]),
		(IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,
		TRANSACTION_TITLES.PREVISION_PAY_DATE,
		TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP))
		) AS ANTECIP_DISCOUNT_AFF
	   ,IIF((SELECT
				COUNT(*)
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND TRANSACTION_SERVICES.COD_ITEM_SERVICE IN (4, 19))
		> 0, 1,
		0) AS SPLIT
	   ,EC_TRAN.COD_EC AS COD_EC_TRANS
	   ,EC_TRAN.NAME AS TRANS_EC_NAME
	   ,EC_TRAN.CPF_CNPJ AS TRANS_EC_CPF_CNPJ
	   ,[TRANSACTION_TITLES].[IS_ASSIGN] ASSIGNED
	   ,[ASSIGN_FILE_TITLE].RETAINED_AMOUNT
	   ,[ASSIGN_FILE_TITLE].[ORIGINAL_DATE]
	   ,CAST([TRANSACTION_TITLES].CREATED_AT AS DATE) TRAN_TITTLE_DATE
	   ,CAST([TRANSACTION_TITLES].CREATED_AT AS TIME) TRAN_TITTLE_TIME
	   ,(SELECT TOP 1
				[NAME]
			FROM ACQUIRER(NOLOCK)
			JOIN ASSIGN_FILE_ACQUIRE(NOLOCK) fType
				ON fType.COD_AC = ACQUIRER.COD_AC
				AND fType.COD_ASSIGN_FILE_MODEL = assignModel.COD_ASSIGN_FILE_MODEL)
		[ASSIGNEE]
	   ,(SELECT
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[TRANSACTION].CREDITOR_DOCUMENT
	   ,(SELECT
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')
		AS ORDER_CODE
	   ,TRANSACTION_TITLES.COD_SITUATION [COD_SITUATION_TITLE]
	   ,[EQUIPMENT_MODEL].CODIGO AS MODEL_POS
	   ,[SEGMENTS].[NAME] AS SEGMENT_EC
	   ,[State].UF AS STATE_EC
	   ,[CITY].[NAME] AS CITY_EC
	   ,[NEIGHBORHOOD].[NAME] AS NEIGHBORHOOD_EC
	   ,[ADDRESS_BRANCH].COD_ADDRESS
	   ,SOURCE_TRANSACTION.DESCRIPTION AS TYPE_TRAN
	   ,EC_PROD.[NAME] AS [EC_PROD]
	   ,EC_PROD.CPF_CNPJ AS [EC_PROD_CPF_CNPJ]
	   ,TRAN_PROD.[NAME] AS [NAME_PROD]
	   ,SPLIT_PROD.[PERCENTAGE] AS [PERCENT_PARTICIP_SPLIT]
	   ,[TRANSACTION_TITLES_COST].RATE_PLAN
	   ,IIF(TRANSACTION_TITLES.IS_SPOT = 1,
		DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),
		TRANSACTION_TITLES.QTY_DAYS_ANTECIP) AS QTY_DAYS_ANTECIP
	   ,IIF([TRANSACTION_TITLES].TAX_PLANDZERO IS NULL, 0, 1) AS IS_PLANDZERO
	   ,COALESCE([TRANSACTION_TITLES].TAX_PLANDZERO, 0) TAX_PLANDZERO
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION].COD_EC
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS TAX_PLANDZEROAFF
	   ,USER_REPRESENTANTE.IDENTIFICATION AS SALES_REPRESENTANTE
	   ,USER_REPRESENTANTE.CPF_CNPJ AS CPF_CNPJ_REPRESENTANTE
	   ,USER_REPRESENTANTE.EMAIL AS EMAIL_REPRESENTANTE
	   ,EC_PROD.COD_EC AS [COD_EC_PROD]
	   ,IIF((SELECT
				COUNT(*)
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			JOIN ITEMS_SERVICES_AVAILABLE ISA
				ON ISA.COD_ITEM_SERVICE = TRANSACTION_SERVICES.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND ISA.NAME = 'RECURRING')
		> 0, 1,
		0) AS IS_RECURRING
	   ,AFFILIATOR.PROGRAM_MANAGER
	   ,ASSIGN_D.NEW_PREVISION ASSIGN_PREVISION
	   ,ASSIGN_D.NEW_ANTICIPATION ASSIGN_ANTICIPATION
	   ,ASSIGN_D.ASSIGNMENT_RATE ASSIGN_RATE
	   ,ASSIGN_D.NET_VALUE ASSIGN_NET_VALUE
	FROM [TRANSACTION_TITLES]
	WITH (NOLOCK)
	INNER JOIN [TRANSACTION]
	WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
	LEFT JOIN [TRANSACTION_TITLES_COST]
	WITH (NOLOCK)
		ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE
	INNER JOIN [TRANSACTION_TYPE]
	WITH (NOLOCK)
		ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE
	LEFT JOIN AFFILIATOR
	WITH (NOLOCK)
		ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
	INNER JOIN ASS_DEPTO_EQUIP
	WITH (NOLOCK)
		ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
	INNER JOIN DEPARTMENTS_BRANCH
	WITH (NOLOCK)
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	INNER JOIN DEPARTMENTS
	WITH (NOLOCK)
		ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
	INNER JOIN BRANCH_EC
	WITH (NOLOCK)
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	INNER JOIN COMMERCIAL_ESTABLISHMENT
	WITH (NOLOCK)
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY
	WITH (NOLOCK)
		ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC
	INNER JOIN PRODUCTS_ACQUIRER
	WITH (NOLOCK)
		ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	INNER JOIN ACQUIRER
	WITH (NOLOCK)
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	LEFT JOIN [TRANSACTION_DATA_EXT]
	WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN
	INNER JOIN [dbo].[PROCESS_BG_STATUS]
	WITH (NOLOCK)
		ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)
	LEFT JOIN COMPANY
	WITH (NOLOCK)
		ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
	LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB]
	WITH (NOLOCK)
		ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)
	LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN
	WITH (NOLOCK)
		ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC
	LEFT JOIN [ASSIGN_FILE_TITLE](NOLOCK)
		ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE
		AND [ASSIGN_FILE_TITLE].ACTIVE = 1
	LEFT JOIN ASSIGN_FILE(NOLOCK)
		ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE
	LEFT JOIN ASSIGN_DATA(NOLOCK) ASSIGN_D
		ON ASSIGN_D.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
		AND ASSIGN_D.ACTIVE = 1
	LEFT JOIN ASSIGN_FILE(NOLOCK) ASSIGN_F
		ON ASSIGN_FILE.COD_ASSIGN_FILE = ASSIGN_D.COD_ASSIGN_FILE
	LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)
		ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_F.COD_ASSIGN_FILE_MODEL
	INNER JOIN [EQUIPMENT]
	WITH (NOLOCK)
		ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
	INNER JOIN [EQUIPMENT_MODEL]
	WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL
	INNER JOIN [SEGMENTS]
	WITH (NOLOCK)
		ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG
	INNER JOIN [ADDRESS_BRANCH]
	WITH (NOLOCK)
		ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH
		AND [ADDRESS_BRANCH].ACTIVE = 1
	INNER JOIN [NEIGHBORHOOD]
	WITH (NOLOCK)
		ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH
	INNER JOIN [CITY]
	WITH (NOLOCK)
		ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY
	INNER JOIN [State]
	WITH (NOLOCK)
		ON [State].COD_STATE = [CITY].COD_STATE
	INNER JOIN SOURCE_TRANSACTION
	WITH (NOLOCK)
		ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD]
	WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
		AND [TRAN_PROD].ACTIVE = 1
	LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD
	WITH (NOLOCK)
		ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD
	WITH (NOLOCK)
		ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN SALES_REPRESENTATIVE
		ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
	LEFT JOIN USERS USER_REPRESENTANTE
		ON USER_REPRESENTANTE.COD_USER = SALES_REPRESENTATIVE.COD_USER
	WHERE [TRANSACTION].COD_SITUATION = 3
	AND [TRANSACTION_TITLES].COD_SITUATION != 26
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME]
	, '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0
	AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3
	AND DATEADD(MINUTE
	, -5
	, GETDATE())
	> [TRANSACTION].CREATED_AT
	AND DATEADD(MINUTE
	, -5
	, GETDATE())
	> [TRANSACTION_TITLES].CREATED_AT
	--AND DATEPART(YEAR, [TRANSACTION].CREATED_AT) = DATEPART(YEAR, GETDATE())  
	AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)
SELECT
	AFFILIATOR
   ,MERSHANT
   ,SERIAL
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE
   ,CAST(TRANSACTION_DATE AS TIME) AS TRANSACTION_TIME
   ,NSU
   ,EXTERNAL_NSU
   ,TRAN_TYPE
   ,TRANSACTION_AMOUNT
   ,TOTAL_PLOTS AS QUOTA_TOTAL
   ,AMOUNT AS 'QUOTA_AMOUNT'
   ,PLOT AS QUOTA
   ,ACQUIRER
   ,ACQ_TAX AS 'MDR_ACQ'
   ,BRAND
   ,CTE.TAX_INITIAL AS 'MDR_EC'
   ,ANTECIP_EC AS 'ANTICIP_EC'
   ,MDR_AFF AS 'MDR_AFF'
   ,ANTECIP_AFF AS 'ANTICIP_AFF'
   ,LIQUID_SUB AS 'TO_RECEIVE_ACQ'
   ,CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'
   ,(LIQUID_SUB - AFF_DISCOUNT) AS 'NET_WITHOUT_FEE_SUB'
   ,RATE_PLAN AS 'FEE_AFFILIATOR'
   ,(LIQUID_SUB - AFF_DISCOUNT_TARIFF) AS 'NET_SUB'
   ,AFF AS 'NET_WITHOUT_FEE_AFF'
   ,AFF_TARIFF AS 'NET_AFF'
   ,EC AS 'MERCHANT_WITHOUT_FEE'
   ,CTE.RATE AS 'FEE_MERCHANT'
   ,EC_TARIFF AS 'MERCHANT_NET'
   ,CAST(PREVISION_PAY_DATE AS DATE) AS 'PREDICTION_PAY_DATE'
   ,IIF(TRAN_TYPE = 'CREDITO' AND
	(CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)), 1, 0) AS ANTECIPATED
   ,COD_EC
   ,CTE.COD_AFFILIATOR
   ,COD_BRANCH
   ,CTE.COD_DEPTO_BRANCH
   ,PAN
   ,CPF_CNPJ_ORIGINATOR
   ,EC_NAME_DESTINY
   ,CPF_CNPJ_DESTINY
   ,CPF_AFF
   ,CTE.CODE
   ,CTE.COD_TRAN
   ,CTE.COD_COMP
   ,CTE.REP_COD_TRAN
   ,CTE.COD_SITUATION
   ,CTE.LIQUID_MDR_EC
   ,CTE.ANTECIP_DISCOUNT_EC
   ,CTE.LIQUID_MDR_AFF
   ,CTE.ANTECIP_DISCOUNT_AFF
   ,CTE.SPLIT
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.[ASSIGNED]
   ,CTE.RETAINED_AMOUNT
   ,CTE.[ORIGINAL_DATE]
   ,CTE.[ASSIGNEE]
   ,CTE.TRAN_TITTLE_DATE
   ,CTE.TRAN_TITTLE_TIME
   ,CTE.AUTH_CODE
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.ORDER_CODE
   ,CTE.COD_TITLE
   ,CTE.[COD_SITUATION_TITLE]
   ,CTE.MODEL_POS
   ,CTE.SEGMENT_EC
   ,CTE.STATE_EC
   ,CTE.CITY_EC
   ,CTE.NEIGHBORHOOD_EC
   ,CTE.COD_ADDRESS
   ,CTE.TYPE_TRAN
   ,CTE.NAME_PROD
   ,CTE.EC_PROD
   ,CTE.EC_PROD_CPF_CNPJ
   ,CTE.PERCENT_PARTICIP_SPLIT
   ,CTE.QTY_DAYS_ANTECIP
   ,CTE.IS_PLANDZERO
   ,CTE.TAX_PLANDZERO
   ,CTE.EC_TARIFF
   ,CTE.AFF_TARIFF
   ,AFF
   ,CTE.TAX_PLANDZEROAFF
   ,CTE.SALES_REPRESENTANTE
   ,CTE.CPF_CNPJ_REPRESENTANTE
   ,CTE.EMAIL_REPRESENTANTE
   ,CTE.COD_EC_PROD
   ,CTE.IS_RECURRING
   ,CTE.PROGRAM_MANAGER
   ,CTE.ASSIGN_PREVISION
   ,CTE.ASSIGN_ANTICIPATION
   ,CTE.ASSIGN_RATE
   ,CTE.ASSIGN_NET_VALUE
FROM CTE
GO


IF OBJECT_ID('SP_REG_REPORT_CONSOLIDATED_TRANS_SUB') IS NOT NULL DROP PROCEDURE SP_REG_REPORT_CONSOLIDATED_TRANS_SUB;
GO
CREATE PROCEDURE [dbo].[SP_REG_REPORT_CONSOLIDATED_TRANS_SUB]
    WITH RECOMPILE
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author                          VERSION        Date             Description
------------------------------------------------------------------------------------------
    Fernando Henrique F. de O       V1              28/12/2018      Creation
    Fernando Henrique F. de O       V2              07/02/2019      Changed
    Luiz Aquino                     V3              22/02/2019      Remove Incomplete Installments
    Lucas Aguiar                    V4              22-04-2019      add originador e destino
    Caike Ucha                     V5              16/08/2019      add columns AUTH_CODE e CREDITOR_DOCUMENT
    Caike Ucha                     V6              11/09/2019      add column ORDER_CODE
    Marcus Gall                     V7              27/11/2019      Add Model_POS, Segment, Location_EC
    Ana Paula Liick                 V8              31/01/2020      Add Origem_Trans
    Caike Ucha                      V9              30/04/2020      add produto ec
 Caike Uchoa                     V10             03/08/2020      add QTY_DAYS_ANTECIP
    Caike Uchoa                     V11             06/08/2020      Add AMOUNT_NEW
    Caike Uchoa                     V12             27/08/2020      add representante
    Luiz Aquino                    V10            02/07/2020      PlanDZero (ET-895)
    Caike Uchoa                     v12             01/09/2020      Add cod_ec_prod
 	Caike Uchoa                      v8            10/11/2020        Add Program Manager
------------------------------------------------------------------------------------------*/
AS
DECLARE @COUNT INT = 0;

BEGIN

---------------------------------------------
--------------RECORDS INSERT-----------------
---------------------------------------------
SELECT
	--TOP (1000)
	[VW_REPORT_FULL_CASH_FLOW].COD_TRAN
   ,[VW_REPORT_FULL_CASH_FLOW].AFFILIATOR
   ,[VW_REPORT_FULL_CASH_FLOW].MERSHANT
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_TIME
   ,[VW_REPORT_FULL_CASH_FLOW].NSU
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_TOTAL
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TYPE
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_AMOUNT AMOUNT
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_AMOUNT
   ,[VW_REPORT_FULL_CASH_FLOW].ACQUIRER
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_ACQ
   ,[VW_REPORT_FULL_CASH_FLOW].BRAND
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_EC
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_EC
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_RATE
   ,[VW_REPORT_FULL_CASH_FLOW].ANTECIPATED
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_PAY_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].TO_RECEIVE_ACQ
   ,[VW_REPORT_FULL_CASH_FLOW].NET_AFF
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_EC
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF AS NET_WITHOUT_FEE_AFF_RATE
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_ACQ
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_RECEIVE_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_MERCHANT AS RATE
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_AFF, 0) AS ANTECIP_DISCOUNT_AFF
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_EC, 0) AS ANTECIP_DISCOUNT_EC
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].MDR_CURRENT_ACQ, 0) AS MDR_CURRENT_ACQ
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_AFF, 0) AS LIQUID_MDR_AFF
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_AFF, 0) AS RATE_CURRENT_AFF
	--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_CURRENT_EC
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_EC, 0) AS LIQUID_MDR_EC
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_WITHOUT_FEE
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_AFFILIATOR
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_SUB
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_NET
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_ORIGINATOR AS 'CPF_EC'
   ,[VW_REPORT_FULL_CASH_FLOW].EC_NAME_DESTINY AS 'ECNAME_DESTINY'
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_DESTINY AS 'DESTINY'
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_AFF AS CPF_AFF
   ,[VW_REPORT_FULL_CASH_FLOW].SERIAL
   ,[VW_REPORT_FULL_CASH_FLOW].EXTERNAL_NSU
   ,[VW_REPORT_FULL_CASH_FLOW].PAN
   ,[VW_REPORT_FULL_CASH_FLOW].CODE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_COMP
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC
   ,[VW_REPORT_FULL_CASH_FLOW].COD_BRANCH
   ,[VW_REPORT_FULL_CASH_FLOW].COD_DEPTO_BRANCH
   ,[VW_REPORT_FULL_CASH_FLOW].COD_AFFILIATOR
   ,[VW_REPORT_FULL_CASH_FLOW].SPLIT
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_TRANS
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_NAME
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_CPF_CNPJ
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNED]
   ,[VW_REPORT_FULL_CASH_FLOW].[RETAINED_AMOUNT]
   ,[VW_REPORT_FULL_CASH_FLOW].[ORIGINAL_DATE]
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNEE]
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_TIME
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_DATE
   ,[VW_REPORT_FULL_CASH_FLOW].AUTH_CODE
   ,[VW_REPORT_FULL_CASH_FLOW].CREDITOR_DOCUMENT
   ,[VW_REPORT_FULL_CASH_FLOW].ORDER_CODE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_TITLE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION_TITLE
   ,[VW_REPORT_FULL_CASH_FLOW].MODEL_POS
   ,[VW_REPORT_FULL_CASH_FLOW].SEGMENT_EC
   ,[VW_REPORT_FULL_CASH_FLOW].STATE_EC
   ,[VW_REPORT_FULL_CASH_FLOW].CITY_EC
   ,[VW_REPORT_FULL_CASH_FLOW].NEIGHBORHOOD_EC
   ,[VW_REPORT_FULL_CASH_FLOW].COD_ADDRESS
   ,[VW_REPORT_FULL_CASH_FLOW].TYPE_TRAN
   ,[VW_REPORT_FULL_CASH_FLOW].NAME_PROD
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD_CPF_CNPJ
   ,[VW_REPORT_FULL_CASH_FLOW].PERCENT_PARTICIP_SPLIT
   ,[VW_REPORT_FULL_CASH_FLOW].IS_PLANDZERO
   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZERO
   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZEROAFF
   ,dbo.VW_REPORT_FULL_CASH_FLOW.QTY_DAYS_ANTECIP
   ,[VW_REPORT_FULL_CASH_FLOW].SALES_REPRESENTANTE
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_REPRESENTANTE
   ,[VW_REPORT_FULL_CASH_FLOW].EMAIL_REPRESENTANTE
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_PROD
   ,[VW_REPORT_FULL_CASH_FLOW].IS_RECURRING
   ,[VW_REPORT_FULL_CASH_FLOW].PROGRAM_MANAGER
   ,VW_REPORT_FULL_CASH_FLOW.ASSIGN_PREVISION
   ,VW_REPORT_FULL_CASH_FLOW.ASSIGN_ANTICIPATION
   ,VW_REPORT_FULL_CASH_FLOW.ASSIGN_RATE
   ,VW_REPORT_FULL_CASH_FLOW.ASSIGN_NET_VALUE INTO #TB_REPORT_FULL_CASH_FLOW_INSERT
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW]
ORDER BY COD_TRAN, QUOTA
OFFSET 0 ROWS FETCH FIRST 500 ROWS ONLY;

WITH TRANINFO
AS
(SELECT
		COUNT(COD_TRAN) AVAILABLE_INSTALLMENTS
	   ,COD_TRAN
	   ,QUOTA_TOTAL
	FROM #TB_REPORT_FULL_CASH_FLOW_INSERT installments
	GROUP BY COD_TRAN
			,QUOTA_TOTAL)
DELETE INSTALLMENT
	FROM #TB_REPORT_FULL_CASH_FLOW_INSERT INSTALLMENT
	JOIN TRANINFO
		ON TRANINFO.COD_TRAN = INSTALLMENT.COD_TRAN
WHERE TRANINFO.QUOTA_TOTAL > TRANINFO.AVAILABLE_INSTALLMENTS

SELECT
	@COUNT = COUNT(*)
FROM #TB_REPORT_FULL_CASH_FLOW_INSERT;

IF @COUNT > 0
BEGIN
INSERT INTO [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([COD_TRAN],
[AFFILIATOR],
[COMMERCIALESTABLISHMENT],
[TRANSACTION_DATE],
[TRANSACTION_TIME],
[NSU],
[QUOTA_TOTAL],
[TRANSACTION_TYPE],
[PLOT],
[AMOUNT],
[TRANSACTION_AMOUNT],
[ACQUIRER],
[MDR_ACQUIRER],
[BRAND],
[MDR_EC],
[ANTECIP_PERCENT],
[ANTECIP_AFFILIATOR],
[MDR_AFFILIATOR],
[LIQUID_VALUE_SUB],
[ANTECIPATED],
[PREVISION_PAY_DATE],
[TO_RECEIVE_ACQ],
[LIQUID_VALUE_AFFILIATOR],
[LIQUID_AFF_RATE],
[LIQUID_SUB_RATE],
[PREVISION_RECEIVE_DATE],
[RATE],
[ANTECIP_CURRENT_AFF],
[ANTECIP_CURRENT_EC],
[MDR_CURRENT_AFF],
[MDR_CURRENT_EC],
[LIQUID_VALUE_EC],
[FEE_AFFILIATOR],
[NET_SUB_AQUIRER],
[NET_WITHOUT_FEE_SUB],
[NET_WITHOUT_FEE_AFF], [MERCHANT_NET],
[CPF_EC],
[DESTINY],
[CPF_AFF],
[SERIAL],
[EXTERNALNSU],
[PAN],
[CODE],
[COD_COMP],
[COD_EC],
[COD_BRANCH],
[COD_DEPTO_BRANCH],
[COD_AFFILIATOR],
[COD_SITUATION],
[SPLIT],
[COD_EC_TRANS],
[TRANS_EC_NAME],
[TRANS_EC_CPF_CNPJ]
, [ASSIGNED]
, [RETAINED_AMOUNT]
, [ORIGINAL_DATE]
, [ASSIGNEE]
, [MODIFY_DATE]
, EC_NAME_DESTINY
, TRANSACTION_TITTLE_DATE
, TRANSACTION_TITTLE_TIME
, AUTH_CODE
, CREDITOR_DOCUMENT
, ORDER_CODE
, COD_TITLE
, COD_SITUATION_TITLE
, MODEL_POS
, SEGMENT_EC
, STATE_EC
, CITY_EC
, NEIGHBORHOOD_EC
, COD_ADDRESS
, TYPE_TRAN
, NAME_PROD
, EC_PROD
, EC_PROD_CPF_CNPJ
, PERCENT_PARTICIP_SPLIT
, IS_PLANDZERO
, TAX_PLANDZERO
, QTY_DAYS_ANTECIP
, TAX_PLANDZERO_AFF
, SALES_REPRESENTANTE
, CPF_CNPJ_REPRESENTANTE
, EMAIL_REPRESENTANTE
, COD_EC_PROD
, IS_RECURRING
, PROGRAM_MANAGER
, ASSIGN_PREVISION
, ASSIGN_ANTICIPATION
, ASSIGN_RATE
, ASSIGN_NET_VALUE)
	(SELECT
		TEMP.[COD_TRAN]
	   ,TEMP.[AFFILIATOR]
	   ,TEMP.[MERSHANT]
	   ,TEMP.[TRANSACTION_DATE]
	   ,TEMP.[TRANSACTION_TIME]
	   ,TEMP.[NSU]
	   ,TEMP.[QUOTA_TOTAL]
	   ,TEMP.[TRAN_TYPE]
	   ,TEMP.[QUOTA]
	   ,TEMP.[AMOUNT]
	   ,TEMP.[TRANSACTION_AMOUNT]
	   ,TEMP.[ACQUIRER]
	   ,TEMP.[MDR_ACQ]
	   ,TEMP.[BRAND]
	   ,TEMP.[MDR_EC]
	   ,TEMP.[ANTICIP_EC]
	   ,TEMP.[ANTICIP_AFF]
	   ,TEMP.[MDR_AFF]
	   ,TEMP.[NET_SUB_RATE]
	   ,TEMP.[ANTECIPATED]
	   ,TEMP.[PREDICTION_PAY_DATE]
	   ,TEMP.[TO_RECEIVE_ACQ]
	   ,TEMP.[NET_AFF]
	   ,TEMP.[NET_WITHOUT_FEE_AFF_RATE]
	   ,TEMP.[NET_SUB_ACQ]
	   ,TEMP.[PREDICTION_RECEIVE_DATE]
	   ,TEMP.[RATE]
	   ,TEMP.[ANTECIP_DISCOUNT_AFF]
	   ,TEMP.[ANTECIP_DISCOUNT_EC]
	   ,TEMP.[LIQUID_MDR_AFF]
	   ,TEMP.[LIQUID_MDR_EC]
	   ,TEMP.[MERCHANT_WITHOUT_FEE]
	   ,TEMP.[FEE_AFFILIATOR]
	   ,TEMP.[NET_SUB]
	   ,TEMP.[NET_WITHOUT_FEE_SUB]
	   ,TEMP.[NET_WITHOUT_FEE_AFF]
	   ,TEMP.[MERCHANT_NET]
	   ,TEMP.[CPF_AFF]
	   ,TEMP.[DESTINY]
	   ,TEMP.[CPF_EC]
	   ,TEMP.[SERIAL]
	   ,TEMP.[EXTERNAL_NSU]
	   ,TEMP.[PAN]
	   ,TEMP.[CODE]
	   ,TEMP.[COD_COMP]
	   ,TEMP.[COD_EC]
	   ,TEMP.[COD_BRANCH]
	   ,TEMP.[COD_DEPTO_BRANCH]
	   ,TEMP.[COD_AFFILIATOR]
	   ,TEMP.[COD_SITUATION]
	   ,TEMP.[SPLIT]
	   ,TEMP.[COD_EC_TRANS]
	   ,TEMP.[TRANS_EC_NAME]
	   ,TEMP.[TRANS_EC_CPF_CNPJ]
	   ,TEMP.[ASSIGNED]
	   ,TEMP.[RETAINED_AMOUNT]
	   ,TEMP.[ORIGINAL_DATE]
	   ,TEMP.[ASSIGNEE]
	   ,GETDATE()
	   ,TEMP.ECNAME_DESTINY
	   ,TRAN_TITTLE_DATE
	   ,TRAN_TITTLE_TIME
	   ,TEMP.AUTH_CODE
	   ,TEMP.CREDITOR_DOCUMENT
	   ,TEMP.ORDER_CODE
	   ,TEMP.COD_TITLE
	   ,TEMP.COD_SITUATION_TITLE
	   ,TEMP.MODEL_POS
	   ,TEMP.SEGMENT_EC
	   ,TEMP.STATE_EC
	   ,TEMP.CITY_EC
	   ,TEMP.NEIGHBORHOOD_EC
	   ,TEMP.COD_ADDRESS
	   ,TEMP.TYPE_TRAN
	   ,TEMP.NAME_PROD
	   ,TEMP.EC_PROD
	   ,TEMP.EC_PROD_CPF_CNPJ
	   ,TEMP.PERCENT_PARTICIP_SPLIT
	   ,TEMP.IS_PLANDZERO
	   ,TEMP.TAX_PLANDZERO
	   ,TEMP.QTY_DAYS_ANTECIP
	   ,TEMP.TAX_PLANDZEROAFF
	   ,TEMP.SALES_REPRESENTANTE
	   ,TEMP.CPF_CNPJ_REPRESENTANTE
	   ,TEMP.EMAIL_REPRESENTANTE
	   ,TEMP.COD_EC_PROD
	   ,TEMP.IS_RECURRING
	   ,TEMP.PROGRAM_MANAGER
	   ,TEMP.ASSIGN_PREVISION
	   ,TEMP.ASSIGN_ANTICIPATION
	   ,TEMP.ASSIGN_RATE
	   ,TEMP.ASSIGN_NET_VALUE
	FROM #TB_REPORT_FULL_CASH_FLOW_INSERT TEMP
	)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [REPORT_CONSOLIDATED_TRANS_SUB] ', 1;

UPDATE [PROCESS_BG_STATUS]
SET STATUS_PROCESSED = 1
   ,MODIFY_DATE = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_INSERT
	ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_INSERT.COD_TRAN)
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
END;

---------------------------------------------
--------------RECORDS UPDATE-----------------
---------------------------------------------
SELECT
	[VW_REPORT_FULL_CASH_FLOW_UP].COD_TRAN
   ,[VW_REPORT_FULL_CASH_FLOW_UP].COD_SITUATION
   ,[VW_REPORT_FULL_CASH_FLOW_UP].TRANSACTION_AMOUNT INTO #TB_REPORT_FULL_CASH_FLOW_UPDATE
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW_UP]


SELECT
	@COUNT = COUNT(*)
FROM #TB_REPORT_FULL_CASH_FLOW_UPDATE;

IF @COUNT > 0
BEGIN
UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]
SET [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_SITUATION
   ,[REPORT_CONSOLIDATED_TRANS_SUB].MODIFY_DATE = GETDATE()
   ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT = #TB_REPORT_FULL_CASH_FLOW_UPDATE.TRANSACTION_AMOUNT
FROM [REPORT_CONSOLIDATED_TRANS_SUB]
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE
	ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN =
	#TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN);

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]', 1;

UPDATE [PROCESS_BG_STATUS]
SET STATUS_PROCESSED = 1
   ,MODIFY_DATE = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE
	ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN)
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
END;
END;
GO

IF OBJECT_ID('SP_REPORT_CONSOLIDATED_TRANSACTION_SUB') IS NOT NULL DROP PROCEDURE SP_REPORT_CONSOLIDATED_TRANSACTION_SUB;
GO
CREATE PROCEDURE [dbo].[SP_REPORT_CONSOLIDATED_TRANSACTION_SUB]

/**************************************************************************************************************                  
    Project.......: TKPP                                      
 ------------------------------------------------------------------------------------------                                      
     Author                          VERSION        Date                            Description                                      
 ------------------------------------------------------------------------------------------                                      
    Fernando Henrique F. de O       V1         28/12/2018                          Creation                                    
    Fernando Henrique F. de O       V2         07/02/2019                          Changed                                        
    Elir Ribeiro                    V3         29/07/2019                          Changed date                              
    Caike Ucha Almeida             V4         16/08/2019                        Inserting columns                             
    Caike Ucha Almeida             V5         11/09/2019                        Inserting column                            
    Marcus Gall                     V6         27/11/2019               Add Model_POS, Segment, Location_EC                    
    Ana Paula Liick                 V8         31/01/2020                       Add Origem_Trans                    
    Caike Ucha                     V9         30/04/2020                       add produto ec                
    Luiz Aquino                     V10        02/07/2020                   PlanoDZero (ET-895)       
    Caike Uch�a                     V10        03/08/2020                       add QTY_DAYS_ANTECIP        
    Caike Uch�a                     V11        07/08/2020                       ISNULL na RATE_PLAN      
    Caike Uchoa                     v12        01/09/2020                       Add cod_ec_prod    
    Caike Uchoa                     v8         10/11/2020                  Add Program Manager  
**************************************************************************************************************/ (@CODCOMP VARCHAR(10),
                                                                                                                 @INITIAL_DATE DATETIME,
                                                                                                                 @FINAL_DATE DATETIME,
                                                                                                                 @EC VARCHAR(10),
                                                                                                                 @BRANCH VARCHAR(10),
                                                                                                                 @DEPART VARCHAR(10),
                                                                                                                 @TERMINAL VARCHAR(100),
                                                                                                                 @STATE VARCHAR(100),
                                                                                                                 @CITY VARCHAR(100),
                                                                                                                 @TYPE_TRAN VARCHAR(10),
                                                                                                                 @SITUATION VARCHAR(10),
                                                                                                                 @NSU VARCHAR(100) = NULL,
                                                                                                                 @NSU_EXT VARCHAR(100) = NULL,
                                                                                                                 @BRAND VARCHAR(50) = NULL,
                                                                                                                 @PAN VARCHAR(50) = NULL,
                                                                                                                 @CODAFF INT = NULL,
                                                                                                                 @SPLIT INT = NULL,
                                                                                                                 @CODACQUIRER INT = NULL,
                                                                                                                 @ISPlanDZero INT = NULL,
                                                                                                                 @COD_EC_PROD INT = NULL)
AS
BEGIN


    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';


    DECLARE @AWAITINGSPLIT INT = NULL;
SET NOCOUNT ON;
SET ARITHABORT ON;

SELECT TOP 1
	@AWAITINGSPLIT = [COD_SITUATION]
FROM [SITUATION]
WHERE [NAME] = 'WAITING FOR SPLIT OF FINANCE SCHEDULE';

SET @QUERY_BASIS = 'SELECT                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].AFFILIATOR AS AFFILIATOR,                         
        [REPORT_CONSOLIDATED_TRANS_SUB].COMMERCIALESTABLISHMENT AS MERCHANT,                                              
        [REPORT_CONSOLIDATED_TRANS_SUB].SERIAL  AS SERIAL,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE  AS TRANSACTION_DATE,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TIME  AS TRANSACTION_TIME,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].NSU  AS NSU ,                      
        [REPORT_CONSOLIDATED_TRANS_SUB].EXTERNALNSU  AS EXTERNAL_NSU,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TYPE  AS TRAN_TYPE,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT  AS TRANSACTION_AMOUNT,                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].QUOTA_TOTAL  AS QUOTA_TOTAL,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].AMOUNT  AS  AMOUNT,             
        [REPORT_CONSOLIDATED_TRANS_SUB].PLOT  AS QUOTA,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].ACQUIRER  AS ACQUIRER,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_ACQUIRER  AS MDR_ACQ,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].BRAND  AS BRAND,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_EC  AS MDR_EC,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_PERCENT  AS ANTICIP_EC,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_AFFILIATOR  AS MDR_AFF,                       
      [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_AFFILIATOR  AS ANTICIP_AFF,                      
        [REPORT_CONSOLIDATED_TRANS_SUB].TO_RECEIVE_ACQ  AS TO_RECEIVE_ACQ,                                
        [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_RECEIVE_DATE  AS PREDICTION_RECEIVE_DATE,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_SUB  AS NET_WITHOUT_FEE_SUB,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].FEE_AFFILIATOR  AS FEE_AFFILIATOR,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_SUB_AQUIRER  AS NET_SUB,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_AFF  AS NET_WITHOUT_FEE_AFF,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_AFFILIATOR  AS NET_AFF,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_EC  AS MERCHANT_WITHOUT_FEE,                      
        [REPORT_CONSOLIDATED_TRANS_SUB].MERCHANT_NET  AS MERCHANT_NET,                       
        IIF([REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] is not null, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ,[REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE )  AS PREDICTION_PAY_DATE,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIPATED  AS ANTECIPATED,                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].RATE,                                    
        --[REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_ACQ  AS MDR_CURRENT_ACQ,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_EC  AS MDR_CURRENT_EC,                      
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_EC  AS ANTICIP_CURRENT_EC,                                            
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_EC  AS RATE_CURRENT_EC,                                          
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_AFF  AS MDR_CURRENT_AFF,                                            
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_AFF  AS ANTICIP_CURRENT_AFF,                                       
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_AFF  AS RATE_CURRENT_AFF,                      
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_EC  AS CPF_AFF,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].DESTINY  AS DESTINY,                       
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_AFFILIATOR  AS COD_AFFILIATOR,                                            
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_BRANCH  AS COD_BRANCH,                                            
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_DEPTO_BRANCH  AS COD_DEPTO_BRANCH,                                            
        [REPORT_CONSOLIDATED_TRANS_SUB].PAN  AS PAN,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_AFF AS ORIGINATOR,                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].CODE  AS CODE,                                       
        [REPORT_CONSOLIDATED_TRANS_SUB].SPLIT,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_NAME,                                  
  [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_CPF_CNPJ                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED]                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[RETAINED_AMOUNT]                                     
        --, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE]                      
        ,IIF( [REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED] = 1, [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ) [ORIGINAL_DATE]                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNEE]                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_NAME_DESTINY                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_DATE                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_TIME                             
        ,[REPORT_CONSOLIDATED_TRANS_SUB].AUTH_CODE                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CREDITOR_DOCUMENT                            
       ,[REPORT_CONSOLIDATED_TRANS_SUB].ORDER_CODE                          
        ,CASE WHEN [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION_TITLE = @AwaitingSplit THEN 1 ELSE 0 END [AWAITINGSPLIT]                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].MODEL_POS                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].SEGMENT_EC                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].STATE_EC                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CITY_EC                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NEIGHBORHOOD_EC                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TYPE_TRAN                    
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NAME_PROD                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD_CPF_CNPJ                
        ,ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].PERCENT_PARTICIP_SPLIT,0) PERCENT_PARTICIP_SPLIT               
        ,[REPORT_CONSOLIDATED_TRANS_SUB].IS_PLANDZERO              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO                
  ,IIF([REPORT_CONSOLIDATED_TRANS_SUB].[TRANSACTION_TYPE] = ''CREDITO'', [REPORT_CONSOLIDATED_TRANS_SUB].QTY_DAYS_ANTECIP , 0)  QTY_DAYS_ANTECIP            
  ,isnull([REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO_AFF, 0) TAX_PLANDZERO_AFF            
  ,[REPORT_CONSOLIDATED_TRANS_SUB].SALES_REPRESENTANTE          
  ,[REPORT_CONSOLIDATED_TRANS_SUB].CPF_CNPJ_REPRESENTANTE          
  ,[REPORT_CONSOLIDATED_TRANS_SUB].EMAIL_REPRESENTANTE    
  ,[REPORT_CONSOLIDATED_TRANS_SUB].IS_RECURRING       
  ,[REPORT_CONSOLIDATED_TRANS_SUB].PROGRAM_MANAGER
  ,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_PREVISION
  ,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_ANTICIPATION
  ,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_RATE
  ,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_NET_VALUE
  FROM [REPORT_CONSOLIDATED_TRANS_SUB]                                             
   WHERE REPORT_CONSOLIDATED_TRANS_SUB.COD_COMP = @CODCOMP                                                                  
   AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = 3                                      
';


    IF @INITIAL_DATE IS NOT NULL
        AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE BETWEEN @INITIAL_DATE AND @FINAL_DATE  ');

IF @EC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_EC = @EC ');
IF @BRANCH IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '  AND COD_BRANCH =  @BRANCH ');
IF @DEPART IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_DEPTO_BRANCH =  @DEPART ');
IF (@CODAFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_AFFILIATOR = @CodAff ');
IF LEN(@BRAND) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND BRAND = @BRAND ');
IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CODE = @NSU ');
IF @PAN IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND PAN = @PAN ');
IF (@SPLIT = 1)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SPLIT = 1');

IF (@ISPlanDZero = 1)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND IS_PLANDZERO = 1');

IF @COD_EC_PROD IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_EC_PROD = @COD_EC_PROD');

IF @CODACQUIRER IS NOT NULL
SET @QUERY_BASIS =
CONCAT(@QUERY_BASIS, ' AND ACQUIRER = (SELECT [NAME] FROM ACQUIRER WHERE COD_AC = @CODACQUIRER ) ');

EXEC [sp_executesql] @QUERY_BASIS
					,N'                                     
           @CODCOMP VARCHAR(10),                             
           @INITIAL_DATE DATE,                             
           @FINAL_DATE DATE,                            
           @EC int,                             
           @BRANCH int,                             
           @DEPART int,                           
           @TERMINAL varchar(100),                             
           @STATE varchar(25),                             
           @CITY varchar(40),                             
           @TYPE_TRAN int,                             
           @SITUATION int,                             
           @NSU varchar(100),                 
           @NSU_EXT varchar(100),                                          
     @BRAND varchar(50) ,                           
           @PAN VARCHAR(50),                             
           @CodAff INT,                        
           @CODACQUIRER INT,                      
           @AwaitingSplit INT = NULL,    
     @COD_EC_PROD INT    
           '
					,@CODCOMP = @CODCOMP
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@EC = @EC
					,@BRANCH = @BRANCH
					,@DEPART = @DEPART
					,@TERMINAL = @TERMINAL
					,@STATE = @STATE
					,@CITY = @CITY
					,@TYPE_TRAN = @TYPE_TRAN
					,@SITUATION = @SITUATION
					,@NSU = @NSU
					,@NSU_EXT = @NSU_EXT
					,@BRAND = @BRAND
					,@PAN = @PAN
					,@CODAFF = @CODAFF
					,@CODACQUIRER = @CODACQUIRER
					,@AWAITINGSPLIT = @AWAITINGSPLIT
					,@COD_EC_PROD = @COD_EC_PROD;

END;

--ST-1668
GO


IF ( SELECT
		COUNT(*)
	FROM SOURCE_PROCESS
	WHERE DESCRIPTION = 'REPORT_ASSIGN_NOTIFY')
= 0
INSERT INTO SOURCE_PROCESS (description, code)
	VALUES ('REPORT_ASSIGN_NOTIFY', 'PROCESSAMENTO DE CESSÃO')

GO


IF OBJECT_ID('SP_UP_PROCESSED_ASSIGN_FILE') IS NOT NULL DROP PROCEDURE SP_UP_PROCESSED_ASSIGN_FILE;
GO
create procedure SP_UP_PROCESSED_ASSIGN_FILE(
    @COD_ASSIGN_FILE INT,
    @PROCESSED BIT = 1
)
AS
BEGIN
UPDATE ASSIGN_FILE
SET PROCESSED = @PROCESSED
WHERE COD_ASSIGN_FILE = @COD_ASSIGN_FILE
END
GO

IF OBJECT_ID('SP_ASS_FILE_NOTIFY') IS NOT NULL DROP PROCEDURE SP_ASS_FILE_NOTIFY;
GO
create procedure SP_ASS_FILE_NOTIFY(@COD_ASSIG_FILE INT,
                                    @COD_NOTIFY_MESSAGE INT)
AS
BEGIN

    DECLARE @OLD_NOTIFY INT = NULL;

SELECT
	@OLD_NOTIFY = COD_NOTIFY_MESSAGE
FROM ASSIGN_FILE
WHERE COD_ASSIGN_FILE = @COD_ASSIG_FILE
AND ACTIVE = 1

IF @OLD_NOTIFY IS NOT NULL
BEGIN
UPDATE NOTIFICATION_MESSAGES
SET GENERATE_STATUS = 'Processamento substituído!'
   ,NOTIFY_READ = 1
WHERE COD_NOTIFY_MESSAGE = @OLD_NOTIFY
END


UPDATE ASSIGN_FILE
SET COD_NOTIFY_MESSAGE = @COD_NOTIFY_MESSAGE
WHERE COD_ASSIGN_FILE = @COD_ASSIG_FILE;

UPDATE NOTIFICATION_MESSAGES
SET NOTIFY_READ = 1
WHERE COD_NOTIFY_MESSAGE = @COD_NOTIFY_MESSAGE

SELECT
	@COD_NOTIFY_MESSAGE;

END

GO
IF OBJECT_ID('SP_UP_PROCESSED_ASSIGN_FILE') IS NOT NULL DROP PROCEDURE SP_UP_PROCESSED_ASSIGN_FILE;
GO
create procedure SP_UP_PROCESSED_ASSIGN_FILE(@COD_ASSIGN_FILE INT,
                                             @PROCESSED BIT = 1)
AS
BEGIN
UPDATE ASSIGN_FILE
SET PROCESSED = @PROCESSED
WHERE COD_ASSIGN_FILE = @COD_ASSIGN_FILE
END
GO
