--ET-1293
IF NOT EXISTS (SELECT
		COD_SOURCE_PROCESS
	FROM SOURCE_PROCESS
	WHERE DESCRIPTION = 'PROCESS_CNAB_RESULT')
BEGIN
INSERT INTO SOURCE_PROCESS (CREATED_AT, DESCRIPTION, CODE)
	VALUES (GETDATE(), 'PROCESS_CNAB_RESULT', 'PROCESSAMENTO CNAB RETORNO');
END
GO
--ET-1293
GO
--ET-1294
IF NOT EXISTS (SELECT
		*
	FROM sys.columns c
	WHERE c.object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
	AND name = 'TCU_ACPT_DATE')
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD TCU_ACPT_DATE DATETIME
END
GO

IF NOT EXISTS (SELECT
		*
	FROM COMMERCIAL_ESTABLISHMENT CE
	WHERE CE.TCU_ACCEPTED = 1
	AND TCU_ACPT_DATE IS NULL
	AND USER_TCU_ACCEPT IS NOT NULL)
BEGIN
UPDATE CE
SET TCU_ACPT_DATE = COALESCE(U.FIRST_LOGIN_DATE, dbo.FN_FUS_UTF(DATEADD(DAY, -1, GETDATE())))
FROM COMMERCIAL_ESTABLISHMENT CE
JOIN USERS U
	ON CE.USER_TCU_ACCEPT = U.COD_USER
WHERE CE.TCU_ACCEPTED = 1
AND CE.TCU_ACPT_DATE IS NULL
AND USER_TCU_ACCEPT IS NOT NULL
END
GO

IF OBJECT_ID('SP_REG_ACCEPT_TCU') IS NOT NULL
DROP PROCEDURE SP_REG_ACCEPT_TCU
GO
CREATE PROCEDURE [DBO].[SP_REG_ACCEPT_TCU]
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author          VERSION      Date              Description
------------------------------------------------------------------------------------------
    Luiz Aquino     v1           2020-05-18        CREATED
    Luiz Aquino     V2           2021-01-21        ADD TCU_DATE on EC (ET-1294)
***************************************************************************************************/
(@COD_USER INT,
 @COD_EC INT)
AS
BEGIN

    IF EXISTS (SELECT
		1
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC
	AND TCU_ACCEPTED = 0)
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET TCU_ACCEPTED = 1
   ,USER_TCU_ACCEPT = @COD_USER
   ,TCU_ACPT_DATE = CAST(dbo.FN_FUS_UTF(GETDATE()) AS DATE)
WHERE COD_EC = @COD_EC
END

EXEC SP_FIN_TERM_TOKEN @COD_USER

UPDATE USERS
SET FIRST_LOGIN_DATE = GETDATE()
WHERE COD_USER = @COD_USER

END
GO

IF OBJECT_ID('SP_CLEAR_REG_ACCESS') IS NOT NULL
DROP PROCEDURE SP_CLEAR_REG_ACCESS
GO
CREATE PROCEDURE [dbo].[SP_CLEAR_REG_ACCESS]

/*----------------------------------------------------------------------------------------  
    Procedure Name: [SP_CLEAR_REG_ACCESS]  
    Project.......: TKPP  
------------------------------------------------------------------------------------------  
    Author           VERSION        Date        Description  
------------------------------------------------------------------------------------------  
    Kennedy Alef     V1         27/07/2018      Creation  
    Elir Ribeiro     V2         09/01/2019      Changed  
    Elir Ribeiro     v3         15/01/2019      Changed  
    Luiz Aquino      V4         15/05/2020      ET-859 TCU EC
    Luiz Aquino      V4         28/01/2021      ET-1294 TCU LIBERAÇÂO ADIADA DA AGENDA
------------------------------------------------------------------------------------------*/

(@COD_USER INT,
 @ACCEPT VARCHAR(10) = NULL)
AS
BEGIN
UPDATE DENIED_ACCESS_USER
SET ACTIVE = 0
WHERE COD_USER = @COD_USER;

IF @ACCEPT != ''
BEGIN
UPDATE USERS
SET LOGGED = 1
   ,LAST_LOGIN = GETDATE()
   ,LOCKED_UP = NULL
   ,FIRST_LOGIN_DATE = ISNULL(FIRST_LOGIN_DATE, GETDATE())
   ,ACCEPT = 1
WHERE COD_USER = @COD_USER;

DECLARE @COD_EC INT;

SELECT
	@COD_EC = COD_EC
FROM USERS
WHERE COD_USER = @COD_USER;


IF EXISTS (SELECT
			1
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE COD_EC = @COD_EC)
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET TCU_ACCEPTED = 1
   ,USER_TCU_ACCEPT = @COD_USER
   ,TCU_ACPT_DATE = CAST(dbo.FN_FUS_UTF(GETDATE()) AS DATE)
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC;
END;
EXEC SP_FIN_TERM_TOKEN @COD_USER;
END;
ELSE
BEGIN
UPDATE USERS
SET LOGGED = 1
   ,LAST_LOGIN = GETDATE()
   ,LOCKED_UP = NULL
   ,ACCEPT = NULL
WHERE COD_USER = @COD_USER;
END;
DELETE FROM AUTH_CODE_ACCESS
WHERE COD_USER = @COD_USER;
UPDATE PROVISORY_PASS_USER
SET ACTIVE = 0
WHERE COD_USER = @COD_USER
AND ACTIVE = 1;
UPDATE SECOND_FACTOR_PASS
SET ACTIVE = 0
WHERE COD_USER = @COD_USER
AND ACTIVE = 1;
END;
GO

IF OBJECT_ID('SP_FINANCE_CALENDAR_PRC') IS NOT NULL
DROP PROCEDURE SP_FINANCE_CALENDAR_PRC
GO
CREATE PROCEDURE [SP_FINANCE_CALENDAR_PRC]
(
    @INITIAL_DATE DATETIME,
    @FINAL_DATE DATETIME,
    @EC [CODE_TYPE] READONLY,
    @BANK [CODE_TYPE] READONLY,
    @CODAFF [CODE_TYPE] READONLY,
    @ACCOUNT [CODE_TYPE] READONLY,
    @CODSITUATION INT = NULL,
    @ONLY_ASSIGNMENT INT = 0,
    @ONLY_LOCKED INT = 0
)
AS
BEGIN
SET NOCOUNT ON;
SET ARITHABORT ON;

    DECLARE @TODAY DATETIME = dbo.FN_FUS_UTF(GETDATE());

SET @INITIAL_DATE = CONVERT(DATETIME, CONVERT(VARCHAR(11), @INITIAL_DATE, 111) + ' 23:59:59', 111);


    DECLARE @QUERY NVARCHAR(MAX);

SET @QUERY = '
    SELECT      
        [FINANCE_CALENDAR].[COD_EC] as BusinessEstablishmentInsideCode,      
        [FINANCE_CALENDAR].[TRADING_NAME] AS BusinessEstablishment,      
        [FINANCE_CALENDAR].[EC_CPF_CNPJ] AS Identification,      
        sum([FINANCE_CALENDAR].[PLOT_VALUE_PAYMENT]) as Amount,      
        @INITIAL_DATE as DatePrevisionPayment,      
        [FINANCE_CALENDAR].[COD_BANK],      
        [FINANCE_CALENDAR].[PRIORITY],      
        [FINANCE_CALENDAR].[CODE_BANK] as BankCode,      
        [FINANCE_CALENDAR].[BANK] as BankName,      
        [FINANCE_CALENDAR].[ACCOUNT] BankAccount,      
        [FINANCE_CALENDAR].[DIGIT_ACCOUNT] as DigitAccount,      
        [FINANCE_CALENDAR].[AGENCY] as BankAgency,      
        [FINANCE_CALENDAR].[DIGIT_AGENCY] as DigitAgency,      
        [FINANCE_CALENDAR].[ACCOUNT_TYPE] as BankTypeAccount,      
        [FINANCE_CALENDAR].[OPERATION_CODE] as OperationCode,      
        [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT],      
         (CASE
         WHEN EC.TCU_ACCEPTED = 0
             THEN ''AGENDA SUSPENSA - Aguardando Optin TCU''
         WHEN DATEDIFF(DAY, EC.TCU_ACPT_DATE, @TODAY) < 1
             THEN ''AGENDA SUSPENSA - TCU Libera em 24h ''
         WHEN ([EC].[COD_SITUATION] = 24  OR [AFF].[COD_SITUATION] = 24)
             THEN ''AGENDA SUSPENSA''
         WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 30
             THEN ''AGUARDANDO SPLIT''
         WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 17
             THEN ''CONFIRMACAO''
         WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 4
             THEN ''PAGAMENTO''
         ELSE SITUATION.NAME
        END) AS Situation,      
        [FINANCE_CALENDAR].[COD_AFFILIATOR] as AffiliatorInsideCode,      
        [FINANCE_CALENDAR].[AFFILIATOR_NAME] AS Affiliator,      
        [FINANCE_CALENDAR].[COD_SITUATION] as SituationInsideCode,      
        [SITUATION].[NAME] AS [SITUATION_NAME],      
        [FINANCE_CALENDAR].[IS_ASSIGNMENT] as Assignment,      
        [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION] as IdentificationAssignment,      
        [FINANCE_CALENDAR].IS_LOCK AS HasLock,      
        IIF([COD_TYPE_ACCOUNT] = 3, 1, 0) AS IsPaymentAccount,      
        [FINANCE_CALENDAR].[COD_COMP],      
        [FINANCE_CALENDAR].[TYPE_ESTAB] as TypeEstab,      
        [FINANCE_CALENDAR].[COD_BK_EC] as BankEcInsideCode      
    FROM [FINANCE_CALENDAR]      
         JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC] ON [EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]      
         JOIN [SITUATION] ON [SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]      
         LEFT JOIN [AFFILIATOR] AS [AFF] ON [AFF].[COD_AFFILIATOR] = [FINANCE_CALENDAR].[COD_AFFILIATOR]      
    WHERE [FINANCE_CALENDAR].[ACTIVE] = 1 AND [FINANCE_CALENDAR].[COD_SITUATION] IN(4, 17, 30) AND [PREVISION_PAY_DATE] <=  @INITIAL_DATE ';


    IF @ONLY_ASSIGNMENT = 1
SET @QUERY = @QUERY + ' AND [IS_ASSIGNMENT] = 1';

IF @ONLY_LOCKED = 1
SET @QUERY = @QUERY + ' AND [IS_LOCK] = 1';

IF @CODSITUATION IS NOT NULL
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_SITUATION] = @CODSITUATION';

IF (SELECT
			COUNT(*)
		FROM @EC)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_EC] IN (SELECT [CODE] FROM @EC)';

IF (SELECT
			COUNT(*)
		FROM @BANK)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_BANK] IN (SELECT [CODE] FROM @BANK)';

IF (SELECT
			COUNT(*)
		FROM @CODAFF)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_AFFILIATOR] IN (SELECT [CODE] FROM @CODAFF)';

IF (SELECT
			COUNT(*)
		FROM @ACCOUNT)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT] IN (SELECT [CODE] FROM @ACCOUNT)';


SET @QUERY = @QUERY + '
      
    GROUP BY [FINANCE_CALENDAR].[COD_EC],      
        [FINANCE_CALENDAR].[TRADING_NAME],      
        [FINANCE_CALENDAR].[EC_CPF_CNPJ],      
        [FINANCE_CALENDAR].[COD_BANK],      
        [FINANCE_CALENDAR].[PRIORITY],      
        [FINANCE_CALENDAR].[CODE_BANK],      
        [FINANCE_CALENDAR].[BANK],      
        [FINANCE_CALENDAR].[ACCOUNT],      
        [FINANCE_CALENDAR].[DIGIT_ACCOUNT],      
        [FINANCE_CALENDAR].[AGENCY],      
        [FINANCE_CALENDAR].[DIGIT_AGENCY],      
        [FINANCE_CALENDAR].[ACCOUNT_TYPE],      
        [FINANCE_CALENDAR].[OPERATION_CODE],      
        [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT],      
        (CASE      
            WHEN EC.TCU_ACCEPTED = 0 THEN ''AGENDA SUSPENSA - Aguardando Optin TCU''
            WHEN DATEDIFF(DAY, EC.TCU_ACPT_DATE, @TODAY) < 1 THEN ''AGENDA SUSPENSA - TCU Libera em 24h ''
            WHEN ([EC].[COD_SITUATION] = 24  OR [AFF].[COD_SITUATION] = 24) THEN ''AGENDA SUSPENSA''      
            WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 30 THEN ''AGUARDANDO SPLIT''      
            WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 17 THEN ''CONFIRMACAO''      
            WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 4  THEN ''PAGAMENTO''      
            ELSE SITUATION.NAME      
        END),      
        [FINANCE_CALENDAR].[COD_AFFILIATOR],      
        [FINANCE_CALENDAR].[AFFILIATOR_NAME],      
        [FINANCE_CALENDAR].[COD_SITUATION],      
        [SITUATION].[NAME],      
        [FINANCE_CALENDAR].[IS_ASSIGNMENT],      
        [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION],        
        IIF([COD_TYPE_ACCOUNT] = 3, 1, 0),      
        [FINANCE_CALENDAR].[COD_COMP],      
        [FINANCE_CALENDAR].[TYPE_ESTAB],      
        [FINANCE_CALENDAR].[COD_BK_EC] ,
		[FINANCE_CALENDAR].IS_LOCK
    ORDER BY [PRIORITY] DESC,FINANCE_CALENDAR.[COD_EC]';

EXEC [sp_executesql] @QUERY
					,N'
          @INITIAL_DATE DATETIME,      
          @FINAL_DATE DATETIME,      
          @EC [CODE_TYPE] READONLY,      
          @BANK [CODE_TYPE] READONLY,      
          @CodAff [CODE_TYPE] READONLY,      
          @ACCOUNT [CODE_TYPE] READONLY,      
          @CodSituation INT = NULL,      
          @ONLY_ASSIGNMENT INT = 0,      
          @ONLY_LOCKED INT = 0,
          @TODAY DATETIME
         '
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@EC = @EC
					,@BANK = @BANK
					,@CODAFF = @CODAFF
					,@ACCOUNT = @ACCOUNT
					,@CODSITUATION = @CODSITUATION
					,@ONLY_ASSIGNMENT = @ONLY_ASSIGNMENT
					,@ONLY_LOCKED = @ONLY_LOCKED
					,@TODAY = @TODAY;

END;
GO
--ET-1294
GO
--ET-1295
IF ( SELECT
		COUNT(*)
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE CODE = '22')
= 0
INSERT INTO ITEMS_SERVICES_AVAILABLE
	VALUES ('REBATE', 'Cálculo no POS de acordo com as faixas de rebate', '22', 1, NULL, NULL, NULL);

GO

IF ( SELECT
		COUNT(*)
	FROM CONTROL_ERRORS
	WHERE CODE = '61079')
= 0
INSERT INTO CONTROL_ERRORS (CODE, DESCRIPTION, DESCRIPTION_SOURCE, TYPE_ERROR, MODULE_ERROR)
	VALUES ('61079', 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH "REBATE" ACTIVE', 'NÃO FOI POSSÍVEL ATUALIZAR O SERVIÇO', 'UPDATE', 'BACKOFFICE')

GO
IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL DROP PROCEDURE SP_UP_SERVICES;
GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]
/*----------------------------------------------------------------------------------------
    Procedure Name: [SP_UP_SERVICES]
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author    VERSION   Date   Description
------------------------------------------------------------------------------------------
    Caike Ucha   V1    04/09/2019  Creation
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online
    Elir Ribeiro  v6    2020-04-17  addd split boleto online
    Caike Ucha    V7    2020-04-22  add multi ec
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero
   Caike uchoa   v9    2020-10-27  alter planDzero
    Luiz Aquino   v10   2020-10-29  ET-693 Split Programado
	Elir Ribeiro  v11  2020-01-28   ET-1295  Rebate
------------------------------------------------------------------------------------------*/
(@COD_EC INT,
 @COD_AFFILIATOR INT,
 @COD_USER INT,
 @SERVICE_NAME VARCHAR(100),
 @VALUE DECIMAL(22, 6),
 @ACTIVE INT,
 @TAX_AFILIATOR DECIMAL(22, 6) = NULL,
 @BILLET_TAX DECIMAL(22, 6) = NULL,
 @VALUE_TAX_BILLET DECIMAL(22, 6) = 0,
 @CONFIG_JSON VARCHAR(512) = NULL)
AS

DECLARE @COD_ITEM_SERVICE INT;
DECLARE @ONLINE_ACTIVE INT;
DECLARE @CREDENCIAL INT;

SELECT
	@CREDENCIAL = TRANSACTION_ONLINE
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
BEGIN
SELECT
	@COD_ITEM_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = @SERVICE_NAME

IF @SERVICE_NAME = 'CREDENTIALS'
BEGIN
IF (@ACTIVE = 1)
BEGIN
IF ((SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE USER_ONLINE IS NULL
		AND COD_EC = @COD_EC)
	> 0)
UPDATE COMMERCIAL_ESTABLISHMENT
SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
   ,HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
END
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 0
WHERE COD_EC = @COD_EC;
END

IF @SERVICE_NAME = 'SPOT'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE <= 0)
THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = @VALUE
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'BOLETO'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE_TAX_BILLET <= 0)
THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = @VALUE_TAX_BILLET
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61073, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
END

IF @SERVICE_NAME = 'SPLIT'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END

IF @SERVICE_NAME = 'PARCELADOCLIENTE'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
ELSE
BEGIN
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END
END;
END

IF @SERVICE_NAME = 'POSWEBDIRECT'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END;
END

IF @SERVICE_NAME = 'TRANSACTIONONLINE'
BEGIN
IF (@CREDENCIAL = 0
	AND @ACTIVE = 1)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 1
WHERE COD_EC = @COD_EC;
END
ELSE
BEGIN
IF (@CREDENCIAL = 1
	AND @ACTIVE = 0)
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 0
WHERE COD_EC = @COD_EC;
END
END
END

IF @SERVICE_NAME = 'LEDGER_RETENTION'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'MULTIEC'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'PlanDZero'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	)
THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;


IF @ACTIVE = 1
BEGIN

DECLARE @AFFCONFIG NVARCHAR(512)
DECLARE @CODBKCELER INT

SELECT
	@AFFCONFIG = CONFIG_JSON
FROM SERVICES_AVAILABLE
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC IS NULL
AND ACTIVE = 1
SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

IF EXISTS (SELECT
			COD_BANK
		FROM BANK_DETAILS_EC BDE
		JOIN BANK_DETAILS_CERC_INFO BDCI
			ON BDE.COD_BK_EC = BDCI.COD_BK_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND IS_CERC = 1
		AND END_DATE > GETDATE()
		AND BDCI.COD_SITUATION = 3)
THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
	AND NOT EXISTS (SELECT
			1
		FROM BANK_DETAILS_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND COD_BANK = @CODBKCELER)
THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) >
	CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit',
CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
                        END

                    IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) >
                       CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))
                        BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit',
CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
                        END

                    IF EXISTS (SELECT
		COD_ITEM_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_AFFILIATOR = @COD_AFFILIATOR
	AND COD_EC = @COD_EC
	AND ACTIVE = 1)
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = @CONFIG_JSON
   ,COD_USER = @COD_EC
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
END
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
END

IF @SERVICE_NAME = 'ApiTef'
BEGIN

IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
ELSE
BEGIN

IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE (COD_AFFILIATOR IS NULL
		OR COD_AFFILIATOR = @COD_AFFILIATOR)
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC = @COD_EC)
BEGIN

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)

END
ELSE
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 1
   ,MODIFY_DATE = GETDATE()
   ,COD_USER = @COD_USER
WHERE (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;

END
END
END

IF @SERVICE_NAME = 'SplitProgrammed'
BEGIN
IF @ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
BEGIN
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC IS NULL)
BEGIN
SET @ACTIVE = 0;
                            THROW 61080, 'AFFILIATED DOES NOT HAVE SplitProgrammed SERVICE', 1;
                        END
                END

            IF @ACTIVE = 1 AND NOT EXISTS (SELECT
		COD_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE ACTIVE = 1
	AND (@COD_AFFILIATOR IS NULL
	OR COD_AFFILIATOR = @COD_AFFILIATOR)
	AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_EC = @COD_EC)
BEGIN
INSERT SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC,
MODIFY_DATE, CONFIG_JSON, SERVICE_AMOUNT)
	VALUES (@COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, GETDATE(), @CONFIG_JSON, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = IIF(@ACTIVE = 1, @CONFIG_JSON, CONFIG_JSON)
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
   ,ACTIVE = @ACTIVE
WHERE ACTIVE = 1
AND (@COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'Rebate'
BEGIN
IF @ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
BEGIN
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC IS NULL)
BEGIN
SET @ACTIVE = 0;
                            THROW 61080, 'AFFILIATED DOES NOT HAVE Rebate SERVICE', 1;
                        END
                END

            IF @ACTIVE = 1 AND NOT EXISTS (SELECT
		COD_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE ACTIVE = 1
	AND (@COD_AFFILIATOR IS NULL
	OR COD_AFFILIATOR = @COD_AFFILIATOR)
	AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_EC = @COD_EC)
BEGIN
INSERT SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC,
MODIFY_DATE, CONFIG_JSON, SERVICE_AMOUNT)
	VALUES (@COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, GETDATE(), @CONFIG_JSON, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = IIF(@ACTIVE = 1, @CONFIG_JSON, CONFIG_JSON)
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
   ,ACTIVE = @ACTIVE
WHERE ACTIVE = 1
AND (@COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
END


END;

-- add service rebate

GO
IF OBJECT_ID('SP_CONTACT_DATA_EQUIP') IS NOT NULL DROP PROCEDURE SP_CONTACT_DATA_EQUIP;
GO
CREATE PROCEDURE [dbo].[SP_CONTACT_DATA_EQUIP]    
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_CONTACT_DATA_EQUIP]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION         Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef                      V1         27/07/2018                           Creation    
Fernando Henrique F. O            V2         03/04/2019                           Change    
Lucas Aguiar                      v3         20-04-2019                   Descer se ? split ou n?o    
Caike Uch?a                       v4         15/01/2020                     descer MMC padr?o para PF    
Caike Uchoa                       v5         20/09/2020                    Add formatacao de strings    
Elir Ribeiro                      v6         2021-01-28                   Add Rebate    
------------------------------------------------------------------------------------------*/ (    
    @TERMINALID INT,    
    @COD_EC INT = NULL)    
AS    
BEGIN
SELECT TOP 1
	VW_COMPANY_EC_BR_DEP_EQUIP.CPF_CNPJ_BR
   ,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF
   ,[dbo].[FNC_REMOV_CARAC_ESP](
	VW_COMPANY_EC_BR_DEP_EQUIP.TRADING_NAME_BR) AS TRADING_NAME_BR
   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.BRANCH_NAME) AS BRANCH_NAME
   ,CASE
		WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'
		ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC
	END AS MCC
   ,COMMERCIAL_ESTABLISHMENT.CODE AS MERCHANT_CODE
   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.[ADDRESS]), 20) AS [ADDRESS]
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(ADDRESS_BRANCH.[NUMBER])) AS [NUMBER]
   ,ADDRESS_BRANCH.CEP
   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.COMPLEMENT), 0) AS COMPLEMENT
   ,[dbo].[FNC_REMOV_CARAC_ESP](NEIGHBORHOOD.NAME) AS NEIGHBORDHOOD
   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY.[NAME]) AS CITY
   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE].UF) AS [STATE]
   ,COUNTRY.INITIALS
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDI)) AS DDI
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDD)) AS DDD
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].[FNC_REMOV_CARAC_ESP](CONTACT_BRANCH.[NUMBER])) AS TEL_NUMBER
   ,TYPE_CONTACT.NAME AS TYPE_CONTACT
   ,EQUIPMENT.COD_EQUIP
   ,VW_COMPANY_EC_BR_DEP_EQUIP.MERCHANT_CODE
   ,COMMERCIAL_ESTABLISHMENT.CIELO_CODE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 4
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 4)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 4
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 2)
			> 0 THEN 0
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 4
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
			> 0 THEN 1
		ELSE 0
	END AS [SPLIT]
   ,(
	CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 13
				AND ACTIVE = 1
				AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
			> 0 THEN 1
		ELSE 0
	END
	) AS MANY_MERCHANTS
   ,(
	CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 20
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 4)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 20
				AND ACTIVE = 1
				AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 20
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 2)
			> 0 THEN 0
		ELSE 0
	END
	) AS REBATE
   ,EC_PARAM.CPF_CNPJ AS CNPJ_PARAM
   ,IIF(LEN(EC_PARAM.CPF_CNPJ) = 11, 'CPF',
	IIF(EC_PARAM.CPF_CNPJ IS NOT NULL, 'CNPJ', NULL)) AS TYPE_DOC_PARAM
	--,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF    
   ,[dbo].[FNC_REMOV_CARAC_ESP](EC_PARAM.NAME) AS TRADING_NAME_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP](EC_PARAM.TRADING_NAME) AS BRANCH_NAME_PARAM
	--  ,CASE    
	-- WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'    
	-- ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC    
	--END AS MCC_PARAM    
   ,EC_PARAM.CODE AS MERCHANT_CODE_PARAM
   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADD_EC_PARAM.[ADDRESS]), 20) AS [ADDRESS_PARAM]
   ,[dbo].[FNC_REMOV_LETRAS](
	[dbo].FNC_REMOV_CARAC_ESP(ADD_EC_PARAM.[NUMBER])) AS [NUMBER_PARAM]
   ,ADD_EC_PARAM.CEP AS CEP_PARAM
   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADD_EC_PARAM.COMPLEMENT), 0) AS COMPLEMENT_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP](ENIGH_EC_PARAM.NAME) AS NEIGHBORDHOOD_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY_EC_PARAM.[NAME]) AS CITY_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE_EC_PARAM].UF) AS [STATE_PARAM]
   ,COUNTRY_EC_PARAM.INITIALS AS INITIALS_PARAM
   ,COMMERCIAL_ESTABLISHMENT.PIX_KEY
   ,ISNULL(COMMERCIAL_ESTABLISHMENT.PIX_TCU, 0) AS PIX_TCU
   ,(SELECT
			ACCOUNT
		FROM BANK_DETAILS_EC AS BK_DET
		JOIN BANKS
			ON BK_DET.COD_BANK = BANKS.COD_BANK
			AND BK_DET.COD_BANK = 324
		WHERE BK_DET.ACTIVE = 1
		AND BK_DET.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH)
	AS ACCOUNT_CELER
   ,(SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		JOIN ITEMS_SERVICES_AVAILABLE
			ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
		WHERE ITEMS_SERVICES_AVAILABLE.[NAME] = 'PIX'
		AND ITEMS_SERVICES_AVAILABLE.ACTIVE = 1
		AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
	AS PIX
FROM VW_COMPANY_EC_BR_DEP_EQUIP
JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
JOIN STATE
	ON STATE.COD_STATE = CITY.COD_STATE
JOIN COUNTRY
	ON COUNTRY.COD_COUNTRY = STATE.COD_COUNTRY
JOIN CONTACT_BRANCH
	ON CONTACT_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
JOIN TYPE_CONTACT
	ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT
JOIN ASS_DEPTO_EQUIP
	ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_DEPTO_BR
JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PARAM
	ON EC_PARAM.COD_EC = ISNULL(@COD_EC, 0)
		AND EC_PARAM.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
LEFT JOIN BRANCH_EC BRANCH_PARAM
	ON EC_PARAM.COD_EC = BRANCH_PARAM.COD_EC
LEFT JOIN ADDRESS_BRANCH ADD_EC_PARAM
	ON ADD_EC_PARAM.COD_BRANCH = BRANCH_PARAM.COD_BRANCH
		AND ADD_EC_PARAM.ACTIVE = 1
LEFT JOIN NEIGHBORHOOD ENIGH_EC_PARAM
	ON ENIGH_EC_PARAM.COD_NEIGH = ADD_EC_PARAM.COD_NEIGH
LEFT JOIN CITY CITY_EC_PARAM
	ON CITY_EC_PARAM.COD_CITY = ENIGH_EC_PARAM.COD_CITY
LEFT JOIN STATE STATE_EC_PARAM
	ON STATE_EC_PARAM.COD_STATE = CITY_EC_PARAM.COD_STATE
LEFT JOIN COUNTRY COUNTRY_EC_PARAM
	ON COUNTRY_EC_PARAM.COD_COUNTRY = STATE_EC_PARAM.COD_COUNTRY
WHERE EQUIPMENT.COD_EQUIP = @TERMINALID
AND ASS_DEPTO_EQUIP.ACTIVE = 1
ORDER BY ADDRESS_BRANCH.COD_ADDRESS DESC

END

--EXEC SP_CONTACT_DATA_EQUIP 3
GO


IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL DROP PROCEDURE SP_UPDATE_SERVICES_AFFILIATOR;
GO

CREATE PROCEDURE [dbo].[SP_UPDATE_SERVICES_AFFILIATOR]
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author          VERSION      Date              Description
------------------------------------------------------------------------------------------
    Caike Ucha      v1           2020-02-26        Creation
    Elir Ribeiro    v2           2020-04-20        add service billet
    Caike Ucha      v3           2020-04-20        add service MultiEC
    Elir Ribeiro    v4           2020-04-22        alter proc
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero
    Luiz Aquino     V7           2020-09-24        ET-1073 TEF_GLOBAL
    Luiz Aquino     V9           2020-10-27        ET-1150 Split Programado
 Elir Ribeiro    v10          2021-01-28        ET-1295 Rebate
------------------------------------------------------------------------------------------*/
(
    @CODAFFILIATED INT,
    @COD_COMP INT,
    @COD_USER_ALT INT,
    @SPOT_TAX DECIMAL(6, 2) = 0,
    @HAS_SPOT INT = 0,
    @SPLIT_OPT INT = 0,
    @HAS_SPLIT INT = 0,
    @HAS_NOTIFICATION INT = 0,
    @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,
    @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,
    @LEDGERRETENTION INT = 0,
    @LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,
    @HAS_TRANSLATION INT = 0,
    @OPERATION_AFF INT = 0,
    @HAS_BILLET INT = 0,
    @BILLET_TAX DECIMAL(6, 2) = 0,
    @HAS_SPLIT_BILLET INT = 0,
    @MULTIEC_ACTIVE INT = 0,
    @TCU_DETAILED INT = 0,
    @PLANDZERO INT = 0,
    @PlanDZeroJson VARCHAR(256) = NULL,
    @TefApiActive INT = 0,
    @TefApiJson VARCHAR(256) = NULL,
    @SplitProgrammed INT = 0,
    @Rebate INT = 0,
    @Rebate_Opt int = 0
)
AS
BEGIN
    DECLARE @CODSPOTSERVICE INT,
        @COD_SPLIT_SERVICE INT,
        @COD_GWNOTIFICATION INT,
        @HAS_CREDENTIAL INT = 0,
        @COD_AWAITSPLIT INT = 0,
        @COD_TRANSLATE INT,
        @CODBILLETSERVICE INT,
        @CODSPLITBILLET INT,
        @COD_MULTIEC_AFFILIATOR INT,
        @COD_TCU_DETAILED INT,
        @COD_PLANDZERO INT,
        @COD_TEF_API INT,
        @COD_SPLIT_PROG INT,
        @COD_REBATE INT;

SELECT
	@CODSPOTSERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '1';

SELECT
	@COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'SPLIT';

SELECT
	@COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

SELECT
	@COD_AWAITSPLIT = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '8';

SELECT
	@HAS_CREDENTIAL = COUNT(*)
FROM [ACCESS_APPAPI]
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;

SELECT
	@COD_TRANSLATE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'TRANSLATE';

SELECT
	@CODBILLETSERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '12';

SELECT
	@CODSPLITBILLET = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '13';

SELECT
	@COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '14';

SELECT
	@COD_TCU_DETAILED = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '16';

SELECT
	@COD_PLANDZERO = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'PlanDZero';

SELECT
	@COD_TEF_API = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'ApiTef';

SELECT
	@COD_SPLIT_PROG = COD_ITEM_SERVICE
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'SplitProgrammed'

SELECT
	@COD_REBATE = COD_ITEM_SERVICE
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'Rebate'


IF (@HAS_SPOT = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

IF (@HAS_SPLIT = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@HAS_SPLIT = 1
	AND @SPLIT_OPT = 1
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@MULTIEC_ACTIVE = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;


IF (@Rebate = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_REBATE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61079, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH "REBATE" ACTIVE', 1;

/*******************************************
*********** UPDATE SPOT AFFILIATED *********
*******************************************/

IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = 1
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	> 0
BEGIN
IF @HAS_SPOT = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF @SPOT_TAX > (SELECT
			MIN([SPOT_TAX])
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [SPOT_TAX] <> 0
		AND [ACTIVE] = 1)
THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
END;
END;
ELSE
IF @HAS_SPOT = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
END;

UPDATE AFFILIATOR
SET SPOT_TAX = @SPOT_TAX
   ,OPERATION_AFF = @OPERATION_AFF
WHERE COD_AFFILIATOR = @CODAFFILIATED;

/********************************************
*********** UPDATE SPLIT AFFILIATED *********
********************************************/

IF (@HAS_SPLIT = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
END;

/**********************************************
*********** UPDATE LEDGER RETENTION ***********
**********************************************/

IF (@LEDGERRETENTION = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LEDGERRETENTIONCONFIG);

DECLARE @DT_FROM DATE;
DECLARE @DT_UNTIL DATE;

SELECT
	@DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
SELECT
	@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

UPDATE [LEDGER_RETENTION_CONTROL]
SET [ACTIVE] = 0
FROM [LEDGER_RETENTION_CONTROL]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
END;

/************************************************
*********** UPDATE TRANSLATE AFFILIATED *********
************************************************/

IF @HAS_TRANSLATION = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	= 0
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
END;
END;

/***************************************************
*********** UPDATE NOTIFICATION AFFILIATED *********
***************************************************/

IF @HAS_NOTIFICATION = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

UPDATE [ACCESS_APPAPI]
SET [ACTIVE] = 0
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;
END;
ELSE
IF @HAS_CREDENTIAL = 0
	AND @HAS_NOTIFICATION = 1
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);

EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
									 ,@PASSWORD_NOTIFICATION
									 ,@CLIENTID_NOTIFICATION;
END

/*******************************************
*********** UPDATE BILLET AFFILIATED *******
*******************************************/

IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	> 0
BEGIN
IF @HAS_BILLET = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
IF @HAS_SPLIT_BILLET = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF @BILLET_TAX > (SELECT
			MIN([BILLET_TAX])
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [BILLET_TAX] <> 0
		AND [ACTIVE] = 1)
THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
END;
END;
ELSE
IF @HAS_BILLET = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
	VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
END;

IF @HAS_SPLIT_BILLET = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
	VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
END;

UPDATE AFFILIATOR
SET BILLET_TAX = @BILLET_TAX
WHERE COD_AFFILIATOR = @CODAFFILIATED;

/*******************************************
*********** UPDATE MULTIEC AFFILIATED *******
*******************************************/

IF (@MULTIEC_ACTIVE = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END

/*******************************************
    *********** TCU DETAILED *******
*******************************************/

IF (@TCU_DETAILED = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END

/*******************************************
     *********** Plano DZero *******
 *******************************************/

IF @PLANDZERO = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
CONFIG_JSON)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PlanDZeroJson);
END
ELSE
BEGIN

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = @PlanDZeroJson
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL
AND [ACTIVE] = 1

DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NOT NULL
AND [ACTIVE] = 1
AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NOT NULL
AND [ACTIVE] = 1
AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

IF @CELERONLY = 'true'
BEGIN
DECLARE @CODBKCELER INT
SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

UPDATE SA
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
FROM [SERVICES_AVAILABLE] SA
JOIN BANK_DETAILS_EC BDE
	ON SA.COD_EC = BDE.COD_EC
	AND BDE.ACTIVE = 1
	AND IS_CERC = 0
	AND COD_BANK != @CODBKCELER
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
AND SA.[COD_EC] IS NOT NULL
AND SA.[ACTIVE] = 1
END
END

/*******************************************
    *********** TEF API *******
*******************************************/

UPDATE ACCESS_TEF_API
SET ACTIVE = 0
   ,MODIFIED_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER_ALT
WHERE COD_AFFILIATOR = @CODAFFILIATED
AND ACTIVE = 1;

IF @TefApiActive = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = GETDATE()
WHERE ACTIVE = 1
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_ITEM_SERVICE] = @COD_TEF_API
AND COD_EC IS NULL;
END
ELSE
BEGIN

IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_ITEM_SERVICE] = @COD_TEF_API
		AND COD_EC IS NULL)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE],
[COD_OPT_SERV],
CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER_ALT, @COD_TEF_API, @COD_COMP, @CODAFFILIATED, NULL, 1, GETDATE(), 1, @TefApiJson);
END
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 1
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = GETDATE()
   ,CONFIG_JSON = @TefApiJson
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_ITEM_SERVICE] = @COD_TEF_API
AND COD_EC IS NULL;
END

SELECT
	a.CodAc
   ,a.PASSWORD INTO #Acqs
FROM OPENJSON(@TefApiJson) WITH (ACQUIRER NVARCHAR(MAX) '$.Acquirer' AS JSON) AS i
CROSS APPLY (SELECT
		*
	FROM OPENJSON(i.ACQUIRER)
	WITH (CodAc INT '$.CodAc', PASSWORD VARCHAR(64) '$.Password')) a

DECLARE @COD_AC INT;
DECLARE @Password VARCHAR(64);
DECLARE _ACS CURSOR FOR SELECT
	CodAc
   ,PASSWORD
FROM #Acqs;

OPEN _ACS

FETCH NEXT FROM _ACS INTO @COD_AC, @Password

WHILE @@fetch_status = 0
BEGIN
EXEC SP_CREATE_TEF_LOGIN @Password
						,@COD_AC
						,@CODAFFILIATED
						,@TefApiActive
						,@COD_USER_ALT
						,0
						,@COD_COMP

FETCH NEXT FROM _ACS INTO @COD_AC, @Password
END;

CLOSE _ACS
DEALLOCATE _ACS;
END

/*******************************************
    *********** Split Program *******
*******************************************/

IF @SplitProgrammed = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
   ,COD_USER = @COD_USER_ALT
WHERE ACTIVE = 1
AND COD_ITEM_SERVICE = @COD_SPLIT_PROG
AND COD_AFFILIATOR = @CODAFFILIATED
END
ELSE
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_ITEM_SERVICE = @COD_SPLIT_PROG
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NULL)
BEGIN
INSERT INTO SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR)
	VALUES (@COD_USER_ALT, @COD_SPLIT_PROG, @COD_COMP, @CODAFFILIATED)
END


/*******************************************
       *********** Rebate *******
   *******************************************/

IF (@Rebate = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_REBATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_REBATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_REBATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @Rebate_Opt));
END;

END;
GO

--ET-1295
GO
--ET-1304

IF OBJECT_ID('SP_FD_ASS_EQUIP') IS NOT NULL DROP PROCEDURE SP_FD_ASS_EQUIP;
GO
create procedure SP_FD_ASS_EQUIP(@SEARCH VARCHAR(255) = NULL,
                                 @COD_AFF INT = NULL)
AS
BEGIN
    DECLARE @QUERY NVARCHAR(MAX)
    DECLARE @S VARCHAR(255);

SET @QUERY = '
    select EQUIPMENT.COD_EQUIP,
           EQUIPMENT.SERIAL,
           COMMERCIAL_ESTABLISHMENT.COD_EC,
           AFFILIATOR.COD_AFFILIATOR,
           COMMERCIAL_ESTABLISHMENT.name as EC_NAME
    from EQUIPMENT
             join ASS_DEPTO_EQUIP on EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP and ASS_DEPTO_EQUIP.ACTIVE = 1
             join DEPARTMENTS_BRANCH on ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
             join BRANCH_EC on DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
             join COMMERCIAL_ESTABLISHMENT on BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
             left join AFFILIATOR on COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
    where EQUIPMENT.ACTIVE = 1';

    IF @SEARCH IS NOT NULL
        BEGIN
SET @S = '%' + @SEARCH + '%';
SET @QUERY = @QUERY + ' AND EQUIPMENT.SERIAL LIKE @S';
        END

    IF @COD_AFF IS NOT NULL
SET @QUERY = @QUERY + ' AND AFFILIATOR.COD_AFFILIATOR = @COD_AFF'

EXEC sp_executesql @QUERY
				  ,N'
            @S VARCHAR(255),
            @COD_AFF INT'
				  ,@S = @S
				  ,@COD_AFF = @COD_AFF

END
GO


IF OBJECT_ID('SP_LS_FILTER_PRDCT_ACQ') IS NOT NULL DROP PROCEDURE SP_LS_FILTER_PRDCT_ACQ;
GO
CREATE PROCEDURE SP_LS_FILTER_PRDCT_ACQ(
    @COD_AFF INT = NULL,
    @COD_EC INT = NULL,
    @SERIAL VARCHAR(96) = NULL,
    @COD_AC INT = NULL,
    @COD_MODEL INT = NULL,
    @BRANDGROUP VARCHAR(64) = NULL,
    @ONLINE INT = 0,
    @PRESENTIAL INT = 0,
    @PAGE INT = 1,
    @PAGESIZE INT = 10,
    @SEARCH_TYPE INT = 1,
    @COD_AFF_LOGGED INT = NULL,
    @QtyRows INT OUTPUT
) AS
BEGIN
SET NOCOUNT ON
SET ARITHABORT ON

    DECLARE @Skip INT = (@PAGE - 1) * @PAGESIZE;
    DECLARE @Sql NVARCHAR(MAX)

SET @Sql = ' 
    SELECT 
        COD_PRD_ACQ_FILTER
         , PAF.COD_AFFILIATOR
         , A.NAME AF_NAME
         , PAF.COD_EC
         , CE.NAME EC_NAME
         , PAF.COD_ASS_DEPTO_TERMINAL
         , E.SERIAL
         , PAF.COD_AC
         , ACQ.NAME ACQ_NAME
         , PAF.COD_MODEL
         , EM.CODIGO MODEL
         , CONCAT(B.[GROUP], '' '', TT.CODE)  BRAND_GROUP
         , PAF.ONLINE
         , PAF.PRESENTIAL
         , PAF.DEBIT
         , PAF.CREDIT
         , PAF.CREDIT_INSTALLMENTS
         , PAF.CLIENT_INSTALLMENT
         , PAF.CLIENT_DEBIT
         , PAF.CLIENT_CREDIT
         , PAF.RATE_FREE
         , CE.COD_AFFILIATOR COD_AFF_EC
         , AFF_EQUIP.COD_AFFILIATOR COD_AFF_EQUIP
    FROM PRODUCT_ACQUIRE_FILTER PAF 
    LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = PAF.COD_AFFILIATOR
    LEFT JOIN COMMERCIAL_ESTABLISHMENT CE ON CE.COD_EC = PAF.COD_EC
    LEFT JOIN ACQUIRER ACQ ON ACQ.COD_AC = PAF.COD_AC
    LEFT JOIN EQUIPMENT_MODEL EM ON EM.COD_MODEL = PAF.COD_MODEL
    LEFT JOIN BRAND B ON B.COD_BRAND = PAF.COD_BRAND
    LEFT JOIN TRANSACTION_TYPE TT ON TT.COD_TTYPE = B.COD_TTYPE
    LEFT JOIN ASS_DEPTO_EQUIP ADE on PAF.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
    LEFT JOIN EQUIPMENT E ON E.COD_EQUIP = ADE.COD_EQUIP
    LEFT JOIN DEPARTMENTS_BRANCH on ADE.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
    LEFT JOIN BRANCH_EC on DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
    LEFT JOIN COMMERCIAL_ESTABLISHMENT CE_EQUIP on BRANCH_EC.COD_EC = CE_EQUIP.COD_EC
    LEFT JOIN AFFILIATOR AFF_EQUIP on CE_EQUIP.COD_AFFILIATOR = AFF_EQUIP.COD_AFFILIATOR
    WHERE '

    IF @COD_AFF IS NOT NULL
        BEGIN
SET @Sql = @Sql + ' PAF.COD_AFFILIATOR = @COD_AFF';
        END
    ELSE
        IF @SEARCH_TYPE = 2
            BEGIN
SET @Sql = @Sql + ' PAF.COD_AFFILIATOR IS NOT NULL '
            END
        ELSE
            IF @COD_EC IS NOT NULL
                BEGIN
SET @Sql = @Sql + ' PAF.COD_EC = @COD_EC ';
                END
            ELSE
                IF @SEARCH_TYPE = 3
                    BEGIN
SET @Sql = @Sql + ' PAF.COD_EC IS NOT NULL '
                    END
                ELSE
                    IF @SERIAL IS NOT NULL
                        BEGIN
SET @Sql = @Sql + ' E.SERIAL = @SERIAL '
                        END
                    ELSE
                        IF @SEARCH_TYPE = 4
                            BEGIN
SET @Sql = @Sql + ' PAF.COD_ASS_DEPTO_TERMINAL IS NOT NULL '
                            END
                        ELSE
                            BEGIN
SET @Sql = @Sql +
' PAF.COD_AFFILIATOR IS NULL AND PAF.COD_EC IS NULL AND PAF.COD_ASS_DEPTO_TERMINAL IS NULL '
                            END

    IF @ONLINE = 1
        BEGIN
SET @Sql = @Sql + ' AND PAF.ONLINE = 1 ';
        END

    IF @PRESENTIAL = 1
        BEGIN
SET @Sql = @Sql + ' AND PAF.PRESENTIAL = 1 ';
        END

    IF @COD_AC IS NOT NULL
        BEGIN
SET @Sql = @Sql + ' AND PAF.COD_AC = @COD_AC ';
        END

    IF @COD_MODEL IS NOT NULL
        BEGIN
SET @Sql = @Sql + ' AND PAF.COD_MODEL = @COD_MODEL '
        END

    IF @BRANDGROUP IS NOT NULL
        BEGIN
SET @Sql = @Sql + ' AND B.[GROUP] = @BRANDGROUP '
        END

    IF @COD_AFF_LOGGED IS NOT NULL
        BEGIN
SET @Sql = @Sql + ' AND ( AFF_EQUIP.COD_AFFILIATOR = @COD_AFF_LOGGED OR CE.COD_AFFILIATOR  = @COD_AFF_LOGGED) '
        END

    DECLARE @CTQUERY NVARCHAR(MAX) = N'SELECT @QtyRows=COUNT(*) FROM (' + @Sql + ') r ';

EXEC SP_EXECUTESQL @CTQUERY
				  ,N'@COD_AFF INT,
    @COD_EC INT,
    @SERIAL VARCHAR(96),
    @COD_AC INT,
    @COD_MODEL INT,
    @BRANDGROUP VARCHAR(64),
    @ONLINE INT,
    @PRESENTIAL INT,
    @COD_AFF_LOGGED INT,
    @PAGE INT,
    @PAGESIZE INT,
    @Skip INT,
    @QtyRows INT OUTPUT
    '
				  ,@COD_AFF = @COD_AFF
				  ,@COD_EC = @COD_EC
				  ,@SERIAL = @SERIAL
				  ,@COD_AC = @COD_AC
				  ,@COD_MODEL = @COD_MODEL
				  ,@BRANDGROUP = @BRANDGROUP
				  ,@ONLINE = @ONLINE
				  ,@PRESENTIAL = @PRESENTIAL
				  ,@COD_AFF_LOGGED = @COD_AFF_LOGGED
				  ,@PAGE = @PAGE
				  ,@PAGESIZE = @PAGESIZE
				  ,@Skip = @Skip
				  ,@QtyRows = @QtyRows OUTPUT;

SET @Sql = @Sql + ' ORDER BY COD_PRD_ACQ_FILTER DESC
    OFFSET @Skip ROWS
    FETCH NEXT @PAGESIZE ROWS ONLY 
    '

EXEC SP_EXECUTESQL @Sql
				  ,N'@COD_AFF INT,
    @COD_EC INT,
    @SERIAL VARCHAR(96),
    @COD_AC INT,
    @COD_MODEL INT,
    @BRANDGROUP VARCHAR(64),
    @ONLINE INT,
    @PRESENTIAL INT,
    @COD_AFF_LOGGED INT,
    @PAGE INT,
    @PAGESIZE INT,
    @Skip INT
    '
				  ,@COD_AFF = @COD_AFF
				  ,@COD_EC = @COD_EC
				  ,@SERIAL = @SERIAL
				  ,@COD_AC = @COD_AC
				  ,@COD_MODEL = @COD_MODEL
				  ,@BRANDGROUP = @BRANDGROUP
				  ,@ONLINE = @ONLINE
				  ,@PRESENTIAL = @PRESENTIAL
				  ,@COD_AFF_LOGGED = @COD_AFF_LOGGED
				  ,@PAGE = @PAGE
				  ,@PAGESIZE = @PAGESIZE
				  ,@Skip = @Skip;

END
GO
--ET-1304
GO
--ST-1777
GO
 

IF OBJECT_ID('SP_UP_TRANSACTION') IS NOT NULL
DROP PROCEDURE [SP_UP_TRANSACTION];

GO
CREATE PROCEDURE [dbo].[SP_UP_TRANSACTION]    
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_UP_TRANSACTION]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author   Version  Date   Description    
------------------------------------------------------------------------------------------    
Kennedy Alef V1   27/07/2018  Creation    
Lucas Aguiar V2   17-04-2019  rotina de aw. titles e cancelamento    
Elir Ribeiro V3   12-08-2019  Changed situation Blocked    
Elir Ribeiro V4   20-08-2019  Changed situation AWAITING PAYMENT    
Marcus Gall  V5   01-02-2020  Changes CONFIRMED, New CANCELED after RELEASED    
Elir Ribeiro v6   27-02-2020  Changes Cod_user    
Kennedy Alef v7   11-05-2020  Reprocess financial calendar    
Caike Uch�a  v8   13-07-2020  Canceled partial pela Finance calendar    
Caike Uch�a  V9   31-07-2020  Add cod_ec transaction_titles    
Kennedy Alef V10  07-10-2020  add enqueue finance    
Caike uchoa  v11  18/11/2020  alter awaiting payment    
Caike Uchoa  v12  13/01/2021  add model_equip TRANSACTION_AUTH_QUEUE  
Caike Uchoa  v13  22/01/2021  Add cancelamento de transações bloqueadas
------------------------------------------------------------------------------------------*/    
(@CODE_TRAN VARCHAR(200),    
 @SITUATION VARCHAR(100),    
 @DESCRIPTION VARCHAR(200) = NULL,    
 @CURRENCY VARCHAR(100),    
 @CODE_ERROR VARCHAR(100) = NULL,    
 @TRAN_ID INT = NULL,    
 @LOGICAL_NUMBER_ACQ VARCHAR(100) = NULL,    
 @CARD_HOLDER_NAME VARCHAR(100) = NULL,    
 @COD_USER INT = NULL)    
AS    
    
DECLARE @QTY INT=0;
    
DECLARE @CONT INT;
    
DECLARE @SIT VARCHAR(100);
    
DECLARE @BRANCH INT;
    
DECLARE @COD_EC_TITTLE INT;
    
DECLARE @DATE_TRAN DATE;
    
    
    
DECLARE    
    @DATA_TRANSACTION TABLE    
                      (    
                          TRANSACTION_AMOUNT     DECIMAL(22, 6),    
                          COD_TTYPE              INT,    
                          BRAND                  VARCHAR(255),    
                          PLOTS                  INT,    
                          NSU                    VARCHAR(255),    
                          PAN                    VARCHAR(255),    
                          COD_ASS_DEPTO_TERMINAL INT,    
                          TRANSACTION_DATE       DATETIME    
                      );
    
    
    
    IF @TRAN_ID IS NULL    
        BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.[NAME]
   ,@DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE CODE = @CODE_TRAN;
END;
ELSE
BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.NAME
   ,@DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE COD_TRAN = @TRAN_ID;
END;

IF @CONT < 1
	OR @CONT IS NULL
THROW 60002, '601', 1;

UPDATE PROCESS_BG_STATUS
SET STATUS_PROCESSED = 0
   ,MODIFY_DATE = GETDATE()
FROM PROCESS_BG_STATUS WITH (NOLOCK)
WHERE CODE = @CONT
AND COD_TYPE_PROCESS_BG = 1;

-- @SITUATION CONDITIONALS    
IF @SITUATION = 'APPROVED'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,1
	   ,'100 - APROVADA';

UPDATE [TRANSACTION]
SET COD_SITUATION = 1
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '100 - APROVADA')
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 100)
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,LOGICAL_NUMBER_ACQ = @LOGICAL_NUMBER_ACQ
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CONFIRMED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '603', 1;

INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,3
	   ,@DESCRIPTION;

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 200)
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '200 - CONFIRMADA')

OUTPUT INSERTED.AMOUNT,
INSERTED.COD_TTYPE,
INSERTED.BRAND,
INSERTED.PLOTS,
INSERTED.CODE,
INSERTED.PAN,
INSERTED.COD_ASS_DEPTO_TERMINAL,
INSERTED.BRAZILIAN_DATE INTO @DATA_TRANSACTION (TRANSACTION_AMOUNT, COD_TTYPE,
BRAND, PLOTS, NSU, PAN,
COD_ASS_DEPTO_TERMINAL, TRANSACTION_DATE)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;


INSERT INTO TRANSACTION_AUTH_QUEUE (TRANSACTION_DATE, NSU, AUTH_CODE, NSU_EXT, AMOUNT, TRANSACTION_TYPE,
BRAND, PLOTS, PAN,
COD_TRAN, MERCHANT_NAME, MERCHANT_DOC, COD_EC, COD_EQUIP,
COD_AFFILIATOR, MODEL_EQUIP)
	SELECT
		DT.TRANSACTION_DATE
	   ,DT.NSU
	   ,(SELECT TOP 1
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = @CONT
			AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')
	   ,(SELECT TOP 1
				[TRANSACTION_DATA_EXT].[VALUE]
			FROM TRANSACTION_DATA_EXT
			WHERE COD_TRAN = @CONT
			AND [TRANSACTION_DATA_EXT].[NAME] IN ('NSU', 'RCPTTXID', 'AUTO', '0'))
	   ,DT.TRANSACTION_AMOUNT
	   ,TRANSACTION_TYPE.CODE
	   ,DT.BRAND
	   ,DT.PLOTS
	   ,DT.PAN
	   ,@CONT
	   ,CE.NAME
	   ,CE.CPF_CNPJ
	   ,CE.COD_EC
	   ,ASS_DEPTO_EQUIP.COD_EQUIP
	   ,CE.COD_AFFILIATOR
	   ,EQUIPMENT_MODEL.CODIGO
	FROM @DATA_TRANSACTION DT
	JOIN TRANSACTION_TYPE
		ON TRANSACTION_TYPE.COD_TTYPE = DT.COD_TTYPE
	JOIN ASS_DEPTO_EQUIP
		ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = DT.COD_ASS_DEPTO_TERMINAL
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT CE
		ON BRANCH_EC.COD_EC = CE.COD_EC
	JOIN EQUIPMENT
		ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
	JOIN EQUIPMENT_MODEL
		ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL


END;
ELSE
IF @SITUATION = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,22
	   ,'206 - AGUARDANDO TITULOS';

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
UPDATE [TRANSACTION]
SET COD_SITUATION = 22
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = 206
   ,COMMENT = '206 - AGUARDANDO TITULOS'
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'PROCESSING UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,21
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 21
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'UNDONE FAIL'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,23
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 23
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'DENIED ACQUIRER'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,2
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 2
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'BLOCKED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,14
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;
IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;


--- REPROCESS FINANCIAL CALENDAR    

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE    
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;


ELSE
IF @SITUATION = 'AWAITING PAYMENT'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,4
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

--UPDATE TRANSACTION_TITLES    
--SET TRANSACTION_TITLES.COD_SITUATION = 4    
--   ,MODIFY_DATE = GETDATE()    
--   ,COMMENT = @DESCRIPTION    
--   ,COD_FIN_CALENDAR = NULL    
--FROM TRANSACTION_TITLES WITH (NOLOCK)    
--INNER JOIN [TRANSACTION]    
-- ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN    
--WHERE [TRANSACTION].COD_TRAN = @CONT;    

EXEC [UP_STATUS_AWAITING_PAYMENT] @COD_TRAN = @CONT
								 ,@DESCRIPTION = @DESCRIPTION;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 4
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

--- REPROCESS FINANCIAL CALENDAR    

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE    
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR

END;
ELSE
IF @SITUATION = 'UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,10
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 10
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
IF @SITUATION = 'FAILED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;    
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,7
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 7
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 700)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CANCELED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '703', 1;
IF @SIT = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
BEGIN
SELECT
	@QTY = COUNT(*)
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
LEFT JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_CALENDAR =
		[TRANSACTION_TITLES].COD_FIN_CALENDAR
		AND FINANCE_CALENDAR.ACTIVE = 1
WHERE [TRANSACTION].COD_TRAN = @CONT
AND ISNULL(FINANCE_CALENDAR.COD_SITUATION,
TRANSACTION_TITLES.COD_SITUATION) NOT IN
(4, 20, 14);

IF @QTY > 0
THROW 60002, '704', 1;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @DATE_TRAN = CAST(dbo.FN_FUS_UTF(GETDATE()) AS DATE)
BEGIN


--- REPROCESS FINANCIAL CALENDAR    

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE    
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;

INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


END;

END;
ELSE
IF @SITUATION = 'CANCELED PARTIAL'
BEGIN
IF @SIT = 'CANCELED'
THROW 60002, '703', 1;

INSERT INTO RELEASE_ADJUSTMENTS (COD_EC, VALUE,
PREVISION_PAY_DATE,
COD_TYPEJUST, COMMENT,
COD_SITUATION, COD_USER,
COD_REQ, COD_BRANCH, COD_TRAN,
COD_TITLE_REF)
	SELECT
		CAST(TRANSACTION_TITLES.COD_EC AS INT) AS COD_EC
	   ,(CAST(
		(
		(
		(TRANSACTION_TITLES.AMOUNT *
		(1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 -
				(((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(
						DAY,
						TRANSACTION_TITLES.PREVISION_PAY_DATE,
						TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END,
				(TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS DECIMAL(22, 6)) *
		-1) AS VALUE
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE AS PREVISION_PAY_DATE
	   ,CAST(2 AS INT) AS COD_TYPEJUST
	   ,CAST(
		'CANCELAMENTO PARCIAL, NSU: ' + [TRANSACTION].CODE AS VARCHAR(200)) AS COMMENT
	   ,CAST(4 AS INT) AS COD_SITUATION
	   ,NULL AS CODUSER
	   ,NULL AS COD_REQ
	   ,CAST([COMMERCIAL_ESTABLISHMENT].COD_EC AS INT) AS COD_BRANCH
	   ,CAST([TRANSACTION].COD_TRAN AS INT) AS COD_TRAN
	   ,CAST([TRANSACTION_TITLES].COD_TITLE AS INT) AS COD_TITLE_REF
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	INNER JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
	INNER JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].COD_EC = [TRANSACTION_TITLES].COD_EC
	LEFT JOIN FINANCE_CALENDAR
		ON FINANCE_CALENDAR.COD_FIN_CALENDAR =
			[TRANSACTION_TITLES].COD_FIN_CALENDAR
			AND FINANCE_CALENDAR.ACTIVE = 1
	WHERE [TRANSACTION].COD_TRAN = @CONT
	AND ISNULL(FINANCE_CALENDAR.COD_SITUATION,
	TRANSACTION_TITLES.COD_SITUATION) NOT IN (4, 20);

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION_TITLES]
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES].COD_SITUATION = 4;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES_COST].COD_SITUATION = 4;


DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

--EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE    
INSERT INTO PROCESSING_QUEUE (COD_EC)
	VALUES (@COD_EC_TITTLE)


FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;


END;

GO
--ST-1777

GO

--ST-1801

GO
 

IF OBJECT_ID('SP_LS_PROD_AFF') IS NOT NULL
DROP PROCEDURE [SP_LS_PROD_AFF];

GO
CREATE PROCEDURE [SP_LS_PROD_AFF]
 /*----------------------------------------------------------------------------------------                                                              
 View Name: [SP_LS_PROD_AFF]                                                              
 Project.......: TKPP                                                              
 ----------------------------------------------------------------------------------------                                                              
 Author                          VERSION        Date                        Description                                                              
 ---------------------------------------------------------------------------------------                                                               
 Caike Uch?a                       V2         27/01/2021            ADD COD_EC_TO_ASS                                                
---------------------------------------------------------------------------------------*/        
(  
@COD_AFF INT,
@COD_EC_TO_ASS INT
)  
AS  
BEGIN

SELECT
	[TRANSACTION_PRODUCTS].[NAME] AS [PRD_NAME]
   ,[AFFILIATOR].[NAME] AS [AFF_NAME]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME] AS [EC_NAME]
   ,[TRANSACTION_PRODUCTS].[COD_TRAN_PROD]
   ,[AFFILIATOR].[COD_AFFILIATOR]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
   ,@COD_EC_TO_ASS AS [COD_EC_TO_ASS]
FROM [TRANSACTION_PRODUCTS]
JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [TRANSACTION_PRODUCTS].[COD_AFILIATOR]
		AND [AFFILIATOR].[COD_AFFILIATOR] = @COD_AFF
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_PRODUCTS].[COD_EC]
WHERE [TRANSACTION_PRODUCTS].[ACTIVE] = 1;



END;

GO
--ST-1801
GO
--SD-93
GO
 

IF OBJECT_ID('SP_GW_LS_DETAILS_PLAN_ESTABLISHMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_LS_DETAILS_PLAN_ESTABLISHMENT];

GO

CREATE PROCEDURE [dbo].[SP_GW_LS_DETAILS_PLAN_ESTABLISHMENT]  
/*----------------------------------------------------------------------------------------            
Procedure Name: [SP_GW_LS_DETAILS_PLAN_ESTABLISHMENT]    Project.......: TKPP            
------------------------------------------------------------------------------------------            
Author                          VERSION        Date                            Description            
------------------------------------------------------------------------------------------            
Marcus Gall                       V1         19/06/2020                          Creation          
Caike uchoa                       v2         25/11/2020                        add corre??o cod_opt_plan  
------------------------------------------------------------------------------------------*/ 
(@COD_EC INT,  
@COD_AFFILIATOR INT)  
AS  
BEGIN
  
  
   
  
  
  
    IF ( SELECT
		COUNT(*)
	FROM [PLAN]
	JOIN ASS_TAX_DEPART
		ON ASS_TAX_DEPART.COD_PLAN = [PLAN].COD_PLAN
	JOIN PLAN_CATEGORY
		ON PLAN_CATEGORY.COD_PLAN_CATEGORY = [PLAN].COD_PLAN_CATEGORY
	JOIN TYPE_PLAN
		ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN
	JOIN TRANSACTION_TYPE
		ON TRANSACTION_TYPE.COD_TTYPE = ASS_TAX_DEPART.COD_TTYPE
	JOIN BRAND
		ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
	JOIN SOURCE_TRANSACTION
		ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = ASS_TAX_DEPART.COD_SOURCE_TRAN
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
	AND ASS_TAX_DEPART.ACTIVE = 1)
= 0
THROW 61067, 'THIS ESTABLISHMENT DOES NOT HAVE AN ASSOCIATED PLAN', 1;




SELECT
	PLANS.COD_PLAN
   ,PLANS.[NAME_PLAN]
   ,PLANS.[DESCRIPTION]
   ,PLANS.CATEGORY
   ,PLANS.TYPE_PLAN
   ,PLANS.BRAND_GROUP
   ,PLANS.TRANSACTION_TYPE
   ,PLANS.QTY_INI_PLOTS
   ,PLANS.QTY_FINAL_PLOTS
   ,SUM(PLANS.ANTICIPATION_PERCENTAGE) AS ANTICIPATION_PERCENTAGE
   ,SUM(INTERVAL_DEBIT) AS INTERVAL_DEBIT
   ,SUM(INTERVAL_CREDIT_A_VISTA) AS INTERVAL_CREDIT_A_VISTA
   ,SUM(INTERVAL_CREDIT_PARCELADO) AS INTERVAL_CREDIT_PARCELADO
   ,SUM(INTERVAL_ONLINE) AS INTERVAL_ONLINE
   ,SUM(PLANS.PARCENTAGE) AS PARCENTAGE
   ,SUM(PLANS.RATE) AS RATE
   ,PLANS.PLAN_OPTION AS PLAN_OPTION
   ,PLANS.EQUIPMENT_MODEL
   ,MODIFY_DATE_DEPART
   ,USER_IDENTIFICATION
FROM (SELECT
		COMMERCIAL_ESTABLISHMENT.COD_EC
	   ,[PLAN].COD_PLAN
	   ,[PLAN].CODE AS [NAME_PLAN]
	   ,[PLAN].[DESCRIPTION]
	   ,PLAN_CATEGORY.CATEGORY
	   ,TYPE_PLAN.CODE AS TYPE_PLAN
	   ,BRAND.[GROUP] AS BRAND_GROUP
	   ,TRANSACTION_TYPE.CODE AS TRANSACTION_TYPE
	   ,ASS_TAX_DEPART.QTY_INI_PLOTS
	   ,ASS_TAX_DEPART.QTY_FINAL_PLOTS
	   ,CASE
			WHEN (SOURCE_TRANSACTION.COD_SOURCE_TRAN = 1) THEN 'SITE'
			ELSE EQUIPMENT_MODEL.CODIGO
		END AS EQUIPMENT_MODEL
	   ,ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE
	   ,CASE
			WHEN ASS_TAX_DEPART.QTY_INI_PLOTS = 1 AND
				ASS_TAX_DEPART.QTY_FINAL_PLOTS = 1 AND
				ASS_TAX_DEPART.COD_TTYPE = 2 AND
				SOURCE_TRANSACTION.COD_SOURCE_TRAN = 2 THEN ASS_TAX_DEPART.INTERVAL
			ELSE 0
		END AS [INTERVAL_DEBIT]
	   ,CASE
			WHEN ASS_TAX_DEPART.QTY_INI_PLOTS = 1 AND
				ASS_TAX_DEPART.QTY_FINAL_PLOTS = 1 AND
				ASS_TAX_DEPART.COD_TTYPE = 1 AND
				SOURCE_TRANSACTION.COD_SOURCE_TRAN = 2 THEN ASS_TAX_DEPART.INTERVAL
			ELSE 0
		END AS [INTERVAL_CREDIT_A_VISTA]
	   ,CASE
			WHEN ASS_TAX_DEPART.QTY_INI_PLOTS >= 1 AND
				ASS_TAX_DEPART.QTY_FINAL_PLOTS > 1 AND
				ASS_TAX_DEPART.COD_TTYPE = 1 AND
				SOURCE_TRANSACTION.COD_SOURCE_TRAN = 2 THEN ASS_TAX_DEPART.INTERVAL
			ELSE 0
		END AS [INTERVAL_CREDIT_PARCELADO]
	   ,CASE
			WHEN SOURCE_TRANSACTION.COD_SOURCE_TRAN = 1 THEN ASS_TAX_DEPART.INTERVAL
			ELSE 0
		END AS [INTERVAL_ONLINE]
	   ,PARCENTAGE
	   ,RATE
	   ,CASE
			WHEN ASS_TAX_DEPART.COD_MODEL IS NOT NULL THEN 'TERMINAL_PLAN'
			ELSE NULL
		END AS PLAN_OPTION
	   ,dbo.FN_FUS_UTF(ASS_TAX_DEPART.CREATED_AT) AS MODIFY_DATE_DEPART
	   ,USERS.COD_ACCESS AS USER_IDENTIFICATION
	FROM [PLAN]
	JOIN ASS_TAX_DEPART
		ON ASS_TAX_DEPART.COD_PLAN = [PLAN].COD_PLAN
	JOIN PLAN_CATEGORY
		ON PLAN_CATEGORY.COD_PLAN_CATEGORY = [PLAN].COD_PLAN_CATEGORY
	JOIN TYPE_PLAN
		ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN
	JOIN TRANSACTION_TYPE
		ON TRANSACTION_TYPE.COD_TTYPE = ASS_TAX_DEPART.COD_TTYPE
	JOIN BRAND
		ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
	JOIN SOURCE_TRANSACTION
		ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = ASS_TAX_DEPART.COD_SOURCE_TRAN
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	LEFT JOIN EQUIPMENT_MODEL
		ON EQUIPMENT_MODEL.COD_MODEL = ASS_TAX_DEPART.COD_MODEL
	LEFT JOIN USERS
		ON USERS.COD_USER = ASS_TAX_DEPART.COD_USER
	--LEFT JOIN PLAN_OPTION  
	--    ON PLAN_OPTION.COD_PLAN_OPT = [PLAN].COD_PLAN_OPT  
	WHERE ASS_TAX_DEPART.ACTIVE = 1) AS PLANS
WHERE PLANS.COD_EC = @COD_EC
GROUP BY PLANS.COD_PLAN
		,PLANS.[NAME_PLAN]
		,PLANS.[DESCRIPTION]
		,PLANS.CATEGORY
		,PLANS.TYPE_PLAN
		,PLANS.BRAND_GROUP
		,PLANS.TRANSACTION_TYPE
		,PLANS.QTY_INI_PLOTS
		,PLANS.QTY_FINAL_PLOTS
		,PLANS.PLAN_OPTION
		,PLANS.EQUIPMENT_MODEL
		,MODIFY_DATE_DEPART
		,USER_IDENTIFICATION
END


GO
 

IF OBJECT_ID('SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT];

GO
CREATE PROCEDURE [dbo].[SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT]    
/*----------------------------------------------------------------------------------------          
Procedure Name: [SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Marcus Gall                         V1      2020-07-13          ET-921: Handle Plan by Equipment    
Caike Uchoa                         v2      2020-10-16                       return cod_plan  
Caike Uchoa                         v3      2021-02-05                     add cod_affiliator
------------------------------------------------------------------------------------------*/   
(  
@TP_RATES_EC_MODEL_EQUIPMENT [TP_RATES_EC_MODEL_EQUIPMENT] READONLY,    
@COD_EC INT,    
@COD_T_PLAN VARCHAR(100) = NULL)    
AS    
BEGIN
  
    
    
 DECLARE @COD_DEPTO_BRANCH INT;
  
    
    
 DECLARE @COD_USER INT;
  
    
    
 DECLARE @COD_AFFILIATOR INT;
  
    
    
 DECLARE @QTD_TAX INT;
  
    
    
 DECLARE @COUNT_TAX_EQUALS INT;
  
    
    
 DECLARE @_COD_PLAN INT;
  
    
    
 DECLARE @COD_T_PLAN_INS INT = 0;

SELECT
	@COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
   ,@QTD_TAX = COUNT(*)
   ,@_COD_PLAN = ASS_TAX_DEPART.COD_PLAN
   ,@COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
FROM ASS_TAX_DEPART
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND ASS_TAX_DEPART.ACTIVE = 1
GROUP BY ASS_TAX_DEPART.COD_DEPTO_BRANCH
		,ASS_TAX_DEPART.COD_PLAN
		,AFFILIATOR.COD_AFFILIATOR


SET @COD_T_PLAN_INS = (SELECT
		CASE
			WHEN @COD_T_PLAN = 'PARCELADO' THEN 1
			WHEN @COD_T_PLAN = 'AGRUPADO' THEN 2
			ELSE NULL
		END);

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
AND ACTIVE = 1;

SELECT
	@COD_USER = COD_USER_INT
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @COD_AFFILIATOR
AND ACTIVE = 1;

INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_DEPTO_BRANCH,
COD_USER,
EFFECTIVE_PERCENTAGE,
COD_MODEL)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,@_COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,@COD_DEPTO_BRANCH
	   ,@COD_USER
	   ,0
	   ,ITEM.COD_MODEL
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE DEPARTMENTS_BRANCH
SET COD_T_PLAN = ISNULL(@COD_T_PLAN_INS, COD_T_PLAN)
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH

SELECT
	@_COD_PLAN AS COD_PLAN

END;


GO
 

IF OBJECT_ID('SP_DISABLE_TX_PLAN') IS NOT NULL
DROP PROCEDURE [SP_DISABLE_TX_PLAN];

GO
CREATE PROCEDURE [dbo].[SP_DISABLE_TX_PLAN]  
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_DISABLE_TX_PLAN]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION        Date                            Description  
------------------------------------------------------------------------------------------  
Kennedy Alef     V1    27/07/2018      Creation  
------------------------------------------------------------------------------------------*/  
(  
@COD_PLAN INT  
)  
AS  
BEGIN

UPDATE TAX_PLAN
SET ACTIVE = 0
WHERE COD_PLAN = @COD_PLAN
AND ACTIVE = 1

UPDATE [PLAN]
SET MODIFY_DATE = GETDATE()


END
GO
 

IF OBJECT_ID('SP_GW_REG_TAX_PLAN_AFFILIATOR') IS NOT NULL
DROP PROCEDURE [SP_GW_REG_TAX_PLAN_AFFILIATOR];

GO
CREATE PROCEDURE [dbo].[SP_GW_REG_TAX_PLAN_AFFILIATOR]        
/*----------------------------------------------------------------------------------------          
Procedure Name: [SP_GW_REG_TAX_PLAN_AFFILIATOR]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Caike Uchôa                       V1          2020-05-29                        Creation        
------------------------------------------------------------------------------------------*/          
(          
 @TP_RATES_EC [TP_RATES_EC] READONLY    
)    
AS    
BEGIN
     
    
DECLARE @CONT INT = 0;

SELECT
	@CONT = COUNT(*)
FROM TAX_PLAN
JOIN @TP_RATES_EC TP_RATE
	ON TP_RATE.COD_PLAN = TAX_PLAN.COD_PLAN
		AND TP_RATE.COD_TRAN_TYPE = TAX_PLAN.COD_TTYPE
		AND TP_RATE.QTY_INI_PL = TAX_PLAN.QTY_INI_PLOTS
		AND TP_RATE.QTY_FINAL_FL = TAX_PLAN.QTY_FINAL_PLOTS
		AND TP_RATE.[PERCENTAGE] = TAX_PLAN.PARCENTAGE
		AND TP_RATE.RATE = TAX_PLAN.RATE
		AND TP_RATE.COD_BRAND = TAX_PLAN.COD_BRAND
		AND TP_RATE.COD_SOURCE_TRAN = TAX_PLAN.COD_SOURCE_TRAN
		AND ACTIVE = 1;

IF @CONT > 0
THROW 61001, 'TAX ALREADY REGISTERED TO THIS PLAN', 1;


INSERT INTO TAX_PLAN (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
EFFECTIVE_PERCENTAGE)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,ITEM.COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,0
	FROM @TP_RATES_EC ITEM

IF @@ROWCOUNT < 1

THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE [PLAN]
SET MODIFY_DATE = GETDATE()

WHERE COD_PLAN IN (SELECT DISTINCT
		COD_PLAN
	FROM @TP_RATES_EC ITEM)


END

GO
 

IF OBJECT_ID('SP_GW_REG_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_REG_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT];

GO
CREATE PROCEDURE [dbo].[SP_GW_REG_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_GW_REG_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                  VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Marcus Gall    V1   2020-07-13  ET-921: Handle Plan by Equipment  
------------------------------------------------------------------------------------------*/ (@TP_RATES_EC_MODEL_EQUIPMENT [TP_RATES_EC_MODEL_EQUIPMENT] READONLY)  
AS  
BEGIN
  
  
  
 DECLARE @CONT INT = 0;

SELECT
	@CONT = COUNT(*)
FROM TAX_PLAN
JOIN @TP_RATES_EC_MODEL_EQUIPMENT TP_RATE
	ON TP_RATE.COD_PLAN = TAX_PLAN.COD_PLAN
		AND TP_RATE.COD_TRAN_TYPE = TAX_PLAN.COD_TTYPE
		AND TP_RATE.QTY_INI_PL = TAX_PLAN.QTY_INI_PLOTS
		AND TP_RATE.QTY_FINAL_FL = TAX_PLAN.QTY_FINAL_PLOTS
		AND TP_RATE.[PERCENTAGE] = TAX_PLAN.PARCENTAGE
		AND TP_RATE.RATE = TAX_PLAN.RATE
		AND TP_RATE.COD_BRAND = TAX_PLAN.COD_BRAND
		AND TP_RATE.COD_SOURCE_TRAN = TAX_PLAN.COD_SOURCE_TRAN
		AND TP_RATE.COD_MODEL = TAX_PLAN.COD_MODEL
		AND ACTIVE = 1;

IF @CONT > 0
THROW 61001, 'TAX ALREADY REGISTERED TO THIS PLAN', 1;


INSERT INTO TAX_PLAN (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
EFFECTIVE_PERCENTAGE,
COD_MODEL)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,ITEM.COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,0
	   ,ITEM.COD_MODEL
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE [PLAN]
SET MODIFY_DATE = GETDATE()

WHERE COD_PLAN IN (SELECT DISTINCT
		COD_PLAN
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM)

END
GO
 

IF OBJECT_ID('SP_GW_UP_TAX_PLAN_AFFILIATOR') IS NOT NULL
DROP PROCEDURE [SP_GW_UP_TAX_PLAN_AFFILIATOR];

GO
  
CREATE PROCEDURE [dbo].[SP_GW_UP_TAX_PLAN_AFFILIATOR]        
/*----------------------------------------------------------------------------------------          
Procedure Name: [SP_GW_UP_TAX_PLAN_AFFILIATOR]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Caike Uchôa                       V1          2020-06-05                        Creation        
------------------------------------------------------------------------------------------*/          
(          
 @TP_RATES_EC [TP_RATES_EC] READONLY    
)    
AS    
BEGIN
     
    
DECLARE @COD_PLAN INT;
--DECLARE @CONT INT = 0;    
--DECLARE @COUNT_TAX INT;    
--DECLARE @COUNT_TAX_EQUALS INT;    


SELECT
	@COD_PLAN =
	TP.COD_PLAN
FROM @TP_RATES_EC TP
JOIN [PLAN]
	ON [PLAN].COD_PLAN = TP.COD_PLAN



UPDATE TAX_PLAN
SET ACTIVE = 0
WHERE COD_PLAN = @COD_PLAN;

INSERT INTO TAX_PLAN (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
EFFECTIVE_PERCENTAGE)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,ITEM.COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,0
	FROM @TP_RATES_EC ITEM

IF @@ROWCOUNT < 1

THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE [PLAN]
SET MODIFY_DATE = GETDATE()

WHERE COD_PLAN IN (SELECT DISTINCT
		COD_PLAN
	FROM @TP_RATES_EC ITEM)



END
GO
 

IF OBJECT_ID('SP_GW_UP_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_UP_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT];

GO
  
CREATE PROCEDURE [dbo].[SP_GW_UP_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT]  
/*----------------------------------------------------------------------------------------          
Procedure Name: [SP_GW_UP_TAX_PLAN_AFFILIATOR_MODEL_EQUIPMENT]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Marcus Gall      V1   2020-07-13  ET-921: Handle Plan by Equipment    
------------------------------------------------------------------------------------------*/ (@TP_RATES_EC_MODEL_EQUIPMENT [TP_RATES_EC_MODEL_EQUIPMENT] READONLY)  
AS  
BEGIN
  
  
  
  
 DECLARE @COD_PLAN INT;

SELECT
	@COD_PLAN =
	TP.COD_PLAN
FROM @TP_RATES_EC_MODEL_EQUIPMENT TP
JOIN [PLAN]
	ON [PLAN].COD_PLAN = TP.COD_PLAN

UPDATE TAX_PLAN
SET ACTIVE = 0
WHERE COD_PLAN = @COD_PLAN;

INSERT INTO TAX_PLAN (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
EFFECTIVE_PERCENTAGE,
COD_MODEL)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,ITEM.COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,0
	   ,ITEM.COD_MODEL
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM

IF @@rowcount < 1

THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE [PLAN]
SET MODIFY_DATE = GETDATE()

WHERE COD_PLAN IN (SELECT DISTINCT
		COD_PLAN
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM)

END
GO
 

IF OBJECT_ID('SP_REG_TAX_PLAN') IS NOT NULL
DROP PROCEDURE [SP_REG_TAX_PLAN];

GO
  
CREATE PROCEDURE [DBO].[SP_REG_TAX_PLAN]                
    
/*****************************************************************************************************    
----------------------------------------------------------------------------------------                
Procedure Name: [SP_REG_TAX_PLAN]                
Project.......: TKPP                
------------------------------------------------------------------------------------------                
Author                          VERSION     Date                            Description                
------------------------------------------------------------------------------------------                
Kennedy Alef      V1      27/07/2018     Creation    
Lucas Aguiar      V2      18/06/2020    ET-920 Plano por modelo    
------------------------------------------------------------------------------------------    
*****************************************************************************************************/    
             
(    
 @COD_TRAN_TYPE        INT,     
 @QTY_INI_PL           INT,     
 @QTY_FINAL_FL         INT,     
 @PERCENT              DECIMAL(22, 6),     
 @RATE                 DECIMAL(22, 6),     
 @INTERVAL             INT,     
 @CODPLAN              INT,     
 @ANTICIPATION         DECIMAL(22, 6),     
 @PERCENTAGE_EFFECTIVE DECIMAL(22, 6),     
 @COD_BRAND            VARCHAR(100)   = NULL,     
 @COD_TAX_TYPE         INT            = NULL,     
 @COD_MODEL            INT            = NULL)    
AS    
BEGIN
  
    
    DECLARE @CONT INT= 0;
  
    
    DECLARE @INSIDECODE_BRANCH INT;
  
    
    BEGIN

SET @INSIDECODE_BRANCH = (SELECT
		[COD_BRAND]
	FROM [BRAND]
	WHERE [GROUP] = @COD_BRAND
	AND [COD_TTYPE] = @COD_TRAN_TYPE);


SELECT
	@CONT = COUNT(*)
FROM [TAX_PLAN]
WHERE [COD_TTYPE] = @COD_TRAN_TYPE
AND [QTY_INI_PLOTS] = @QTY_INI_PL
AND [QTY_FINAL_PLOTS] = @QTY_FINAL_FL
AND [PARCENTAGE] = @PERCENT
AND [RATE] = @RATE
AND [COD_PLAN] = @CODPLAN
AND [ACTIVE] = 1
AND [COD_BRAND] = @INSIDECODE_BRANCH
AND [COD_SOURCE_TRAN] = @COD_TAX_TYPE;

IF @CONT > 0
THROW 61001, 'TAX ALREADY REGISTERED TO THIS PLAN', 1;

INSERT INTO [TAX_PLAN] ([COD_TTYPE],
[QTY_INI_PLOTS],
[QTY_FINAL_PLOTS],
[PARCENTAGE],
[RATE],
[INTERVAL],
[COD_PLAN],
[ANTICIPATION_PERCENTAGE],
[EFFECTIVE_PERCENTAGE],
[COD_BRAND],
[COD_SOURCE_TRAN],
[COD_MODEL])
	VALUES (@COD_TRAN_TYPE, @QTY_INI_PL, @QTY_FINAL_FL, @PERCENT, @RATE, @INTERVAL, @CODPLAN, @ANTICIPATION, @PERCENTAGE_EFFECTIVE, @COD_BRAND, @COD_TAX_TYPE, @COD_MODEL);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER TAX_PLAN', 1;

UPDATE [PLAN]
SET MODIFY_DATE = GETDATE()
WHERE COD_PLAN = @CODPLAN

END;
END;
--SD-93
GO
--ET-1302
IF OBJECT_ID('SP_GW_CUSTOMER_INTEREST') IS NOT NULL BEGIN
DROP PROCEDURE SP_GW_CUSTOMER_INTEREST
END
GO
CREATE PROCEDURE SP_GW_CUSTOMER_INTEREST(  
    @COD_AFF INT,  
    @SERIAL VARCHAR(255),  
    @BRAND VARCHAR(255),  
    @AMOUNT DECIMAL(22, 6),  
    @COD_SOURCE_TRAN INT  
)  
AS  
BEGIN
  
  
    CREATE TABLE #INSTALLMENTS  
    (  
        INSTALLMENT INT  
    );
  
  
    DECLARE @COD_BRAND INT = NULL;
  
    DECLARE @COUNT INT = 1;
  
    DECLARE @DEPARTMENT_BRANCH INT = NULL;
  
    DECLARE @COD_MODEL INT = NULL;
  
    DECLARE @MERCHANT_NAME VARCHAR(255) = NULL;
  
    DECLARE @MERCHANT_DOC VARCHAR(255) = NULL;

SELECT
	@DEPARTMENT_BRANCH = DB.COD_DEPTO_BRANCH
   ,@COD_MODEL = EQUIPMENT.COD_MODEL
   ,@MERCHANT_NAME = CE.NAME
   ,@MERCHANT_DOC = CE.CPF_CNPJ
FROM EQUIPMENT
JOIN ASS_DEPTO_EQUIP ADE
	ON EQUIPMENT.COD_EQUIP = ADE.COD_EQUIP
		AND ADE.ACTIVE = 1
JOIN DEPARTMENTS_BRANCH DB
	ON ADE.COD_DEPTO_BRANCH = DB.COD_DEPTO_BRANCH
JOIN BRANCH_EC BE
	ON DB.COD_BRANCH = BE.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON BE.COD_EC = CE.COD_EC
WHERE EQUIPMENT.SERIAL = @SERIAL
AND CE.COD_AFFILIATOR = @COD_AFF

IF @DEPARTMENT_BRANCH IS NULL
THROW 81701, 'INVALID EQUIPMENT', 1;

SELECT
	@COD_BRAND = COD_BRAND
FROM BRAND
WHERE BRAND.NAME = @BRAND

IF @COD_BRAND IS NULL
THROW 81700, 'INVALID BRAND', 1;


WHILE @COUNT <= 12
BEGIN
INSERT INTO #INSTALLMENTS (INSTALLMENT)
	VALUES (@COUNT);
SET @COUNT += 1;
  
        END;

WITH CTE
AS
(SELECT
		@MERCHANT_NAME AS MERCHANT_NAME
	   ,@MERCHANT_DOC AS MERCHANT_DOC
	   ,I.INSTALLMENT
	   ,@AMOUNT ORIGINAL_VALUE
	   ,(SELECT
				dbo.FN_CalcClientValueRate(@AMOUNT, RATE, I.INSTALLMENT, PARCENTAGE)
			FROM ASS_TAX_DEPART
			WHERE COD_DEPTO_BRANCH = @DEPARTMENT_BRANCH
			AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
			AND ACTIVE = 1
			AND COD_BRAND = @COD_BRAND
			AND i.INSTALLMENT BETWEEN QTY_INI_PLOTS AND QTY_FINAL_PLOTS
			AND ([ASS_TAX_DEPART].COD_MODEL = @COD_MODEL
			OR [ASS_TAX_DEPART].COD_MODEL IS NULL))
		AS CALCULATED_VALUE
	   ,(SELECT
				dbo.FN_CalcClientValueRate(@AMOUNT, RATE, I.INSTALLMENT, PARCENTAGE)
			FROM ASS_TAX_DEPART
			WHERE COD_DEPTO_BRANCH = @DEPARTMENT_BRANCH
			AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
			AND ACTIVE = 1
			AND COD_BRAND = @COD_BRAND
			AND i.INSTALLMENT BETWEEN QTY_INI_PLOTS AND QTY_FINAL_PLOTS
			AND ([ASS_TAX_DEPART].COD_MODEL = @COD_MODEL
			OR [ASS_TAX_DEPART].COD_MODEL IS NULL))
		- @AMOUNT AS INTEREST_VALUE
	FROM #INSTALLMENTS I)
SELECT
	*
FROM CTE
WHERE CALCULATED_VALUE IS NOT NULL
END
--ET-1302

GO

--ST-1839

IF ( SELECT
		COUNT(*)
	FROM ITEMS_SERVICES_AVAILABLE isa
	WHERE isa.NAME = 'PIX')
= 0
BEGIN
INSERT INTO ITEMS_SERVICES_AVAILABLE (NAME, DESCRIPTION, CODE, ACTIVE)
	VALUES ('PIX', 'PIX', 23, 1);
END

GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'PIX_ACCEPTED'
	AND object_id = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT ADD PIX_ACCEPTED INT DEFAULT 0
END
GO

UPDATE COMMERCIAL_ESTABLISHMENT
SET PIX_ACCEPTED = 0
WHERE PIX_ACCEPTED IS NULL

GO

IF COL_LENGTH('BRAND', 'VISIBLE') IS NULL
	ALTER TABLE BRAND ADD VISIBLE INT DEFAULT 1

GO


IF ( SELECT
		COUNT(*)
	FROM BRAND b
	WHERE b.NAME = 'PIX')
= 0
INSERT INTO BRAND (NAME, [GROUP], COD_TTYPE, COD_TYPE_BRAND, GEN_TITLES, AVAILABLE_ONLINE, VISIBLE)
	VALUES ('PIX', 'PIX', 2, 2, 0, 0, 0)

GO


UPDATE BRAND
SET VISIBLE = 1
WHERE [NAME] <> 'PIX'

GO

IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('REPORT_TRANSACTIONS_EXP')
	AND name = 'PIX_TAX_EC')
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD PIX_TAX_EC DECIMAL(22, 6) NULL
END
GO

IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('REPORT_TRANSACTIONS_EXP')
	AND name = 'PIX_TAX_TYPE')
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD PIX_TAX_TYPE VARCHAR(16) NULL
END
GO

GO

IF OBJECT_ID('SP_LS_BRAND') IS NOT NULL
DROP PROCEDURE SP_LS_BRAND
GO
CREATE PROCEDURE [dbo].[SP_LS_BRAND]
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_LS_BRAND]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef     V1    27/07/2018      Creation    
------------------------------------------------------------------------------------------*/ (@COD_COMP INT)
AS
BEGIN
SELECT
	BRAND.[NAME] AS BRAND
   ,COD_BRAND AS BRANDINSIDECODE
   ,COD_TTYPE AS TRANSACTIONTYPEINSIDECODE
   ,[GROUP] AS BRAND_GROUP
   ,TYPE_BRAND.NAME AS 'TYPE_BRAND'
   ,AVAILABLE_ONLINE [AvailableOnline]
FROM BRAND
INNER JOIN TYPE_BRAND
	ON TYPE_BRAND.COD_TYPE_BRAND = BRAND.COD_TYPE_BRAND
WHERE BRAND.VISIBLE = 1;
END

GO

IF OBJECT_ID('VW_COMPANY_EC_BR_DEP_EQUIP') IS NOT NULL
DROP VIEW VW_COMPANY_EC_BR_DEP_EQUIP
GO
CREATE VIEW [dbo].[VW_COMPANY_EC_BR_DEP_EQUIP]        
AS
SELECT
	VW_COMPANY_EC_BR_DEP.MCC
   ,VW_COMPANY_EC_BR_DEP.COMPANY
   ,VW_COMPANY_EC_BR_DEP.COD_COMP
   ,VW_COMPANY_EC_BR_DEP.FIREBASE_NAME
   ,VW_COMPANY_EC_BR_DEP.EC AS TRADING_NAME_BR
   ,VW_COMPANY_EC_BR_DEP.COD_EC
   ,VW_COMPANY_EC_BR_DEP.CPF_CNPJ_EC
   ,VW_COMPANY_EC_BR_DEP.SITUATION_EC
   ,VW_COMPANY_EC_BR_DEP.BRANCH_NAME
   ,VW_COMPANY_EC_BR_DEP.TRADING_NAME_BR AS EC
   ,VW_COMPANY_EC_BR_DEP.COD_BRANCH
   ,VW_COMPANY_EC_BR_DEP.CPF_CNPJ_BR
   ,VW_COMPANY_EC_BR_DEP.COD_DEPTO_BR
   ,VW_COMPANY_EC_BR_DEP.DEPARTMENT
   ,VW_COMPANY_EC_BR_DEP.SEGMENTS
   ,VW_COMPANY_EC_BR_DEP.MERCHANT_CODE
   ,ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL
   ,EQUIPMENT.COD_EQUIP
   ,EQUIPMENT.SERIAL
   ,EQUIPMENT.TID
   ,CELL_OPERATOR.NAME AS OPERATOR
   ,EQUIPMENT.PUK
   ,EQUIPMENT.CHIP
   ,EQUIPMENT.ACTIVE
   ,DATA_EQUIPMENT_AC.CODE
FROM VW_COMPANY_EC_BR_DEP
INNER JOIN ASS_DEPTO_EQUIP
	ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP.COD_DEPTO_BR
INNER JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
LEFT JOIN CELL_OPERATOR
	ON CELL_OPERATOR.COD_OPER = EQUIPMENT.COD_OPER
LEFT JOIN DATA_EQUIPMENT_AC
	ON ASS_DEPTO_EQUIP.COD_EQUIP = DATA_EQUIPMENT_AC.COD_EQUIP
WHERE ASS_DEPTO_EQUIP.ACTIVE = 1
AND EQUIPMENT.ACTIVE = 1

GO
IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
	AND name = 'CIELO_CODE')
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD CIELO_CODE VARCHAR(255);
END
GO

IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
	AND name = 'PIX_KEY')
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD PIX_KEY VARCHAR(255);
END
GO
IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('COMMERCIAL_ESTABLISHMENT')
	AND name = 'PIX_TCU')
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD PIX_TCU INT;
END
GO

IF NOT EXISTS (SELECT
		COD_AC
	FROM ACQUIRER
	WHERE CODE = 'PIX')
BEGIN
INSERT INTO ACQUIRER (CODE, NAME, COD_USER, ALIAS, SUBTITLE, ACTIVE, [GROUP], LOGICAL_NUMBER, COD_SEG_GROUP,
ONLINE, ACQ_DOCUMENT)
	VALUES ('PIX', 'PIX', NULL, 'PIX', 'PIX', 1, 'PIX', 0, NULL, NULL, '26994558000123')
END
GO

-- add ASS_TR_TYPE_COMP

DECLARE @COD_TTYPE INT, @COD_AC INT, @COD_COMP INT = 8, @COD_BRAND INT, @SOURCE_TRAN INT

SELECT
	@COD_TTYPE = COD_TTYPE
   ,@COD_BRAND = COD_BRAND
FROM BRAND
SELECT
	@COD_AC = COD_AC
FROM ACQUIRER
WHERE NAME = 'PIX'
SELECT
	@SOURCE_TRAN = COD_SOURCE_TRAN
FROM SOURCE_TRANSACTION
WHERE CODE = 'PRESENCIAL'

IF NOT EXISTS (SELECT
		COD_ASS_TR_COMP
	FROM ASS_TR_TYPE_COMP
	WHERE COD_AC = @COD_AC
	AND COD_BRAND = @COD_BRAND)
BEGIN
INSERT INTO ASS_TR_TYPE_COMP (COD_USER, COD_TTYPE, COD_AC, COD_COMP, MODIFY_DATE, CODE, TAX_VALUE, PLOT_INI,
PLOT_END, INTERVAL, COD_BRAND, COD_SOURCE_TRAN)
	VALUES (NULL, @COD_TTYPE, @COD_AC, @COD_COMP, NULL, '01', 0, 1, 1, 1, @COD_BRAND, @SOURCE_TRAN)
END

IF NOT EXISTS (SELECT
		COD_PR_ACQ
	FROM PRODUCTS_ACQUIRER
	WHERE COD_AC = @COD_AC
	AND COD_BRAND = @COD_BRAND)
BEGIN
INSERT INTO PRODUCTS_ACQUIRER (COD_TTYPE, COD_AC, NAME, EXTERNALCODE, COD_BRAND, PLOT_VALUE, IS_SIMULATED,
COD_SOURCE_TRAN, VISIBLE)
	VALUES (@COD_TTYPE, @COD_AC, 'À vista', '01', @COD_BRAND, 1, 0, @SOURCE_TRAN, 0)
END
GO

IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('TRANSACTION_SERVICES')
	AND name = 'SERVICE_TAX')
BEGIN
ALTER TABLE TRANSACTION_SERVICES
ADD SERVICE_TAX DECIMAL(22, 6) NULL
END
GO

IF NOT EXISTS (SELECT
		*
	FROM sys.columns
	WHERE object_id = OBJECT_ID('TRANSACTION_SERVICES')
	AND name = 'TAX_TYPE')
BEGIN
ALTER TABLE TRANSACTION_SERVICES
ADD TAX_TYPE VARCHAR(16) NULL
END
GO


IF OBJECT_ID('SP_VALIDATE_PIX_TRANSACTION') IS NOT NULL
DROP PROCEDURE SP_VALIDATE_PIX_TRANSACTION
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_PIX_TRANSACTION]    
/*----------------------------------------------------------------------------------------          
  Author        VERSION     Date      Description          
------------------------------------------------------------------------------------------          
  Luiz Aquino   V1        2020-10-14   Created       
------------------------------------------------------------------------------------------*/    
(    
    @TERMINALID INT,    
    @AMOUNT DECIMAL(22, 6),    
    @PAN VARCHAR(100),/*-- ENVIAR ENDTOENDID --*/    
    @TRCODE VARCHAR(200),    
    @TERMINALDATE DATETIME,    
    @HOLDER_NAME VARCHAR(100) = NULL,    
    @HOLDER_DOC VARCHAR(100) = NULL    
) AS
    
BEGIN
  
    
    
    DECLARE @CODTX INT;
  
    
    DECLARE @CODPLAN INT;
  
    
    DECLARE @INTERVAL INT;
  
    
    DECLARE @TERMINALACTIVE INT;
  
    
    DECLARE @CODEC INT;
  
    
    DECLARE @CODASS INT;
  
    
    DECLARE @COD_ASS_TR_COMP INT;
  
    
    DECLARE @COMPANY INT;
  
    
    DECLARE @BRANCH INT = 0;
  
    
    DECLARE @TYPETRAN INT;
  
    
    DECLARE @ACTIVE_EC INT;
  
    
    DECLARE @COD_COMP INT;
  
    
    DECLARE @LIMIT DECIMAL(22, 6);
  
    
    DECLARE @COD_AFFILIATOR INT;
  
    
    DECLARE @PLAN_AFF INT;
  
    
    DECLARE @CODTR_RETURN INT;
  
    
    DECLARE @EC_TRANS INT;
  
    
    DECLARE @GEN_TITLES INT;
  
    
    DECLARE @COD_RISK_SITUATION INT;
  
    
    DECLARE @COD_BRAND INT;
  
    
    DECLARE @COD_TTYPE INT;
  
    
    DECLARE @QTY_PLOTS INT = 1;
  
    
    DECLARE @BRAND VARCHAR(65)
  
    
    DECLARE @TYPE VARCHAR(100)
  
    
    DECLARE @COD_AC INT;
  
    
    DECLARE @CODPROD_ACQ INT;

SELECT
	@COD_BRAND = COD_BRAND
   ,@COD_TTYPE = B.COD_TTYPE
   ,@BRAND = B.NAME
   ,@TYPE = TT.NAME
FROM BRAND B (NOLOCK)
JOIN TRANSACTION_TYPE(NOLOCK) TT
	ON B.COD_TTYPE = TT.COD_TTYPE
WHERE B.NAME = 'PIX'

SELECT
	@COD_AC = COD_AC
FROM ACQUIRER
WHERE CODE = 'PIX'

SELECT TOP 1
	@CODTX = [ATD].[COD_ASS_TX_DEP]
   ,@CODPLAN = [ATD].[COD_ASS_TX_DEP]
   ,@INTERVAL = [ATD].[INTERVAL]
   ,@TERMINALACTIVE = [E].[ACTIVE]
   ,@CODEC = [CE].[COD_EC]
   ,@CODASS = [ADE].[COD_ASS_DEPTO_TERMINAL]
   ,@COMPANY = [CE].[COD_COMP]
   ,@TYPETRAN = [ATD].[COD_TTYPE]
   ,@ACTIVE_EC = [CE].[ACTIVE]
   ,@BRANCH = [BE].[COD_BRANCH]
   ,@COD_COMP = [CE].[COD_COMP]
   ,@LIMIT = [CE].[TRANSACTION_LIMIT]
   ,@COD_AFFILIATOR = [CE].[COD_AFFILIATOR]
   ,@GEN_TITLES = [B].[GEN_TITLES]
   ,@COD_RISK_SITUATION = CE.COD_RISK_SITUATION
FROM [ASS_DEPTO_EQUIP] ADE
LEFT JOIN [EQUIPMENT](NOLOCK) E
	ON [E].[COD_EQUIP] = [ADE].[COD_EQUIP]
LEFT JOIN [DEPARTMENTS_BRANCH](NOLOCK) DB
	ON [DB].[COD_DEPTO_BRANCH] = [ADE].[COD_DEPTO_BRANCH]
LEFT JOIN [BRANCH_EC](NOLOCK) BE
	ON [BE].[COD_BRANCH] = [DB].[COD_BRANCH]
LEFT JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK) CE
	ON [CE].[COD_EC] = [BE].[COD_EC]
LEFT JOIN [ASS_TAX_DEPART](NOLOCK) ATD
	ON [ATD].[ACTIVE] = 1
		AND [ATD].[COD_DEPTO_BRANCH] = [DB].[COD_DEPTO_BRANCH]
		AND [ATD].[COD_SOURCE_TRAN] = 2
		AND [ATD].[QTY_INI_PLOTS] <= @QTY_PLOTS
		AND [ATD].[QTY_FINAL_PLOTS] >= @QTY_PLOTS
		AND [ATD].COD_TTYPE = @COD_TTYPE
		AND [ATD].COD_BRAND = @COD_BRAND
		AND ([ATD].COD_MODEL IS NULL
			OR [ATD].COD_MODEL = [E].COD_MODEL)
LEFT JOIN [BRAND](NOLOCK) B
	ON [B].[COD_BRAND] = [ATD].[COD_BRAND]
		AND [B].[COD_TTYPE] = [ATD].[COD_TTYPE]
		AND B.COD_BRAND = @COD_BRAND
WHERE [ADE].[COD_EQUIP] = @TERMINALID
AND [ADE].[ACTIVE] = 1;

SELECT
	@TYPETRAN
   ,@COMPANY
   ,@QTY_PLOTS
   ,@BRAND;

SET @EC_TRANS = @CODEC
  
    
    
    DECLARE @ERROR_MSG VARCHAR(100) = null, @ERROR_CODE VARCHAR(16)
  
    
    
    IF @ERROR_MSG IS NULL AND @AMOUNT > @LIMIT    
        BEGIN
SET @ERROR_MSG = '402 - Transaction limit value exceeded"d';
SET @ERROR_CODE = '402';
  
    
        END
  
    
    
    IF @ERROR_MSG IS NULL AND @CODTX IS NULL    
        BEGIN
SET @ERROR_MSG = '404 - PLAN/TAX NOT FOUND';
SET @ERROR_CODE = '404';
  
    
        END
  
    
    
    IF @ERROR_MSG IS NULL AND @COD_AFFILIATOR IS NOT NULL    
        BEGIN
SELECT TOP 1
	@PLAN_AFF = [COD_PLAN_TAX_AFF]
FROM [PLAN_TAX_AFFILIATOR](NOLOCK) PTA
WHERE [PTA].[ACTIVE] = 1
AND [PTA].[COD_AFFILIATOR] = @COD_AFFILIATOR
AND PTA.COD_SOURCE_TRAN = 2
AND [COD_TTYPE] = @TYPETRAN
AND COD_BRAND = @COD_BRAND
AND @QTY_PLOTS BETWEEN [QTY_INI_PLOTS] AND [QTY_FINAL_PLOTS];

IF @PLAN_AFF IS NULL
BEGIN
SET @ERROR_MSG = '404 - PLAN/TAX NOT FOUND TO AFFILIATOR';
SET @ERROR_CODE = '404';
  
    
                END
  
    
        END
  
    
    
    IF @ERROR_MSG IS NULL AND @TERMINALACTIVE = 0    
        BEGIN
SET @ERROR_MSG = '003 - Blocked terminal';
SET @ERROR_CODE = '003';
  
    
        END
  
    
    
    IF @ERROR_MSG IS NULL AND @COD_RISK_SITUATION <> 2    
        BEGIN
SET @ERROR_MSG = '009 - Blocked commercial establishment';
SET @ERROR_CODE = '009';
  
    
        END

SELECT
	@COD_ASS_TR_COMP = COD_ASS_TR_COMP
   ,@CODPROD_ACQ = PA.COD_PR_ACQ
FROM ASS_TR_TYPE_COMP ATTC
LEFT JOIN PRODUCTS_ACQUIRER PA
	ON PA.COD_AC = ATTC.COD_AC
		AND PA.COD_BRAND = ATTC.COD_BRAND
		AND PA.COD_TTYPE = ATTC.COD_TTYPE
WHERE ATTC.COD_AC = @COD_AC
AND ATTC.COD_TTYPE = @COD_TTYPE
AND ATTC.COD_BRAND = @COD_BRAND
AND @QTY_PLOTS BETWEEN ATTC.PLOT_INI AND ATTC.PLOT_END
AND ATTC.COD_SOURCE_TRAN = 2

IF @ERROR_MSG IS NULL
	AND @COD_ASS_TR_COMP = 0
BEGIN
SET @ERROR_MSG = '004 - Acquirer key not found for terminal';
SET @ERROR_CODE = '004';
  
    
        END
  
    
    
    IF @ERROR_MSG IS NOT NULL    
        BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = @COD_ASS_TR_COMP
								,@CODETR = @TRCODE
								,@COMMENT = @ERROR_MSG
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC;
THROW 60002, @ERROR_CODE, 1;
END

IF @ERROR_MSG IS NULL
BEGIN
EXECUTE [SP_REG_TRANSACTION] @AMOUNT
							,@PAN
							,@BRAND
							,@CODASS_DEPTO_TERMINAL = @CODASS
							,@COD_TTYPE = @TYPETRAN
							,@PLOTS = @QTY_PLOTS
							,@CODTAX_ASS = @CODTX
							,@CODAC = @COD_ASS_TR_COMP
							,@CODETR = @TRCODE
							,@TERMINALDATE = @TERMINALDATE
							,@COD_ASS_TR_ACQ = @COD_ASS_TR_COMP
							,@CODPROD_ACQ = @CODPROD_ACQ
							,@TYPE = @TYPE
							,@COD_COMP = @COD_COMP
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = 2
							,@CODE_SPLIT = NULL
							,@EC_TRANS = @EC_TRANS
							,@RET_CODTRAN = @CODTR_RETURN OUTPUT
							,@HOLDER_NAME = @HOLDER_NAME
							,@HOLDER_DOC = @HOLDER_DOC

DECLARE @COD_PIX_SERVICE INT
	   ,@TAX_PIX DECIMAL(22, 6)
	   ,@TAX_TYPE VARCHAR(16);

SELECT TOP 1
	@COD_PIX_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PIX'

SELECT
	@TAX_PIX = CAST(JSON_VALUE(CONFIG_JSON, '$.PixTax') AS DECIMAL(4, 2))
   ,@TAX_TYPE = CAST(JSON_VALUE(CONFIG_JSON, '$.PixChargeOption') AS VARCHAR(16))
FROM SERVICES_AVAILABLE
WHERE ACTIVE = 1
AND COD_ITEM_SERVICE = @COD_PIX_SERVICE
AND COD_EC = @CODEC


INSERT INTO TRANSACTION_SERVICES (COD_ITEM_SERVICE, COD_TRAN, MODIFY_DATE, COD_EC, SERVICE_TAX, TAX_TYPE)
	VALUES (@COD_PIX_SERVICE, @CODTR_RETURN, GETDATE(), @CODEC, @TAX_PIX, @TAX_TYPE)

SELECT
	@COD_ASS_TR_COMP AS [ACQUIRER]
   ,@TRCODE AS [TRAN_CODE]
   ,@CODTR_RETURN AS [COD_TRAN];
END
END
GO


IF OBJECT_ID('SP_PIX_TAX_INFO') IS NOT NULL
DROP PROCEDURE SP_PIX_TAX_INFO
GO
CREATE PROCEDURE [dbo].[SP_PIX_TAX_INFO]
/*----------------------------------------------------------------------------------------
  Author        VERSION     Date      Description
------------------------------------------------------------------------------------------
  Luiz Aquino   V1        2020-10-16  Created
------------------------------------------------------------------------------------------*/
(
    @TERMINALID INT/*-- ALTERAR PARA TERMINALID--*/
) AS
BEGIN

    DECLARE @COD_EC INT,
        @COD_AFF INT,
        @TAX_PIX DECIMAL(22, 6),
        @TAX_PIX_AFF DECIMAL(22, 6),
        @TAX_TYPE VARCHAR(16),
        @COD_PIX_SERVICE INT;

SELECT TOP 1
	@COD_PIX_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PIX'

SELECT
	@COD_AFF = COD_AFFILIATOR
   ,@COD_EC = COD_EC
FROM VW_COMPANY_EC_AFF_BR_DEP_EQUIP
WHERE COD_EQUIP = @TERMINALID;

SELECT
	@TAX_PIX = CAST(JSON_VALUE(CONFIG_JSON, '$.PixTax') AS DECIMAL(4, 2))
   ,@TAX_TYPE = CAST(JSON_VALUE(CONFIG_JSON, '$.PixChargeOption') AS VARCHAR(16))
FROM SERVICES_AVAILABLE
WHERE ACTIVE = 1
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFF)
AND COD_ITEM_SERVICE = @COD_PIX_SERVICE
AND COD_EC = @COD_EC;

-- SELECT @TAX_PIX_AFF = CAST(JSON_VALUE(CONFIG_JSON, '$.PixTax') AS DECIMAL(4, 2))
-- FROM SERVICES_AVAILABLE
-- WHERE ACTIVE = 1
--   AND COD_AFFILIATOR = @COD_AFF
--   AND COD_ITEM_SERVICE = @COD_PIX_SERVICE
--   AND COD_EC IS NULL;

SELECT
	@TAX_PIX [EC_PIX_TAX]
   ,@TAX_PIX_AFF [AFF_PIX_TAX]
   ,@TAX_TYPE [TAX_TYPE]
END
GO



IF OBJECT_ID('SP_CONTACT_DATA_EQUIP') IS NOT NULL
DROP PROCEDURE SP_CONTACT_DATA_EQUIP
GO
CREATE PROCEDURE [dbo].[SP_CONTACT_DATA_EQUIP]
/*----------------------------------------------------------------------------------------
Procedure Name: [SP_CONTACT_DATA_EQUIP]
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION         Date                            Description
------------------------------------------------------------------------------------------
Kennedy Alef                      V1         27/07/2018                           Creation
Fernando Henrique F. O            V2         03/04/2019                           Change
Lucas Aguiar                      v3         20-04-2019                   Descer se ? split ou n?o
Caike Uch?a                       v4         15/01/2020                     descer MMC padr?o para PF
Caike Uchoa                       v5         20/09/2020                    Add formatacao de strings
Elir Ribeiro                      v6         2021-01-28                   Add Rebate
------------------------------------------------------------------------------------------*/ (
    @TERMINALID INT,
    @COD_EC INT = NULL)
AS
BEGIN
SELECT TOP 1
	VW_COMPANY_EC_BR_DEP_EQUIP.CPF_CNPJ_BR
   ,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF
   ,[dbo].[FNC_REMOV_CARAC_ESP](
	VW_COMPANY_EC_BR_DEP_EQUIP.TRADING_NAME_BR) AS TRADING_NAME_BR
   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.BRANCH_NAME) AS BRANCH_NAME
   ,CASE
		WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'
		ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC
	END AS MCC
   ,COMMERCIAL_ESTABLISHMENT.CODE AS MERCHANT_CODE
   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.[ADDRESS]), 20) AS [ADDRESS]
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(ADDRESS_BRANCH.[NUMBER])) AS [NUMBER]
   ,ADDRESS_BRANCH.CEP
   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.COMPLEMENT), 0) AS COMPLEMENT
   ,[dbo].[FNC_REMOV_CARAC_ESP](NEIGHBORHOOD.NAME) AS NEIGHBORDHOOD
   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY.[NAME]) AS CITY
   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE].UF) AS [STATE]
   ,COUNTRY.INITIALS
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDI)) AS DDI
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDD)) AS DDD
   ,[dbo].[FNC_REMOV_LETRAS]([dbo].[FNC_REMOV_CARAC_ESP](CONTACT_BRANCH.[NUMBER])) AS TEL_NUMBER
   ,TYPE_CONTACT.NAME AS TYPE_CONTACT
   ,EQUIPMENT.COD_EQUIP
   ,VW_COMPANY_EC_BR_DEP_EQUIP.MERCHANT_CODE
   ,COMMERCIAL_ESTABLISHMENT.CIELO_CODE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 4
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 4)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 4
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 2)
			> 0 THEN 0
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 4
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
			> 0 THEN 1
		ELSE 0
	END AS [SPLIT]
   ,(
	CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 13
				AND ACTIVE = 1
				AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
			> 0 THEN 1
		ELSE 0
	END
	) AS MANY_MERCHANTS
   ,(
	CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 20
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 4)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 20
				AND ACTIVE = 1
				AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE COD_ITEM_SERVICE = 20
				AND ACTIVE = 1
				AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
				AND COD_EC IS NULL
				AND COD_OPT_SERV = 2)
			> 0 THEN 0
		ELSE 0
	END
	) AS REBATE
   ,EC_PARAM.CPF_CNPJ AS CNPJ_PARAM
   ,IIF(LEN(EC_PARAM.CPF_CNPJ) = 11, 'CPF',
	IIF(EC_PARAM.CPF_CNPJ IS NOT NULL, 'CNPJ', NULL)) AS TYPE_DOC_PARAM
	--,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF
   ,[dbo].[FNC_REMOV_CARAC_ESP](EC_PARAM.NAME) AS TRADING_NAME_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP](EC_PARAM.TRADING_NAME) AS BRANCH_NAME_PARAM
	--  ,CASE
	-- WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'
	-- ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC
	--END AS MCC_PARAM
   ,EC_PARAM.CODE AS MERCHANT_CODE_PARAM
   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADD_EC_PARAM.[ADDRESS]), 20) AS [ADDRESS_PARAM]
   ,[dbo].[FNC_REMOV_LETRAS](
	[dbo].FNC_REMOV_CARAC_ESP(ADD_EC_PARAM.[NUMBER])) AS [NUMBER_PARAM]
   ,ADD_EC_PARAM.CEP AS CEP_PARAM
   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADD_EC_PARAM.COMPLEMENT), 0) AS COMPLEMENT_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP](ENIGH_EC_PARAM.NAME) AS NEIGHBORDHOOD_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY_EC_PARAM.[NAME]) AS CITY_PARAM
   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE_EC_PARAM].UF) AS [STATE_PARAM]
   ,COUNTRY_EC_PARAM.INITIALS AS INITIALS_PARAM
   ,COMMERCIAL_ESTABLISHMENT.PIX_KEY
   ,ISNULL(COMMERCIAL_ESTABLISHMENT.PIX_TCU, 0) AS PIX_TCU
   ,(SELECT
			ACCOUNT
		FROM BANK_DETAILS_EC AS BK_DET
		JOIN BANKS
			ON BK_DET.COD_BANK = BANKS.COD_BANK
			AND BK_DET.COD_BANK = 324
		WHERE BK_DET.ACTIVE = 1
		AND BK_DET.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH)
	AS ACCOUNT_CELER
   ,(SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = 21
		AND ACTIVE = 1
		AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
	AS PIX
FROM VW_COMPANY_EC_BR_DEP_EQUIP
JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
JOIN STATE
	ON STATE.COD_STATE = CITY.COD_STATE
JOIN COUNTRY
	ON COUNTRY.COD_COUNTRY = STATE.COD_COUNTRY
JOIN CONTACT_BRANCH
	ON CONTACT_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
JOIN TYPE_CONTACT
	ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT
JOIN ASS_DEPTO_EQUIP
	ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_DEPTO_BR
JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PARAM
	ON EC_PARAM.COD_EC = ISNULL(@COD_EC, 0)
		AND EC_PARAM.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
LEFT JOIN BRANCH_EC BRANCH_PARAM
	ON EC_PARAM.COD_EC = BRANCH_PARAM.COD_EC
LEFT JOIN ADDRESS_BRANCH ADD_EC_PARAM
	ON ADD_EC_PARAM.COD_BRANCH = BRANCH_PARAM.COD_BRANCH
		AND ADD_EC_PARAM.ACTIVE = 1
LEFT JOIN NEIGHBORHOOD ENIGH_EC_PARAM
	ON ENIGH_EC_PARAM.COD_NEIGH = ADD_EC_PARAM.COD_NEIGH
LEFT JOIN CITY CITY_EC_PARAM
	ON CITY_EC_PARAM.COD_CITY = ENIGH_EC_PARAM.COD_CITY
LEFT JOIN STATE STATE_EC_PARAM
	ON STATE_EC_PARAM.COD_STATE = CITY_EC_PARAM.COD_STATE
LEFT JOIN COUNTRY COUNTRY_EC_PARAM
	ON COUNTRY_EC_PARAM.COD_COUNTRY = STATE_EC_PARAM.COD_COUNTRY
WHERE EQUIPMENT.COD_EQUIP = @TERMINALID
AND ASS_DEPTO_EQUIP.ACTIVE = 1
ORDER BY ADDRESS_BRANCH.COD_ADDRESS DESC

END
GO

IF OBJECT_ID('SP_UPDATE_PIX_ACCEPTED') IS NOT NULL
DROP PROCEDURE SP_UPDATE_PIX_ACCEPTED
GO
CREATE PROCEDURE SP_UPDATE_PIX_ACCEPTED(
    @TERMINALID INT,
    @PIX_KEY VARCHAR(255) = NULL,
    @PIX_TCU INT
)
AS
BEGIN

UPDATE COMMERCIAL_ESTABLISHMENT
SET PIX_TCU = @PIX_TCU
   ,PIX_KEY = ISNULL(@PIX_KEY, PIX_KEY)
FROM COMMERCIAL_ESTABLISHMENT
JOIN VW_COMPANY_EC_AFF_BR_DEP_EQUIP
	ON VW_COMPANY_EC_AFF_BR_DEP_EQUIP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE COD_EQUIP = @TERMINALID

END;

GO
IF OBJECT_ID('SP_FD_PIX_TRAN_INFO') IS NOT NULL
DROP PROCEDURE SP_FD_PIX_TRAN_INFO
GO
CREATE PROCEDURE SP_FD_PIX_TRAN_INFO(    
    @NSU VARCHAR(255)    
)    
AS
    
BEGIN
SELECT
	[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT
   ,(IIF(TAX_TYPE = '%', ([TRANSACTION].AMOUNT * (100 - SERVICE_TAX) / 100),
	([TRANSACTION].AMOUNT - ISNULL(SERVICE_TAX, 20)))) AS LIQUID_AMOUNT
   ,(IIF(TAX_TYPE = '%', (150 * SERVICE_TAX / 100), ([TRANSACTION].AMOUNT - SERVICE_TAX))) AS LIQUID_TAX
   ,SERVICE_TAX AS PIX_TAX
   ,TRANSACTION_SERVICES.TAX_TYPE AS TYPE_PIX
   ,TRADUCTION_SITUATION.SITUATION_TR
FROM [TRANSACTION] WITH (NOLOCK)
JOIN TRANSACTION_SERVICES WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
LEFT JOIN TRADUCTION_SITUATION
	ON TRADUCTION_SITUATION.COD_SITUATION = SITUATION.COD_SITUATION
LEFT JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = TRANSACTION_SERVICES.COD_ITEM_SERVICE
WHERE [TRANSACTION].CODE = @NSU
AND ITEMS_SERVICES_AVAILABLE.NAME = 'PIX'
END
GO

IF OBJECT_ID('SP_PIX_TOGGLE_AFF_PLAN') IS NOT NULL
DROP PROCEDURE SP_PIX_TOGGLE_AFF_PLAN
GO
CREATE PROCEDURE [dbo].[SP_PIX_TOGGLE_AFF_PLAN]
/*----------------------------------------------------------------------------------------      
  Author        VERSION     Date      Description      
------------------------------------------------------------------------------------------      
  Luiz Aquino   V1        2020-10-14  Created   
------------------------------------------------------------------------------------------*/
(
    @COD_AFF INT,
    @COD_USER INT = NULL
) AS
BEGIN
    DECLARE @COD_BRAND_PIX INT, @COD_T_TYPE INT, @COD_SOURCE_TRAN INT, @COD_PLAN INT, @ACTIVE INT, @COD_PIX_SERVICE INT;
SELECT
	@COD_SOURCE_TRAN = COD_SOURCE_TRAN
FROM SOURCE_TRANSACTION
WHERE CODE = 'PRESENCIAL'
SELECT
	@COD_BRAND_PIX = COD_BRAND
   ,@COD_T_TYPE = COD_TTYPE
FROM BRAND
WHERE NAME = 'PIX'

SELECT
	@COD_PIX_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PIX';

IF EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE SA
		WHERE SA.ACTIVE = 1
		AND SA.COD_ITEM_SERVICE = @COD_PIX_SERVICE
		AND SA.COD_EC IS NULL
		AND SA.COD_AFFILIATOR = @COD_AFF)
BEGIN
SET @ACTIVE = 1;
        END
    ELSE
        BEGIN
SET @ACTIVE = 0;
        END

    IF @ACTIVE = 0
        BEGIN

UPDATE PLAN_TAX_AFFILIATOR
SET ACTIVE = 0
FROM PLAN_TAX_AFFILIATOR
WHERE ACTIVE = 1
AND COD_AFFILIATOR = @COD_AFF
AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
AND COD_TTYPE = @COD_T_TYPE
AND COD_BRAND = @COD_BRAND_PIX

END
ELSE
IF NOT EXISTS (SELECT
			COD_PLAN
		FROM PLAN_TAX_AFFILIATOR
		WHERE ACTIVE = 1
		AND COD_AFFILIATOR = @COD_AFF
		AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
		AND COD_TTYPE = @COD_T_TYPE
		AND COD_BRAND = @COD_BRAND_PIX)
BEGIN

SELECT DISTINCT
	COD_MODEL
   ,COD_PLAN INTO #Models
FROM PLAN_TAX_AFFILIATOR
WHERE ACTIVE = 1
AND COD_AFFILIATOR = @COD_AFF
AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
AND COD_TTYPE = @COD_T_TYPE
AND COD_MODEL IS NOT NULL

IF EXISTS (SELECT
			COD_MODEL
		FROM #Models)
BEGIN
INSERT INTO PLAN_TAX_AFFILIATOR (COD_TTYPE, QTY_INI_PLOTS, QTY_FINAL_PLOTS, PERCENTAGE, RATE,
INTERVAL, COD_USER, COD_PLAN, COD_AFFILIATOR,
ANTICIPATION_PERCENTAGE, EFFECTIVE_PERCENTAGE, COD_BRAND,
COD_SOURCE_TRAN, COD_MODEL)
	SELECT
		@COD_T_TYPE
	   ,1
	   ,1
	   ,0
	   ,0
	   ,1
	   ,@COD_USER
	   ,COD_PLAN
	   ,@COD_AFF
	   ,0
	   ,0
	   ,@COD_BRAND_PIX
	   ,@COD_SOURCE_TRAN
	   ,COD_MODEL
	FROM #Models
END
ELSE
BEGIN
SELECT TOP 1
	@COD_PLAN = COD_PLAN
FROM PLAN_TAX_AFFILIATOR
WHERE ACTIVE = 1
AND COD_AFFILIATOR = @COD_AFF
AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
AND COD_TTYPE = @COD_T_TYPE

INSERT INTO PLAN_TAX_AFFILIATOR (COD_TTYPE, QTY_INI_PLOTS, QTY_FINAL_PLOTS, PERCENTAGE, RATE,
INTERVAL, COD_USER, COD_PLAN, COD_AFFILIATOR,
ANTICIPATION_PERCENTAGE, EFFECTIVE_PERCENTAGE, COD_BRAND,
COD_SOURCE_TRAN, COD_MODEL)
	VALUES (@COD_T_TYPE, 1, 1, 0, 0, 1, @COD_USER, @COD_PLAN, @COD_AFF, 0, 0, @COD_BRAND_PIX, @COD_SOURCE_TRAN, NULL)
END
END
END
GO

IF OBJECT_ID('SP_PIX_TOGGLE_EC_PLAN') IS NOT NULL
DROP PROCEDURE SP_PIX_TOGGLE_EC_PLAN
GO
CREATE PROCEDURE [dbo].[SP_PIX_TOGGLE_EC_PLAN]
/*----------------------------------------------------------------------------------------      
  Author        VERSION     Date      Description      
------------------------------------------------------------------------------------------      
  Luiz Aquino   V1        2020-10-14  Created   
------------------------------------------------------------------------------------------*/
(
    @COD_EC INT = NULL,
    @COD_USER INT = NULL,
    @COD_DPTO_BRANCH INT = NULL
) AS
BEGIN
    DECLARE @COD_BRAND_PIX INT,
        @COD_T_TYPE INT,
        @COD_SOURCE_TRAN INT,
        @COD_PLAN INT,
        @ACTIVE INT,
        @COD_PIX_SERVICE INT;
SELECT
	@COD_SOURCE_TRAN = COD_SOURCE_TRAN
FROM SOURCE_TRANSACTION(NOLOCK)
WHERE CODE = 'PRESENCIAL'
SELECT
	@COD_BRAND_PIX = COD_BRAND
   ,@COD_T_TYPE = COD_TTYPE
FROM BRAND(NOLOCK)
WHERE NAME = 'PIX'
SELECT
	@COD_PIX_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE(NOLOCK)
WHERE NAME = 'PIX';

IF @COD_DPTO_BRANCH IS NULL
BEGIN
SELECT
	@COD_DPTO_BRANCH = COD_DEPTO_BRANCH
FROM BRANCH_EC(NOLOCK) BE
JOIN DEPARTMENTS_BRANCH(NOLOCK) B2
	ON BE.COD_BRANCH = B2.COD_BRANCH
WHERE BE.COD_EC = @COD_EC
END

IF @COD_EC IS NULL
BEGIN
SELECT
	@COD_EC = COD_EC
FROM DEPARTMENTS_BRANCH(NOLOCK) B2
JOIN BRANCH_EC(NOLOCK) BE
	ON BE.COD_BRANCH = B2.COD_BRANCH
WHERE B2.COD_DEPTO_BRANCH = @COD_DPTO_BRANCH
END

IF EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE(NOLOCK) SA
		WHERE SA.ACTIVE = 1
		AND SA.COD_ITEM_SERVICE = @COD_PIX_SERVICE
		AND SA.COD_EC = @COD_EC)
BEGIN
SET @ACTIVE = 1;
        END
    ELSE
        BEGIN
SET @ACTIVE = 0;
        END

    IF @ACTIVE = 0
        BEGIN

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
FROM ASS_TAX_DEPART ATD
WHERE ATD.ACTIVE = 1
AND ATD.COD_DEPTO_BRANCH = @COD_DPTO_BRANCH
AND ATD.COD_SOURCE_TRAN = @COD_SOURCE_TRAN
AND ATD.COD_TTYPE = @COD_T_TYPE
AND ATD.COD_BRAND = @COD_BRAND_PIX;

END
ELSE
IF NOT EXISTS (SELECT
			ATD.COD_ASS_TX_DEP
		FROM ASS_TAX_DEPART ATD
		WHERE ATD.ACTIVE = 1
		AND ATD.COD_DEPTO_BRANCH = @COD_DPTO_BRANCH
		AND ATD.COD_SOURCE_TRAN = @COD_SOURCE_TRAN
		AND ATD.COD_TTYPE = @COD_T_TYPE
		AND ATD.COD_BRAND = @COD_BRAND_PIX)
BEGIN

SELECT DISTINCT
	COD_MODEL
   ,ATD.COD_PLAN
   ,ATD.COD_DEPTO_BRANCH INTO #Models
FROM ASS_TAX_DEPART ATD
WHERE ATD.ACTIVE = 1
AND ATD.COD_DEPTO_BRANCH = @COD_DPTO_BRANCH
AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
AND COD_TTYPE = @COD_T_TYPE
AND COD_MODEL IS NOT NULL

IF EXISTS (SELECT
			COD_MODEL
		FROM #Models)
BEGIN
INSERT INTO ASS_TAX_DEPART (COD_TTYPE, QTY_INI_PLOTS, QTY_FINAL_PLOTS, PARCENTAGE, RATE,
INTERVAL, COD_USER, COD_DEPTO_BRANCH, MODIFY_DATE, COD_PLAN,
ANTICIPATION_PERCENTAGE, EFFECTIVE_PERCENTAGE, COD_BRAND,
COD_SOURCE_TRAN, COD_MODEL)
	SELECT
		@COD_T_TYPE
	   ,1
	   ,1
	   ,0
	   ,0
	   ,1
	   ,@COD_USER
	   ,COD_DEPTO_BRANCH
	   ,GETDATE()
	   ,COD_PLAN
	   ,0
	   ,0
	   ,@COD_BRAND_PIX
	   ,@COD_SOURCE_TRAN
	   ,COD_MODEL
	FROM #Models
END
ELSE
BEGIN
SELECT TOP 1
	@COD_PLAN = ATD.COD_PLAN
FROM ASS_TAX_DEPART ATD
WHERE ATD.ACTIVE = 1
AND COD_DEPTO_BRANCH = @COD_DPTO_BRANCH
AND COD_SOURCE_TRAN = @COD_SOURCE_TRAN
AND COD_TTYPE = @COD_T_TYPE;

INSERT INTO ASS_TAX_DEPART (COD_TTYPE, QTY_INI_PLOTS, QTY_FINAL_PLOTS, PARCENTAGE, RATE,
INTERVAL, COD_USER, COD_DEPTO_BRANCH, MODIFY_DATE, COD_PLAN,
ANTICIPATION_PERCENTAGE, EFFECTIVE_PERCENTAGE, COD_BRAND,
COD_SOURCE_TRAN, COD_MODEL)
	VALUES (@COD_T_TYPE, 1, 1, 0, 0, 1, @COD_USER, @COD_DPTO_BRANCH, GETDATE(), @COD_PLAN, 0, 0, @COD_BRAND_PIX, @COD_SOURCE_TRAN, NULL)
END
END
END
GO
IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL
DROP PROCEDURE SP_UPDATE_SERVICES_AFFILIATOR
GO
  
CREATE PROCEDURE [dbo].[SP_UPDATE_SERVICES_AFFILIATOR]      
/*----------------------------------------------------------------------------------------      
    Project.......: TKPP      
------------------------------------------------------------------------------------------      
    Author          VERSION      Date              Description      
------------------------------------------------------------------------------------------      
    Caike Ucha      v1           2020-02-26        Creation      
    Elir Ribeiro    v2           2020-04-20        add service billet      
    Caike Ucha      v3           2020-04-20        add service MultiEC      
    Elir Ribeiro    v4           2020-04-22        alter proc      
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento      
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero      
    Luiz Aquino     V7           2020-09-24        ET-1073 TEF_GLOBAL      
    Luiz Aquino     V9           2020-10-27        ET-1150 Split Programado      
 Elir Ribeiro    v10          2021-01-28        ET-1295 Rebate      
------------------------------------------------------------------------------------------*/      
(      
    @CODAFFILIATED INT,      
    @COD_COMP INT,      
    @COD_USER_ALT INT,      
    @SPOT_TAX DECIMAL(6, 2) = 0,      
    @HAS_SPOT INT = 0,      
    @SPLIT_OPT INT = 0,      
    @HAS_SPLIT INT = 0,      
    @HAS_NOTIFICATION INT = 0,      
    @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,      
    @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,      
    @LEDGERRETENTION INT = 0,      
    @LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,      
    @HAS_TRANSLATION INT = 0,      
    @OPERATION_AFF INT = 0,      
    @HAS_BILLET INT = 0,      
    @BILLET_TAX DECIMAL(6, 2) = 0,      
    @HAS_SPLIT_BILLET INT = 0,      
    @MULTIEC_ACTIVE INT = 0,      
    @TCU_DETAILED INT = 0,      
    @PLANDZERO INT = 0,      
    @PlanDZeroJson VARCHAR(256) = NULL,      
    @TefApiActive INT = 0,      
    @TefApiJson VARCHAR(256) = NULL,      
    @SplitProgrammed INT = 0,      
    @Rebate INT = 0,      
    @Rebate_Opt int = 0,      
    @PIX INT = 0      
)      
AS      
BEGIN
  
    
      
    DECLARE @CODSPOTSERVICE INT,      
        @COD_SPLIT_SERVICE INT,      
        @COD_GWNOTIFICATION INT,      
        @HAS_CREDENTIAL INT = 0,      
        @COD_AWAITSPLIT INT = 0,      
        @COD_TRANSLATE INT,      
        @CODBILLETSERVICE INT,      
        @CODSPLITBILLET INT,      
        @COD_MULTIEC_AFFILIATOR INT,      
        @COD_TCU_DETAILED INT,      
        @COD_PLANDZERO INT,      
        @COD_TEF_API INT,      
        @COD_SPLIT_PROG INT,      
        @COD_REBATE INT,      
        @COD_PIX INT;

SELECT
	@CODSPOTSERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '1';

SELECT
	@COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'SPLIT';

SELECT
	@COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';

SELECT
	@COD_AWAITSPLIT = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '8';

SELECT
	@HAS_CREDENTIAL = COUNT(*)
FROM [ACCESS_APPAPI]
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;

SELECT
	@COD_TRANSLATE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'TRANSLATE';

SELECT
	@CODBILLETSERVICE = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '12';

SELECT
	@CODSPLITBILLET = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '13';

SELECT
	@COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '14';

SELECT
	@COD_TCU_DETAILED = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [CODE] = '16';

SELECT
	@COD_PLANDZERO = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'PlanDZero';

SELECT
	@COD_TEF_API = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'ApiTef';

SELECT
	@COD_SPLIT_PROG = COD_ITEM_SERVICE
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'SplitProgrammed'

SELECT
	@COD_REBATE = COD_ITEM_SERVICE
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'Rebate'

SELECT
	@COD_PIX = [COD_ITEM_SERVICE]
FROM [ITEMS_SERVICES_AVAILABLE]
WHERE [NAME] = 'PIX';

IF (@HAS_SPOT = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

IF (@HAS_SPLIT = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@HAS_SPLIT = 1
	AND @SPLIT_OPT = 1
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

IF (@MULTIEC_ACTIVE = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;


IF (@Rebate = 0
	AND (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_REBATE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1)
	> 0)
THROW 61079, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH "REBATE" ACTIVE', 1;

/*******************************************      
*********** UPDATE SPOT AFFILIATED *********      
*******************************************/

IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = 1
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	> 0
BEGIN
IF @HAS_SPOT = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF @SPOT_TAX > (SELECT
			MIN([SPOT_TAX])
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [SPOT_TAX] <> 0
		AND [ACTIVE] = 1)
THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
END;
END;
ELSE
IF @HAS_SPOT = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
END;

UPDATE AFFILIATOR
SET SPOT_TAX = @SPOT_TAX
   ,OPERATION_AFF = @OPERATION_AFF
WHERE COD_AFFILIATOR = @CODAFFILIATED;

/********************************************      
*********** UPDATE SPLIT AFFILIATED *********      
********************************************/

IF (@HAS_SPLIT = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
END;

/**********************************************      
*********** UPDATE LEDGER RETENTION ***********      
**********************************************/

IF (@LEDGERRETENTION = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LEDGERRETENTIONCONFIG);

DECLARE @DT_FROM DATE;
DECLARE @DT_UNTIL DATE;

SELECT
	@DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
SELECT
	@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

UPDATE [LEDGER_RETENTION_CONTROL]
SET [ACTIVE] = 0
FROM [LEDGER_RETENTION_CONTROL]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
END;

/************************************************      
*********** UPDATE TRANSLATE AFFILIATED *********      
************************************************/

IF @HAS_TRANSLATION = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	= 0
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
END;
END;

/***************************************************      
*********** UPDATE NOTIFICATION AFFILIATED *********      
***************************************************/

IF @HAS_NOTIFICATION = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

UPDATE [ACCESS_APPAPI]
SET [ACTIVE] = 0
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [ACTIVE] = 1;
END;
ELSE
IF @HAS_CREDENTIAL = 0
	AND @HAS_NOTIFICATION = 1
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);

EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
									 ,@PASSWORD_NOTIFICATION
									 ,@CLIENTID_NOTIFICATION;
END

/*******************************************      
*********** UPDATE BILLET AFFILIATED *******      
*******************************************/

IF (SELECT
			COUNT(*)
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
	> 0
BEGIN
IF @HAS_BILLET = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
IF @HAS_SPLIT_BILLET = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
IF @BILLET_TAX > (SELECT
			MIN([BILLET_TAX])
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [BILLET_TAX] <> 0
		AND [ACTIVE] = 1)
THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
END;
END;
ELSE
IF @HAS_BILLET = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
	VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
END;

IF @HAS_SPLIT_BILLET = 1
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
	VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
END;

UPDATE AFFILIATOR
SET BILLET_TAX = @BILLET_TAX
WHERE COD_AFFILIATOR = @CODAFFILIATED;

/*******************************************      
*********** UPDATE MULTIEC AFFILIATED *******      
*******************************************/

IF (@MULTIEC_ACTIVE = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END

/*******************************************      
    *********** TCU DETAILED *******      
*******************************************/

IF (@TCU_DETAILED = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END

/*******************************************      
     *********** Plano DZero *******      
 *******************************************/

IF @PLANDZERO = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV],
CONFIG_JSON)
	VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PlanDZeroJson);
END
ELSE
BEGIN

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = @PlanDZeroJson
   ,COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL
AND [ACTIVE] = 1

DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NOT NULL
AND [ACTIVE] = 1
AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

UPDATE [SERVICES_AVAILABLE]
SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NOT NULL
AND [ACTIVE] = 1
AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

IF @CELERONLY = 'true'
BEGIN
DECLARE @CODBKCELER INT
SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

UPDATE SA
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
FROM [SERVICES_AVAILABLE] SA
JOIN BANK_DETAILS_EC BDE
	ON SA.COD_EC = BDE.COD_EC
	AND BDE.ACTIVE = 1
	AND IS_CERC = 0
	AND COD_BANK != @CODBKCELER
WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
AND SA.[COD_EC] IS NOT NULL
AND SA.[ACTIVE] = 1
END
END

/*******************************************      
    *********** TEF API *******      
*******************************************/

UPDATE ACCESS_TEF_API
SET ACTIVE = 0
   ,MODIFIED_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER_ALT
WHERE COD_AFFILIATOR = @CODAFFILIATED
AND ACTIVE = 1;

IF @TefApiActive = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = GETDATE()
WHERE ACTIVE = 1
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_ITEM_SERVICE] = @COD_TEF_API
AND COD_EC IS NULL;
END
ELSE
BEGIN
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_ITEM_SERVICE] = @COD_TEF_API
		AND COD_EC IS NULL)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE],
[COD_OPT_SERV],
CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER_ALT, @COD_TEF_API, @COD_COMP, @CODAFFILIATED, NULL, 1, GETDATE(), 1, @TefApiJson);
END
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 1
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = GETDATE()
   ,CONFIG_JSON = @TefApiJson
WHERE [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_ITEM_SERVICE] = @COD_TEF_API
AND COD_EC IS NULL;
END

SELECT
	a.CodAc
   ,a.PASSWORD INTO #Acqs
FROM OPENJSON(@TefApiJson) WITH (ACQUIRER NVARCHAR(MAX) '$.Acquirer' AS JSON) AS i
CROSS APPLY (SELECT
		*
	FROM OPENJSON(i.ACQUIRER)
	WITH (CodAc INT '$.CodAc', PASSWORD VARCHAR(64) '$.Password')) a

DECLARE @COD_AC INT;
DECLARE @Password VARCHAR(64);
DECLARE _ACS CURSOR FOR SELECT
	CodAc
   ,PASSWORD
FROM #Acqs;

OPEN _ACS

FETCH NEXT FROM _ACS INTO @COD_AC, @Password

WHILE @@fetch_status = 0
BEGIN
EXEC SP_CREATE_TEF_LOGIN @Password
						,@COD_AC
						,@CODAFFILIATED
						,@TefApiActive
						,@COD_USER_ALT
						,0
						,@COD_COMP

FETCH NEXT FROM _ACS INTO @COD_AC, @Password
END;

CLOSE _ACS
DEALLOCATE _ACS;
END

/*******************************************      
        *********** PIX **********      
*******************************************/
IF @PIX = 0
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_PIX
AND [COD_AFFILIATOR] = @CODAFFILIATED;
END
ELSE
IF NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM [SERVICES_AVAILABLE]
		WHERE [COD_ITEM_SERVICE] = @COD_PIX
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1)
BEGIN
INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_PIX, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
END
ELSE
BEGIN

UPDATE [SERVICES_AVAILABLE]
SET COD_USER = @COD_USER_ALT
   ,MODIFY_DATE = GETDATE()
WHERE [COD_ITEM_SERVICE] = @COD_PIX
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL
AND [ACTIVE] = 1

IF (SELECT
			COUNT(*)
		FROM PLAN_TAX_AFFILIATOR
		JOIN BRAND
			ON BRAND.COD_BRAND = PLAN_TAX_AFFILIATOR.COD_BRAND
		WHERE COD_AFFILIATOR = @CODAFFILIATED
		AND BRAND.[NAME] = 'PIX'
		AND ACTIVE = 1)
	= 0
BEGIN

WITH CTE
AS
(SELECT TOP 1
		CREATED_AT
	   ,2 COD_TTYPE
	   ,1 PLOT_INI
	   ,1 PLOT_FIN
	   ,0 [PERCENTAGE]
	   ,0 RATE
	   ,INTERVAL
	   ,1 AS COD_USER
	   ,ACTIVE
	   ,COD_PLAN
	   ,COD_AFFILIATOR
	   ,0 ANTECIP
	   ,(SELECT
				COD_BRAND
			FROM BRAND
			WHERE BRAND.[NAME] = 'PIX')
		AS COD_BRAND
	   ,2 COD_SOURCE_TRAN
	FROM PLAN_TAX_AFFILIATOR
	WHERE COD_AFFILIATOR = 1
	AND ACTIVE = 1
	UNION
	SELECT TOP 1
		CREATED_AT
	   ,1 COD_TTYPE
	   ,1 PLOT_INI
	   ,1 PLOT_FIN
	   ,0 [PERCENTAGE]
	   ,0 RATE
	   ,INTERVAL
	   ,1 AS COD_USER
	   ,ACTIVE
	   ,COD_PLAN
	   ,COD_AFFILIATOR
	   ,0 ANTECIP
	   ,(SELECT
				COD_BRAND
			FROM BRAND
			WHERE BRAND.[NAME] = 'PIX')
		AS COD_BRAND
	   ,2 COD_SOURCE_TRAN
	FROM PLAN_TAX_AFFILIATOR
	WHERE COD_AFFILIATOR = 1
	AND ACTIVE = 1
	UNION
	SELECT TOP 1
		CREATED_AT
	   ,1 COD_TTYPE
	   ,2 PLOT_INI
	   ,12 PLOT_FIN
	   ,0 [PERCENTAGE]
	   ,0 RATE
	   ,INTERVAL
	   ,1 AS COD_USER
	   ,ACTIVE
	   ,COD_PLAN
	   ,COD_AFFILIATOR
	   ,0 ANTECIP
	   ,(SELECT
				COD_BRAND
			FROM BRAND
			WHERE BRAND.[NAME] = 'PIX')
		AS COD_BRAND
	   ,2 COD_SOURCE_TRAN
	FROM PLAN_TAX_AFFILIATOR
	WHERE COD_AFFILIATOR = 1
	AND ACTIVE = 1)
SELECT
	* INTO #TAXESTOINSERT
FROM CTE

INSERT INTO PLAN_TAX_AFFILIATOR (CREATED_AT, COD_TTYPE, QTY_INI_PLOTS, QTY_FINAL_PLOTS, PERCENTAGE, RATE, INTERVAL, COD_USER, ACTIVE, COD_PLAN, COD_AFFILIATOR, ANTICIPATION_PERCENTAGE, COD_BRAND, COD_SOURCE_TRAN)
	SELECT
		*
	FROM #TAXESTOINSERT;



END

END

/*******************************************      
    *********** Split Program *******      
*******************************************/

IF @SplitProgrammed = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
   ,COD_USER = @COD_USER_ALT
WHERE ACTIVE = 1
AND COD_ITEM_SERVICE = @COD_SPLIT_PROG
AND COD_AFFILIATOR = @CODAFFILIATED
END
ELSE
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_ITEM_SERVICE = @COD_SPLIT_PROG
		AND COD_AFFILIATOR = @CODAFFILIATED
		AND COD_EC IS NULL)
BEGIN
INSERT INTO SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR)
	VALUES (@COD_USER_ALT, @COD_SPLIT_PROG, @COD_COMP, @CODAFFILIATED)
END


/*******************************************      
       *********** Rebate *******      
   *******************************************/

IF (@Rebate = 0)
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_REBATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;
END;
ELSE
BEGIN
UPDATE [SERVICES_AVAILABLE]
SET [ACTIVE] = 0
   ,[COD_USER] = @COD_USER_ALT
   ,[MODIFY_DATE] = current_timestamp
WHERE [COD_ITEM_SERVICE] = @COD_REBATE
AND [COD_COMP] = @COD_COMP
AND [COD_AFFILIATOR] = @CODAFFILIATED
AND [COD_EC] IS NULL;

INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP],
[COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
	VALUES (current_timestamp, @COD_USER_ALT, @COD_REBATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @Rebate_Opt));
END;


EXEC SP_PIX_TOGGLE_AFF_PLAN @CODAFFILIATED
						   ,@COD_USER_ALT

END;
GO



IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
DROP PROCEDURE SP_UP_SERVICES
GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]
/*----------------------------------------------------------------------------------------
    Procedure Name: [SP_UP_SERVICES]
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author    VERSION   Date   Description
------------------------------------------------------------------------------------------
    Caike Ucha   V1    04/09/2019  Creation
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online
    Elir Ribeiro  v6    2020-04-17  addd split boleto online
    Caike Ucha    V7    2020-04-22  add multi ec
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero
   Caike uchoa   v9    2020-10-27  alter planDzero
    Luiz Aquino   v10   2020-10-29  ET-693 Split Programado
	Elir Ribeiro  v11  2020-01-28   ET-1295  Rebate
------------------------------------------------------------------------------------------*/
(@COD_EC INT,
 @COD_AFFILIATOR INT,
 @COD_USER INT,
 @SERVICE_NAME VARCHAR(100),
 @VALUE DECIMAL(22, 6),
 @ACTIVE INT,
 @TAX_AFILIATOR DECIMAL(22, 6) = NULL,
 @BILLET_TAX DECIMAL(22, 6) = NULL,
 @VALUE_TAX_BILLET DECIMAL(22, 6) = 0,
 @CONFIG_JSON VARCHAR(512) = NULL)
AS

DECLARE @COD_ITEM_SERVICE INT;
DECLARE @ONLINE_ACTIVE INT;
DECLARE @CREDENCIAL INT;
DECLARE @AFFCONFIG NVARCHAR(512);
DECLARE @CODBKCELER INT;

SELECT
	@CREDENCIAL = TRANSACTION_ONLINE
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
BEGIN
SELECT
	@COD_ITEM_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = @SERVICE_NAME

IF @SERVICE_NAME = 'CREDENTIALS'
BEGIN
IF (@ACTIVE = 1)
BEGIN
IF ((SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE USER_ONLINE IS NULL
		AND COD_EC = @COD_EC)
	> 0)
UPDATE COMMERCIAL_ESTABLISHMENT
SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
   ,HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 1
WHERE COD_EC = @COD_EC;
END
ELSE
UPDATE COMMERCIAL_ESTABLISHMENT
SET HAS_CREDENTIALS = 0
WHERE COD_EC = @COD_EC;
END

IF @SERVICE_NAME = 'SPOT'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE <= 0)
THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

UPDATE COMMERCIAL_ESTABLISHMENT
SET SPOT_TAX = @VALUE
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'BOLETO'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = 0
WHERE COD_EC = @COD_EC
END
ELSE
BEGIN
IF (@COD_AFFILIATOR IS NULL
	AND @VALUE_TAX_BILLET <= 0)
THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

UPDATE COMMERCIAL_ESTABLISHMENT
SET BILLET_TAX = @VALUE_TAX_BILLET
WHERE COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61073, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

IF (@ACTIVE = 0)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
END

IF @SERVICE_NAME = 'SPLIT'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END

IF @SERVICE_NAME = 'PARCELADOCLIENTE'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
ELSE
BEGIN
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END
END;
END

IF @SERVICE_NAME = 'POSWEBDIRECT'
BEGIN
SELECT TOP 1
	@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
FROM SERVICES_AVAILABLE
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
AND SERVICES_AVAILABLE.ACTIVE = 1

IF @ACTIVE = 1
	AND (@ONLINE_ACTIVE = 0
	OR @ONLINE_ACTIVE IS NULL)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
END
IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC
AND ACTIVE = 1;
END;
END

IF @SERVICE_NAME = 'TRANSACTIONONLINE'
BEGIN
IF (@CREDENCIAL = 0
	AND @ACTIVE = 1)
BEGIN
IF (SELECT
			COUNT(COD_SOURCE_TRAN)
		FROM ASS_TAX_DEPART
		INNER JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		INNER JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		INNER JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
		AND ASS_TAX_DEPART.ACTIVE = 1
		AND COD_SOURCE_TRAN = 1)
	= 0
THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		LEFT JOIN AFFILIATOR
			ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		LEFT JOIN PLAN_TAX_AFFILIATOR
			ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		WHERE COD_EC = @COD_EC
		AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
		OR COD_SOURCE_TRAN IS NULL))
	= 0
THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 1
WHERE COD_EC = @COD_EC;
END
ELSE
BEGIN
IF (@CREDENCIAL = 1
	AND @ACTIVE = 0)
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET TRANSACTION_ONLINE = 0
WHERE COD_EC = @COD_EC;
END
END
END

IF @SERVICE_NAME = 'LEDGER_RETENTION'
BEGIN
IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'MULTIEC'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	<= 0)
THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

IF @ACTIVE = 1
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1;

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR,
COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END;
END;

IF @SERVICE_NAME = 'PlanDZero'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	)
THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;


IF @ACTIVE = 1
BEGIN


SELECT
	@AFFCONFIG = CONFIG_JSON
FROM SERVICES_AVAILABLE
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC IS NULL
AND ACTIVE = 1

SELECT
	@CODBKCELER = COD_BANK
FROM BANKS
WHERE NAME = 'CELER DIGITAL'

IF EXISTS (SELECT
			COD_BANK
		FROM BANK_DETAILS_EC BDE
		JOIN BANK_DETAILS_CERC_INFO BDCI
			ON BDE.COD_BK_EC = BDCI.COD_BK_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND IS_CERC = 1
		AND END_DATE > GETDATE()
		AND BDCI.COD_SITUATION = 3)
THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
	AND NOT EXISTS (SELECT
			1
		FROM BANK_DETAILS_EC
		WHERE COD_EC = @COD_EC
		AND ACTIVE = 1
		AND COD_BANK = @CODBKCELER)
THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) >
	CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit',
CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
                        END

                    IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) >
                       CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))
                        BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit',
CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
                        END

                    IF EXISTS (SELECT
		COD_ITEM_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_AFFILIATOR = @COD_AFFILIATOR
	AND COD_EC = @COD_EC
	AND ACTIVE = 1)
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = @CONFIG_JSON
   ,COD_USER = @COD_EC
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
END
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
END

IF @SERVICE_NAME = 'ApiTef'
BEGIN

IF @ACTIVE = 0
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
ELSE
BEGIN

IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE (COD_AFFILIATOR IS NULL
		OR COD_AFFILIATOR = @COD_AFFILIATOR)
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC = @COD_EC)
BEGIN

INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)

END
ELSE
BEGIN

UPDATE SERVICES_AVAILABLE
SET ACTIVE = 1
   ,MODIFY_DATE = GETDATE()
   ,COD_USER = @COD_USER
WHERE (COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;

END
END
END

IF @SERVICE_NAME = 'SplitProgrammed'
BEGIN
IF @ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
BEGIN
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC IS NULL)
BEGIN
SET @ACTIVE = 0;
                            THROW 61080, 'AFFILIATED DOES NOT HAVE SplitProgrammed SERVICE', 1;
                        END
                END

            IF @ACTIVE = 1 AND NOT EXISTS (SELECT
		COD_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE ACTIVE = 1
	AND (@COD_AFFILIATOR IS NULL
	OR COD_AFFILIATOR = @COD_AFFILIATOR)
	AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_EC = @COD_EC)
BEGIN
INSERT SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC,
MODIFY_DATE, CONFIG_JSON, SERVICE_AMOUNT)
	VALUES (@COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, GETDATE(), @CONFIG_JSON, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = IIF(@ACTIVE = 1, @CONFIG_JSON, CONFIG_JSON)
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
   ,ACTIVE = @ACTIVE
WHERE ACTIVE = 1
AND (@COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'Rebate'
BEGIN
IF @ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
BEGIN
IF NOT EXISTS (SELECT
			COD_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_EC IS NULL)
BEGIN
SET @ACTIVE = 0;
                            THROW 61080, 'AFFILIATED DOES NOT HAVE Rebate SERVICE', 1;
                        END
                END

            IF @ACTIVE = 1 AND NOT EXISTS (SELECT
		COD_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE ACTIVE = 1
	AND (@COD_AFFILIATOR IS NULL
	OR COD_AFFILIATOR = @COD_AFFILIATOR)
	AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_EC = @COD_EC)
BEGIN
INSERT SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC,
MODIFY_DATE, CONFIG_JSON, SERVICE_AMOUNT)
	VALUES (@COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, GETDATE(), @CONFIG_JSON, NULL)
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = IIF(@ACTIVE = 1, @CONFIG_JSON, CONFIG_JSON)
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
   ,ACTIVE = @ACTIVE
WHERE ACTIVE = 1
AND (@COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_EC = @COD_EC;
END
END

IF @SERVICE_NAME = 'Pix'
BEGIN
IF (@ACTIVE = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND NOT EXISTS (SELECT
			COD_ITEM_SERVICE
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	)
THROW 61063, 'AFFILIATED DOES NOT HAVE Pix SERVICE', 1;

SELECT
	@AFFCONFIG = CONFIG_JSON
FROM SERVICES_AVAILABLE
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC IS NULL
AND ACTIVE = 1


IF CAST(JSON_VALUE(@AFFCONFIG, '$.PixTax') AS DECIMAL(4, 2)) >
	CAST(JSON_VALUE(@CONFIG_JSON, '$.PixTax') AS DECIMAL(4, 2))
BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.PixTax',
CAST(JSON_VALUE(@AFFCONFIG, '$.PixTax') AS DECIMAL(4, 2)))
                END

            IF CAST(JSON_VALUE(@AFFCONFIG, '$.PixChargeOption') AS VARCHAR(16)) <>
               CAST(JSON_VALUE(@CONFIG_JSON, '$.PixChargeOption') AS VARCHAR(16))
                BEGIN
SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.PixChargeOption',
CAST(JSON_VALUE(@AFFCONFIG, '$.PixChargeOption') AS VARCHAR(16)))
                END

            IF @ACTIVE = 1
                BEGIN
                    IF EXISTS (SELECT
		COD_ITEM_SERVICE
	FROM SERVICES_AVAILABLE
	WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
	AND COD_AFFILIATOR = @COD_AFFILIATOR
	AND COD_EC = @COD_EC
	AND ACTIVE = 1)
BEGIN
UPDATE SERVICES_AVAILABLE
SET CONFIG_JSON = @CONFIG_JSON
   ,COD_USER = @COD_EC
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND COD_AFFILIATOR = @COD_AFFILIATOR
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
ELSE
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP,
COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
	VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
END
END
ELSE
BEGIN
UPDATE SERVICES_AVAILABLE
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,MODIFY_DATE = GETDATE()
WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
AND (@COD_AFFILIATOR IS NULL
OR COD_AFFILIATOR = @COD_AFFILIATOR)
AND COD_EC = @COD_EC
AND ACTIVE = 1
END
END

EXEC SP_PIX_TOGGLE_EC_PLAN @COD_EC
						  ,@COD_USER

END;
GO


IF OBJECT_ID('SP_UP_PIX_ACCEPTED') IS NOT NULL
DROP PROCEDURE SP_UP_PIX_ACCEPTED
GO
CREATE PROCEDURE SP_UP_PIX_ACCEPTED
(
    @TERMINALID INT
)
AS
BEGIN

UPDATE CE
SET PIX_ACCEPTED = 1
FROM COMMERCIAL_ESTABLISHMENT CE
JOIN BRANCH_EC BE
	ON CE.COD_EC = BE.COD_EC
JOIN DEPARTMENTS_BRANCH DB
	ON DB.COD_BRANCH = BE.COD_BRANCH
WHERE CE.ACTIVE = 1
AND EXISTS (SELECT
		ADE.COD_ASS_DEPTO_TERMINAL
	FROM ASS_DEPTO_EQUIP ADE
	WHERE ADE.COD_EQUIP = @TERMINALID)

END;
GO

IF OBJECT_ID('SP_LS_EC_USER_ONLINE') IS NOT NULL
DROP PROCEDURE SP_LS_EC_USER_ONLINE
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_USER_ONLINE]
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date          Description
------------------------------------------------------------------------------------------
Caike Uchoa                      V1         2018-10-29        Creation
Luiz Aquino                      V2         2020-03-10        Add Cof affiliator
------------------------------------------------------------------------------------------*/
    @COD_COMP INT,
    @COD_EC INT
AS
SELECT
	[COMMERCIAL_ESTABLISHMENT].[NAME]
   ,[COMMERCIAL_ESTABLISHMENT].PWD_ONLINE
   ,[COMMERCIAL_ESTABLISHMENT].USER_ONLINE
   ,[COMMERCIAL_ESTABLISHMENT].TRADING_NAME
   ,[COMMERCIAL_ESTABLISHMENT].CPF_CNPJ
   ,[COMMERCIAL_ESTABLISHMENT].COD_EC
   ,[COMMERCIAL_ESTABLISHMENT].COD_AFFILIATOR
   ,COMMERCIAL_ESTABLISHMENT.PIX_ACCEPTED
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
WHERE COMMERCIAL_ESTABLISHMENT.COD_COMP = @COD_COMP
AND COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
GO

IF OBJECT_ID('SP_FD_DATA_EC') IS NOT NULL
DROP PROCEDURE SP_FD_DATA_EC
GO
CREATE PROCEDURE SP_FD_DATA_EC
/*----------------------------------------------------------------------------------------
Procedure Name: [SP_FD_DATA_EC]
------------------------------------------------------------------------------------------
Author        VERSION     Date      Description
------------------------------------------------------------------------------------------
Kennedy Alef  V1        2018-07-27  Creation
Elir Ribeiro  V2        2018-11-07  Changed
Lucas Aguiar  V3        2019-04-22  Add split
Lucas Aguiar  V4        2019-07-01  rotina de travar agenda do ec
Luiz Aquino   V5        2019-07-03  Is_Cerc
Elir Ribeiro  V6        2019-10-01  changed Limit transaction monthy
Caike Uchoa   V7        2019-10-03  add case split pelo afiliador
Luiz Aquino   V8        2019-10-16  Add retencao de agenda
Lucas Aguiar  V9        2019-10-28  Conta Cessao
Marcus Gall   V10       2019-11-11  Add FK with BRANCH BUSINESS
Marcus Gall   V11       2019-12-06  Add field HAS_CREDENTIALS
Elir Ribeiro  V12       2020-01-08  trazendo dados meet consumer
Elir Ribeiro  V13       2020-01-15  ajustando procedure
Marcus Gall   V14       2020-01-22  Add Translate service
Luiz Aquino   v15       2020-03-11  (ET-465) Add requested transaction type
Elir Ribeiro  v16       2020-04-15  add servi?o de boleto
Elir Ribeiro  v17       2020-04-17  add split boleto
Caike Uch?a   v18       2020-04-22  add Multi EC
Luiz Aquino   v19       2020-05-18  ET--598 Termo de aceite
Elir Ribeiro  v20       2020-07-18  ET- 932 Integracao Visa
Caike uchoa   v21       2020-10-28  Corre??o billettax
Marcus Gall	  v22		2021-01-11	Add PNCode SAP
------------------------------------------------------------------------------------------*/
(
    @COD_EC INT
)
AS
BEGIN

    DECLARE @CodSpotService INT

    DECLARE @COD_SPLIT_SERVICE INT;

    DECLARE @COD_BLOCK_SITUATION INT;

    DECLARE @COD_CUSTOMERINSTALLMENT INT;

    DECLARE @CodSchRetention INT;

    DECLARE @COD_TRANSLATE_SERVICE INT;

    DECLARE @CodBillet INT;

    DECLARE @CODSPLITBILLET INT;

    DECLARE @COD_MULTIEC_SERVICE INT;

SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';

SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

SELECT
	@CodBillet = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'BOLETO'
AND ACTIVE = 1;

SELECT
	@CODSPLITBILLET = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT BOLETO ONLINE'
AND ACTIVE = 1;

SELECT
	@COD_BLOCK_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';

SELECT
	@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PARCELADOCLIENTE';

SELECT
	@CodSchRetention = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SCHEDULEDRETENTION';

SELECT
	@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';

SELECT
	@COD_MULTIEC_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'MULTI EC';

SELECT
	BRANCH_EC.[NAME]
   ,BRANCH_EC.TRADING_NAME
   ,COMMERCIAL_ESTABLISHMENT.CODE AS CODE_EC
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,BRANCH_EC.BIRTHDATE
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,BRANCH_EC.NOTE AS NOTE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.ACTIVE
   ,ADDRESS_BRANCH.[ADDRESS]
   ,ADDRESS_BRANCH.number AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.[NAME] AS CITY
   ,[STATE].COD_STATE
   ,[STATE].[NAME] AS [STATE]
   ,COUNTRY.COD_COUNTRY
   ,COUNTRY.[NAME] AS COUNTRY
   ,BANKS.COD_BANK AS BANK_INSIDECODE
   ,BANKS.[NAME] AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
   ,BANK_DETAILS_EC.AGENCY AS AGENCY
   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,TYPE_RECEIPT.COD_TYPE_REC
   ,TYPE_RECEIPT.CODE AS TYPE_RECEIPT
   ,CARDS_TOBRANCH.CARDNUMBER
   ,CARDS_TOBRANCH.ACCOUNTID AS 'ACCOUNTID'
   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS 'COD_CARD_BRANCH'
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS 'TRANSACTION_ONLINE'
   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN (SELECT
					SERVICES_AVAILABLE.SERVICE_AMOUNT
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
		ELSE 0
	END [BILLET_TAX]
	--  , COMMERCIAL_ESTABLISHMENT.BILLET_DEAD
   ,CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
		ELSE 0
	END [FINANCE_BLOCK]
   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPOT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_BILLET]

   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CODSPLITBILLET
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT_BILLET]

   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1
				AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
				AND SERVICES_AVAILABLE.COD_EC IS NULL)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_CUSTOMERINSTALLMENT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SCHRETENTION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_MULTIEC_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_MULTI_EC]

   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
   ,MEET_COSTUMER.CNPJ [ACCEPTANCE]
   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) QTY_EMPLOYEES
   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AVERAGE_BILLING
   ,MEET_COSTUMER.URL_SITE
   ,MEET_COSTUMER.FACEBOOK
   ,MEET_COSTUMER.INSTAGRAM
   ,MEET_COSTUMER.STREET
   ,MEET_COSTUMER.COMPLEMENT [COMPLEMENTO]
   ,MEET_COSTUMER.ANOTHER_INFO
   ,MEET_COSTUMER.number
   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
   ,MEET_COSTUMER.CITY AS MEET_CITY
   ,MEET_COSTUMER.STATES
   ,MEET_COSTUMER.REFERENCEPOINT
   ,MEET_COSTUMER.ZIPCODE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_TRANSLATE]
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_PRESENTIAL_TRANSACTION]
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_ONLINE_TRANSACTION]
   ,COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED
   ,REQ_LANGUAGE_COMERCIAL.COD_COUNTRY
   ,REQ_LANGUAGE_COMERCIAL.COD_CURRRENCY
   ,REQ_LANGUAGE_COMERCIAL.COD_LANGUAGE
   ,rs.SITUATION_EC
   ,EXTERNAL_PARTN_UP.COD_EXTERNAL
   ,COMMERCIAL_ESTABLISHMENT.PIX_ACCEPTED
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
INNER JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
INNER JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
INNER JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
INNER JOIN TYPE_RECEIPT
	ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN CARDS_TOBRANCH
	ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN BRANCH_BUSINESS
	ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
LEFT JOIN MEET_COSTUMER
	ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
LEFT JOIN REQ_LANGUAGE_COMERCIAL
	ON REQ_LANGUAGE_COMERCIAL.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND REQ_LANGUAGE_COMERCIAL.ACTIVE = 1
INNER JOIN RISK_SITUATION rs
	ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION
LEFT JOIN EXTERNAL_PARTN_UP
	ON EXTERNAL_PARTN_UP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND (CARDS_TOBRANCH.COD_SITUATION = 15
OR CARDS_TOBRANCH.COD_SITUATION IS NULL)


END;
GO

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
DROP PROCEDURE SP_REG_REPORT_TRANSACTIONS_EXP
GO
CREATE PROCEDURE [dbo].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************
----------------------------------------------------------------------------------------
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]
 Project.......: TKPP
 ------------------------------------------------------------------------------------------
 Author                          VERSION        Date                            Description
 ------------------------------------------------------------------------------------------
 Fernando Henrique F.             V1       13/12/2018                          Creation
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT
 Caike Uch?a                      V3       15/08/2019                       inserting coluns
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC
 Caike Uch?a                      V5       20/01/2020                            ADD CNAE
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento
 Caike Uch?a                      v7       30/04/2020                        insert ec prod
 Caike Uch?a                      V8       06/08/2020                    Add [AMOUNT] to reprocess
 Caike Uch?a                      V9       17/08/2020                        Add SALES_TYPE
 Luiz Aquino                      v10      01/07/2020                         add PlanDzero
 Caike Uchoa                      V11      31/08/2020                        Add Cod_ec_prod
 Caike Uchoa                      v12      28/09/2020                        Add branch business
 Caike Uchoa                      v10      29/09/2020                        Add NET_VALUE
 ------------------------------------------------------------------------------------------
*****************************************************************************************************************/

AS
BEGIN

    DECLARE @COUNT INT = 0;


    BEGIN

---------------------------------------------
--------------RECORDS INSERT-----------------
---------------------------------------------
SELECT
	[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]
   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[Brand]
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROEC
   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROAFF
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]
   ,[VW_REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS_EC]
   ,CAST(0 AS DECIMAL(22, 6)) AS NET_VALUE
   ,[VW_REPORT_TRANSACTIONS_EXP].[LOGICAL_NUMBER_ACQ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_ACQ_SEGMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].PIX_TAX_EC
   ,[VW_REPORT_TRANSACTIONS_EXP].PIX_TAX_TYPE INTO #TB_REPORT_TRANSACTIONS_EXP_INSERT
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;


SELECT
	TRANSACTION_TITLES.COD_EC
   ,[TRANSACTION].COD_TRAN
   ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO
FROM TRANSACTION_SERVICES
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT
	ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
JOIN TRANSACTION_TITLES WITH (NOLOCK)
	ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC
JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
GROUP BY TRANSACTION_TITLES.COD_EC
		,[TRANSACTION].COD_TRAN
		,TRANSACTION_SERVICES.TAX_PLANDZERO_EC


SELECT
	[TRANSACTION].COD_TRAN
   ,CASE
		WHEN (
			#TEMP_DZERO.TAX_PLANDZERO_EC
			)
			> 0 THEN SUM(
			dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT,
			TRANSACTION_TITLES.TAX_INITIAL,
			TRANSACTION_TITLES.ANTICIP_PERCENT,
			(
			#TEMP_DZERO.TAX_PLANDZERO_EC
			)
			, [TRANSACTION].COD_TTYPE))
		ELSE CASE
				WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](
					TRANSACTION_TITLES.Amount,
					TRANSACTION_TITLES.TAX_INITIAL,
					TRANSACTION_TITLES.PLOT,
					TRANSACTION_TITLES.ANTICIP_PERCENT,
					(CASE
						WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY,
							TRANSACTION_TITLES.PREVISION_PAY_DATE,
							TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
						ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
					END)))
				ELSE 0
			END
	END AS NET_VALUE INTO #TEMP_NET
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN
LEFT JOIN #TEMP_DZERO
	ON #TEMP_DZERO.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
		AND #TEMP_DZERO.COD_EC = TRANSACTION_TITLES.COD_EC

WHERE [TRANSACTION].COD_TRAN IN (SELECT
		COD_TRAN
	FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT)
GROUP BY TRANSACTION_TITLES.COD_TRAN
		,[TRANSACTION].COD_TRAN
		,#TEMP_DZERO.TAX_PLANDZERO_EC


UPDATE #TB_REPORT_TRANSACTIONS_EXP_INSERT
SET NET_VALUE = (SELECT
		NET_VALUE
	FROM #TEMP_NET
	WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN)
FROM #TB_REPORT_TRANSACTIONS_EXP_INSERT


SELECT
	@COUNT = COUNT(*)
FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

IF @COUNT > 0
BEGIN
INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
[TRANSACTION_CODE],
[Amount],
[PLOTS],
[TRANSACTION_DATE],
[TRANSACTION_TYPE],
[CPF_CNPJ],
[NAME],
[SERIAL_EQUIP],
[TID],
[SITUATION],
[Brand],
[PAN],
[TRAN_DATA_EXT],
[TRAN_DATA_EXT_VALUE],
[AUTH_CODE],
[COD_AC],
[NAME_ACQUIRER],
[COMMENT],
[TAX],
[ANTICIPATION],
[COD_AFFILIATOR],
[NAME_AFFILIATOR],
[NET_VALUE],
[COD_COMP],
[COD_EC],
[COD_BRANCH],
[STATE_NAME],
[CITY_NAME],
[COD_SITUATION],
[COD_DEPTO_BRANCH],
[GROSS_VALUE_AGENCY],
[NET_VALUE_AGENCY],
[TYPE_TRAN],
[COD_SOURCE_TRAN],
[POSWEB],
[SEGMENTS_NAME],
[CREATED_TRANSACTION_DATE],
[COD_EC_TRANS],
[TRANS_EC_NAME],
[TRANS_EC_CPF_CNPJ],
[SPLIT],
[SALES_REP],
[COD_USER_REP],
[MODIFY_DATE],
[CREDITOR_DOCUMENT],
[COD_SALES_REP],
[MODEL_POS],
[CARD_NAME],
[CNAE],
[COD_USER],
[NAME_USER],
[LINK_PAYMENT_SERVICE],
[CUSTOMER_EMAIL],
[CUSTOMER_IDENTIFICATION],
[PAYMENT_LINK_TRACKING],
[NAME_PRODUCT_EC],
[EC_PRODUCT],
[EC_PRODUCT_CPF_CNPJ],
[SALES_TYPE],
DZERO_EC_TAX,
DZERO_AFF_TAX,
[COD_EC_PROD],
[BRANCH_BUSINESS],
LOGICAL_NUMBER_ACQ,
COD_ACQ_SEGMENT,
PIX_TAX_EC,
PIX_TAX_TYPE)
	(SELECT
		[TEMP].[COD_TRAN]
	   ,[TEMP].[TRANSACTION_CODE]
	   ,[TEMP].[Amount]
	   ,[TEMP].[PLOTS]
	   ,[TEMP].[TRANSACTION_DATE]
	   ,[TEMP].[TRANSACTION_TYPE]
	   ,[TEMP].[CPF_CNPJ]
	   ,[TEMP].[NAME]
	   ,[TEMP].[SERIAL_EQUIP]
	   ,[TEMP].[TID]
	   ,[TEMP].[SITUATION]
	   ,[TEMP].[Brand]
	   ,[TEMP].[PAN]
	   ,[TEMP].[TRAN_DATA_EXT]
	   ,[TEMP].[TRAN_DATA_EXT_VALUE]
	   ,[TEMP].[AUTH_CODE]
	   ,[TEMP].[COD_AC]
	   ,[TEMP].[NAME_ACQUIRER]
	   ,[TEMP].[COMMENT]
	   ,[TEMP].[TAX]
	   ,[TEMP].[ANTICIPATION]
	   ,[TEMP].[COD_AFFILIATOR]
	   ,[TEMP].[NAME_AFFILIATOR]
	   ,[TEMP].[NET_VALUE]
	   ,[TEMP].[COD_COMP]
	   ,[TEMP].[COD_EC]
	   ,[TEMP].[COD_BRANCH]
	   ,[TEMP].[STATE_NAME]
	   ,[TEMP].[CITY_NAME]
	   ,[TEMP].[COD_SITUATION]
	   ,[TEMP].[COD_DEPTO_BRANCH]
	   ,[TEMP].[GROSS_VALUE_AGENCY]
	   ,[TEMP].[NET_VALUE_AGENCY]
	   ,[TEMP].[TYPE_TRAN]
	   ,[TEMP].[COD_SOURCE_TRAN]
	   ,[TEMP].[POSWEB]
	   ,[TEMP].[SEGMENTS_NAME]
	   ,[TEMP].[CREATED_AT]
	   ,[TEMP].[COD_EC_TRANS]
	   ,[TEMP].[TRANS_EC_NAME]
	   ,[TEMP].[TRANS_EC_CPF_CNPJ]
	   ,[TEMP].[SPLIT]
	   ,[SALES_REP]
	   ,[COD_USER_REP]
	   ,GETDATE()
	   ,[CREDITOR_DOCUMENT]
	   ,[COD_SALES_REP]
	   ,[TEMP].[MODEL_POS]
	   ,[CARD_NAME]
	   ,[CNAE]
	   ,[COD_USER]
	   ,[NAME_USER]
	   ,[LINK_PAYMENT]
	   ,[CUSTOMER_EMAIL]
	   ,[CUSTOMER_IDENTIFICATION]
	   ,[TEMP].[PAYMENT_LINK_TRACKING]
	   ,[TEMP].[NAME_PRODUCT_EC]
	   ,[TEMP].[EC_PRODUCT]
	   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
	   ,[TEMP].[SALES_TYPE]
	   ,[TEMP].PLAN_DZEROEC
	   ,[TEMP].PLAN_DZEROAFF
	   ,[TEMP].[COD_EC_PROD]
	   ,[TEMP].[BRANCH_BUSINESS_EC]
	   ,TEMP.LOGICAL_NUMBER_ACQ
	   ,TEMP.COD_ACQ_SEGMENT
	   ,[TEMP].PIX_TAX_EC
	   ,[TEMP].PIX_TAX_TYPE
	FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

UPDATE [PROCESS_BG_STATUS]
SET [STATUS_PROCESSED] = 1
   ,[MODIFY_DATE] = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
	ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
END;


---------------------------------------------
--------------RECORDS UPDATE-----------------
---------------------------------------------
SELECT
	[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[Amount]
   ,CAST(0 AS DECIMAL(22, 6)) AS [NET_VALUE] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;


SELECT
	TRANSACTION_TITLES.COD_EC
   ,[TRANSACTION].COD_TRAN
   ,TRANSACTION_SERVICES.TAX_PLANDZERO_EC INTO #TEMP_DZERO_2
FROM TRANSACTION_SERVICES
INNER JOIN ITEMS_SERVICES_AVAILABLE
	ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
JOIN #TB_REPORT_TRANSACTIONS_EXP_INSERT
	ON #TB_REPORT_TRANSACTIONS_EXP_INSERT.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
JOIN TRANSACTION_TITLES WITH (NOLOCK)
	ON TRANSACTION_TITLES.COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
		AND TRANSACTION_TITLES.COD_EC = TRANSACTION_SERVICES.COD_EC
JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_SERVICES.COD_TRAN
WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
GROUP BY TRANSACTION_TITLES.COD_EC
		,[TRANSACTION].COD_TRAN
		,TRANSACTION_SERVICES.TAX_PLANDZERO_EC


SELECT
	[TRANSACTION].COD_TRAN
   ,CASE
		WHEN (
			#TEMP_DZERO_2.TAX_PLANDZERO_EC
			)
			> 0 THEN SUM(
			dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.Amount, TRANSACTION_TITLES.PLOT,
			TRANSACTION_TITLES.TAX_INITIAL,
			TRANSACTION_TITLES.ANTICIP_PERCENT, (
			#TEMP_DZERO_2.TAX_PLANDZERO_EC
			)
			, [TRANSACTION].COD_TTYPE))
		ELSE CASE
				WHEN [TRANSACTION_TITLES].COD_TRAN IS NOT NULL THEN SUM(dbo.[FNC_ANT_VALUE_LIQ_DAYS](
					TRANSACTION_TITLES.Amount,
					TRANSACTION_TITLES.TAX_INITIAL,
					TRANSACTION_TITLES.PLOT,
					TRANSACTION_TITLES.ANTICIP_PERCENT,
					(CASE
						WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY,
							TRANSACTION_TITLES.PREVISION_PAY_DATE,
							TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
						ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
					END)))
				ELSE 0
			END
	END AS NET_VALUE INTO #TEMP_NET_2
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TRAN = [TRANSACTION].COD_TRAN
LEFT JOIN #TEMP_DZERO_2
	ON #TEMP_DZERO_2.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
		AND #TEMP_DZERO_2.COD_EC = TRANSACTION_TITLES.COD_EC
WHERE [TRANSACTION].COD_TRAN IN (SELECT
		COD_TRAN
	FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE)
GROUP BY TRANSACTION_TITLES.COD_TRAN
		,[TRANSACTION].COD_TRAN
		,#TEMP_DZERO_2.TAX_PLANDZERO_EC


UPDATE #TB_REPORT_TRANSACTIONS_EXP_UPDATE
SET NET_VALUE = (SELECT
		NET_VALUE
	FROM #TEMP_NET_2
	WHERE COD_TRAN = #TB_REPORT_TRANSACTIONS_EXP_UPDATE.COD_TRAN)
FROM #TB_REPORT_TRANSACTIONS_EXP_UPDATE


SELECT
	@COUNT = COUNT(*)
FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

IF @COUNT > 0
BEGIN
UPDATE [REPORT_TRANSACTIONS_EXP]
SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
   ,[REPORT_TRANSACTIONS_EXP].[Amount] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[Amount]
   ,[REPORT_TRANSACTIONS_EXP].NET_VALUE = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NET_VALUE]
FROM [REPORT_TRANSACTIONS_EXP]
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
	ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] =
	[#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

UPDATE [PROCESS_BG_STATUS]
SET [STATUS_PROCESSED] = 1
   ,[MODIFY_DATE] = GETDATE()
FROM [PROCESS_BG_STATUS]
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
	ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
END;
END;
END;
GO

IF NOT EXISTS (SELECT
		col.name
	FROM sys.indexes ind
	INNER JOIN sys.index_columns ic
		ON ind.object_id = ic.object_id
		AND ind.index_id = ic.index_id
	INNER JOIN sys.columns col
		ON ic.object_id = col.object_id
		AND ic.column_id = col.column_id
	WHERE ind.object_id = OBJECT_ID('REPORT_TRANSACTIONS')
	AND ind.name = 'IX_REPORT_TRAN_COD_TRAN'
	AND col.name = 'MODIFY_DATE')
BEGIN

DROP INDEX IX_REPORT_TRAN_COD_TRAN ON REPORT_TRANSACTIONS

CREATE NONCLUSTERED INDEX IX_REPORT_TRAN_COD_TRAN ON REPORT_TRANSACTIONS (COD_TRAN) INCLUDE (MODIFY_DATE)
END
GO



IF OBJECT_ID('SP_REPORT_TRANSACTIONS_EXP') IS NOT NULL
DROP PROCEDURE SP_REPORT_TRANSACTIONS_EXP
GO
CREATE PROCEDURE [dbo].[SP_REPORT_TRANSACTIONS_EXP]
/***************************************************************************************
----------------------------------------------------------------------------------------
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]
Project.......: TKPP
------------------------------------------------------------------------------------------
Author               VERSION         Date                     Description
------------------------------------------------------------------------------------------
Fernando Henrique F.   V1         13/12/2018               Creation
Kennedy Alef           V2         16/01/2018               Modify
Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT
Caike Uch?a            V3         15/08/2019               inserting coluns
Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC
Caike Uch?a            V5         20/01/2020               ADD CNAE
Kennedy Alef           v3         08/04/2020               add link de pagamento
Caike Uch?a            v4         30/04/2020               insert ec prod
Caike Uch?a            v5         17/08/2020               Add SALES_TYPE
Luiz Aquino            v6         01/07/2020                 add PlanDzero
Caike Uchoa            v7         31/08/2020               Add cod_ec_prod
 Caike Uchoa           v12        28/09/2020               Add branch business
Elir Ribeiro           v13        24/11/2020              terminal length to 100
---------------------------------------------           ---------------------------------------------
********************************************************************************************/ (@CODCOMP VARCHAR(10),
                                                                                               @INITIAL_DATE DATETIME,
                                                                                               @FINAL_DATE DATETIME,
                                                                                               @EC VARCHAR(10),
                                                                                               @BRANCH VARCHAR(10),
                                                                                               @DEPART VARCHAR(10),
                                                                                               @TERMINAL VARCHAR(100),
                                                                                               @STATE VARCHAR(100),
                                                                                               @CITY VARCHAR(100),
                                                                                               @TYPE_TRAN VARCHAR(10),
                                                                                               @SITUATION VARCHAR(10),
                                                                                               @NSU VARCHAR(100) = NULL,
                                                                                               @NSU_EXT VARCHAR(100) = NULL,
                                                                                               @BRAND VARCHAR(50) = NULL,
                                                                                               @PAN VARCHAR(50) = NULL,
                                                                                               @COD_AFFILIATOR INT = NULL,
                                                                                               @TRACKING_TRANSACTION VARCHAR(100) = NULL,
                                                                                               @DESCRIPTION VARCHAR(100) = NULL,
                                                                                               @SPOT_ELEGIBLE INT = 0,
                                                                                               @COD_ACQ INT = NULL,
                                                                                               @SOURCE_TRAN INT = NULL,
                                                                                               @POSWEB INT = 0,
                                                                                               @SPLIT INT = NULL,
                                                                                               @INITIAL_VALUE DECIMAL(22, 6) = NULL,
                                                                                               @FINAL_VALUE DECIMAL(22, 6) = NULL,
                                                                                               @COD_SALES_REP INT = NULL,
                                                                                               @COD_EC_PROD INT = NULL)
AS
BEGIN
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
    DECLARE @TIME_FINAL_DATE TIME;
SET NOCOUNT ON;
SET ARITHABORT ON;
    BEGIN
SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');
--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));
--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )
SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);
        IF (@TIME_FINAL_DATE = '00:00:00')
SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));
SET @QUERY_BASIS = '
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT
      ,[REPORT_TRANSACTIONS_EXP].PLOTS
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ
      ,[REPORT_TRANSACTIONS_EXP].NAME
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP
      ,[REPORT_TRANSACTIONS_EXP].TID
      ,[REPORT_TRANSACTIONS_EXP].SITUATION
      ,[REPORT_TRANSACTIONS_EXP].BRAND
      ,[REPORT_TRANSACTIONS_EXP].PAN
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT
   ,(
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
      ) AS [AUTH_CODE]
      ,[REPORT_TRANSACTIONS_EXP].COD_AC
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER
      ,[REPORT_TRANSACTIONS_EXP].COMMENT
  ,[REPORT_TRANSACTIONS_EXP].TAX
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN
      ,[REPORT_TRANSACTIONS_EXP].POSWEB
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ
      ,[REPORT_TRANSACTIONS_EXP].SPLIT
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME
      ,[REPORT_TRANSACTIONS_EXP].CNAE
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
   ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_EC_TAX, 0) AS DZERO_EC_TAX
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_AFF_TAX, 0)       AS DZERO_AFF_TAX
   ,[REPORT_TRANSACTIONS_EXP].[COD_EC_PROD]
   ,[REPORT_TRANSACTIONS_EXP].[BRANCH_BUSINESS]
         ,ISNULL([REPORT_TRANSACTIONS_EXP].PIX_TAX_EC, 0) AS PIX_TAX_EC
      ,ISNULL([REPORT_TRANSACTIONS_EXP].PIX_TAX_TYPE, '''') AS PIX_TAX_TYPE
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP
    ';
        IF @INITIAL_DATE IS NOT NULL
            AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');
IF @EC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');
IF @BRANCH IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');
IF @DEPART IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');
IF LEN(@TERMINAL) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');
IF LEN(@STATE) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');
IF LEN(@CITY) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');
IF LEN(@TYPE_TRAN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');
IF LEN(@SITUATION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');
IF LEN(@BRAND) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');
IF LEN(@PAN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');
IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');
IF LEN(@NSU_EXT) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');
--ELSE
-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL
-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');
IF @COD_AFFILIATOR IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');
IF LEN(@TRACKING_TRANSACTION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');
IF LEN(@DESCRIPTION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');
IF @SPOT_ELEGIBLE = 1
BEGIN
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE







        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');
            END;
IF @COD_ACQ IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');
IF @SOURCE_TRAN IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');
IF @POSWEB = 1
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');
IF (@INITIAL_VALUE > 0)
	AND (@FINAL_VALUE >= @INITIAL_VALUE)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');
IF (@SPLIT = 1)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');
IF @COD_SALES_REP IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');

IF @COD_EC_PROD IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC_PROD = @COD_EC_PROD');

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');
--SELECT @QUERY_BASIS
EXEC [sp_executesql] @QUERY_BASIS
					,N'
   @CODCOMP VARCHAR(10),
   @INITIAL_DATE DATETIME,
   @FINAL_DATE DATETIME,
   @EC int,
   @BRANCH int,
   @DEPART int,
   @TERMINAL varchar(100),
   @STATE varchar(25),
   @CITY varchar(40),
   @TYPE_TRAN VARCHAR(10),
   @SITUATION VARCHAR(10),
   @NSU varchar(100),
   @NSU_EXT varchar(100),
   @BRAND varchar(50),
   @COD_AFFILIATOR INT,
   @PAN VARCHAR(50),
   @SOURCE_TRAN INT,
   @POSWEB INT,
   @INITIAL_VALUE DECIMAL(22,6),
   @FINAL_VALUE DECIMAL(22,6),
   @COD_SALES_REP INT,
   @COD_ACQ INT,
   @COD_EC_PROD INT
   '
					,@CODCOMP = @CODCOMP
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@EC = @EC
					,@BRANCH = @BRANCH
					,@DEPART = @DEPART
					,@TERMINAL = @TERMINAL
					,@STATE = @STATE
					,@CITY = @CITY
					,@TYPE_TRAN = @TYPE_TRAN
					,@SITUATION = @SITUATION
					,@NSU = @NSU
					,@NSU_EXT = @NSU_EXT
					,@BRAND = @BRAND
					,@PAN = @PAN
					,@COD_AFFILIATOR = @COD_AFFILIATOR
					,@SOURCE_TRAN = @SOURCE_TRAN
					,@POSWEB = @POSWEB
					,@INITIAL_VALUE = @INITIAL_VALUE
					,@FINAL_VALUE = @FINAL_VALUE
					,@COD_SALES_REP = @COD_SALES_REP
					,@COD_ACQ = @COD_ACQ
					,@COD_EC_PROD = @COD_EC_PROD;
END;
END;
GO

IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL DROP VIEW VW_REPORT_TRANSACTIONS_EXP;
GO
CREATE VIEW [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
AS
/*----------------------------------------------------------------------------------------                                            
Project.......: TKPP                                            
------------------------------------------------------------------------------------------                                            
Author                     VERSION        Date                Description                                            
-------------------------------------------------------------------------------------                                            
Marcus Gall                V1       28/11/2019             Add Model_POS, Segment, Location EC                                  
Caike Uchoa                v2       10/01/2020             add CNAE                        
Kennedy Alef               v3       08/04/2020             add link de pagamento                  
Caike Uchoa                v4       30/04/2020             insert ec prod                  
Caike Uchoa                v5       17/08/2020             Add SALES_TYPE       
Luiz Aquino                v6       01/07/2020             Add PlanDZero      
Caike Uchoa                v7       31/08/2020             Add cod_ec_prod      
Kennedy Alef               v8       02/09/2020             Add change calculations           
Caike Uchoa                v9       28/09/2020             Add branch business    
Caike Uchoa                v10      29/09/2020             remove NET_VALUE    
Luiz Aquino                V11      2020-10-16             ET-1119 PIX  
------------------------------------------------------------------------------------------*/
WITH CTE
AS
(SELECT TOP (1000)
		[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
	   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
	   ,[TRANSACTION].[PLOTS] AS [PLOTS]
	   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
	   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
	   ,[EQUIPMENT].[TID] AS [TID]
	   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
	   ,[TRANSACTION].[Brand]
	   ,[TRANSACTION].[PAN]
	   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
	   ,[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
	   ,(SELECT
				[TDE].[VALUE]
			FROM [TRANSACTION_DATA_EXT] TDE WITH (NOLOCK)
			WHERE [TDE].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TDE].[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[ACQUIRER].[COD_AC]
	   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
	   ,[TRANSACTION].[COMMENT] AS [COMMENT]
	   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
	   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
		--------------******------------                                                
	   ,[TRANSACTION].[COD_TTYPE]
	   ,[COMPANY].[COD_COMP]
	   ,[BRANCH_EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[STATE].[NAME] AS [STATE_NAME]
	   ,[CITY].[NAME] AS [CITY_NAME]
	   ,[SITUATION].[COD_SITUATION]
	   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
	   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
	   ,COALESCE([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT],
		[POSWEB_DATA_TRANSACTION].[MDR],
		[POSWEB_DATA_TRANSACTION].[PLOTS],
		[POSWEB_DATA_TRANSACTION].[ANTICIPATION]) -
		[POSWEB_DATA_TRANSACTION].[TARIFF],
		0) AS [NET_VALUE_AGENCY]
	   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
	   ,[TRANSACTION].[COD_SOURCE_TRAN]
	   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
	   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
	   ,[TRANSACTION].[CREATED_AT]
	   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
	   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
	   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
	   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
	   ,IIF((SELECT
				COUNT(*)
			FROM [TRANSACTION_SERVICES] TS (NOLOCK)
			WHERE [TS].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TS].[COD_ITEM_SERVICE] IN (4, 19))
		> 0, 1, 0) AS [SPLIT]
	   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
	   ,[USERS].[COD_USER] AS [COD_USER_REP]
	   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
	   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
	   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
	   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
	   ,[SEGMENTS].[CNAE]
	   ,[TRANSACTION].[COD_USER]
	   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
	   ,IIF((SELECT
				COUNT(*)
			FROM [TRANSACTION_SERVICES] TS (NOLOCK)
			WHERE [TS].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TS].[COD_ITEM_SERVICE] = 10)
		> 0, 1, 0) AS [LINK_PAYMENT]
	   ,[TRANSACTION].[CUSTOMER_EMAIL]
	   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
	   ,IIF((SELECT
				COUNT(*)
			FROM [TRANSACTION_SERVICES]
			WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
		> 0, [TRANSACTION].[TRACKING_TRANSACTION],
		NULL) AS [PAYMENT_LINK_TRACKING]
	   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
	   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
	   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
	   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
	   ,(SELECT
				TS.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES TS WITH (NOLOCK)
			JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TS.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROEC
	   ,(SELECT
				TS.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES TS WITH (NOLOCK)
			JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TS.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROAFF
	   ,[EC_PROD].COD_EC AS [COD_EC_PROD]
	   ,BRANCH_BUSINESS.[NAME] AS [BRANCH_BUSINESS_EC]
	   ,[TRANSACTION].LOGICAL_NUMBER_ACQ AS LOGICAL_NUMBER_ACQ
	   ,DATA_TID_AVAILABLE_EC.COD_AC AS COD_ACQ_SEGMENT
	   ,(SELECT TOP 1
				SERVICE_TAX
			FROM TRANSACTION_SERVICES TS (NOLOCK)
			JOIN ITEMS_SERVICES_AVAILABLE I
				ON TS.COD_ITEM_SERVICE = I.COD_ITEM_SERVICE
				AND I.NAME = 'PIX'
			WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN)
		AS [PIX_TAX_EC]
	   ,(SELECT TOP 1
				TAX_TYPE
			FROM TRANSACTION_SERVICES TS (NOLOCK)
			JOIN ITEMS_SERVICES_AVAILABLE I
				ON TS.COD_ITEM_SERVICE = I.COD_ITEM_SERVICE
				AND I.NAME = 'PIX'
			WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN)
		AS [PIX_TAX_TYPE]
	FROM [TRANSACTION] WITH (NOLOCK)
	LEFT JOIN [dbo].[PROCESS_BG_STATUS]
		ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [ASS_DEPTO_EQUIP]
		ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
	LEFT JOIN [EQUIPMENT]
		ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
	LEFT JOIN [DEPARTMENTS_BRANCH]
		ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
	LEFT JOIN [DEPARTMENTS]
		ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
	LEFT JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
	LEFT JOIN [ADDRESS_BRANCH]
		ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
	LEFT JOIN [NEIGHBORHOOD]
		ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
	LEFT JOIN [ASS_TAX_DEPART]
		ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
	LEFT JOIN [PLAN]
		ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
	LEFT JOIN [CITY]
		ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
	LEFT JOIN [STATE]
		ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
	LEFT JOIN [COMPANY]
		ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	LEFT JOIN [TRANSACTION_TYPE]
		ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
	LEFT JOIN [SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
	LEFT JOIN [TRADUCTION_SITUATION]
		ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
	LEFT JOIN [SEGMENTS]
		ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
	LEFT JOIN [dbo].[REPORT_TRANSACTIONS_EXP]
		ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [POSWEB_DATA_TRANSACTION]
		ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [dbo].[SOURCE_TRANSACTION] WITH (NOLOCK)
		ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
		ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
	LEFT JOIN [SALES_REPRESENTATIVE]
		ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
	LEFT JOIN [USERS]
		ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
	LEFT JOIN [USERS] AS [USER_TRAN]
		ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
	LEFT JOIN [ASS_TR_TYPE_COMP]
		ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
	LEFT JOIN [ACQUIRER]
		ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
	LEFT JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
		ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
		ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	LEFT JOIN BRANCH_BUSINESS
		ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
	LEFT JOIN DATA_TID_AVAILABLE_EC
		ON DATA_TID_AVAILABLE_EC.TID = [TRANSACTION].LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
	WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
	AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
	AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT])

SELECT
	CTE.COD_TRAN
   ,CTE.TRANSACTION_CODE
   ,CTE.Amount
   ,CTE.PLOTS
   ,CTE.TRANSACTION_DATE
   ,CTE.TRANSACTION_TYPE
   ,CTE.CPF_CNPJ
   ,CTE.[NAME]
   ,CTE.SERIAL_EQUIP
   ,CTE.TID
   ,CTE.SITUATION
   ,CTE.Brand
   ,CTE.PAN
   ,CTE.TRAN_DATA_EXT
   ,CTE.TRAN_DATA_EXT_VALUE
   ,CTE.AUTH_CODE
   ,CTE.COD_AC
   ,CTE.NAME_ACQUIRER
   ,CTE.COMMENT
   ,CTE.TAX
   ,CTE.ANTICIPATION
   ,CTE.COD_AFFILIATOR
   ,CTE.NAME_AFFILIATOR
   ,CTE.COD_TTYPE
   ,CTE.COD_COMP
   ,CTE.COD_EC
   ,CTE.COD_BRANCH
   ,CTE.STATE_NAME
   ,CTE.CITY_NAME
   ,CTE.COD_SITUATION
   ,CTE.COD_DEPTO_BRANCH
   ,CTE.GROSS_VALUE_AGENCY
   ,CTE.NET_VALUE_AGENCY
   ,CTE.TYPE_TRAN
   ,CTE.COD_SOURCE_TRAN
   ,CTE.POSWEB
   ,CTE.SEGMENTS_NAME
   ,CTE.CREATED_AT
   ,CTE.REP_COD_TRAN
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.SPLIT
   ,CTE.SALES_REP
   ,CTE.COD_USER_REP
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.COD_SALES_REP
   ,CTE.MODEL_POS
   ,CTE.CARD_NAME
   ,CTE.CNAE
   ,CTE.COD_USER
   ,CTE.NAME_USER
   ,CTE.LINK_PAYMENT
   ,CTE.CUSTOMER_EMAIL
   ,CTE.CUSTOMER_IDENTIFICATION
   ,CTE.PAYMENT_LINK_TRACKING
   ,CTE.NAME_PRODUCT_EC
   ,CTE.EC_PRODUCT
   ,CTE.EC_PRODUCT_CPF_CNPJ
   ,CTE.SALES_TYPE
   ,CTE.PLAN_DZEROEC
   ,CTE.PLAN_DZEROAFF
   ,CTE.COD_EC_PROD
   ,CTE.BRANCH_BUSINESS_EC
   ,CTE.LOGICAL_NUMBER_ACQ
   ,CTE.COD_ACQ_SEGMENT
   ,CTE.PIX_TAX_EC
   ,CTE.PIX_TAX_TYPE

FROM CTE

GO

--ST-1839
