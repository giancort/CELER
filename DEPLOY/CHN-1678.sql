--ET-1385

IF OBJECT_ID('PIX_QR_CODE') IS NOT NULL DROP TABLE PIX_QR_CODE;
GO
CREATE TABLE PIX_QR_CODE
(
    COD_PIX_QR        INT PRIMARY KEY IDENTITY,
    QR_CODE           VARCHAR(255),
    TX_ID             VARCHAR(255),
    VALUE             DECIMAL(22, 6),
    CREATED_AT        DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
    ACTIVE            BIT      DEFAULT 1,
    COD_PAY_LINK      INT FOREIGN KEY REFERENCES PAYMENT_LINK (COD_PAY_LINK),
    COD_CUSTOMER_LINK INT FOREIGN KEY REFERENCES CUSTOMER_LINK (COD_CUSTOMER_LINK)
)

GO


IF OBJECT_ID('SP_REG_PIX_QR_CODE') IS NOT NULL DROP PROCEDURE SP_REG_PIX_QR_CODE;
GO
CREATE PROCEDURE SP_REG_PIX_QR_CODE(
    @QR_CODE VARCHAR(255),
    @TX_ID VARCHAR(255),
    @LINK_CODE VARCHAR(255),
    @VALUE DECIMAL(22, 6),
    @COD_CUSTOMER_LINK INT = NULL
)
AS
BEGIN

    DECLARE @COD_PAY_LINK INT;

SELECT
	@COD_PAY_LINK = COD_PAY_LINK
FROM PAYMENT_LINK
WHERE CODE = @LINK_CODE
AND ACTIVE = 1

INSERT INTO PIX_QR_CODE (QR_CODE, TX_ID, COD_PAY_LINK, COD_CUSTOMER_LINK, VALUE)
	VALUES (@QR_CODE, @TX_ID, @COD_PAY_LINK, @COD_CUSTOMER_LINK, @VALUE);

END

GO

IF OBJECT_ID('SP_FD_PIX_CUSTOMER_LINK') IS NOT NULL DROP PROCEDURE SP_FD_PIX_CUSTOMER_LINK;
GO
CREATE PROCEDURE SP_FD_PIX_CUSTOMER_LINK(
    @TX_ID VARCHAR(255)
)
AS
BEGIN

SELECT
	PIX_QR_CODE.COD_PIX_QR
   ,CL.NAME
   ,CL.EMAIL_ADDRESS
   ,PHONE_NUMBER AS PHONE
   ,PIX_QR_CODE.VALUE
   ,CE.NAME AS EC_NAME
   ,CE.COD_AFFILIATOR
   ,PL.CODE
   ,CL.COD_CUSTOMER_LINK
FROM PIX_QR_CODE
LEFT JOIN CUSTOMER_LINK CL
	ON PIX_QR_CODE.COD_CUSTOMER_LINK = CL.COD_CUSTOMER_LINK
JOIN PAYMENT_LINK PL
	ON PIX_QR_CODE.COD_PAY_LINK = PL.COD_PAY_LINK
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON PL.COD_EC = CE.COD_EC
WHERE TX_ID = @TX_ID
AND PIX_QR_CODE.ACTIVE = 1

END
GO

IF NOT EXISTS (SELECT
		1
	FROM [SYS].[COLUMNS]
	WHERE name = N'COD_PIX_QR'
	AND object_id = OBJECT_ID(N'ASS_TRANSACTION_LINK'))
BEGIN
ALTER TABLE ASS_TRANSACTION_LINK
ADD COD_PIX_QR INT FOREIGN KEY REFERENCES PIX_QR_CODE (COD_PIX_QR);

END;
GO


IF OBJECT_ID('SP_REG_ASS_TRAN_LINK') IS NOT NULL DROP PROCEDURE SP_REG_ASS_TRAN_LINK;
GO
CREATE PROCEDURE [SP_REG_ASS_TRAN_LINK](
    @CODE VARCHAR(255),
    @NSU VARCHAR(255),
    @CUSTOMER_NAME VARCHAR(255) = null,
    @CUSTOMER_EMAIL VARCHAR(255) = null,
    @COD_AFFILIATOR INT,
    @COD_CUSTOMER INT,
    @IS_BILLET INT = 0,
    @COD_PIX_QR INT = NULL)
AS
BEGIN

    DECLARE @COD_PAY_LINK INT= NULL;
    DECLARE @COD_TRAN INT= NULL;
    DECLARE @DESC VARCHAR(255)= NULL;
    DECLARE @TRACKING VARCHAR(255)= NULL;

SELECT
	@COD_PAY_LINK = [COD_PAY_LINK]
   ,@DESC = [PAYMENT_LINK].[DESCRIPTION]
   ,@TRACKING = [PAYMENT_LINK].[ORDER_IDENT]
FROM [PAYMENT_LINK]
WHERE [CODE] = @CODE
AND [COD_AFFILIATOR] = @COD_AFFILIATOR;

IF @COD_PAY_LINK IS NULL
THROW 70012, 'INVALID LINK CODE', 1;

IF @IS_BILLET = 1
BEGIN
SELECT
	@COD_TRAN = [BILLET_TRANSACTION].[COD_BILLET]
FROM [BILLET_TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION_CODE] = @NSU;
END
ELSE
BEGIN
SELECT
	@COD_TRAN = [TRANSACTION].[COD_TRAN]
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [CODE] = @NSU;
END


IF @COD_TRAN IS NULL
THROW 70012, 'INVALID CODE TRAN', 1;

IF @IS_BILLET = 1
BEGIN

INSERT INTO [ASS_TRANSACTION_LINK] ([COD_BILLET],
[COD_PAY_LINK], COD_CUSTOMER_LINK, COD_PIX_QR)
	VALUES (@COD_TRAN, @COD_PAY_LINK, @COD_CUSTOMER, @COD_PIX_QR);

IF @@ROWCOUNT < 1
THROW 70016, 'COULD NOT REGISTER [ASS_TRANSACTION_LINK]', 1;
END
ELSE
BEGIN

INSERT INTO [ASS_TRANSACTION_LINK] ([COD_TRAN],
[COD_PAY_LINK], COD_CUSTOMER_LINK, COD_PIX_QR)
	VALUES (@COD_TRAN, @COD_PAY_LINK, @COD_CUSTOMER, @COD_PIX_QR);


IF @@ROWCOUNT < 1
THROW 70016, 'COULD NOT REGISTER [ASS_TRANSACTION_LINK]', 1;

INSERT INTO [TRANSACTION_SERVICES] ([COD_ITEM_SERVICE],
[COD_TRAN])
	VALUES (10, @COD_TRAN);

IF @@ROWCOUNT < 1
THROW 70016, 'COULD NOT REGISTER [TRANSACTION_SERVICES]', 1;

UPDATE [TRANSACTION]
SET [CUSTOMER_EMAIL] = @CUSTOMER_EMAIL
   ,[CUSTOMER_IDENTIFICATION] = @CUSTOMER_NAME
   ,[DESCRIPTION] = @DESC
   ,[TRACKING_TRANSACTION] = @TRACKING
WHERE [COD_TRAN] = @COD_TRAN;
END


END;
GO


IF ( SELECT
		COUNT(*)
	FROM PAYMENT_METHODS
	WHERE CODE = 3)
= 0
INSERT INTO PAYMENT_METHODS (NAME, DESCRIPTION, CODE)
	VALUES ('PIX', 'PAGAMENTO VIA PIX', 3)

GO

IF OBJECT_ID('SP_FD_DATA_LINK') IS NOT NULL DROP PROCEDURE SP_FD_DATA_LINK;
GO
CREATE PROCEDURE SP_FD_DATA_LINK(@CODE VARCHAR(255))
AS
BEGIN
    DECLARE @COD_THEME_EC INT;
    DECLARE @CREDIT INT;
    DECLARE @BILLET INT;
    DECLARE @PIX INT;

SELECT
	@COD_THEME_EC = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PaymentLinkEc'

SELECT
	@CREDIT = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'CREDIT';

SELECT
	@BILLET = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'BILLET';

SELECT
	@PIX = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'PIX';


SELECT
	PAYMENT_LINK.CODE
   ,PAYMENT_LINK.COD_EC
   ,PAYMENT_LINK.COD_AFFILIATOR
   ,PAYMENT_LINK.ORDER_IDENT
   ,COMMERCIAL_ESTABLISHMENT.NAME AS EC_NAME
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS EC_CPF_CNPJ
   ,AFFILIATOR.NAME AS AFF_NAME
   ,AFFILIATOR.CPF_CNPJ AS AFF_CPF_CNPJ
   ,THEMES.LOGO_AFFILIATE
   ,THEMES.LOGO_HEADER_AFFILIATE
   ,THEMES.COLOR_HEADER
   ,PAYMENT_LINK.EXPIRATION_DATE
   ,PAYMENT_LINK.MAX_INSTALLMENT
   ,PAYMENT_LINK.IS_VARIABLE
   ,PAYMENT_LINK.IS_CUSTOMER_INTEREST
   ,PAYMENT_LINK.IS_SPLIT
   ,PAYMENT_LINK.URL_CALLBACK
   ,PAYMENT_LINK.DESCRIPTION
   ,PAYMENT_LINK.IS_RECURRING
   ,IIF((SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_THEME_EC
		AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND SERVICES_AVAILABLE.ACTIVE = 1)
	> 0
	AND PAYMENT_LINK.HAS_EC_THEME = 1 AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_THEME_EC
		AND SERVICES_AVAILABLE.COD_AFFILIATOR =
		COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		AND SERVICES_AVAILABLE.COD_EC IS NULL
		AND SERVICES_AVAILABLE.ACTIVE = 1)
	> 0, 1,
	0) AS [HAS_EC_THEME]
   ,LTE.LOGO AS EC_LOGO
   ,LTE.COLOR AS EC_COLOR
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @CREDIT)
	> 0, 1, 0) HAS_CREDIT
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @BILLET)
	> 0, 1, 0) HAS_BILLET
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @PIX)
	> 0, 1, 0) HAS_PIX
   ,PAYMENT_LINK.BILLET_INTERVAL
FROM PAYMENT_LINK
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = PAYMENT_LINK.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = PAYMENT_LINK.COD_AFFILIATOR
JOIN THEMES
	ON THEMES.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		AND THEMES.ACTIVE = 1
LEFT JOIN LINK_THEMES_EC LTE
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = LTE.COD_EC
		AND LTE.ACTIVE = 1

WHERE PAYMENT_LINK.CODE = @CODE
AND PAYMENT_LINK.ACTIVE = 1
AND PAYMENT_LINK.EXPIRATION_DATE >= dbo.FN_FUS_UTF(GETDATE());
END;
GO

IF OBJECT_ID('SP_FD_DATA_PIX_EC') IS NOT NULL DROP PROCEDURE SP_FD_DATA_PIX_EC;
GO
CREATE PROCEDURE SP_FD_DATA_PIX_EC(@MERCHANT_DOC VARCHAR(14), @COD_AFF INT)
AS

BEGIN

    DECLARE @COD_PIX_SERVICE INT;

SELECT TOP 1
	@COD_PIX_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PIX';

SELECT
	CAST(JSON_VALUE(CONFIG_JSON, '$.PixTaxPercent') AS DECIMAL(4, 2)) AS PixTaxPercent
   ,CAST(JSON_VALUE(CONFIG_JSON, '$.PixTaxDecimal') AS DECIMAL(4, 2)) AS PixTaxDecimal
   ,CAST(JSON_VALUE(CONFIG_JSON, '$.ContaCeler') AS VARCHAR(16)) AS ContaCeler
   ,CONFIG_JSON
FROM SERVICES_AVAILABLE
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON SERVICES_AVAILABLE.COD_EC = CE.COD_EC
WHERE SERVICES_AVAILABLE.ACTIVE = 1
AND COD_ITEM_SERVICE = @COD_PIX_SERVICE
AND CE.CPF_CNPJ = @MERCHANT_DOC
AND CE.COD_AFFILIATOR = @COD_AFF

END

IF (SELECT
			COUNT(*)
		FROM PAYMENT_METHODS
		WHERE CODE = 4)
	= 0
INSERT INTO PAYMENT_METHODS (NAME, DESCRIPTION, CODE)
	VALUES ('TWOCREDITCARD', 'PAGAMENTO COM DOIS CARTÕES', 4)
GO

IF OBJECT_ID('SP_FD_DATA_LINK') IS NOT NULL DROP PROCEDURE SP_FD_DATA_LINK;
GO
CREATE PROCEDURE SP_FD_DATA_LINK(@CODE VARCHAR(255))
AS
BEGIN
    DECLARE @COD_THEME_EC INT;
    DECLARE @CREDIT INT;
    DECLARE @BILLET INT;
    DECLARE @PIX INT;
    DECLARE @TWOCARD INT;

SELECT
	@COD_THEME_EC = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PaymentLinkEc'

SELECT
	@CREDIT = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'CREDIT';

SELECT
	@BILLET = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'BILLET';

SELECT
	@PIX = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'PIX';

SELECT
	@TWOCARD = COD_PAY_METH
FROM PAYMENT_METHODS
WHERE NAME = 'TWOCREDITCARD';


SELECT
	PAYMENT_LINK.CODE
   ,PAYMENT_LINK.COD_EC
   ,PAYMENT_LINK.COD_AFFILIATOR
   ,PAYMENT_LINK.ORDER_IDENT
   ,COMMERCIAL_ESTABLISHMENT.NAME AS EC_NAME
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS EC_CPF_CNPJ
   ,AFFILIATOR.NAME AS AFF_NAME
   ,AFFILIATOR.CPF_CNPJ AS AFF_CPF_CNPJ
   ,THEMES.LOGO_AFFILIATE
   ,THEMES.LOGO_HEADER_AFFILIATE
   ,THEMES.COLOR_HEADER
   ,PAYMENT_LINK.EXPIRATION_DATE
   ,PAYMENT_LINK.MAX_INSTALLMENT
   ,PAYMENT_LINK.IS_VARIABLE
   ,PAYMENT_LINK.IS_CUSTOMER_INTEREST
   ,PAYMENT_LINK.IS_SPLIT
   ,PAYMENT_LINK.URL_CALLBACK
   ,PAYMENT_LINK.DESCRIPTION
   ,PAYMENT_LINK.IS_RECURRING
   ,IIF((SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_THEME_EC
		AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND SERVICES_AVAILABLE.ACTIVE = 1)
	> 0
	AND PAYMENT_LINK.HAS_EC_THEME = 1 AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_THEME_EC
		AND SERVICES_AVAILABLE.COD_AFFILIATOR =
		COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		AND SERVICES_AVAILABLE.COD_EC IS NULL
		AND SERVICES_AVAILABLE.ACTIVE = 1)
	> 0, 1,
	0) AS [HAS_EC_THEME]
   ,LTE.LOGO AS EC_LOGO
   ,LTE.COLOR AS EC_COLOR
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @CREDIT)
	> 0, 1, 0) HAS_CREDIT
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @BILLET)
	> 0, 1, 0) HAS_BILLET
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @PIX)
	> 0, 1, 0) HAS_PIX
   ,IIF((SELECT
			COUNT(*)
		FROM ASS_PAY_METHOD_LINK
		WHERE ASS_PAY_METHOD_LINK.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK
		AND COD_PAY_METH = @TWOCARD)
	> 0, 1, 0) HAS_TWO_CARD
   ,PAYMENT_LINK.BILLET_INTERVAL
FROM PAYMENT_LINK
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = PAYMENT_LINK.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = PAYMENT_LINK.COD_AFFILIATOR
JOIN THEMES
	ON THEMES.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
		AND THEMES.ACTIVE = 1
LEFT JOIN LINK_THEMES_EC LTE
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = LTE.COD_EC
		AND LTE.ACTIVE = 1

WHERE PAYMENT_LINK.CODE = @CODE
AND PAYMENT_LINK.ACTIVE = 1
AND PAYMENT_LINK.EXPIRATION_DATE >= dbo.FN_FUS_UTF(GETDATE());
END;
GO

--ET-1385

GO

--ET-1387

GO

IF OBJECT_ID('SP_LOGIN_USER') IS NOT NULL
DROP PROCEDURE [SP_LOGIN_USER]

GO
CREATE PROCEDURE [dbo].[SP_LOGIN_USER]  
/*----------------------------------------------------------------------------------------  
 Project.......: TKPP  
------------------------------------------------------------------------------------------  
    Author                  VERSION        Date         Description  
------------------------------------------------------------------------------------------  
    Kennedy Alef            V1          31/07/2018      Creation  
    Gian Luca Dalle Cort    V2          31/07/2018      Changed  
    Lucas Aguiar            v3          26/11/2018      changed  
    Luiz Aquino             V4          15/05/2020      ET-859 TCU EC  
	Caike Uchoa             v5          29/04/2021      alter expiração de senha
------------------------------------------------------------------------------------------  */  
(   @ACESSKEY VARCHAR(300),  
    @USER VARCHAR(100),  
    @COD_AFFILIATOR INT)  
AS  
    DECLARE @LOCK DATETIME;
  
    DECLARE @ACTIVE_USER INT;
  
    DECLARE @CODUSER INT;
  
    DECLARE @ACTIVE_EC INT;
  
    DECLARE @DATEPASS DATETIME
  
    DECLARE @LOGGED INT;
  
    DECLARE @PASS_TMP VARCHAR(MAX);
  
    DECLARE @RETURN VARCHAR(200);
  
    DECLARE @ACTIVE_AFL INT;
  
    DECLARE @COD_AFF INT;
  
    DECLARE @COD_SALES_REP INT;
  
BEGIN


SELECT
	@LOCK = LOCKED_UP
   ,@ACTIVE_USER = USERS.ACTIVE
   ,@CODUSER = USERS.COD_USER
   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
   ,@DATEPASS = PASS_HISTORY.CREATED_AT
   ,@LOGGED = USERS.LOGGED
   ,@PASS_TMP = PASS_HISTORY.PASS
   ,@ACTIVE_AFL = AFFILIATOR.ACTIVE
   ,@COD_AFF = AFFILIATOR.COD_AFFILIATOR
   ,@COD_SALES_REP = SALES_REPRESENTATIVE.COD_SALES_REP
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE

INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR =
		USERS.COD_AFFILIATOR --BUSCA SE USU�RIO POSSUI C�DIGO DE AFILIADOR  
LEFT JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_USER = USERS.COD_USER
WHERE COD_ACCESS = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
OR USERS.EMAIL = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1

IF @CODUSER IS NULL
	OR @CODUSER = 0
BEGIN
SET @RETURN = CONCAT('USER NOT FOUND', ';') + ISNULL(@PASS_TMP, 0);
  
  
            THROW 61006,@RETURN,1;
  
        END
  
  
    IF ISNULL(@COD_AFF, 0) <> ISNULL(@COD_AFFILIATOR, 0)  
        BEGIN
SET @RETURN = CONCAT('USER NOT FOUND r', ';') + ISNULL(@PASS_TMP, 0);
  
            THROW 61006,@RETURN,1;
  
        END
  
  
    IF DATEDIFF(MINUTE, @LOCK, GETDATE()) < 30  
        BEGIN
SET @RETURN = CONCAT(CONCAT('USER BLOCKED', ';'), @PASS_TMP);
  
  
            THROW 61008,@RETURN,1;
  
        END
  
  
    IF @ACTIVE_USER = 0  
        BEGIN
SET @RETURN = CONCAT(CONCAT('USER INACTIVE', ';'), @PASS_TMP);
  
            THROW 61007,@RETURN,1;
  
        END
  
  
    IF @ACTIVE_EC = 0  
        BEGIN
SET @RETURN = CONCAT(CONCAT('COMMERCIAL ESTABLISHMENT INACTIVE', ';'), @PASS_TMP);
  
            THROW 61009,@RETURN,1;
  
        END
  
  
    IF @ACTIVE_AFL = 0  
        BEGIN
SET @RETURN = CONCAT(CONCAT('AFFILIATOR INACTIVE', ';'), @PASS_TMP);
  
            THROW 61009,@RETURN,1;
  
        END
  
  
    IF DATEDIFF(DAY, @DATEPASS, GETDATE()) >= 90  
        BEGIN
SET @RETURN = CONCAT(CONCAT('PASSWORD EXPIRED', ';'), @PASS_TMP);
  
            THROW 61010,@RETURN,1;
  
        END
  
  
    IF @LOGGED = 1  
        BEGIN
UPDATE USERS
SET LOGGED = 0
WHERE USERS.COD_USER = @CODUSER;
DELETE FROM TEMP_TOKEN
WHERE TEMP_TOKEN.COD_USER = @CODUSER;
SET @RETURN = CONCAT(CONCAT('USER ALREADY LOGGED', ';'), @PASS_TMP);
  
            THROW 61011,@RETURN,1;
  
        END
  
  
    IF @PASS_TMP IS NULL  
        THROW 61029,'TEMPORARY ACCESS',1;

SELECT
	USERS.COD_ACCESS AS USERNAME
   ,USERS.COD_USER
   ,USERS.IDENTIFICATION
   ,PASS_HISTORY.PASS
   ,USERS.CPF_CNPJ AS CPF_CNPJ_USER
   ,USERS.EMAIL
   ,COMPANY.COD_COMP AS COD_COMP
   ,AFFILIATOR.COD_AFFILIATOR AS INSIDECODE_AFL
   ,PROFILE_ACCESS.CODE AS COD_PROFILE
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,MODULES.CODE AS MODULE
   ,MODULES.COD_MODULE AS COD_MODULE
   ,@COD_AFFILIATOR AS PAR_AFFILIATOR
   ,@COD_AFF AS AFF_RET
   ,CASE COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
		WHEN 1 THEN AUTHENTICATION_FACTOR.NAME
		WHEN 0 THEN NULL
		ELSE AUTHENTICATION_FACTOR.NAME
	END AS AUTHENTICATION_FACTOR
   ,CASE
		WHEN FIRST_LOGIN_DATE IS NULL OR
			COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED = 0 THEN 1
		ELSE 0
	END AS FIRST_ACCESS
   ,AUTHENTICATION_FACTOR.COD_FACT
   ,(-1 * (DATEDIFF(DAY, ((DATEADD(DAY, 90, GETDATE()) + GETDATE()) - GETDATE()), @DATEPASS))) AS DAYSTO_EXPIRE
   ,THEMES.COD_THEMES AS 'ThemeCode'
   ,THEMES.CREATED_AT AS 'CreatedDate'
   ,THEMES.LOGO_AFFILIATE AS 'PathLogo'
   ,THEMES.LOGO_HEADER_AFFILIATE AS 'PathLogoHeader'
   ,THEMES.COD_AFFILIATOR AS 'AffiliatorCode'
   ,THEMES.MODIFY_DATE AS 'ModifyDate'
   ,THEMES.COLOR_HEADER AS 'ColorHeader'
   ,THEMES.Active AS 'Active'
   ,AFFILIATOR.SubDomain AS 'SubDomain'
   ,AFFILIATOR.Guid AS 'Guid'
   ,THEMES.BACKGROUND_IMAGE AS 'BackgroundImage'
   ,THEMES.SECONDARY_COLOR AS 'SecondaryColor'
   ,[POS_AVAILABLE].[AVAILABLE] AS 'AvailablePOS'
   ,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC AS 'DefaultEc'
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,ISNULL(USERS.LAST_LOGIN, current_timestamp) AS LAST_LOGIN
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER
INNER JOIN MODULES
	ON MODULES.COD_MODULE = USERS.COD_MODULE
LEFT JOIN ASS_FACTOR_AUTH_COMPANY
	ON ASS_FACTOR_AUTH_COMPANY.COD_COMP = COMPANY.COD_COMP
LEFT JOIN AUTHENTICATION_FACTOR
	ON AUTHENTICATION_FACTOR.COD_FACT = ASS_FACTOR_AUTH_COMPANY.COD_FACT
LEFT JOIN THEMES
	ON THEMES.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
LEFT JOIN POS_AVAILABLE
	ON POS_AVAILABLE.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
LEFT JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_USER = USERS.COD_USER
WHERE COD_ACCESS = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
AND (THEMES.Active = 1
OR THEMES.Active IS NULL)
OR USERS.EMAIL = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
AND (THEMES.Active = 1
OR THEMES.Active IS NULL)

END;


GO
 

IF OBJECT_ID('SP_VALIDADE_LOGIN_USER') IS NOT NULL
DROP PROCEDURE [SP_VALIDADE_LOGIN_USER]

GO
CREATE PROCEDURE [dbo].[SP_VALIDADE_LOGIN_USER]  
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_VALIDADE_LOGIN_USER]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION        Date                            Description  
------------------------------------------------------------------------------------------  
Kennedy Alef                         V1      27/07/2018                        Creation  
Caike Uchoa                          v2      30/04/2021                      alter tempo de expiracao 
------------------------------------------------------------------------------------------*/  
(  
@ACESSKEY VARCHAR(300),  
@USER VARCHAR(100)  
)  
AS  
DECLARE @LOCK DATETIME;
  
DECLARE @ACTIVE_USER INT;
  
DECLARE @CODUSER INT;
  
DECLARE @ACTIVE_EC INT;
  
DECLARE @DATEPASS DATETIME
  
DECLARE @LOGGED INT;
  
  
BEGIN

SELECT
	@LOCK = LOCKED_UP
   ,@ACTIVE_USER = USERS.ACTIVE
   ,@CODUSER = USERS.COD_USER
   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
   ,@DATEPASS = PASS_HISTORY.CREATED_AT
   ,@LOGGED = USERS.LOGGED
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE
INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
WHERE (COD_ACCESS = @USER
OR USERS.EMAIL = @USER)
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1


IF @CODUSER IS NULL
	OR @CODUSER = 0
THROW 61006, 'USER NOT FOUND', 1;


IF DATEDIFF(MINUTE, @LOCK, GETDATE()) < 30
THROW 61008, 'USER BLOCKED', 1;


IF @ACTIVE_USER = 0
THROW 61007, 'USER INACTIVE', 1;

IF @ACTIVE_EC = 0
THROW 61009, 'COMMERCIAL ESTABLISHMENT INACTIVE', 1;

IF DATEDIFF(DAY, @DATEPASS, GETDATE()) >= 90
THROW 61010, 'PASSWORD EXPIRED', 1;

IF @LOGGED = 0
THROW 61035, 'NOT AUTHENTICATED', 1;

END;


GO

IF OBJECT_ID('SP_LOGIN_USER_MOBILE_EC') IS NOT NULL
DROP PROCEDURE [SP_LOGIN_USER_MOBILE_EC];

GO
CREATE PROCEDURE [dbo].[SP_LOGIN_USER_MOBILE_EC]    
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_LOGIN_USER_MOBILE_EC]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef                       V1      27/07/2018                           Creation    
Caike Uchoa                        v2      10/05/2021                     alter expire pass
------------------------------------------------------------------------------------------*/    
(    
@ACESSKEY VARCHAR(300),    
@USER VARCHAR(100)    
)    
AS    
DECLARE @LOCK DATETIME;
    
DECLARE @ACTIVE_USER INT;
    
DECLARE @CODUSER INT;
    
DECLARE @ACTIVE_EC INT;
    
DECLARE @DATEPASS DATETIME
    
DECLARE @LOGGED INT;
    
DECLARE @PASS_TMP VARCHAR(MAX)
    
DECLARE @RETURN VARCHAR(200)
    
    
BEGIN

SELECT
	@LOCK = LOCKED_UP
   ,@ACTIVE_USER = USERS.ACTIVE
   ,@CODUSER = USERS.COD_USER
   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
   ,@DATEPASS = PASS_HISTORY.CREATED_AT
   ,@LOGGED = USERS.LOGGED
   ,@PASS_TMP = PASS_HISTORY.PASS
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE
INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
WHERE COD_ACCESS = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
OR USERS.EMAIL = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1

IF @CODUSER IS NULL
	OR @CODUSER = 0
BEGIN

SET @RETURN = CONCAT('USER NOT FOUND', ';') + @PASS_TMP;
    
THROW 61006,@RETURN,1;
    
END
    
    
IF DATEDIFF(MINUTE,@LOCK,GETDATE()) < 30    
BEGIN

SET @RETURN = CONCAT(CONCAT('USER BLOCKED', ';'), @PASS_TMP);
    
THROW 61008,@RETURN,1;
    
END
    
    
IF @ACTIVE_USER = 0    
BEGIN
SET @RETURN = CONCAT(CONCAT('USER INACTIVE', ';'), @PASS_TMP);
    
--SET @RETURN = CONCAT('USER INACTIVE',CONCAT('-',@PASS_TMP))    
THROW 61007,@RETURN,1;
    
END
    
    
IF @ACTIVE_EC = 0    
BEGIN
SET @RETURN = CONCAT(CONCAT('COMMERCIAL ESTABLISHMENT INACTIVE', ';'), @PASS_TMP);
    
--SET @RETURN = CONCAT('COMMERCIAL ESTABLISHMENT INACTIVE',CONCAT('-',@PASS_TMP))    
THROW 61009,@RETURN,1;
    
END
    
    
IF DATEDIFF(DAY,@DATEPASS,GETDATE()) >= 90    
BEGIN
SET @RETURN = CONCAT(CONCAT('PASSWORD EXPIRED', ';'), @PASS_TMP);
    
--SET @RETURN = CONCAT('PASSWORD EXPIRED',CONCAT('-',@PASS_TMP))    
THROW 61010,@RETURN,1;
    
END
    
IF @LOGGED = 1    
BEGIN
UPDATE USERS
SET LOGGED = 0
WHERE USERS.COD_USER = @CODUSER;
DELETE FROM TEMP_TOKEN
WHERE TEMP_TOKEN.COD_USER = @CODUSER;
SET @RETURN = CONCAT(CONCAT('USER ALREADY LOGGED', ';'), @PASS_TMP);
    
--SET @RETURN = CONCAT('USER ALREADY LOGGED',CONCAT('-',@PASS_TMP))    
THROW 61011,@RETURN,1;
    
END
    
IF @PASS_TMP IS NULL    
BEGIN
    
	THROW 61029,'TEMPORARY ACCESS',1;
    
END



SELECT
	USERS.COD_ACCESS AS [Name]
   ,USERS.COD_USER AS [UserInsideCode]
   ,USERS.IDENTIFICATION AS [Identification]
   ,PASS_HISTORY.PASS AS [InsidePassword]
   ,USERS.EMAIL AS [Email]
   ,COMPANY.COD_COMP AS [CompanyInsideCode]
   ,COMPANY.NAME AS [Company]
   ,PROFILE_ACCESS.COD_PROFILE AS [PerfilInsidecode]
   ,PROFILE_ACCESS.CODE AS [Perfil]
   ,MODULES.CODE AS [Module]
   ,MODULES.COD_MODULE AS [ModuleInsideCode]
   ,COMMERCIAL_ESTABLISHMENT.COD_EC AS [BusinessEstablishmentInsideCode]
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS [Identification]
   ,COMMERCIAL_ESTABLISHMENT.NAME AS [BusinessEstablishment]
   ,BRANCH_EC.COD_BRANCH AS [BranchInsideCode]
   ,BRANCH_EC.NAME AS [Branch]
   ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH AS [DepartmentInsideCode]
   ,DEPARTMENTS.NAME AS [Department]
   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE AS [ActiveAuthenticationFactor]
   ,CASE COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
		WHEN 1 THEN AUTHENTICATION_FACTOR.NAME
		WHEN 0 THEN NULL
		ELSE AUTHENTICATION_FACTOR.NAME
	END
	AS [AuthenticationFactor]
   ,AUTHENTICATION_FACTOR.COD_FACT AS [AuthenticationFactorInsideCode]
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
LEFT JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
LEFT JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
LEFT JOIN DEPARTMENTS
	ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER
INNER JOIN MODULES
	ON MODULES.COD_MODULE = USERS.COD_MODULE
LEFT JOIN ASS_FACTOR_AUTH_COMPANY
	ON ASS_FACTOR_AUTH_COMPANY.COD_COMP = COMPANY.COD_COMP
LEFT JOIN AUTHENTICATION_FACTOR
	ON AUTHENTICATION_FACTOR.COD_FACT = ASS_FACTOR_AUTH_COMPANY.COD_FACT

WHERE COD_ACCESS = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
OR USERS.EMAIL = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1

END;

--ET-1387

GO

ALTER PROCEDURE SP_FD_DATA_EC    
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_FD_DATA_EC]    
------------------------------------------------------------------------------------------    
Author        VERSION     Date      Description    
------------------------------------------------------------------------------------------    
Kennedy Alef  V1        2018-07-27  Creation    
Elir Ribeiro  V2        2018-11-07  Changed    
Lucas Aguiar  V3        2019-04-22  Add split    
Lucas Aguiar  V4        2019-07-01  rotina de travar agenda do ec    
Luiz Aquino   V5        2019-07-03  Is_Cerc    
Elir Ribeiro  V6        2019-10-01  changed Limit transaction monthy    
Caike Uchoa   V7        2019-10-03  add case split pelo afiliador    
Luiz Aquino   V8        2019-10-16  Add retencao de agenda    
Lucas Aguiar  V9        2019-10-28  Conta Cessao    
Marcus Gall   V10       2019-11-11  Add FK with BRANCH BUSINESS    
Marcus Gall   V11       2019-12-06  Add field HAS_CREDENTIALS    
Elir Ribeiro  V12       2020-01-08  trazendo dados meet consumer    
Elir Ribeiro  V13       2020-01-15  ajustando procedure    
Marcus Gall   V14       2020-01-22  Add Translate service    
Luiz Aquino   v15       2020-03-11  (ET-465) Add requested transaction type    
Elir Ribeiro  v16       2020-04-15  add servi?o de boleto    
Elir Ribeiro  v17       2020-04-17  add split boleto    
Caike Uch?a   v18       2020-04-22  add Multi EC    
Luiz Aquino   v19       2020-05-18  ET--598 Termo de aceite    
Elir Ribeiro  v20       2020-07-18  ET- 932 Integracao Visa    
Caike uchoa   v21       2020-10-28  Corre??o billettax    
Marcus Gall   v22  2021-01-11 Add PNCode SAP    
Marcus Gall   v23  2021-03-22 Add Validation PIX  
------------------------------------------------------------------------------------------*/    
(    
    @COD_EC INT    
)    
AS    
BEGIN
  
    
    DECLARE @CodSpotService INT
  
    
    DECLARE @COD_SPLIT_SERVICE INT;
  
    
    DECLARE @COD_BLOCK_SITUATION INT;
  
    
    DECLARE @COD_CUSTOMERINSTALLMENT INT;
  
    
    DECLARE @CodSchRetention INT;
  
    
    DECLARE @COD_TRANSLATE_SERVICE INT;
  
    
    DECLARE @CodBillet INT;
  
    
    DECLARE @CODSPLITBILLET INT;
  
    
    DECLARE @COD_MULTIEC_SERVICE INT;
  
    
    DECLARE @COD_THEME_EC INT;

-- GET COD_ITEM_SERVICES  
SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';
SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';
SELECT
	@CodBillet = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'BOLETO'
AND ACTIVE = 1;
SELECT
	@CODSPLITBILLET = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT BOLETO ONLINE'
AND ACTIVE = 1;
SELECT
	@COD_BLOCK_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';
SELECT
	@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'PARCELADOCLIENTE';
SELECT
	@CodSchRetention = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SCHEDULEDRETENTION';
SELECT
	@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';
SELECT
	@COD_MULTIEC_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'MULTI EC';
SELECT
	@COD_THEME_EC = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PaymentLinkEc'

SELECT
	CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN (SELECT
					SERVICES_AVAILABLE.SERVICE_AMOUNT
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
		ELSE 0
	END [BILLET_TAX]
   ,CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
		ELSE 0
	END [FINANCE_BLOCK]

   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPOT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_BILLET]

   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CODSPLITBILLET
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT_BILLET]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1
				AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
				AND SERVICES_AVAILABLE.COD_EC IS NULL)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_CUSTOMERINSTALLMENT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SCHRETENTION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_MULTIEC_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_MULTI_EC]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_THEME_EC
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_THEME_EC]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_TRANSLATE]
   ,BRANCH_EC.[NAME]
   ,BRANCH_EC.TRADING_NAME
   ,COMMERCIAL_ESTABLISHMENT.CODE AS CODE_EC
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,BRANCH_EC.BIRTHDATE
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,BRANCH_EC.NOTE AS NOTE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.ACTIVE
   ,ADDRESS_BRANCH.[ADDRESS]
   ,ADDRESS_BRANCH.number AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.[NAME] AS CITY
   ,[STATE].COD_STATE
   ,[STATE].[NAME] AS [STATE]
   ,COUNTRY.COD_COUNTRY
   ,COUNTRY.[NAME] AS COUNTRY
   ,BANKS.COD_BANK AS BANK_INSIDECODE
   ,BANKS.[NAME] AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
   ,BANK_DETAILS_EC.AGENCY AS AGENCY
   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,TYPE_RECEIPT.COD_TYPE_REC
   ,TYPE_RECEIPT.CODE AS TYPE_RECEIPT
   ,CARDS_TOBRANCH.CARDNUMBER
   ,CARDS_TOBRANCH.ACCOUNTID AS ACCOUNTID
   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS COD_CARD_BRANCH
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS TRANSACTION_ONLINE
   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
   ,MEET_COSTUMER.CNPJ AS [ACCEPTANCE]
   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) AS QTY_EMPLOYEES
   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AS AVERAGE_BILLING
   ,MEET_COSTUMER.URL_SITE
   ,MEET_COSTUMER.FACEBOOK
   ,MEET_COSTUMER.INSTAGRAM
   ,MEET_COSTUMER.STREET
   ,MEET_COSTUMER.COMPLEMENT AS [COMPLEMENTO]
   ,MEET_COSTUMER.ANOTHER_INFO
   ,MEET_COSTUMER.number
   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
   ,MEET_COSTUMER.CITY AS MEET_CITY
   ,MEET_COSTUMER.STATES
   ,MEET_COSTUMER.REFERENCEPOINT
   ,MEET_COSTUMER.ZIPCODE
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_PRESENTIAL_TRANSACTION]
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_ONLINE_TRANSACTION]
   ,COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED
   ,REQ_LANGUAGE_COMERCIAL.COD_COUNTRY
   ,REQ_LANGUAGE_COMERCIAL.COD_CURRRENCY
   ,REQ_LANGUAGE_COMERCIAL.COD_LANGUAGE
   ,rs.SITUATION_EC
   ,EXTERNAL_PARTN_UP.COD_EXTERNAL
   ,COMMERCIAL_ESTABLISHMENT.PIX_ACCEPTED
   ,USERS.IDENTIFICATION AS SALES_NAME
   ,BANK_DETAILS_EC.VALIDATION_PIX
   ,BANK_DETAILS_EC.KEY_PIX
   ,BANKS.CODE AS BANK_CODE
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
INNER JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
INNER JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
INNER JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
INNER JOIN TYPE_RECEIPT
	ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN CARDS_TOBRANCH
	ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN BRANCH_BUSINESS
	ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
LEFT JOIN MEET_COSTUMER
	ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
LEFT JOIN REQ_LANGUAGE_COMERCIAL
	ON REQ_LANGUAGE_COMERCIAL.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND REQ_LANGUAGE_COMERCIAL.ACTIVE = 1
INNER JOIN RISK_SITUATION rs
	ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION
LEFT JOIN EXTERNAL_PARTN_UP
	ON EXTERNAL_PARTN_UP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
JOIN USERS
	ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND (CARDS_TOBRANCH.COD_SITUATION = 15
OR CARDS_TOBRANCH.COD_SITUATION IS NULL)

END;