--ST-2149
GO

IF OBJECT_ID('SP_GW_LS_EC_COMPANY') IS NOT NULL
DROP PROCEDURE [SP_GW_LS_EC_COMPANY];

GO
CREATE PROCEDURE [dbo].[SP_GW_LS_EC_COMPANY]      
/*----------------------------------------------------------------------------------------               
Procedure Name: [SP_LS_EC_COMPANY]        Project.......: TKPP               
------------------------------------------------------------------------------------------               
Author        Version  Date                       Description               
------------------------------------------------------------------------------------------       
              
Kennedy Alef     V1  27/07/2018      Creation               
Elir Ribeiro     V2  05/08/2019  Changed Cod Risk Situation             
Marcus Gall   V3  2020-07-08  ET-957: Address and Bank Details on return         
Marcus Gall   V4  2020-11-05  ET-1153: Add CSC, Segment, Type EC and others info      
Caio Vitalino V5 2020-12-01   ET-1171: Add Risk Situation and justification, Filter by inactive and Email.    
Caio Vitalino V6 2020-12-03   SD-59: Add Code SEG.    
Caike Uchoa   v7 2021-05-0-25 ST-2149: add bankOperationCode
------------------------------------------------------------------------------------------*/       
(      
 @COD_COMP INT,      
 @SEARCH VARCHAR(100) = NULL,      
 @CODESAFF CODE_TYPE READONLY,      
 @QTD_BY_PAGE INT,      
 @NEXT_PAGE INT      
)      
AS      
BEGIN      
       
 SELECT      
     COMMERCIAL_ESTABLISHMENT.COD_EC      AS [COD_EC]      
    ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ     AS [CPF_CNPJ]      
    ,COMMERCIAL_ESTABLISHMENT.[NAME]     AS [NAME]      
    ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME    AS [TRADING_NAME]      
    ,BRANCH_EC.COD_BRANCH        AS [COD_BRANCH]      
    ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION  AS [COD_RISK_SITUATION]      
    ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER    AS [IS_PROVIDER]      
    ,AFFILIATOR.[NAME]         AS [AFF_NAME]      
    ,ADDRESS_BRANCH.[ADDRESS]       AS [STREET]      
    ,ADDRESS_BRANCH.[NUMBER]       AS [STREET_NUMBER]      
    ,ADDRESS_BRANCH.COMPLEMENT       AS [COMPLEMENT]      
    ,ADDRESS_BRANCH.REFERENCE_POINT      AS [REFERENCE_POINT]      
    ,ADDRESS_BRANCH.CEP         AS [CEP]      
    ,NEIGHBORHOOD.[NAME]        AS [NEIGHBORHOOD]      
    ,CITY.[NAME]          AS [CITY]      
    ,[STATE].[NAME]          AS [STATE]      
    ,[COUNTRY].[NAME]         AS [COUNTRY]      
    ,BANKS.CODE           AS [BANK_CODE]      
    ,BANKS.[NAME]          AS [BANK_NAME]      
    ,BANK_DETAILS_EC.AGENCY        AS [AGENCY]      
    ,BANK_DETAILS_EC.DIGIT_AGENCY      AS [AGENCY_DIGIT]      
    ,BANK_DETAILS_EC.ACCOUNT       AS [ACCOUNT]      
    ,BANK_DETAILS_EC.DIGIT_ACCOUNT      AS [ACCOUNT_DIGIT]      
    ,ACCOUNT_TYPE.[NAME]        AS [ACCOUNT_TYPE]      
 -- ET-1153      
 ,TYPE_ESTAB.CODE         AS [TYPE_ESTABLISHMENT]      
 ,SEGMENTS.CODE          AS [MCC]      
 ,COMMERCIAL_ESTABLISHMENT.BIRTHDATE     AS [BIRTHDATE]      
 ,COMMERCIAL_ESTABLISHMENT.CREATED_AT    AS [CREATED_AT]      
 ,COMMERCIAL_ESTABLISHMENT.MODIFY_DATE    AS [MODIFY_DATE]      
 ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY AS [LIMIT_TRANSACTION_MONTHLY]      
 ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY AS [LIMIT_TRANSACTION_DIALY]      
 ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT   AS [TRANSACTION_LIMIT]      
 ,MEET_COSTUMER.QTY_EMPLOYEES      AS [QTY_EMPLOYEES]      
 ,MEET_COSTUMER.URL_SITE        AS [URL_SITE]      
 ,MEET_COSTUMER.INSTAGRAM       AS [INSTAGRAM]      
 ,MEET_COSTUMER.FACEBOOK        AS [FACEBOOK]      
 ,MEET_COSTUMER.CNPJ         AS [MEET_COSTUMER_CNPJ]      
 ,MEET_COSTUMER.AVERAGE_BILLING      AS [AVERAGE_BILLING]      
 ,MEET_COSTUMER.STREET        AS [MEET_COSTUMER_STREET]      
 ,MEET_COSTUMER.NUMBER        AS [MEET_COSTUMER_STREET_NUMBER]      
 ,MEET_COSTUMER.COMPLEMENT       AS [MEET_COSTUMER_COMPLEMENT]      
 ,MEET_COSTUMER.NEIGHBORHOOD       AS [MEET_COSTUMER_NEIGHBORHOOD]      
 ,MEET_COSTUMER.CITY         AS [MEET_COSTUMER_CITY]      
 ,MEET_COSTUMER.STATES         AS [MEET_COSTUMER_STATE]      
 ,MEET_COSTUMER.REFERENCEPOINT      AS [MEET_COSTUMER_REFERENCE_POINT]      
 ,MEET_COSTUMER.ZIPCODE        AS [MEET_COSTUMER_ZIPCODE]      
 -- ET-1171    
 ,COMMERCIAL_ESTABLISHMENT.ACTIVE AS [ACTIVE]    
 ,RISK_SITUATION.[NAME] AS [RISK_SITUATION]    
 ,COMMERCIAL_ESTABLISHMENT.RISK_REASON AS [RISK_REASON]    
 ,COMMERCIAL_ESTABLISHMENT.EMAIL AS [EMAIL]    
 ,SEGMENTS.COD_SEG AS [COD_SEG]
 ,OPERATION.CODE AS BANK_OPERATION_CODE
 FROM COMMERCIAL_ESTABLISHMENT       
 INNER JOIN COMPANY ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP      
 INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC      
 LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR      
 LEFT JOIN ADDRESS_BRANCH ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH      
 LEFT JOIN NEIGHBORHOOD ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH      
 LEFT JOIN CITY ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY      
 LEFT JOIN [STATE] ON [STATE].COD_STATE = CITY.COD_STATE      
 LEFT JOIN [COUNTRY] ON [COUNTRY].COD_COUNTRY = [STATE].COD_COUNTRY      
 LEFT JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH      
 LEFT JOIN BANKS ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK      
 LEFT JOIN ACCOUNT_TYPE ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT      
 -- ET-1153      
 LEFT JOIN TYPE_ESTAB ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB       
 LEFT JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG      
 LEFT JOIN MEET_COSTUMER ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC    
 -- ET-1171    
 INNER JOIN RISK_SITUATION ON RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION    
 LEFT JOIN OPERATION_BANK ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
 LEFT JOIN OPERATION ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER     
 WHERE COMPANY.COD_COMP = 8       
 --ET - 1171    
 -- AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1    
 AND ADDRESS_BRANCH.ACTIVE = 1      
 AND BANK_DETAILS_EC.ACTIVE = 1      
 AND BRANCH_EC.TYPE_BRANCH = 'PRINCIPAL'      
 AND (@SEARCH IS NULL      
  OR (COMMERCIAL_ESTABLISHMENT.[NAME] LIKE ('%' + @SEARCH + '%'))      
  OR (COMMERCIAL_ESTABLISHMENT.CPF_CNPJ LIKE ('%' + @SEARCH + '%'))      
 )      
 AND ((SELECT COUNT(*) FROM @CODESAFF) = 0       
  OR COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IN (SELECT [CODE] FROM @CODESAFF)      
 )      
 ORDER BY 1 DESC OFFSET (@NEXT_PAGE - 1) * @QTD_BY_PAGE       
 ROWS FETCH NEXT @QTD_BY_PAGE ROWS ONLY      
END

GO

--ST-2149

GO

--ST-2160
  GO
IF OBJECT_ID('SP_UPDATE_PASS_RED_USER') IS NOT NULL
DROP PROCEDURE [SP_UPDATE_PASS_RED_USER];

GO
CREATE PROCEDURE [dbo].[SP_UPDATE_PASS_RED_USER]  
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_UPDATE_PASS_RED_USER]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION        Date                            Description  
------------------------------------------------------------------------------------------  
Kennedy Alef                      V1        27/07/2018                       Creation  
Caike Uchoa                       v2        30/04/2021                 alter pass e add reset logged 
Caike Uchoa                       v3        27/05/2021                         add @EXPIRE
------------------------------------------------------------------------------------------*/  
(  
@CODUSER INT,  
@PASS VARCHAR(200),
@RESET_LOGGED INT = 0
)  
AS  
DECLARE @USED INT = 0;  
DECLARE @EXPIRE INT;
BEGIN  


 SET @EXPIRE = (SELECT 
     CASE 
	WHEN (-1 * (DATEDIFF(DAY, ((DATEADD(DAY, 90, GETDATE()) + GETDATE()) - GETDATE()), PASS_HISTORY.CREATED_AT))) > 90 THEN 1
	ELSE 0 END AS EXPIRE
  FROM PASS_HISTORY WHERE
   PASS_HISTORY.ACTUAL = 1
 AND PASS_HISTORY.COD_USER = @CODUSER ) 

IF @RESET_LOGGED = 0
  BEGIN
--SELECT @USED=COUNT(*) FROM PASS_HISTORY WHERE PASS = @PASS AND COD_USER = @CODUSER;  
  
--IF @USED > 0  
--THROW 61001, 'PASSWORD ALREADY USED IN THE LAST 12 MONTHS',1  
  
UPDATE PASS_HISTORY SET PASS = @PASS, CREATED_AT= dbo.FN_FUS_UTF(GETDATE()) WHERE COD_USER = @CODUSER AND ACTUAL = 1 
  
 IF @@ROWCOUNT < 1 AND @EXPIRE = 0
 THROW 60000,'COULD NOT REGISTER PROVISORY_PASS_USER',1  
  
 UPDATE PROVISORY_PASS_USER SET ACTIVE = 0,MODIFY_DATE = GETDATE() WHERE COD_USER =  @CODUSER AND ACTIVE = 1  
 UPDATE DENIED_ACCESS_USER SET ACTIVE = 0 WHERE COD_USER = @CODUSER  
 DELETE FROM TEMP_TOKEN WHERE COD_USER = @CODUSER  


 END 
 ELSE 
 BEGIN 

 UPDATE PASS_HISTORY SET PASS = @PASS, CREATED_AT= dbo.FN_FUS_UTF(GETDATE()) WHERE COD_USER = @CODUSER AND ACTUAL = 1

 END 

  
END;



GO
IF OBJECT_ID('SP_VALIDADE_PASS_PROV') IS NOT NULL
DROP PROCEDURE [SP_VALIDADE_PASS_PROV];

GO
CREATE PROCEDURE [dbo].[SP_VALIDADE_PASS_PROV]  
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_VALIDADE_PASS_PROV]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION        Date                            Description  
------------------------------------------------------------------------------------------  
Kennedy Alef                       V1        27/07/2018                          Creation  
Caike Uchoa                        V2        07/05/2021                     add validate reset logado
Caike Uchoa                        v3        27/05/2021                         add @EXPIRE
------------------------------------------------------------------------------------------*/  
(  
@CODACESS VARCHAR(100),  
@ACCESSKEY VARCHAR(100),  
@PASS VARCHAR(100) = NULL,
@PASS_ACTUAL_INF VARCHAR(100) = NULL,
@RESET_LOGGED INT = 0
)  
AS  
DECLARE @PASSPROV VARCHAR(200) = NULL;  
DECLARE @CODEUSER INT = NULL;  
DECLARE @PASS_ACTUAL VARCHAR(200);
DECLARE @EXPIRE INT;

BEGIN  
  
 SET @EXPIRE = (SELECT 
     CASE 
	WHEN (-1 * (DATEDIFF(DAY, ((DATEADD(DAY, 90, GETDATE()) + GETDATE()) - GETDATE()), PASS_HISTORY.CREATED_AT))) > 90 THEN 1
	ELSE 0 END AS EXPIRE
  FROM USERS
  LEFT JOIN PASS_HISTORY 
  ON PASS_HISTORY.COD_USER = USERS.COD_USER
  AND PASS_HISTORY.ACTUAL = 1
 WHERE COD_ACCESS = @CODACESS  
     AND USERS.ACTIVE = 1  OR
     USERS.EMAIL = @CODACESS  
     AND USERS.ACTIVE = 1  ) 


IF @RESET_LOGGED = 0 
  BEGIN
SELECT @PASSPROV=PROVISORY_PASS_USER.VALUE, @CODEUSER = USERS.COD_USER FROM PROVISORY_PASS_USER  
  INNER JOIN USERS ON USERS.COD_USER = PROVISORY_PASS_USER.COD_USER  
  INNER JOIN COMPANY ON COMPANY.COD_COMP = USERS.COD_COMP    
  WHERE  COD_ACCESS = @CODACESS  
     AND  COMPANY.ACCESS_KEY = @ACCESSKEY  
     AND PROVISORY_PASS_USER.ACTIVE = 1   
     AND DATEDIFF(DAY,PROVISORY_PASS_USER.CREATED_AT,GETDATE()) <= 1 OR  
     USERS.EMAIL = @CODACESS  
     AND  COMPANY.ACCESS_KEY = @ACCESSKEY  
     AND PROVISORY_PASS_USER.ACTIVE = 1   
     AND DATEDIFF(DAY,PROVISORY_PASS_USER.CREATED_AT,GETDATE()) <= 1  
  
IF @PASSPROV IS NULL AND @EXPIRE = 0
THROW 61012,'TEMPORARY PASSWORD NOT FOUND',1;  
  
SELECT @CODEUSER AS COD_USER,@PASS AS PASS,@PASSPROV AS PROV  

END
ELSE 
BEGIN 

SELECT 
@CODEUSER = USERS.COD_USER,
@PASS_ACTUAL = PASS_HISTORY.PASS
FROM PASS_HISTORY 
  INNER JOIN USERS ON USERS.COD_USER = PASS_HISTORY.COD_USER  
  INNER JOIN COMPANY ON COMPANY.COD_COMP = USERS.COD_COMP    
  WHERE  COD_ACCESS = @CODACESS  
     AND  COMPANY.ACCESS_KEY = @ACCESSKEY  
     AND PASS_HISTORY.ACTUAL = 1   OR  
     USERS.EMAIL = @CODACESS  
     AND  COMPANY.ACCESS_KEY = @ACCESSKEY  
	 AND PASS_HISTORY.ACTUAL = 1 


 IF @PASS_ACTUAL_INF <> @PASS_ACTUAL OR  @PASS_ACTUAL_INF IS NULL 
THROW 61081,'Invalid password',1;  

  
SELECT @CODEUSER AS COD_USER


END


END

GO

--ST-2175

GO
IF OBJECT_ID('SP_GW_ASS_EQUIP_TO_MERCHANT') IS NOT NULL
DROP PROCEDURE SP_GW_ASS_EQUIP_TO_MERCHANT

GO
CREATE PROCEDURE SP_GW_ASS_EQUIP_TO_MERCHANT      
/*----------------------------------------------------------------------------------------                            
Project.......: TKPP                            
------------------------------------------------------------------------------------------                            
Author                  VERSION        Date             Description                            
------------------------------------------------------------------------------------------                                    
Caike Uch�a              V2          2021-04-15       alter number error "equipment not found"    
Caike Uch�a              V3          2021-06-01       alter number error "equipment not found"    
------------------------------------------------------------------------------------------*/  
(      
@COD_EC INT,      
@COD_AFF INT ,      
@SERIAL VARCHAR(100)      
)      
AS      
BEGIN      
      
DECLARE @COD_SITUATION INT;      
      
DECLARE @COD_EQUIP INT;      
      
DECLARE @COD_DEPTO INT;      
      
DECLARE @COD_USER INT;      
      
DECLARE @COD_AC INT;      
      
DECLARE @COD_COMP INT      
      
SELECT       
top 1      
@COD_SITUATION = COD_RISK_SITUATION,      
@COD_DEPTO = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH,      
@COD_USER = USERS.COD_USER,      
@COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP FROM  COMMERCIAL_ESTABLISHMENT       
JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC      
JOIN DEPARTMENTS_BRANCH ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH      
JOIN ACCESS_APPAPI ON ACCESS_APPAPI.COD_AFFILIATOR = @COD_AFF      
  AND ACCESS_APPAPI.ACTIVE=1      
JOIN USERS ON USERS.COD_USER = ACCESS_APPAPI.COD_USER_INT      
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF       
      
IF @COD_SITUATION IS NULL      
THROW 80700 , 'Merchant not found',1;      
      
IF @COD_SITUATION NOT IN ( 2, 9 )      
THROW 80701 , 'Invalid Risk situation for merchant',1;      
      
SELECT @COD_EQUIP = COD_EQUIP  FROM EQUIPMENT WHERE SERIAL = @SERIAL      
      
IF @COD_EQUIP IS NULL      
THROW 61082 , 'Equipment not found',1;      
      
IF (SELECT COUNT(*) FROM VW_COMPANY_EC_AFF_BR_DEP_EQUIP WHERE COD_EQUIP= @COD_EQUIP) >0       
THROW 80702 , 'Equipment already associated to another merchant',1;      
      
SELECT TOP 1 @COD_AC= COD_AC FROM ACQUIRER WHERE [GROUP] ='Pagseguro'      
      
      
EXEC [SP_REG_ASS_TID_EQUIP_EC_AFF]      
@COD_EQUIP = @COD_EQUIP,      
@COD_USER = @COD_USER,      
@COD_DEPTO = @COD_DEPTO,      
@COD_COMP  = @COD_COMP      
      
      
      
END;

GO


--ET-1415

IF OBJECT_ID('TYPE_BILLING') IS NOT NULL 
	DROP TABLE TYPE_BILLING;
GO
CREATE TABLE TYPE_BILLING (
	COD_TYPE_BILLING INT IDENTITY,
	CODE VARCHAR(100),
	ACTIVE INT DEFAULT 1 
	CONSTRAINT PK_TYPE_BILLING PRIMARY KEY (COD_TYPE_BILLING)
)
GO

IF OBJECT_ID('AFFILIATOR_CONDITIONS') IS NOT NULL 
	DROP TABLE AFFILIATOR_CONDITIONS;
GO
CREATE TABLE AFFILIATOR_CONDITIONS (
	[COD_AFF_CONDITIONS] INT IDENTITY,
	[COD_USER]			INT NOT NULL REFERENCES USERS ([COD_USER]),
	[COD_AFF]			INT NOT NULL REFERENCES AFFILIATOR ([COD_AFFILIATOR]),
	[COD_TP_BILLING]	INT NOT NULL REFERENCES TYPE_BILLING ([COD_TYPE_BILLING]),
	[CONFIG_JSON]		NVARCHAR(1024),
	[EXEMPTED]			BIT DEFAULT (0),
	[ACTIVE]			BIT DEFAULT (1),
	[CREATED_AT]		DATETIME DEFAULT CURRENT_TIMESTAMP,
	[MODIFY_DATE]		DATETIME NULL,

	CONSTRAINT PK_AFFILIATOR_CONDITIONS PRIMARY KEY (COD_AFF_CONDITIONS)
)
GO

IF NOT EXISTS ( SELECT 1 FROM TYPE_BILLING )
BEGIN
	INSERT INTO TYPE_BILLING (CODE) VALUES ('Markup');
	INSERT INTO TYPE_BILLING (CODE) VALUES ('Revenue Share');
END
GO
	
EXEC sys.sp_addextendedproperty
  @name=N'MS_Description' --name of property
 ,@value=N'0: Isento, 1: Cobrança' --descption text
 ,@level0type=N'SCHEMA'
 ,@level0name=N'dbo' --Schema name
 ,@level1type=N'TABLE'
 ,@level1name=N'AFFILIATOR_CONDITIONS' --Table Name
 ,@level2type=N'COLUMN'
 ,@level2name=N'EXEMPTED'   -- Column Name
 GO

IF OBJECT_ID('SP_LS_BILLING_TYPE') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LS_BILLING_TYPE;
END
GO
CREATE PROCEDURE [SP_LS_BILLING_TYPE]
AS  
BEGIN 
    SELECT [TYPE_BILLING].[COD_TYPE_BILLING] AS [INSIDE_CODE], [CODE]  
    FROM [TYPE_BILLING]  
	WHERE [ACTIVE] = 1;  
END
GO

IF OBJECT_ID('SP_REG_AFFILIATOR_CONDITIONS') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_AFFILIATOR_CONDITIONS
END
GO
CREATE PROCEDURE SP_REG_AFFILIATOR_CONDITIONS    
 /*----------------------------------------------------------------------------------------                                  
 Procedure Name: SP_REG_AFFILIATOR_CONDITIONS                                  
 Project.......: TKPP                                  
 ------------------------------------------------------------------------------------------                                  
 Author         VERSION        Date             Description                                  
 ------------------------------------------------------------------------------------------                                  
 Marcus Gall		V1   2021-05-27       Create
 ------------------------------------------------------------------------------------------*/     
@COD_USER INT,    
@COD_AFF INT,    
@COD_TP_BILLING INT,
@EXEMPTED BIT = 0,
@CONFIG_JSON VARCHAR(512) = NULL
AS  
BEGIN 

	UPDATE AFFILIATOR_CONDITIONS SET ACTIVE = 0, MODIFY_DATE = current_timestamp WHERE COD_AFF = @COD_AFF AND ACTIVE = 1;

	INSERT INTO AFFILIATOR_CONDITIONS ([COD_USER], [COD_AFF], [COD_TP_BILLING], [CONFIG_JSON], [EXEMPTED])  
	VALUES (@COD_USER, @COD_AFF, @COD_TP_BILLING, @CONFIG_JSON, @EXEMPTED);

END
GO

IF OBJECT_ID('SP_LS_AFF_CONDITIONS') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LS_AFF_CONDITIONS
END
GO
CREATE PROCEDURE [dbo].[SP_LS_AFF_CONDITIONS]  
/*----------------------------------------------------------------------------------------          
Procedure Name: SP_LS_AFF_CONDITIONS
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Marcus Gall						v1			  27/05/2021				Add Commercial Conditions
------------------------------------------------------------------------------------------*/   
(  
 @CodAff INT  
)  
AS  
BEGIN  
  
SET NOCOUNT ON  
  
SELECT  
   a.COD_AFFILIATOR [COD_AFF]  
   , cond.COD_TP_BILLING
   , cond.EXEMPTED
   , CAST(JSON_VALUE(CONFIG_JSON, '$.DataInicial') AS VARCHAR(100)) AS DATA_INICIAL
   , CAST(JSON_VALUE(CONFIG_JSON, '$.DataFinal') AS VARCHAR(100)) AS DATA_FINAL
   , CAST(JSON_VALUE(CONFIG_JSON, '$.QtyLimit') AS VARCHAR(100)) AS QTY_LIMIT
   , REPLACE(CAST(JSON_VALUE(CONFIG_JSON, '$.Discount') AS VARCHAR(100)), '.', ',') AS DISCOUNT
FROM AFFILIATOR a  
JOIN AFFILIATOR_CONDITIONS cond
 ON cond.COD_AFF = a.COD_AFFILIATOR 
 AND cond.ACTIVE = 1 
WHERE a.COD_AFFILIATOR = @CodAff  
END;
GO

IF NOT EXISTS(SELECT column_id FROM sys.columns WHERE object_id = OBJECT_ID('REPORT_CONSOLIDATED_TRANS_SUB') AND NAME = 'BILLING_TYPE_NAME') 
BEGIN
	ALTER TABLE [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ADD 
	 PLATF							VARCHAR(100) NULL
	, BILLING_TYPE_NAME				VARCHAR(50) NULL
	, EXEMPTED_BILLING_PLATFORM		VARCHAR(50) NULL
	, LIQUID_REVENUE_SHARE			DECIMAL(22, 6)
END
GO

IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL BEGIN
    DROP VIEW VW_REPORT_FULL_CASH_FLOW
END
GO
CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]              
/*----------------------------------------------------------------------------------------                                                                                  
View Name: [VW_REPORT_FULL_CASH_FLOW]                                                                                  
Project.......: TKPP                                                                                  
----------------------------------------------------------------------------------------                                                                                  
Author                          VERSION        Date                        Description                                                                                  
---------------------------------------------------------------------------------------                                                                                   
Caike Uch?a                       V1         30/03/2020            mdr afiliador-pela parcela                                                                   
Caike Uch?a                       V2         30/04/2020               add colunas produto ec                                                            
Caike Uch?a                       V3         03/08/2020                   add QTY_DAYS_ANTECIP                                                          
Caike Uch?a                       V4         20/08/2020                Corre??o val liquid afiliador                                     
Luiz Aquino                       v5         01/09/2020                    Plan DZero                                  
Caike Uchoa                       v6         01/09/2020                   Add cod_ec_prod                                  
Caike Uchoa                       V7         04/09/2020               Add correção qtd_days quando spot                                  
Caike Uchoa                       v8         10/11/2020                Add Program Manager                            
Caike uchoa                       v9         22/01/2021       add correção mdr_afiliador E antecip_aff val planoDzero                    
Caike Uchoa                       v10        08/02/2021                    add QTY_BUSINESS_DAY                    
Caike Uchoa                       v11        08/02/2021                    add SITUATION_TRAN                    
Marcus Gall                       v12        01/06/2021      add AFFILIATOR CONDITIONS
---------------------------------------------------------------------------------------*/              
AS        
    
WITH CTE        
AS        
(SELECT                                                                                          
  TRANSACTION_TITLES.TAX_INITIAL        
    ,TRANSACTION_TITLES.ANTICIP_PERCENT AS ANTECIP_EC        
    ,COALESCE(AFFILIATOR.[NAME], 'CELER') AS AFFILIATOR        
    ,[TRANSACTION_TYPE].CODE AS TRAN_TYPE        
    ,TRANSACTION_TITLES.PLOT        
    ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME) AS TRANSACTION_DATE        
    ,COMMERCIAL_ESTABLISHMENT.[NAME] AS MERSHANT        
    ,[TRANSACTION_TITLES].ACQ_TAX        
    ,[TRANSACTION_TITLES].PREVISION_PAY_DATE        
    ,[TRANSACTION_TITLES].PREVISION_RECEIVE_DATE        
    ,[TRANSACTION_TITLES].AMOUNT        
    ,[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT        
    ,[TRANSACTION].CODE AS NSU        
    ,[TRANSACTION].BRAND AS BRAND        
    ,ACQUIRER.[NAME] AS ACQUIRER        
    ,(IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0)) AS RATE        
    ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT,        
  TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB        
    ,COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0) AS ANTECIP_AFF        
    ,COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0) AS MDR_AFF        
    ,IIF((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
 AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  > 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT,        
  TRANSACTION_TITLES.PLOT,        
  TRANSACTION_TITLES.TAX_INITIAL,        
  TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , [TRANSACTION].COD_TTYPE), dbo.[FNC_ANT_VALUE_LIQ_DAYS](        
  TRANSACTION_TITLES.AMOUNT,        
  TRANSACTION_TITLES.TAX_INITIAL,        
  TRANSACTION_TITLES.PLOT,        
  TRANSACTION_TITLES.ANTICIP_PERCENT,        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))) AS EC        
    ,0 AS '0'        
    ,(IIF((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  > 0, dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED        
  (TRANSACTION_TITLES.AMOUNT,        
  TRANSACTION_TITLES.PLOT,        
  TRANSACTION_TITLES.TAX_INITIAL,        
  TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , [TRANSACTION].COD_TTYPE), (dbo.[FNC_ANT_VALUE_LIQ_DAYS]        
  (        
  TRANSACTION_TITLES.AMOUNT,        
  TRANSACTION_TITLES.TAX_INITIAL,        
  TRANSACTION_TITLES.PLOT,        
  TRANSACTION_TITLES.ANTICIP_PERCENT,        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(        
  DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))        
  ) -        
  (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))))) AS EC_TARIFF        
    ,[TRANSACTION].PLOTS AS TOTAL_PLOTS        
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](        
  TRANSACTION_TITLES.AMOUNT,        
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),        
  TRANSACTION_TITLES.PLOT,        
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))) AS AFF_DISCOUNT        
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](        
  (TRANSACTION_TITLES.AMOUNT),        
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],        
  TRANSACTION_TITLES.TAX_INITIAL),        
  TRANSACTION_TITLES.PLOT,        
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,        
  TRANSACTION_TITLES.ANTICIP_PERCENT)        
  , (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP)        
  )) AS AFF_DISCOUNT_TARIFF        
    ,(        
  dbo.[FNC_ANT_VALUE_LIQ_DAYS]        
  (        
  TRANSACTION_TITLES.AMOUNT,        
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],        
  TRANSACTION_TITLES.TAX_INITIAL) +        
  (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_AFF        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0)),        
  TRANSACTION_TITLES.PLOT,        
  [TRANSACTION_TITLES_COST].ANTICIP_PERCENT +        
  (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_AFF        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0)),        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))        
  )        
  -        
  dbo.[FNC_ANT_VALUE_LIQ_DAYS](        
  TRANSACTION_TITLES.AMOUNT,        
  TRANSACTION_TITLES.TAX_INITIAL +        
  (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0)),        
  TRANSACTION_TITLES.PLOT,        
  TRANSACTION_TITLES.ANTICIP_PERCENT +        
  (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0)),        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))        
  ) AS AFF        
    ,((        
  dbo.[FNC_ANT_VALUE_LIQ_DAYS]        
  ((TRANSACTION_TITLES.AMOUNT),        
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL)        
  +        
  (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_AFF        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0))        
  ,        
  TRANSACTION_TITLES.PLOT,        
  COALESCE(        
  [TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT)        
  +        
  (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_AFF        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0))        
  ,        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP)        
  ))        
  -        
  dbo.[FNC_ANT_VALUE_LIQ_DAYS](        
  (TRANSACTION_TITLES.AMOUNT),        
 TRANSACTION_TITLES.TAX_INITIAL        
  +        
  (IIF([TRANSACTION].COD_TTYPE = 2, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0))        
  , TRANSACTION_TITLES.PLOT,        
  TRANSACTION_TITLES.ANTICIP_PERCENT        
  +        
  (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)        
  , 0), 0))        
  ,        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP)))        
  )        
  + (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))        
  -        
  (IIF(TRANSACTION_TITLES.PLOT = 1, ISNULL([TRANSACTION_TITLES_COST].RATE_PLAN, 0), 0))        
  )        
  AS AFF_TARIFF        
    ,[TRANSACTION].COD_ASS_TR_COMP        
    ,TRANSACTION_TITLES.COD_TITLE        
    ,CE_DESTINY.COD_EC        
    ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR        
    ,BRANCH_EC.COD_BRANCH        
    ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH        
    ,[TRANSACTION].PAN        
    ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS 'CPF_CNPJ_ORIGINATOR'        
    ,CE_DESTINY.[NAME] AS 'EC_NAME_DESTINY'        
    ,CE_DESTINY.CPF_CNPJ AS 'CPF_CNPJ_DESTINY'        
    ,AFFILIATOR.CPF_CNPJ AS 'CPF_AFF'        
    ,(SELECT        
    EQUIPMENT.SERIAL        
   FROM ASS_DEPTO_EQUIP        
   INNER JOIN EQUIPMENT        
    ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP        
   WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)        
  AS SERIAL        
    ,[TRANSACTION_DATA_EXT].[VALUE] AS 'EXTERNAL_NSU'        
    ,[TRANSACTION].CODE        
    ,[TRANSACTION].COD_TRAN        
    ,[COMPANY].COD_COMP        
    ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN AS REP_COD_TRAN        
    ,[TRANSACTION].COD_SITUATION        
    ,dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL +        
  (IIF([TRANSACTION].COD_TTYPE = 2,        
  ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)        
  , 0), 0))        
  ,        
  [TRANSACTION_TITLES].AMOUNT) AS LIQUID_MDR_EC        
    ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS        
  (        
  COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT +        
  (IIF([TRANSACTION].COD_TTYPE = 1, ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_EC        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)        
  , 0), 0)), 0),        
  [TRANSACTION_TITLES].PLOT,        
  dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))        
  ) AS ANTECIP_DISCOUNT_EC        
    ,IIF([TRANSACTION].PLOTS = 1, dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE] +        
  IIF([TRANSACTION].COD_TTYPE = 1 AND (SELECT        
    COUNT(*)        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)        
  > 0,        
  TRANSACTION_TITLES_COST.TAX_PLANDZERO,        
  0), TRANSACTION_TITLES.AMOUNT),        
  dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], TRANSACTION_TITLES.AMOUNT)) AS LIQUID_MDR_AFF        
        
    ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS        
  (        
  COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0) +        
  IIF([TRANSACTION].COD_TTYPE = 1 AND (SELECT        
    COUNT(*)        
   FROM TRANSACTION_SERVICES        
   INNER JOIN ITEMS_SERVICES_AVAILABLE        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE =        
    ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE        
   WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'        
   AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)        
  > 0, TRANSACTION_TITLES_COST.TAX_PLANDZERO, 0),        
  [TRANSACTION_TITLES].PLOT,        
  dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,        
  [TRANSACTION_TITLES_COST].[PERCENTAGE]),        
  (IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY,        
  TRANSACTION_TITLES.PREVISION_PAY_DATE,        
  TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP))        
  ) AS ANTECIP_DISCOUNT_AFF        
    ,IIF((SELECT        
    COUNT(*)        
   FROM TRANSACTION_SERVICES WITH (NOLOCK)        
   WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_ITEM_SERVICE IN (4, 19))        
  > 0, 1,        
  0) AS SPLIT        
    ,EC_TRAN.COD_EC AS COD_EC_TRANS        
    ,EC_TRAN.NAME AS TRANS_EC_NAME        
    ,EC_TRAN.CPF_CNPJ AS TRANS_EC_CPF_CNPJ        
    ,[TRANSACTION_TITLES].[IS_ASSIGN] ASSIGNED        
    ,[ASSIGN_FILE_TITLE].RETAINED_AMOUNT        
    ,[ASSIGN_FILE_TITLE].[ORIGINAL_DATE]        
    ,CAST([TRANSACTION_TITLES].CREATED_AT AS DATE) TRAN_TITTLE_DATE        
    ,CAST([TRANSACTION_TITLES].CREATED_AT AS TIME) TRAN_TITTLE_TIME        
    ,''        
  [ASSIGNEE]        
    ,(SELECT TOP 1        
    TRANSACTION_DATA_EXT.[VALUE]        
   FROM TRANSACTION_DATA_EXT WITH (NOLOCK)        
   WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN      
   AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')        
  AS [AUTH_CODE]        
    ,[TRANSACTION].CREDITOR_DOCUMENT        
    ,(SELECT TOP 1       
    TRANSACTION_DATA_EXT.[VALUE]        
   FROM TRANSACTION_DATA_EXT WITH (NOLOCK)        
   WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN        
   AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')        
  AS ORDER_CODE        
    ,TRANSACTION_TITLES.COD_SITUATION [COD_SITUATION_TITLE]        
    ,[EQUIPMENT_MODEL].CODIGO AS MODEL_POS        
    ,[SEGMENTS].[NAME] AS SEGMENT_EC        
    ,[State].UF AS STATE_EC        
    ,[CITY].[NAME] AS CITY_EC        
    ,[NEIGHBORHOOD].[NAME] AS NEIGHBORHOOD_EC        
    ,[ADDRESS_BRANCH].COD_ADDRESS        
    ,SOURCE_TRANSACTION.DESCRIPTION AS TYPE_TRAN        
    ,EC_PROD.[NAME] AS [EC_PROD]        
    ,EC_PROD.CPF_CNPJ AS [EC_PROD_CPF_CNPJ]        
    ,TRAN_PROD.[NAME] AS [NAME_PROD]        
    ,SPLIT_PROD.[PERCENTAGE] AS [PERCENT_PARTICIP_SPLIT]        
    ,[TRANSACTION_TITLES_COST].RATE_PLAN        
    ,IIF(TRANSACTION_TITLES.IS_SPOT = 1,        
  DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE),        
  TRANSACTION_TITLES.QTY_DAYS_ANTECIP) AS QTY_DAYS_ANTECIP        
    ,IIF([TRANSACTION_TITLES].TAX_PLANDZERO IS NULL, 0, 1) AS IS_PLANDZERO        
    ,COALESCE([TRANSACTION_TITLES].TAX_PLANDZERO, 0) TAX_PLANDZERO        
    ,ISNULL((SELECT        
    TRANSACTION_SERVICES.TAX_PLANDZERO_AFF        
   FROM TRANSACTION_SERVICES WITH (NOLOCK)        
   INNER JOIN ITEMS_SERVICES_AVAILABLE isa        
    ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE        
   WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN        
   AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION].COD_EC        
   AND isa.NAME = 'PlanDZero')        
  , 0)        
  AS TAX_PLANDZEROAFF        
    ,USER_REPRESENTANTE.IDENTIFICATION AS SALES_REPRESENTANTE        
    ,USER_REPRESENTANTE.CPF_CNPJ AS CPF_CNPJ_REPRESENTANTE        
    ,USER_REPRESENTANTE.EMAIL AS EMAIL_REPRESENTANTE        
    ,EC_PROD.COD_EC AS [COD_EC_PROD]        
    ,IIF((SELECT        
    COUNT(*)        
   FROM TRANSACTION_SERVICES WITH (NOLOCK)        
   JOIN ITEMS_SERVICES_AVAILABLE ISA        
    ON ISA.COD_ITEM_SERVICE = TRANSACTION_SERVICES.COD_ITEM_SERVICE        
   WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN        
   AND ISA.NAME = 'RECURRING')        
  > 0, 1,        
  0) AS IS_RECURRING        
    ,AFFILIATOR.PROGRAM_MANAGER        
    ,NULL ASSIGN_PREVISION        
    ,NULL ASSIGN_ANTICIPATION        
    ,NULL ASSIGN_RATE        
    ,NULL ASSIGN_NET_VALUE        
    ,[TRANSACTION].TERMINAL_VERSION        
    ,TRANSACTION_TITLES.QTY_BUSINESS_DAY        
    ,CASE        
   WHEN [TRANSACTION].COD_SITUATION = 3 THEN 'CONFIRMADA'        
   WHEN [TRANSACTION].COD_SITUATION = 14 THEN 'BLOQUEADA'        
  END AS SITUATION_TRAN        
    ,(SELECT TOP 1        
    SERVICE_TAX        
   FROM TRANSACTION_SERVICES TS (NOLOCK)        
   JOIN ITEMS_SERVICES_AVAILABLE I        
    ON TS.COD_ITEM_SERVICE = I.COD_ITEM_SERVICE        
    AND I.NAME = 'PIX'        
   WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN)        
  AS [PIX_TAX_EC]        
    ,(SELECT TOP 1        
    TAX_TYPE        
   FROM TRANSACTION_SERVICES TS (NOLOCK)        
   JOIN ITEMS_SERVICES_AVAILABLE I        
    ON TS.COD_ITEM_SERVICE = I.COD_ITEM_SERVICE        
    AND I.NAME = 'PIX'        
   WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN)        
  AS [PIX_TAX_TYPE]        
    ,(SELECT TOP 1        
    SERVICE_TAX_AFF        
   FROM TRANSACTION_SERVICES TS (NOLOCK)        
   JOIN ITEMS_SERVICES_AVAILABLE I        
    ON TS.COD_ITEM_SERVICE = I.COD_ITEM_SERVICE        
    AND I.NAME = 'PIX'        
   WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN)        
  AS [PIX_TAX_AFF]        
    ,(SELECT TOP 1        
    TAX_TYPE_AFF        
   FROM TRANSACTION_SERVICES TS (NOLOCK)        
   JOIN ITEMS_SERVICES_AVAILABLE I        
    ON TS.COD_ITEM_SERVICE = I.COD_ITEM_SERVICE        
    AND I.NAME = 'PIX'        
   WHERE TS.COD_TRAN = [TRANSACTION].COD_TRAN)        
  AS [PIX_TAX_TYPE_AFF]
   , AFFILIATOR.PLATFORM_NAME AS PLATF
   , TYPE_BILLING.CODE AS BILLING_TYPE_NAME
   , AFFILIATOR_CONDITIONS.EXEMPTED
   , NULL LIQUID_REVENUE_SHARE 
 
 FROM [TRANSACTION_TITLES]        
 WITH (NOLOCK)        
 INNER JOIN [TRANSACTION]        
 WITH (NOLOCK)        
  ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN        
 LEFT JOIN [TRANSACTION_TITLES_COST]        
 WITH (NOLOCK)        
  ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE        
 INNER JOIN [TRANSACTION_TYPE]        
 WITH (NOLOCK)        
  ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE        
 LEFT JOIN AFFILIATOR        
 WITH (NOLOCK)        
  ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR        
 INNER JOIN ASS_DEPTO_EQUIP        
 WITH (NOLOCK)        
  ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL        
 INNER JOIN DEPARTMENTS_BRANCH        
 WITH (NOLOCK)        
  ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH        
 INNER JOIN DEPARTMENTS        
 WITH (NOLOCK)        
  ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS        
 INNER JOIN BRANCH_EC        
 WITH (NOLOCK)        
  ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH        
 INNER JOIN COMMERCIAL_ESTABLISHMENT        
 WITH (NOLOCK)        
  ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC        
 INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY        
 WITH (NOLOCK)        
  ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC        
 INNER JOIN PRODUCTS_ACQUIRER        
 WITH (NOLOCK)        
  ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ        
 INNER JOIN ACQUIRER        
 WITH (NOLOCK)        
  ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC        
 LEFT JOIN [TRANSACTION_DATA_EXT]        
 WITH (NOLOCK)        
  ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN        
 INNER JOIN [dbo].[PROCESS_BG_STATUS]        
 WITH (NOLOCK)        
  ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)        
 LEFT JOIN COMPANY        
 WITH (NOLOCK)        
  ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP        
 LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB]        
 WITH (NOLOCK)        
  ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)        
 LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN        
 WITH (NOLOCK)        
  ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC        
 LEFT JOIN [ASSIGN_FILE_TITLE](NOLOCK)        
  ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE        
  AND [ASSIGN_FILE_TITLE].ACTIVE = 1        
 LEFT JOIN ASSIGN_FILE(NOLOCK)        
  ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE        
 --LEFT JOIN ASSIGN_DATA(NOLOCK) ASSIGN_D        
 -- ON ASSIGN_D.COD_TITLE = TRANSACTION_TITLES.COD_TITLE        
 -- AND ASSIGN_D.ACTIVE = 1        
 --LEFT JOIN ASSIGN_FILE(NOLOCK) ASSIGN_F        
 -- ON ASSIGN_FILE.COD_ASSIGN_FILE = ASSIGN_D.COD_ASSIGN_FILE        
 --LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)        
 -- ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_F.COD_ASSIGN_FILE_MODEL        
 INNER JOIN [EQUIPMENT]        
 WITH (NOLOCK)        
  ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP        
 INNER JOIN [EQUIPMENT_MODEL]        
 WITH (NOLOCK)        
  ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL        
 INNER JOIN [SEGMENTS]        
 WITH (NOLOCK)        
  ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG        
 INNER JOIN [ADDRESS_BRANCH]        
 WITH (NOLOCK)        
  ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH        
  AND [ADDRESS_BRANCH].ACTIVE = 1        
 INNER JOIN [NEIGHBORHOOD]        
 WITH (NOLOCK)        
  ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH        
 INNER JOIN [CITY]        
 WITH (NOLOCK)        
  ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY        
 INNER JOIN [State]        
 WITH (NOLOCK)        
  ON [State].COD_STATE = [CITY].COD_STATE        
 INNER JOIN SOURCE_TRANSACTION        
 WITH (NOLOCK)        
  ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN        
 LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD]        
 WITH (NOLOCK)        
  ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD        
  AND [TRAN_PROD].ACTIVE = 1        
 LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD        
 WITH (NOLOCK)        
  ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD        
 LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD        
 WITH (NOLOCK)        
  ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC        
 LEFT JOIN SALES_REPRESENTATIVE        
  WITH (NOLOCK)        
  ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP        
 LEFT JOIN USERS USER_REPRESENTANTE        
  WITH (NOLOCK)        
  ON USER_REPRESENTANTE.COD_USER = SALES_REPRESENTATIVE.COD_USER        
 JOIN SITUATION        
 WITH (NOLOCK)        
  ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION     
 
 LEFT JOIN AFFILIATOR_CONDITIONS        
 WITH (NOLOCK)        
  ON AFFILIATOR_CONDITIONS.COD_AFF = [TRANSACTION].COD_AFFILIATOR
  AND [AFFILIATOR_CONDITIONS].ACTIVE = 1  
 LEFT JOIN TYPE_BILLING
 WITH (NOLOCK)        
  ON TYPE_BILLING.COD_TYPE_BILLING = [AFFILIATOR_CONDITIONS].COD_TP_BILLING 

 WHERE [TRANSACTION].COD_SITUATION IN (3, 14)        
 AND [TRANSACTION_TITLES].COD_SITUATION != 26        
 AND COALESCE([TRANSACTION_DATA_EXT].[NAME]        
 , '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')        
 AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0        
 AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3        
 AND DATEADD(MINUTE        
 , -5        
 , GETDATE())        
 > [TRANSACTION].CREATED_AT        
 AND DATEADD(MINUTE        
 , -5        
 , GETDATE())        
 > [TRANSACTION_TITLES].CREATED_AT        
 AND DATEPART(YEAR, [TRANSACTION].CREATED_AT) = DATEPART(YEAR, GETDATE())        
 AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)        
SELECT        
 AFFILIATOR        
   ,MERSHANT        
   ,SERIAL        
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE        
   ,CAST(TRANSACTION_DATE AS TIME) AS TRANSACTION_TIME        
   ,NSU        
   ,EXTERNAL_NSU        
   ,TRAN_TYPE        
   ,TRANSACTION_AMOUNT        
   ,TOTAL_PLOTS AS QUOTA_TOTAL        
   ,AMOUNT AS 'QUOTA_AMOUNT'        
   ,PLOT AS QUOTA        
   ,ACQUIRER        
   ,ACQ_TAX AS 'MDR_ACQ'        
   ,BRAND        
   ,CTE.TAX_INITIAL AS 'MDR_EC'        
   ,ANTECIP_EC AS 'ANTICIP_EC'        
   ,MDR_AFF AS 'MDR_AFF'        
   ,ANTECIP_AFF AS 'ANTICIP_AFF'        
   ,LIQUID_SUB AS 'TO_RECEIVE_ACQ'       ,CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'        
   ,(LIQUID_SUB - AFF_DISCOUNT) AS 'NET_WITHOUT_FEE_SUB'        
   ,RATE_PLAN AS 'FEE_AFFILIATOR'        
   ,(LIQUID_SUB - AFF_DISCOUNT_TARIFF) AS 'NET_SUB'        
   ,AFF AS 'NET_WITHOUT_FEE_AFF'        
   ,AFF_TARIFF AS 'NET_AFF'        
   ,EC AS 'MERCHANT_WITHOUT_FEE'        
   ,CTE.RATE AS 'FEE_MERCHANT'        
   ,EC_TARIFF AS 'MERCHANT_NET'        
   ,CAST(PREVISION_PAY_DATE AS DATE) AS 'PREDICTION_PAY_DATE'        
   ,IIF(TRAN_TYPE = 'CREDITO' AND        
 (CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)), 1, 0) AS ANTECIPATED        
   ,COD_EC        
   ,CTE.COD_AFFILIATOR        
   ,COD_BRANCH        
   ,CTE.COD_DEPTO_BRANCH        
   ,PAN        
   ,CPF_CNPJ_ORIGINATOR        
   ,EC_NAME_DESTINY        
   ,CPF_CNPJ_DESTINY        
   ,CPF_AFF        
   ,CTE.CODE        
   ,CTE.COD_TRAN        
   ,CTE.COD_COMP        
   ,CTE.REP_COD_TRAN        
   ,CTE.COD_SITUATION        
   ,CTE.LIQUID_MDR_EC        
   ,CTE.ANTECIP_DISCOUNT_EC        
   ,CTE.LIQUID_MDR_AFF        
   ,CTE.ANTECIP_DISCOUNT_AFF        
   ,CTE.SPLIT        
   ,CTE.COD_EC_TRANS        
   ,CTE.TRANS_EC_NAME        
   ,CTE.TRANS_EC_CPF_CNPJ        
   ,CTE.[ASSIGNED]        
   ,CTE.RETAINED_AMOUNT        
   ,CTE.[ORIGINAL_DATE]        
   ,CTE.[ASSIGNEE]        
   ,CTE.TRAN_TITTLE_DATE        
   ,CTE.TRAN_TITTLE_TIME        
   ,CTE.AUTH_CODE        
   ,CTE.CREDITOR_DOCUMENT        
   ,CTE.ORDER_CODE        
   ,CTE.COD_TITLE        
   ,CTE.[COD_SITUATION_TITLE]        
   ,CTE.MODEL_POS        
   ,CTE.SEGMENT_EC        
   ,CTE.STATE_EC        
   ,CTE.CITY_EC        
   ,CTE.NEIGHBORHOOD_EC        
   ,CTE.COD_ADDRESS        
   ,CTE.TYPE_TRAN        
   ,CTE.NAME_PROD        
   ,CTE.EC_PROD        
   ,CTE.EC_PROD_CPF_CNPJ        
   ,CTE.PERCENT_PARTICIP_SPLIT        
   ,CTE.QTY_DAYS_ANTECIP        
   ,CTE.IS_PLANDZERO        
   ,CTE.TAX_PLANDZERO        
   ,CTE.EC_TARIFF        
   ,CTE.AFF_TARIFF        
   ,AFF        
   ,CTE.TAX_PLANDZEROAFF        
   ,CTE.SALES_REPRESENTANTE        
   ,CTE.CPF_CNPJ_REPRESENTANTE        
   ,CTE.EMAIL_REPRESENTANTE        
   ,CTE.COD_EC_PROD        
   ,CTE.IS_RECURRING        
   ,CTE.PROGRAM_MANAGER        
   ,CTE.ASSIGN_PREVISION        
   ,CTE.ASSIGN_ANTICIPATION        
   ,CTE.ASSIGN_RATE        
   ,CTE.ASSIGN_NET_VALUE        
   ,CTE.QTY_BUSINESS_DAY        
   ,CTE.SITUATION_TRAN        
   ,CTE.TERMINAL_VERSION        
   ,CTE.PIX_TAX_EC        
   ,CTE.PIX_TAX_TYPE        
   ,CTE.PIX_TAX_AFF        
   ,CTE.PIX_TAX_TYPE_AFF        
   ,CTE.PLATF
   ,CTE.BILLING_TYPE_NAME
   , CASE        
        WHEN CTE.EXEMPTED = 1 THEN 'Isento'        
        WHEN CTE.EXEMPTED = 0 THEN 'Cobrança'        
        ELSE NULL
        END AS EXEMPTED_BILLING_PLATFORM 
   ,IIF(CTE.BILLING_TYPE_NAME = 'Revenue Share', (CTE.AFF_TARIFF / 2), NULL) AS LIQUID_REVENUE_SHARE
FROM CTE
GO

IF OBJECT_ID('SP_REG_REPORT_CONSOLIDATED_TRANS_SUB') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_REPORT_CONSOLIDATED_TRANS_SUB
END
GO
CREATE PROCEDURE [dbo].[SP_REG_REPORT_CONSOLIDATED_TRANS_SUB]                  
    WITH RECOMPILE                  
/*----------------------------------------------------------------------------------------                  
    Project.......: TKPP                  
------------------------------------------------------------------------------------------                  
    Author                          VERSION           Date             Description                  
------------------------------------------------------------------------------------------                  
    Fernando Henrique F. de O       V1              28/12/2018      Creation                  
    Fernando Henrique F. de O       V2              07/02/2019      Changed                  
    Luiz Aquino                     V3              22/02/2019      Remove Incomplete Installments                  
    Lucas Aguiar                    V4              22-04-2019      add originador e destino                  
    Caike Ucha                      V5              16/08/2019      add columns AUTH_CODE e CREDITOR_DOCUMENT                  
    Caike Ucha                      V6              11/09/2019      add column ORDER_CODE                  
    Marcus Gall                     V7              27/11/2019      Add Model_POS, Segment, Location_EC                  
    Ana Paula Liick                 V8              31/01/2020      Add Origem_Trans                  
    Caike Ucha                      V9              30/04/2020      add produto ec                  
    Caike Uchoa                     V10             03/08/2020      add QTY_DAYS_ANTECIP                  
    Caike Uchoa                     V11             06/08/2020      Add AMOUNT_NEW                  
    Caike Uchoa                     V12             27/08/2020      add representante                  
    Luiz Aquino                     V13             02/07/2020      PlanDZero (ET-895)                  
    Caike Uchoa                     v14             01/09/2020      Add cod_ec_prod                  
    Caike Uchoa                     v15             10/11/2020      Add Program Manager                  
	Caike Uchoa                     v16             08/02/2021      add QTY_BUSINESS_DAY                
	Caike Uchoa                     v17             08/02/2021      add SITUATION_TRAN     
	Marcus Gall                     v18             01/06/2021      add AFFILIATOR CONDITIONS
------------------------------------------------------------------------------------------*/                  
AS                  
DECLARE @COUNT INT = 0;      
                  
BEGIN      
     
---------------------------------------------                  
--------------RECORDS INSERT-----------------                  
---------------------------------------------                  
SELECT      
 --TOP (1000)                  
 [VW_REPORT_FULL_CASH_FLOW].COD_TRAN      
   ,[VW_REPORT_FULL_CASH_FLOW].AFFILIATOR      
   ,[VW_REPORT_FULL_CASH_FLOW].MERSHANT      
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_DATE      
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_TIME      
   ,[VW_REPORT_FULL_CASH_FLOW].NSU      
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_TOTAL      
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TYPE      
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA      
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_AMOUNT AMOUNT      
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_AMOUNT      
   ,[VW_REPORT_FULL_CASH_FLOW].ACQUIRER      
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_ACQ      
   ,[VW_REPORT_FULL_CASH_FLOW].BRAND      
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_AFF      
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_AFF      
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_RATE      
   ,[VW_REPORT_FULL_CASH_FLOW].ANTECIPATED      
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_PAY_DATE      
   ,[VW_REPORT_FULL_CASH_FLOW].TO_RECEIVE_ACQ      
   ,[VW_REPORT_FULL_CASH_FLOW].NET_AFF      
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_EC                  
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF AS NET_WITHOUT_FEE_AFF_RATE       ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_ACQ      
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_RECEIVE_DATE      
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_MERCHANT AS RATE      
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_AFF, 0) AS ANTECIP_DISCOUNT_AFF      
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_EC, 0) AS ANTECIP_DISCOUNT_EC      
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].MDR_CURRENT_ACQ, 0) AS MDR_CURRENT_ACQ                  
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_AFF, 0) AS LIQUID_MDR_AFF      
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_AFF, 0) AS RATE_CURRENT_AFF                  
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_CURRENT_EC                  
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_EC, 0) AS LIQUID_MDR_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_WITHOUT_FEE      
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_AFFILIATOR      
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB      
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_SUB      
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF      
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_NET      
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_ORIGINATOR AS 'CPF_EC'      
   ,[VW_REPORT_FULL_CASH_FLOW].EC_NAME_DESTINY AS 'ECNAME_DESTINY'      
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_DESTINY AS 'DESTINY'      
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_AFF AS CPF_AFF      
   ,[VW_REPORT_FULL_CASH_FLOW].SERIAL      
   ,[VW_REPORT_FULL_CASH_FLOW].EXTERNAL_NSU      
   ,[VW_REPORT_FULL_CASH_FLOW].PAN      
   ,[VW_REPORT_FULL_CASH_FLOW].CODE      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_COMP      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_BRANCH      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_DEPTO_BRANCH      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_AFFILIATOR      
   ,[VW_REPORT_FULL_CASH_FLOW].SPLIT      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_TRANS      
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_NAME      
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_CPF_CNPJ      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION      
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNED]      
   ,[VW_REPORT_FULL_CASH_FLOW].[RETAINED_AMOUNT]      
   ,[VW_REPORT_FULL_CASH_FLOW].[ORIGINAL_DATE]      
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNEE]      
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_TIME      
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_DATE      
   ,[VW_REPORT_FULL_CASH_FLOW].AUTH_CODE      
   ,[VW_REPORT_FULL_CASH_FLOW].CREDITOR_DOCUMENT      
   ,[VW_REPORT_FULL_CASH_FLOW].ORDER_CODE      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_TITLE      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION_TITLE      
   ,[VW_REPORT_FULL_CASH_FLOW].MODEL_POS      
   ,[VW_REPORT_FULL_CASH_FLOW].SEGMENT_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].STATE_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].CITY_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].NEIGHBORHOOD_EC      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_ADDRESS      
   ,[VW_REPORT_FULL_CASH_FLOW].TYPE_TRAN      
   ,[VW_REPORT_FULL_CASH_FLOW].NAME_PROD      
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD      
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD_CPF_CNPJ      
   ,[VW_REPORT_FULL_CASH_FLOW].PERCENT_PARTICIP_SPLIT      
   ,[VW_REPORT_FULL_CASH_FLOW].IS_PLANDZERO      
   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZERO      
   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZEROAFF      
   ,dbo.VW_REPORT_FULL_CASH_FLOW.QTY_DAYS_ANTECIP      
   ,[VW_REPORT_FULL_CASH_FLOW].SALES_REPRESENTANTE      
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_REPRESENTANTE      
   ,[VW_REPORT_FULL_CASH_FLOW].EMAIL_REPRESENTANTE      
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_PROD      
   ,[VW_REPORT_FULL_CASH_FLOW].IS_RECURRING      
   ,[VW_REPORT_FULL_CASH_FLOW].PROGRAM_MANAGER      
   ,[VW_REPORT_FULL_CASH_FLOW].ASSIGN_PREVISION      
   ,[VW_REPORT_FULL_CASH_FLOW].ASSIGN_ANTICIPATION      
   ,[VW_REPORT_FULL_CASH_FLOW].ASSIGN_RATE      
   ,[VW_REPORT_FULL_CASH_FLOW].ASSIGN_NET_VALUE      
   ,[VW_REPORT_FULL_CASH_FLOW].SITUATION_TRAN      
   ,VW_REPORT_FULL_CASH_FLOW.TERMINAL_VERSION      
   ,[VW_REPORT_FULL_CASH_FLOW].QTY_BUSINESS_DAY      
   ,VW_REPORT_FULL_CASH_FLOW.PIX_TAX_EC      
   ,VW_REPORT_FULL_CASH_FLOW.[PIX_TAX_TYPE]      
   ,VW_REPORT_FULL_CASH_FLOW.PIX_TAX_AFF      
   ,VW_REPORT_FULL_CASH_FLOW.PIX_TAX_TYPE_AFF 
   ,VW_REPORT_FULL_CASH_FLOW.PLATF
   ,VW_REPORT_FULL_CASH_FLOW.BILLING_TYPE_NAME
   ,VW_REPORT_FULL_CASH_FLOW.EXEMPTED_BILLING_PLATFORM
   ,VW_REPORT_FULL_CASH_FLOW.LIQUID_REVENUE_SHARE

INTO #TB_REPORT_FULL_CASH_FLOW_INSERT      
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW]      
ORDER BY COD_TRAN, QUOTA      
OFFSET 0 ROWS FETCH FIRST 1000 ROWS ONLY;      
      
WITH TRANINFO      
AS      
(SELECT      
  COUNT(COD_TRAN) AVAILABLE_INSTALLMENTS      
    ,COD_TRAN      
    ,QUOTA_TOTAL      
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT installments      
 GROUP BY COD_TRAN      
   ,QUOTA_TOTAL)      
DELETE INSTALLMENT      
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT INSTALLMENT      
 JOIN TRANINFO      
  ON TRANINFO.COD_TRAN = INSTALLMENT.COD_TRAN      
WHERE TRANINFO.QUOTA_TOTAL > TRANINFO.AVAILABLE_INSTALLMENTS      
      
SELECT      
 @COUNT = COUNT(*)      
FROM #TB_REPORT_FULL_CASH_FLOW_INSERT;      
      
IF @COUNT > 0      
BEGIN      
INSERT INTO [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([COD_TRAN],      
[AFFILIATOR],      
[COMMERCIALESTABLISHMENT],      
[TRANSACTION_DATE],      
[TRANSACTION_TIME],      
[NSU],      
[QUOTA_TOTAL],      
[TRANSACTION_TYPE],      
[PLOT],      
[AMOUNT],      
[TRANSACTION_AMOUNT],      
[ACQUIRER],      
[MDR_ACQUIRER],      
[BRAND],      
[MDR_EC],      
[ANTECIP_PERCENT],      
[ANTECIP_AFFILIATOR],      
[MDR_AFFILIATOR],      
[LIQUID_VALUE_SUB],      
[ANTECIPATED],      
[PREVISION_PAY_DATE],      
[TO_RECEIVE_ACQ],      
[LIQUID_VALUE_AFFILIATOR],      
[LIQUID_AFF_RATE],      
[LIQUID_SUB_RATE],      
[PREVISION_RECEIVE_DATE],      
[RATE],      
[ANTECIP_CURRENT_AFF],      
[ANTECIP_CURRENT_EC],      
[MDR_CURRENT_AFF],      
[MDR_CURRENT_EC],      
[LIQUID_VALUE_EC],      
[FEE_AFFILIATOR],      
[NET_SUB_AQUIRER],      
[NET_WITHOUT_FEE_SUB],      
[NET_WITHOUT_FEE_AFF], [MERCHANT_NET],      
[CPF_EC],      
[DESTINY],      
[CPF_AFF],      
[SERIAL],      
[EXTERNALNSU],      
[PAN],      
[CODE],      
[COD_COMP],      
[COD_EC],      
[COD_BRANCH],      
[COD_DEPTO_BRANCH],      
[COD_AFFILIATOR],      
[COD_SITUATION],      
[SPLIT],      
[COD_EC_TRANS],      
[TRANS_EC_NAME],      
[TRANS_EC_CPF_CNPJ]      
, [ASSIGNED]      
, [RETAINED_AMOUNT]      
, [ORIGINAL_DATE]      
, [ASSIGNEE]      
, [MODIFY_DATE]      
, EC_NAME_DESTINY      
, TRANSACTION_TITTLE_DATE      
, TRANSACTION_TITTLE_TIME      
, AUTH_CODE      
, CREDITOR_DOCUMENT      
, ORDER_CODE      
, COD_TITLE      
, COD_SITUATION_TITLE      
, MODEL_POS      
, SEGMENT_EC      
, STATE_EC      
, CITY_EC      
, NEIGHBORHOOD_EC      
, COD_ADDRESS      
, TYPE_TRAN      
, NAME_PROD      
, EC_PROD      
, EC_PROD_CPF_CNPJ      
, PERCENT_PARTICIP_SPLIT      
, IS_PLANDZERO      
, TAX_PLANDZERO      
, QTY_DAYS_ANTECIP      
, TAX_PLANDZERO_AFF      
, SALES_REPRESENTANTE      
, CPF_CNPJ_REPRESENTANTE      
, EMAIL_REPRESENTANTE      
, COD_EC_PROD      
, IS_RECURRING      
, PROGRAM_MANAGER      
, QTY_BUSINESS_DAY      
, SITUATION_TRAN      
, TERMINAL_VERSION      
, PIX_TAX_EC      
, PIX_TAX_TYPE_EC      
, PIX_TAX_AFF      
, PIX_TAX_TYPE_AFF
, PLATF
, BILLING_TYPE_NAME
, EXEMPTED_BILLING_PLATFORM
, LIQUID_REVENUE_SHARE
)      
 (SELECT      
  TEMP.[COD_TRAN]      
    ,TEMP.[AFFILIATOR]      
    ,TEMP.[MERSHANT]      
    ,TEMP.[TRANSACTION_DATE]      
    ,TEMP.[TRANSACTION_TIME]      
    ,TEMP.[NSU]      
    ,TEMP.[QUOTA_TOTAL]      
    ,TEMP.[TRAN_TYPE]      
    ,TEMP.[QUOTA]      
    ,TEMP.[AMOUNT]      
    ,TEMP.[TRANSACTION_AMOUNT]      
    ,TEMP.[ACQUIRER]      
    ,TEMP.[MDR_ACQ]      
    ,TEMP.[BRAND]      
    ,TEMP.[MDR_EC]      
    ,TEMP.[ANTICIP_EC]      
    ,TEMP.[ANTICIP_AFF]      
    ,TEMP.[MDR_AFF]      
    ,TEMP.[NET_SUB_RATE]      
    ,TEMP.[ANTECIPATED]      
    ,TEMP.[PREDICTION_PAY_DATE]      
    ,TEMP.[TO_RECEIVE_ACQ]      
    ,TEMP.[NET_AFF]      
    ,TEMP.[NET_WITHOUT_FEE_AFF_RATE]      
    ,TEMP.[NET_SUB_ACQ]      
    ,TEMP.[PREDICTION_RECEIVE_DATE]      
    ,TEMP.[RATE]      
    ,TEMP.[ANTECIP_DISCOUNT_AFF]      
    ,TEMP.[ANTECIP_DISCOUNT_EC]      
    ,TEMP.[LIQUID_MDR_AFF]      
    ,TEMP.[LIQUID_MDR_EC]      
    ,TEMP.[MERCHANT_WITHOUT_FEE]      
    ,TEMP.[FEE_AFFILIATOR]      
    ,TEMP.[NET_SUB]      
    ,TEMP.[NET_WITHOUT_FEE_SUB]      
    ,TEMP.[NET_WITHOUT_FEE_AFF]      
    ,TEMP.[MERCHANT_NET]      
    ,TEMP.[CPF_AFF]      
    ,TEMP.[DESTINY]      
    ,TEMP.[CPF_EC]      
    ,TEMP.[SERIAL]      
    ,TEMP.[EXTERNAL_NSU]      
    ,TEMP.[PAN]      
    ,TEMP.[CODE]      
    ,TEMP.[COD_COMP]      
    ,TEMP.[COD_EC]      
    ,TEMP.[COD_BRANCH]      
    ,TEMP.[COD_DEPTO_BRANCH]      
    ,TEMP.[COD_AFFILIATOR]      
    ,TEMP.[COD_SITUATION]      
    ,TEMP.[SPLIT]      
    ,TEMP.[COD_EC_TRANS]      
    ,TEMP.[TRANS_EC_NAME]      
    ,TEMP.[TRANS_EC_CPF_CNPJ]      
    ,TEMP.[ASSIGNED]      
    ,TEMP.[RETAINED_AMOUNT]      
    ,TEMP.[ORIGINAL_DATE]      
    ,TEMP.[ASSIGNEE]      
    ,GETDATE()      
    ,TEMP.ECNAME_DESTINY      
    ,TRAN_TITTLE_DATE      
    ,TRAN_TITTLE_TIME      
    ,TEMP.AUTH_CODE      
    ,TEMP.CREDITOR_DOCUMENT      
    ,TEMP.ORDER_CODE      
    ,TEMP.COD_TITLE      
    ,TEMP.COD_SITUATION_TITLE      
    ,TEMP.MODEL_POS      
    ,TEMP.SEGMENT_EC      
    ,TEMP.STATE_EC      
    ,TEMP.CITY_EC      
    ,TEMP.NEIGHBORHOOD_EC      
    ,TEMP.COD_ADDRESS      
    ,TEMP.TYPE_TRAN      
    ,TEMP.NAME_PROD      
    ,TEMP.EC_PROD      
    ,TEMP.EC_PROD_CPF_CNPJ      
    ,TEMP.PERCENT_PARTICIP_SPLIT      
    ,TEMP.IS_PLANDZERO      
    ,TEMP.TAX_PLANDZERO      
    ,TEMP.QTY_DAYS_ANTECIP      
    ,TEMP.TAX_PLANDZEROAFF      
    ,TEMP.SALES_REPRESENTANTE      
    ,TEMP.CPF_CNPJ_REPRESENTANTE      
    ,TEMP.EMAIL_REPRESENTANTE      
    ,TEMP.COD_EC_PROD      
    ,TEMP.IS_RECURRING      
    ,TEMP.PROGRAM_MANAGER      
    ,TEMP.QTY_BUSINESS_DAY      
    ,TEMP.SITUATION_TRAN      
    ,TEMP.TERMINAL_VERSION      
    ,TEMP.PIX_TAX_EC      
    ,TEMP.PIX_TAX_TYPE      
    ,TEMP.PIX_TAX_AFF      
    ,TEMP.PIX_TAX_TYPE_AFF      
	,TEMP.PLATF
	,TEMP.BILLING_TYPE_NAME
	,TEMP.EXEMPTED_BILLING_PLATFORM
	,TEMP.LIQUID_REVENUE_SHARE
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT TEMP      
 )      
      
IF @@rowcount < 1      
THROW 60000, 'COULD NOT REGISTER [REPORT_CONSOLIDATED_TRANS_SUB] ', 1;      
      
UPDATE [PROCESS_BG_STATUS]      
SET STATUS_PROCESSED = 1      
   ,MODIFY_DATE = GETDATE()      
FROM [PROCESS_BG_STATUS]      
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_INSERT      
 ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_INSERT.COD_TRAN)      
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;      
      
IF @@rowcount < 1      
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;      
END;      
      
---------------------------------------------                  
--------------RECORDS UPDATE-----------------                  
---------------------------------------------                  
SELECT      
 [VW_REPORT_FULL_CASH_FLOW_UP].COD_TRAN      
   ,[VW_REPORT_FULL_CASH_FLOW_UP].COD_SITUATION      
   ,[VW_REPORT_FULL_CASH_FLOW_UP].TRANSACTION_AMOUNT      
   ,[VW_REPORT_FULL_CASH_FLOW_UP].SITUATION_TRAN INTO #TB_REPORT_FULL_CASH_FLOW_UPDATE      
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW_UP]      
      
      
SELECT      
 @COUNT = COUNT(*)      
FROM #TB_REPORT_FULL_CASH_FLOW_UPDATE;      
      
IF @COUNT > 0      
BEGIN      
UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]      
SET [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_SITUATION      
   ,[REPORT_CONSOLIDATED_TRANS_SUB].MODIFY_DATE = GETDATE()      
   ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT = #TB_REPORT_FULL_CASH_FLOW_UPDATE.TRANSACTION_AMOUNT      
   ,[REPORT_CONSOLIDATED_TRANS_SUB].SITUATION_TRAN = #TB_REPORT_FULL_CASH_FLOW_UPDATE.SITUATION_TRAN      
FROM [REPORT_CONSOLIDATED_TRANS_SUB]      
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE      
 ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN =      
 #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN);      
      
IF @@rowcount < 1      
THROW 60001, 'COULD NOT UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]', 1;      
      
UPDATE [PROCESS_BG_STATUS]      
SET STATUS_PROCESSED = 1      
   ,MODIFY_DATE = GETDATE()      
FROM [PROCESS_BG_STATUS]      
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE      
 ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN)      
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;      
      
IF @@rowcount < 1      
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;      
END;      
END;
GO

IF OBJECT_ID('SP_REPORT_CONSOLIDATED_TRANSACTION_SUB') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_CONSOLIDATED_TRANSACTION_SUB
END
GO
CREATE PROCEDURE [dbo].[SP_REPORT_CONSOLIDATED_TRANSACTION_SUB]            
            
/**************************************************************************************************************                              
    Project.......: TKPP                                                  
 ------------------------------------------------------------------------------------------                                                  
     Author                      VERSION        Date                            Description                                                  
 ------------------------------------------------------------------------------------------                                                  
    Fernando Henrique F. de O       V1         28/12/2018                          Creation                                                
    Fernando Henrique F. de O       V2         07/02/2019                          Changed                                                    
    Elir Ribeiro                    V3         29/07/2019                          Changed date                                          
    Caike Ucha Almeida              V4         16/08/2019                        Inserting columns                                         
    Caike Ucha Almeida              V5         11/09/2019                        Inserting column                                        
    Marcus Gall                     V6         27/11/2019               Add Model_POS, Segment, Location_EC                                
    Ana Paula Liick                 V8         31/01/2020                       Add Origem_Trans                                
    Caike Ucha                      V9         30/04/2020                       add produto ec                            
    Luiz Aquino                     V10        02/07/2020                   PlanoDZero (ET-895)                   
    Caike Uch�a                     V11        03/08/2020                       add QTY_DAYS_ANTECIP                    
    Caike Uch�a                     V12        07/08/2020                       ISNULL na RATE_PLAN                  
    Caike Uchoa                     v13        01/09/2020                       Add cod_ec_prod                
    Caike Uchoa                     v14        10/11/2020                  Add Program Manager              
    Caike Uchoa                     v15        08/02/2021                    add QTY_BUSINESS_DAY          
    Caike Uchoa                     v16        08/02/2021                   add SITUATION_TRAN          
	Caike Uchoa                     v17        06/04/2021                   add isnull mdr e antecip aff  
	Marcus Gall                     v17        01/06/2021                   add Commercial Conditions
**************************************************************************************************************/           
(@CODCOMP VARCHAR(10),            
 @INITIAL_DATE DATETIME,            
 @FINAL_DATE DATETIME,            
 @EC VARCHAR(10),            
 @BRANCH VARCHAR(10),            
 @DEPART VARCHAR(10),            
 @TERMINAL VARCHAR(100),            
 @STATE VARCHAR(100),            
 @CITY VARCHAR(100),            
 @TYPE_TRAN VARCHAR(10),            
 @SITUATION VARCHAR(10),            
 @NSU VARCHAR(100) = NULL,            
 @NSU_EXT VARCHAR(100) = NULL,            
 @BRAND VARCHAR(50) = NULL,            
 @PAN VARCHAR(50) = NULL,            
 @CODAFF INT = NULL,            
 @SPLIT INT = NULL,            
 @CODACQUIRER INT = NULL,            
 @ISPlanDZero INT = NULL,            
 @COD_EC_PROD INT = NULL,        
 @TERMINAL_VERSION VARCHAR(200) = NULL)            
AS            
BEGIN    
      
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';    
    DECLARE @AWAITINGSPLIT INT = NULL;    

SET NOCOUNT ON;    
SET ARITHABORT ON;    
    
SELECT TOP 1    
 @AWAITINGSPLIT = [COD_SITUATION]    
FROM [SITUATION]    
WHERE [NAME] = 'WAITING FOR SPLIT OF FINANCE SCHEDULE';    
    
SET @QUERY_BASIS = 'SELECT                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].AFFILIATOR AS AFFILIATOR,                                     
        [REPORT_CONSOLIDATED_TRANS_SUB].COMMERCIALESTABLISHMENT AS MERCHANT,                                
        [REPORT_CONSOLIDATED_TRANS_SUB].SERIAL  AS SERIAL,                    
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE  AS TRANSACTION_DATE,           
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TIME  AS TRANSACTION_TIME,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].NSU  AS NSU ,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].EXTERNALNSU  AS EXTERNAL_NSU,                                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TYPE  AS TRAN_TYPE,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT  AS TRANSACTION_AMOUNT,                                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].QUOTA_TOTAL  AS QUOTA_TOTAL,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].AMOUNT  AS  AMOUNT,                         
        [REPORT_CONSOLIDATED_TRANS_SUB].PLOT  AS QUOTA,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].ACQUIRER  AS ACQUIRER,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_ACQUIRER  AS MDR_ACQ,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].BRAND  AS BRAND,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_EC  AS MDR_EC,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_PERCENT  AS ANTICIP_EC,                                   
        ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].MDR_AFFILIATOR,0)  AS MDR_AFF,                                   
        ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_AFFILIATOR,0)  AS ANTICIP_AFF,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].TO_RECEIVE_ACQ  AS TO_RECEIVE_ACQ,                                            
        [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_RECEIVE_DATE  AS PREDICTION_RECEIVE_DATE,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_SUB  AS NET_WITHOUT_FEE_SUB,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].FEE_AFFILIATOR  AS FEE_AFFILIATOR,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_SUB_AQUIRER  AS NET_SUB,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_AFF  AS NET_WITHOUT_FEE_AFF,                                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_AFFILIATOR  AS NET_AFF,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_EC  AS MERCHANT_WITHOUT_FEE,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].MERCHANT_NET  AS MERCHANT_NET,                             
        IIF([REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] is not null, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ,[REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE )  AS PREDICTION_PAY_DATE,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIPATED  AS ANTECIPATED,                                                
        [REPORT_CONSOLIDATED_TRANS_SUB].RATE,                                                
        --[REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_ACQ  AS MDR_CURRENT_ACQ,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_EC  AS MDR_CURRENT_EC,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_EC  AS ANTICIP_CURRENT_EC,                                                        
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_EC  AS RATE_CURRENT_EC,                                                      
        ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_AFF,0)  AS MDR_CURRENT_AFF,                                                        
        ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_AFF,0)  AS ANTICIP_CURRENT_AFF,                                                   
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_AFF  AS RATE_CURRENT_AFF,                
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_EC  AS CPF_AFF,                                              
        [REPORT_CONSOLIDATED_TRANS_SUB].DESTINY  AS DESTINY,                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_AFFILIATOR  AS COD_AFFILIATOR,                                                          [REPORT_CONSOLIDATED_TRANS_SUB].COD_BRANCH  AS COD_BRANCH,                                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_DEPTO_BRANCH  AS COD_DEPTO_BRANCH,                                       
        [REPORT_CONSOLIDATED_TRANS_SUB].PAN  AS PAN,                                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_AFF AS ORIGINATOR,                                                
        [REPORT_CONSOLIDATED_TRANS_SUB].CODE  AS CODE,                                                   
        [REPORT_CONSOLIDATED_TRANS_SUB].SPLIT,                                              
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_NAME,                                              
		[REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_CPF_CNPJ                                              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED]                                              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[RETAINED_AMOUNT]                                                 
        --, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE]                                  
        ,IIF( [REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED] = 1, [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ) [ORIGINAL_DATE]                              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNEE]                                              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_NAME_DESTINY                                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_DATE                                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_TIME                                         
        ,[REPORT_CONSOLIDATED_TRANS_SUB].AUTH_CODE                                        
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CREDITOR_DOCUMENT                                        
        ,[REPORT_CONSOLIDATED_TRANS_SUB].ORDER_CODE                                      
        ,CASE WHEN [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION_TITLE = @AwaitingSplit THEN 1 ELSE 0 END [AWAITINGSPLIT]                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].MODEL_POS                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].SEGMENT_EC                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].STATE_EC                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CITY_EC                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NEIGHBORHOOD_EC                                  
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS                                
		,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TYPE_TRAN                                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NAME_PROD                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD_CPF_CNPJ                            
        ,ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].PERCENT_PARTICIP_SPLIT,0) PERCENT_PARTICIP_SPLIT                           
        ,[REPORT_CONSOLIDATED_TRANS_SUB].IS_PLANDZERO                          
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO                            
		,IIF([REPORT_CONSOLIDATED_TRANS_SUB].[TRANSACTION_TYPE] = ''CREDITO'', [REPORT_CONSOLIDATED_TRANS_SUB].QTY_DAYS_ANTECIP , 0)  QTY_DAYS_ANTECIP                        
		,isnull([REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO_AFF, 0) TAX_PLANDZERO_AFF                        
		,[REPORT_CONSOLIDATED_TRANS_SUB].SALES_REPRESENTANTE                      
		,[REPORT_CONSOLIDATED_TRANS_SUB].CPF_CNPJ_REPRESENTANTE                      
		,[REPORT_CONSOLIDATED_TRANS_SUB].EMAIL_REPRESENTANTE                
		,[REPORT_CONSOLIDATED_TRANS_SUB].IS_RECURRING                   
		,[REPORT_CONSOLIDATED_TRANS_SUB].PROGRAM_MANAGER            
		,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_PREVISION            
		,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_ANTICIPATION            
		,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_RATE            
		,[REPORT_CONSOLIDATED_TRANS_SUB].ASSIGN_NET_VALUE            
		,[REPORT_CONSOLIDATED_TRANS_SUB].QTY_BUSINESS_DAY          
		,[REPORT_CONSOLIDATED_TRANS_SUB].SITUATION_TRAN          
		,[REPORT_CONSOLIDATED_TRANS_SUB].TERMINAL_VERSION        
		,[REPORT_CONSOLIDATED_TRANS_SUB].QTY_BUSINESS_DAY        
		,[REPORT_CONSOLIDATED_TRANS_SUB].PIX_TAX_EC        
		,[REPORT_CONSOLIDATED_TRANS_SUB].PIX_TAX_TYPE_EC        
		,[REPORT_CONSOLIDATED_TRANS_SUB].PIX_TAX_AFF        
		,[REPORT_CONSOLIDATED_TRANS_SUB].PIX_TAX_TYPE_AFF        
		,[REPORT_CONSOLIDATED_TRANS_SUB].SITUATION_TRAN        
		,[REPORT_CONSOLIDATED_TRANS_SUB].PLATF
		,[REPORT_CONSOLIDATED_TRANS_SUB].BILLING_TYPE_NAME
		,[REPORT_CONSOLIDATED_TRANS_SUB].EXEMPTED_BILLING_PLATFORM
		,[REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_REVENUE_SHARE
  
	FROM [REPORT_CONSOLIDATED_TRANS_SUB]                                                         
	WHERE REPORT_CONSOLIDATED_TRANS_SUB.COD_COMP = @CODCOMP                                  
		AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION IN (3,14)                                                  
';    
            
    IF @INITIAL_DATE IS NOT NULL            
        AND @FINAL_DATE IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,    
' AND [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE BETWEEN @INITIAL_DATE AND @FINAL_DATE  ');    
    
IF @EC IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_EC = @EC ');    
IF @BRANCH IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '  AND COD_BRANCH =  @BRANCH ');    
IF @DEPART IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_DEPTO_BRANCH =  @DEPART ');    
IF (@CODAFF IS NOT NULL)    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_AFFILIATOR = @CodAff ');    
IF LEN(@BRAND) > 0    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND BRAND = @BRAND ');    
IF LEN(@NSU) > 0    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CODE = @NSU ');    
IF @PAN IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND PAN = @PAN ');    
IF (@SPLIT = 1)    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SPLIT = 1');    
    
IF (@ISPlanDZero = 1)    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND IS_PLANDZERO = 1');    
    
IF @COD_EC_PROD IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_EC_PROD = @COD_EC_PROD');    
    
IF @CODACQUIRER IS NOT NULL    
SET @QUERY_BASIS =    
CONCAT(@QUERY_BASIS, ' AND ACQUIRER = (SELECT [NAME] FROM ACQUIRER WHERE COD_AC = @CODACQUIRER ) ');    
IF @TERMINAL_VERSION IS NOT NULL    
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_CONSOLIDATED_TRANS_SUB].TERMINAL_VERSION = @TERMINAL_VERSION ');    
    
EXEC [sp_executesql] @QUERY_BASIS    
     ,N'                                                 
           @CODCOMP VARCHAR(10),                                         
           @INITIAL_DATE DATE,                                         
           @FINAL_DATE DATE,                                        
           @EC int,                                         
           @BRANCH int,                                         
           @DEPART int,                                       
           @TERMINAL varchar(100),                                         
           @STATE varchar(25),                                         
           @CITY varchar(40),                                
           @TYPE_TRAN int,                                         
           @SITUATION int,                                         
           @NSU varchar(100),                             
           @NSU_EXT varchar(100),                                                      
     @BRAND varchar(50) ,                                       
           @PAN VARCHAR(50),                                         
           @CodAff INT,             
           @CODACQUIRER INT,                                  
    @AwaitingSplit INT = NULL,                
     @COD_EC_PROD INT,               
     @TERMINAL_VERSION VARCHAR(200)        
           '    
     ,@CODCOMP = @CODCOMP    
     ,@INITIAL_DATE = @INITIAL_DATE    
     ,@FINAL_DATE = @FINAL_DATE    
     ,@EC = @EC    
     ,@BRANCH = @BRANCH    
     ,@DEPART = @DEPART    
     ,@TERMINAL = @TERMINAL    
     ,@STATE = @STATE    
     ,@CITY = @CITY    
     ,@TYPE_TRAN = @TYPE_TRAN    
     ,@SITUATION = @SITUATION    
     ,@NSU = @NSU    
     ,@NSU_EXT = @NSU_EXT    
     ,@BRAND = @BRAND    
     ,@PAN = @PAN    
     ,@CODAFF = @CODAFF    
     ,@CODACQUIRER = @CODACQUIRER    
     ,@AWAITINGSPLIT = @AWAITINGSPLIT    
     ,@COD_EC_PROD = @COD_EC_PROD    
     ,@TERMINAL_VERSION = @TERMINAL_VERSION;    
    
END;
GO

IF OBJECT_ID('SP_REG_AFFILIATOR') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_AFFILIATOR;
END
GO
create PROCEDURE [dbo].[SP_REG_AFFILIATOR]                                                                                                    
 /*----------------------------------------------------------------------------------------                                                            
 Procedure Name: SP_REG_AFFILIATOR                                                            
 Project.......: TKPP                                                            
 ------------------------------------------------------------------------------------------                                                            
 Author                          VERSION        Date              Description                                                            
 ------------------------------------------------------------------------------------------                                                            
 Gian Luca Dalle Cort              V1          31/07/2018          CREATION                                                            
 Gian Luca Dalle Cort              V2          31/07/2018          CHANGE                                                            
 Kennedy Alef de Oliveira          V3          25/08/2018          CHANGE                                                       
 Elir  Ribeiro                     V4          31/08/2018          CHANGE                                        
 Luiz Aquino                       v5          13/12/2018     INCLUDE HAS_SPOT AND SPOT_TAX                                        
 Lucas Aguiar                      v6          14/12/2018     Add  TRANSACTION_DIGITED                                        
 Elir Ribeiro                      v7          21/03/2019     changed COD_COMP,CODUSER                                    
 Lucas Aguiar                      v8          2019-04-17     Add Split service                                     
 Lucas Aguiar                      v9          2019-08-28     Add serviço do notification                                    
 Elir Ribeiro                      v10         20200-01-21    add contracts affiliator                                   
 Elir Ribeiro                      v11         2020-01-22     add propposed number                               
 Elir Ribeiro                      v12         2020-01-23     add documents                        
 Elir Ribeiro                      v13         2020-01-29     add description in documents                      
 Caike Uchôa                       v14         20/02/2019     Add service Afiliator operation           
 Caike Uchoa                       V15         21/10/2020     Add cod_user_modify, created_at e modify_date    
 Caike Uchoa                       v17         10/11/2020     Add Program Manager    
 Elir Ribeiro                      v18         13/11/2020     add null in @PROGRAM_MANAGER  
 Marcus Gall					   v19		   02/06/2021	  Add CommercialConditions
 ------------------------------------------------------------------------------------------*/                                        
(                                                        
-- INFO BASE                                                      
  @COD_COMP INT,                                                            
  @NAME VARCHAR(100),                                                                    
  @CPF_CNPJ VARCHAR(14),                                                             
  @COD_USER_CAD INT,                                                            
  @FIREBASE_NAME VARCHAR(100) = NULL,                                                            
  @COD_USER_ALT INT,                                                   
 -- ADDRESS                                                  
  @ADDRESS VARCHAR(250),                                                            
  @NUMBER VARCHAR(50),                                                            
  @COMPLEMENT VARCHAR(400) = NULL,                                                            
  @CEP VARCHAR(80),                            
  @COD_NEIGH INT,                                                            
  @REFERENCE_POINT VARCHAR(200) = NULL,                             
 ----- CONTACT                            
 @CELL_NUMBER VARCHAR(30),                                                             
 @COD_TP_CONT INT,                       
 @COD_OPER INT,                                                            
 @DDI VARCHAR(20),                                                            
 @DDD VARCHAR(20),                                            
 -- SUBDOMAIN              
 @SUBDOMAIN varchar(100),                                                        
 -- PLAN                                            
 @COD_PLAN [CODE_TYPE] READONLY,                                                    
 -- THEME                                                  
  @LOGO_AFFILIATE VARCHAR(400),                                                      
  @LOGO_HEADER_AFFILIATE VARCHAR(400),                                                        
  @COLOR_HEADER VARCHAR(400) = NULL,                                                      
  @BACKGROUND_IMAGE VARCHAR(400) = NULL,                                                      
  @SECONDARY_COLOR VARCHAR(400) = NULL ,                                                  
  @CSS_FILE VARCHAR(100) = NULL,                   
  @PROGRESSIVE_COST INT,                                                  
 -- BANK DETAILS                                                      
 @AGENCY VARCHAR(100) = NULL,                                                    
 @DIGIT VARCHAR(100) = NULL,                                 
 @ACCOUNT VARCHAR(100)= NULL,                                                   
 @DIGIT_ACCOUNT VARCHAR(100)= NULL,                                                   
 @BANK INT = NULL,                          
 @ACCOUNT_TYPE INT = NULL,                                        
--SPOT                                        
 @HAS_SPOT INT = 0,                                        
 @SPOT_TAX DECIMAL(6,2)= 0,                                    
--SPLIT                                    
 @HAS_SPLIT INT = 0,                                      
 @SPLIT INT = 0,                                    
 --Notification Afiliador                                    
 @HAS_NOTIFICATION INT = 0,                                    
 @PASSWORD_NOTIFICATION VARCHAR(255) = NULL,                                    
 @CLIENTID_NOTIFICATION VARCHAR(255) = NULL,                                  
 @PLATFORM_NAME VARCHAR(100) = NULL,                                  
 @COMPANY_NAME VARCHAR(100) = NULL,                                  
 @STATE_REGISTRATION VARCHAR(100) = NULL,                                  
 @MUNICIPAL_REGISTRATION VARCHAR(100) = NULL ,                                  
 @TYPECONTRACTS INT = NULL,                                  
 @CONTROLNUMBER VARCHAR (100) = NULL,                                  
 @DESCRIPTION VARCHAR(100) = NULL ,                              
 @PROPOSED_NUMBER varchar(100) = NULL,                                  
 @NAME_CONTACT VARCHAR(100) = NULL,                            
 @MAIL_CONTACT VARCHAR(100) = NULL,                          
 @DOCUMENTS VARCHAR(100) = NULL,                       
 @DESCRIPTION_DOCUMENT VARCHAR(200) = NULL,                         
 @CONTRACTS VARCHAR(100) = NULL,                        
 @TYPEDOCS int = NULL,              
 @OPERATION_AFF INT,              
 -- Translate Service                  
 @HAS_TRANSLATION INT = 0,    
 @PROGRAM_MANAGER VARCHAR(100)   = NULL,

 -- Commercial Conditions
 @COD_TP_BILLING INT,
 @EXEMPTED BIT = 0,
 @CONFIG_JSON VARCHAR(512) = NULL
)                                                            
AS                                        
                                                            
DECLARE @SEQ INT;    
DECLARE @IDAFL INT;    
DECLARE @CONT INT;    
DECLARE @PROG INT;    
DECLARE @COD_SPLIT INT;    
DECLARE @cod_plan_int int;    
DECLARE @COD_GWNOTIFICATION INT;    
DECLARE @COD_TRANSLATE INT;    
                                    
BEGIN    
    
(SELECT    
 @cod_plan_int = CODE    
FROM @COD_PLAN);    
SELECT    
 @CONT = COUNT(*)    
FROM AFFILIATOR    
WHERE CPF_CNPJ = @CPF_CNPJ    
    
IF @CONT > 0    
THROW 61002, 'AFILIADOR Já CADASTRADO', 1;    
    
SET @SEQ = NEXT VALUE FOR [SEQ_AFLCODE];    
    
SELECT    
 @COD_GWNOTIFICATION = COD_ITEM_SERVICE    
FROM ITEMS_SERVICES_AVAILABLE    
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';    
    
SELECT    
 @COD_TRANSLATE = COD_ITEM_SERVICE    
FROM ITEMS_SERVICES_AVAILABLE    
WHERE [NAME] = 'TRANSLATE';    
/********************** REGISTER AFFILIATOR ****************/    
    
INSERT INTO AFFILIATOR (COD_COMP,    
NAME,    
CREATED_AT,    
ACTIVE,    
CODE,    
CPF_CNPJ,    
COD_USER_CAD,    
FIREBASE_NAME,    
MODIFY_DATE,    
COD_USER_ALT,    
SUBDOMAIN,    
COD_OPER_COST,    
--HAS_SPOT,                                        
SPOT_TAX,    
COD_SITUATION,    
PLATFORM_NAME,    
COMPANY_NAME,    
STATE_REGISTRATION,    
MUNICIPAL_REGISTRATION,    
PROPOSED_NUMBER,    
OPERATION_AFF,    
PROGRAM_MANAGER)    
 VALUES (@COD_COMP, @NAME, current_timestamp, 1, @SEQ, @CPF_CNPJ, @COD_USER_CAD, @FIREBASE_NAME, current_timestamp, @COD_USER_ALT, @SUBDOMAIN, (SELECT TOP 1 COD_OPER_COST FROM OPERATION_COST WHERE COD_COMP = @COD_COMP AND ACTIVE = 1), @SPOT_TAX, (SELECT 
  
COD_SITUATION FROM SITUATION WHERE [NAME] = 'RELEASED'), @PLATFORM_NAME, @COMPANY_NAME, @STATE_REGISTRATION, @MUNICIPAL_REGISTRATION, @PROPOSED_NUMBER, @OPERATION_AFF, @PROGRAM_MANAGER);    
    
IF @@rowcount < 1    
THROW 60000, 'COULD NOT REGISTER AFFILIATOR', 1;    
    
SET @IDAFL = @@identity;    
        
          
                
                  
                                    
                                        
                                        
 IF @HAS_SPOT = 1                                        
 BEGIN    
        
          
                
                  
                                    
                         
                                        
 DECLARE @CodSpotService INT    
SELECT    
 @CodSpotService = COD_ITEM_SERVICE    
FROM ITEMS_SERVICES_AVAILABLE    
WHERE CODE = '1'    
    
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)    
 VALUES (current_timestamp, @COD_USER_CAD, @CodSpotService, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)    
    
END    
    
IF @HAS_SPLIT = 1    
BEGIN    
SELECT    
 @COD_SPLIT = COD_ITEM_SERVICE    
FROM ITEMS_SERVICES_AVAILABLE    
WHERE [NAME] = 'SPLIT';    
    
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)    
 VALUES (current_timestamp, @COD_USER_CAD, @COD_SPLIT, @COD_COMP, @IDAFL, NULL, 1, current_timestamp, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE CODE = @SPLIT))    
END;    
    
/************ UPDATE TRANSLATE SERVICE **********/    
IF @HAS_TRANSLATION = 1    
BEGIN    
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)    
 VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)    
END;    
/************ UPDATE NOTIFICATION AFFILIATED **********/    
    
IF @HAS_NOTIFICATION = 0    
BEGIN    
    
UPDATE SERVICES_AVAILABLE    
SET ACTIVE = 0    
   ,COD_USER = @COD_USER_ALT    
   ,MODIFY_DATE = current_timestamp    
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION    
AND COD_COMP = @COD_COMP    
AND COD_AFFILIATOR = @IDAFL    
AND COD_EC IS NULL;    
    
UPDATE ACCESS_APPAPI    
SET ACTIVE = 0    
   ,COD_USER_MODIFY = @COD_USER_ALT    
   ,MODIFY_DATE = CURRENT_TIMESTAMP    
WHERE COD_AFFILIATOR = @IDAFL    
AND ACTIVE = 1    
END    
ELSE    
IF @HAS_NOTIFICATION = 1    
BEGIN    
    
UPDATE SERVICES_AVAILABLE    
SET ACTIVE = 0    
   ,COD_USER = @COD_USER_ALT    
   ,MODIFY_DATE = current_timestamp    
WHERE COD_ITEM_SERVICE = @COD_GWNOTIFICATION    
AND COD_COMP = @COD_COMP    
AND COD_AFFILIATOR = @IDAFL    
AND COD_EC IS NULL;    
    
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)    
 VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @IDAFL, NULL, 1, current_timestamp)    
    
EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @IDAFL    
          ,@PASSWORD_NOTIFICATION    
          ,@CLIENTID_NOTIFICATION    
          ,@COD_USER_ALT;    
    
END    
    
    
    
/************ REGISTER PROGRESSIVEE COST AFFILIATOR **********/    
    
INSERT INTO PROGRESSIVE_COST_AFFILIATOR (COD_AFFILIATOR,    
COD_PROG_COST,    
COD_TYPE_PROG,    
COD_USER)    
 SELECT    
  @IDAFL    
    ,COD_PROG_COST    
    ,COD_TYPE_PROG    
    ,@COD_USER_CAD    
 FROM PROGRESSIVE_COST    
 WHERE COD_COMP = @COD_COMP    
 AND ACTIVE = 1    
 AND COD_TYPE_PROG = @PROGRESSIVE_COST    
    
SET @PROG = @@identity;    
    
INSERT INTO ITENS_PROG_COST_AFF (COD_PROG_COST_AF,    
QTY_INITIAL,    
QTY_FINAL,    
FIX_COST,    
ADITIONAL_COST)    
 SELECT    
  @PROG    
    ,ITENS_PROG_COST.QTY_INITIAL    
    ,ITENS_PROG_COST.QTY_FINAL    
    ,ITENS_PROG_COST.FIX_COST    
    ,ITENS_PROG_COST.ADITIONAL_COST    
 FROM ITENS_PROG_COST    
 INNER JOIN PROGRESSIVE_COST    
  ON PROGRESSIVE_COST.COD_PROG_COST = ITENS_PROG_COST.COD_PROG_COST    
 WHERE COD_COMP = @COD_COMP    
 AND PROGRESSIVE_COST.ACTIVE = 1    
 AND ITENS_PROG_COST.ACTIVE = 1    
 AND COD_TYPE_PROG = @PROGRESSIVE_COST    
    
    
/* ******************* ADDRESS AFFILIATOR *****************************/    
    
    
UPDATE ADDRESS_AFFILIATOR    
SET ACTIVE = 0    
   ,MODIFY_DATE = GETDATE()    
WHERE ACTIVE = 1    
AND COD_AFFILIATOR = @IDAFL;    
    
INSERT INTO ADDRESS_AFFILIATOR (COD_AFFILIATOR,    
CREATED_AT,    
COD_USER_CAD,    
ADDRESS,    
number,    
COMPLEMENT,    
CEP,    
COD_NEIGH,    
ACTIVE,    
MODIFY_DATE,    
COD_USER_ALT,    
REFERENCE_POINT)    
 VALUES (@IDAFL, current_timestamp, @COD_USER_CAD, @ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, 1, current_timestamp, @COD_USER_ALT, @REFERENCE_POINT);    
    
IF @@rowcount < 1    
THROW 60000, 'COULD NOT REGISTER ADDRESS_AFFILIATOR ', 1;    
    
/************************* AFFILIATOR CONTACT ***************************/    
    
INSERT INTO AFFILIATOR_CONTACT (COD_AFFILIATOR,    
CREATED_AT,    
COD_USER_CAD,    
number,    
COD_TP_CONT,    
COD_OPER,    
MODIFY_DATE,    
COD_USER_ALT,    
DDI,    
DDD,    
ACTIVE,    
NAME,    
MAIL)    
 VALUES (@IDAFL, current_timestamp, @COD_USER_CAD, @CELL_NUMBER, @COD_TP_CONT, @COD_OPER, current_timestamp, @COD_USER_ALT, @DDI, @DDD, 1, @NAME_CONTACT, @MAIL_CONTACT);    
    
IF @@rowcount < 1    
THROW 60000, 'COULD NOT REGISTER AFFILIATOR_CONTACT ', 1;    
    
/**********  UPDATE AND REGISTER THEMES ****************/    
    
UPDATE THEMES    
SET ACTIVE = 0    
   ,MODIFY_DATE = current_timestamp    
   ,COD_USER_ALT = @COD_USER_CAD    
WHERE COD_AFFILIATOR = @IDAFL    
AND ACTIVE = 1;    
    
    
INSERT INTO THEMES (CREATED_AT,    
LOGO_AFFILIATE,    
LOGO_HEADER_AFFILIATE,    
COD_AFFILIATOR,    
COLOR_HEADER,    
ACTIVE,    
COD_USER_CAD,    
BACKGROUND_IMAGE,    
SECONDARY_COLOR)    
 VALUES (current_timestamp, @LOGO_AFFILIATE, @LOGO_HEADER_AFFILIATE, @IDAFL, @COLOR_HEADER, 1, @COD_USER_CAD, @BACKGROUND_IMAGE, @SECONDARY_COLOR);    
    
IF @@rowcount < 1    
THROW 60000, 'COULD NOT REGISTER THEMES ', 1;    
    
    
/********************** BANK DETAILS **********************/    
    
INSERT INTO BANK_DETAILS_EC (AGENCY,    
DIGIT_AGENCY,    
COD_TYPE_ACCOUNT,    
COD_BANK,    
ACCOUNT,    
DIGIT_ACCOUNT,    
COD_USER,    
COD_OPER_BANK,    
COD_AFFILIATOR)    
 VALUES (@AGENCY, @DIGIT, @ACCOUNT_TYPE, @BANK, @ACCOUNT, @DIGIT_ACCOUNT, @COD_USER_CAD, @COD_OPER, @IDAFL)    
    
INSERT INTO CONTRACTS_AFFILIATOR (TYPECONTRACTS, CONTROLNUMBER, DESCRIPTION, COD_USER_CREATE, CREATED_AT, ACTIVE, CONTRACTS, COD_AFFILIATOR)    
 VALUES (@TYPECONTRACTS, @CONTROLNUMBER, @DESCRIPTION, @COD_USER_CAD, current_timestamp, 1, @CONTRACTS, @IDAFL)    
    
INSERT INTO DOCS_AFFILIATOR (DOCUMENTS, COD_USER_CREATE, CREATED_AT, ACTIVE, COD_AFFILIATOR, COD_TYPE_CONTRACTS, DESCRIPTION)    
 VALUES (@DOCUMENTS, @COD_USER_CAD, current_timestamp, 1, @IDAFL, @TYPEDOCS, @DESCRIPTION_DOCUMENT)    
    
INSERT INTO AFFILIATOR_CONDITIONS ([COD_USER], [COD_AFF], [COD_TP_BILLING], [CONFIG_JSON], [EXEMPTED])  
  VALUES (@COD_USER_CAD, @IDAFL, @COD_TP_BILLING, @CONFIG_JSON, @EXEMPTED);

/******** REGISTER TAX PLAN OF AFFILIATOR **********/    
    
EXEC SP_ASS_AFF_PLAN @CODPLAN = @COD_PLAN    
     ,@COD_AFF = @IDAFL    
     ,@CODUSER = @COD_USER_CAD;    
    
    
/******** REGISTER TAX PLAN OF AFFILIATOR **********/    
    
EXEC SP_REG_OPER_COST_AFF @COD_AFFILIATOR = @IDAFL    
       ,@COD_COMP = @COD_COMP;    
    
/****** REGISTER PRODUCTS UNAVAILABLE TO MODELS *****/    
    
EXEC SP_REG_UNAVAILABLE_PRODUCT @COD_AFF = @IDAFL    
    
    
SELECT    
 @IDAFL AS 'COD_AFFILIATOR'    
   ,@COD_COMP AS 'COD_COMP'    
   ,@COD_USER_CAD AS 'CODUSER';    
    
    
END;    
GO

--ET-1415