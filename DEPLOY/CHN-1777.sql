--ET-1398

IF OBJECT_ID('VW_RISK_ANALYSIS_RESULTS') IS NOT NULL BEGIN
    DROP VIEW VW_RISK_ANALYSIS_RESULTS
END
GO
CREATE VIEW [dbo].[VW_RISK_ANALYSIS_RESULTS]  
/*----------------------------------------------------------------------------------------   
 View Name: [VW_RISK_ANALYSIS_RESULTS]       Project.......: TKPP   
------------------------------------------------------------------------------------------   
 Author			VERSION        Date         Description   
------------------------------------------------------------------------------------------   
 Marcus Gall	V1		30/11/2020		Create  
 Marcus Gall	V2		13/05/2021		Add Procob item 
------------------------------------------------------------------------------------------*/   
AS

SELECT         
 COMMERCIAL_ESTABLISHMENT.COD_EC  
 , COMMERCIAL_ESTABLISHMENT.TRADING_NAME  
 , COMMERCIAL_ESTABLISHMENT.[NAME]  
 , COMMERCIAL_ESTABLISHMENT.CPF_CNPJ  
 , COMMERCIAL_ESTABLISHMENT.BIRTHDATE  
 , SEX_TYPE.[NAME] AS [SEX]  
 , RESEARCH_RISK_RESPONSE.STATE_REGISTRATION  
 , RESEARCH_RISK_RESPONSE.CNAE  
 , RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK  
 , RESEARCH_RISK_RESPONSE.BID_ID  
 , RESEARCH_RISK_TYPE.CODE_POLICY  
 , CASE        
  WHEN RESEARCH_RISK_TYPE.CODE = 'INITIAL' THEN 'Inicial'        
  WHEN RESEARCH_RISK_TYPE.CODE = 'MONTHLY' THEN 'Mensal'        
  WHEN RESEARCH_RISK_TYPE.CODE = 'YEARLY' THEN 'Anual'        
  END AS [TYPE_POLICY]  
 , RESEARCH_RISK_RESPONSE.SITUATION_RISK  
 , RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION  
 , CASE        
  WHEN TRIM(RESEARCH_RISK_RESPONSE_DETAILS.CODE) LIKE 'receita%' THEN 'Receita Federal'        
  ELSE RESEARCH_RISK_RESPONSE_DETAILS.CODE        
  END AS [CODE]        
 , CASE           
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = 'N�o Consultado' THEN 'Pendente'        
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN ('PEP', 'OFAC')) THEN 'Negado'        
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN ('RECEITA FEDERAL', 'RECEITA', 'PROCOB'))  THEN 'Aprovado'           
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN ('PEP', 'OFAC')) THEN 'Aprovado'        
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN ('RECEITA FEDERAL', 'RECEITA', 'PROCOB')) THEN 'Negado'    
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''  AND (RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = '' OR RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION IS NULL) THEN 'N�o consultado'           
  WHEN UPPER(RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION) = 'REGULAR' THEN 'Aprovado'     
  ELSE 'Pendente'  
  END AS [SITUATION_DESCRIPTION]        
 , RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION        
 , CASE          
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN ('PEP', 'OFAC')) THEN 'Inativa'        
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '1' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN ('RECEITA FEDERAL', 'RECEITA', 'PROCOB'))  THEN 'Ativa'           
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN ('PEP', 'OFAC')) THEN 'Ativa'        
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = '0' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN ('RECEITA FEDERAL', 'RECEITA', 'PROCOB')) THEN 'Inativa'    
  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''  AND (RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = '' OR RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION IS NULL) THEN 'N�o consultado'           
  WHEN UPPER(RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION) = 'REGULAR' THEN 'Ativa'
  ELSE RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION      
  END AS SITUATION_DESCRIPTION_DETAILS  
 , RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC  
 , RESEARCH_RISK_RESPONSE.CREATED_AT  
 , RESEARCH_RISK.SEND_AT  
 , RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE  
 , TYPE_PARTNER.[NAME] AS PARTNER_TYPE  
 , ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS AS PERCENTAGE_QUOTAS  
 , ADITIONAL_DATA_TYPE_EC.[NAME] AS PARTNER_NAME  
 , RESEARCH_RISK_TYPE.SOURCE_NAME  
 , COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR  
 , RESEARCH_RISK_RESPONSE.PATH_FILE_RESPONSE  
FROM RESEARCH_RISK_RESPONSE_DETAILS   
 INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE  
 INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK          
 INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE          
 INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = RESEARCH_RISK.COD_EC          
 INNER JOIN SEX_TYPE ON SEX_TYPE.COD_SEX = COMMERCIAL_ESTABLISHMENT.COD_SEX          
 LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_ADT_DATA = RESEARCH_RISK_RESPONSE_DETAILS.COD_PARTNER_EC        
 LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER        
WHERE RESEARCH_RISK_RESPONSE.ACTIVE = 1  
GROUP BY        
 COMMERCIAL_ESTABLISHMENT.COD_EC  
 , COMMERCIAL_ESTABLISHMENT.TRADING_NAME  
 , COMMERCIAL_ESTABLISHMENT.[NAME]  
 , COMMERCIAL_ESTABLISHMENT.CPF_CNPJ  
 , COMMERCIAL_ESTABLISHMENT.BIRTHDATE  
 , SEX_TYPE.[NAME]  
 , RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE  
 , RESEARCH_RISK_RESPONSE.STATE_REGISTRATION  
 , RESEARCH_RISK_RESPONSE.CNAE  
 , RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK  
 , RESEARCH_RISK_RESPONSE.BID_ID  
 , RESEARCH_RISK_TYPE.CODE_POLICY  
 , RESEARCH_RISK_TYPE.CODE  
 , RESEARCH_RISK_RESPONSE.SITUATION_RISK  
 , RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION  
 , RESEARCH_RISK_RESPONSE_DETAILS.CODE  
 , RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION  
 , RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION  
 , RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC  
 , RESEARCH_RISK_RESPONSE.CREATED_AT  
 , RESEARCH_RISK.SEND_AT  
 , TYPE_PARTNER.[NAME]  
 , ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS  
 , ADITIONAL_DATA_TYPE_EC.[NAME]  
 , RESEARCH_RISK_TYPE.SOURCE_NAME  
 , COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR  
 , RESEARCH_RISK_RESPONSE.PATH_FILE_RESPONSE;
GO

IF OBJECT_ID('SP_REPORT_RISK_ANALYSIS') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_RISK_ANALYSIS
END
GO
CREATE PROCEDURE [dbo].[SP_REPORT_RISK_ANALYSIS]                                            
/*----------------------------------------------------------------------------------------                                                                              
Procedure Name: [SP_REPORT_RISK_ANALYSIS]                                                                              
Project.......: TKPP                                                                              
------------------------------------------------------------------------------------------                                                                              
Author                          VERSION         Date                        Description                                                                              
------------------------------------------------------------------------------------------                                                                              
Marcus Gall                       v1          2020-11-30                      CREATION            
------------------------------------------------------------------------------------------*/    
(                              
 @COD_EC INT = NULL,  
 @COD_AFF INT = NULL,  
 @TYPE_RESEARCH VARCHAR(20) = NULL  
)  
AS  
  
DECLARE @QUERY_ NVARCHAR(MAX) = '';  
  
BEGIN  
 IF (@COD_EC IS NULL OR @COD_AFF IS NULL)  
  SET @QUERY_ = @QUERY_ + ' SELECT TOP 100 '  
 ELSE  
  SET @QUERY_ = @QUERY_ + ' SELECT '  
  
 SET @QUERY_ = @QUERY_ + '   
  VW_RISK_ANALYSIS_RESULTS.COD_EC      AS [COD_EC]  
  , VW_RISK_ANALYSIS_RESULTS.[NAME]     AS [NAME_EC]  
        , VW_RISK_ANALYSIS_RESULTS.COD_RESEARCH_RISK  AS [PROPOSAL_CODE]  
        , VW_RISK_ANALYSIS_RESULTS.TRADING_NAME    AS [TRADING_NAME]  
        , VW_RISK_ANALYSIS_RESULTS.CPF_CNPJ     AS [IDENTIFICATION]  
  , UPPER(VW_RISK_ANALYSIS_RESULTS.TYPE_POLICY)  AS [ANALYSE_PERIOD]  
        , VW_RISK_ANALYSIS_RESULTS.SOURCE_NAME    AS [SOURCE_NAME]  
        , VW_RISK_ANALYSIS_RESULTS.SEND_AT     AS [SENT_ON]  
  , VW_RISK_ANALYSIS_RESULTS.CREATED_AT    AS [ANALYSED_AT]  
        , VW_RISK_ANALYSIS_RESULTS.SITUATION_RISK   AS [GENERAL_STATUS]  
        , VW_RISK_ANALYSIS_RESULTS.MESSAGE_SITUATION  AS [GENERAL_MESSAGE]  
        , UPPER(VW_RISK_ANALYSIS_RESULTS.CODE)      AS [ANALYSE_TYPE]  
        , VW_RISK_ANALYSIS_RESULTS.SITUATION_DESCRIPTION AS [STATUS]  
        , VW_RISK_ANALYSIS_RESULTS.CPF_PARTNER_EC   AS [PARTNER_IDENTIFICATION]  
  , VW_RISK_ANALYSIS_RESULTS.COD_AFFILIATOR   AS [COD_AFFILIATOR]  
  , VW_RISK_ANALYSIS_RESULTS.PATH_FILE_RESPONSE  AS [PATH_FILE_RESPONSE]  
 FROM [VW_RISK_ANALYSIS_RESULTS]  
 WHERE VW_RISK_ANALYSIS_RESULTS.COD_RESEARCH_RISK IS NOT NULL '  
  
 IF (@COD_EC IS NOT NULL)  
  SET @QUERY_ = @QUERY_ + ' AND [VW_RISK_ANALYSIS_RESULTS].COD_EC = @COD_EC '  
 IF (@COD_AFF IS NOT NULL)   
  SET @QUERY_ = @QUERY_ + ' AND [VW_RISK_ANALYSIS_RESULTS].COD_AFFILIATOR = @COD_AFF '  
  
 SET @QUERY_ = @QUERY_ + ' ORDER BY VW_RISK_ANALYSIS_RESULTS.CREATED_AT DESC, VW_RISK_ANALYSIS_RESULTS.COD_RESEARCH_RISK, VW_RISK_ANALYSIS_RESULTS.CPF_PARTNER_EC, VW_RISK_ANALYSIS_RESULTS.CODE'  
  
 EXEC sp_executesql @QUERY_, N' @COD_AFF INT, @COD_EC INT'  
 , @COD_AFF = @COD_AFF, @COD_EC = @COD_EC  
END
GO

IF OBJECT_ID('SP_REPORT_RESEARCH_RISK') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_RESEARCH_RISK
END
GO
CREATE PROCEDURE [dbo].[SP_REPORT_RESEARCH_RISK]                                          
/*----------------------------------------------------------------------------------------                                                                            
Procedure Name: [SP_REPORT_RESEARCH_RISK]                                                                            
Project.......: TKPP                                                                            
------------------------------------------------------------------------------------------                                                                            
Author                          VERSION         Date                        Description                                                                            
------------------------------------------------------------------------------------------                                                                            
Caike Uch�a                       v1          2020-03-23                      CREATION          
Caike Uch�a                       v2          2020-06-22                       update    
------------------------------------------------------------------------------------------*/                                                                                          
(                            
	@COD_EC INT = NULL,        
	@TYPE_RESEARCH VARCHAR(20) = NULL,        
	@DATE_RESEARCH DATETIME = NULL,      
	@LAST_LINE_RESEARCH INT = NULL      
)                            
AS                
	DECLARE @QUERY NVARCHAR(MAX);  
BEGIN  
  
	SET @QUERY = CONCAT(@QUERY, 'SELECT       
	COMMERCIAL_ESTABLISHMENT.TRADING_NAME,        
	COMMERCIAL_ESTABLISHMENT.[NAME],        
	COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,        
	COMMERCIAL_ESTABLISHMENT.BIRTHDATE,        
	SEX_TYPE.[NAME] AS [SEXO],        
	RESEARCH_RISK_RESPONSE.STATE_REGISTRATION,        
	RESEARCH_RISK_RESPONSE.CNAE,        
	RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK,        
	RESEARCH_RISK_RESPONSE.BID_ID,        
	RESEARCH_RISK_TYPE.CODE_POLICY,         
	CASE      
	WHEN RESEARCH_RISK_TYPE.CODE = ''INITIAL'' THEN ''Inicial''      
	WHEN RESEARCH_RISK_TYPE.CODE = ''MONTHLY'' THEN ''Mensal''      
	WHEN RESEARCH_RISK_TYPE.CODE = ''YEARLY'' THEN ''Anual''      
	END      
	AS [TYPE_POLICY],        
	RESEARCH_RISK_RESPONSE.SITUATION_RISK,        
	RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION,        
	CASE      
	WHEN TRIM(RESEARCH_RISK_RESPONSE_DETAILS.CODE) LIKE ''receita%'' THEN ''Receita Federal''      
	ELSE RESEARCH_RISK_RESPONSE_DETAILS.CODE      
	END AS [CODE],      
	CASE         
	WHEN RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = ''N�o Consultado'' THEN ''Erro''      
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''1'' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN (''PEP'', ''OFAC'')) THEN ''Negado''        
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''1'' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN (''RECEITA FEDERAL'', ''RECEITA'', ''PROCOB''))  THEN ''Aprovado''           
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''0'' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN (''PEP'', ''OFAC'')) THEN ''Aprovado''        
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''0'' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN (''RECEITA FEDERAL'', ''RECEITA'', ''PROCOB'')) THEN ''Negado''    
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''''  AND (RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = '''' OR RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION IS NULL) THEN ''N�o consultado''  
	WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''REGULAR'' THEN ''Aprovado''      
	END AS [SITUATION_DESCRIPTION],      
	RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION,      
	CASE        
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''1'' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN (''PEP'', ''OFAC'')) THEN ''Inativa''        
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''1'' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN (''RECEITA FEDERAL'', ''RECEITA'', ''PROCOB''))  THEN ''Ativa''           
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''0'' AND (UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE) IN (''PEP'', ''OFAC'')) THEN ''Inativa''        
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''0'' AND (TRIM(UPPER(RESEARCH_RISK_RESPONSE_DETAILS.CODE)) IN (''RECEITA FEDERAL'', ''RECEITA'', ''PROCOB'')) THEN ''Ativa''    
	  WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''''  AND (RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = '''' OR RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION IS NULL) THEN ''N�o consultado''
	WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''REGULAR'' THEN ''Ativa''    
	ELSE    
	RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION    
	END AS SITUATION_DESCRIPTION_DETAILS,      
	RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC,        
	RESEARCH_RISK_RESPONSE.CREATED_AT,       
	RESEARCH_RISK.SEND_AT,      
	RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE,      
	TYPE_PARTNER.NAME AS PARTNER_TYPE,       
	ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS AS PERCENTAGE_QUOTAS,      
	ADITIONAL_DATA_TYPE_EC.NAME AS PARTNER_NAME       
	FROM RESEARCH_RISK_RESPONSE_DETAILS ');  
      
      
	IF @LAST_LINE_RESEARCH IS NOT NULL         
	BEGIN  
		SET @QUERY = CONCAT(@QUERY, '       
		  JOIN (      
		   SELECT MAX(TOP_RRR.COD_RESEARCH_RISK_RESPONSE) AS COD_RESEARCH_RISK_RESPONSE, TOP_RR.COD_EC FROM RESEARCH_RISK_RESPONSE AS TOP_RRR      
		   JOIN RESEARCH_RISK AS TOP_RR ON TOP_RRR.COD_RESEARCH_RISK = TOP_RR.COD_RESEARCH_RISK      
		   GROUP BY TOP_RR.COD_EC      
		  ) AS MOST_RECENT_RESEARCH_RISK_RESPONSE ON MOST_RECENT_RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE       
		  INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = MOST_RECENT_RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE ');  
	END      
	ELSE      
	BEGIN  
		SET @QUERY = CONCAT(@QUERY, ' INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE ');  
	END  
  
	SET @QUERY = CONCAT(@QUERY, '       
	INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK        
	INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE        
	INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = RESEARCH_RISK.COD_EC        
	INNER JOIN SEX_TYPE ON SEX_TYPE.COD_SEX = COMMERCIAL_ESTABLISHMENT.COD_SEX        
	LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_ADT_DATA = RESEARCH_RISK_RESPONSE_DETAILS.COD_PARTNER_EC      
	LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER      
	WHERE RESEARCH_RISK_RESPONSE.ACTIVE = 1');  
        
	IF @COD_EC IS NOT NULL         
	BEGIN  
		SET @QUERY = CONCAT(@QUERY, ' AND RESEARCH_RISK.COD_EC = @COD_EC');  
	END  
      
	IF @TYPE_RESEARCH IS NOT NULL         
	BEGIN  
		SET @QUERY = CONCAT(@QUERY, ' AND RESEARCH_RISK_TYPE.CODE = @TYPE_RESEARCH');  
	END  
      
	IF @DATE_RESEARCH IS NOT NULL         
	BEGIN  
		SET @QUERY = CONCAT(@QUERY, ' AND CAST(RESEARCH_RISK_RESPONSE.CREATED_AT AS DATE) = CAST(@DATE_RESEARCH AS DATE)');  
	END  
  
	SET @QUERY = CONCAT(@QUERY, '       
	GROUP BY         
	COMMERCIAL_ESTABLISHMENT.TRADING_NAME,        
	COMMERCIAL_ESTABLISHMENT.[NAME],        
	COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,        
	COMMERCIAL_ESTABLISHMENT.BIRTHDATE,        
	SEX_TYPE.[NAME],      
	RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE,      
	RESEARCH_RISK_RESPONSE.STATE_REGISTRATION,        
	RESEARCH_RISK_RESPONSE.CNAE,        
	RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK,        
	RESEARCH_RISK_RESPONSE.BID_ID,        
	RESEARCH_RISK_TYPE.CODE_POLICY,        
	RESEARCH_RISK_TYPE.CODE,        
	RESEARCH_RISK_RESPONSE.SITUATION_RISK,        
	RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION,        
	RESEARCH_RISK_RESPONSE_DETAILS.CODE,        
	RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION,      
	RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION,      
	RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC,        
	RESEARCH_RISK_RESPONSE.CREATED_AT,      
	RESEARCH_RISK.SEND_AT,      
	TYPE_PARTNER.NAME,       
	ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS,      
	ADITIONAL_DATA_TYPE_EC.NAME');  
  
	EXEC sp_executesql @QUERY  
		  ,N' @COD_EC INT,        
	@TYPE_RESEARCH VARCHAR(20),        
	@DATE_RESEARCH DATETIME,      
	@LAST_LINE_RESEARCH INT      
	'  
      ,@COD_EC = @COD_EC  
      ,@TYPE_RESEARCH = @TYPE_RESEARCH  
      ,@DATE_RESEARCH = @DATE_RESEARCH  
      ,@LAST_LINE_RESEARCH = @LAST_LINE_RESEARCH;  
  
END
GO

IF OBJECT_ID('SP_CHECK_RISK_SEMAPHORE') IS NOT NULL BEGIN
    DROP PROCEDURE SP_CHECK_RISK_SEMAPHORE
END
GO
CREATE PROCEDURE SP_CHECK_RISK_SEMAPHORE                
/*----------------------------------------------------------------------------------------                       
  Project.......: TKPP                       
------------------------------------------------------------------------------------------                       
  Author              VERSION        Date         Description                       
------------------------------------------------------------------------------------------                       
  Luiz Aquino   1           2021-02-19      Created                
  Marcus Gall   2   2021-04-07  Add Verify bank details on rules  
------------------------------------------------------------------------------------------*/                
(                
    @SITUATION_RISK VARCHAR(128)  
	, @COD_RESEARCH_RISK INT 
	, @TEST BIT = 0
) AS 
BEGIN  
   
    DECLARE   
	@COD_EC INT,                 
	@COD_SEG INT,                 
    @LIMIT DECIMAL(22, 6),                 
    @LIMIT_DAY DECIMAL(22, 6),                 
    @FOUND BIT = 0,                 
    @CODE_BANK VARCHAR(32),                
    @SOURCE_NAME VARCHAR(12),                
    @CODE VARCHAR(12),              
	@COD_TYPE_ESTAB INT,            
	@CPF_EC varchar(200),            
	@CPF_ASSIGN VARCHAR(200) = NULL,  
	--@VALID_BANK BIT = 0,
	@CNAE VARCHAR(50),
	@VALID_CNAE BIT = 0;
  
	SELECT  
	 @COD_EC = RR.COD_EC  
	 ,@SOURCE_NAME = RRT.SOURCE_NAME  
	 ,@CODE = RRT.CODE  
	 --RR.COD_EC, RRT.SOURCE_NAME, RRT.CODE
	FROM RESEARCH_RISK(NOLOCK) RR  
	JOIN RESEARCH_RISK_TYPE(NOLOCK) RRT  
	 ON RRT.COD_RESEARCH_RISK_TYPE = RR.COD_RESEARCH_RISK_TYPE  
	WHERE RR.COD_RESEARCH_RISK = @COD_RESEARCH_RISK  
	AND SOURCE_NAME = 'B2e';  
  
	IF @SOURCE_NAME = 'B2e'  
	 AND @CODE = 'INITIAL'  
	BEGIN  
  
		SELECT  
		 @COD_SEG = CE.COD_SEG  
		 , @COD_TYPE_ESTAB = CE.COD_TYPE_ESTAB  
		 , @CNAE = SEG.CNAE
		 , @CODE_BANK = B.CODE  
		 , @CPF_ASSIGN = IIF(BDE.IS_ASSIGNMENT = 1,BDE.ASSIGNMENT_IDENTIFICATION, NULL) 
		 --, @VALID_BANK = BDE.VALIDATION_PIX  
		 --CE.COD_SEG, CE.COD_TYPE_ESTAB, SEG.CNAE, B.CODE, IIF(BDE.IS_ASSIGNMENT = 1,BDE.ASSIGNMENT_IDENTIFICATION, NULL), BDE.VALIDATION_PIX
		FROM COMMERCIAL_ESTABLISHMENT CE  
		JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG 
		JOIN BANK_DETAILS_EC BDE ON BDE.COD_EC = CE.COD_EC
		JOIN BANKS B ON B.COD_BANK = BDE.COD_BANK  
		WHERE CE.COD_EC = @COD_EC  
			AND BDE.ACTIVE = 1 AND BDE.IS_CERC = 0  
		ORDER BY BDE.COD_BK_EC DESC  

		SET @CPF_EC = (SELECT TOP 1  
		  RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC  
		 FROM RESEARCH_RISK  
		 JOIN RESEARCH_RISK_RESPONSE  
		  ON RESEARCH_RISK.COD_RESEARCH_RISK = RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK  
		 JOIN RESEARCH_RISK_RESPONSE_DETAILS  
		  ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE  
		 WHERE COD_EC = @COD_EC
		 AND CPF_PARTNER_EC = @CPF_ASSIGN 
		 ORDER BY RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE DESC)  
		 
		SET @VALID_CNAE = COALESCE((SELECT TOP 1 1 FROM RESEARCH_RISK_RESPONSE 
		  JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK 
		 WHERE RESEARCH_RISK.COD_EC = @COD_EC 
		 AND RESEARCH_RISK_RESPONSE.CNAE = @CNAE 
		 AND RESEARCH_RISK_RESPONSE.ACTIVE = 1
		 ORDER BY RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE DESC), 0)
  
		SELECT TOP 1  
		 @LIMIT = LIMIT  
		   ,@LIMIT_DAY = LIMIT_DAY  
		   ,@FOUND = 1  
		FROM RISK_MCC_SEMAPHORE RMS  
		WHERE RMS.COD_SEG = @COD_SEG  
		AND RMS.COD_TYPE_EC = @COD_TYPE_ESTAB  
		ORDER BY RISK  
  
		DECLARE @NEW_RISK_SIT INT  
			,@NEW_EC_SITUATION INT  
			,@RISK_REASON VARCHAR(500) = NULL;  
  
		IF CHARINDEX('APROVADO', @SITUATION_RISK) > 0  
		 AND @LIMIT IS NOT NULL  
		BEGIN  
 
			IF (@CODE_BANK != '341')  
			 --AND (@VALID_BANK = 1))  
			BEGIN  
  
				IF ((@COD_TYPE_ESTAB = 1) 
					AND (@CPF_EC <> @CPF_ASSIGN)  
					AND (@CPF_ASSIGN IS NOT NULL)) -- MEI COM CESS�O, PRECISA TER CPF RETORNADO DA B2e
				OR 
					((@COD_TYPE_ESTAB IN (1, 2)) AND (@VALID_CNAE = 0)) -- MEI OU PJ, PRECISA TER CNAE RETORNADO DA B2e
				BEGIN  
					SELECT  
					 @NEW_RISK_SIT = COD_RISK_SITUATION  
					FROM RISK_SITUATION  
					WHERE NAME = 'Pending risk Analysis'  
  
					SELECT  
					 @NEW_EC_SITUATION = COD_SITUATION  
					FROM SITUATION  
					WHERE NAME = 'LOCKED FINANCIAL SCHEDULE'  

					IF ((@COD_TYPE_ESTAB IN (1, 2)) AND (@VALID_CNAE = 0))
						SET @RISK_REASON = CONCAT(@RISK_REASON, '* CNAE CADASTRADO N�O CONFERE COM AN�LISE DE RISCO');
					ELSE
						SET @RISK_REASON = CONCAT(@RISK_REASON, '* O TITULAR BANC�RIO CESS�O N�O CONSTA COMO S�CIO');
  
				END  
				ELSE  
				BEGIN  
					SELECT  
					 @NEW_RISK_SIT = COD_RISK_SITUATION  
					FROM RISK_SITUATION  
					WHERE NAME = 'automatically approved';  
  
					SELECT  
					 @NEW_EC_SITUATION = COD_SITUATION  
					FROM SITUATION  
					WHERE NAME = 'RELEASED'  
				END  
			END  
			ELSE  
			BEGIN  
				SELECT  
				 @NEW_RISK_SIT = COD_RISK_SITUATION  
				FROM RISK_SITUATION  
				WHERE NAME = 'Pending risk Analysis';  
  
				SELECT  
				 @NEW_EC_SITUATION = COD_SITUATION  
				FROM SITUATION  
				WHERE NAME = 'LOCKED FINANCIAL SCHEDULE'  

				SET @RISK_REASON = CONCAT(@RISK_REASON, '* PF n�o aprovado');
			END  
  
		END  
		ELSE  
		IF CHARINDEX('AGUARDANDO', @SITUATION_RISK) > 0  
		OR @LIMIT IS NULL  
		BEGIN  
			SELECT  
			 @NEW_RISK_SIT = COD_RISK_SITUATION  
			FROM RISK_SITUATION  
			WHERE NAME = 'Pending risk Analysis';  
  
			SELECT  
			 @NEW_EC_SITUATION = COD_SITUATION  
			FROM SITUATION  
			WHERE NAME = 'LOCKED FINANCIAL SCHEDULE'  

			SET @RISK_REASON = CONCAT(@RISK_REASON, '* PF n�o aprovado');
		END  
		ELSE --CANCELADO OU REPROVADO                 
		BEGIN  
			SELECT  
			 @NEW_RISK_SIT = COD_RISK_SITUATION  
			FROM RISK_SITUATION  
			WHERE NAME = 'automatically denied';  
  
			SELECT  
			 @NEW_EC_SITUATION = COD_SITUATION  
			FROM SITUATION  
			WHERE NAME = 'LOCKED FINANCIAL SCHEDULE'  
  
			SET @RISK_REASON = 'CANCELADO AUTOMATICAMENTE B2e'  
          
		END  

		--IF (@VALID_BANK <> 1)
		--BEGIN 
		--	SET @RISK_REASON = CONCAT(@RISK_REASON, '* DADOS BANC�RIOS N�O VALIDADOS.');
		--END

  
		IF (@TEST = 1)
		BEGIN
			PRINT '@COD_EC:'+ CAST(@COD_EC AS VARCHAR);
			PRINT '@COD_RESEARCH_RISK:' + CAST(@COD_RESEARCH_RISK AS VARCHAR);
			PRINT '@NEW_RISK_SIT:' + CAST(@NEW_RISK_SIT AS VARCHAR);
			PRINT '@NEW_EC_SITUATION:' + CAST(@NEW_EC_SITUATION AS VARCHAR);
			PRINT '@RISK_REASON:' + @RISK_REASON;
		END
		ELSE
		BEGIN 
			UPDATE COMMERCIAL_ESTABLISHMENT  
			SET LIMIT_TRANSACTION_DIALY = ISNULL(@LIMIT_DAY, LIMIT_TRANSACTION_DIALY)  
			   ,TRANSACTION_LIMIT = ISNULL(@LIMIT, TRANSACTION_LIMIT)  
			   ,LIMIT_TRANSACTION_MONTHLY = IIF(@LIMIT_DAY IS NULL, LIMIT_TRANSACTION_MONTHLY, @LIMIT_DAY * 30)  
			   ,COD_RISK_SITUATION = @NEW_RISK_SIT  
			   ,COD_SITUATION = @NEW_EC_SITUATION  
			   ,RISK_REASON = @RISK_REASON  
			WHERE COD_EC = @COD_EC  
		END
	END  
END
GO

IF OBJECT_ID('SP_REG_RESEARCH_RISK_RESPONSE_B2E') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_RESEARCH_RISK_RESPONSE_B2E
END
GO
CREATE PROCEDURE [dbo].[SP_REG_RESEARCH_RISK_RESPONSE_B2E]            
/*----------------------------------------------------------------------------------------                    
 Procedure Name: [SP_REG_RESEARCH_RISK_RESPONSE]     Project.......: TKPP                    
------------------------------------------------------------------------------------------                    
 Author              Version            Date         Description                    
------------------------------------------------------------------------------------------                    
 Marcus Gall            V1           05/03/2020        Creation                    
 Caike Uch�a            V2           27/05/2020   Add validate by cod_status                   
 Caike Uch�a            V3           16/06/2020      ajuste Insert Details                
 Caike Uch�a            V4           30/06/2020          add status 2,3              
 Marcus Gall   V5    10/12/2020  Monthly Service change OFAC api            
 Luiz Aquino            V6           22/02/2021     ET-1218 Aprovacao atutomatica risco            
------------------------------------------------------------------------------------------*/            
(@COD_RESEARCH_RISK INT            
, @BID_ID VARCHAR(100) = NULL            
, @SITUATION_RISK VARCHAR(50) = NULL            
, @MESSAGE VARCHAR(500) = NULL            
, @CODE_POLICY VARCHAR(100) = NULL            
, @CNAE VARCHAR(10) = NULL            
, @STATE_REGISTRATION VARCHAR(20) = NULL            
, @CPF_CNPJ VARCHAR(20) = NULL            
, @NAME VARCHAR(200) = NULL            
, @TEST_LINES INT = 0            
, @PATH_FILE_RESPONSE VARCHAR(500) = NULL            
, @PATH_FILE_RESPONSE_CONSOLIDATED VARCHAR(500) = NULL            
, @LINES_RESEARCH_RISK_DETAILS TP_RESEARCH_RISK_RESPONSE_DETAILS READONLY)            
AS        

DECLARE @COD_RESEARCH_RISK_RESPONSE INT;        
DECLARE @COD_RESEARCH_RISK_PK INT;        
DECLARE @COD_EC INT;        
DECLARE @DOCUMENT_TYPE VARCHAR(5);        
DECLARE @COD_RESEARCH_RISK_TYPE INT;        
DECLARE @COD_STATUS INT;        
            
BEGIN        
    -- BEGIN > REGISTRANDO O RESULTADO DA PESQUISA RECEBIDA                    
    IF ( SELECT COUNT(RESEARCH_RISK.COD_RESEARCH_RISK) FROM RESEARCH_RISK WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK) = 0        
		THROW 60001, 'BAD REQUEST, NOT FOUND RESEARCH_RISK REGISTER WITH PARAMETER >> @COD_RESEARCH_RISK', 1;        
        
	SELECT        
		@COD_RESEARCH_RISK_PK = COD_RESEARCH_RISK        
	FROM RESEARCH_RISK        
	WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK        
        
	SELECT        
		@COD_STATUS = COD_STATUS        
	FROM RESEARCH_RISK        
	JOIN RESEARCH_RISK_TYPE(NOLOCK) RRT        
		ON RRT.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE        
	WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK        
	AND SOURCE_NAME = 'B2e'      
	-- COD_STATUS = 0 (EC N�O ENVIADO PARA A B2e - N�O ENVIADO)              
	-- COD_STATUS = 1 (EC ENVIADO PARA A B2e - ENVIADO)              
	-- COD_STATUS = 3 ( FALHA AO ENVIAR)              
        
	-- VERIFICANDO SE O RETORNO � DO SERVICO DA OFAC (ENVIADO e RECEBIDO PELA OFAC SINCRONO)            
	IF EXISTS (SELECT        
		1        
		FROM RESEARCH_RISK        
		INNER JOIN RESEARCH_RISK_TYPE        
		ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE        
		WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK        
		AND RESEARCH_RISK.COD_STATUS IN (0, 1)        
		AND RESEARCH_RISK_TYPE.SOURCE_NAME = 'OFAC')        
	BEGIN        
		UPDATE RESEARCH_RISK        
		SET MODIFY_AT = current_timestamp        
			,SEND_AT = current_timestamp        
			,COD_STATUS = 2        
		WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;        
		SET @COD_STATUS = 1;        
            
	END        


	IF (@TEST_LINES = 1)            
	BEGIN        
		SELECT        
			NULL        
			,LINES.[CODE]        
			,LINES.[COD_SITUATION]        
			,LINES.[SITUATION_DESCRIPTION]        
			,EC_PARTNERS.COD_ADT_DATA        
			,LINES.[CPF_PARTNER_EC]        
		FROM @LINES_RESEARCH_RISK_DETAILS AS LINES        
		INNER JOIN RESEARCH_RISK        
			ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK        
		LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS        
			ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC        
			AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;        
        
		SELECT        
			LINES.*        
		FROM @LINES_RESEARCH_RISK_DETAILS AS LINES;        
	END        
        
	ELSE        
	IF (@COD_STATUS IN (0, 1))        
	BEGIN        
		UPDATE RESEARCH_RISK        
		SET MODIFY_AT = current_timestamp        
			,COD_STATUS = 2        
		WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK_PK;        

		IF @@rowcount < 1        
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK', 1;        
        
		UPDATE RESEARCH_RISK_RESPONSE        
		SET ACTIVE = 0        
		WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK_PK;        
        
		INSERT INTO RESEARCH_RISK_RESPONSE (COD_RESEARCH_RISK, BID_ID, SITUATION_RISK, MESSAGE_SITUATION,        
		CODE_POLICY, CNAE, STATE_REGISTRATION, CPF_CNPJ, NAME_EC,        
		PATH_FILE_RESPONSE)        
			VALUES (@COD_RESEARCH_RISK_PK, @BID_ID, @SITUATION_RISK, @MESSAGE, @CODE_POLICY, @CNAE, @STATE_REGISTRATION, @CPF_CNPJ, @NAME, @PATH_FILE_RESPONSE);        
        
		SET @COD_RESEARCH_RISK_RESPONSE = @@identity;				
            
		IF @@rowcount < 1            
			THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_RESPONSE', 1;        
        
		INSERT INTO RESEARCH_RISK_RESPONSE_DETAILS (COD_RESEARCH_RISK_RESPONSE, CODE, COD_SITUATION,        
		SITUATION_DESCRIPTION, COD_PARTNER_EC, CPF_PARTNER_EC)        
			SELECT        
			@COD_RESEARCH_RISK_RESPONSE        
			,LINES.[CODE]        
			,LINES.[COD_SITUATION]        
			,LINES.[SITUATION_DESCRIPTION]        
			,EC_PARTNERS.COD_ADT_DATA        
			,LINES.[CPF_PARTNER_EC]        
			FROM @LINES_RESEARCH_RISK_DETAILS AS LINES        
			INNER JOIN RESEARCH_RISK        
			ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK        
			LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS        
			ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC        
			AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;        
		IF @@rowcount < 1        
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK_RESPONSE_DETAILS', 1;        
        
		-- BEGIN > AGENDAMENTO DE NOVAS PESQUISAS PROGRAMADAS (MONTHLY, YEARLY)                    
		SELECT TOP 1        
			@COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC        
			,@DOCUMENT_TYPE = COMMERCIAL_ESTABLISHMENT.DOCUMENT_TYPE        
		FROM COMMERCIAL_ESTABLISHMENT        
		INNER JOIN RESEARCH_RISK        
			ON RESEARCH_RISK.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC        
		WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK;        
        
		EXEC SP_CHECK_RISK_SEMAPHORE @SITUATION_RISK, @COD_RESEARCH_RISK_PK        
        
		SET @COD_RESEARCH_RISK_TYPE = 0;        
          
            
            
        -- > MONTHLY                    
			IF ( SELECT        
			COUNT(RESEARCH_RISK.COD_RESEARCH_RISK)        
			FROM RESEARCH_RISK        
			INNER JOIN RESEARCH_RISK_TYPE        
			ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE =        
			RESEARCH_RISK.COD_RESEARCH_RISK_TYPE        
			WHERE RESEARCH_RISK.COD_EC = @COD_EC        
			AND ((RESEARCH_RISK_TYPE.CODE = 'MONTHLY'        
			AND RESEARCH_RISK.COD_STATUS IN (0, 1))        
			OR (RESEARCH_RISK_TYPE.CODE = 'YEARLY'        
			AND RESEARCH_RISK.COD_STATUS IN (0, 1)        
			AND DATEADD(YEAR, 1, RESEARCH_RISK.CREATED_AT) < GETDATE())))        
		= 0        
		BEGIN        
        
			SET @COD_RESEARCH_RISK_TYPE = (SELECT TOP 1        
				RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE        
				FROM RESEARCH_RISK_TYPE        
				WHERE RESEARCH_RISK_TYPE.CODE = 'MONTHLY'        
				AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = @DOCUMENT_TYPE        
				AND RESEARCH_RISK_TYPE.ACTIVE = 1        
				AND RESEARCH_RISK_TYPE.SOURCE_NAME = 'OFAC');        
        
			INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS)        
				VALUES (@COD_EC, NULL, @COD_RESEARCH_RISK_TYPE, 0);        
        
			SET @COD_RESEARCH_RISK_PK = @@identity;        
		END        
	END        

	-- COD_STATUS = 2 ( CALLBACK RECEBIDO - RETORNO RECEBIDO)              
	-- COD_STATUS = 4 ( CALLBACK RECEBIDO COM RESALVAS - RECUSADO AUTOMATICAMENTE)               
	ELSE        
	IF (@COD_STATUS IN (2, 4))        
	BEGIN        
		UPDATE RESEARCH_RISK        
		SET MODIFY_AT = current_timestamp        
			,COD_STATUS = 2        
		WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;        
			
		IF @@rowcount < 1        
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK', 1;        
        
		UPDATE RESEARCH_RISK_RESPONSE        
		SET ACTIVE = 0        
		WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;        
        
		INSERT INTO RESEARCH_RISK_RESPONSE (COD_RESEARCH_RISK, BID_ID, SITUATION_RISK, MESSAGE_SITUATION,        
		CODE_POLICY, CNAE, STATE_REGISTRATION, CPF_CNPJ, NAME_EC,        
		PATH_FILE_RESPONSE)        
			VALUES (@COD_RESEARCH_RISK_PK, @BID_ID, @SITUATION_RISK, @MESSAGE, @CODE_POLICY, @CNAE, @STATE_REGISTRATION, @CPF_CNPJ, @NAME, @PATH_FILE_RESPONSE);        
        
		SET @COD_RESEARCH_RISK_RESPONSE = @@identity;        

        IF @@rowcount < 1            
			THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK_RESPONSE', 1;        
        
		INSERT INTO RESEARCH_RISK_RESPONSE_DETAILS (COD_RESEARCH_RISK_RESPONSE, CODE, COD_SITUATION,        
		SITUATION_DESCRIPTION, COD_PARTNER_EC, CPF_PARTNER_EC)        
			SELECT        
			@COD_RESEARCH_RISK_RESPONSE        
			,LINES.[CODE]        
			,LINES.[COD_SITUATION]        
			,LINES.[SITUATION_DESCRIPTION]        
			,EC_PARTNERS.COD_ADT_DATA        
			,LINES.[CPF_PARTNER_EC]        
			FROM @LINES_RESEARCH_RISK_DETAILS AS LINES        
			INNER JOIN RESEARCH_RISK        
			ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK        
			LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS        
			ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC        
			AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;        
			
		IF @@rowcount < 1        
			THROW 60001, 'COULD NOT INSERT RESEARCH_RISK_RESPONSE_DETAILS', 1;        
        
		EXEC SP_CHECK_RISK_SEMAPHORE @SITUATION_RISK, @COD_RESEARCH_RISK_PK        
        
	END        
        
	IF @PATH_FILE_RESPONSE_CONSOLIDATED IS NOT NULL        
	BEGIN        
		UPDATE RESEARCH_RISK_DETACHED        
		SET PATH_FILE_RESPONSE = @PATH_FILE_RESPONSE_CONSOLIDATED        
			,MODIFY_AT = dbo.FN_FUS_UTF(current_timestamp)        
		WHERE COD_RESEARCH_RISK_DETACHED = (SELECT TOP 1        
			RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED        
			FROM RESEARCH_RISK_DETACHED        
			INNER JOIN RESEARCH_RISK_DETACHED_LINES        
			ON RESEARCH_RISK_DETACHED_LINES.COD_RESEARCH_RISK_DETACHED =        
			RESEARCH_RISK_DETACHED.COD_RESEARCH_RISK_DETACHED        
			INNER JOIN RESEARCH_RISK        
			ON RESEARCH_RISK.COD_RISK_DETACHED_LINES =        
			RESEARCH_RISK_DETACHED_LINES.COD_RISK_DETACHED_LINES        
			WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK)        
        
        
	END        
        
END
GO

--ET-1398

GO

--ST-2162

GO

IF (SELECT
			COUNT(*)
		FROM ITEMS_SERVICES_AVAILABLE
		WHERE [NAME] = 'RECURRING')
	= 0

INSERT INTO ITEMS_SERVICES_AVAILABLE ([NAME],[DESCRIPTION],CODE,ACTIVE)
VALUES ('RECURRING','Pagamento por link recorrente','26',1)

GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'QTD_TO_EXPIRE'
	AND object_id = OBJECT_ID(N'Recurring.LINK_RECURRING'))
BEGIN

ALTER TABLE Recurring.LINK_RECURRING ADD QTD_TO_EXPIRE INT

END


GO


IF OBJECT_ID('Recurring.TP_RECURRING_LINK') IS NOT NULL
DROP PROCEDURE SP_REG_PAYMENT_LINK

IF TYPE_ID('Recurring.TP_RECURRING_LINK') IS NOT NULL
DROP TYPE [Recurring].[TP_RECURRING_LINK];

/****** Object:  UserDefinedTableType [Recurring].[TP_RECURRING_LINK]    Script Date: 02/06/2021 11:09:47 ******/
CREATE TYPE [Recurring].[TP_RECURRING_LINK] AS TABLE(
	[NAME] [varchar](255) NULL,
	[DESCRIPTION] [varchar](255) NULL,
	[PERIOD_TYPE] [varchar](255) NULL,
	[INITIAL_DATE] [datetime] NULL,
	[FINAL_DATE] [datetime] NULL,
	[URL_CALLBACK] [varchar](255) NULL,
	[HAS_EMAIL] [int] NULL,
	[AMOUNT] [decimal](22, 6) NULL,
	[QTD_TO_EXPIRE] [int] NULL
)


GO

IF OBJECT_ID('SP_REG_PAYMENT_LINK') IS NOT NULL
DROP PROCEDURE SP_REG_PAYMENT_LINK;

GO
CREATE PROCEDURE SP_REG_PAYMENT_LINK
/*----------------------------------------------------------------------------------------                
Project.......: TKPP                
------------------------------------------------------------------------------------------                
Author                          VERSION        Date                            Description                
------------------------------------------------------------------------------------------                
Caike Uchoa                       V2        02/06/2021                   alter Recurring link                
------------------------------------------------------------------------------------------*/     
(@CODE VARCHAR(255),    
@COD_AFFILIATOR INT,    
@CPF_CNPJ VARCHAR(255),    
@EXP_DATE DATETIME,    
@ORDER_IDENT VARCHAR(255),    
@DESCRIPTION VARCHAR(255),    
@COD_TYPE_PR INT,    
@COD_SHIPP_TYPE INT,    
@SHIPP_NAME VARCHAR(255) = NULL,    
@PRICE DECIMAL(22, 6) = NULL,    
@ZIPCODE VARCHAR(100) = NULL,    
@MAX_INSTALLMENT INT,    
@IS_VARIABLE INT,    
@IS_CUSTOMER_INTEREST INT,    
@IS_SPLIT INT,    
@URL_CALLBACK VARCHAR(255) = NULL,    
@HAS_CUSTOMER INT = 0,    
@IS_RECURRING INT = 0,    
@CUSTOMER_EMAIL VARCHAR(100) = NULL,    
@CUSTOMER_NAME VARCHAR(100) = NULL,    
@CUSTOMER_PHONE VARCHAR(100) = NULL,    
@CUSTOMER_ZIPCODE VARCHAR(100) = NULL,    
@CUSTOMER_STREET VARCHAR(100) = NULL,    
@CUSTOMER_NUMBER VARCHAR(100) = NULL,    
@CUSTOMER_NEIGHBORHOOD VARCHAR(100) = NULL,    
@CUSTOMER_CITY VARCHAR(100) = NULL,    
@CUSTOMER_UF VARCHAR(100) = NULL,    
@PRODUCTS TP_LINK_PROD READONLY,    
@PROVIDERS ITEM_SPLIT READONLY,    
@DATA_RECURRING Recurring.TP_RECURRING_LINK READONLY,    
@HAS_EC_THEME BIT = 0,    
@BILLET_INTERVAL INT = NULL,    
@PAYMENT_METHODS TP_STRING_CODE READONLY)            

AS    
BEGIN    
    
    DECLARE @COD_PAY_LINK INT;    
    DECLARE @COD_EC INT;    
    
    SELECT @COD_EC = COD_EC    
    FROM COMMERCIAL_ESTABLISHMENT    
    WHERE COD_AFFILIATOR = @COD_AFFILIATOR    
      AND CPF_CNPJ = @CPF_CNPJ;    
    
    INSERT INTO PAYMENT_LINK (CODE,    
                              EXPIRATION_DATE,    
                              COD_AFFILIATOR,    
                              COD_EC,    
                              ORDER_IDENT,    
                              COD_TYPE_PR,    
                              MAX_INSTALLMENT,    
                              DESCRIPTION,    
                              IS_VARIABLE,    
                              IS_CUSTOMER_INTEREST,    
                              IS_SPLIT,    
                              URL_CALLBACK,    
                              IS_RECURRING,    
                              HAS_EC_THEME,    
                              BILLET_INTERVAL)    
    VALUES (@CODE, @EXP_DATE, @COD_AFFILIATOR, @COD_EC, @ORDER_IDENT, @COD_TYPE_PR, @MAX_INSTALLMENT, @DESCRIPTION,    
            @IS_VARIABLE, @IS_CUSTOMER_INTEREST, @IS_SPLIT, @URL_CALLBACK, @IS_RECURRING, @HAS_EC_THEME, @BILLET_INTERVAL);    
    
    IF @@rowcount < 1    
        THROW 70016, 'COULD NOT REGISTER [PAYMENT_LINK]', 1;    
    
    SET @COD_PAY_LINK = @@identity;    
    
    INSERT INTO PRODUCTS_LINK (NAME,    
                               QTY,    
                               AMOUNT,    
                               COD_PAY_LINK)    
    SELECT NAME    
         , QTY    
         , AMOUNT    
         , @COD_PAY_LINK    
    FROM @PRODUCTS AS PRODS;    
    
    INSERT INTO SHIPPING_LINK (NAME,    
                               COD_SHIPP_TYPE,    
                               PRICE,    
                               ZIPCODE,    
                               COD_PAY_LINK)    
    VALUES (@SHIPP_NAME, @COD_SHIPP_TYPE, @PRICE, @ZIPCODE, @COD_PAY_LINK);    
    
    IF @IS_SPLIT = 1    
        BEGIN    
    
            INSERT INTO SPLIT_LINK (COD_EC,    
                                    COD_AFFILIATOR,    
                                    AMOUNT,    
                                    COD_PAY_LINK)    
            SELECT COMMERCIAL_ESTABLISHMENT.COD_EC    
                 , @COD_AFFILIATOR    
                 , TP.AMOUNT    
                 , @COD_PAY_LINK    
            FROM COMMERCIAL_ESTABLISHMENT    
                     JOIN @PROVIDERS TP    
                          ON TP.DOC_MERCHANT = COMMERCIAL_ESTABLISHMENT.CPF_CNPJ    
                              AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFFILIATOR    
                              AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1;    
    
            IF @@rowcount < 1    
                THROW 70016, 'COULD NOT REGISTER [SPLIT_LINK]', 1;    
        END;    
    
    IF @HAS_CUSTOMER = 1    
        BEGIN    
    
            INSERT INTO CUSTOMER_LINK (NAME,    
                                       EMAIL_ADDRESS,    
                                       PHONE_NUMBER,    
                                       ZIPCODE,    
                                       STREET,    
                                       NUMBER,    
                                       NEIGHBORHOOD,    
                                       CITY,    
                                       UF,    
                                       COD_PAY_LINK)    
            VALUES (@CUSTOMER_NAME, @CUSTOMER_EMAIL, @CUSTOMER_PHONE, @CUSTOMER_ZIPCODE, @CUSTOMER_STREET,    
                    @CUSTOMER_NUMBER, @CUSTOMER_NEIGHBORHOOD, @CUSTOMER_CITY, @CUSTOMER_UF, @COD_PAY_LINK);    
    
            IF @@rowcount < 1    
                THROW 70016, 'COULD NOT REGISTER [CUSTOMER_LINK]', 1;    
        END;    
    
    IF @IS_RECURRING = 1    
        BEGIN    
    
            INSERT INTO Recurring.LINK_RECURRING (NAME, DESCRIPTION, DOCUMENT, COD_AFFILIATOR, PERIOD_TYPE,    
                                                  INITIAL_DATE,    
                                                  FINAL_DATE, 
												  URL_CALLBACK, AMOUNT, COD_PAY_LINK, HAS_EMAIL,QTD_TO_EXPIRE)    
            SELECT data_req.NAME    
                 , data_req.DESCRIPTION    
                 , @CPF_CNPJ    
                 , @COD_AFFILIATOR    
                 , data_req.PERIOD_TYPE    
                 , data_req.INITIAL_DATE    
                 , data_req.FINAL_DATE    
                 , data_req.URL_CALLBACK    
                 , data_req.AMOUNT    
                 , @COD_PAY_LINK    
                 , data_req.HAS_EMAIL 
				 ,data_req.QTD_TO_EXPIRE
            FROM @DATA_RECURRING data_req    
    
        END    
    
    
    INSERT INTO ASS_PAY_METHOD_LINK (COD_PAY_METH, COD_PAY_LINK)    
    SELECT COD_PAY_METH, @COD_PAY_LINK    
    FROM PAYMENT_METHODS    
             JOIN @PAYMENT_METHODS TP ON TP.CODE = PAYMENT_METHODS.NAME    
    
END;


GO

IF OBJECT_ID('Recurring.SP_FD_DATA_RECURRING_LINK') IS NOT NULL
DROP PROCEDURE Recurring.SP_FD_DATA_RECURRING_LINK

GO

CREATE PROCEDURE Recurring.SP_FD_DATA_RECURRING_LINK 
/*----------------------------------------------------------------------------------------                
Project.......: TKPP                
------------------------------------------------------------------------------------------                
Author                          VERSION        Date                            Description                
------------------------------------------------------------------------------------------                
Caike Uchoa                       V2        02/06/2021                    ADD QTD_TO_EXPIRE               
------------------------------------------------------------------------------------------*/     
(@CODE VARCHAR(255))  
AS  
BEGIN  
  
 SELECT  
  lr.NAME  
    ,lr.DESCRIPTION  
    ,lr.PERIOD_TYPE  
    ,lr.INITIAL_DATE  
    ,lr.FINAL_DATE  
    ,lr.HAS_EMAIL  
    ,lr.AMOUNT  
	,lr.QTD_TO_EXPIRE	
 FROM PAYMENT_LINK  
 JOIN Recurring.LINK_RECURRING lr  
  ON lr.COD_PAY_LINK = PAYMENT_LINK.COD_PAY_LINK  
 WHERE CODE = @CODE  
 AND ACTIVE = 1  
  
END



GO
IF OBJECT_ID('SP_LS_EMAIL_PENDING_TOSEND_TRAN') IS NOT NULL
DROP PROCEDURE SP_LS_EMAIL_PENDING_TOSEND_TRAN

GO
CREATE PROCEDURE SP_LS_EMAIL_PENDING_TOSEND_TRAN   
/*----------------------------------------------------------------------------------------                
Project.......: TKPP                
------------------------------------------------------------------------------------------                
Author                          VERSION        Date                            Description                
------------------------------------------------------------------------------------------                
Caike Uchoa                       V2        16/06/2021                alter filter LINK_PAYMENT_SERVICE                
------------------------------------------------------------------------------------------*/     
AS    
BEGIN    
    
SELECT    
 REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE    
   ,REPORT_TRANSACTIONS_EXP.COD_TRAN    
   ,ISNULL(REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE, '') AS ORDER_NUM    
   ,REPORT_TRANSACTIONS_EXP.COD_EC    
   ,REPORT_TRANSACTIONS_EXP.[NAME] AS TRANS_EC_NAME    
   ,REPORT_TRANSACTIONS_EXP.BRAND    
   ,REPORT_TRANSACTIONS_EXP.AMOUNT    
   ,REPORT_TRANSACTIONS_EXP.PLOTS    
   ,REPORT_TRANSACTIONS_EXP.CUSTOMER_EMAIL    
   ,REPORT_TRANSACTIONS_EXP.CUSTOMER_IDENTIFICATION    
   ,CASE    
  WHEN    
   REPORT_TRANSACTIONS_EXP.SITUATION = 'CONFIRMADA' THEN REPORT_TRANSACTIONS_EXP.SITUATION    
  ELSE 'NAO AUTORIZADA'    
 END AS SITUATION    
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE    
   ,REPORT_TRANSACTIONS_EXP.NAME_AFFILIATOR    
   ,THEMES.LOGO_AFFILIATE    
   ,THEMES.LOGO_HEADER_AFFILIATE    
   ,THEMES.COLOR_HEADER    
   ,THEMES.SECONDARY_COLOR    
FROM REPORT_TRANSACTIONS_EXP    
JOIN THEMES    
 ON THEMES.COD_AFFILIATOR = REPORT_TRANSACTIONS_EXP.COD_AFFILIATOR    
  AND THEMES.ACTIVE = 1    
WHERE EMAIL_CONFIRM_SENDED IS NULL    
AND CUSTOMER_EMAIL IS NOT NULL    
AND (LINK_PAYMENT_SERVICE = 1  OR
 IIF((SELECT          
    COUNT(*)          
   FROM [TRANSACTION_SERVICES] TS WITH(NOLOCK)          
   WHERE [TS].[COD_TRAN] = REPORT_TRANSACTIONS_EXP.[COD_TRAN]          
   AND [TS].[COD_ITEM_SERVICE] = 24)          
  > 0, 1, 0) = 1
)
AND REPORT_TRANSACTIONS_EXP.COD_TRAN > 3089395    
  
   
    
    
END

--ST-2162
GO

--ST-2162_Legado


SELECT
CASE
WHEN PERIOD_TYPE = 'Weekly' 
THEN (DATEDIFF(WEEK,INITIAL_DATE,FINAL_DATE) + 1)
WHEN PERIOD_TYPE = 'Monthly'
THEN  (DATEDIFF(MONTH,INITIAL_DATE,FINAL_DATE) + 1)
END AS QTD_EXPIRE,
COD_LINK_RECURRING
INTO #TEMP_LINK_R
FROM Recurring.LINK_RECURRING
JOIN PAYMENT_LINK ON PAYMENT_LINK.COD_PAY_LINK = Recurring.LINK_RECURRING.COD_PAY_LINK
WHERE FINAL_DATE IS NOT NULL
AND EXPIRATION_DATE >= GETDATE()


UPDATE Recurring.LINK_RECURRING SET QTD_TO_EXPIRE = #TEMP_LINK_R.QTD_EXPIRE 
FROM Recurring.LINK_RECURRING 
JOIN #TEMP_LINK_R ON #TEMP_LINK_R.COD_LINK_RECURRING = Recurring.LINK_RECURRING.COD_LINK_RECURRING


DROP TABLE #TEMP_LINK_R

--ST-2162_Legado

GO

--ST-2185


IF OBJECT_ID('SERVICE_UP_BANK_DETAILS') IS NOT NULL DROP TABLE TABLE_TEST;
GO

CREATE TABLE [SERVICE_UP_BANK_DETAILS]
(
 COD_UP_BK_DETAILS INT NOT NULL PRIMARY KEY IDENTITY
,CREATED_AT	datetime
,AGENCY	VARCHAR(100)
,DIGIT_AGENCY	VARCHAR(10)
,ACCOUNT	VARCHAR(100)
,DIGIT_ACCOUNT	VARCHAR(10)
,COD_EC	INT
,COD_BANK	INT
,COD_USER	INT
,ACTIVE	INT
,MODIFY_DATE	datetime
,COD_TYPE_ACCOUNT	INT
,COD_OPER_BANK	INT
,COD_BRANCH	INT
,IS_CERC	INT NOT NULL
,IS_ASSIGNMENT	INT
,ASSIGNMENT_NAME	VARCHAR(255)
,ASSIGNMENT_IDENTIFICATION	VARCHAR(14)
,STATUS_PROCESS INT
)

GO


IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_USER_MOFY'
	AND object_id = OBJECT_ID(N'SERVICE_UP_BANK_DETAILS'))
BEGIN

ALTER TABLE [SERVICE_UP_BANK_DETAILS] ADD COD_USER_MODIFY INT

END


GO
IF OBJECT_ID('SP_SERVICE_UP_BANK_DETAILS') IS NOT NULL
DROP PROCEDURE SP_SERVICE_UP_BANK_DETAILS

GO
CREATE PROCEDURE SP_SERVICE_UP_BANK_DETAILS
/*----------------------------------------------------------------------------------------                
 Procedure Name: [SP_SERVICE_UP_BANK_DETAILS]                
 Project.......: TKPP                
 ------------------------------------------------------------------------------------------                
 Author                     VERSION        Date                     Description                
 ------------------------------------------------------------------------------------------                
 Caike Uchoa                   v1        04/06/2021                   CREATED
------------------------------------------------------------------------------------------*/           
AS
BEGIN 

SELECT 
 CREATED_AT,
 AGENCY, 
 DIGIT_AGENCY,
 ACCOUNT, 
 DIGIT_ACCOUNT,
 COD_EC, 
 COD_BANK,
 COD_USER,
 1 AS ACTIVE,
 COD_TYPE_ACCOUNT,
 COD_BRANCH, 
 COD_OPER_BANK, 
 ASSIGNMENT_NAME,
 ASSIGNMENT_IDENTIFICATION, 
 IS_ASSIGNMENT,
 IS_CERC,
 STATUS_PROCESS
INTO #TEMP_UP_BANK
FROM [SERVICE_UP_BANK_DETAILS]
WHERE STATUS_PROCESS = 0


DECLARE @CONT INT;

SET @CONT = (SELECT COUNT(*) FROM #TEMP_UP_BANK);


WHILE @CONT > 0
BEGIN

SELECT TOP 500 * 
INTO #TEMP_DELETE
FROM #TEMP_UP_BANK

UPDATE BANK_DETAILS_EC    
SET ACTIVE = 0    
   ,MODIFY_DATE = #TEMP_DELETE.CREATED_AT   
FROM BANK_DETAILS_EC
JOIN #TEMP_DELETE ON #TEMP_DELETE.COD_EC = BANK_DETAILS_EC.COD_EC
AND #TEMP_DELETE.STATUS_PROCESS = 0
WHERE BANK_DETAILS_EC.ACTIVE = 1    
AND BANK_DETAILS_EC.IS_CERC = 0;    
    

INSERT INTO BANK_DETAILS_EC (CREATED_AT, AGENCY, DIGIT_AGENCY, ACCOUNT, DIGIT_ACCOUNT, COD_EC, COD_BANK, COD_USER, ACTIVE, COD_TYPE_ACCOUNT, COD_BRANCH, COD_OPER_BANK, ASSIGNMENT_NAME, ASSIGNMENT_IDENTIFICATION, IS_ASSIGNMENT, IS_CERC)    
 SELECT
 CREATED_AT,
 AGENCY, 
 DIGIT_AGENCY,
 ACCOUNT, 
 DIGIT_ACCOUNT,
 COD_EC, 
 COD_BANK,
 COD_USER,
 ACTIVE,
 COD_TYPE_ACCOUNT,
 COD_BRANCH, 
 COD_OPER_BANK, 
 ASSIGNMENT_NAME,
 ASSIGNMENT_IDENTIFICATION, 
 IS_ASSIGNMENT,
 IS_CERC
FROM #TEMP_DELETE
WHERE STATUS_PROCESS = 0


INSERT INTO PROCESSING_QUEUE (COD_EC,PROCESSED)
SELECT
COD_EC,
0
FROM #TEMP_DELETE


UPDATE [SERVICE_UP_BANK_DETAILS] SET STATUS_PROCESS = 1
FROM [SERVICE_UP_BANK_DETAILS]
JOIN #TEMP_DELETE ON #TEMP_DELETE.COD_EC = [SERVICE_UP_BANK_DETAILS].COD_EC
JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_EC = #TEMP_DELETE.COD_EC
AND BANK_DETAILS_EC.ACTIVE= 1
AND BANK_DETAILS_EC.IS_CERC = 0
AND BANK_DETAILS_EC.AGENCY = #TEMP_DELETE.AGENCY
AND ISNULL(BANK_DETAILS_EC.DIGIT_AGENCY,0) = ISNULL(#TEMP_DELETE.DIGIT_AGENCY,0)
AND BANK_DETAILS_EC.ACCOUNT = #TEMP_DELETE.ACCOUNT
AND BANK_DETAILS_EC.DIGIT_ACCOUNT = #TEMP_DELETE.DIGIT_ACCOUNT
AND BANK_DETAILS_EC.COD_BANK = #TEMP_DELETE.COD_BANK
AND BANK_DETAILS_EC.COD_USER = #TEMP_DELETE.COD_USER
AND BANK_DETAILS_EC.ACTIVE = #TEMP_DELETE.ACTIVE
AND BANK_DETAILS_EC.COD_TYPE_ACCOUNT = #TEMP_DELETE.COD_TYPE_ACCOUNT
AND ISNULL(BANK_DETAILS_EC.COD_BRANCH,0) = ISNULL(#TEMP_DELETE.COD_BRANCH,0)
AND ISNULL(BANK_DETAILS_EC.COD_OPER_BANK,0) = ISNULL(#TEMP_DELETE.COD_OPER_BANK,0)
AND ISNULL(BANK_DETAILS_EC.ASSIGNMENT_NAME,0) = ISNULL(#TEMP_DELETE.ASSIGNMENT_NAME,0)
AND ISNULL(BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION,0) = ISNULL(#TEMP_DELETE.ASSIGNMENT_IDENTIFICATION,0)
AND ISNULL(BANK_DETAILS_EC.IS_ASSIGNMENT,0) = ISNULL(#TEMP_DELETE.IS_ASSIGNMENT,0)
AND [SERVICE_UP_BANK_DETAILS].STATUS_PROCESS = 0


DROP TABLE #TEMP_DELETE

SET @CONT = @CONT - 500;

END


DROP TABLE #TEMP_UP_BANK
DELETE FROM [SERVICE_UP_BANK_DETAILS] WHERE STATUS_PROCESS= 1 AND CREATED_AT <= DATEADD(DAY,-15,GETDATE())



END


GO

IF OBJECT_ID('SP_VERIFY_SERVICE_UP_BANK') IS NOT NULL
DROP PROCEDURE [SP_VERIFY_SERVICE_UP_BANK]

GO
CREATE PROCEDURE [DBO].[SP_VERIFY_SERVICE_UP_BANK]      
/*********************************************************************************************************    
----------------------------------------------------------------------------------------         
    Procedure Name: [SP_VERIFY_SERVICE_UP_BANK]        
    Project.......: TKPP         
    ------------------------------------------------------------------------------------------         
    Author                          VERSION        Date                            Description                
    ------------------------------------------------------------------------------------------         
	Caike uchoa                       v1        2021-06-04                          created
    ------------------------------------------------------------------------------------------    
*********************************************************************************************************/        
(    
 @COD_EC INT
)
AS
BEGIN


IF(SELECT COUNT(*) FROM [SERVICE_UP_BANK_DETAILS] 
WHERE STATUS_PROCESS = 0
AND COD_EC = @COD_EC) > 0
BEGIN 

SELECT 1 AS VERIFY_BANK

END 
ELSE
BEGIN

SELECT 0 AS VERIFY_BANK


END


END


GO

IF OBJECT_ID('SP_UP_BANK_DETAILS_EC') IS NOT NULL
DROP PROCEDURE [SP_UP_BANK_DETAILS_EC]

GO
CREATE PROCEDURE [DBO].[SP_UP_BANK_DETAILS_EC]          
/*********************************************************************************************************    
----------------------------------------------------------------------------------------         
    Procedure Name: [SP_UP_BANK_DETAILS_EC]         
    Project.......: TKPP         
    ------------------------------------------------------------------------------------------         
    Author                          VERSION        Date                            Description                
    ------------------------------------------------------------------------------------------         
    Kennedy Alef     V1      27/07/2018         Creation               
    Elir Ribeiro     v2      19/11/2018         Changed                
    Luiz Aquino      v3      03/07/2019         update not is cerc        
    Lucas Aguiar     v4      2019-10-28         Conta Cess�o      
	Caike uchoa      v5      2021-06-04         add update bank details service
    ------------------------------------------------------------------------------------------    
*********************************************************************************************************/    
         
(    
 @AGENCY                    VARCHAR(100),     
 @DIGIT_AGENCY              VARCHAR(100),     
 @ACCOUNT                   VARCHAR(100),     
 @DIGIT_ACCOUNT             VARCHAR(100) = NULL,     
 @COD_EC                    INT,     
 @COD_BANK                  INT,     
 @COD_USER                  INT,     
 @COD_TYPE_ACCOUNT          INT,     
 @COD_BRANCH                INT,     
 @COD_OPER                  INT          = NULL,     
 @IS_ASSIGNMENT             INT          = 0,     
 @ASSIGNMENT_NAME           VARCHAR(255) = NULL,     
 @ASSIGNMENT_IDENTIFICATION VARCHAR(14)  = NULL,
 @UP_BANK_AFF INT  = 0
 )    
AS    
BEGIN    

IF @UP_BANK_AFF = 0
BEGIN

    DECLARE @CONT INT= 0;    

 BEGIN    
UPDATE [BANK_DETAILS_EC]    
SET [ACTIVE] = 0    
   ,[MODIFY_DATE] = GETDATE()    
WHERE [COD_BRANCH] = @COD_BRANCH    
AND [ACTIVE] = 1    
AND [IS_CERC] = 0;    
    
    
INSERT INTO [BANK_DETAILS_EC] ([CREATED_AT],    
[AGENCY],    
[DIGIT_AGENCY],    
[ACCOUNT],    
[DIGIT_ACCOUNT],    
[COD_EC],    
[COD_BANK],    
[COD_USER],    
[ACTIVE],    
[COD_TYPE_ACCOUNT],    
[COD_BRANCH],    
[COD_OPER_BANK],    
[IS_ASSIGNMENT],    
[ASSIGNMENT_NAME],    
[ASSIGNMENT_IDENTIFICATION])    
 VALUES (GETDATE(), @AGENCY, ISNULL(REPLACE(@DIGIT_AGENCY, '-', ''), ''), @ACCOUNT, @DIGIT_ACCOUNT, @COD_EC, @COD_BANK, @COD_USER, 1, @COD_TYPE_ACCOUNT, @COD_BRANCH, @COD_OPER, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION);    
    
--SELECT    
-- @CONT = COUNT([COD_FIN_CALENDAR])    
--FROM [FINANCE_CALENDAR]    
--WHERE [ACTIVE] = 1    
--AND [COD_EC] = @COD_EC    
--AND [COD_SITUATION] = 4    
--AND [IS_LOCK] = 0;    
    
--IF @CONT > 0    
--BEGIN    
    
--EXEC [SP_FINANCE_RATE_EC] @COD_EC;    
    
--EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;    
    
--END;    
    
    
END;    

END

ELSE 
BEGIN


UPDATE [SERVICE_UP_BANK_DETAILS] 
SET STATUS_PROCESS= 1, 
COD_USER_MODIFY = @COD_USER
WHERE COD_EC = @COD_EC    
AND STATUS_PROCESS = 0


INSERT INTO [SERVICE_UP_BANK_DETAILS] (
[CREATED_AT],    
[AGENCY],    
[DIGIT_AGENCY],    
[ACCOUNT],    
[DIGIT_ACCOUNT],    
[COD_EC],    
[COD_BANK],    
[COD_USER],    
[ACTIVE],    
[COD_TYPE_ACCOUNT],    
[COD_BRANCH],    
[COD_OPER_BANK],    
[IS_ASSIGNMENT],    
[ASSIGNMENT_NAME],    
[ASSIGNMENT_IDENTIFICATION],
IS_CERC,
STATUS_PROCESS
)    
 VALUES (GETDATE(), @AGENCY, ISNULL(REPLACE(@DIGIT_AGENCY, '-', ''), ''), @ACCOUNT, @DIGIT_ACCOUNT, @COD_EC, @COD_BANK, @COD_USER, 1, @COD_TYPE_ACCOUNT, @COD_BRANCH, @COD_OPER, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION,0,0);    
    
IF @@rowcount < 1        
  THROW 60085, 'COULD NOT REGISTER SERVICE_UP_BANK_DETAILS', 1     



END



END;

--ST-2185

GO

--ST-2202

GO

IF OBJECT_ID('SP_REPORT_AFILIADOR_EXP') IS NOT NULL
DROP PROCEDURE [SP_REPORT_AFILIADOR_EXP]

GO
CREATE PROCEDURE [dbo].[SP_REPORT_AFILIADOR_EXP]                                                                              
/*----------------------------------------------------------------------------------------                                                
Procedure Name: [SP_REPORT_AFILIADOR_EXP]                                                
Project.......: TKPP                                                
------------------------------------------------------------------------------------------                                                
Author                       VERSION            Date             Description                                                
------------------------------------------------------------------------------------------                                                        
Caike Uch�a                   v1            28/11/2019              Created      
Caike Uchoa                   v2            10/06/2021         add filter plan category     
------------------------------------------------------------------------------------------*/                                                                              
(  
@AFILIADOR VARCHAR(100) = NULL,  
@FINANCE_BLOCKED INT = NULL,  
@ACTIVE INT = NULL,  
@COD_COMP INT  
)  
AS   
BEGIN  
   
  
DECLARE @CodSpotService INT;  
   
DECLARE @COD_SPLIT_SERVICE INT;  
   
DECLARE @CodSchRetention INT;  
   
DECLARE @CodGwNotification INT;  
   
  
DECLARE @QUERY NVARCHAR(MAX);  
     
DECLARE @COD_BLOCK_SITUATION INT;  
    
DECLARE @BUSCA VARCHAR(255);  
  
SET @BUSCA = '%' + @AFILIADOR + '%'  
  
  
SELECT  
 @COD_BLOCK_SITUATION = COD_SITUATION  
FROM SITUATION  
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';  
  
SELECT  
 @CodSpotService = COD_ITEM_SERVICE  
FROM ITEMS_SERVICES_AVAILABLE  
WHERE [NAME] = 'SPOT';  
  
SELECT  
 @COD_SPLIT_SERVICE = COD_ITEM_SERVICE  
FROM ITEMS_SERVICES_AVAILABLE  
WHERE [NAME] = 'SPLIT';  
  
SELECT  
 @CodSchRetention = COD_ITEM_SERVICE  
FROM ITEMS_SERVICES_AVAILABLE  
WHERE [NAME] = 'LEDGER_RETENTION';  
  
SELECT  
 @CodGwNotification = COD_ITEM_SERVICE  
FROM ITEMS_SERVICES_AVAILABLE  
WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';  
  
SET @QUERY =  
'SELECT   
AFFILIATOR.[NAME] AS AFILIATOR,  
AFFILIATOR.CPF_CNPJ,  
AFFILIATOR.CREATED_AT,  
AFFILIATOR.SUBDOMAIN,  
AFFILIATOR.ACTIVE,  
CASE   
WHEN AFFILIATOR.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1  
ELSE 0  
END AS [FINANCE_BLOCKED],  
BANK_DETAILS_EC.AGENCY as [AGENCY],  
BANK_DETAILS_EC.DIGIT_AGENCY AS [DIGIT_AGENCY],  
BANK_DETAILS_EC.ACCOUNT AS [ACOUNT],  
BANK_DETAILS_EC.DIGIT_ACCOUNT AS [DIGIT_ACOUNT],  
ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE,  
OPERATION.[DESCRIPTION] AS [OPERATION],  
[PLAN].CODE AS [PLAN],  
TYPE_PLAN.CODE AS [TYPE_PLAN],  
PLAN_TAX_AFFILIATOR.INTERVAL AS INTERVAL,  
TRANSACTION_TYPE.CODE AS [TRANSACTION_TYPE],  
BRAND.[NAME] AS [BRAND],  
PLAN_TAX_AFFILIATOR.QTY_INI_PLOTS,  
PLAN_TAX_AFFILIATOR.QTY_FINAL_PLOTS,  
PLAN_TAX_AFFILIATOR.[PERCENTAGE],  
PLAN_TAX_AFFILIATOR.RATE,  
PLAN_TAX_AFFILIATOR.ANTICIPATION_PERCENTAGE,  
SOURCE_TRANSACTION.CODE AS [SOURCE_TRANSACTION],   
CASE WHEN  
 (SELECT COUNT(*) FROM SERVICES_AVAILABLE      
     WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService      
      AND SERVICES_AVAILABLE.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR      
      AND SERVICES_AVAILABLE.ACTIVE = 1    
   AND SERVICES_AVAILABLE.COD_EC IS NULL  
    ) > 0      
 THEN 1  
 ELSE 0      
 END [Spot],  
 ISNULL(AFFILIATOR.SPOT_TAX, 0) AS [SPOT_TAX],  
   CASE WHEN (SELECT COUNT(*) FROM SERVICES_AVAILABLE      
    WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE      
     AND SERVICES_AVAILABLE.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR    
     AND SERVICES_AVAILABLE.ACTIVE = 1      
  AND SERVICES_AVAILABLE.COD_EC IS NULL  
    ) > 0       
   THEN 1      
   ELSE 0      
  END [Split],  
  CASE WHEN  
 (SELECT COUNT(*) FROM SERVICES_AVAILABLE      
     WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodGwNotification      
      AND SERVICES_AVAILABLE.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR      
      AND SERVICES_AVAILABLE.ACTIVE = 1      
   AND SERVICES_AVAILABLE.COD_EC IS NULL  
    ) > 0      
 THEN 1  
 ELSE 0      
 END AS [GWNotification],  
   CASE WHEN  
 (SELECT COUNT(*) FROM SERVICES_AVAILABLE      
     WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention      
      AND SERVICES_AVAILABLE.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR      
      AND SERVICES_AVAILABLE.ACTIVE = 1      
    ) > 0      
 THEN 1  
 ELSE 0      
 END AS [Retention]  
FROM AFFILIATOR   
INNER JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR  
           AND BANK_DETAILS_EC.ACTIVE= 1  
INNER JOIN ACCOUNT_TYPE ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT  
INNER JOIN OPERATION_BANK ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK  
INNER JOIN OPERATION ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER  
INNER JOIN PLAN_TAX_AFFILIATOR ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR  
           AND PLAN_TAX_AFFILIATOR.ACTIVE= 1  
INNER JOIN [PLAN] ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN  
     AND [PLAN].ACTIVE= 1  
	 AND [PLAN].COD_PLAN_CATEGORY = 2
INNER JOIN TYPE_PLAN ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN  
INNER JOIN SOURCE_TRANSACTION ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN  
LEFT JOIN BRAND ON BRAND.COD_BRAND = PLAN_TAX_AFFILIATOR.COD_BRAND  
INNER JOIN TRANSACTION_TYPE ON TRANSACTION_TYPE.COD_TTYPE = PLAN_TAX_AFFILIATOR.COD_TTYPE  
INNER JOIN COMPANY ON COMPANY.COD_COMP = AFFILIATOR.COD_COMP   
WHERE AFFILIATOR.ACTIVE = @ACTIVE AND COMPANY.COD_COMP = @COD_COMP  
'  
  
IF @AFILIADOR IS NOT NULL  
SET @QUERY = @QUERY + ' AND AFFILIATOR.[NAME] LIKE @BUSCA';  
  
IF @FINANCE_BLOCKED = 1  
SET @QUERY = @QUERY + ' AND AFFILIATOR.COD_SITUATION = @COD_BLOCK_SITUATION';  
  
IF @FINANCE_BLOCKED = 0  
SET @QUERY = @QUERY + ' AND AFFILIATOR.COD_SITUATION <> @COD_BLOCK_SITUATION';  
  
SET @QUERY = @QUERY + ' ORDER BY AFFILIATOR.[NAME]';  
  
EXEC sp_executesql @QUERY  
      ,N'  
 @AFILIADOR VARCHAR(100),  
 @FINANCE_BLOCKED INT,  
 @ACTIVE INT,  
 @COD_COMP INT,  
 @CodSpotService INT,  
 @COD_SPLIT_SERVICE INT,   
 @CodSchRetention INT,  
 @CodGwNotification INT,  
 @BUSCA VARCHAR(255),  
 @COD_BLOCK_SITUATION INT  
 '  
  
      ,@AFILIADOR = @AFILIADOR  
      ,@FINANCE_BLOCKED = @FINANCE_BLOCKED  
      ,@ACTIVE = @ACTIVE  
      ,@COD_COMP = @COD_COMP  
      ,@CodSpotService = @CodSpotService  
      ,@COD_SPLIT_SERVICE = @COD_SPLIT_SERVICE  
      ,@CodSchRetention = @CodSchRetention  
      ,@CodGwNotification = @CodGwNotification  
      ,@BUSCA = @BUSCA  
      ,@COD_BLOCK_SITUATION = @COD_BLOCK_SITUATION  
  
END

--ST-2202

GO

--ET-1377

  IF NOT EXISTS (SELECT
		*
	FROM sys.indexes
	WHERE name = '<IX_TRANSACTION_TITLES_RISK_ALERT>'
	AND object_id = OBJECT_ID('[dbo].[TRANSACTION_TITLES]'))
BEGIN
CREATE NONCLUSTERED INDEX [<IX_TRANSACTION_TITLES_RISK_ALERT>] ON [dbo].[TRANSACTION_TITLES] ([COD_TRAN], [PLOT], [COD_EC], [COD_SITUATION])
END


GO

  IF NOT EXISTS (SELECT
		*
	FROM sys.indexes
	WHERE name = '<IX_REPORT_TRANSACTIONS_EXP_COD_TRAN_RISK_ALERT>'
	AND object_id = OBJECT_ID('[dbo].[REPORT_TRANSACTIONS_EXP]'))
BEGIN
CREATE NONCLUSTERED INDEX [<IX_REPORT_TRANSACTIONS_EXP_COD_TRAN_RISK_ALERT>]
ON [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN])
INCLUDE ([TRANSACTION_CODE], [PLOTS], [BRAND], [TRAN_DATA_EXT_VALUE], [COMMENT], [NAME_ACQUIRER], [CARD_NAME], [LINK_PAYMENT_SERVICE], [CUSTOMER_EMAIL], [CUSTOMER_IDENTIFICATION], [LOGICAL_NUMBER_ACQ], [TERMINAL_VERSION], [CARD_HOLDER_DOC])
END
GO

IF OBJECT_ID('RISK_FRAUD_RULE') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_RULE
    (
        COD_RULE INT NOT NULL PRIMARY KEY IDENTITY,
        CREATED_AT DATETIME DEFAULT (GETDATE()),
        DESCRIPTION VARCHAR(128) NOT NULL,
        ACTIVE INT NOT NULL DEFAULT(1)
    )
END

IF OBJECT_ID('RISK_FRAUD_FIELD') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_FIELD
    (
        COD_RISK_FIELD INT NOT NULL PRIMARY KEY IDENTITY,
        NAME VARCHAR(32) NOT NULL,
        DESCRIPTION VARCHAR(64) NOT NULL,
        TYPE VARCHAR(32),
        PARTIAL INT NOT NULL DEFAULT(0),
        SYSTEM_VALUE INT NOT NULL default (0)
    )
END

IF OBJECT_ID('RISK_FRAUD_RULE_DETAIL') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_RULE_DETAIL
    (
        COD_RULE_DETAIL INT NOT NULL PRIMARY KEY IDENTITY,
        COD_RULE INT NOT NULL REFERENCES RISK_FRAUD_RULE(COD_RULE),
        COD_FIELD INT NOT NULL REFERENCES RISK_FRAUD_FIELD(COD_RISK_FIELD),
        COMPARISON VARCHAR(32) NOT NULL,
        FIELD_ORDER INT NOT NULL DEFAULT (0),
        AMOUNT DECIMAL(22, 6) NULL,
        AMOUNT_UNTIL DECIMAL(22, 6) NULL,
        COD_SITUATION INT NULL REFERENCES SITUATION(COD_SITUATION),
        COD_FIELD_COMPARE INT NULL REFERENCES RISK_FRAUD_FIELD(COD_RISK_FIELD),
        PERCENTAGE DECIMAL(22, 6) NULL
    )
END

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_FIELD)
= 0
BEGIN

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_TIME', 'Hora transação', 'TIME', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_VALUE', 'Valor transação', 'DECIMAL', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_PAN', 'PAN/CARTAO', 'GROUPING', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_POS', 'POS', 'GROUPING', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_EC', 'Estabelecimento', 'GROUPING', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_SITUATION', 'Situação', 'GROUPING', 0, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('AVG_TICKET', 'Ticket Medio', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRAN_LIMIT', 'Limite transação', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('DAY_LIMIT', 'Limite Di�rio', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('MONTH_LIMIT', 'Limite Mensal', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('DAY_TRANSACTED', 'Transacionado Dia', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('MONTH_TRANSACTED', 'Transacionado Mês', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('LAST_HOUR', 'Ultima x Horas', 'FILTER', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('LAST_DAY', 'Ultimos x dias', 'FILTER', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('SAME_DAY', 'Mesmo dia', 'FILTER', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('SAME_MONTH', 'Mesmo Mês', 'FILTER', 0, 0)
END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '1')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('1')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 0.01, 1, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_POS'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 3);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 5, NULL, NULL, NULL, NULL, 4);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_HOUR'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'FILTER', 1, NULL, NULL, NULL, NULL, 5);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '2')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('2')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 1000, NULL, NULL, NULL, NULL, 2);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '3')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('3')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_POS'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 3);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '4')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('4')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'AVG_TICKET'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', NULL, NULL, NULL, @Field2, 30, 2);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '5')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('5')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'DAY_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', NULL, NULL, NULL, @Field2, 50, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 1);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '6')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('6')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'MONTH_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', NULL, NULL, NULL, @Field2, 100, 1);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '7')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@COD_SIT INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('7')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_SITUATION'
SELECT
	@COD_SIT = COD_SITUATION
FROM SITUATION
WHERE NAME = 'CANCELED'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '=', NULL, NULL, @COD_SIT, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'SAME_MONTH'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'FILTER', NULL, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '8')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('8')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 2, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_HOUR'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '<', 1, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '9')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('9')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_DAY'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '<', 1, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '10')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('10')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 4, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_DAY'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '<', 7, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '13')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@COD_SIT INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('13')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_SITUATION'
SELECT
	@COD_SIT = COD_SITUATION
FROM SITUATION
WHERE NAME = 'DENIED ACQUIRER'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '=', NULL, NULL, @COD_SIT, NULL, NULL, 1);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '14-1')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('14-1')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'DAY_TRANSACTED'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'DAY_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>', NULL, NULL, NULL, @Field2, 100, 1);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '14-2')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('14-2')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'MONTH_TRANSACTED'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'MONTH_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>', NULL, NULL, NULL, @Field2, 100, 1);

END
GO


IF OBJECT_ID('RISK_ANALYSIS_DATA') IS NOT NULL
DROP TABLE RISK_ANALYSIS_DATA
GO
BEGIN
    CREATE TABLE RISK_ANALYSIS_DATA
    (
        COD_EC INT NOT NULL PRIMARY KEY REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC),
        AVG_THIRTY_DAYS DECIMAL(22, 6) NOT NULL DEFAULT (0),
        AVG_SEVEN_DAYS DECIMAL (22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_MONTH DECIMAL(22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_WEEK DECIMAL (22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_DAY DECIMAL (22, 6) NOT NULL DEFAULT (0),
        MONTH_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        DAY_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        WEEK_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        LAST_UPDATE DATETIME NOT NULL DEFAULT (GETDATE())
    )
END
GO

IF OBJECT_ID('SP_UP_RISK_DATA') IS NOT NULL
DROP PROCEDURE SP_UP_RISK_DATA;
GO
CREATE PROCEDURE [dbo].[SP_UP_RISK_DATA]
/*----------------------------------------------------------------------------------------                                  
   Project.......: TKPP                                  
 ------------------------------------------------------------------------------------------                                  
   Author                   VERSION        Date             Description                                  
------------------------------------------------------------------------------------------                                  
   Luiz Aquino              V1             2021-04-13       CREATED   
------------------------------------------------------------------------------------------*/
AS BEGIN

    DECLARE @TODAY DATETIME = dbo.FN_FUS_UTF(GETDATE());

    --MONTH
    DECLARE @THIRTY_DAYS_AGO DATE = DATEADD(DAY, -30, @TODAY), @ECS CODE_TYPE

INSERT INTO @ECS (CODE)
	SELECT DISTINCT
		COD_EC
	FROM REPORT_TRANSACTIONS_EXP
	WHERE TRANSACTION_DATE BETWEEN @THIRTY_DAYS_AGO AND @TODAY

INSERT INTO RISK_ANALYSIS_DATA (COD_EC)
	SELECT
		CODE
	FROM @ECS e
	LEFT JOIN RISK_ANALYSIS_DATA [RAD]
		ON [RAD].COD_EC = e.CODE
	WHERE RAD.COD_EC IS NULL

UPDATE RISK_ANALYSIS_DATA
SET AVG_THIRTY_DAYS = i.AVG_MONTH
   ,LAST_UPDATE = GETDATE()
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @THIRTY_DAYS_AGO AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

DECLARE @START_MONTH DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @TODAY), 0)

UPDATE RISK_ANALYSIS_DATA
SET MONTH_TRANSACTED = i.TOTAL_MONTH
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,SUM(AMOUNT) [TOTAL_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_MONTH AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

UPDATE RISK_ANALYSIS_DATA
SET AVG_TICKET_MONTH = i.AVG_MONTH
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_MONTH AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

-- WEEK

DECLARE @SEVEN_DAYS_AGO DATE = DATEADD(DAY, -7, @TODAY)

UPDATE RISK_ANALYSIS_DATA
SET AVG_SEVEN_DAYS = i.AVG_WEEK
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_WEEK]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @SEVEN_DAYS_AGO AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

DECLARE @START_OF_WEEK DATE = DATEADD(DAY, (DATEPART(WEEKDAY, @TODAY) - 1) * -1, @TODAY)

UPDATE RISK_ANALYSIS_DATA
SET WEEK_TRANSACTED = i.TOTAL_MONTH
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,SUM(AMOUNT) [TOTAL_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_OF_WEEK AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

UPDATE RISK_ANALYSIS_DATA
SET AVG_TICKET_WEEK = i.AVG_WEEK
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_WEEK]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_OF_WEEK AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

-- DAY 

DECLARE @TODAY_START DATE = @TODAY

UPDATE RISK_ANALYSIS_DATA
SET AVG_TICKET_DAY = i.AVG_DAY
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_DAY]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @TODAY_START AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

UPDATE RISK_ANALYSIS_DATA
SET DAY_TRANSACTED = i.TOTAL_DAY
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,SUM(AMOUNT) [TOTAL_DAY]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @TODAY_START AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

END
GO

IF OBJECT_ID('RISK_ANALYSIS_QUEUE') IS NOT NULL DROP TABLE RISK_ANALYSIS_QUEUE
GO
BEGIN
    CREATE TABLE RISK_ANALYSIS_QUEUE
    (
        COD_TRAN INT NOT NULL PRIMARY KEY REFERENCES [TRANSACTION](COD_TRAN),
        TRANSACTION_DATE DATETIME NOT NULL,
        AMOUNT DECIMAL(22, 6) NOT NULL,
        COD_SITUATION INT NOT NULL,
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP (COD_ASS_DEPTO_TERMINAL),
        COD_EC INT NOT NULL,
        PAN VARCHAR(100) NULL,
        CODE VARCHAR(100) NULL
    )
END



IF OBJECT_ID('SP_RISK_RULE_APPLY') IS NOT NULL
DROP PROCEDURE SP_RISK_RULE_APPLY
GO
CREATE PROCEDURE SP_RISK_RULE_APPLY
(
    @COD_RULE INT
) AS BEGIN

    DECLARE @COD_DETAIL INT
        , @COD_FIELD INT
        , @F1_NAME VARCHAR(32)
        , @F1_TYPE VARCHAR(32)
        , @F1_PARTIAL INT
        , @F1_IS_SYSTEM INT
        , @COMPARISON VARCHAR(32)
        , @AMOUNT DECIMAL(22, 6)
        , @AMOUNT_UNTIL DECIMAL(22, 6)
        , @COD_SIT INT
        , @COD_FIELD2 INT
        , @F2_NAME VARCHAR(32)
        , @F2_TYPE VARCHAR(32)
        , @F2_PARTIAL INT
        , @F2_SYSTEM INT
        , @PERCENT INT

    DECLARE DETAIL_CURSOR CURSOR FOR
SELECT
	COD_RULE_DETAIL
   ,COD_FIELD
   ,F1.NAME [F1_NAME]
   ,F1.TYPE [F1_TYPE]
   ,F1.PARTIAL [F1_IS_PARTIAL]
   ,F1.SYSTEM_VALUE [F1_IS_SYTEM]
   ,COMPARISON
   ,AMOUNT
   ,AMOUNT_UNTIL
   ,COD_SITUATION
   ,COD_FIELD_COMPARE
   ,F2.NAME [F2_NAME]
   ,F2.TYPE [F2_TYPE]
   ,F2.PARTIAL [F2_IS_PARTIAL]
   ,F2.SYSTEM_VALUE [F2_IS_SYTEM]
   ,PERCENTAGE
FROM RISK_FRAUD_RULE_DETAIL D
LEFT JOIN RISK_FRAUD_FIELD F1
	ON F1.COD_RISK_FIELD = D.COD_FIELD
LEFT JOIN RISK_FRAUD_FIELD F2
	ON F2.COD_RISK_FIELD = D.COD_FIELD_COMPARE
WHERE COD_RULE = @COD_RULE

OPEN DETAIL_CURSOR
FETCH NEXT FROM DETAIL_CURSOR
INTO @COD_DETAIL
, @COD_FIELD
, @F1_NAME
, @F1_TYPE
, @F1_PARTIAL
, @F1_IS_SYSTEM
, @COMPARISON
, @AMOUNT
, @AMOUNT_UNTIL
, @COD_SIT
, @COD_FIELD2
, @F2_NAME
, @F2_TYPE
, @F2_PARTIAL
, @F2_SYSTEM
, @PERCENT


DECLARE @QUERY NVARCHAR(MAX) = ''
	   ,@HAS_GROUP BIT = 0
	   ,@QUERY_GROUP NVARCHAR(MAX) = ''
	   ,@Group_Filter NVARCHAR(MAX) = '';
DECLARE @EC_FILTER_TYPE INT = 1
	   ,@IS_EC_FILTER INT = 0;

WHILE @@fetch_status = 0
BEGIN

DECLARE @TO_COMPARE VARCHAR(128) = ' ' + CAST(@AMOUNT AS VARCHAR) + ' '

IF @F2_NAME IS NOT NULL
BEGIN

IF @F2_NAME = 'TRANSACTION_TIME'
BEGIN
SET @TO_COMPARE = ' DATEPART(HOUR, [RAQ].TRANSACTION_DATE) ';
            END ELSE IF @F2_NAME = 'TRANSACTION_VALUE' BEGIN
SET @TO_COMPARE = ' [RAQ].AMOUNT ';
            END ELSE IF @F2_NAME = 'AVG_TICKET' BEGIN
SET @TO_COMPARE = ' ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'TRAN_LIMIT' BEGIN
SET @TO_COMPARE = ' (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'DAY_LIMIT' BEGIN
SET @TO_COMPARE = ' (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'MONTH_LIMIT' BEGIN
SET @TO_COMPARE = ' (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'DAY_TRANSACTED' BEGIN
SET @TO_COMPARE = ' [RD].DAY_TRANSACTED ';
            END ELSE IF @F2_NAME = 'MONTH_TRANSACTED' BEGIN
SET @TO_COMPARE = ' [RD].MONTH_TRANSACTED ';
            END

        END

        IF @F1_NAME = 'TRANSACTION_TIME' BEGIN

            IF @COMPARISON = '<'
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
BEGIN
IF @AMOUNT < @AMOUNT_UNTIL
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';
ELSE
SET @QUERY += ' AND (DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + CAST(@AMOUNT AS VARCHAR) + ' OR DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ') ';
END
END
ELSE
IF @F1_NAME = 'TRANSACTION_VALUE'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND [RAQ].AMOUNT < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND [RAQ].AMOUNT <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND [RAQ].AMOUNT = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND [RAQ].AMOUNT > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND [RAQ].AMOUNT >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND [RAQ].AMOUNT >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RAQ].AMOUNT <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRANSACTION_PAN'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].PAN', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].PAN '

SET @QUERY += ' AND [RAQ].PAN IS NOT NULL '

            IF @COMPARISON = '<'
SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '<='
SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '='
SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>'
SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>='
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = 'BETWEEN'
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRANSACTION_POS'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_ASS_DEPTO_TERMINAL', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_ASS_DEPTO_TERMINAL '

            IF @COMPARISON = '<'
SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '<='
SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '='
SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>'
SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>='
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = 'BETWEEN'
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRANSACTION_SITUATION'
BEGIN

SET @QUERY += ' AND [RAQ].COD_SITUATION = ' + CAST(@COD_SIT AS VARCHAR) + ' '

        END
        ELSE IF @F1_NAME = 'TRANSACTION_EC' BEGIN

            IF @HAS_GROUP = 0 BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_EC '

            IF @COMPARISON = '<'
SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '<='
SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '='
SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>'
SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>='
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = 'BETWEEN'
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'AVG_TICKET'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND ([RD].AVG_THIRTY_DAYS * ( @PERCENT / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRAN_LIMIT'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.TRANSACTION_LIMIT * ( @PERCENT / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'DAY_LIMIT'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 1000. )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'MONTH_LIMIT'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'DAY_TRANSACTED'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_EC '

SET @IS_EC_FILTER = 1;
SET @EC_FILTER_TYPE = 1;


            IF @COMPARISON = '<'
SET @QUERY += ' AND [RD].DAY_TRANSACTED < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND [RD].DAY_TRANSACTED <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND [RD].DAY_TRANSACTED = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND [RD].DAY_TRANSACTED > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND [RD].DAY_TRANSACTED >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND [RD].DAY_TRANSACTED >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RD].DAY_TRANSACTED <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'MONTH_TRANSACTED'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_EC '

SET @IS_EC_FILTER = 1;
SET @EC_FILTER_TYPE = 2;

            IF @COMPARISON = '<'
SET @QUERY += ' AND [RD].MONTH_TRANSACTED < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND [RD].MONTH_TRANSACTED <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND [RD].MONTH_TRANSACTED = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND [RD].MONTH_TRANSACTED > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND [RD].MONTH_TRANSACTED >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND [RD].MONTH_TRANSACTED >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RD].MONTH_TRANSACTED <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
--     ELSE IF @F1_NAME = 'LAST_HOUR' BEGIN
--     
--     END
--     ELSE IF @F1_NAME = 'LAST_DAY' BEGIN
--     
--     END
--     ELSE IF @F1_NAME = 'SAME_DAY' BEGIN
--     
--     END
--     ELSE IF @F1_NAME = 'SAME_MONTH' BEGIN
--     
--     END

FETCH NEXT FROM DETAIL_CURSOR
INTO @COD_DETAIL
, @COD_FIELD
, @F1_NAME
, @F1_TYPE
, @F1_PARTIAL
, @F1_IS_SYSTEM
, @COMPARISON
, @AMOUNT
, @AMOUNT_UNTIL
, @COD_SIT
, @COD_FIELD2
, @F2_NAME
, @F2_TYPE
, @F2_PARTIAL
, @F2_SYSTEM
, @PERCENT

END

CLOSE DETAIL_CURSOR
DEALLOCATE DETAIL_CURSOR

SET @QUERY = SUBSTRING(@QUERY, 5, LEN(@QUERY))
    DECLARE @JClause NVARCHAR(MAX)

    IF @IS_EC_FILTER = 1 BEGIN

SELECT
	@JClause = SUBSTRING((SELECT
			' AND ' + s.value + ' = ' + REPLACE(REPLACE(REPLACE(s.value, '[RAQ]', '[tgr]'), 'CE', '[tgr]'), '[RD]', '[tgr]') AS [text()]
		FROM STRING_SPLIT(@QUERY_GROUP, ',') s
		FOR XML PATH (''))
	, 5, 1000)

SET @Group_Filter = SUBSTRING(@Group_Filter, 5, LEN(@Group_Filter))

        IF LEN(@Group_Filter) > 0 BEGIN
SET @Group_Filter = ' HAVING ' + @Group_Filter
        END

SET @QUERY = 'SELECT ' + @QUERY_GROUP + '
            INTO #tmpGrp
        FROM RISK_ANALYSIS_QUEUE [RAQ]
            JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
            JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC 
        WHERE ' + @QUERY + '
        GROUP BY ' + @QUERY_GROUP + '
         ' + @Group_Filter + '; 

        DECLARE @ECS CODE_TYPE
        
        INSERT INTO @ECS (CODE)
        SELECT COD_EC FROM #tmpGrp;
        
        exec SP_RISK_FRAUD_LIMIT_CHK @ECS, ' + CAST(@EC_FILTER_TYPE AS VARCHAR) + ', @COD_RULE;
        '

-- SELECT @QUERY

EXEC sp_executesql @QUERY
				  ,N' @COD_RULE INT '
				  ,@COD_RULE = @COD_RULE;

END
ELSE
IF @QUERY_GROUP = ''
BEGIN

SET @QUERY = '
            SELECT RAQ.COD_TRAN
              , RAQ.TRANSACTION_DATE
              , RAQ.AMOUNT
              , RAQ.COD_SITUATION
              , RAQ.COD_ASS_DEPTO_TERMINAL
              , RAQ.COD_EC
              , RAQ.PAN
              , @COD_RULE [COD_RULE]
              , RAQ.CODE
            FROM RISK_ANALYSIS_QUEUE [RAQ]
                  JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
                  JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
            WHERE ' + @QUERY;

-- SELECT @QUERY

EXEC sp_executesql @QUERY
				  ,N' @COD_RULE INT '
				  ,@COD_RULE = @COD_RULE;

END
ELSE
BEGIN

SELECT
	@JClause = SUBSTRING((SELECT
			' AND ' + s.value + ' = ' + REPLACE(REPLACE(REPLACE(s.value, '[RAQ]', '[tgr]'), 'CE', '[tgr]'), '[RD]', '[tgr]') AS [text()]
		FROM STRING_SPLIT(@QUERY_GROUP, ',') s
		FOR XML PATH (''))
	, 5, 1000)

SET @Group_Filter = SUBSTRING(@Group_Filter, 5, LEN(@Group_Filter))

        IF LEN(@Group_Filter) > 0 BEGIN
SET @Group_Filter = ' HAVING ' + @Group_Filter
        END

SET @QUERY = 'SELECT ' + @QUERY_GROUP + '
            INTO #tmpGrp
        FROM RISK_ANALYSIS_QUEUE [RAQ]
            JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
            JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC 
        WHERE ' + @QUERY + '
        GROUP BY ' + @QUERY_GROUP + '
         ' + @Group_Filter + ';
                
        SELECT RAQ.COD_TRAN
              , RAQ.TRANSACTION_DATE
              , RAQ.AMOUNT
              , RAQ.COD_SITUATION
              , RAQ.COD_ASS_DEPTO_TERMINAL
              , RAQ.COD_EC
              , RAQ.PAN
              , @COD_RULE [COD_RULE]
              , RAQ.CODE
            FROM RISK_ANALYSIS_QUEUE [RAQ]
                JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
                JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
                JOIN #tmpGrp tgr ON ' + @JClause + '
            WHERE ' + @QUERY

-- SELECT @QUERY

EXEC sp_executesql @QUERY
				  ,N' @COD_RULE INT '
				  ,@COD_RULE = @COD_RULE;

END
END
GO

IF OBJECT_ID('SP_LS_RISK_FRAUD_RULE') IS NOT NULL
DROP PROCEDURE SP_LS_RISK_FRAUD_RULE
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_RULE
(
    @ACTIVE INT = 1
)
AS BEGIN

SELECT
	COD_RULE
   ,CREATED_AT
   ,DESCRIPTION
   ,ACTIVE
   ,IIF(EXISTS (SELECT
			COD_RULE_DETAIL
		FROM RISK_FRAUD_RULE_DETAIL RFD
		WHERE RFD.COD_RULE = RFR.COD_RULE
		AND RFD.COMPARISON = 'FILTER')
	, 1, 0) HAS_FILTER
FROM RISK_FRAUD_RULE RFR
WHERE ACTIVE = @ACTIVE

END

GO

IF OBJECT_ID('SP_LS_RISK_RULE_DETAIL') IS NOT NULL
DROP PROCEDURE SP_LS_RISK_RULE_DETAIL
GO
CREATE PROCEDURE SP_LS_RISK_RULE_DETAIL
(
    @COD_RULE INT
) AS BEGIN

SELECT
	COD_RULE_DETAIL
   ,COD_FIELD
   ,F1.NAME [F1_NAME]
   ,F1.TYPE [F1_TYPE]
   ,F1.PARTIAL [F1_IS_PARTIAL]
   ,F1.SYSTEM_VALUE [F1_IS_SYTEM]
   ,COMPARISON
   ,AMOUNT
   ,AMOUNT_UNTIL
   ,COD_SITUATION
   ,COD_FIELD_COMPARE
   ,F2.NAME [F2_NAME]
   ,F2.TYPE [F2_TYPE]
   ,F2.PARTIAL [F2_IS_PARTIAL]
   ,F2.SYSTEM_VALUE [F2_IS_SYTEM]
   ,PERCENTAGE
FROM RISK_FRAUD_RULE_DETAIL D
LEFT JOIN RISK_FRAUD_FIELD F1
	ON F1.COD_RISK_FIELD = D.COD_FIELD
LEFT JOIN RISK_FRAUD_FIELD F2
	ON F2.COD_RISK_FIELD = D.COD_FIELD_COMPARE
WHERE COD_RULE = @COD_RULE
ORDER BY D.FIELD_ORDER

END
GO

IF OBJECT_ID('RISK_FRAUD_ALERT') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_ALERT
    (
        COD_FRAUD_ALERT INT NOT NULL PRIMARY KEY IDENTITY,
        COD_TRAN INT NOT NULL  REFERENCES [TRANSACTION](COD_TRAN),
        TRANSACTION_DATE DATETIME NOT NULL,
        AMOUNT DECIMAL(22, 6) NOT NULL,
        COD_SITUATION INT NOT NULL,
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP (COD_ASS_DEPTO_TERMINAL),
        COD_EC INT NOT NULL,
        ACTIVE INT NOT NULL DEFAULT (1),
        PAN VARCHAR(100) NULL,
        CODE VARCHAR(100) NULL,
        COD_USER INT REFERENCES USERS(COD_USER),
        COMMENT VARCHAR(256) NULL,
        [ACTION] VARCHAR(64)
    )
END
GO



IF OBJECT_ID('RISK_FRAUD_ALERT_RULE') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_ALERT_RULE
    (
        COD_FRAUD_ALERT INT NOT NULL REFERENCES RISK_FRAUD_ALERT(COD_FRAUD_ALERT),
        COD_RULE INT NOT NULL REFERENCES RISK_FRAUD_RULE (COD_RULE),
        PRIMARY KEY (COD_FRAUD_ALERT, COD_RULE),
        GROUP_CODE VARCHAR(64) NULL
    )
END
GO
   

IF OBJECT_ID('SP_REG_ALERT_RISK_FRAUD') IS NOT NULL
DROP PROCEDURE SP_REG_ALERT_RISK_FRAUD
GO
IF TYPE_ID('RISK_ALERT_TP') IS NOT NULL
DROP TYPE RISK_ALERT_TP
GO
CREATE TYPE RISK_ALERT_TP AS TABLE
(
    COD_TRAN INT NOT NULL,
    TRANSACTION_DATE DATETIME NOT NULL,
    AMOUNT DECIMAL(22, 6) NOT NULL,
    COD_SITUATION INT NOT NULL,
    COD_ASS_DEPTO_TERMINAL INT NULL,
    COD_EC INT NOT NULL,
    PAN VARCHAR(100) NULL,
    COD_RULE INT NOT NULL,
    GROUP_CODE VARCHAR(64) NULL,
    CODE VARCHAR(100) NULL
)
GO
CREATE PROCEDURE SP_REG_ALERT_RISK_FRAUD
(
    @ALERTS RISK_ALERT_TP READONLY
) AS BEGIN

INSERT INTO RISK_FRAUD_ALERT (COD_TRAN, TRANSACTION_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE)
	SELECT
		A.COD_TRAN
	   ,A.TRANSACTION_DATE
	   ,A.AMOUNT
	   ,A.COD_SITUATION
	   ,A.COD_ASS_DEPTO_TERMINAL
	   ,A.COD_EC
	   ,A.PAN
	   ,CODE
	FROM @ALERTS A
	WHERE (SELECT
			COUNT(*)
		FROM RISK_FRAUD_ALERT RFA1
		WHERE RFA1.COD_TRAN = A.COD_TRAN)
	= 0

INSERT INTO RISK_FRAUD_ALERT_RULE (COD_FRAUD_ALERT, COD_RULE, GROUP_CODE)
	SELECT
		RFA.COD_FRAUD_ALERT
	   ,A.COD_RULE
	   ,A.GROUP_CODE
	FROM @ALERTS A
	JOIN RISK_FRAUD_ALERT RFA
		ON RFA.COD_TRAN = A.COD_TRAN
	WHERE (SELECT
			COUNT(*)
		FROM RISK_FRAUD_ALERT_RULE RFAR
		WHERE RFAR.COD_RULE = A.COD_RULE
		AND RFA.COD_FRAUD_ALERT = RFAR.COD_FRAUD_ALERT)
	= 0

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_LIMIT_CHK') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_LIMIT_CHK
GO
CREATE PROCEDURE SP_RISK_FRAUD_LIMIT_CHK
(
    @ECS CODE_TYPE READONLY,
    @TYPE INT = 1,
    @COD_RULE INT = 1
) AS BEGIN

    DECLARE @COD_EC INT, @TRANS CODE_TYPE;

    DECLARE EC_CURSOR CURSOR FOR SELECT
	CODE
FROM @ECS;

OPEN EC_CURSOR
FETCH NEXT FROM EC_CURSOR INTO @COD_EC;

WHILE @@fetch_status = 0
BEGIN

DECLARE @COD_TRAN INT
	   ,@AMOUNT DECIMAL(22, 6)
	   ,@CUR_TOTAL DECIMAL(22, 6)
	   ,@LIMIT DECIMAL(22, 6)
	   ,@CONTINUE_FETCH INT = 1
	   ,@UP_DATE DATETIME;
DECLARE @START_DATE DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @UP_DATE), 0)

IF @TYPE = 1
BEGIN

SELECT
	@CUR_TOTAL = DAY_TRANSACTED
   ,@LIMIT = CE.LIMIT_TRANSACTION_DIALY
   ,@UP_DATE = LAST_UPDATE
FROM RISK_ANALYSIS_DATA RAD
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RAD.COD_EC = CE.COD_EC
WHERE RAD.COD_EC = @COD_EC

SET @START_DATE = CAST(@UP_DATE AS DATE)
            
        END ELSE BEGIN

SELECT
	@CUR_TOTAL = MONTH_TRANSACTED
   ,@LIMIT = CE.LIMIT_TRANSACTION_MONTHLY
   ,@UP_DATE = LAST_UPDATE
FROM RISK_ANALYSIS_DATA RAD
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RAD.COD_EC = CE.COD_EC
WHERE RAD.COD_EC = @COD_EC

SET @START_DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @UP_DATE), 0)
            
        END

        DECLARE EC_TRANS CURSOR FOR
SELECT
	COD_TRAN
   ,AMOUNT
FROM RISK_ANALYSIS_QUEUE
WHERE COD_EC = @COD_EC
AND COD_SITUATION IN (3, 22)
AND TRANSACTION_DATE BETWEEN @START_DATE AND @UP_DATE
ORDER BY COD_TRAN DESC;

OPEN EC_TRANS
FETCH NEXT FROM EC_TRANS INTO @COD_TRAN, @AMOUNT;

WHILE @@fetch_status = 0
AND @CONTINUE_FETCH = 1
BEGIN

INSERT INTO @TRANS (CODE)
	VALUES (@COD_TRAN)

SET @CUR_TOTAL -= @AMOUNT;

            IF @CUR_TOTAL < @LIMIT SET @CONTINUE_FETCH = 0

            FETCH NEXT FROM EC_TRANS INTO @COD_TRAN, @AMOUNT;

        END
        CLOSE EC_TRANS;
        DEALLOCATE EC_TRANS;

        FETCH NEXT FROM EC_CURSOR INTO @COD_EC;

    END

    CLOSE EC_CURSOR;
    DEALLOCATE EC_CURSOR;

SELECT
	RAQ.COD_TRAN
   ,RAQ.TRANSACTION_DATE
   ,RAQ.AMOUNT
   ,RAQ.COD_SITUATION
   ,RAQ.COD_ASS_DEPTO_TERMINAL
   ,RAQ.COD_EC
   ,RAQ.PAN
   ,@COD_RULE [COD_RULE]
   ,RAQ.CODE
FROM RISK_ANALYSIS_QUEUE [RAQ]
JOIN RISK_ANALYSIS_DATA RD
	ON RAQ.COD_EC = RD.COD_EC
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RD.COD_EC = CE.COD_EC
WHERE RAQ.COD_TRAN IN (SELECT
		CODE
	FROM @TRANS)

END
GO


IF OBJECT_ID('SP_REG_RISK_FRAUD_QUEUE') IS NOT NULL
DROP PROCEDURE SP_REG_RISK_FRAUD_QUEUE
GO
CREATE PROCEDURE SP_REG_RISK_FRAUD_QUEUE
AS BEGIN

    DECLARE @COD_TRAN INT;
    DECLARE @MAX_WINDOW_DAYS INT = 7

    IF ( SELECT
		COUNT(*)
	FROM RISK_ANALYSIS_QUEUE)
= 0
BEGIN

DECLARE @FROM_DATE DATE = DATEADD(DAY, -@MAX_WINDOW_DAYS, GETDATE())
SELECT TOP 1
	@COD_TRAN = (REPORT_TRANSACTIONS_EXP.COD_TRAN - 1)
FROM REPORT_TRANSACTIONS_EXP WITH (NOLOCK)
WHERE TRANSACTION_DATE >= @FROM_DATE

END
ELSE
BEGIN

SELECT TOP 1
	@COD_TRAN = COD_TRAN
FROM RISK_ANALYSIS_QUEUE
ORDER BY COD_TRAN DESC

END

INSERT INTO RISK_ANALYSIS_QUEUE (COD_TRAN, TRANSACTION_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE)
	SELECT
		REPORT_TRANSACTIONS_EXP.COD_TRAN
	   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE
	   ,REPORT_TRANSACTIONS_EXP.AMOUNT
	   ,REPORT_TRANSACTIONS_EXP.COD_SITUATION
	   ,[TRANSACTION].COD_ASS_DEPTO_TERMINAL
	   ,REPORT_TRANSACTIONS_EXP.COD_EC
	   ,REPORT_TRANSACTIONS_EXP.PAN
	   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE
	FROM REPORT_TRANSACTIONS_EXP
	JOIN [TRANSACTION] WITH (NOLOCK)
		ON REPORT_TRANSACTIONS_EXP.COD_TRAN = [TRANSACTION].COD_TRAN
	LEFT JOIN RISK_ANALYSIS_QUEUE
		ON RISK_ANALYSIS_QUEUE.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
	WHERE REPORT_TRANSACTIONS_EXP.COD_TRAN > @COD_TRAN
	AND RISK_ANALYSIS_QUEUE.COD_TRAN IS NULL
--SELECT
--	COD_TRAN
--   ,BRAZILIAN_DATE
--   ,AMOUNT
--   ,COD_SITUATION
--   ,COD_ASS_DEPTO_TERMINAL
--   ,COD_EC
--   ,PAN
--   ,CODE
--FROM [TRANSACTION] WITH (NOLOCK)
--WHERE COD_TRAN > @COD_TRAN

END
GO


IF OBJECT_ID('SP_CLEAN_RISK_FRAUD_QUEUE') IS NOT NULL
DROP PROCEDURE SP_CLEAN_RISK_FRAUD_QUEUE
GO
CREATE PROCEDURE SP_CLEAN_RISK_FRAUD_QUEUE
AS BEGIN
   
    DECLARE @MAX_QUEUE_DAYS INT = 35
    DECLARE @MAX_OLDER_DATE DATE = dbo.FN_FUS_UTF( CAST( DATEADD( DAY, -@MAX_QUEUE_DAYS, GETDATE() ) AS DATE ) )

DELETE FROM RISK_ANALYSIS_QUEUE
WHERE TRANSACTION_DATE < @MAX_OLDER_DATE

END
GO

IF OBJECT_ID('SP_LS_RISK_FRAUD_NOTIFY') IS NOT NULL BEGIN
DROP PROCEDURE SP_LS_RISK_FRAUD_NOTIFY;
END
GO
  
CREATE PROCEDURE SP_LS_RISK_FRAUD_NOTIFY        
(        
    @PAGE INT = 1,        
    @PAGE_SIZE INT = 10,        
    @ACTIVE INT = 1,        
 @INITIAL_DATE DATETIME = NULL,                    
 @FINAL_DATE DATETIME = NULL,      
 @COD_AFF INT = NULL,                    
 @COD_EC INT = NULL,                    
 @NSU VARCHAR(100) = NULL,                    
 @BIN VARCHAR(20) = NULL,            
    @TOTAL INT OUTPUT        
)        
AS BEGIN
  
    
      
        
    DECLARE @OFF_SIZE INT = (@PAGE -1) * @PAGE_SIZE
  
    
      
        
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);

SET @QUERY_BASIS = '       
SELECT   
 COUNT(RFA.COD_FRAUD_ALERT)   
FROM RISK_FRAUD_ALERT RFA       
JOIN COMMERCIAL_ESTABLISHMENT CE   
 on CE.COD_EC = RFA.COD_EC      
JOIN REPORT_TRANSACTIONS_EXP   
 ON REPORT_TRANSACTIONS_EXP.COD_TRAN = RFA.COD_tRAN    
WHERE RFA.ACTIVE = @ACTIVE   
AND REPORT_TRANSACTIONS_EXP.COD_SITUATION IN    
(    
 3,    
 14    
)'
  
    
      
       
      
 IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.CODE = @NSU ');
ELSE
BEGIN

IF (@COD_AFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CE.COD_AFFILIATOR = @COD_AFF ');

IF (@COD_EC IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

IF LEN(@BIN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

IF @INITIAL_DATE IS NOT NULL
	AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');
END

DECLARE @rowcount TABLE (
	[VALUE] INT
);
INSERT INTO @rowcount
EXEC [sp_executesql] @QUERY_BASIS
					,N'                                                         
        @ACTIVE INT,                                                 
        @INITIAL_DATE DATETIME,                                                 
        @FINAL_DATE DATETIME,      
  @COD_AFF INT,                    
  @COD_EC INT,                    
  @NSU VARCHAR(100),                    
  @BIN VARCHAR(20)      
        '
					,@ACTIVE = @ACTIVE
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@COD_AFF = @COD_AFF
					,@COD_EC = @COD_EC
					,@NSU = @NSU
					,@BIN = @BIN

SELECT
	@TOTAL = [VALUE]
FROM @rowcount;

SET @QUERY_BASIS = '       
    SELECT RFA.COD_FRAUD_ALERT,        
           RFA.COD_TRAN,        
           RFA.TRANSACTION_DATE,        
           RFA.AMOUNT,        
           COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME],        
           E.SERIAL,        
           CE.TRADING_NAME [EC_NAME],        
           CE.CPF_CNPJ,        
           RFA.PAN,        
           SUBSTRING((        
                         SELECT (''; '' + RFAR.GROUP_CODE) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) AS [GROUP_CODE],        
           SUBSTRING((        
                         SELECT ('', '' + RFR.DESCRIPTION) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) [Rules],        
           A.NAME [Affiliated],        
           RFA.CODE [NSU]        
    FROM RISK_FRAUD_ALERT RFA        
   JOIN REPORT_TRANSACTIONS_EXP ON REPORT_TRANSACTIONS_EXP.COD_TRAN = RFA.COD_tRAN    
             JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION        
             LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION        
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL        
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP        
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC        
             LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = CE.COD_AFFILIATOR        
  
      
    WHERE RFA.ACTIVE = @ACTIVE    
 AND REPORT_TRANSACTIONS_EXP.COD_SITUATION IN    
 (    
 3,    
 14    
 )    
 '
  
    
      
      
 IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.CODE = @NSU ');
ELSE
BEGIN

IF (@COD_EC IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

IF (@COD_AFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND A.COD_AFFILIATOR = @COD_AFF ');

IF LEN(@BIN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

IF @INITIAL_DATE IS NOT NULL
	AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');

END

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY COD_TRAN DESC       
 OFFSET @OFF_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY ');

EXEC [sp_executesql] @QUERY_BASIS
					,N'                                                         
  @PAGE INT,        
  @PAGE_SIZE INT,       
        @ACTIVE INT,                                                 
        @INITIAL_DATE DATETIME,                                                 
        @FINAL_DATE DATETIME,      
  @COD_AFF INT,                    
  @COD_EC INT,                    
  @NSU VARCHAR(100),                    
  @BIN VARCHAR(20),      
  @OFF_SIZE INT      
        '
					,@PAGE = @PAGE
					,@PAGE_SIZE = @PAGE_SIZE
					,@ACTIVE = @ACTIVE
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@COD_AFF = @COD_AFF
					,@COD_EC = @COD_EC
					,@NSU = @NSU
					,@BIN = @BIN
					,@OFF_SIZE = @OFF_SIZE

END
GO


IF OBJECT_ID('SP_RISK_FRAUD_ALERT_INFO') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_ALERT_INFO
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_INFO --3915     
(        
    @COD_FRAUD_ALERT INT        
) AS BEGIN

SELECT
	COD_FRAUD_ALERT
   ,RFA.COD_TRAN
   ,RFA.TRANSACTION_DATE
   ,RFA.AMOUNT
   ,COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME]
   ,E.SERIAL
   ,CE.NAME [EC_NAME]
   ,CE.CPF_CNPJ AS CPF_CNPJ
   ,RFA.PAN
   ,SUBSTRING((SELECT
			('; ' + RFAR.GROUP_CODE) AS [text()]
		FROM RISK_FRAUD_ALERT_RULE RFAR
		WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
		FOR XML PATH (''))
	, 3, 1000) AS [GROUP_CODE]
   ,RTE.TRANSACTION_CODE [TRAN_CODE]
   ,RTE.PLOTS
   ,RTE.TRANSACTION_TYPE AS TTYPE
   ,RTE.BRAND
   ,A.NAME [Afiliator]
   ,A.CPF_CNPJ [AFF_DOC]
   ,ST.DESCRIPTION [SOURCE]
   ,RTE.COMMENT
   ,RTE.CARD_NAME
   ,RTE.CARD_HOLDER_DOC
   ,RTE.CUSTOMER_EMAIL
   ,RTE.CUSTOMER_IDENTIFICATION
   ,RTE.NAME_ACQUIRER [ACQ_NAME]
   ,RTE.TRANSACTION_CODE [NSU]
   ,RTE.TRAN_DATA_EXT_VALUE
   ,RTE.LINK_PAYMENT_SERVICE
   ,RTE.TERMINAL_VERSION
   ,RTE.LOGICAL_NUMBER_ACQ
   ,RFA.COD_EC
   ,IIF(RFA.COD_SITUATION = 3, IIF((SELECT
			COUNT(*)
		FROM TRANSACTION_TITLES TT WITH (NOLOCK)
		--COD_TRAN, COD_EC, PLOT, COD_SITUATION  
		WHERE TT.COD_TRAN = RFA.COD_TRAN
		AND TT.COD_EC = RFA.COD_EC
		AND TT.PLOT = RTE.PLOTS
		AND TT.COD_SITUATION = 17)
	>= 1, 0, 1), 0) [CANCELABLE]
   ,IIF(RFA.COD_SITUATION = 3, IIF((SELECT
			COUNT(*)
		FROM TRANSACTION_TITLES TT WITH (NOLOCK)
		WHERE TT.COD_TRAN = RFA.COD_TRAN
		AND TT.COD_EC = RFA.COD_EC
		AND TT.PLOT = RTE.PLOTS
		AND TT.COD_SITUATION != 4)
	>= 1, 0, 1), 0) [BLOCKABLE]
   ,SEG.NAME [SEGMENT]
   ,RFA.ACTION
FROM RISK_FRAUD_ALERT RFA WITH (NOLOCK)
JOIN REPORT_TRANSACTIONS_EXP RTE WITH (NOLOCK)
	ON RTE.COD_TRAN = RFA.COD_TRAN
LEFT JOIN TRADUCTION_SITUATION TS WITH (NOLOCK)
	ON RFA.COD_SITUATION = TS.COD_SITUATION
LEFT JOIN SITUATION S WITH (NOLOCK)
	ON S.COD_SITUATION = RFA.COD_SITUATION
LEFT JOIN ASS_DEPTO_EQUIP ADE WITH (NOLOCK)
	ON RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
LEFT JOIN EQUIPMENT E WITH (NOLOCK)
	ON ADE.COD_EQUIP = E.COD_EQUIP
LEFT JOIN COMMERCIAL_ESTABLISHMENT CE WITH (NOLOCK)
	ON CE.COD_EC = RTE.COD_EC
LEFT JOIN AFFILIATOR A WITH (NOLOCK)
	ON RTE.COD_AFFILIATOR = A.COD_AFFILIATOR
LEFT JOIN SOURCE_TRANSACTION ST WITH (NOLOCK)
	ON ST.COD_SOURCE_TRAN = RTE.COD_SOURCE_TRAN
LEFT JOIN SEGMENTS SEG WITH (NOLOCK)
	ON SEG.COD_SEG = CE.COD_SEG
WHERE RFA.COD_FRAUD_ALERT = @COD_FRAUD_ALERT
AND RTE.COD_SITUATION IN
(
3,
14
)
END
GO


IF OBJECT_ID('SP_RISK_FRAUD_ALERT_RULES') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_ALERT_RULES
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_RULES
(
    @COD_FRAUD_ALERT INT
) AS BEGIN
SELECT
	RFR.DESCRIPTION
   ,'Transa�ao onde ' + SUBSTRING((SELECT
			(
			' e ' +
			IIF(RFD.COMPARISON = 'GROUP', 'Agrupar por ', IIF(F1.TYPE = 'GROUPING', 'Quantidade por ', '')) +
			IIF(F1.TYPE != 'FILTER', F1.DESCRIPTION, REPLACE(F1.DESCRIPTION, 'x', IIF(RFD.AMOUNT IS NOT NULL, IIF(F1.TYPE = 'DECIMAL', CAST(RFD.AMOUNT AS VARCHAR), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)), ''))) +
			IIF(RFD.COMPARISON = 'BETWEEN', ' ENTRE ' + IIF(F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)) + ' E ' + IIF(F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT_UNTIL, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT_UNTIL AS INT) AS VARCHAR)), '') +
			IIF(RFD.COMPARISON != 'BETWEEN' AND RFD.COMPARISON != 'GROUP' AND RFD.COD_FIELD_COMPARE IS NULL AND F1.TYPE != 'FILTER' AND RFD.AMOUNT IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF(F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)), '') +
			IIF(RFD.COD_SITUATION IS NOT NULL, ' ' + COALESCE(TS.SITUATION_TR, S.NAME), '') +
			IIF(RFD.COD_FIELD_COMPARE IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF(RFD.PERCENTAGE IS NOT NULL, CAST(CAST(RFD.PERCENTAGE AS INT) AS VARCHAR) + '% do ', '') + F2.DESCRIPTION, '')
			) AS [text()]
		FROM RISK_FRAUD_RULE_DETAIL RFD
		JOIN RISK_FRAUD_FIELD F1
			ON RFD.COD_FIELD = F1.COD_RISK_FIELD
		LEFT JOIN RISK_FRAUD_FIELD F2
			ON F2.COD_RISK_FIELD = RFD.COD_FIELD_COMPARE
		LEFT JOIN SITUATION S
			ON RFD.COD_SITUATION = S.COD_SITUATION
		LEFT JOIN TRADUCTION_SITUATION TS
			ON RFD.COD_SITUATION = TS.COD_SITUATION
		WHERE COD_RULE = RFAR.COD_RULE
		FOR XML PATH (''))
	, 4, 1000) [DETAIL]
FROM RISK_FRAUD_ALERT_RULE RFAR
JOIN RISK_FRAUD_RULE RFR
	ON RFAR.COD_RULE = RFR.COD_RULE
WHERE RFAR.COD_FRAUD_ALERT = @COD_FRAUD_ALERT
END
GO



IF OBJECT_ID('SP_LS_RISK_FRAUD_GROUP_DETAIL') IS NOT NULL
DROP PROCEDURE SP_LS_RISK_FRAUD_GROUP_DETAIL
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_GROUP_DETAIL
(
    @GROUP_CODE VARCHAR(64)
)
AS BEGIN

SELECT
	COD_FRAUD_ALERT
   ,COD_TRAN
   ,TRANSACTION_DATE
   ,AMOUNT
   ,S.NAME [SIT_NAME]
   ,E.SERIAL
   ,CE.NAME [EC_NAME]
   ,CE.CPF_CNPJ
   ,PAN
   ,@GROUP_CODE [GROUP_CODE]
   ,SUBSTRING((SELECT
			(', ' + RFR.DESCRIPTION) AS [text()]
		FROM RISK_FRAUD_ALERT_RULE RFAR
		JOIN RISK_FRAUD_RULE RFR
			ON RFR.COD_RULE = RFAR.COD_RULE
		WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
		FOR XML PATH (''))
	, 3, 1000) [Rules]
FROM RISK_FRAUD_ALERT RFA
JOIN SITUATION S
	ON RFA.COD_SITUATION = S.COD_SITUATION
LEFT JOIN ASS_DEPTO_EQUIP ADE
	ON RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
LEFT JOIN EQUIPMENT E
	ON ADE.COD_EQUIP = E.COD_EQUIP
LEFT JOIN COMMERCIAL_ESTABLISHMENT CE
	ON CE.COD_EC = RFA.COD_EC
WHERE (SELECT
		COUNT(*)
	FROM RISK_FRAUD_ALERT_RULE RFAR
	WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
	AND RFAR.GROUP_CODE = @GROUP_CODE)
> 0
ORDER BY COD_TRAN DESC
END
GO

IF OBJECT_ID('SP_CLEAN_RISK_ALERT_HIST') IS NOT NULL
DROP PROCEDURE SP_CLEAN_RISK_ALERT_HIST
GO
CREATE PROCEDURE SP_CLEAN_RISK_ALERT_HIST
AS BEGIN

DELETE FROM RISK_FRAUD_ALERT
WHERE ACTIVE = 0
	AND DATEDIFF(MONTH, TRANSACTION_DATE, GETDATE()) > 6

END
GO

IF OBJECT_ID('RISK_ANALYSIS_DATA_EC') IS NOT NULL
DROP PROCEDURE RISK_ANALYSIS_DATA_EC
GO
CREATE PROCEDURE RISK_ANALYSIS_DATA_EC
(
    @COD_EC INT
) AS BEGIN

SELECT
	RAD.COD_EC
   ,RAD.AVG_THIRTY_DAYS
   ,RAD.AVG_SEVEN_DAYS
   ,RAD.AVG_TICKET_MONTH
   ,RAD.AVG_TICKET_WEEK
   ,RAD.AVG_TICKET_DAY
   ,RAD.MONTH_TRANSACTED
   ,RAD.DAY_TRANSACTED
   ,RAD.WEEK_TRANSACTED
   ,RAD.LAST_UPDATE
   ,CE.LIMIT_TRANSACTION_MONTHLY
   ,CE.LIMIT_TRANSACTION_DIALY
FROM RISK_ANALYSIS_DATA RAD
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RAD.COD_EC = CE.COD_EC
WHERE RAD.COD_EC = @COD_EC

END
GO

IF OBJECT_ID('SP_DISMISS_RISK_FRAUD_ALERT') IS NOT NULL
DROP PROCEDURE SP_DISMISS_RISK_FRAUD_ALERT
GO
CREATE PROCEDURE SP_DISMISS_RISK_FRAUD_ALERT
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256)
) AS BEGIN

UPDATE RISK_FRAUD_ALERT
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,COMMENT = @COMMENT
   ,[ACTION] = 'CLEARED'
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_CANCEL_TRAN') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_CANCEL_TRAN
GO
CREATE PROCEDURE SP_RISK_FRAUD_CANCEL_TRAN
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256)
) AS BEGIN

    DECLARE @SITUATIONS TABLE ( SITNAME VARCHAR(100) NULL, COD_SIT INT NULL );
    DECLARE @COD_TRAN INT, @CODE_TRAN VARCHAR(200), @CANCELED VARCHAR(100);

SELECT
	@COD_TRAN = RFA.COD_TRAN
   ,@CODE_TRAN = RFA.CODE
FROM RISK_FRAUD_ALERT RFA
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT;

INSERT INTO @SITUATIONS (SITNAME, COD_SIT)
	SELECT DISTINCT
		S.NAME
	   ,S.COD_SITUATION
	FROM TRANSACTION_TITLES TT WITH (NOLOCK)
	JOIN SITUATION S
		ON TT.COD_SITUATION = S.COD_SITUATION
	WHERE TT.COD_SITUATION = @COD_TRAN;



IF (SELECT
			COUNT(*)
		FROM @SITUATIONS S
		WHERE S.SITNAME = 'PAID')
	>= 0
BEGIN

SET @CANCELED = 'CANCELED PARTIAL'

    END ELSE IF ( SELECT
		COUNT(*)
	FROM @SITUATIONS S
	WHERE S.SITNAME = 'AWAITING PAYMENT')
>= 0
BEGIN

SET @CANCELED = 'CANCELED'

    END

    IF @CANCELED IS NOT NULL BEGIN

EXEC SP_UP_TRANSACTION @CODE_TRAN = @CODE_TRAN
					  ,@SITUATION = @CANCELED
					  ,@DESCRIPTION = @COMMENT
					  ,@CURRENCY = '786'
					  ,@COD_USER = @COD_USER

UPDATE RISK_FRAUD_ALERT
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,COMMENT = @COMMENT
   ,[ACTION] = @CANCELED
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_ALERT_EXPORT') IS NOT NULL BEGIN
DROP PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT;
END
GO
  
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT        
(        
    @ACTIVE INT = 1,      
 @INITIAL_DATE DATETIME = NULL,                    
 @FINAL_DATE DATETIME = NULL,      
 @COD_AFF INT = NULL,                    
 @COD_EC INT = NULL,                    
 @NSU VARCHAR(100) = NULL,                    
 @BIN VARCHAR(20) = NULL            
      
) AS BEGIN
  
    
      
        
        
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
SET NOCOUNT ON;
SET ARITHABORT ON;
SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);

SET @QUERY_BASIS = '       
 SELECT COD_FRAUD_ALERT,        
           RFA.COD_TRAN,        
           RFA.TRANSACTION_DATE,        
           RFA.AMOUNT,        
           COALESCE(RTE.SITUATION, S.NAME) [SIT_NAME],        
           RTE.SERIAL_EQUIP AS [SERIAL],        
           CE.NAME [EC_NAME],        
           CE.CPF_CNPJ,        
           RFA.PAN,        
           SUBSTRING((        
                         SELECT (''; '' + RFAR.GROUP_CODE) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) AS [GROUP_CODE],        
           RTE.TRANSACTION_CODE [TRAN_CODE],        
           RTE.PLOTS,        
           RTE.TRANSACTION_TYPE [TTYPE],        
           RTE.BRAND,        
           A.NAME [Afiliator],        
           A.CPF_CNPJ [AFF_DOC],        
           ST.DESCRIPTION [SOURCE],        
           RTE.COMMENT,        
           RTE.CARD_NAME,        
           RTE.CARD_HOLDER_DOC,        
           RTE.CUSTOMER_EMAIL,        
           RTE.CUSTOMER_IDENTIFICATION,        
           RTE.NAME_ACQUIRER [ACQ_NAME],        
           RTE.TRANSACTION_CODE [NSU],        
           RTE.TRAN_DATA_EXT_VALUE,        
           RTE.LINK_PAYMENT_SERVICE,        
           RTE.TERMINAL_VERSION,        
           RTe.LOGICAL_NUMBER_ACQ,        
           RFA.COD_EC,        
           SEG.NAME [SEGMENT],        
           RFA.ACTION,        
           RAD.AVG_THIRTY_DAYS,        
           RAD.AVG_SEVEN_DAYS,        
           RAD.AVG_TICKET_MONTH,        
           RAD.AVG_TICKET_WEEK,        
           RAD.MONTH_TRANSACTED,        
           RAD.DAY_TRANSACTED,        
           CE.LIMIT_TRANSACTION_MONTHLY,        
           CE.LIMIT_TRANSACTION_DIALY,        
           SUBSTRING((        
                         SELECT ('', '' + RFR.DESCRIPTION) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) [Rules]        
    FROM RISK_FRAUD_ALERT RFA        
   JOIN REPORT_TRANSACTIONS_EXP RTE ON RFA.COD_TRAN = RTE.COD_TRAN      
            JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION        
            LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION        
            LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL        
            LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP        
            LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC        
            LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = CE.COD_AFFILIATOR                           
            LEFT JOIN SOURCE_TRANSACTION ST ON ST.COD_SOURCE_TRAN = RTE.COD_SOURCE_TRAN        
            LEFT JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG        
            LEFT JOIN RISK_ANALYSIS_DATA RAD ON RAD.COD_EC = RFA.COD_EC       
    WHERE RFA.ACTIVE = @ACTIVE  
 AND RTE.COD_SITUATION IN (3, 14)'
  
    
      
      
 IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RTE.TRANSACTION_CODE = @NSU ');
ELSE
BEGIN

IF (@COD_EC IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

IF (@COD_AFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND A.COD_AFFILIATOR = @COD_AFF ');

IF LEN(@BIN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

IF @INITIAL_DATE IS NOT NULL
	AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');

END

EXEC [sp_executesql] @QUERY_BASIS
					,N'                                                         
        @ACTIVE INT,                                      
        @INITIAL_DATE DATETIME,                                                 
        @FINAL_DATE DATETIME,      
  @COD_AFF INT,                    
  @COD_EC INT,                    
  @NSU VARCHAR(100),                    
  @BIN VARCHAR(20)          
        '
					,@ACTIVE = @ACTIVE
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@COD_AFF = @COD_AFF
					,@COD_EC = @COD_EC
					,@NSU = @NSU
					,@BIN = @BIN
END

GO

IF OBJECT_ID('SP_RISK_FRAUD_UPDATE_TRAN') IS NOT NULL DROP PROCEDURE SP_RISK_FRAUD_UPDATE_TRAN
GO
CREATE PROCEDURE SP_RISK_FRAUD_UPDATE_TRAN  
(  
    @COD_FRAUD_ALERT INT,  
    @COD_USER INT,  
    @COMMENT VARCHAR(256),  
 @ACTION VARCHAR(50) -- ACTIONS: BLOCK, CANCEL  
) AS BEGIN
  
  
    DECLARE @SITUATIONS TABLE ( SITNAME VARCHAR(100) NULL, COD_SIT INT NULL );
  
    DECLARE @COD_TRAN INT, @CODE_TRAN VARCHAR(200), @NEW_SITUATION VARCHAR(100);

SELECT
	@COD_TRAN = RFA.COD_TRAN
   ,@CODE_TRAN = RFA.CODE
FROM RISK_FRAUD_ALERT RFA
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT;

INSERT INTO @SITUATIONS (SITNAME, COD_SIT)
	SELECT DISTINCT
		S.[NAME]
	   ,S.COD_SITUATION
	FROM TRANSACTION_TITLES TT
	JOIN SITUATION S
		ON TT.COD_SITUATION = S.COD_SITUATION
	WHERE TT.COD_TRAN = @COD_TRAN;

IF (@ACTION = 'CANCEL'
	AND (SELECT
			COUNT(*)
		FROM @SITUATIONS S
		WHERE S.SITNAME = 'PAID')
	> 0)
BEGIN
SET @NEW_SITUATION = 'CANCELED PARTIAL'
  
    END   
 ELSE   
 IF (@ACTION = 'CANCEL' AND ( SELECT
		COUNT(*)
	FROM @SITUATIONS S
	WHERE S.SITNAME = 'AWAITING PAYMENT')
> 0)
BEGIN
SET @NEW_SITUATION = 'CANCELED'
  
    END  
 ELSE  
 IF (@ACTION = 'BLOCK' AND ( SELECT
		COUNT(*)
	FROM @SITUATIONS S
	WHERE S.SITNAME != 'AWAITING PAYMENT')
= 0)
BEGIN
SET @NEW_SITUATION = 'BLOCKED'
  
 END
  
  
    IF @NEW_SITUATION IS NOT NULL BEGIN

EXEC SP_UP_TRANSACTION @CODE_TRAN = @CODE_TRAN
					  ,@SITUATION = @NEW_SITUATION
					  ,@DESCRIPTION = @COMMENT
					  ,@CURRENCY = '786'
					  ,@COD_USER = @COD_USER

UPDATE RISK_FRAUD_ALERT
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,COMMENT = @COMMENT
   ,[ACTION] = @NEW_SITUATION
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END

END

--ET-1377