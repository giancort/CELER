--ST-2220


GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_MODEL'
	AND object_id = OBJECT_ID(N'ROUTE_ACQUIRER_DEFAULT'))
BEGIN

ALTER TABLE ROUTE_ACQUIRER_DEFAULT ADD COD_MODEL INT

END

GO

DECLARE @COD_MODEL_GLOBAL INT;
DECLARE @COD_MODEL_UP INT;
DECLARE @COD_AC_GLOBAL INT;

SET @COD_AC_GLOBAL = (SELECT COD_AC FROM ACQUIRER WHERE ACTIVE = 1 AND [NAME]='GLOBALPAYMENTS')

SET @COD_MODEL_GLOBAL = (SELECT COD_MODEL FROM EQUIPMENT_MODEL WHERE CODIGO = 'D150GLOBAL');

SELECT 
COD_USER,
ACTIVE,
CONF_TYPE,
COD_BRAND,
@COD_AC_GLOBAL AS COD_AC,
COD_SOURCE_TRAN
INTO #TEMP_ROUTE_GLOBAL
FROM ROUTE_ACQUIRER_DEFAULT
WHERE COD_AC = 10

IF (SELECT COUNT(*) FROM ROUTE_ACQUIRER_DEFAULT WHERE COD_MODEL = @COD_MODEL_GLOBAL) = 0
INSERT INTO ROUTE_ACQUIRER_DEFAULT 
(
COD_USER,
ACTIVE,
CONF_TYPE,
COD_BRAND,
COD_AC,
COD_SOURCE_TRAN,
COD_MODEL
)
SELECT 
COD_USER,
ACTIVE,
CONF_TYPE,
COD_BRAND,
COD_AC,
COD_SOURCE_TRAN,
@COD_MODEL_GLOBAL AS COD_MODEL
FROM #TEMP_ROUTE_GLOBAL


SELECT
COD_MODEL 
INTO #MODEL
FROM EQUIPMENT_MODEL WHERE ONLINE IS NULL AND CODIGO <> 'D150GLOBAL'


SELECT 
COD_USER,
ACTIVE,
CONF_TYPE,
COD_BRAND,
COD_AC,
COD_SOURCE_TRAN
INTO #TEMP_ROUTE
FROM ROUTE_ACQUIRER_DEFAULT WHERE COD_MODEL IS NULL


SET @COD_MODEL_UP = (SELECT TOP 1 COD_MODEL
FROM #MODEL);

UPDATE ROUTE_ACQUIRER_DEFAULT SET COD_MODEL = @COD_MODEL_UP WHERE COD_MODEL IS NULL

DELETE FROM #MODEL WHERE COD_MODEL = @COD_MODEL_UP;

WHILE (SELECT COUNT(*) FROM #MODEL) > 0
BEGIN

SELECT TOP 1 COD_MODEL
INTO #TEMP_INSERT
FROM #MODEL

IF (SELECT COUNT(*) FROM ROUTE_ACQUIRER_DEFAULT WHERE COD_MODEL= (SELECT COD_MODEL FROM #TEMP_INSERT))  = 0
INSERT INTO ROUTE_ACQUIRER_DEFAULT 
(
COD_USER,
ACTIVE,
CONF_TYPE,
COD_BRAND,
COD_AC,
COD_SOURCE_TRAN,
COD_MODEL
)
SELECT 
COD_USER,
ACTIVE,
CONF_TYPE,
COD_BRAND,
COD_AC,
COD_SOURCE_TRAN,
(SELECT COD_MODEL FROM #TEMP_INSERT) AS COD_MODEL
FROM #TEMP_ROUTE


DELETE FROM #MODEL WHERE COD_MODEL = (SELECT COD_MODEL FROM #TEMP_INSERT)

DROP TABLE #TEMP_INSERT


END 



DROP TABLE #TEMP_ROUTE
DROP TABLE #MODEL
DROP TABLE #TEMP_ROUTE_GLOBAL


GO

IF OBJECT_ID('SP_REG_ASS_TID_EQUIP_EC') IS NOT NULL
DROP PROCEDURE [SP_REG_ASS_TID_EQUIP_EC]

GO
CREATE PROCEDURE [dbo].[SP_REG_ASS_TID_EQUIP_EC]            
/*----------------------------------------------------------------------------------------                          
Procedure Name: [SP_REG_ASS_TID_EQUIP_EC]                          
Project.......: TKPP                          
-------------------------------------------------------------------------------------------                          
Author                            VERSION        Date                          Description                          
------------------------------------------  ------------------------------------------------                          
Elir Ribeiro                       v1          22/08/2018                       CREATION                          
Caike Uch�a                        v2          01/11/2019                        UPDATE        
Caike Uch�a                        v3          16/01/2020                   inserir MCC padr�o para PF       
Caike Uch�a                        v6          10/08/2020              Retirar Trava equip Bluetooth  
Caike Uch�a                        v7          17/06/2021              add valid global e add COD_USER
 ------------------------------------------------------------------------------------------*/             
(            
 @COD_EQUIP int,            
 @COD_AC int,            
 @COD_EC int,            
 @COD_COMP int,
 @COD_USER INT
)            
AS            
  DECLARE @TID varchar(100);      
          
            
  DECLARE @TIDAT varchar(100);      
          
            
  DECLARE @NAME varchar(100);      
          
            
  DECLARE @INSIDE int;      
          
            
  DECLARE @TYPE_MODEL varchar(100);      
          
            
  DECLARE @AVAILABLE int;      
          
            
  DECLARE @NAME_AC varchar(20);      
   
  DECLARE @MODEL VARCHAR(100);
  
  DECLARE @COD_MODEL INT;
        
          
  BEGIN      
      
SET @NAME_AC = (SELECT      
  [GROUP]      
 FROM ACQUIRER      
 WHERE COD_AC = @COD_AC)      
      
SELECT      
 @TYPE_MODEL = MODEL_GROUP.CODE,      
 @MODEL = CODIGO,
 @COD_MODEL= EQUIPMENT.COD_MODEL
FROM EQUIPMENT      
INNER JOIN EQUIPMENT_MODEL      
 ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL      
INNER JOIN MODEL_GROUP      
 ON MODEL_GROUP.COD_MODEL_GROUP = EQUIPMENT_MODEL.COD_MODEL_GROUP      
WHERE COD_EQUIP = @COD_EQUIP      
      
IF @TYPE_MODEL <> 'ONLINE'      
BEGIN      
SET @TYPE_MODEL = 'PRESENCIAL';      
          
          
IF @NAME_AC = UPPER('PagSeguro') AND @MODEL <> 'D150GLOBAL' --PAGSEGURO                                  
BEGIN      
      
-- SELECIONO O AC PELO SEGMENTO            
SELECT      
 @COD_AC =      
 (CASE      
  WHEN TYPE_ESTAB.CODE = 'PF' THEN 10      
  ELSE ACQUIRER.COD_AC      
 END)      
FROM COMMERCIAL_ESTABLISHMENT      
JOIN SEGMENTS      
 ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG      
JOIN SEGMENTS_GROUP      
 ON SEGMENTS_GROUP.COD_SEG_GROUP = SEGMENTS.COD_SEG_GROUP      
JOIN ACQUIRER      
 ON ACQUIRER.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP      
  and ACQUIRER.[GROUP] = 'PAGSEGURO'    
INNER JOIN TYPE_ESTAB      
 ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB      
WHERE COD_EC = @COD_EC;      
      
      
SELECT TOP 1      
 @TID = CODE      
FROM DATA_EQUIPMENT_AC      
WHERE COD_EQUIP = @COD_EQUIP      
AND COD_AC = @COD_AC      
AND ACTIVE = 1;      
      
-- Verifica se tem TID para Pagseguro          
IF (SELECT      
   COUNT(*)      
  FROM [dbo].[DATA_EQUIPMENT_AC]      
  WHERE DATA_EQUIPMENT_AC.COD_EQUIP = @COD_EQUIP      
  AND DATA_EQUIPMENT_AC.COD_AC = @COD_AC      
  AND ACTIVE = 1      
  AND CODE = @TID)      
 = 0      
BEGIN      
      
SELECT TOP 1      
 @TID = TID      
   ,@NAME = [NAME]      
   ,@INSIDE = COD_DATA_EQUIP      
FROM DATA_TID_AVAILABLE_EC      
WHERE COD_AC = @COD_AC      
AND TYPE_KEY_AC = @TYPE_MODEL      
AND AVAILABLE = 1      
AND ACTIVE = 1      
      
IF @TID IS NOT NULL      
BEGIN      
--THROW 61042, 'TID NOT AVAILABLE', 1;          
      
INSERT INTO [dbo].[DATA_EQUIPMENT_AC] ([CREATED_AT]      
, [COD_EQUIP]      
, [COD_COMP]      
, [COD_AC]      
, [NAME]      
, [CODE]      
, [MODIFY_DATE]      
, [ACTIVE])      
 VALUES (GETDATE(), @COD_EQUIP, @COD_COMP, @COD_AC, @NAME, @TID, NULL, 1);      
      
IF @@rowcount < 1      
THROW 60000, 'COULD NOT REGISTER TID EQUIPMENT', 1;      
      
UPDATE DATA_TID_AVAILABLE_EC      
SET AVAILABLE = 0      
WHERE COD_DATA_EQUIP = @INSIDE;      
      
IF @@rowcount < 1      
THROW 60001, 'COULD UPDATE TID EQUIPMENT AVAILABLE', 1;      
      
END      
ELSE      
SELECT      
 'TID N�O DISPON�VEL PARA ASSOCIA��O' AS [MESSAGE];      
      
END      

      
END 

ELSE IF @MODEL = 'D150GLOBAL'
BEGIN     


IF (SELECT 
COUNT(*)
FROM COMMERCIAL_ESTABLISHMENT
JOIN ACQUIRER_KEYS_CREDENTIALS
ON ACQUIRER_KEYS_CREDENTIALS.CODE_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND ACQUIRER_KEYS_CREDENTIALS.COD_AC= 27
AND ACQUIRER_KEYS_CREDENTIALS.ACTIVE=1
AND ACQUIRER_KEYS_CREDENTIALS.[NAME] = 'MID'
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC) = 0 

THROW 60086, 'THERE IS NO KEY FOR THE GLOBAL ACQUIRER', 1;      
 

 IF (SELECT      
   COUNT(*)      
  FROM ROUTE_ACQUIRER      
  WHERE COD_EQUIP = @COD_EQUIP      
  AND ACTIVE = 1)      
 = 0      
      
-- Insere uma rota padr�o para o Equipamento              
INSERT INTO ROUTE_ACQUIRER (COD_USER, COD_EQUIP, ACTIVE, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)      
 SELECT      
     @COD_USER      
    ,@COD_EQUIP    
    ,1      
    ,CONF_TYPE      
    ,COD_BRAND      
    ,ACQUIRER.COD_AC      
    ,COD_SOURCE_TRAN      
 FROM ROUTE_ACQUIRER_DEFAULT 
 JOIN ACQUIRER 
 ON ACQUIRER.COD_AC = ROUTE_ACQUIRER_DEFAULT.COD_AC
 WHERE ACQUIRER.[GROUP] = 'GlobalPayments'
 AND ACQUIRER.ACTIVE = 1
 AND ROUTE_ACQUIRER_DEFAULT.COD_MODEL = @COD_MODEL     



END
ELSE -- DIFERENTE DE PAGSEGURO                                   
BEGIN      
      
IF (SELECT      
   COUNT(*)      
  FROM [dbo].[DATA_EQUIPMENT_AC]      
  WHERE DATA_EQUIPMENT_AC.COD_EQUIP = @COD_EQUIP      
  AND DATA_EQUIPMENT_AC.COD_AC = @COD_AC      
  AND ACTIVE = 1)      
 > 0      
THROW 61040, 'EQUIPMENT DATA ALREADY REGISTERED FOR THIS ACQUIRER', 1      
      
SELECT TOP 1      
 @TID = TID      
   ,@NAME = [NAME]      
   ,@INSIDE = COD_DATA_EQUIP      
FROM DATA_TID_AVAILABLE_EC      
WHERE COD_EC = @COD_EC      
AND COD_AC = @COD_AC      
AND AVAILABLE = 1      
AND TYPE_KEY_AC = @TYPE_MODEL      
AND ACTIVE = 1      
      
IF @TID IS NULL      
THROW 61042, 'TID NOT AVAILABLE', 1;      
      
INSERT INTO [dbo].[DATA_EQUIPMENT_AC] ([CREATED_AT]      
, [COD_EQUIP]      
, [COD_COMP]      
, [COD_AC]      
, [NAME]      
, [CODE]      
, [MODIFY_DATE]      
, [ACTIVE])      
 VALUES (GETDATE(), @COD_EQUIP, @COD_COMP, @COD_AC, @NAME, @TID, NULL, 1)      
      
IF @@rowcount < 1      
THROW 60000, 'COULD NOT REGISTER TID EQUIPMENT', 1;      
      
UPDATE DATA_TID_AVAILABLE_EC      
SET AVAILABLE = 0      
WHERE COD_DATA_EQUIP = @INSIDE;      
      
IF @@rowcount < 1      
      
THROW 60001, 'COULD UPDATE TID EQUIPMENT AVAILABLE', 1;      
      
END      
      
END      
      
END;


GO

IF OBJECT_ID('SP_REG_ASS_TID_EQUIP_EC_AFF') IS NOT NULL
DROP PROCEDURE [SP_REG_ASS_TID_EQUIP_EC_AFF]

GO
CREATE  PROCEDURE [dbo].[SP_REG_ASS_TID_EQUIP_EC_AFF]                
/*----------------------------------------------------------------------------------------                           
Procedure Name: [SP_REG_ASS_TID_EQUIP_EC_AFF]                              
Project.......: TKPP                              
-------------------------------------------------------------------------------------------                              
Author                            VERSION        Date                          Description                              
------------------------------------------------------------------------------------------                              
Elir Ribeiro                       v1         22/08/2018                       CREATION                       
Caike Uch�a                        v2         24/09/2019            ADAPTA��O DA SUB PARA O AFILIADOR              
Caike Uch�a                        v3         15/10/2019                       UPDATE           
Caike Uch�a                        v4         31/10/2019                       UPDATE      
Caike Uch�a                        v5         16/01/2020             inserir MCC padr�o para PF       
Caike Uch�a                        v6         10/08/2020              Retirar Trava equip Bluetooth  
Caike Uch�a                        v7         17/06/2021                   add valid global
------------------------------------------------------------------------------------------*/                 
(                
 @COD_EQUIP INT,               
 @COD_USER INT,              
 @COD_DEPTO INT,              
 @COD_COMP INT              
)                
AS                
  DECLARE @TID varchar(100);      
                
  DECLARE @TIDAT varchar(100);      
                
  DECLARE @NAME varchar(100);      
                
  DECLARE @INSIDE int;      
                
  DECLARE @TYPE_MODEL varchar(100);      
                
  DECLARE @AVAILABLE int;      
                
  DECLARE @NAME_AC varchar(20);      
                
  DECLARE @COD_AC INT;              
               
  DECLARE @CONT INT;      

  DECLARE @MODEL VARCHAR(100);
  
  DECLARE @COD_MODEL INT;
              
  BEGIN 
        
SELECT      
 @TYPE_MODEL = MODEL_GROUP.CODE,     
 @MODEL = CODIGO,
 @COD_MODEL= EQUIPMENT.COD_MODEL
FROM EQUIPMENT      
INNER JOIN EQUIPMENT_MODEL      
 ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL      
INNER JOIN MODEL_GROUP      
 ON MODEL_GROUP.COD_MODEL_GROUP = EQUIPMENT_MODEL.COD_MODEL_GROUP      
WHERE COD_EQUIP = @COD_EQUIP      
      
IF @TYPE_MODEL <> 'ONLINE'          
BEGIN      
SET @TYPE_MODEL = 'PRESENCIAL';   

 IF @MODEL <> 'D150GLOBAL'
BEGIN     
-- SELECIONO O AC PELO SEGMENTO                
SELECT      
 @COD_AC =      
 (CASE      
  WHEN TYPE_ESTAB.CODE = 'PF' THEN 10      
  ELSE ACQUIRER.COD_AC      
 END)      
FROM COMMERCIAL_ESTABLISHMENT      
JOIN SEGMENTS      
 ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG      
JOIN SEGMENTS_GROUP      
 ON SEGMENTS_GROUP.COD_SEG_GROUP = SEGMENTS.COD_SEG_GROUP      
JOIN ACQUIRER      
 ON ACQUIRER.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP      
 AND ACQUIRER.[GROUP] = 'PAGSEGURO'    
JOIN BRANCH_EC      
 ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC      
JOIN DEPARTMENTS_BRANCH      
 ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH      
INNER JOIN TYPE_ESTAB      
 ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB      
WHERE COD_DEPTO_BRANCH = @COD_DEPTO;      
      
--Verifica se o terminal n�o possui rota              
      
IF (SELECT      
   COUNT(*)      
  FROM ROUTE_ACQUIRER      
  WHERE COD_EQUIP = @COD_EQUIP      
  AND ACTIVE = 1)      
 = 0      
      
      
-- Insere uma rota padr�o para o Equipamento              
INSERT INTO ROUTE_ACQUIRER (COD_USER, COD_EQUIP, ACTIVE, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)      
 SELECT      
  @COD_USER      
    ,@COD_EQUIP      
    ,1      
    ,CONF_TYPE      
    ,COD_BRAND      
    ,COD_AC      
    ,COD_SOURCE_TRAN      
 FROM ROUTE_ACQUIRER_DEFAULT      
 WHERE COD_AC = 10      
 AND COD_MODEL = @COD_MODEL     
      
SELECT TOP 1      
 @TID = CODE      
FROM DATA_EQUIPMENT_AC      
WHERE COD_EQUIP = @COD_EQUIP      
AND COD_AC = @COD_AC      
AND ACTIVE = 1;      
      
-- Verifica se tem TID na Pagseguro              
IF (SELECT      
   COUNT(*)      
  FROM [dbo].[DATA_EQUIPMENT_AC]      
  WHERE DATA_EQUIPMENT_AC.COD_EQUIP = @COD_EQUIP      
  AND DATA_EQUIPMENT_AC.COD_AC = @COD_AC      
  AND ACTIVE = 1      
  AND CODE = @TID)      
 = 0      
BEGIN      
SELECT TOP 1      
 @TID = TID      
   ,@NAME = [NAME]      
   ,@INSIDE = COD_DATA_EQUIP      
FROM DATA_TID_AVAILABLE_EC      
WHERE COD_AC = @COD_AC      
AND TYPE_KEY_AC = @TYPE_MODEL      
AND AVAILABLE = 1      
AND ACTIVE = 1      
      
IF @TID IS NULL      
THROW 61042, 'TID NOT AVAILABLE', 1;      
      
INSERT INTO [dbo].[DATA_EQUIPMENT_AC] ([CREATED_AT]      
, [COD_EQUIP]      
, [COD_COMP]      
, [COD_AC]      
, [NAME]      
, [CODE]      
, [MODIFY_DATE]      
, [ACTIVE])      
 VALUES (GETDATE(), @COD_EQUIP, @COD_COMP, @COD_AC, @NAME, @TID, NULL, 1);      
      
IF @@rowcount < 1      
THROW 60000, 'COULD NOT REGISTER TID EQUIPMENT', 1;      
      
UPDATE DATA_TID_AVAILABLE_EC      
SET AVAILABLE = 0      
WHERE COD_DATA_EQUIP = @INSIDE;      
      
IF @@rowcount < 1      
THROW 60001, 'COULD UPDATE TID EQUIPMENT AVAILABLE', 1;      
      
END   

END
ELSE 
BEGIN


IF (SELECT 
COUNT(*)
FROM COMMERCIAL_ESTABLISHMENT
JOIN BRANCH_EC
ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
JOIN DEPARTMENTS_BRANCH
ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
JOIN ACQUIRER_KEYS_CREDENTIALS
ON ACQUIRER_KEYS_CREDENTIALS.CODE_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
AND ACQUIRER_KEYS_CREDENTIALS.COD_AC= 27
AND ACQUIRER_KEYS_CREDENTIALS.ACTIVE=1
AND ACQUIRER_KEYS_CREDENTIALS.[NAME] = 'MID'
WHERE DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = @COD_DEPTO ) = 0 

THROW 60086, 'THERE IS NO KEY FOR THE GLOBAL ACQUIRER', 1;      
 

 IF (SELECT      
   COUNT(*)      
  FROM ROUTE_ACQUIRER      
  WHERE COD_EQUIP = @COD_EQUIP      
  AND ACTIVE = 1)      
 = 0      
      
      
-- Insere uma rota padr�o para o Equipamento              
INSERT INTO ROUTE_ACQUIRER (COD_USER, COD_EQUIP, ACTIVE, CONF_TYPE, COD_BRAND, COD_AC, COD_SOURCE_TRAN)      
 SELECT      
     @COD_USER      
    ,@COD_EQUIP      
    ,1      
    ,CONF_TYPE      
    ,COD_BRAND      
    ,ACQUIRER.COD_AC      
    ,COD_SOURCE_TRAN      
 FROM ROUTE_ACQUIRER_DEFAULT 
 JOIN ACQUIRER 
 ON ACQUIRER.COD_AC = ROUTE_ACQUIRER_DEFAULT.COD_AC
 WHERE ACQUIRER.[GROUP] = 'GlobalPayments'
 AND ACQUIRER.ACTIVE = 1
 AND ROUTE_ACQUIRER_DEFAULT.COD_MODEL = @COD_MODEL     


END


      
END      
      
-- Valida associa��o do terminal             
      
SELECT      
 @CONT = COUNT(*)      
FROM ASS_DEPTO_EQUIP      
WHERE COD_EQUIP = @COD_EQUIP      
AND ACTIVE = 1      
IF @CONT > 0      
THROW 61022, 'EQUIPMENT ALREADY ASSOCIATE TO ANOTHER DEPARTMENT', 1      
      
INSERT INTO ASS_DEPTO_EQUIP (COD_EQUIP, COD_DEPTO_BRANCH, ACTIVE, COD_USER)      
 VALUES (@COD_EQUIP, @COD_DEPTO, 1, @COD_USER);      
      
IF @@rowcount < 1      
THROW 60000, 'COULD NOT REGISTER ASS_DEPTO_EQUIP ', 1;      
      
END



GO

IF OBJECT_ID('SP_VAL_TID_AVAILABLE_EC') IS NOT NULL
DROP PROCEDURE [SP_VAL_TID_AVAILABLE_EC]

GO
CREATE PROCEDURE SP_VAL_TID_AVAILABLE_EC    
/*----------------------------------------------------------------------------------------                    
Procedure Name: [SP_VAL_TID_AVAILABLE_EC]                    
Project.......: TKPP                    
-------------------------------------------------------------------------------------------                    
Author                            VERSION        Date                          Description                    
------------------------------------------------------------------------------------------                    
Elir Ribeiro      v1      22/08/2018       CREATION         
Kennedy Alef     v2      08/07/2019       ADD SEGMENTATION               
Caike Uchoa      v3      17/06/2021       add global payments
------------------------------------------------------------------------------------------*/ (    
@COD_AC int,    
@EC int,    
@TYPE varchar(100),    
@COD_EQUIP int    
)    
AS    
  DECLARE @CONT int;    
  DECLARE @TYPE_MODEL varchar(100);    
  DECLARE @TYPE_KEY varchar(100);    
  DECLARE @NAME_AC varchar(100);    
  DECLARE @QTY int = 0;    
  DECLARE @MODEL VARCHAR(100);  
  DECLARE @COD_MODEL INT;
    
  BEGIN    
SET @NAME_AC = (SELECT    
  UPPER([GROUP])    
 FROM ACQUIRER    
 WHERE COD_AC = @COD_AC)    
    
SELECT    
 @TYPE_MODEL = MODEL_GROUP.CODE,  
 @MODEL = CODIGO,
 @COD_MODEL= EQUIPMENT.COD_MODEL
FROM EQUIPMENT    
INNER JOIN EQUIPMENT_MODEL    
 ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL    
INNER JOIN MODEL_GROUP    
 ON MODEL_GROUP.COD_MODEL_GROUP = EQUIPMENT_MODEL.COD_MODEL_GROUP    
WHERE COD_EQUIP = @COD_EQUIP    
    
IF @TYPE_MODEL <> 'ONLINE'    
BEGIN    
SET @TYPE_MODEL = 'PRESENCIAL';    
SET @TYPE_KEY = 'TID';    
    END    
    ELSE    
SET @TYPE_KEY = 'TID ONLINE';    
    
IF UPPER(@NAME_AC) = 'PAGSEGURO' AND @MODEL <> 'D150GLOBAL'  
BEGIN    
    
    
SELECT    
 @QTY = COUNT(*)    
FROM EQUIPMENT    
JOIN EQUIPMENT_MODEL    
 ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL    
JOIN MODEL_GROUP    
 ON EQUIPMENT_MODEL.COD_MODEL_GROUP = MODEL_GROUP.COD_MODEL_GROUP    
WHERE COD_EQUIP = @COD_EQUIP    
AND MODEL_GROUP.COD_MODEL_GROUP = 1;    
    
IF (@QTY >= 1)    
BEGIN    
SELECT    
 @COD_AC = ACQUIRER.COD_AC    
FROM COMMERCIAL_ESTABLISHMENT    
JOIN SEGMENTS    
 ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG    
JOIN SEGMENTS_GROUP    
 ON SEGMENTS_GROUP.COD_SEG_GROUP = SEGMENTS.COD_SEG_GROUP    
JOIN ACQUIRER    
 ON ACQUIRER.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP    
 and ACQUIRER.[GROUP] = 'PAGSEGURO'  
WHERE COD_EC = @EC;    
    
SELECT    
 @QTY = COUNT(*)    
FROM DATA_EQUIPMENT_AC    
WHERE COD_AC = @COD_AC    
AND COD_EQUIP = @COD_EQUIP    
AND ACTIVE = 1;    
    
IF @QTY > 0    
THROW 61048, 'ALREADY EXISTS TID FOR THIS EQUIPMENT', 1;    
    
SELECT    
 @QTY = COUNT(*)    
FROM DATA_TID_AVAILABLE_EC    
WHERE COD_AC = @COD_AC    
AND ACTIVE = 1    
AND AVAILABLE = 1    
AND [NAME] = 'TID'    
    
IF @QTY <= 0    
THROW 61042, 'TID NOT AVAILABLE', 1;    
END;    
    
END;  

ELSE IF @MODEL = 'D150GLOBAL'
BEGIN

IF (SELECT 
COUNT(*)
FROM COMMERCIAL_ESTABLISHMENT
JOIN ACQUIRER_KEYS_CREDENTIALS
ON ACQUIRER_KEYS_CREDENTIALS.CODE_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND ACQUIRER_KEYS_CREDENTIALS.COD_AC= 27
AND ACQUIRER_KEYS_CREDENTIALS.ACTIVE=1
AND ACQUIRER_KEYS_CREDENTIALS.[NAME] = 'MID'
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @EC ) = 0 

THROW 60086, 'THERE IS NO KEY FOR THE GLOBAL ACQUIRER', 1;      


END

ELSE    
BEGIN    
SELECT    
 @CONT = COUNT(*)    
FROM DATA_TID_AVAILABLE_EC    
WHERE AVAILABLE = 1    
AND [NAME] = @TYPE_KEY    
AND COD_EC = @EC    
AND COD_AC = @COD_AC    
AND TYPE_KEY_AC = @TYPE_MODEL    
END    
IF @CONT = 3    
THROW 61048, 'ALREADY EXISTS TID FOR THIS EQUIPMENT', 1;    
    
ELSE    
IF @CONT < 1    
THROW 61042, 'TID NOT AVAILABLE', 1;    
    
END;

--ST-2220

GO

--ET-1422

IF OBJECT_ID('AFFILIATOR_COMMISSION') IS NOT NULL 
	DROP TABLE AFFILIATOR_COMMISSION;
GO
CREATE TABLE AFFILIATOR_COMMISSION (
	[COD_AFF_COMM] INT IDENTITY,
	[COD_USER_CREATE]	INT NOT NULL REFERENCES USERS ([COD_USER]),
	[COD_USER_PAY]		INT NULL REFERENCES USERS ([COD_USER]),
	[COD_AFF]			INT NOT NULL REFERENCES AFFILIATOR ([COD_AFFILIATOR]),
	[ACTIVE]			BIT DEFAULT (1),
	[CREATED_AT]		DATETIME DEFAULT dbo.FN_FUS_UTF(CURRENT_TIMESTAMP),
	[MODIFY_DATE]		DATETIME NULL,
	[INITIAL_DATE]		DATE NULL,
	[FINAL_DATE]		DATE NULL,
	[QUANTITY]			INT DEFAULT(0),
	[TPV]				DECIMAL (22, 6) NULL,
	[AMOUNT]			DECIMAL (22, 6) NULL,
	[PAY_DATE]			DATETIME NULL

	CONSTRAINT PK_AFFILIATOR_COMMISSION PRIMARY KEY (COD_AFF_COMM)
)
GO

IF OBJECT_ID('SP_REPORT_AFFILIATOR_COMMISSION') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REPORT_AFFILIATOR_COMMISSION;
END
GO
CREATE PROCEDURE SP_REPORT_AFFILIATOR_COMMISSION  
(  
	@INITIAL_DATE DATETIME = NULL,              
	@FINAL_DATE DATETIME = NULL,
	@COD_AFF CODE_TYPE READONLY
) AS BEGIN  
  
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';      
	SET NOCOUNT ON;      
	SET ARITHABORT ON;      

	SET @QUERY_BASIS = ' 
	SELECT 
		COMM.[COD_AFF_COMM]
		, COMM.[COD_AFF]		           
		, COMM.[ACTIVE]		           
		, COMM.[CREATED_AT]	           
		, COMM.[MODIFY_DATE]	           
		, COMM.[INITIAL_DATE]	           
		, COMM.[FINAL_DATE]	           
		, COMM.[QUANTITY]		            
		, COMM.[TPV]
		, COMM.[AMOUNT]		             
		, COMM.[PAY_DATE]		           
		, IIF(COMM.PAY_DATE IS NOT NULL, ''Pago'', ''Em Aberto'') AS [STATUS]
		, US.[IDENTIFICATION]						 AS [USERNAME_CREATE]
		, USP.[IDENTIFICATION]						 AS [USERNAME_PAY]
		, A.[NAME]									 AS [AFFILIATOR]
		, BIL.[CODE]								 AS [TYPE_BILLING]
		, A.[PLATFORM_NAME]							 AS [PLATFORM]
		, A.[CPF_CNPJ]								 AS [CNPJ]
		, IIF(COND.EXEMPTED IS NOT NULL, IIF(COND.EXEMPTED = 1, ''Isento'', ''Ativo''), '''') AS [BILLING]

    FROM AFFILIATOR_COMMISSION COMM
             INNER JOIN AFFILIATOR A on COMM.COD_AFF = A.COD_AFFILIATOR 
             LEFT JOIN USERS US ON US.COD_USER = COMM.COD_USER_CREATE 
			 LEFT JOIN USERS USP ON USP.COD_USER = COMM.COD_USER_PAY 
			 LEFT JOIN AFFILIATOR_CONDITIONS COND ON COND.COD_AFF = A.COD_AFFILIATOR AND COND.ACTIVE = 1 
			 LEFT JOIN TYPE_BILLING BIL ON BIL.COD_TYPE_BILLING = COND.COD_TP_BILLING
    WHERE COMM.ACTIVE = 1 '

    IF (SELECT COUNT(*) FROM @COD_AFF) > 0
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COMM.COD_AFF IN (SELECT CODE FROM @COD_AFF) ');  

	IF ((@INITIAL_DATE IS NOT NULL) AND (@FINAL_DATE IS NOT NULL))      
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND (CAST(COMM.INITIAL_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE) ');
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' OR CAST(COMM.FINAL_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE)) ');
			
	EXEC [sp_executesql] @QUERY_BASIS      
     ,N'                                                   
        @INITIAL_DATE DATETIME,                                           
        @FINAL_DATE DATETIME,
		@COD_AFF CODE_TYPE READONLY
        '      
		,@INITIAL_DATE	= @INITIAL_DATE      
		,@FINAL_DATE	= @FINAL_DATE
		,@COD_AFF		= @COD_AFF      
END	
GO	

IF OBJECT_ID('SP_FD_DATA_AFFILIATOR_COMMISSION') IS NOT NULL BEGIN
    DROP PROCEDURE SP_FD_DATA_AFFILIATOR_COMMISSION;
END
GO
CREATE PROCEDURE SP_FD_DATA_AFFILIATOR_COMMISSION  
(  
	@INITIAL_DATE DATETIME = NULL,              
	@FINAL_DATE DATETIME = NULL,
	@COD_AFF CODE_TYPE READONLY
) AS BEGIN  
  
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';      
	SET NOCOUNT ON;      
	SET ARITHABORT ON;      
	--SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);  

	SET @QUERY_BASIS = ' 
	SELECT 
		COUNT(X.COD_TRAN) AS [QUANTITY]
		, IIF(X.[TYPE_BILLING] = ''Revenue Share'', (SUM(X.[AMOUNT])/2), SUM(X.[AMOUNT])) AS [AMOUNT]
		, SUM(X.[TPV]) AS [TPV]
		, X.[AFFILIATOR]
		, X.[CNPJ]
		, X.[TYPE_BILLING]
		, X.[PLATFORM]
		, X.[COD_AFFILIATOR]
		, X.[BILLING]
	FROM (
		SELECT RCT.COD_TRAN
			, SUM(RCT.LIQUID_VALUE_AFFILIATOR)	AS [AMOUNT]
			, SUM(RCT.AMOUNT)					AS [TPV]
			, A.[NAME]							AS [AFFILIATOR]
			, A.[CPF_CNPJ]						AS [CNPJ]
			, BIL.[CODE]						AS [TYPE_BILLING]
			, A.[PLATFORM_NAME]					AS [PLATFORM]
			, A.[COD_AFFILIATOR]				AS [COD_AFFILIATOR] 
			, IIF(COND.EXEMPTED IS NOT NULL, IIF(COND.EXEMPTED = 1, ''Isento'', ''Ativo''), '''') AS [BILLING]

		FROM [REPORT_CONSOLIDATED_TRANS_SUB] RCT
			JOIN AFFILIATOR A on RCT.COD_AFFILIATOR = A.COD_AFFILIATOR 
			LEFT JOIN AFFILIATOR_CONDITIONS COND ON COND.COD_AFF = A.COD_AFFILIATOR AND COND.ACTIVE = 1 
			LEFT JOIN TYPE_BILLING BIL ON BIL.COD_TYPE_BILLING = COND.COD_TP_BILLING 
			LEFT JOIN AFFILIATOR_COMMISSION COMM ON COMM.COD_AFF = RCT.COD_AFFILIATOR 
				AND (CAST(COMM.INITIAL_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE)
				OR CAST(COMM.FINAL_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE)) 

		WHERE RCT.COD_SITUATION IN (3, 14) AND COMM.COD_AFF_COMM IS NULL '

    IF (SELECT COUNT(*) FROM @COD_AFF) > 0
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RCT.COD_AFFILIATOR IN (SELECT CODE FROM @COD_AFF) ');  

	IF ((@INITIAL_DATE IS NOT NULL) AND (@FINAL_DATE IS NOT NULL))      
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RCT.TRANSACTION_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE) ');

	SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' GROUP BY RCT.COD_TRAN, A.[COD_AFFILIATOR], A.[NAME], A.[CPF_CNPJ], A.[PLATFORM_NAME], BIL.[CODE], COND.EXEMPTED 
		) AS X
		GROUP BY X.[COD_AFFILIATOR], X.[AFFILIATOR], X.[CNPJ], X.[PLATFORM], X.[TYPE_BILLING], X.[BILLING] ');
			
	EXEC [sp_executesql] @QUERY_BASIS      
     ,N'                                                   
        @INITIAL_DATE DATETIME,                                           
        @FINAL_DATE DATETIME,
		@COD_AFF CODE_TYPE READONLY
        '      
		,@INITIAL_DATE	= @INITIAL_DATE      
		,@FINAL_DATE	= @FINAL_DATE
		,@COD_AFF		= @COD_AFF      
END	
GO	

IF TYPE_ID('TP_AFF_COMISSION') IS NOT NULL BEGIN
	IF OBJECT_ID('SP_REG_AFFILIATOR_COMMISSION') IS NOT NULL DROP PROCEDURE SP_REG_AFFILIATOR_COMMISSION
	IF OBJECT_ID('SP_UP_AFFILIATOR_COMMISSION') IS NOT NULL DROP PROCEDURE SP_UP_AFFILIATOR_COMMISSION
    DROP TYPE [TP_AFF_COMISSION]
END
GO
CREATE TYPE [TP_AFF_COMISSION] AS TABLE(
	COD_AFF_COMM	INT NULL
	, COD_AFF		INT NULL
	, QUANTITY		INT	NULL
	, TPV			DECIMAL(22,6) NULL
	, AMOUNT		DECIMAL(22,6) NULL
	, PAYMENT		DECIMAL(22,6) NULL
)
GO

IF OBJECT_ID('SP_REG_AFFILIATOR_COMMISSION') IS NOT NULL BEGIN
    DROP PROCEDURE SP_REG_AFFILIATOR_COMMISSION;
END
GO
CREATE PROCEDURE SP_REG_AFFILIATOR_COMMISSION  
(  
    @ITEMS TP_AFF_COMISSION READONLY ,  
    @COD_USER INT NULL ,
	@INITIAL_DATE DATETIME = NULL,              
	@FINAL_DATE DATETIME = NULL
) AS 
BEGIN  

	INSERT INTO AFFILIATOR_COMMISSION (COD_AFF, COD_USER_CREATE, INITIAL_DATE, FINAL_DATE, QUANTITY, TPV, AMOUNT)  
	SELECT  
	I.COD_AFF  
    , @COD_USER
	, dbo.FN_FUS_UTF(@INITIAL_DATE)
    , dbo.FN_FUS_UTF(@FINAL_DATE)
    , I.QUANTITY
	, I.TPV
	, I.AMOUNT
	
	FROM @ITEMS I
	LEFT JOIN AFFILIATOR_COMMISSION COMM ON COMM.COD_AFF = I.COD_AFF
		AND (CAST(COMM.INITIAL_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE)
		OR CAST(COMM.FINAL_DATE AS DATE) BETWEEN CAST(@INITIAL_DATE AS DATE) AND CAST(@FINAL_DATE AS DATE))
	WHERE COMM.COD_AFF_COMM IS NULL
END
GO

IF OBJECT_ID('SP_UP_AFFILIATOR_COMMISSION') IS NOT NULL BEGIN
    DROP PROCEDURE SP_UP_AFFILIATOR_COMMISSION;
END
GO
CREATE PROCEDURE SP_UP_AFFILIATOR_COMMISSION  
(  
    @ITEMS TP_AFF_COMISSION READONLY,  
    @COD_USER INT NULL
) AS 
BEGIN  

	--UPDATE AFFILIATOR_COMMISSION SET ACTIVE = 0
	--FROM AFFILIATOR_COMMISSION COMM
	--JOIN @ITEMS I ON I.COD_AFF = COMM.COD_AFF AND I.COD_AFF_COMM = COMM.COD_AFF_COMM
	--WHERE COMM.ACTIVE = 1 AND COMM.PAY_DATE IS NOT NULL

	--INSERT INTO AFFILIATOR_COMMISSION (COD_AFF, COD_USER_CREATE, INITIAL_DATE, FINAL_DATE, QUANTITY, TPV, AMOUNT, PAY_DATE, COD_USER_PAY)  
	--SELECT  
	--I.COD_AFF  
    --, COMM.COD_USER_CREATE
	--, COMM.INITIAL_DATE
    --, COMM.FINAL_DATE
    --, COMM.QUANTITY
	--, COMM.TPV
	--, COMM.AMOUNT
	--, dbo.FN_FUS_UTF(CURRENT_TIMESTAMP)
	--, @COD_USER
	--FROM AFFILIATOR_COMMISSION COMM 
	--JOIN @ITEMS I ON I.COD_AFF = COMM.COD_AFF AND I.COD_AFF_COMM = COMM.COD_AFF_COMM
	--WHERE COMM.ACTIVE = 0 AND COMM.PAY_DATE IS NOT NULL

	UPDATE AFFILIATOR_COMMISSION SET COD_USER_PAY = @COD_USER
	, PAY_DATE = dbo.FN_FUS_UTF(CURRENT_TIMESTAMP)
	FROM AFFILIATOR_COMMISSION COMM
	JOIN @ITEMS I ON I.COD_AFF = COMM.COD_AFF AND I.COD_AFF_COMM = COMM.COD_AFF_COMM
	WHERE COMM.ACTIVE = 1 AND COMM.PAY_DATE IS NULL

END
GO

--ET-1422

GO

--ST-1377 - Risco_Fraude.sql

IF OBJECT_ID('RISK_FRAUD_RULE') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_RULE
    (
        COD_RULE INT NOT NULL PRIMARY KEY IDENTITY,
        CREATED_AT DATETIME DEFAULT (GETDATE()),
        DESCRIPTION VARCHAR(128) NOT NULL,
        ACTIVE INT NOT NULL DEFAULT(1)
    )
END

GO

IF OBJECT_ID('RISK_FRAUD_FIELD') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_FIELD
    (
        COD_RISK_FIELD INT NOT NULL PRIMARY KEY IDENTITY,
        NAME VARCHAR(32) NOT NULL,
        DESCRIPTION VARCHAR(64) NOT NULL,
        TYPE VARCHAR(32),
        PARTIAL INT NOT NULL DEFAULT(0),
        SYSTEM_VALUE INT NOT NULL default (0)
    )
END

GO

IF OBJECT_ID('RISK_FRAUD_RULE_DETAIL') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_RULE_DETAIL
    (
        COD_RULE_DETAIL INT NOT NULL PRIMARY KEY IDENTITY,
        COD_RULE INT NOT NULL REFERENCES RISK_FRAUD_RULE(COD_RULE),
        COD_FIELD INT NOT NULL REFERENCES RISK_FRAUD_FIELD(COD_RISK_FIELD),
        COMPARISON VARCHAR(32) NOT NULL,
        FIELD_ORDER INT NOT NULL DEFAULT (0),
        AMOUNT DECIMAL(22, 6) NULL,
        AMOUNT_UNTIL DECIMAL(22, 6) NULL,
        COD_SITUATION INT NULL REFERENCES SITUATION(COD_SITUATION),
        COD_FIELD_COMPARE INT NULL REFERENCES RISK_FRAUD_FIELD(COD_RISK_FIELD),
        PERCENTAGE DECIMAL(22, 6) NULL
    )
END

GO

IF (SELECT COUNT(*) FROM RISK_FRAUD_FIELD) = 0 BEGIN

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRANSACTION_TIME', 'Hora transação', 'TIME', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRANSACTION_VALUE', 'Valor transação', 'DECIMAL', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRANSACTION_PAN', 'PAN/CARTAO', 'GROUPING', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRANSACTION_POS', 'POS', 'GROUPING', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRANSACTION_EC', 'Estabelecimento', 'GROUPING', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRANSACTION_SITUATION', 'Situação', 'GROUPING', 0, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('AVG_TICKET', 'Ticket Medio', 'DECIMAL', 1, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('TRAN_LIMIT', 'Limite Transação', 'DECIMAL', 1, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('DAY_LIMIT', 'Limite Diário', 'DECIMAL', 1, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('MONTH_LIMIT', 'Limite Mensal', 'DECIMAL', 1, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('DAY_TRANSACTED', 'Transacionado Dia', 'DECIMAL', 1, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('MONTH_TRANSACTED', 'Transacionado Mês', 'DECIMAL', 1, 1 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('LAST_HOUR', 'Ultima x Horas', 'FILTER', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('LAST_DAY', 'Ultimos x dias', 'FILTER', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('SAME_DAY', 'Mesmo dia', 'FILTER', 0, 0 )

    INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
    VALUES('SAME_MONTH', 'Mesmo mês', 'FILTER', 0, 0 )
END
GO

IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '1') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '1' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_TIME'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_VALUE'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'BETWEEN', 0.01, 1, NULL, NULL, NULL, 2);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_POS'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 3);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_PAN'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 5, NULL, NULL, NULL, NULL, 4);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'LAST_HOUR'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'FILTER', 1, NULL, NULL, NULL, NULL, 5);

    END
GO

IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '2') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '2' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_TIME'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_VALUE'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 1000, NULL, NULL, NULL, NULL, 2);

    END
GO

IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '3') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '3' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_TIME'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_POS'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 2);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_PAN'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 3);

    END
GO

IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '4') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @Field2 INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '4' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_TIME'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_VALUE'
        SELECT @Field2 = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'AVG_TICKET'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', NULL, NULL, NULL, @Field2, 30, 2);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '5') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @Field2 INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '5' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_VALUE'
        SELECT @Field2 = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'DAY_LIMIT'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', NULL, NULL, NULL, @Field2, 50, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_EC'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 1);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '6') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @Field2 INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '6' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_VALUE'
        SELECT @Field2 = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'MONTH_LIMIT'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', NULL, NULL, NULL, @Field2, 100, 1);

    END
GO

IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '7') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @COD_SIT INT = NULL

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '7' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_EC'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_SITUATION'
        SELECT @COD_SIT = COD_SITUATION FROM SITUATION WHERE NAME = 'CANCELED'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '=', NULL, NULL, @COD_SIT, NULL, NULL, 2);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'SAME_MONTH'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'FILTER', NULL, NULL, NULL, NULL, NULL, 3);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '8') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '8' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_PAN'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_EC'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 2, NULL, NULL, NULL, NULL, 2);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'LAST_HOUR'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '<', 1, NULL, NULL, NULL, NULL, 3);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '9') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '9' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_PAN'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_EC'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 2);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'LAST_DAY'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '<', 1, NULL, NULL, NULL, NULL, 3);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '10') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '10' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_PAN'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_EC'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>=', 4, NULL, NULL, NULL, NULL, 2);

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'LAST_DAY'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '<', 7, NULL, NULL, NULL, NULL, 3);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '13') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @COD_SIT INT = NULL

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '13' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'TRANSACTION_SITUATION'
        SELECT @COD_SIT = COD_SITUATION FROM SITUATION WHERE NAME = 'DENIED ACQUIRER'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '=', NULL, NULL, @COD_SIT, NULL, NULL, 1);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '14-1') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @Field2 INT = NULL

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '14-1' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'DAY_TRANSACTED'
        SELECT @Field2 = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'DAY_LIMIT'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>', NULL, NULL, NULL, @Field2, 100, 1);

    END
GO
IF (SELECT COUNT(*) FROM RISK_FRAUD_RULE WHERE DESCRIPTION = '14-2') = 0
    BEGIN
        DECLARE @ID INT = NULL, @Field INT = null, @Field2 INT = NULL

        INSERT INTO RISK_FRAUD_RULE ( DESCRIPTION ) VALUES( '14-2' )

        SET @ID = SCOPE_IDENTITY()

        SELECT @Field = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'MONTH_TRANSACTED'
        SELECT @Field2 = COD_RISK_FIELD FROM RISK_FRAUD_FIELD WHERE NAME = 'MONTH_LIMIT'
        INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
        VALUES ( @ID, @Field, '>', NULL, NULL, NULL, @Field2, 100, 1);

    END
GO


IF OBJECT_ID('RISK_ANALYSIS_DATA') IS NULL BEGIN
    CREATE TABLE RISK_ANALYSIS_DATA
    (
        COD_EC INT NOT NULL PRIMARY KEY REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC),
        AVG_THIRTY_DAYS DECIMAL(22, 6) NOT NULL DEFAULT (0),
        AVG_SEVEN_DAYS DECIMAL (22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_MONTH DECIMAL(22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_WEEK DECIMAL (22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_DAY DECIMAL (22, 6) NOT NULL DEFAULT (0),
        MONTH_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        DAY_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        WEEK_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        LAST_UPDATE DATETIME NOT NULL DEFAULT (GETDATE())
    )
END
GO

IF OBJECT_ID('SP_UP_RISK_DATA') IS NOT NULL
    DROP PROCEDURE SP_UP_RISK_DATA;
GO
CREATE PROCEDURE [dbo].[SP_UP_RISK_DATA]
/*----------------------------------------------------------------------------------------                                  
   Project.......: TKPP                                  
 ------------------------------------------------------------------------------------------                                  
   Author                   VERSION        Date             Description                                  
------------------------------------------------------------------------------------------                                  
   Luiz Aquino              V1             2021-04-13       CREATED   
------------------------------------------------------------------------------------------*/
AS BEGIN

    DECLARE @TODAY DATETIME = dbo.FN_FUS_UTF(GETDATE());

    --MONTH
    DECLARE @THIRTY_DAYS_AGO DATE = DATEADD(DAY, -30, @TODAY), @ECS CODE_TYPE

    INSERT INTO @ECS (CODE)
    SELECT DISTINCT COD_EC FROM REPORT_TRANSACTIONS_EXP WHERE TRANSACTION_DATE BETWEEN @THIRTY_DAYS_AGO AND @TODAY

    INSERT INTO RISK_ANALYSIS_DATA (COD_EC)
    SELECT CODE FROM @ECS e
                         LEFT JOIN RISK_ANALYSIS_DATA [RAD] ON [RAD].COD_EC = e.CODE
    WHERE RAD.COD_EC IS NULL

    UPDATE RISK_ANALYSIS_DATA
    SET AVG_THIRTY_DAYS = i.AVG_MONTH, LAST_UPDATE = GETDATE()
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, (SUM(AMOUNT) / COUNT(*)) [AVG_MONTH] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @THIRTY_DAYS_AGO AND @TODAY
        GROUP BY COD_EC
    ) i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    DECLARE @START_MONTH DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @TODAY), 0)

    UPDATE RISK_ANALYSIS_DATA
    SET MONTH_TRANSACTED = i.TOTAL_MONTH
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, SUM(AMOUNT) [TOTAL_MONTH] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @START_MONTH AND @TODAY
        GROUP BY COD_EC
    )i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    UPDATE RISK_ANALYSIS_DATA
    SET AVG_TICKET_MONTH = i.AVG_MONTH
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, (SUM(AMOUNT) / COUNT(*)) [AVG_MONTH] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @START_MONTH AND @TODAY
        GROUP BY COD_EC
    ) i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    -- WEEK

    DECLARE @SEVEN_DAYS_AGO DATE = DATEADD(DAY, -7, @TODAY)

    UPDATE RISK_ANALYSIS_DATA
    SET AVG_SEVEN_DAYS = i.AVG_WEEK
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, (SUM(AMOUNT) / COUNT(*)) [AVG_WEEK] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @SEVEN_DAYS_AGO AND @TODAY
        GROUP BY COD_EC
    ) i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    DECLARE @START_OF_WEEK DATE =  DATEADD(DAY , (DATEPART(WEEKDAY, @TODAY) -1) * -1 , @TODAY )

    UPDATE RISK_ANALYSIS_DATA
    SET WEEK_TRANSACTED = i.TOTAL_MONTH
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, SUM(AMOUNT) [TOTAL_MONTH] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @START_OF_WEEK AND @TODAY
        GROUP BY COD_EC
    )i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    UPDATE RISK_ANALYSIS_DATA
    SET AVG_TICKET_WEEK = i.AVG_WEEK
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, (SUM(AMOUNT) / COUNT(*)) [AVG_WEEK] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @START_OF_WEEK AND @TODAY
        GROUP BY COD_EC
    ) i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    -- DAY 

    DECLARE @TODAY_START DATE = @TODAY

    UPDATE RISK_ANALYSIS_DATA
    SET AVG_TICKET_DAY = i.AVG_DAY
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, (SUM(AMOUNT) / COUNT(*)) [AVG_DAY] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @TODAY_START AND @TODAY
        GROUP BY COD_EC
    ) i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

    UPDATE RISK_ANALYSIS_DATA
    SET DAY_TRANSACTED = i.TOTAL_DAY
    FROM RISK_ANALYSIS_DATA
             JOIN (
        SELECT COD_EC, SUM(AMOUNT) [TOTAL_DAY] FROM REPORT_TRANSACTIONS_EXP RTE
        WHERE COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @TODAY_START AND @TODAY
        GROUP BY COD_EC
    )i ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

END
GO

IF OBJECT_ID('RISK_ANALYSIS_QUEUE') IS NULL BEGIN
    CREATE TABLE RISK_ANALYSIS_QUEUE
    (
        COD_TRAN INT NOT NULL PRIMARY KEY REFERENCES [TRANSACTION](COD_TRAN),
        TRANSACTION_DATE DATETIME NOT NULL,
        AMOUNT DECIMAL(22, 6) NOT NULL,
        COD_SITUATION INT NOT NULL,
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP (COD_ASS_DEPTO_TERMINAL),
        COD_EC INT NOT NULL,
        PAN VARCHAR(100) NULL,
        CODE VARCHAR(100) NULL
    )
END

GO

IF OBJECT_ID('SP_RISK_RULE_APPLY') IS NOT NULL
    DROP PROCEDURE SP_RISK_RULE_APPLY
GO
CREATE PROCEDURE SP_RISK_RULE_APPLY
(
    @COD_RULE INT
) AS BEGIN

    DECLARE @COD_DETAIL INT
        , @COD_FIELD INT
        , @F1_NAME VARCHAR(32)
        , @F1_TYPE VARCHAR(32)
        , @F1_PARTIAL INT
        , @F1_IS_SYSTEM INT
        , @COMPARISON VARCHAR(32)
        , @AMOUNT DECIMAL(22, 6)
        , @AMOUNT_UNTIL DECIMAL(22, 6)
        , @COD_SIT INT
        , @COD_FIELD2 INT
        , @F2_NAME VARCHAR(32)
        , @F2_TYPE VARCHAR(32)
        , @F2_PARTIAL INT
        , @F2_SYSTEM INT
        , @PERCENT INT

    DECLARE DETAIL_CURSOR CURSOR FOR
        SELECT
            COD_RULE_DETAIL
             , COD_FIELD
             , F1.NAME [F1_NAME]
             , F1.TYPE [F1_TYPE]
             , F1.PARTIAL [F1_IS_PARTIAL]
             , F1.SYSTEM_VALUE [F1_IS_SYTEM]
             , COMPARISON
             , AMOUNT
             , AMOUNT_UNTIL
             , COD_SITUATION
             , COD_FIELD_COMPARE
             , F2.NAME [F2_NAME]
             , F2.TYPE [F2_TYPE]
             , F2.PARTIAL [F2_IS_PARTIAL]
             , F2.SYSTEM_VALUE [F2_IS_SYTEM]
             , PERCENTAGE
        FROM RISK_FRAUD_RULE_DETAIL D
                 LEFT JOIN RISK_FRAUD_FIELD F1 ON F1.COD_RISK_FIELD = D.COD_FIELD
                 LEFT JOIN RISK_FRAUD_FIELD F2 ON F2.COD_RISK_FIELD = D.COD_FIELD_COMPARE
        WHERE COD_RULE = @COD_RULE

    OPEN DETAIL_CURSOR
    FETCH NEXT FROM DETAIL_CURSOR
        INTO @COD_DETAIL
            ,   @COD_FIELD
            ,   @F1_NAME
            ,   @F1_TYPE
            ,   @F1_PARTIAL
            ,   @F1_IS_SYSTEM
            ,   @COMPARISON
            ,   @AMOUNT
            ,   @AMOUNT_UNTIL
            ,   @COD_SIT
            ,   @COD_FIELD2
            ,   @F2_NAME
            ,   @F2_TYPE
            ,   @F2_PARTIAL
            ,   @F2_SYSTEM
            ,   @PERCENT


    DECLARE @QUERY NVARCHAR(MAX) = '', @HAS_GROUP BIT = 0, @QUERY_GROUP NVARCHAR(MAX) = '', @Group_Filter NVARCHAR(MAX) = '';
    DECLARE @EC_FILTER_TYPE INT = 1, @IS_EC_FILTER INT = 0;

    WHILE @@FETCH_STATUS = 0 BEGIN

        DECLARE @TO_COMPARE VARCHAR(128) = ' ' + CAST(@AMOUNT AS VARCHAR) + ' '

        IF @F2_NAME IS NOT NULL  BEGIN

            IF @F2_NAME = 'TRANSACTION_TIME' BEGIN
                SET @TO_COMPARE = ' DATEPART(HOUR, [RAQ].TRANSACTION_DATE) ';
            END ELSE IF @F2_NAME = 'TRANSACTION_VALUE' BEGIN
                SET @TO_COMPARE = ' [RAQ].AMOUNT ';
            END ELSE IF @F2_NAME = 'AVG_TICKET' BEGIN
                SET @TO_COMPARE = ' ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'TRAN_LIMIT' BEGIN
                SET @TO_COMPARE = ' (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'DAY_LIMIT' BEGIN
                SET @TO_COMPARE = ' (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'MONTH_LIMIT' BEGIN
                SET @TO_COMPARE = ' (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'DAY_TRANSACTED' BEGIN
                SET @TO_COMPARE = ' [RD].DAY_TRANSACTED ';
            END ELSE IF @F2_NAME = 'MONTH_TRANSACTED' BEGIN
                SET @TO_COMPARE = ' [RD].MONTH_TRANSACTED ';
            END

        END

        IF @F1_NAME = 'TRANSACTION_TIME' BEGIN

            IF @COMPARISON = '<'
                SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN' BEGIN
                IF @AMOUNT < @AMOUNT_UNTIL
                    SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';
                ELSE
                    SET @QUERY += ' AND (DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + CAST(@AMOUNT AS VARCHAR) + ' OR DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ') ';
            END
        END
        ELSE IF @F1_NAME = 'TRANSACTION_VALUE' BEGIN

            IF @COMPARISON = '<'
                SET @QUERY += ' AND [RAQ].AMOUNT < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND [RAQ].AMOUNT <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND [RAQ].AMOUNT = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND [RAQ].AMOUNT > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND [RAQ].AMOUNT >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND [RAQ].AMOUNT >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RAQ].AMOUNT <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'TRANSACTION_PAN' BEGIN

            IF @HAS_GROUP = 0 BEGIN
                SET @HAS_GROUP = 1
            END ELSE BEGIN
                SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].PAN', @QUERY_GROUP) = '0'
                SET @QUERY_GROUP += ' [RAQ].PAN '

            SET @QUERY += ' AND [RAQ].PAN IS NOT NULL '

            IF @COMPARISON = '<'
                SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '<='
                SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '='
                SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '>'
                SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '>='
                SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = 'BETWEEN'
                SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'TRANSACTION_POS' BEGIN

            IF @HAS_GROUP = 0 BEGIN
                SET @HAS_GROUP = 1
            END ELSE BEGIN
                SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_ASS_DEPTO_TERMINAL', @QUERY_GROUP) = '0'
                SET @QUERY_GROUP += ' [RAQ].COD_ASS_DEPTO_TERMINAL '

            IF @COMPARISON = '<'
                SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '<='
                SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '='
                SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '>'
                SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '>='
                SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = 'BETWEEN'
                SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'TRANSACTION_SITUATION' BEGIN

            SET @QUERY += ' AND [RAQ].COD_SITUATION = '+ CAST(@COD_SIT AS VARCHAR) +' '

        END
        ELSE IF @F1_NAME = 'TRANSACTION_EC' BEGIN

            IF @HAS_GROUP = 0 BEGIN
                SET @HAS_GROUP = 1
            END ELSE BEGIN
                SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
                SET @QUERY_GROUP += ' [RAQ].COD_EC '

            IF @COMPARISON = '<'
                SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '<='
                SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '='
                SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '>'
                SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = '>='
                SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

            IF @COMPARISON = 'BETWEEN'
                SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'AVG_TICKET' BEGIN

            IF @COMPARISON = '<'
                SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND ([RD].AVG_THIRTY_DAYS * ( @PERCENT / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'TRAN_LIMIT' BEGIN

            IF @COMPARISON = '<'
                SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( '+ CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.TRANSACTION_LIMIT * ( @PERCENT / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'DAY_LIMIT' BEGIN

            IF @COMPARISON = '<'
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 1000. )) = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.LIMIT_TRANSACTION_DIALY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'MONTH_LIMIT' BEGIN

            IF @COMPARISON = '<'
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( '+ CAST(@PERCENT AS VARCHAR) +' / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'DAY_TRANSACTED' BEGIN

            IF @HAS_GROUP = 0 BEGIN
                SET @HAS_GROUP = 1
            END ELSE BEGIN
                SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
                SET @QUERY_GROUP += ' [RAQ].COD_EC '

            SET @IS_EC_FILTER = 1;
            SET @EC_FILTER_TYPE = 1;


            IF @COMPARISON = '<'
                SET @QUERY += ' AND [RD].DAY_TRANSACTED < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND [RD].DAY_TRANSACTED <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND [RD].DAY_TRANSACTED = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND [RD].DAY_TRANSACTED > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND [RD].DAY_TRANSACTED >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND [RD].DAY_TRANSACTED >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RD].DAY_TRANSACTED <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        ELSE IF @F1_NAME = 'MONTH_TRANSACTED' BEGIN

            IF @HAS_GROUP = 0 BEGIN
                SET @HAS_GROUP = 1
            END ELSE BEGIN
                SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
                SET @QUERY_GROUP += ' [RAQ].COD_EC '

            SET @IS_EC_FILTER = 1;
            SET @EC_FILTER_TYPE = 2;

            IF @COMPARISON = '<'
                SET @QUERY += ' AND [RD].MONTH_TRANSACTED < ' + @TO_COMPARE;

            IF @COMPARISON = '<='
                SET @QUERY += ' AND [RD].MONTH_TRANSACTED <= ' + @TO_COMPARE;

            IF @COMPARISON = '='
                SET @QUERY += ' AND [RD].MONTH_TRANSACTED = ' + @TO_COMPARE;

            IF @COMPARISON = '>'
                SET @QUERY += ' AND [RD].MONTH_TRANSACTED > ' + @TO_COMPARE;

            IF @COMPARISON = '>='
                SET @QUERY += ' AND [RD].MONTH_TRANSACTED >= ' + @TO_COMPARE;

            IF @COMPARISON = 'BETWEEN'
                SET @QUERY += ' AND [RD].MONTH_TRANSACTED >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RD].MONTH_TRANSACTED <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

        END
        --     ELSE IF @F1_NAME = 'LAST_HOUR' BEGIN
        --     
        --     END
        --     ELSE IF @F1_NAME = 'LAST_DAY' BEGIN
        --     
        --     END
        --     ELSE IF @F1_NAME = 'SAME_DAY' BEGIN
        --     
        --     END
        --     ELSE IF @F1_NAME = 'SAME_MONTH' BEGIN
        --     
        --     END

        FETCH NEXT FROM DETAIL_CURSOR
            INTO @COD_DETAIL
                ,   @COD_FIELD
                ,   @F1_NAME
                ,   @F1_TYPE
                ,   @F1_PARTIAL
                ,   @F1_IS_SYSTEM
                ,   @COMPARISON
                ,   @AMOUNT
                ,   @AMOUNT_UNTIL
                ,   @COD_SIT
                ,   @COD_FIELD2
                ,   @F2_NAME
                ,   @F2_TYPE
                ,   @F2_PARTIAL
                ,   @F2_SYSTEM
                ,   @PERCENT

    END

    CLOSE DETAIL_CURSOR
    DEALLOCATE DETAIL_CURSOR

    SET @QUERY = SUBSTRING(@QUERY, 5, LEN(@QUERY))
    DECLARE @JClause NVARCHAR(MAX)

    IF @IS_EC_FILTER = 1 BEGIN

        SELECT @JClause = SUBSTRING(
                (
                    SELECT ' AND '+ s.value + ' = ' + REPLACE(REPLACE(REPLACE(s.value, '[RAQ]', '[tgr]'), 'CE', '[tgr]'), '[RD]', '[tgr]')  AS [text()]
                    FROM STRING_SPLIT(@QUERY_GROUP, ',') s
                    FOR XML PATH ('')
                ), 5, 1000)

        SET @Group_Filter = SUBSTRING(@Group_Filter, 5, LEN(@Group_Filter))

        IF LEN(@Group_Filter) > 0 BEGIN
            SET @Group_Filter = ' HAVING ' + @Group_Filter
        END

        SET @QUERY = 'SELECT ' + @QUERY_GROUP + '
            INTO #tmpGrp
        FROM RISK_ANALYSIS_QUEUE [RAQ]
            JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
            JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC 
        WHERE ' +  @QUERY + '
        GROUP BY ' + @QUERY_GROUP + '
         ' + @Group_Filter + '; 

        DECLARE @ECS CODE_TYPE
        
        INSERT INTO @ECS (CODE)
        SELECT COD_EC FROM #tmpGrp;
        
        exec SP_RISK_FRAUD_LIMIT_CHK @ECS, ' + CAST(@EC_FILTER_TYPE AS VARCHAR) + ', @COD_RULE;
        '

        -- SELECT @QUERY

        EXEC sp_executesql @QUERY, N' @COD_RULE INT ', @COD_RULE = @COD_RULE;

    END ELSE IF @QUERY_GROUP = '' BEGIN

        SET @QUERY = '
            SELECT RAQ.COD_TRAN
              , RAQ.TRANSACTION_DATE
              , RAQ.AMOUNT
              , RAQ.COD_SITUATION
              , RAQ.COD_ASS_DEPTO_TERMINAL
              , RAQ.COD_EC
              , RAQ.PAN
              , @COD_RULE [COD_RULE]
              , RAQ.CODE
            FROM RISK_ANALYSIS_QUEUE [RAQ]
                  JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
                  JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
            WHERE ' + @QUERY;

        -- SELECT @QUERY

        EXEC sp_executesql @QUERY, N' @COD_RULE INT ', @COD_RULE = @COD_RULE;

    END ELSE BEGIN

        SELECT @JClause = SUBSTRING(
                (
                    SELECT ' AND '+ s.value + ' = ' + REPLACE(REPLACE(REPLACE(s.value, '[RAQ]', '[tgr]'), 'CE', '[tgr]'), '[RD]', '[tgr]')  AS [text()]
                    FROM STRING_SPLIT(@QUERY_GROUP, ',') s
                    FOR XML PATH ('')
                ), 5, 1000)

        SET @Group_Filter = SUBSTRING(@Group_Filter, 5, LEN(@Group_Filter))

        IF LEN(@Group_Filter) > 0 BEGIN
            SET @Group_Filter = ' HAVING ' + @Group_Filter
        END

        SET @QUERY = 'SELECT ' + @QUERY_GROUP + '
            INTO #tmpGrp
        FROM RISK_ANALYSIS_QUEUE [RAQ]
            JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
            JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC 
        WHERE ' +  @QUERY + '
        GROUP BY ' + @QUERY_GROUP + '
         ' + @Group_Filter + ';
                
        SELECT RAQ.COD_TRAN
              , RAQ.TRANSACTION_DATE
              , RAQ.AMOUNT
              , RAQ.COD_SITUATION
              , RAQ.COD_ASS_DEPTO_TERMINAL
              , RAQ.COD_EC
              , RAQ.PAN
              , @COD_RULE [COD_RULE]
              , RAQ.CODE
            FROM RISK_ANALYSIS_QUEUE [RAQ]
                JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
                JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
                JOIN #tmpGrp tgr ON ' + @JClause + '
            WHERE ' +  @QUERY

        -- SELECT @QUERY

        EXEC sp_executesql @QUERY, N' @COD_RULE INT ', @COD_RULE = @COD_RULE;

    END
END
GO

IF OBJECT_ID('SP_LS_RISK_FRAUD_RULE') IS NOT NULL
    DROP PROCEDURE SP_LS_RISK_FRAUD_RULE
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_RULE
(
    @ACTIVE INT = 1
)
AS BEGIN

    SELECT COD_RULE, CREATED_AT, DESCRIPTION, ACTIVE, IIF(EXISTS(SELECT COD_RULE_DETAIL FROM RISK_FRAUD_RULE_DETAIL RFD WHERE RFD.COD_RULE = RFR.COD_RULE AND RFD.COMPARISON = 'FILTER'), 1, 0) HAS_FILTER
    FROM RISK_FRAUD_RULE RFR
    WHERE ACTIVE = @ACTIVE

END
GO
IF OBJECT_ID('SP_LS_RISK_RULE_DETAIL') IS NOT NULL
    DROP PROCEDURE SP_LS_RISK_RULE_DETAIL
GO
CREATE PROCEDURE SP_LS_RISK_RULE_DETAIL
(
    @COD_RULE INT
) AS BEGIN

    SELECT
        COD_RULE_DETAIL
         , COD_FIELD
         , F1.NAME [F1_NAME]
         , F1.TYPE [F1_TYPE]
         , F1.PARTIAL [F1_IS_PARTIAL]
         , F1.SYSTEM_VALUE [F1_IS_SYTEM]
         , COMPARISON
         , AMOUNT
         , AMOUNT_UNTIL
         , COD_SITUATION
         , COD_FIELD_COMPARE
         , F2.NAME [F2_NAME]
         , F2.TYPE [F2_TYPE]
         , F2.PARTIAL [F2_IS_PARTIAL]
         , F2.SYSTEM_VALUE [F2_IS_SYTEM]
         , PERCENTAGE
    FROM RISK_FRAUD_RULE_DETAIL D
             LEFT JOIN RISK_FRAUD_FIELD F1 ON F1.COD_RISK_FIELD = D.COD_FIELD
             LEFT JOIN RISK_FRAUD_FIELD F2 ON F2.COD_RISK_FIELD = D.COD_FIELD_COMPARE
    WHERE COD_RULE = @COD_RULE
    ORDER BY D.FIELD_ORDER
    
END
GO

IF OBJECT_ID('RISK_FRAUD_ALERT') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_ALERT
    (
        COD_FRAUD_ALERT INT NOT NULL PRIMARY KEY IDENTITY,
        COD_TRAN INT NOT NULL  REFERENCES [TRANSACTION](COD_TRAN),
        TRANSACTION_DATE DATETIME NOT NULL,
        AMOUNT DECIMAL(22, 6) NOT NULL,
        COD_SITUATION INT NOT NULL,
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP (COD_ASS_DEPTO_TERMINAL),
        COD_EC INT NOT NULL,
        ACTIVE INT NOT NULL DEFAULT (1),
        PAN VARCHAR(100) NULL,
        CODE VARCHAR(100) NULL,
        COD_USER INT REFERENCES USERS(COD_USER),
        COMMENT VARCHAR(256) NULL,
        [ACTION] VARCHAR(64)
    )
END
GO



IF OBJECT_ID('RISK_FRAUD_ALERT_RULE') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_ALERT_RULE
    (
        COD_FRAUD_ALERT INT NOT NULL REFERENCES RISK_FRAUD_ALERT(COD_FRAUD_ALERT),
        COD_RULE INT NOT NULL REFERENCES RISK_FRAUD_RULE (COD_RULE),
        PRIMARY KEY (COD_FRAUD_ALERT, COD_RULE),
        GROUP_CODE VARCHAR(64) NULL
    )
END
GO   

IF OBJECT_ID('SP_REG_ALERT_RISK_FRAUD') IS NOT NULL
    DROP PROCEDURE SP_REG_ALERT_RISK_FRAUD
GO
IF TYPE_ID('RISK_ALERT_TP') IS NOT NULL
    DROP TYPE RISK_ALERT_TP
GO
CREATE TYPE RISK_ALERT_TP AS TABLE
(
    COD_TRAN INT NOT NULL,
    TRANSACTION_DATE DATETIME NOT NULL,
    AMOUNT DECIMAL(22, 6) NOT NULL,
    COD_SITUATION INT NOT NULL,
    COD_ASS_DEPTO_TERMINAL INT NULL,
    COD_EC INT NOT NULL,
    PAN VARCHAR(100) NULL,
    COD_RULE INT NOT NULL,
    GROUP_CODE VARCHAR(64) NULL,
    CODE VARCHAR(100) NULL
)
GO
CREATE PROCEDURE SP_REG_ALERT_RISK_FRAUD
(
    @ALERTS RISK_ALERT_TP READONLY
) AS BEGIN

    INSERT INTO RISK_FRAUD_ALERT (COD_TRAN, TRANSACTION_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE)
    SELECT A.COD_TRAN, A.TRANSACTION_DATE, A.AMOUNT, A.COD_SITUATION, A.COD_ASS_DEPTO_TERMINAL, A.COD_EC, A.PAN, CODE
    FROM @ALERTS A
    WHERE (SELECT COUNT(*) FROM RISK_FRAUD_ALERT RFA1 WHERE RFA1.COD_TRAN = A.COD_TRAN) = 0

    INSERT INTO RISK_FRAUD_ALERT_RULE(COD_FRAUD_ALERT, COD_RULE, GROUP_CODE)
    SELECT RFA.COD_FRAUD_ALERT, A.COD_RULE, A.GROUP_CODE
    FROM @ALERTS A
             JOIN RISK_FRAUD_ALERT RFA ON RFA.COD_TRAN = A.COD_TRAN
    WHERE (SELECT COUNT(*) FROM RISK_FRAUD_ALERT_RULE RFAR WHERE RFAR.COD_RULE = A.COD_RULE AND RFA.COD_FRAUD_ALERT = RFAR.COD_FRAUD_ALERT) = 0

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_LIMIT_CHK') IS NOT NULL
    DROP PROCEDURE SP_RISK_FRAUD_LIMIT_CHK
GO
CREATE PROCEDURE SP_RISK_FRAUD_LIMIT_CHK
(
    @ECS CODE_TYPE READONLY,
    @TYPE INT = 1,
    @COD_RULE INT = 1
) AS BEGIN

    DECLARE @COD_EC INT, @TRANS CODE_TYPE;

    DECLARE EC_CURSOR CURSOR FOR SELECT CODE FROM @ECS;

    OPEN EC_CURSOR FETCH NEXT FROM EC_CURSOR INTO @COD_EC;

    WHILE @@FETCH_STATUS = 0 BEGIN

        DECLARE @COD_TRAN INT, @AMOUNT DECIMAL(22, 6), @CUR_TOTAL DECIMAL(22, 6), @LIMIT DECIMAL(22, 6), @CONTINUE_FETCH INT = 1, @UP_DATE DATETIME;
        DECLARE @START_DATE DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @UP_DATE), 0)
        
        IF @TYPE = 1 BEGIN

            SELECT @CUR_TOTAL = DAY_TRANSACTED, @LIMIT = CE.LIMIT_TRANSACTION_DIALY, @UP_DATE = LAST_UPDATE
            FROM RISK_ANALYSIS_DATA RAD
                     JOIN COMMERCIAL_ESTABLISHMENT CE on RAD.COD_EC = CE.COD_EC
            WHERE RAD.COD_EC = @COD_EC

            SET @START_DATE = CAST(@UP_DATE AS DATE)
            
        END ELSE BEGIN

            SELECT @CUR_TOTAL = MONTH_TRANSACTED, @LIMIT = CE.LIMIT_TRANSACTION_MONTHLY, @UP_DATE = LAST_UPDATE
            FROM RISK_ANALYSIS_DATA RAD
                     JOIN COMMERCIAL_ESTABLISHMENT CE on RAD.COD_EC = CE.COD_EC
            WHERE RAD.COD_EC = @COD_EC

            SET @START_DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @UP_DATE), 0)
            
        END

        DECLARE EC_TRANS CURSOR FOR
            SELECT COD_TRAN, AMOUNT
            FROM RISK_ANALYSIS_QUEUE
            WHERE COD_EC = @COD_EC AND COD_SITUATION IN (3, 22) AND TRANSACTION_DATE BETWEEN @START_DATE AND @UP_DATE
            ORDER BY COD_TRAN DESC;

        OPEN EC_TRANS FETCH NEXT FROM EC_TRANS INTO @COD_TRAN, @AMOUNT;

        WHILE @@FETCH_STATUS = 0 AND @CONTINUE_FETCH = 1 BEGIN

            INSERT INTO @TRANS (CODE) VALUES (@COD_TRAN)

            SET @CUR_TOTAL -= @AMOUNT;

            IF @CUR_TOTAL < @LIMIT SET @CONTINUE_FETCH = 0

            FETCH NEXT FROM EC_TRANS INTO @COD_TRAN, @AMOUNT;

        END
        CLOSE EC_TRANS;
        DEALLOCATE EC_TRANS;

        FETCH NEXT FROM EC_CURSOR INTO @COD_EC;

    END

    CLOSE EC_CURSOR;
    DEALLOCATE EC_CURSOR;

    SELECT RAQ.COD_TRAN
         , RAQ.TRANSACTION_DATE
         , RAQ.AMOUNT
         , RAQ.COD_SITUATION
         , RAQ.COD_ASS_DEPTO_TERMINAL
         , RAQ.COD_EC
         , RAQ.PAN
         , @COD_RULE [COD_RULE]
         , RAQ.CODE
    FROM RISK_ANALYSIS_QUEUE [RAQ]
             JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
             JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
    WHERE RAQ.COD_TRAN IN (SELECT CODE FROM @TRANS)

END
GO


IF OBJECT_ID('SP_REG_RISK_FRAUD_QUEUE') IS NOT NULL
    DROP PROCEDURE SP_REG_RISK_FRAUD_QUEUE
GO
CREATE PROCEDURE SP_REG_RISK_FRAUD_QUEUE
AS BEGIN

    DECLARE @COD_TRAN INT;
    DECLARE @MAX_WINDOW_DAYS INT = 35

    IF (SELECT COUNT(*) FROM RISK_ANALYSIS_QUEUE) = 0 BEGIN

        DECLARE @FROM_DATE DATE = DATEADD(DAY, -@MAX_WINDOW_DAYS, GETDATE())
        SELECT TOP 1 @COD_TRAN = (COD_TRAN - 1) FROM [TRANSACTION] WHERE CREATED_AT >= @FROM_DATE

    END ELSE BEGIN

        SELECT TOP 1 @COD_TRAN = COD_TRAN FROM RISK_ANALYSIS_QUEUE ORDER BY COD_TRAN DESC

    END

    INSERT INTO RISK_ANALYSIS_QUEUE (COD_TRAN, TRANSACTION_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE)
    SELECT COD_TRAN, BRAZILIAN_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE
    FROM [TRANSACTION]
    WHERE COD_TRAN > @COD_TRAN

END
GO


IF OBJECT_ID('SP_CLEAN_RISK_FRAUD_QUEUE') IS NOT NULL
    DROP PROCEDURE SP_CLEAN_RISK_FRAUD_QUEUE
GO
CREATE PROCEDURE SP_CLEAN_RISK_FRAUD_QUEUE
AS BEGIN
   
    DECLARE @MAX_QUEUE_DAYS INT = 35
    DECLARE @MAX_OLDER_DATE DATE = dbo.FN_FUS_UTF( CAST( DATEADD( DAY, -@MAX_QUEUE_DAYS, GETDATE() ) AS DATE ) )
     
    DELETE FROM RISK_ANALYSIS_QUEUE WHERE TRANSACTION_DATE < @MAX_OLDER_DATE
    
END
GO


IF OBJECT_ID('SP_LS_RISK_FRAUD_NOTIFY') IS NOT NULL
    DROP PROCEDURE SP_LS_RISK_FRAUD_NOTIFY
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_NOTIFY
(
    @PAGE INT = 1,
    @PAGE_SIZE INT = 10,
    @ACTIVE INT = 1,
    @TOTAL INT OUTPUT
)
AS BEGIN
    DECLARE @OFF_SIZE INT = (@PAGE -1) * @PAGE_SIZE

    SELECT @TOTAL = COUNT(*) FROM RISK_FRAUD_ALERT RFA WHERE RFA.ACTIVE = @ACTIVE

    SELECT COD_FRAUD_ALERT,
           COD_TRAN,
           TRANSACTION_DATE,
           AMOUNT,
           COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME],
           E.SERIAL,
           CE.TRADING_NAME [EC_NAME],
           CE.CPF_CNPJ,
           PAN,
           SUBSTRING((
                         SELECT ('; ' + RFAR.GROUP_CODE) AS [text()]
                         FROM RISK_FRAUD_ALERT_RULE RFAR
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
                         FOR XML PATH('')
                     ), 3, 1000) AS [GROUP_CODE],
           SUBSTRING((
                         SELECT (', ' + RFR.DESCRIPTION) AS [text()]
                         FROM RISK_FRAUD_ALERT_RULE RFAR
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
                         FOR XML PATH('')
                     ), 3, 1000) [Rules],
           A.NAME [Affiliated],
           RFA.CODE [NSU]
    FROM RISK_FRAUD_ALERT RFA
             JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION
             LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC
             LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = CE.COD_AFFILIATOR
    WHERE RFA.ACTIVE = @ACTIVE
    ORDER BY COD_TRAN DESC
    OFFSET @OFF_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY
END
GO


IF OBJECT_ID('SP_RISK_FRAUD_ALERT_INFO') IS NOT NULL
    DROP PROCEDURE SP_RISK_FRAUD_ALERT_INFO
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_INFO
(
    @COD_FRAUD_ALERT INT
) AS BEGIN

    SELECT COD_FRAUD_ALERT,
           RFA.COD_TRAN,
           RFA.TRANSACTION_DATE,
           RFA.AMOUNT,
           COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME],
           E.SERIAL,
           CE.NAME [EC_NAME],
           CE.CPF_CNPJ,
           RFA.PAN,
           SUBSTRING((
                         SELECT ('; ' + RFAR.GROUP_CODE) AS [text()]
                         FROM RISK_FRAUD_ALERT_RULE RFAR
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
                         FOR XML PATH('')
                     ), 3, 1000) AS [GROUP_CODE],
           T.CODE [TRAN_CODE],
           T.PLOTS,
           TT.NAME [TTYPE],
           T.BRAND,
           A.NAME [Afiliator],
           A.CPF_CNPJ [AFF_DOC],
           ST.DESCRIPTION [SOURCE],
           T.COMMENT,
           T.CARD_HOLDER_NAME,
           T.CARD_HOLDER_DOC,
           T.CUSTOMER_EMAIL,
           T.CUSTOMER_IDENTIFICATION,
           RTe.NAME_ACQUIRER [ACQ_NAME],
           RTE.TRANSACTION_CODE [NSU],
           RTE.TRAN_DATA_EXT_VALUE,
           RTE.LINK_PAYMENT_SERVICE,
           RTE.TERMINAL_VERSION,
           RTe.LOGICAL_NUMBER_ACQ,
           RFA.COD_EC,
           IIF(RFA.COD_SITUATION = 3, IIF((SELECT COUNT(*) FROM TRANSACTION_TITLES TT WHERE TT.COD_EC = RFA.COD_EC AND TT.COD_TRAN = RFA.COD_TRAN AND TT.COD_SITUATION = 17) >= 1, 0, 1), 0 ) [CANCELABLE],
           SEG.NAME [SEGMENT],
           RFA.ACTION
    FROM RISK_FRAUD_ALERT RFA
             JOIN [TRANSACTION] T ON T.COD_TRAN = RFA.COD_TRAN
             LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION
             LEFT JOIN SITUATION S ON S.COD_SITUATION = RFA.COD_SITUATION
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC
             LEFT JOIN TRANSACTION_TYPE TT on TT.COD_TTYPE = T.COD_TTYPE
             LEFT JOIN AFFILIATOR A on T.COD_AFFILIATOR = A.COD_AFFILIATOR
             LEFT JOIN SOURCE_TRANSACTION ST ON ST.COD_SOURCE_TRAN = T.COD_SOURCE_TRAN
             LEFT JOIN REPORT_TRANSACTIONS_EXP RTE ON RTE.COD_TRAN = RFA.COD_TRAN
             LEFT JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG
    WHERE RFA.COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END
GO


IF OBJECT_ID('SP_RISK_FRAUD_ALERT_RULES') IS NOT NULL
    DROP PROCEDURE SP_RISK_FRAUD_ALERT_RULES
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_RULES
(
    @COD_FRAUD_ALERT INT
) AS BEGIN
    SELECT
        RFR.DESCRIPTION,
        'Transaçao onde ' + SUBSTRING((
          SELECT
              (
                      ' e ' +
                      IIF(RFD.COMPARISON = 'GROUP', 'Agrupar por ', IIF( F1.TYPE = 'GROUPING', 'Quantidade por ', '' )) +
                      IIF( F1.TYPE != 'FILTER',  F1.DESCRIPTION, REPLACE(F1.DESCRIPTION, 'x', IIF(RFD.AMOUNT IS NOT NULL, IIF( F1.TYPE = 'DECIMAL', CAST(RFD.AMOUNT AS VARCHAR), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)), '')) ) +
                      IIF( RFD.COMPARISON = 'BETWEEN', ' ENTRE ' +  IIF( F1.TYPE = 'DECIMAL',FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)) + ' E ' + IIF( F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT_UNTIL, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT_UNTIL AS INT) AS VARCHAR)), '' ) +
                      IIF( RFD.COMPARISON != 'BETWEEN' AND RFD.COMPARISON != 'GROUP' AND RFD.COD_FIELD_COMPARE IS NULL AND F1.TYPE != 'FILTER' AND RFD.AMOUNT IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF( F1.TYPE = 'DECIMAL',FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR))  , '' ) +
                      IIF( RFD.COD_SITUATION IS NOT NULL, ' ' + COALESCE(TS.SITUATION_TR, S.NAME) , '' ) +
                      IIF( RFD.COD_FIELD_COMPARE IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF( RFD.PERCENTAGE IS NOT NULL, CAST(CAST(RFD.PERCENTAGE AS INT) AS VARCHAR) + '% do ', '' ) + F2.DESCRIPTION , '')
                  )    AS [text()]
          from RISK_FRAUD_RULE_DETAIL RFD
                   JOIN RISK_FRAUD_FIELD F1 on RFD.COD_FIELD = F1.COD_RISK_FIELD
                   LEFT JOIN RISK_FRAUD_FIELD F2 ON F2.COD_RISK_FIELD = RFD.COD_FIELD_COMPARE
                   LEFT JOIN SITUATION S on RFD.COD_SITUATION = S.COD_SITUATION
                   LEFT JOIN TRADUCTION_SITUATION TS on RFD.COD_SITUATION = TS.COD_SITUATION
          WHERE COD_RULE = RFAR.COD_RULE
          FOR XML PATH ('')
      ), 4, 1000) [DETAIL]
    FROM RISK_FRAUD_ALERT_RULE RFAR
             JOIN RISK_FRAUD_RULE RFR on RFAR.COD_RULE = RFR.COD_RULE
    WHERE RFAR.COD_FRAUD_ALERT =  @COD_FRAUD_ALERT
END
GO



IF OBJECT_ID('SP_LS_RISK_FRAUD_GROUP_DETAIL') IS NOT NULL
    DROP PROCEDURE SP_LS_RISK_FRAUD_GROUP_DETAIL
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_GROUP_DETAIL
(
    @GROUP_CODE VARCHAR(64)
)
AS BEGIN

    SELECT COD_FRAUD_ALERT,
           COD_TRAN,
           TRANSACTION_DATE,
           AMOUNT,
           S.NAME [SIT_NAME],
           E.SERIAL,
           CE.NAME [EC_NAME],
           CE.CPF_CNPJ,
           PAN,
           @GROUP_CODE [GROUP_CODE],
           SUBSTRING((
                         SELECT (', ' + RFR.DESCRIPTION) AS [text()]
                         FROM RISK_FRAUD_ALERT_RULE RFAR
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
                         FOR XML PATH('')
                     ), 3, 1000) [Rules]
    FROM RISK_FRAUD_ALERT RFA
             JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC
    WHERE (SELECT COUNT(*) FROM RISK_FRAUD_ALERT_RULE RFAR WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT AND RFAR.GROUP_CODE = @GROUP_CODE) > 0    
    ORDER BY COD_TRAN DESC
END
GO

IF OBJECT_ID('SP_CLEAN_RISK_ALERT_HIST') IS NOT NULL
    DROP PROCEDURE SP_CLEAN_RISK_ALERT_HIST
GO
CREATE PROCEDURE SP_CLEAN_RISK_ALERT_HIST
AS BEGIN
    
    DELETE FROM RISK_FRAUD_ALERT WHERE ACTIVE = 0 AND DATEDIFF(MONTH, TRANSACTION_DATE, GETDATE()) > 6
    
END
GO

IF OBJECT_ID('RISK_ANALYSIS_DATA_EC') IS NOT NULL
    DROP PROCEDURE RISK_ANALYSIS_DATA_EC
GO
CREATE PROCEDURE RISK_ANALYSIS_DATA_EC
(
    @COD_EC INT
) AS BEGIN
    
    SELECT RAD.COD_EC,
           RAD.AVG_THIRTY_DAYS,
           RAD.AVG_SEVEN_DAYS,
           RAD.AVG_TICKET_MONTH,
           RAD.AVG_TICKET_WEEK,
           RAD.AVG_TICKET_DAY,
           RAD.MONTH_TRANSACTED,
           RAD.DAY_TRANSACTED,
           RAD.WEEK_TRANSACTED,
           RAD.LAST_UPDATE,
           CE.LIMIT_TRANSACTION_MONTHLY,
           CE.LIMIT_TRANSACTION_DIALY
    FROM RISK_ANALYSIS_DATA RAD
    JOIN COMMERCIAL_ESTABLISHMENT CE ON RAD.COD_EC = CE.COD_EC
    WHERE RAD.COD_EC = @COD_EC
    
END
GO

IF OBJECT_ID('SP_DISMISS_RISK_FRAUD_ALERT') IS NOT NULL
    DROP PROCEDURE  SP_DISMISS_RISK_FRAUD_ALERT
GO
CREATE PROCEDURE SP_DISMISS_RISK_FRAUD_ALERT
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256)
) AS BEGIN

    UPDATE RISK_FRAUD_ALERT SET ACTIVE = 0, COD_USER = @COD_USER, COMMENT = @COMMENT, [ACTION] = 'CLEARED'
    WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_CANCEL_TRAN') IS NOT NULL
    DROP PROCEDURE  SP_RISK_FRAUD_CANCEL_TRAN
GO
CREATE PROCEDURE SP_RISK_FRAUD_CANCEL_TRAN
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256)
) AS BEGIN

    DECLARE @SITUATIONS TABLE ( SITNAME VARCHAR(100) NULL, COD_SIT INT NULL );
    DECLARE @COD_TRAN INT, @CODE_TRAN VARCHAR(200), @CANCELED VARCHAR(100);

    SELECT @COD_TRAN = RFA.COD_TRAN, @CODE_TRAN =  RFA.CODE FROM RISK_FRAUD_ALERT RFA WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT;

    INSERT INTO @SITUATIONS (SITNAME, COD_SIT)
    SELECT DISTINCT S.NAME, S.COD_SITUATION
    FROM TRANSACTION_TITLES TT
             JOIN SITUATION S ON TT.COD_SITUATION = S.COD_SITUATION
    WHERE TT.COD_SITUATION = @COD_TRAN;



    IF (SELECT COUNT(*) FROM @SITUATIONS S WHERE S.SITNAME = 'PAID') >= 0 BEGIN

        SET @CANCELED = 'CANCELED PARTIAL'

    END ELSE IF (SELECT COUNT(*) FROM @SITUATIONS S WHERE S.SITNAME = 'AWAITING PAYMENT') >= 0 BEGIN

        SET @CANCELED = 'CANCELED'

    END

    IF @CANCELED IS NOT NULL BEGIN

        exec SP_UP_TRANSACTION @CODE_TRAN = @CODE_TRAN, @SITUATION = @CANCELED, @DESCRIPTION = @COMMENT, @CURRENCY = '786', @COD_USER = @COD_USER

        UPDATE RISK_FRAUD_ALERT SET ACTIVE = 0, COD_USER = @COD_USER, COMMENT = @COMMENT, [ACTION] = @CANCELED
        WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

    END

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_ALERT_EXPORT') IS NOT NULL
    DROP PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT
(
    @ACTIVE INT = 1
) AS BEGIN

    SELECT COD_FRAUD_ALERT,
           RFA.COD_TRAN,
           RFA.TRANSACTION_DATE,
           RFA.AMOUNT,
           COALESCE(RTE.SITUATION, S.NAME) [SIT_NAME],
           RTE.SERIAL_EQUIP AS [SERIAL],
           CE.NAME [EC_NAME],
           CE.CPF_CNPJ,
           RFA.PAN,
           SUBSTRING((
                         SELECT ('; ' + RFAR.GROUP_CODE) AS [text()]
                         FROM RISK_FRAUD_ALERT_RULE RFAR
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
                         FOR XML PATH('')
                     ), 3, 1000) AS [GROUP_CODE],
           RTE.TRANSACTION_CODE [TRAN_CODE],
           RTE.PLOTS,
           RTE.TRANSACTION_TYPE [TTYPE],
           RTE.BRAND,
           A.NAME [Afiliator],
           A.CPF_CNPJ [AFF_DOC],
           ST.DESCRIPTION [SOURCE],
           RTE.COMMENT,
           RTE.CARD_NAME,
           RTE.CARD_HOLDER_DOC,
           RTE.CUSTOMER_EMAIL,
           RTE.CUSTOMER_IDENTIFICATION,
           RTE.NAME_ACQUIRER [ACQ_NAME],
           RTE.TRANSACTION_CODE [NSU],
           RTE.TRAN_DATA_EXT_VALUE,
           RTE.LINK_PAYMENT_SERVICE,
           RTE.TERMINAL_VERSION,
           RTe.LOGICAL_NUMBER_ACQ,
           RFA.COD_EC,
           SEG.NAME [SEGMENT],
           RFA.ACTION,
           RAD.AVG_THIRTY_DAYS,
           RAD.AVG_SEVEN_DAYS,
           RAD.AVG_TICKET_MONTH,
           RAD.AVG_TICKET_WEEK,
           RAD.MONTH_TRANSACTED,
           RAD.DAY_TRANSACTED,
           CE.LIMIT_TRANSACTION_MONTHLY,
           CE.LIMIT_TRANSACTION_DIALY,
           SUBSTRING((
                         SELECT (', ' + RFR.DESCRIPTION) AS [text()]
                         FROM RISK_FRAUD_ALERT_RULE RFAR
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
                         FOR XML PATH('')
                     ), 3, 1000) [Rules]
    FROM RISK_FRAUD_ALERT RFA
             LEFT JOIN REPORT_TRANSACTIONS_EXP RTE ON RTE.COD_SITUATION = RFA.COD_SITUATION AND RFA.COD_TRAN = RTE.COD_TRAN
             LEFT JOIN SITUATION S ON S.COD_SITUATION = RFA.COD_SITUATION
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC
             LEFT JOIN AFFILIATOR A on CE.COD_AFFILIATOR = A.COD_AFFILIATOR
             LEFT JOIN SOURCE_TRANSACTION ST ON ST.COD_SOURCE_TRAN = RTE.COD_SOURCE_TRAN
             LEFT JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG
             LEFT JOIN RISK_ANALYSIS_DATA RAD ON RAD.COD_EC = RFA.COD_EC
    WHERE RFA.ACTIVE = @ACTIVE

END
go

IF OBJECT_ID('SP_LS_RISK_FRAUD_RULES') IS NOT NULL
    DROP PROCEDURE SP_LS_RISK_FRAUD_RULES
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_RULES
AS BEGIN
    SELECT
        RFR.DESCRIPTION,
        'Transaçao onde ' + SUBSTRING((
          SELECT
          (
            ' e ' +
            IIF(RFD.COMPARISON = 'GROUP', 'Agrupar por ', IIF( F1.TYPE = 'GROUPING', 'Quantidade por ', '' )) +
            IIF( F1.TYPE != 'FILTER',  F1.DESCRIPTION, REPLACE(F1.DESCRIPTION, 'x', IIF(RFD.AMOUNT IS NOT NULL, IIF( F1.TYPE = 'DECIMAL', CAST(RFD.AMOUNT AS VARCHAR), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)), '')) ) +
            IIF( RFD.COMPARISON = 'BETWEEN', ' ENTRE ' +  IIF( F1.TYPE = 'DECIMAL',FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)) + ' E ' + IIF( F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT_UNTIL, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT_UNTIL AS INT) AS VARCHAR)), '' ) +
            IIF( RFD.COMPARISON != 'BETWEEN' AND RFD.COMPARISON != 'GROUP' AND RFD.COD_FIELD_COMPARE IS NULL AND F1.TYPE != 'FILTER' AND RFD.AMOUNT IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF( F1.TYPE = 'DECIMAL',FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR))  , '' ) +
            IIF( RFD.COD_SITUATION IS NOT NULL, ' ' + COALESCE(TS.SITUATION_TR, S.NAME) , '' ) +
            IIF( RFD.COD_FIELD_COMPARE IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF( RFD.PERCENTAGE IS NOT NULL, CAST(CAST(RFD.PERCENTAGE AS INT) AS VARCHAR) + '% do ', '' ) + F2.DESCRIPTION , '')
          )    AS [text()]
          from RISK_FRAUD_RULE_DETAIL RFD
                   JOIN RISK_FRAUD_FIELD F1 on RFD.COD_FIELD = F1.COD_RISK_FIELD
                   LEFT JOIN RISK_FRAUD_FIELD F2 ON F2.COD_RISK_FIELD = RFD.COD_FIELD_COMPARE
                   LEFT JOIN SITUATION S on RFD.COD_SITUATION = S.COD_SITUATION
                   LEFT JOIN TRADUCTION_SITUATION TS on RFD.COD_SITUATION = TS.COD_SITUATION
          WHERE COD_RULE = RFR.COD_RULE
          FOR XML PATH ('')
        ), 4, 1000) [DETAIL]
    FROM RISK_FRAUD_RULE RFR
END
GO

--ET-1377

GO

--ET-1377 V2

IF OBJECT_ID('SP_LS_RISK_FRAUD_NOTIFY') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LS_RISK_FRAUD_NOTIFY;
END
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_NOTIFY  
(  
    @PAGE INT = 1,  
    @PAGE_SIZE INT = 10,  
    @ACTIVE INT = 1,  
	@INITIAL_DATE DATETIME = NULL,              
	@FINAL_DATE DATETIME = NULL,
	@COD_AFF INT = NULL,              
	@COD_EC INT = NULL,              
	@NSU VARCHAR(100) = NULL,              
	@BIN VARCHAR(20) = NULL,      
    @TOTAL INT OUTPUT  
)  
AS BEGIN  
    DECLARE @OFF_SIZE INT = (@PAGE -1) * @PAGE_SIZE  
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';      
	SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);  

	SET @QUERY_BASIS = ' 
    SELECT COUNT(RFA.COD_FRAUD_ALERT) FROM RISK_FRAUD_ALERT RFA 
	JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC
	WHERE RFA.ACTIVE = @ACTIVE ' 

	IF LEN(@NSU) > 0      
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.CODE = @NSU ');    
    ELSE 
		BEGIN

		IF (@COD_AFF IS NOT NULL)      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CE.COD_AFFILIATOR = @COD_AFF ');      
	
		IF (@COD_EC IS NOT NULL)      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

  		IF LEN(@BIN) > 0      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

		IF @INITIAL_DATE IS NOT NULL AND @FINAL_DATE IS NOT NULL      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');      
		END

	DECLARE @rowcount TABLE ([VALUE] int);
	INSERT INTO @rowcount 
	EXEC [sp_executesql] @QUERY_BASIS      
     ,N'                                                   
        @ACTIVE INT,                                           
        @INITIAL_DATE DATETIME,                                           
        @FINAL_DATE DATETIME,
		@COD_AFF INT,              
		@COD_EC INT,              
		@NSU VARCHAR(100),              
		@BIN VARCHAR(20)
        '      
		,@ACTIVE		= @ACTIVE      
		,@INITIAL_DATE	= @INITIAL_DATE      
		,@FINAL_DATE	= @FINAL_DATE
		,@COD_AFF		= @COD_AFF      
  		,@COD_EC		= @COD_EC 
		,@NSU			= @NSU
		,@BIN			= @BIN
	
	SELECT @TOTAL = [VALUE] FROM @rowcount;
  
	SET @QUERY_BASIS = ' 
    SELECT COD_FRAUD_ALERT,  
           COD_TRAN,  
           TRANSACTION_DATE,  
           AMOUNT,  
           COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME],  
           E.SERIAL,  
           CE.TRADING_NAME [EC_NAME],  
           CE.CPF_CNPJ,  
           PAN,  
           SUBSTRING((  
                         SELECT (''; '' + RFAR.GROUP_CODE) AS [text()]  
                         FROM RISK_FRAUD_ALERT_RULE RFAR  
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT  
                         FOR XML PATH('''')  
                     ), 3, 1000) AS [GROUP_CODE],  
           SUBSTRING((  
                         SELECT ('', '' + RFR.DESCRIPTION) AS [text()]  
                         FROM RISK_FRAUD_ALERT_RULE RFAR  
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE  
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT  
                         FOR XML PATH('''')  
                     ), 3, 1000) [Rules],  
           A.NAME [Affiliated],  
           RFA.CODE [NSU]  
    FROM RISK_FRAUD_ALERT RFA  
             JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION  
             LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION  
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL  
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP  
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC  
             LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = CE.COD_AFFILIATOR  
    WHERE RFA.ACTIVE = @ACTIVE  '

	IF LEN(@NSU) > 0      
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.CODE = @NSU ');      
	ELSE
	BEGIN

		IF (@COD_EC IS NOT NULL)      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

		IF (@COD_AFF IS NOT NULL)      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND A.COD_AFFILIATOR = @COD_AFF ');      
	
		IF LEN(@BIN) > 0      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');      

		IF @INITIAL_DATE IS NOT NULL AND @FINAL_DATE IS NOT NULL      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');      

	END

	SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY COD_TRAN DESC 
	OFFSET @OFF_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY ');

	EXEC [sp_executesql] @QUERY_BASIS      
     ,N'                                                   
		@PAGE INT,  
		@PAGE_SIZE INT, 
        @ACTIVE INT,                                           
        @INITIAL_DATE DATETIME,                                           
        @FINAL_DATE DATETIME,
		@COD_AFF INT,              
		@COD_EC INT,              
		@NSU VARCHAR(100),              
		@BIN VARCHAR(20),
		@OFF_SIZE INT
        '      
		,@PAGE			= @PAGE
		,@PAGE_SIZE		= @PAGE_SIZE
		,@ACTIVE		= @ACTIVE      
		,@INITIAL_DATE	= @INITIAL_DATE      
		,@FINAL_DATE	= @FINAL_DATE
		,@COD_AFF		= @COD_AFF      
  		,@COD_EC		= @COD_EC 
		,@NSU			= @NSU
		,@BIN			= @BIN
		,@OFF_SIZE		= @OFF_SIZE

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_ALERT_EXPORT') IS NOT NULL BEGIN
    DROP PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT;
END
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT  
(  
    @ACTIVE INT = 1,
	@INITIAL_DATE DATETIME = NULL,              
	@FINAL_DATE DATETIME = NULL,
	@COD_AFF INT = NULL,              
	@COD_EC INT = NULL,              
	@NSU VARCHAR(100) = NULL,              
	@BIN VARCHAR(20) = NULL      

) AS BEGIN  
  
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';      
	SET NOCOUNT ON;      
	SET ARITHABORT ON;      
	SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);  

	SET @QUERY_BASIS = ' 
	SELECT COD_FRAUD_ALERT,  
           RFA.COD_TRAN,  
           RFA.TRANSACTION_DATE,  
           RFA.AMOUNT,  
           COALESCE(RTE.SITUATION, S.NAME) [SIT_NAME],  
           RTE.SERIAL_EQUIP AS [SERIAL],  
           CE.NAME [EC_NAME],  
           CE.CPF_CNPJ,  
           RFA.PAN,  
           SUBSTRING((  
                         SELECT (''; '' + RFAR.GROUP_CODE) AS [text()]  
                         FROM RISK_FRAUD_ALERT_RULE RFAR  
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT  
                         FOR XML PATH('''')  
                     ), 3, 1000) AS [GROUP_CODE],  
           RTE.TRANSACTION_CODE [TRAN_CODE],  
           RTE.PLOTS,  
           RTE.TRANSACTION_TYPE [TTYPE],  
           RTE.BRAND,  
           A.NAME [Afiliator],  
           A.CPF_CNPJ [AFF_DOC],  
           ST.DESCRIPTION [SOURCE],  
           RTE.COMMENT,  
           RTE.CARD_NAME,  
           RTE.CARD_HOLDER_DOC,  
           RTE.CUSTOMER_EMAIL,  
           RTE.CUSTOMER_IDENTIFICATION,  
           RTE.NAME_ACQUIRER [ACQ_NAME],  
           RTE.TRANSACTION_CODE [NSU],  
           RTE.TRAN_DATA_EXT_VALUE,  
           RTE.LINK_PAYMENT_SERVICE,  
           RTE.TERMINAL_VERSION,  
           RTe.LOGICAL_NUMBER_ACQ,  
           RFA.COD_EC,  
           SEG.NAME [SEGMENT],  
           RFA.ACTION,  
           RAD.AVG_THIRTY_DAYS,  
           RAD.AVG_SEVEN_DAYS,  
           RAD.AVG_TICKET_MONTH,  
           RAD.AVG_TICKET_WEEK,  
           RAD.MONTH_TRANSACTED,  
           RAD.DAY_TRANSACTED,  
           CE.LIMIT_TRANSACTION_MONTHLY,  
           CE.LIMIT_TRANSACTION_DIALY,  
           SUBSTRING((  
                         SELECT ('', '' + RFR.DESCRIPTION) AS [text()]  
                         FROM RISK_FRAUD_ALERT_RULE RFAR  
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE  
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT  
                         FOR XML PATH('''')  
                     ), 3, 1000) [Rules]  
    FROM RISK_FRAUD_ALERT RFA  
             LEFT JOIN REPORT_TRANSACTIONS_EXP RTE ON RFA.COD_TRAN = RTE.COD_TRAN
             LEFT JOIN SITUATION S ON S.COD_SITUATION = RFA.COD_SITUATION  
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC  
             LEFT JOIN AFFILIATOR A on CE.COD_AFFILIATOR = A.COD_AFFILIATOR  
             LEFT JOIN SOURCE_TRANSACTION ST ON ST.COD_SOURCE_TRAN = RTE.COD_SOURCE_TRAN  
             LEFT JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG  
             LEFT JOIN RISK_ANALYSIS_DATA RAD ON RAD.COD_EC = RFA.COD_EC  
    WHERE RFA.ACTIVE = @ACTIVE '

	IF LEN(@NSU) > 0      
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RTE.TRANSACTION_CODE = @NSU ');   
	ELSE
	BEGIN

		IF (@COD_EC IS NOT NULL)      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

   		IF (@COD_AFF IS NOT NULL)      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND A.COD_AFFILIATOR = @COD_AFF ');      
	
		IF LEN(@BIN) > 0      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');     

		IF @INITIAL_DATE IS NOT NULL AND @FINAL_DATE IS NOT NULL      
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');      

	END

	EXEC [sp_executesql] @QUERY_BASIS      
     ,N'                                                   
        @ACTIVE INT,                                           
        @INITIAL_DATE DATETIME,                                           
        @FINAL_DATE DATETIME,
		@COD_AFF INT,              
		@COD_EC INT,              
		@NSU VARCHAR(100),              
		@BIN VARCHAR(20)    
        '      
		,@ACTIVE		= @ACTIVE      
		,@INITIAL_DATE	= @INITIAL_DATE      
		,@FINAL_DATE	= @FINAL_DATE
		,@COD_AFF		= @COD_AFF      
  		,@COD_EC		= @COD_EC 
		,@NSU			= @NSU
		,@BIN			= @BIN
END	
GO	

IF OBJECT_ID('SP_LS_EC_COMPANY') IS NOT NULL BEGIN
    DROP PROCEDURE SP_LS_EC_COMPANY;
END
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_COMPANY]  
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_LS_EC_COMPANY]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Kennedy Alef     V1    27/07/2018      Creation        
Elir Ribeiro     V2    05/08/2019     Changed Cod Risk Situation      
------------------------------------------------------------------------------------------*/ 
(
	@COD_COMP INT,  
	@Search VARCHAR(100) = NULL,  
	@CodesAff CODE_TYPE READONLY
)  
AS  
BEGIN  
  
 SELECT  
  COMMERCIAL_ESTABLISHMENT.COD_EC  
    ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ  
    ,COMMERCIAL_ESTABLISHMENT.[NAME]  
    ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME  
    ,BRANCH_EC.COD_BRANCH  
    ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION  
    ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER  
    ,AFFILIATOR.NAME AS [AFF_NAME]  
    ,rs.SITUATION_EC  
 FROM COMMERCIAL_ESTABLISHMENT
 
 INNER JOIN COMPANY ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP  
 INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC  
 LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR  
 INNER JOIN RISK_SITUATION rs ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION  
 
 WHERE COMPANY.COD_COMP = 8  
 AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1  
 AND BRANCH_EC.TYPE_BRANCH = 'PRINCIPAL'  
 AND (@Search IS NULL  
 OR (COMMERCIAL_ESTABLISHMENT.[NAME] LIKE ('%' + @Search + '%'))
 OR (COMMERCIAL_ESTABLISHMENT.[TRADING_NAME] LIKE ('%' + @Search + '%'))
 OR (COMMERCIAL_ESTABLISHMENT.CPF_CNPJ LIKE ('%' + @Search + '%')))  
 AND (
	(SELECT COUNT(*) FROM @CodesAff) = 0  
	OR COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IN (SELECT [CODE]  FROM @CodesAff)  
 )  
 ORDER BY 1 DESC  
END;
GO

IF OBJECT_ID('SP_RISK_FRAUD_ALERT_INFO') IS NOT NULL
    DROP PROCEDURE  SP_RISK_FRAUD_ALERT_INFO
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_INFO  
(  
    @COD_FRAUD_ALERT INT  
) AS BEGIN  
  
    SELECT COD_FRAUD_ALERT,  
           RFA.COD_TRAN,  
           RFA.TRANSACTION_DATE,  
           RFA.AMOUNT,  
           COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME],  
           E.SERIAL,  
           CE.NAME [EC_NAME],  
           CE.CPF_CNPJ,  
           RFA.PAN,  
           SUBSTRING((  
                         SELECT ('; ' + RFAR.GROUP_CODE) AS [text()]  
                         FROM RISK_FRAUD_ALERT_RULE RFAR  
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT  
                         FOR XML PATH('')  
                     ), 3, 1000) AS [GROUP_CODE],  
           T.CODE [TRAN_CODE],  
           T.PLOTS,  
           TT.NAME [TTYPE],  
           T.BRAND,  
           A.NAME [Afiliator],  
           A.CPF_CNPJ [AFF_DOC],  
           ST.DESCRIPTION [SOURCE],  
           T.COMMENT,  
           T.CARD_HOLDER_NAME,  
           T.CARD_HOLDER_DOC,  
           T.CUSTOMER_EMAIL,  
           T.CUSTOMER_IDENTIFICATION,  
           RTe.NAME_ACQUIRER [ACQ_NAME],  
           RTE.TRANSACTION_CODE [NSU],  
           RTE.TRAN_DATA_EXT_VALUE,  
           RTE.LINK_PAYMENT_SERVICE,  
           RTE.TERMINAL_VERSION,  
           RTe.LOGICAL_NUMBER_ACQ,  
           RFA.COD_EC,  
           IIF(RFA.COD_SITUATION = 3, IIF((SELECT COUNT(*) FROM TRANSACTION_TITLES TT WHERE TT.COD_EC = RFA.COD_EC AND TT.COD_TRAN = RFA.COD_TRAN AND TT.COD_SITUATION = 17) >= 1, 0, 1), 0 ) [CANCELABLE],  
		   IIF(RFA.COD_SITUATION = 3, IIF((SELECT COUNT(*) FROM TRANSACTION_TITLES TT WHERE TT.COD_EC = RFA.COD_EC AND TT.COD_TRAN = RFA.COD_TRAN AND TT.COD_SITUATION != 4) >= 1, 0, 1), 0 ) [BLOCKABLE],
           SEG.NAME [SEGMENT],  
           RFA.ACTION  
    FROM RISK_FRAUD_ALERT RFA  
             JOIN [TRANSACTION] T ON T.COD_TRAN = RFA.COD_TRAN  
             LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION  
             LEFT JOIN SITUATION S ON S.COD_SITUATION = RFA.COD_SITUATION  
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL  
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP  
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC  
             LEFT JOIN TRANSACTION_TYPE TT on TT.COD_TTYPE = T.COD_TTYPE  
             LEFT JOIN AFFILIATOR A on T.COD_AFFILIATOR = A.COD_AFFILIATOR  
             LEFT JOIN SOURCE_TRANSACTION ST ON ST.COD_SOURCE_TRAN = T.COD_SOURCE_TRAN  
             LEFT JOIN REPORT_TRANSACTIONS_EXP RTE ON RTE.COD_TRAN = RFA.COD_TRAN  
             LEFT JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG  
    WHERE RFA.COD_FRAUD_ALERT = @COD_FRAUD_ALERT  
  
END
GO

IF OBJECT_ID('SP_RISK_FRAUD_UPDATE_TRAN') IS NOT NULL
    DROP PROCEDURE SP_RISK_FRAUD_UPDATE_TRAN
GO
CREATE PROCEDURE SP_RISK_FRAUD_UPDATE_TRAN
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256),
	@ACTION VARCHAR(50) -- ACTIONS: BLOCK, CANCEL
) AS BEGIN

    DECLARE @SITUATIONS TABLE ( SITNAME VARCHAR(100) NULL, COD_SIT INT NULL );
    DECLARE @COD_TRAN INT, @CODE_TRAN VARCHAR(200), @NEW_SITUATION VARCHAR(100);

    SELECT @COD_TRAN = RFA.COD_TRAN, @CODE_TRAN = RFA.CODE FROM RISK_FRAUD_ALERT RFA WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT;

    INSERT INTO @SITUATIONS (SITNAME, COD_SIT)
    SELECT DISTINCT S.[NAME], S.COD_SITUATION
    FROM TRANSACTION_TITLES TT
	JOIN SITUATION S ON TT.COD_SITUATION = S.COD_SITUATION
    WHERE TT.COD_TRAN = @COD_TRAN;

    IF (@ACTION = 'CANCEL' AND (SELECT COUNT(*) FROM @SITUATIONS S WHERE S.SITNAME = 'PAID') > 0) BEGIN
        SET @NEW_SITUATION = 'CANCELED PARTIAL'
    END 
	ELSE 
	IF (@ACTION = 'CANCEL' AND (SELECT COUNT(*) FROM @SITUATIONS S WHERE S.SITNAME = 'AWAITING PAYMENT') > 0) BEGIN
        SET @NEW_SITUATION = 'CANCELED'
    END
	ELSE
	IF (@ACTION = 'BLOCK' AND (SELECT COUNT(*) FROM @SITUATIONS S WHERE S.SITNAME != 'AWAITING PAYMENT') = 0 ) BEGIN
		SET @NEW_SITUATION = 'BLOCKED'
	END

    IF @NEW_SITUATION IS NOT NULL BEGIN

        exec SP_UP_TRANSACTION @CODE_TRAN = NULL, @SITUATION = @NEW_SITUATION, @DESCRIPTION = @COMMENT, @CURRENCY = '786', @COD_USER = @COD_USER, @TRAN_ID = @COD_TRAN

        UPDATE RISK_FRAUD_ALERT SET ACTIVE = 0, COD_USER = @COD_USER, COMMENT = @COMMENT, [ACTION] = @NEW_SITUATION
        WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

    END

END
GO

--ET-1377 V2

go

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ADJUSTMENT_TOTAL'
	AND object_id = OBJECT_ID(N'RECONCILE_SUMMARY_GLOBAL'))
BEGIN
ALTER TABLE RECONCILE_SUMMARY_GLOBAL
ADD ADJUSTMENT_TOTAL INT
END
GO
IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'FAILED_ADJUSTMENT_TOTAL'
	AND object_id = OBJECT_ID(N'RECONCILE_SUMMARY_GLOBAL'))
BEGIN
ALTER TABLE RECONCILE_SUMMARY_GLOBAL ADD FAILED_ADJUSTMENT_TOTAL INT
END
GO
IF OBJECT_ID('SP_REG_GLOBAL_RECONCILE_SUMMARY') IS NOT NULL DROP PROCEDURE SP_REG_GLOBAL_RECONCILE_SUMMARY
GO
CREATE PROCEDURE SP_REG_GLOBAL_RECONCILE_SUMMARY  
(  
    @Filename VARCHAR(64),  
    @LineCount INT,  
    @MissingTotal INT,  
    @AddedCount INT,  
    @FailedCount INT,  
    @CanceledTotal INT,  
    @FailedCancelCount INT,
	@AdjustmentsTotal INT,
	@FailedAdjustmentsCount INT
) AS BEGIN

SET NOCOUNT ON;
SET ARITHABORT ON;

INSERT INTO RECONCILE_SUMMARY_GLOBAL (FILENAME, LINE_COUNT, MISSING_TOTAL, ADDED_COUNT, FAILED_COUNT, CANCELED_TOTAL, FAILED_CANCEL_COUNT, ADJUSTMENT_TOTAL, FAILED_ADJUSTMENT_TOTAL)
	VALUES (@Filename, @LineCount, @MissingTotal, @AddedCount, @FailedCount, @CanceledTotal, @FailedCancelCount, @AdjustmentsTotal, @FailedAdjustmentsCount)

DECLARE @COD_SUMMARY INT = @@IDENTITY

SELECT
	@COD_SUMMARY COD_SUMMARY
END
