IF OBJECT_ID('SP_LS_TYPE_ACCOUNT') IS NOT NULL
	DROP PROCEDURE [SP_LS_TYPE_ACCOUNT];

GO

CREATE PROCEDURE [DBO].[SP_LS_TYPE_ACCOUNT]

/*******************************************************************************************  
----------------------------------------------------------------------------------------    
Procedure Name: [SP_LS_TYPE_ACCOUNT]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author VERSION Date Description    
------------------------------------------------------------------------------------------    
Kennedy Alef V1 27/07/2018 Creation    
Lucas Aguiar v2 03-07-2019 add viewer    
Elir Ribeiro  v3 07-08-2020 add view 
------------------------------------------------------------------------------------------  
*******************************************************************************************/ (@VIEWER INT = NULL)
AS
	DECLARE @QUERY NVARCHAR(MAX) = ''
	BEGIN
		SET @QUERY = '
    SELECT [COD_TYPE_ACCOUNT],   
   [CODE],   
   [NAME]  
    FROM [ACCOUNT_TYPE]  
'
		IF @VIEWER IS NOT NULL
			SET @QUERY = CONCAT(@QUERY, ' WHERE VIEWER = @VIEWER')

		EXEC sp_executesql @QUERY
						  ,N'                                                       
   @VIEWER INT    
   '
						  ,@VIEWER = @VIEWER
	END;

GO

UPDATE BANK_DETAILS_EC
SET COD_TYPE_ACCOUNT = 2
WHERE COD_EC IN (7665, 12071, 12109, 12570, 12665, 13345, 13404, 13504, 13646, 13736, 13872, 693547, 694408)
AND ACTIVE = 1

GO


IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'SALES_TYPE'
		AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN

	ALTER TABLE [REPORT_TRANSACTIONS_EXP] ADD SALES_TYPE VARCHAR(50)


END

GO

IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP VIEW [VW_REPORT_TRANSACTIONS_EXP];
GO

CREATE VIEW [DBO].[VW_REPORT_TRANSACTIONS_EXP]
/*----------------------------------------------------------------------------------------                            
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                            
Project.......: TKPP                            
------------------------------------------------------------------------------------------                            
Author                          VERSION        Date                            Description                            
------------------------------------------------------------------------------------------                            
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                  
Caike Uch�a                        v2       10/01/2020                         add CNAE        
Kennedy Alef                       v3       08/04/2020                      add link de pagamento  
Caike Uch�a                        v4       30/04/2020                        insert ec prod  
Caike Uch�a                        v5       17/08/2020                        Add SALES_TYPE
------------------------------------------------------------------------------------------*/
AS
SELECT TOP (1000)
	[TRANSACTION].[COD_TRAN]
   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
   ,[TRANSACTION].[PLOTS] AS [PLOTS]
   ,CAST([DBO].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
   ,[EQUIPMENT].[TID] AS [TID]
   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
   ,[TRANSACTION].[BRAND]
   ,[TRANSACTION].[PAN]
   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
   , --TRANSACTION_DATA_EXT.NAME                                
	[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
   , --TRANSACTION_DATA_EXT.VALUE                               
	(SELECT
			[TRANSACTION_DATA_EXT].[VALUE]
		FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
		AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
	AS [AUTH_CODE]
   ,[ACQUIRER].[COD_AC]
   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
   ,[TRANSACTION].[COMMENT] AS [COMMENT]
   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
   ,[AFFILIATOR].[COD_AFFILIATOR]
   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
   ,(CASE
		WHEN [SITUATION].[COD_SITUATION] = 3 AND
			[PLAN].[COD_T_PLAN] = 2 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], [ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE]) - [ASS_TAX_DEPART].[RATE])
		WHEN [SITUATION].[COD_SITUATION] = 3 AND
			[PLAN].[COD_T_PLAN] = 1 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], 0) - [ASS_TAX_DEPART].[RATE])
		ELSE 0
	END) AS [NET_VALUE]
   ,
	--------------******------------                                
	[TRANSACTION].[COD_TTYPE]
   ,[COMPANY].[COD_COMP]
   ,[BRANCH_EC].[COD_EC]
   ,[BRANCH_EC].[COD_BRANCH]
   ,[STATE].[NAME] AS [STATE_NAME]
   ,[CITY].[NAME] AS [CITY_NAME]
   ,[SITUATION].[COD_SITUATION]
   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
   ,COALESCE([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]

   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
   ,[TRANSACTION].[COD_SOURCE_TRAN]
   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
   ,[TRANSACTION].[CREATED_AT]
   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)
			> 0 THEN 1
		ELSE 0
	END AS [SPLIT]
   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
   ,[USERS].[COD_USER] AS [COD_USER_REP]
   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
   ,[SEGMENTS].[CNAE]
   ,[TRANSACTION].[COD_USER]
   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
			> 0 THEN 1
		ELSE 0
	END AS [LINK_PAYMENT]
   ,[TRANSACTION].[CUSTOMER_EMAIL]
   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
			> 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]
		ELSE NULL
	END AS [PAYMENT_LINK_TRACKING]
   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [DBO].[PROCESS_BG_STATUS]
	ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
LEFT JOIN [ASS_DEPTO_EQUIP]
	ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
LEFT JOIN [EQUIPMENT]
	ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
LEFT JOIN [DEPARTMENTS_BRANCH]
	ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
LEFT JOIN [DEPARTMENTS]
	ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
LEFT JOIN [BRANCH_EC]
	ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
LEFT JOIN [ADDRESS_BRANCH]
	ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
LEFT JOIN [NEIGHBORHOOD]
	ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
LEFT JOIN [ASS_TAX_DEPART]
	ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
LEFT JOIN [PLAN]
	ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
LEFT JOIN [CITY]
	ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
LEFT JOIN [STATE]
	ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
LEFT JOIN [COMPANY]
	ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
LEFT JOIN [TRANSACTION_TYPE]
	ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
LEFT JOIN [SITUATION]
	ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
LEFT JOIN [TRADUCTION_SITUATION]
	ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
LEFT JOIN [SEGMENTS]
	ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
LEFT JOIN [DBO].[REPORT_TRANSACTIONS_EXP]
	ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
	ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
LEFT JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
LEFT JOIN [POSWEB_DATA_TRANSACTION]
	ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
LEFT JOIN [DBO].[SOURCE_TRANSACTION] WITH (NOLOCK)
	ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
	ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
LEFT JOIN [SALES_REPRESENTATIVE]
	ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
LEFT JOIN [USERS]
	ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
LEFT JOIN [USERS] AS [USER_TRAN]
	ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
LEFT JOIN [ASS_TR_TYPE_COMP]
	ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
LEFT JOIN [ACQUIRER]
	ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
	ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
	ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
	ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
	ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT];

GO

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP];
GO
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************    
----------------------------------------------------------------------------------------                          
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                            Description                          
 ------------------------------------------------------------------------------------------                          
 Fernando Henrique F.             V1       13/12/2018                          Creation                           
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                    
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                  
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE    
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento  
 Caike Uch�a                      v7       30/04/2020                        insert ec prod  
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess
 Caike Uch�a                      V9       17/08/2020                        Add SALES_TYPE
 ------------------------------------------------------------------------------------------    
*****************************************************************************************************************/

AS
BEGIN

	DECLARE @COUNT INT = 0;





	BEGIN

		---------------------------------------------                        
		--------------RECORDS INSERT-----------------                        
		---------------------------------------------                          
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE] INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

		IF @COUNT > 0
		BEGIN
			INSERT INTO [DBO].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
			[TRANSACTION_CODE],
			[AMOUNT],
			[PLOTS],
			[TRANSACTION_DATE],
			[TRANSACTION_TYPE],
			[CPF_CNPJ],
			[NAME],
			[SERIAL_EQUIP],
			[TID],
			[SITUATION],
			[BRAND],
			[PAN],
			[TRAN_DATA_EXT],
			[TRAN_DATA_EXT_VALUE],
			[AUTH_CODE],
			[COD_AC],
			[NAME_ACQUIRER],
			[COMMENT],
			[TAX],
			[ANTICIPATION],
			[COD_AFFILIATOR],
			[NAME_AFFILIATOR],
			[NET_VALUE],
			[COD_COMP],
			[COD_EC],
			[COD_BRANCH],
			[STATE_NAME],
			[CITY_NAME],
			[COD_SITUATION],
			[COD_DEPTO_BRANCH],
			[GROSS_VALUE_AGENCY],
			[NET_VALUE_AGENCY],
			[TYPE_TRAN],
			[COD_SOURCE_TRAN],
			[POSWEB],
			[SEGMENTS_NAME],
			[CREATED_TRANSACTION_DATE],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ],
			[SPLIT],
			[SALES_REP],
			[COD_USER_REP],
			[MODIFY_DATE],
			[CREDITOR_DOCUMENT],
			[COD_SALES_REP],
			[MODEL_POS],
			[CARD_NAME],
			[CNAE],
			[COD_USER],
			[NAME_USER],
			[LINK_PAYMENT_SERVICE],
			[CUSTOMER_EMAIL],
			[CUSTOMER_IDENTIFICATION],
			[PAYMENT_LINK_TRACKING],
			[NAME_PRODUCT_EC],
			[EC_PRODUCT],
			[EC_PRODUCT_CPF_CNPJ],
			[SALES_TYPE])
				(SELECT
					[TEMP].[COD_TRAN]
				   ,[TEMP].[TRANSACTION_CODE]
				   ,[TEMP].[AMOUNT]
				   ,[TEMP].[PLOTS]
				   ,[TEMP].[TRANSACTION_DATE]
				   ,[TEMP].[TRANSACTION_TYPE]
				   ,[TEMP].[CPF_CNPJ]
				   ,[TEMP].[NAME]
				   ,[TEMP].[SERIAL_EQUIP]
				   ,[TEMP].[TID]
				   ,[TEMP].[SITUATION]
				   ,[TEMP].[BRAND]
				   ,[TEMP].[PAN]
				   ,[TEMP].[TRAN_DATA_EXT]
				   ,[TEMP].[TRAN_DATA_EXT_VALUE]
				   ,[TEMP].[AUTH_CODE]
				   ,[TEMP].[COD_AC]
				   ,[TEMP].[NAME_ACQUIRER]
				   ,[TEMP].[COMMENT]
				   ,[TEMP].[TAX]
				   ,[TEMP].[ANTICIPATION]
				   ,[TEMP].[COD_AFFILIATOR]
				   ,[TEMP].[NAME_AFFILIATOR]
				   ,[TEMP].[NET_VALUE]
				   ,[TEMP].[COD_COMP]
				   ,[TEMP].[COD_EC]
				   ,[TEMP].[COD_BRANCH]
				   ,[TEMP].[STATE_NAME]
				   ,[TEMP].[CITY_NAME]
				   ,[TEMP].[COD_SITUATION]
				   ,[TEMP].[COD_DEPTO_BRANCH]
				   ,[TEMP].[GROSS_VALUE_AGENCY]
				   ,[TEMP].[NET_VALUE_AGENCY]
				   ,[TEMP].[TYPE_TRAN]
				   ,[TEMP].[COD_SOURCE_TRAN]
				   ,[TEMP].[POSWEB]
				   ,[TEMP].[SEGMENTS_NAME]
				   ,[TEMP].[CREATED_AT]
				   ,[TEMP].[COD_EC_TRANS]
				   ,[TEMP].[TRANS_EC_NAME]
				   ,[TEMP].[TRANS_EC_CPF_CNPJ]
				   ,[TEMP].[SPLIT]
				   ,[SALES_REP]
				   ,[COD_USER_REP]
				   ,GETDATE()
				   ,[CREDITOR_DOCUMENT]
				   ,[COD_SALES_REP]
				   ,[TEMP].[MODEL_POS]
				   ,[CARD_NAME]
				   ,[CNAE]
				   ,[COD_USER]
				   ,[NAME_USER]
				   ,[LINK_PAYMENT]
				   ,[CUSTOMER_EMAIL]
				   ,[CUSTOMER_IDENTIFICATION]
				   ,[TEMP].[PAYMENT_LINK_TRACKING]
				   ,[TEMP].[NAME_PRODUCT_EC]
				   ,[TEMP].[EC_PRODUCT]
				   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
				   ,[TEMP].[SALES_TYPE]
				FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;


		---------------------------------------------                        
		--------------RECORDS UPDATE-----------------                        
		---------------------------------------------                          
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_TRANSACTIONS_EXP]
			SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
			   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
			   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
			FROM [REPORT_TRANSACTIONS_EXP]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;
	END;
END;


GO

IF OBJECT_ID('SP_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP];
GO

CREATE PROCEDURE [DBO].[SP_REPORT_TRANSACTIONS_EXP]
/***************************************************************************************  
----------------------------------------------------------------------------------------  
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author               VERSION         Date                     Description  
------------------------------------------------------------------------------------------  
Fernando Henrique F.   V1         13/12/2018               Creation  
Kennedy Alef           V2         16/01/2018               Modify  
Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT  
Caike Uch�a            V3         15/08/2019               inserting coluns  
Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC  
Caike Uch�a            V5         20/01/2020               ADD CNAE  
Kennedy Alef           v3         08/04/2020               add link de pagamento  
Caike Uch�a            v4         30/04/2020               insert ec prod  
Caike Uch�a            v5         17/08/2020               Add SALES_TYPE
---------------------------------------------           ---------------------------------------------  
********************************************************************************************/ (@CODCOMP VARCHAR(10),
@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@EC VARCHAR(10),
@BRANCH VARCHAR(10),
@DEPART VARCHAR(10),
@TERMINAL VARCHAR(100),
@STATE VARCHAR(100),
@CITY VARCHAR(100),
@TYPE_TRAN VARCHAR(10),
@SITUATION VARCHAR(10),
@NSU VARCHAR(100) = NULL,
@NSU_EXT VARCHAR(100) = NULL,
@BRAND VARCHAR(50) = NULL,
@PAN VARCHAR(50) = NULL,
@COD_AFFILIATOR INT = NULL,
@TRACKING_TRANSACTION VARCHAR(100) = NULL,
@DESCRIPTION VARCHAR(100) = NULL,
@SPOT_ELEGIBLE INT = 0,
@COD_ACQ INT = NULL,
@SOURCE_TRAN INT = NULL,
@POSWEB INT = 0,
@SPLIT INT = NULL,
@INITIAL_VALUE DECIMAL(22, 6) = NULL,
@FINAL_VALUE DECIMAL(22, 6) = NULL,
@COD_SALES_REP INT = NULL)
AS
BEGIN
	DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
	DECLARE @TIME_FINAL_DATE TIME;
	SET NOCOUNT ON;
	SET ARITHABORT ON;
	BEGIN
		SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');
		--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));  
		--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )  
		SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);
		IF (@TIME_FINAL_DATE = '00:00:00')
			SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));
		SET @QUERY_BASIS = '  
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE  
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT  
      ,[REPORT_TRANSACTIONS_EXP].PLOTS  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE  
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ  
      ,[REPORT_TRANSACTIONS_EXP].NAME  
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP  
      ,[REPORT_TRANSACTIONS_EXP].TID  
      ,[REPORT_TRANSACTIONS_EXP].SITUATION  
      ,[REPORT_TRANSACTIONS_EXP].BRAND  
      ,[REPORT_TRANSACTIONS_EXP].PAN  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT  
   ,(  
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT  
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN  
      ) AS [AUTH_CODE]  
      ,[REPORT_TRANSACTIONS_EXP].COD_AC  
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER  
      ,[REPORT_TRANSACTIONS_EXP].COMMENT  
      ,[REPORT_TRANSACTIONS_EXP].TAX  
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION  
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR  
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE  
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY  
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN  
      ,[REPORT_TRANSACTIONS_EXP].POSWEB  
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME  
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME  
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME  
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ  
      ,[REPORT_TRANSACTIONS_EXP].SPLIT  
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]  
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT  
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP  
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS  
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME  
      ,[REPORT_TRANSACTIONS_EXP].CNAE  
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION  
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING  
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]  
	  ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]  
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP  
    ';
		IF @INITIAL_DATE IS NOT NULL
			AND @FINAL_DATE IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');
		IF @EC IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');
		IF @BRANCH IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');
		IF @DEPART IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');
		IF LEN(@TERMINAL) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');
		IF LEN(@STATE) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');
		IF LEN(@CITY) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');
		IF LEN(@TYPE_TRAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');
		IF LEN(@SITUATION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');
		IF LEN(@BRAND) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');
		IF LEN(@PAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');
		IF LEN(@NSU) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');
		IF LEN(@NSU_EXT) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');
		--ELSE  
		-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL  
		-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');  
		IF @COD_AFFILIATOR IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');
		IF LEN(@TRACKING_TRANSACTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');
		IF LEN(@DESCRIPTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');
		IF @SPOT_ELEGIBLE = 1
		BEGIN
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE  
        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');
		END;
		IF @COD_ACQ IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');
		IF @SOURCE_TRAN IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');
		IF @POSWEB = 1
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');
		IF (@INITIAL_VALUE > 0)
			AND (@FINAL_VALUE >= @INITIAL_VALUE)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');
		IF (@SPLIT = 1)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');
		--SELECT @QUERY_BASIS  
		EXEC [sp_executesql] @QUERY_BASIS
							,N'  
   @CODCOMP VARCHAR(10),  
   @INITIAL_DATE DATETIME,  
   @FINAL_DATE DATETIME,  
   @EC int,  
   @BRANCH int,  
   @DEPART int,  
   @TERMINAL varchar(14),  
   @STATE varchar(25),  
   @CITY varchar(40),  
   @TYPE_TRAN VARCHAR(10),  
   @SITUATION VARCHAR(10),  
   @NSU varchar(100),  
   @NSU_EXT varchar(100),  
   @BRAND varchar(50),  
   @COD_AFFILIATOR INT,  
   @PAN VARCHAR(50),  
   @SOURCE_TRAN INT,  
   @POSWEB INT,  
   @INITIAL_VALUE DECIMAL(22,6),  
   @FINAL_VALUE DECIMAL(22,6),  
   @COD_SALES_REP INT,  
   @COD_ACQ INT  
   '
							,@CODCOMP = @CODCOMP
							,@INITIAL_DATE = @INITIAL_DATE
							,@FINAL_DATE = @FINAL_DATE
							,@EC = @EC
							,@BRANCH = @BRANCH
							,@DEPART = @DEPART
							,@TERMINAL = @TERMINAL
							,@STATE = @STATE
							,@CITY = @CITY
							,@TYPE_TRAN = @TYPE_TRAN
							,@SITUATION = @SITUATION
							,@NSU = @NSU
							,@NSU_EXT = @NSU_EXT
							,@BRAND = @BRAND
							,@PAN = @PAN
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = @SOURCE_TRAN
							,@POSWEB = @POSWEB
							,@INITIAL_VALUE = @INITIAL_VALUE
							,@FINAL_VALUE = @FINAL_VALUE
							,@COD_SALES_REP = @COD_SALES_REP
							,@COD_ACQ = @COD_ACQ;
	END;
END;


GO

SELECT
	[TRANSACTION].COD_TRAN
   ,ISNULL(PRODUCTS_ACQUIRER.[NAME], '') AS PROD_ACQ INTO #TEMP_EXP_TOTAL
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN PRODUCTS_ACQUIRER
	ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [TRANSACTION].CREATED_AT > '2020-01-01 00:00:00'


GO

CREATE TABLE #DELETE (
	COD_TRAN INT
   ,PROD_ACQ VARCHAR(200)
)

DECLARE @CONT INT;

SET @CONT = 0;

WHILE @CONT < 100
BEGIN

INSERT INTO #DELETE
	SELECT TOP 25000
		COD_TRAN
	   ,PROD_ACQ
	FROM #TEMP_EXP_TOTAL

UPDATE REPORT_TRANSACTIONS_EXP
SET SALES_TYPE = #DELETE.PROD_ACQ
FROM REPORT_TRANSACTIONS_EXP
JOIN #DELETE
	ON #DELETE.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
WHERE REPORT_TRANSACTIONS_EXP.COD_TRAN IN (SELECT
		COD_TRAN
	FROM #DELETE)

DELETE FROM #TEMP_EXP_TOTAL
WHERE COD_TRAN IN (SELECT
			COD_TRAN
		FROM #DELETE)

DELETE FROM #DELETE

SELECT
	@CONT AS QTY;

SET @CONT = @CONT + 1;

END

DROP TABLE #TEMP_EXP_TOTAL
DROP TABLE #DELETE

GO

--DECLARANDO VARIAVEIS
DECLARE @COD_EC INT;
DECLARE @COD_USER INT;

--CRIANDO UM CURSOR
DECLARE ACCEPTUSER CURSOR FOR SELECT
	USERS.COD_EC
   ,USERS.COD_USER
FROM USERS
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
	AND COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT IS NULL
	AND USERS.ACCEPT = 1

-- ABRINDO UM CURSOR

OPEN ACCEPTUSER

--SELECIONAR OS DADOS( busca o pr�ximo dado do cursor)

FETCH NEXT FROM ACCEPTUSER
INTO @COD_EC, @COD_USER;

-- itera��o entre os dados retornados pelo Cursor ( Enquanto tiver retornando dados, ele vai inserir as linhas)

WHILE @@fetch_status = 0
BEGIN

----Pegar os pr�ximos dados

UPDATE COMMERCIAL_ESTABLISHMENT
SET USER_TCU_ACCEPT = @COD_USER
WHERE COD_EC = @COD_EC

FETCH NEXT FROM ACCEPTUSER
INTO @COD_EC, @COD_USER;
--SELECT * FROM DATA_EQUIPMENT_AC WHERE CODE= @CODE AND ACTIVE= 1 AND COD_AC = 10

END

-- FECHANDO E DESALOCANDO O CURSOR DA MEM�RIA 

CLOSE ACCEPTUSER
DEALLOCATE ACCEPTUSER


GO

IF OBJECT_ID('SP_LS_DATA_EMAIL_SMS_RESEND') IS NOT NULL
	DROP PROCEDURE [SP_LS_DATA_EMAIL_SMS_RESEND];
GO
CREATE PROCEDURE [DBO].[SP_LS_DATA_EMAIL_SMS_RESEND]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_LS_DATA_EMAIL_SMS_RESEND]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         03/07/2020                          Creation       
Caike Uch�a                       V2         18/08/2020                  Add Contact active and Term_Token
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@VALUE VARCHAR(200))
AS
BEGIN



	DECLARE @COD_USER INT;

	DECLARE @CODE_TERM VARCHAR(64) = NULL

	DECLARE @COD_AFFILIATOR INT;

	DECLARE @TCU_COMPLETE INT = 0;

	DECLARE @EMAIL_RET VARCHAR(200);

	DECLARE @NAME_RET VARCHAR(200);

	DECLARE @ACCESS_KEY VARCHAR(200);

	DECLARE @CONT INT;

	DECLARE @NOTIFY_TCU INT;

	DECLARE @COD_ACESS VARCHAR(100);

	DECLARE @SUBDOMAIN VARCHAR(100);

	DECLARE @COLOR VARCHAR(16) = NULL;

	DECLARE @LOG_AF VARCHAR(256) = NULL;

	DECLARE @PHONE_NUMBER VARCHAR(100);

	DECLARE @PASSPROV VARCHAR(100) = NULL;

	DECLARE @DDD INT;



	IF (SELECT
				COUNT(*)
			FROM COMMERCIAL_ESTABLISHMENT
			WHERE COD_EC = @COD_EC
			AND ACTIVE = 1
			AND TCU_ACCEPTED = 1)
		> 0

		THROW 61072, 'THIS ESTABLISHMENT HAS ALTERADY ACCEPEPTED THE TCU', 1;



	SELECT TOP 1
		@CONT = COUNT(*)
	   ,@COD_USER = USERS.COD_USER
	   ,@ACCESS_KEY = COMPANY.ACCESS_KEY
	   ,@COD_ACESS = USERS.COD_ACCESS
	   ,@COD_AFFILIATOR = USERS.COD_AFFILIATOR
	FROM USERS
	INNER JOIN COMPANY
		ON COMPANY.COD_COMP = USERS.COD_COMP
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE
		ON USERS.COD_EC = CE.COD_EC
	WHERE USERS.COD_EC = @COD_EC
	AND USERS.ACTIVE = 1
	GROUP BY USERS.COD_USER
			,COMPANY.ACCESS_KEY
			,USERS.COD_ACCESS
			,USERS.COD_AFFILIATOR;


	IF @CONT IS NULL
		THROW 61071, 'THIS ESTABLISHMENT NOT CONTAIN USER', 1;

	EXEC [SP_REG_TERM_TOKEN] @COD_USER

	SELECT
		@CODE_TERM = CODE
	FROM TERM_TOKEN
	WHERE COD_USER = @COD_USER
	AND ACTIVE = 1


	EXEC SP_REG_PROV_PASS_USER @CODACESS = @COD_ACESS
							  ,@ACCESS_KEY = @ACCESS_KEY
							  ,@VALUE = @VALUE
							  ,@REQUIRED = 1
							  ,@COD_AFFILIATOR = @COD_AFFILIATOR
							  ,@NOT_RETURN = 1;


	SELECT
		@EMAIL_RET = USERS.EMAIL
	   ,@NAME_RET = USERS.IDENTIFICATION
	   ,@NOTIFY_TCU = IIF(CE.TCU_ACCEPTED = 0, 1, 0)
	   ,@SUBDOMAIN = AFFILIATOR.SUBDOMAIN
	   ,@COLOR = T.COLOR_HEADER
	   ,@LOG_AF = T.LOGO_AFFILIATE
	   ,@PHONE_NUMBER = CONTACT_USERS.NUMBER
	   ,@PASSPROV = PROVISORY_PASS_USER.[VALUE]
	   ,@DDD = CONTACT_USERS.DDD
	FROM USERS
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE
		ON USERS.COD_EC = CE.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
	LEFT JOIN THEMES T
		ON AFFILIATOR.COD_AFFILIATOR = T.COD_AFFILIATOR
			AND T.ACTIVE = 1
	LEFT JOIN CONTACT_USERS
		ON CONTACT_USERS.COD_USER = USERS.COD_USER
			AND CONTACT_USERS.ACTIVE = 1
	INNER JOIN PROVISORY_PASS_USER
		ON PROVISORY_PASS_USER.COD_USER = USERS.COD_USER
	WHERE USERS.COD_USER = @COD_USER;


	SELECT
		@TCU_COMPLETE = 1
	FROM SERVICES_AVAILABLE SA
	JOIN ITEMS_SERVICES_AVAILABLE ISA
		ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE
			AND ISA.ACTIVE = 1
	WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR
	AND SA.COD_EC IS NULL
	AND SA.ACTIVE = 1
	AND ISA.NAME = 'TCUDETAILED'



	SELECT
		@COD_USER AS COD_USER
	   ,@COD_ACESS AS [login]
	   ,@EMAIL_RET AS EMAIL
	   ,@NAME_RET AS [NAME]
	   ,@ACCESS_KEY AS ACCESS_KEY
	   ,@NOTIFY_TCU AS NOTIFY_TCU
	   ,@TCU_COMPLETE AS TCU_COMPLETE
	   ,@CODE_TERM AS CODE_TERM
	   ,@COD_AFFILIATOR AS CODAFF
	   ,@SUBDOMAIN AS SUBDOMAIN
	   ,@COLOR AS AFF_COLOR
	   ,@LOG_AF AS LOG_AFF
	   ,@PHONE_NUMBER AS PHONE_NUMBER
	   ,@DDD AS DDD
	   ,ISNULL(@PASSPROV, @VALUE) AS PASS;

END;



GO

IF OBJECT_ID('SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE') IS NOT NULL
	DROP PROCEDURE [SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE];
GO

CREATE PROCEDURE [DBO].[SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_RESEND_EMAIL_SMS_SERVICE]       
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         18/08/2020                          Creation        
------------------------------------------------------------------------------------------*/
AS
BEGIN

	SELECT DISTINCT
		USERS.COD_EC
	FROM USERS
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
			AND COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT IS NULL


END;

GO

IF OBJECT_ID('SP_REG_RESEND_EMAIL_SMS_SERVICE') IS NOT NULL
	DROP PROCEDURE [SP_REG_RESEND_EMAIL_SMS_SERVICE];
GO

CREATE PROCEDURE [DBO].[SP_REG_RESEND_EMAIL_SMS_SERVICE]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_REG_RESEND_EMAIL_SMS_SERVICE]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         18/08/2020                          Creation       
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@VALUE VARCHAR(200))
AS
BEGIN


	DECLARE @COD_USER INT;

	DECLARE @CODE_TERM VARCHAR(64) = NULL

	DECLARE @COD_AFFILIATOR INT;

	DECLARE @TCU_COMPLETE INT = 0;

	DECLARE @EMAIL_RET VARCHAR(200);

	DECLARE @NAME_RET VARCHAR(200);

	DECLARE @ACCESS_KEY VARCHAR(200);

	DECLARE @CONT INT;

	DECLARE @NOTIFY_TCU INT;

	DECLARE @COD_ACESS VARCHAR(100);

	DECLARE @SUBDOMAIN VARCHAR(100);

	DECLARE @COLOR VARCHAR(16) = NULL;

	DECLARE @LOG_AF VARCHAR(256) = NULL;

	DECLARE @PHONE_NUMBER VARCHAR(100);

	DECLARE @PASSPROV VARCHAR(100) = NULL;

	DECLARE @DDD INT;



	IF (SELECT
				COUNT(*)
			FROM COMMERCIAL_ESTABLISHMENT
			WHERE COD_EC = @COD_EC
			AND ACTIVE = 1
			AND TCU_ACCEPTED = 1
			AND USER_TCU_ACCEPT IS NOT NULL)
		= 0

	BEGIN

		SELECT TOP 1
			@CONT = COUNT(*)
		   ,@COD_USER = USERS.COD_USER
		   ,@ACCESS_KEY = COMPANY.ACCESS_KEY
		   ,@COD_ACESS = USERS.COD_ACCESS
		   ,@COD_AFFILIATOR = USERS.COD_AFFILIATOR
		FROM USERS
		INNER JOIN COMPANY
			ON COMPANY.COD_COMP = USERS.COD_COMP
		INNER JOIN COMMERCIAL_ESTABLISHMENT CE
			ON USERS.COD_EC = CE.COD_EC
		WHERE USERS.COD_EC = @COD_EC
		AND USERS.ACTIVE = 1
		GROUP BY USERS.COD_USER
				,COMPANY.ACCESS_KEY
				,USERS.COD_ACCESS
				,USERS.COD_AFFILIATOR;


		EXEC [SP_REG_TERM_TOKEN] @COD_USER

		SELECT
			@CODE_TERM = CODE
		FROM TERM_TOKEN
		WHERE COD_USER = @COD_USER
		AND ACTIVE = 1

		IF (@CONT IS NOT NULL)
		BEGIN

			EXEC SP_REG_PROV_PASS_USER @CODACESS = @COD_ACESS
									  ,@ACCESS_KEY = @ACCESS_KEY
									  ,@VALUE = @VALUE
									  ,@REQUIRED = 1
									  ,@COD_AFFILIATOR = @COD_AFFILIATOR
									  ,@NOT_RETURN = 1;


			SELECT
				@EMAIL_RET = USERS.EMAIL
			   ,@NAME_RET = USERS.IDENTIFICATION
			   ,@NOTIFY_TCU = IIF(CE.TCU_ACCEPTED = 0, 1, 0)
			   ,@SUBDOMAIN = AFFILIATOR.SUBDOMAIN
			   ,@COLOR = T.COLOR_HEADER
			   ,@LOG_AF = T.LOGO_AFFILIATE
			   ,@PHONE_NUMBER = CONTACT_USERS.NUMBER
			   ,@PASSPROV = PROVISORY_PASS_USER.[VALUE]
			   ,@DDD = CONTACT_USERS.DDD
			FROM USERS
			INNER JOIN COMMERCIAL_ESTABLISHMENT CE
				ON USERS.COD_EC = CE.COD_EC
			LEFT JOIN AFFILIATOR
				ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
			LEFT JOIN THEMES T
				ON AFFILIATOR.COD_AFFILIATOR = T.COD_AFFILIATOR
					AND T.ACTIVE = 1
			INNER JOIN CONTACT_USERS
				ON CONTACT_USERS.COD_USER = USERS.COD_USER
					AND CONTACT_USERS.ACTIVE = 1
			INNER JOIN PROVISORY_PASS_USER
				ON PROVISORY_PASS_USER.COD_USER = USERS.COD_USER
			WHERE USERS.COD_USER = @COD_USER;


			SELECT
				@TCU_COMPLETE = 1
			FROM SERVICES_AVAILABLE SA
			JOIN ITEMS_SERVICES_AVAILABLE ISA
				ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE
					AND ISA.ACTIVE = 1
			WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR
			AND SA.COD_EC IS NULL
			AND SA.ACTIVE = 1
			AND ISA.NAME = 'TCUDETAILED'



			SELECT
				@COD_USER AS COD_USER
			   ,@COD_ACESS AS [login]
			   ,@EMAIL_RET AS EMAIL
			   ,@NAME_RET AS [NAME]
			   ,@ACCESS_KEY AS ACCESS_KEY
			   ,@NOTIFY_TCU AS NOTIFY_TCU
			   ,@TCU_COMPLETE AS TCU_COMPLETE
			   ,@CODE_TERM AS CODE_TERM
			   ,@COD_AFFILIATOR AS CODAFF
			   ,@SUBDOMAIN AS SUBDOMAIN
			   ,@COLOR AS AFF_COLOR
			   ,@LOG_AF AS LOG_AFF
			   ,@PHONE_NUMBER AS PHONE_NUMBER
			   ,@DDD AS DDD
			   ,ISNULL(@PASSPROV, @VALUE) AS PASS;

		END

	END

END;

GO


GO

IF OBJECT_ID('SP_UPDATE_SERIAL_DATA_AC') IS NOT NULL
	DROP PROCEDURE [SP_UPDATE_SERIAL_DATA_AC];
GO

CREATE PROCEDURE [DBO].[SP_UPDATE_SERIAL_DATA_AC]
/*----------------------------------------------------------------------------------------                  
PROCEDURE NAME: [SP_UPDATE_SERIAL_DATA_AC]                  
PROJECT.......: TKPP                  
------------------------------------------------------------------------------------------                  
AUTHOR                          VERSION        DATE                            DESCRIPTION                  
------------------------------------------------------------------------------------------                  
LUIZ AQUINO                        V1          09/11/2018                      CREATION            
LUCAS AGUIAR                       V2          11/11/2018                       CHANGED       
CAIKE UCHOA                        V3          14/11/2019                       CHANGED  
CAIKE UCHOA                        V4          17/08/2020                    RETIRAR BLUETOOTH         
------------------------------------------------------------------------------------------*/ (@CODCOMP INT,
@CODEQUIP INT,
@CODACQUIRE INT = NULL,
@CODE VARCHAR(200) = NULL,
@CODMODEL INT,
@CHIP VARCHAR(200),
@ACTIVE INT,
@CODUSER INT)
AS

BEGIN
	DECLARE @COD_EC INT;
	DECLARE @TYPE_MODEL VARCHAR(100);


	INSERT INTO EQUIPMENT_LOG (CREATED_AT, TID, SERIAL, COD_MODEL, COD_COMP, ACTIVE, MODIFY_DATE, INITIALIZATION_DATE, CHIP, COD_USER, PUK, COD_OPER, COD_EQUIP)
		SELECT
			current_timestamp
		   ,TID
		   ,SERIAL
		   ,COD_MODEL
		   ,COD_COMP
		   ,ACTIVE
		   ,MODIFY_DATE
		   ,INITIALIZATION_DATE
		   ,CHIP
		   ,COD_USER
		   ,PUK
		   ,COD_OPER
		   ,COD_EQUIP
		FROM EQUIPMENT
		WHERE COD_EQUIP = @CODEQUIP;

	UPDATE EQUIPMENT
	SET COD_MODEL = @CODMODEL
	   ,CHIP = @CHIP
	   ,ACTIVE = @ACTIVE
	WHERE COD_EQUIP = @CODEQUIP;


	SELECT
		@TYPE_MODEL = MODEL_GROUP.CODE

	FROM EQUIPMENT
	INNER JOIN EQUIPMENT_MODEL
		ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
	INNER JOIN MODEL_GROUP
		ON MODEL_GROUP.COD_MODEL_GROUP = EQUIPMENT_MODEL.COD_MODEL_GROUP
	WHERE COD_EQUIP = @CODEQUIP

	IF @TYPE_MODEL <> 'ONLINE'
	BEGIN
		-- Busca o cod_ec  
		SELECT TOP 1
			@COD_EC = COD_EC
		FROM VW_COMPANY_EC_BR_DEP_EQUIP_MODEL
		WHERE COD_EQUIP = @CODEQUIP

		-- Chama procedure de valida��o e inser��o de TIDs  
		EXEC [SP_VAL_TID_BY_SEGMENT] @COD_EC = @COD_EC
									,@COD_USER = @CODUSER
									,@COD_COMP = @CODCOMP
	END
	ELSE
	BEGIN
		-- disponibiliza os TIDs existentes deste terminal para outros equipamentos   
		UPDATE DATA_TID_AVAILABLE_EC
		SET AVAILABLE = 1
		FROM DATA_TID_AVAILABLE_EC
		INNER JOIN DATA_EQUIPMENT_AC
			ON DATA_EQUIPMENT_AC.COD_EQUIP = @CODEQUIP
			AND DATA_EQUIPMENT_AC.ACTIVE = 1
			AND DATA_EQUIPMENT_AC.CODE = DATA_TID_AVAILABLE_EC.TID
			AND DATA_EQUIPMENT_AC.COD_AC IN (SELECT
					COD_AC
				FROM ACQUIRER
				WHERE [GROUP] = 'PAGSEGURO')

		--Inativa todos os TID's associados ao equipamento      
		UPDATE DATA_EQUIPMENT_AC
		SET ACTIVE = 0
		WHERE COD_EQUIP = @CODEQUIP
		AND COD_AC IN (SELECT
				COD_AC
			FROM ACQUIRER
			WHERE [GROUP] = 'PAGSEGURO')

		--Inativa a rota cadastrada para este equipamento    
		UPDATE ROUTE_ACQUIRER
		SET ACTIVE = 0
		   ,COD_USER_MODIFY = @CODUSER
		   ,MODIFY_DATE = current_timestamp
		WHERE COD_EQUIP = @CODEQUIP;
	END

END;


GO

GO

IF OBJECT_ID('SP_LS_PLAN_DN') IS NOT NULL
	DROP PROCEDURE [SP_LS_PLAN_DN];
GO
CREATE PROCEDURE [DBO].[SP_LS_PLAN_DN]

/*************************************************************************************************  
----------------------------------------------------------------------------------------          
Procedure Name: [SP_LS_PLAN_DN]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Kennedy Alef                      V1        27/07/2018                         Creation      
Marcus Gall Barreira              V2        30/10/2019                         Changed      
Caike Uch�a                       V3        19/08/2020                       add afiliador       
------------------------------------------------------------------------------------------  
*************************************************************************************************/ (@CODCOMP INT,
@COD_SEG INT,
@TYPE_PLAN INT,
@ACTIVO INT,
@NOME VARCHAR(100),
@COD_AFF INT = NULL)
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);

	DECLARE @CATEGORY INT;

	SELECT
		@CATEGORY = [COD_PLAN_CATEGORY]
	FROM [PLAN_CATEGORY]
	WHERE [CATEGORY] = 'AUTO CADASTRO';

	BEGIN

		SET @QUERY = '          
 SELECT            
 [PLAN].COD_PLAN,          
 [PLAN].CODE AS NAME,          
 [PLAN].ACTIVE ,          
 TYPE_PLAN.CODE AS TYPE_PLAN ,        
 [PLAN].COD_BILLING,      
 BILLING_TYPE.[DESCRIPTION] AS BILLING_TYPE,      
 0 AS AVAILABLE_SALE,
 AFFILIATOR.[NAME] AS AFFILIATOR
 FROM [PLAN]           
 INNER JOIN TYPE_PLAN ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN      
 LEFT JOIN BILLING_TYPE ON BILLING_TYPE.COD_BILLING = [PLAN].COD_BILLING    
 LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = [PLAN].COD_AFFILIATOR
 WHERE [PLAN].COD_PLAN_CATEGORY <> ' + CAST(@CATEGORY AS VARCHAR) + ' and [PLAN].COD_COMP = ' + CAST(@CODCOMP AS VARCHAR) + ' AND [PLAN].ACTIVE = ' + CAST(@ACTIVO AS VARCHAR);


		IF @TYPE_PLAN IS NOT NULL
			SET @QUERY = @QUERY + ' AND TYPE_PLAN.COD_T_PLAN =' + CAST(@TYPE_PLAN AS VARCHAR);

		IF @COD_SEG IS NOT NULL
			SET @QUERY = @QUERY + ' AND [PLAN].COD_SEG = ' + CAST(@COD_SEG AS VARCHAR);

		IF @NOME IS NOT NULL
			SET @QUERY = @QUERY + ' AND [PLAN].CODE = @NOME';


		IF @COD_AFF IS NOT NULL
			SET @QUERY = @QUERY + ' AND [PLAN].COD_AFFILIATOR = @Cod_Aff';


		--EXECUTE (@QUERY)          

		EXEC [sp_executesql] @QUERY
							,N'          
@COD_SEG INT,          
@TYPE_PLAN INT,          
@NOME VARCHAR(100),          
@Cod_Aff INT          
'
							,@COD_SEG = @COD_SEG
							,@TYPE_PLAN = @TYPE_PLAN
							,@NOME = @NOME
							,@COD_AFF = @COD_AFF;

	END;
END;

GO

IF OBJECT_ID('SP_REPORT_PLAN_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_PLAN_EXP];
GO

CREATE PROCEDURE [DBO].[SP_REPORT_PLAN_EXP]
/*----------------------------------------------------------------------------------------                                                
Procedure Name: [SP_REPORT_PLAN_EXP]                                                
Project.......: TKPP                                                
------------------------------------------------------------------------------------------                                                
Author                       VERSION            Date             Description                                                
------------------------------------------------------------------------------------------                                                        
Caike Uch�a                   v1            05/12/2019              Created      
Caike Uch�a                   v2            19/08/2020             add affiliator
------------------------------------------------------------------------------------------*/ (@CODE VARCHAR(255) = NULL,
@TYPE_PLAN INT = NULL,
@ACTIVE INT = NULL,
@COD_AFFILIATOR INT = NULL)
AS
BEGIN

	DECLARE @QUERY NVARCHAR(MAX);

	SET @QUERY =
	'SELECT   
PLAN_CATEGORY.CATEGORY AS CATEGORY,  
CASE   
WHEN TAX_PLAN.COD_BRAND = NULL THEN 1  
ELSE 0  
END AS [PLAN_WITHOUT_BRAND],  
[PLAN].ACTIVE,   
[PLAN].CODE,  
[PLAN].[DESCRIPTION],  
TYPE_PLAN.CODE AS TYPE_PLAN,  
TAX_PLAN.INTERVAL,  
TRANSACTION_TYPE.CODE AS TRANSACTION_TYPE,  
BRAND.[GROUP] AS BRAND,  
TAX_PLAN.QTY_INI_PLOTS,  
TAX_PLAN.QTY_FINAL_PLOTS,  
TAX_PLAN.PARCENTAGE,  
TAX_PLAN.RATE,  
TAX_PLAN.ANTICIPATION_PERCENTAGE,  
SOURCE_TRANSACTION.CODE AS SOURCE_TRANSACTION,
AFFILIATOR.[NAME] AS AFFILIATOR
FROM TAX_PLAN  
INNER JOIN [PLAN] ON [PLAN].COD_PLAN = TAX_PLAN.COD_PLAN  
INNER JOIN PLAN_CATEGORY ON PLAN_CATEGORY.COD_PLAN_CATEGORY = [PLAN].COD_PLAN_CATEGORY  
INNER JOIN TYPE_PLAN ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN  
INNER JOIN TRANSACTION_TYPE ON TRANSACTION_TYPE.COD_TTYPE = TAX_PLAN.COD_TTYPE  
LEFT JOIN BRAND ON BRAND.COD_BRAND = TAX_PLAN.COD_BRAND  
INNER JOIN SOURCE_TRANSACTION ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = TAX_PLAN.COD_SOURCE_TRAN  
LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = [PLAN].COD_AFFILIATOR
WHERE [PLAN].ACTIVE= @ACTIVE AND TAX_PLAN.ACTIVE = 1'

	IF @CODE IS NOT NULL
		SET @QUERY = @QUERY + ' AND [PLAN].CODE = @CODE';

	IF @TYPE_PLAN IS NOT NULL
		SET @QUERY = @QUERY + ' AND TYPE_PLAN.COD_T_PLAN = @TYPE_PLAN';

	IF @COD_AFFILIATOR IS NOT NULL
		SET @QUERY = @QUERY + ' AND AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATOR'


	SET @QUERY = @QUERY + ' ORDER BY [PLAN].CODE';


	EXEC sp_executesql @QUERY
					  ,N'  
  @CODE VARCHAR(100),  
  @TYPE_PLAN INT,  
  @ACTIVE INT,
  @COD_AFFILIATOR INT
  '

					  ,@CODE = @CODE
					  ,@TYPE_PLAN = @TYPE_PLAN
					  ,@ACTIVE = @ACTIVE
					  ,@COD_AFFILIATOR = @COD_AFFILIATOR

END;

GO

IF OBJECT_ID('SP_GET_EC_INSIDECODE') IS NOT NULL
	DROP PROCEDURE [SP_GET_EC_INSIDECODE];
GO

CREATE PROCEDURE [DBO].[SP_GET_EC_INSIDECODE]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_GET_EC_INSIDECODE]    Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         21/08/2020                          Creation        
------------------------------------------------------------------------------------------*/ (@COD_BRANCH INT)
AS
BEGIN

	SELECT
		COMMERCIAL_ESTABLISHMENT.COD_EC
	FROM BRANCH_EC
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	WHERE BRANCH_EC.COD_BRANCH = @COD_BRANCH


END;

