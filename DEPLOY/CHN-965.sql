IF OBJECT_ID('SP_LS_TYPE_ACCOUNT') IS NOT NULL
	DROP PROCEDURE [SP_LS_TYPE_ACCOUNT];

GO

CREATE PROCEDURE [DBO].[SP_LS_TYPE_ACCOUNT]

/*******************************************************************************************  
----------------------------------------------------------------------------------------    
Procedure Name: [SP_LS_TYPE_ACCOUNT]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author VERSION Date Description    
------------------------------------------------------------------------------------------    
Kennedy Alef V1 27/07/2018 Creation    
Lucas Aguiar v2 03-07-2019 add viewer    
Elir Ribeiro  v3 07-08-2020 add view 
------------------------------------------------------------------------------------------  
*******************************************************************************************/ (@VIEWER INT = NULL)
AS
	DECLARE @QUERY NVARCHAR(MAX) = ''
	BEGIN
		SET @QUERY = '
    SELECT [COD_TYPE_ACCOUNT],   
   [CODE],   
   [NAME]  
    FROM [ACCOUNT_TYPE]  
'
		IF @VIEWER IS NOT NULL
			SET @QUERY = CONCAT(@QUERY, ' WHERE VIEWER = @VIEWER')

		EXEC sp_executesql @QUERY
						  ,N'                                                       
   @VIEWER INT    
   '
						  ,@VIEWER = @VIEWER
	END;

GO

UPDATE BANK_DETAILS_EC
SET COD_TYPE_ACCOUNT = 2
WHERE COD_EC IN (7665, 12071, 12109, 12570, 12665, 13345, 13404, 13504, 13646, 13736, 13872, 693547, 694408)
AND ACTIVE = 1

GO


IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'SALES_TYPE'
		AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN

	ALTER TABLE [REPORT_TRANSACTIONS_EXP] ADD SALES_TYPE VARCHAR(50)


END

GO

IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP VIEW [VW_REPORT_TRANSACTIONS_EXP];
GO

CREATE VIEW [DBO].[VW_REPORT_TRANSACTIONS_EXP]
/*----------------------------------------------------------------------------------------                            
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                            
Project.......: TKPP                            
------------------------------------------------------------------------------------------                            
Author                          VERSION        Date                            Description                            
------------------------------------------------------------------------------------------                            
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                  
Caike Uch�a                        v2       10/01/2020                         add CNAE        
Kennedy Alef                       v3       08/04/2020                      add link de pagamento  
Caike Uch�a                        v4       30/04/2020                        insert ec prod  
Caike Uch�a                        v5       17/08/2020                        Add SALES_TYPE
------------------------------------------------------------------------------------------*/
AS
SELECT TOP (1000)
	[TRANSACTION].[COD_TRAN]
   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
   ,[TRANSACTION].[PLOTS] AS [PLOTS]
   ,CAST([DBO].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
   ,[EQUIPMENT].[TID] AS [TID]
   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
   ,[TRANSACTION].[BRAND]
   ,[TRANSACTION].[PAN]
   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
   , --TRANSACTION_DATA_EXT.NAME                                
	[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
   , --TRANSACTION_DATA_EXT.VALUE                               
	(SELECT
			[TRANSACTION_DATA_EXT].[VALUE]
		FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
		AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
	AS [AUTH_CODE]
   ,[ACQUIRER].[COD_AC]
   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
   ,[TRANSACTION].[COMMENT] AS [COMMENT]
   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
   ,[AFFILIATOR].[COD_AFFILIATOR]
   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
   ,(CASE
		WHEN [SITUATION].[COD_SITUATION] = 3 AND
			[PLAN].[COD_T_PLAN] = 2 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], [ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE]) - [ASS_TAX_DEPART].[RATE])
		WHEN [SITUATION].[COD_SITUATION] = 3 AND
			[PLAN].[COD_T_PLAN] = 1 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], 0) - [ASS_TAX_DEPART].[RATE])
		ELSE 0
	END) AS [NET_VALUE]
   ,
	--------------******------------                                
	[TRANSACTION].[COD_TTYPE]
   ,[COMPANY].[COD_COMP]
   ,[BRANCH_EC].[COD_EC]
   ,[BRANCH_EC].[COD_BRANCH]
   ,[STATE].[NAME] AS [STATE_NAME]
   ,[CITY].[NAME] AS [CITY_NAME]
   ,[SITUATION].[COD_SITUATION]
   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
   ,COALESCE([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]

   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
   ,[TRANSACTION].[COD_SOURCE_TRAN]
   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
   ,[TRANSACTION].[CREATED_AT]
   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)
			> 0 THEN 1
		ELSE 0
	END AS [SPLIT]
   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
   ,[USERS].[COD_USER] AS [COD_USER_REP]
   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
   ,[SEGMENTS].[CNAE]
   ,[TRANSACTION].[COD_USER]
   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
			> 0 THEN 1
		ELSE 0
	END AS [LINK_PAYMENT]
   ,[TRANSACTION].[CUSTOMER_EMAIL]
   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
			> 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]
		ELSE NULL
	END AS [PAYMENT_LINK_TRACKING]
   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [DBO].[PROCESS_BG_STATUS]
	ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
LEFT JOIN [ASS_DEPTO_EQUIP]
	ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
LEFT JOIN [EQUIPMENT]
	ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
LEFT JOIN [DEPARTMENTS_BRANCH]
	ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
LEFT JOIN [DEPARTMENTS]
	ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
LEFT JOIN [BRANCH_EC]
	ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
LEFT JOIN [ADDRESS_BRANCH]
	ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
LEFT JOIN [NEIGHBORHOOD]
	ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
LEFT JOIN [ASS_TAX_DEPART]
	ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
LEFT JOIN [PLAN]
	ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
LEFT JOIN [CITY]
	ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
LEFT JOIN [STATE]
	ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
LEFT JOIN [COMPANY]
	ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
LEFT JOIN [TRANSACTION_TYPE]
	ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
LEFT JOIN [SITUATION]
	ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
LEFT JOIN [TRADUCTION_SITUATION]
	ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
LEFT JOIN [SEGMENTS]
	ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
LEFT JOIN [DBO].[REPORT_TRANSACTIONS_EXP]
	ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
	ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
LEFT JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
LEFT JOIN [POSWEB_DATA_TRANSACTION]
	ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
LEFT JOIN [DBO].[SOURCE_TRANSACTION] WITH (NOLOCK)
	ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
	ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
LEFT JOIN [SALES_REPRESENTATIVE]
	ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
LEFT JOIN [USERS]
	ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
LEFT JOIN [USERS] AS [USER_TRAN]
	ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
LEFT JOIN [ASS_TR_TYPE_COMP]
	ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
LEFT JOIN [ACQUIRER]
	ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
	ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
	ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
	ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
	ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT];

GO

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP];
GO
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************    
----------------------------------------------------------------------------------------                          
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                            Description                          
 ------------------------------------------------------------------------------------------                          
 Fernando Henrique F.             V1       13/12/2018                          Creation                           
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                    
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                  
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE    
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento  
 Caike Uch�a                      v7       30/04/2020                        insert ec prod  
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess
 Caike Uch�a                      V9       17/08/2020                        Add SALES_TYPE
 ------------------------------------------------------------------------------------------    
*****************************************************************************************************************/

AS
BEGIN

	DECLARE @COUNT INT = 0;





	BEGIN

		---------------------------------------------                        
		--------------RECORDS INSERT-----------------                        
		---------------------------------------------                          
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE] INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

		IF @COUNT > 0
		BEGIN
			INSERT INTO [DBO].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
			[TRANSACTION_CODE],
			[AMOUNT],
			[PLOTS],
			[TRANSACTION_DATE],
			[TRANSACTION_TYPE],
			[CPF_CNPJ],
			[NAME],
			[SERIAL_EQUIP],
			[TID],
			[SITUATION],
			[BRAND],
			[PAN],
			[TRAN_DATA_EXT],
			[TRAN_DATA_EXT_VALUE],
			[AUTH_CODE],
			[COD_AC],
			[NAME_ACQUIRER],
			[COMMENT],
			[TAX],
			[ANTICIPATION],
			[COD_AFFILIATOR],
			[NAME_AFFILIATOR],
			[NET_VALUE],
			[COD_COMP],
			[COD_EC],
			[COD_BRANCH],
			[STATE_NAME],
			[CITY_NAME],
			[COD_SITUATION],
			[COD_DEPTO_BRANCH],
			[GROSS_VALUE_AGENCY],
			[NET_VALUE_AGENCY],
			[TYPE_TRAN],
			[COD_SOURCE_TRAN],
			[POSWEB],
			[SEGMENTS_NAME],
			[CREATED_TRANSACTION_DATE],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ],
			[SPLIT],
			[SALES_REP],
			[COD_USER_REP],
			[MODIFY_DATE],
			[CREDITOR_DOCUMENT],
			[COD_SALES_REP],
			[MODEL_POS],
			[CARD_NAME],
			[CNAE],
			[COD_USER],
			[NAME_USER],
			[LINK_PAYMENT_SERVICE],
			[CUSTOMER_EMAIL],
			[CUSTOMER_IDENTIFICATION],
			[PAYMENT_LINK_TRACKING],
			[NAME_PRODUCT_EC],
			[EC_PRODUCT],
			[EC_PRODUCT_CPF_CNPJ],
			[SALES_TYPE])
				(SELECT
					[TEMP].[COD_TRAN]
				   ,[TEMP].[TRANSACTION_CODE]
				   ,[TEMP].[AMOUNT]
				   ,[TEMP].[PLOTS]
				   ,[TEMP].[TRANSACTION_DATE]
				   ,[TEMP].[TRANSACTION_TYPE]
				   ,[TEMP].[CPF_CNPJ]
				   ,[TEMP].[NAME]
				   ,[TEMP].[SERIAL_EQUIP]
				   ,[TEMP].[TID]
				   ,[TEMP].[SITUATION]
				   ,[TEMP].[BRAND]
				   ,[TEMP].[PAN]
				   ,[TEMP].[TRAN_DATA_EXT]
				   ,[TEMP].[TRAN_DATA_EXT_VALUE]
				   ,[TEMP].[AUTH_CODE]
				   ,[TEMP].[COD_AC]
				   ,[TEMP].[NAME_ACQUIRER]
				   ,[TEMP].[COMMENT]
				   ,[TEMP].[TAX]
				   ,[TEMP].[ANTICIPATION]
				   ,[TEMP].[COD_AFFILIATOR]
				   ,[TEMP].[NAME_AFFILIATOR]
				   ,[TEMP].[NET_VALUE]
				   ,[TEMP].[COD_COMP]
				   ,[TEMP].[COD_EC]
				   ,[TEMP].[COD_BRANCH]
				   ,[TEMP].[STATE_NAME]
				   ,[TEMP].[CITY_NAME]
				   ,[TEMP].[COD_SITUATION]
				   ,[TEMP].[COD_DEPTO_BRANCH]
				   ,[TEMP].[GROSS_VALUE_AGENCY]
				   ,[TEMP].[NET_VALUE_AGENCY]
				   ,[TEMP].[TYPE_TRAN]
				   ,[TEMP].[COD_SOURCE_TRAN]
				   ,[TEMP].[POSWEB]
				   ,[TEMP].[SEGMENTS_NAME]
				   ,[TEMP].[CREATED_AT]
				   ,[TEMP].[COD_EC_TRANS]
				   ,[TEMP].[TRANS_EC_NAME]
				   ,[TEMP].[TRANS_EC_CPF_CNPJ]
				   ,[TEMP].[SPLIT]
				   ,[SALES_REP]
				   ,[COD_USER_REP]
				   ,GETDATE()
				   ,[CREDITOR_DOCUMENT]
				   ,[COD_SALES_REP]
				   ,[TEMP].[MODEL_POS]
				   ,[CARD_NAME]
				   ,[CNAE]
				   ,[COD_USER]
				   ,[NAME_USER]
				   ,[LINK_PAYMENT]
				   ,[CUSTOMER_EMAIL]
				   ,[CUSTOMER_IDENTIFICATION]
				   ,[TEMP].[PAYMENT_LINK_TRACKING]
				   ,[TEMP].[NAME_PRODUCT_EC]
				   ,[TEMP].[EC_PRODUCT]
				   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
				   ,[TEMP].[SALES_TYPE]
				FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;


		---------------------------------------------                        
		--------------RECORDS UPDATE-----------------                        
		---------------------------------------------                          
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_TRANSACTIONS_EXP]
			SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
			   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
			   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
			FROM [REPORT_TRANSACTIONS_EXP]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;
	END;
END;


GO

IF OBJECT_ID('SP_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP];
GO

CREATE PROCEDURE [DBO].[SP_REPORT_TRANSACTIONS_EXP]
/***************************************************************************************  
----------------------------------------------------------------------------------------  
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author               VERSION         Date                     Description  
------------------------------------------------------------------------------------------  
Fernando Henrique F.   V1         13/12/2018               Creation  
Kennedy Alef           V2         16/01/2018               Modify  
Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT  
Caike Uch�a            V3         15/08/2019               inserting coluns  
Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC  
Caike Uch�a            V5         20/01/2020               ADD CNAE  
Kennedy Alef           v3         08/04/2020               add link de pagamento  
Caike Uch�a            v4         30/04/2020               insert ec prod  
Caike Uch�a            v5         17/08/2020               Add SALES_TYPE
---------------------------------------------           ---------------------------------------------  
********************************************************************************************/ (@CODCOMP VARCHAR(10),
@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@EC VARCHAR(10),
@BRANCH VARCHAR(10),
@DEPART VARCHAR(10),
@TERMINAL VARCHAR(100),
@STATE VARCHAR(100),
@CITY VARCHAR(100),
@TYPE_TRAN VARCHAR(10),
@SITUATION VARCHAR(10),
@NSU VARCHAR(100) = NULL,
@NSU_EXT VARCHAR(100) = NULL,
@BRAND VARCHAR(50) = NULL,
@PAN VARCHAR(50) = NULL,
@COD_AFFILIATOR INT = NULL,
@TRACKING_TRANSACTION VARCHAR(100) = NULL,
@DESCRIPTION VARCHAR(100) = NULL,
@SPOT_ELEGIBLE INT = 0,
@COD_ACQ INT = NULL,
@SOURCE_TRAN INT = NULL,
@POSWEB INT = 0,
@SPLIT INT = NULL,
@INITIAL_VALUE DECIMAL(22, 6) = NULL,
@FINAL_VALUE DECIMAL(22, 6) = NULL,
@COD_SALES_REP INT = NULL)
AS
BEGIN
	DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
	DECLARE @TIME_FINAL_DATE TIME;
	SET NOCOUNT ON;
	SET ARITHABORT ON;
	BEGIN
		SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');
		--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));  
		--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )  
		SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);
		IF (@TIME_FINAL_DATE = '00:00:00')
			SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));
		SET @QUERY_BASIS = '  
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE  
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT  
      ,[REPORT_TRANSACTIONS_EXP].PLOTS  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE  
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ  
      ,[REPORT_TRANSACTIONS_EXP].NAME  
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP  
      ,[REPORT_TRANSACTIONS_EXP].TID  
      ,[REPORT_TRANSACTIONS_EXP].SITUATION  
      ,[REPORT_TRANSACTIONS_EXP].BRAND  
      ,[REPORT_TRANSACTIONS_EXP].PAN  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT  
   ,(  
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT  
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN  
      ) AS [AUTH_CODE]  
      ,[REPORT_TRANSACTIONS_EXP].COD_AC  
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER  
      ,[REPORT_TRANSACTIONS_EXP].COMMENT  
      ,[REPORT_TRANSACTIONS_EXP].TAX  
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION  
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR  
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE  
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY  
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN  
      ,[REPORT_TRANSACTIONS_EXP].POSWEB  
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME  
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME  
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME  
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ  
      ,[REPORT_TRANSACTIONS_EXP].SPLIT  
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]  
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT  
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP  
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS  
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME  
      ,[REPORT_TRANSACTIONS_EXP].CNAE  
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION  
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING  
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]  
	  ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]  
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP  
    ';
		IF @INITIAL_DATE IS NOT NULL
			AND @FINAL_DATE IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');
		IF @EC IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');
		IF @BRANCH IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');
		IF @DEPART IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');
		IF LEN(@TERMINAL) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');
		IF LEN(@STATE) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');
		IF LEN(@CITY) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');
		IF LEN(@TYPE_TRAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');
		IF LEN(@SITUATION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');
		IF LEN(@BRAND) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');
		IF LEN(@PAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');
		IF LEN(@NSU) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');
		IF LEN(@NSU_EXT) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');
		--ELSE  
		-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL  
		-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');  
		IF @COD_AFFILIATOR IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');
		IF LEN(@TRACKING_TRANSACTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');
		IF LEN(@DESCRIPTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');
		IF @SPOT_ELEGIBLE = 1
		BEGIN
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE  
        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');
		END;
		IF @COD_ACQ IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');
		IF @SOURCE_TRAN IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');
		IF @POSWEB = 1
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');
		IF (@INITIAL_VALUE > 0)
			AND (@FINAL_VALUE >= @INITIAL_VALUE)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');
		IF (@SPLIT = 1)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');
		--SELECT @QUERY_BASIS  
		EXEC [sp_executesql] @QUERY_BASIS
							,N'  
   @CODCOMP VARCHAR(10),  
   @INITIAL_DATE DATETIME,  
   @FINAL_DATE DATETIME,  
   @EC int,  
   @BRANCH int,  
   @DEPART int,  
   @TERMINAL varchar(14),  
   @STATE varchar(25),  
   @CITY varchar(40),  
   @TYPE_TRAN VARCHAR(10),  
   @SITUATION VARCHAR(10),  
   @NSU varchar(100),  
   @NSU_EXT varchar(100),  
   @BRAND varchar(50),  
   @COD_AFFILIATOR INT,  
   @PAN VARCHAR(50),  
   @SOURCE_TRAN INT,  
   @POSWEB INT,  
   @INITIAL_VALUE DECIMAL(22,6),  
   @FINAL_VALUE DECIMAL(22,6),  
   @COD_SALES_REP INT,  
   @COD_ACQ INT  
   '
							,@CODCOMP = @CODCOMP
							,@INITIAL_DATE = @INITIAL_DATE
							,@FINAL_DATE = @FINAL_DATE
							,@EC = @EC
							,@BRANCH = @BRANCH
							,@DEPART = @DEPART
							,@TERMINAL = @TERMINAL
							,@STATE = @STATE
							,@CITY = @CITY
							,@TYPE_TRAN = @TYPE_TRAN
							,@SITUATION = @SITUATION
							,@NSU = @NSU
							,@NSU_EXT = @NSU_EXT
							,@BRAND = @BRAND
							,@PAN = @PAN
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = @SOURCE_TRAN
							,@POSWEB = @POSWEB
							,@INITIAL_VALUE = @INITIAL_VALUE
							,@FINAL_VALUE = @FINAL_VALUE
							,@COD_SALES_REP = @COD_SALES_REP
							,@COD_ACQ = @COD_ACQ;
	END;
END;


GO

SELECT
	[TRANSACTION].COD_TRAN
   ,ISNULL(PRODUCTS_ACQUIRER.[NAME], '') AS PROD_ACQ INTO #TEMP_EXP_TOTAL
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN PRODUCTS_ACQUIRER
	ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [TRANSACTION].CREATED_AT > '2020-01-01 00:00:00'


GO

CREATE TABLE #DELETE (
	COD_TRAN INT
   ,PROD_ACQ VARCHAR(200)
)

DECLARE @CONT INT;

SET @CONT = 0;

WHILE @CONT < 100
BEGIN

INSERT INTO #DELETE
	SELECT TOP 25000
		COD_TRAN
	   ,PROD_ACQ
	FROM #TEMP_EXP_TOTAL

UPDATE REPORT_TRANSACTIONS_EXP
SET SALES_TYPE = #DELETE.PROD_ACQ
FROM REPORT_TRANSACTIONS_EXP
JOIN #DELETE
	ON #DELETE.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
WHERE REPORT_TRANSACTIONS_EXP.COD_TRAN IN (SELECT
		COD_TRAN
	FROM #DELETE)

DELETE FROM #TEMP_EXP_TOTAL
WHERE COD_TRAN IN (SELECT
			COD_TRAN
		FROM #DELETE)

DELETE FROM #DELETE

SELECT
	@CONT AS QTY;

SET @CONT = @CONT + 1;

END

DROP TABLE #TEMP_EXP_TOTAL
DROP TABLE #DELETE

GO

--DECLARANDO VARIAVEIS
DECLARE @COD_EC INT;
DECLARE @COD_USER INT;

--CRIANDO UM CURSOR
DECLARE ACCEPTUSER CURSOR FOR SELECT
	USERS.COD_EC
   ,USERS.COD_USER
FROM USERS
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
	AND COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT IS NULL
	AND USERS.ACCEPT = 1

-- ABRINDO UM CURSOR

OPEN ACCEPTUSER

--SELECIONAR OS DADOS( busca o pr�ximo dado do cursor)

FETCH NEXT FROM ACCEPTUSER
INTO @COD_EC, @COD_USER;

-- itera��o entre os dados retornados pelo Cursor ( Enquanto tiver retornando dados, ele vai inserir as linhas)

WHILE @@fetch_status = 0
BEGIN

----Pegar os pr�ximos dados

UPDATE COMMERCIAL_ESTABLISHMENT
SET USER_TCU_ACCEPT = @COD_USER
WHERE COD_EC = @COD_EC

FETCH NEXT FROM ACCEPTUSER
INTO @COD_EC, @COD_USER;
--SELECT * FROM DATA_EQUIPMENT_AC WHERE CODE= @CODE AND ACTIVE= 1 AND COD_AC = 10

END

-- FECHANDO E DESALOCANDO O CURSOR DA MEM�RIA 

CLOSE ACCEPTUSER
DEALLOCATE ACCEPTUSER


GO

IF OBJECT_ID('SP_LS_DATA_EMAIL_SMS_RESEND') IS NOT NULL
	DROP PROCEDURE [SP_LS_DATA_EMAIL_SMS_RESEND];
GO
CREATE PROCEDURE [DBO].[SP_LS_DATA_EMAIL_SMS_RESEND]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_LS_DATA_EMAIL_SMS_RESEND]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         03/07/2020                          Creation       
Caike Uch�a                       V2         18/08/2020                  Add Contact active and Term_Token
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@VALUE VARCHAR(200))
AS
BEGIN



	DECLARE @COD_USER INT;

	DECLARE @CODE_TERM VARCHAR(64) = NULL

	DECLARE @COD_AFFILIATOR INT;

	DECLARE @TCU_COMPLETE INT = 0;

	DECLARE @EMAIL_RET VARCHAR(200);

	DECLARE @NAME_RET VARCHAR(200);

	DECLARE @ACCESS_KEY VARCHAR(200);

	DECLARE @CONT INT;

	DECLARE @NOTIFY_TCU INT;

	DECLARE @COD_ACESS VARCHAR(100);

	DECLARE @SUBDOMAIN VARCHAR(100);

	DECLARE @COLOR VARCHAR(16) = NULL;

	DECLARE @LOG_AF VARCHAR(256) = NULL;

	DECLARE @PHONE_NUMBER VARCHAR(100);

	DECLARE @PASSPROV VARCHAR(100) = NULL;

	DECLARE @DDD INT;



	IF (SELECT
				COUNT(*)
			FROM COMMERCIAL_ESTABLISHMENT
			WHERE COD_EC = @COD_EC
			AND ACTIVE = 1
			AND TCU_ACCEPTED = 1)
		> 0

		THROW 61072, 'THIS ESTABLISHMENT HAS ALTERADY ACCEPEPTED THE TCU', 1;



	SELECT TOP 1
		@CONT = COUNT(*)
	   ,@COD_USER = USERS.COD_USER
	   ,@ACCESS_KEY = COMPANY.ACCESS_KEY
	   ,@COD_ACESS = USERS.COD_ACCESS
	   ,@COD_AFFILIATOR = USERS.COD_AFFILIATOR
	FROM USERS
	INNER JOIN COMPANY
		ON COMPANY.COD_COMP = USERS.COD_COMP
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE
		ON USERS.COD_EC = CE.COD_EC
	WHERE USERS.COD_EC = @COD_EC
	AND USERS.ACTIVE = 1
	GROUP BY USERS.COD_USER
			,COMPANY.ACCESS_KEY
			,USERS.COD_ACCESS
			,USERS.COD_AFFILIATOR;


	IF @CONT IS NULL
		THROW 61071, 'THIS ESTABLISHMENT NOT CONTAIN USER', 1;

	EXEC [SP_REG_TERM_TOKEN] @COD_USER

	SELECT
		@CODE_TERM = CODE
	FROM TERM_TOKEN
	WHERE COD_USER = @COD_USER
	AND ACTIVE = 1


	EXEC SP_REG_PROV_PASS_USER @CODACESS = @COD_ACESS
							  ,@ACCESS_KEY = @ACCESS_KEY
							  ,@VALUE = @VALUE
							  ,@REQUIRED = 1
							  ,@COD_AFFILIATOR = @COD_AFFILIATOR
							  ,@NOT_RETURN = 1;


	SELECT
		@EMAIL_RET = USERS.EMAIL
	   ,@NAME_RET = USERS.IDENTIFICATION
	   ,@NOTIFY_TCU = IIF(CE.TCU_ACCEPTED = 0, 1, 0)
	   ,@SUBDOMAIN = AFFILIATOR.SUBDOMAIN
	   ,@COLOR = T.COLOR_HEADER
	   ,@LOG_AF = T.LOGO_AFFILIATE
	   ,@PHONE_NUMBER = CONTACT_USERS.NUMBER
	   ,@PASSPROV = PROVISORY_PASS_USER.[VALUE]
	   ,@DDD = CONTACT_USERS.DDD
	FROM USERS
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE
		ON USERS.COD_EC = CE.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
	LEFT JOIN THEMES T
		ON AFFILIATOR.COD_AFFILIATOR = T.COD_AFFILIATOR
			AND T.ACTIVE = 1
	LEFT JOIN CONTACT_USERS
		ON CONTACT_USERS.COD_USER = USERS.COD_USER
			AND CONTACT_USERS.ACTIVE = 1
	INNER JOIN PROVISORY_PASS_USER
		ON PROVISORY_PASS_USER.COD_USER = USERS.COD_USER
	WHERE USERS.COD_USER = @COD_USER;


	SELECT
		@TCU_COMPLETE = 1
	FROM SERVICES_AVAILABLE SA
	JOIN ITEMS_SERVICES_AVAILABLE ISA
		ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE
			AND ISA.ACTIVE = 1
	WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR
	AND SA.COD_EC IS NULL
	AND SA.ACTIVE = 1
	AND ISA.NAME = 'TCUDETAILED'



	SELECT
		@COD_USER AS COD_USER
	   ,@COD_ACESS AS [login]
	   ,@EMAIL_RET AS EMAIL
	   ,@NAME_RET AS [NAME]
	   ,@ACCESS_KEY AS ACCESS_KEY
	   ,@NOTIFY_TCU AS NOTIFY_TCU
	   ,@TCU_COMPLETE AS TCU_COMPLETE
	   ,@CODE_TERM AS CODE_TERM
	   ,@COD_AFFILIATOR AS CODAFF
	   ,@SUBDOMAIN AS SUBDOMAIN
	   ,@COLOR AS AFF_COLOR
	   ,@LOG_AF AS LOG_AFF
	   ,@PHONE_NUMBER AS PHONE_NUMBER
	   ,@DDD AS DDD
	   ,ISNULL(@PASSPROV, @VALUE) AS PASS;

END;



GO

IF OBJECT_ID('SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE') IS NOT NULL
	DROP PROCEDURE [SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE];
GO

CREATE PROCEDURE [DBO].[SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_RESEND_EMAIL_SMS_SERVICE]       
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         18/08/2020                          Creation        
------------------------------------------------------------------------------------------*/
AS
BEGIN

	SELECT DISTINCT
		USERS.COD_EC
	FROM USERS
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
			AND COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT IS NULL


END;

GO

IF OBJECT_ID('SP_REG_RESEND_EMAIL_SMS_SERVICE') IS NOT NULL
	DROP PROCEDURE [SP_REG_RESEND_EMAIL_SMS_SERVICE];
GO

CREATE PROCEDURE [DBO].[SP_REG_RESEND_EMAIL_SMS_SERVICE]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_REG_RESEND_EMAIL_SMS_SERVICE]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         18/08/2020                          Creation       
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@VALUE VARCHAR(200))
AS
BEGIN


	DECLARE @COD_USER INT;

	DECLARE @CODE_TERM VARCHAR(64) = NULL

	DECLARE @COD_AFFILIATOR INT;

	DECLARE @TCU_COMPLETE INT = 0;

	DECLARE @EMAIL_RET VARCHAR(200);

	DECLARE @NAME_RET VARCHAR(200);

	DECLARE @ACCESS_KEY VARCHAR(200);

	DECLARE @CONT INT;

	DECLARE @NOTIFY_TCU INT;

	DECLARE @COD_ACESS VARCHAR(100);

	DECLARE @SUBDOMAIN VARCHAR(100);

	DECLARE @COLOR VARCHAR(16) = NULL;

	DECLARE @LOG_AF VARCHAR(256) = NULL;

	DECLARE @PHONE_NUMBER VARCHAR(100);

	DECLARE @PASSPROV VARCHAR(100) = NULL;

	DECLARE @DDD INT;



	IF (SELECT
				COUNT(*)
			FROM COMMERCIAL_ESTABLISHMENT
			WHERE COD_EC = @COD_EC
			AND ACTIVE = 1
			AND TCU_ACCEPTED = 1
			AND USER_TCU_ACCEPT IS NOT NULL)
		= 0

	BEGIN

		SELECT TOP 1
			@CONT = COUNT(*)
		   ,@COD_USER = USERS.COD_USER
		   ,@ACCESS_KEY = COMPANY.ACCESS_KEY
		   ,@COD_ACESS = USERS.COD_ACCESS
		   ,@COD_AFFILIATOR = USERS.COD_AFFILIATOR
		FROM USERS
		INNER JOIN COMPANY
			ON COMPANY.COD_COMP = USERS.COD_COMP
		INNER JOIN COMMERCIAL_ESTABLISHMENT CE
			ON USERS.COD_EC = CE.COD_EC
		WHERE USERS.COD_EC = @COD_EC
		AND USERS.ACTIVE = 1
		GROUP BY USERS.COD_USER
				,COMPANY.ACCESS_KEY
				,USERS.COD_ACCESS
				,USERS.COD_AFFILIATOR;


		EXEC [SP_REG_TERM_TOKEN] @COD_USER

		SELECT
			@CODE_TERM = CODE
		FROM TERM_TOKEN
		WHERE COD_USER = @COD_USER
		AND ACTIVE = 1

		IF (@CONT IS NOT NULL)
		BEGIN

			EXEC SP_REG_PROV_PASS_USER @CODACESS = @COD_ACESS
									  ,@ACCESS_KEY = @ACCESS_KEY
									  ,@VALUE = @VALUE
									  ,@REQUIRED = 1
									  ,@COD_AFFILIATOR = @COD_AFFILIATOR
									  ,@NOT_RETURN = 1;


			SELECT
				@EMAIL_RET = USERS.EMAIL
			   ,@NAME_RET = USERS.IDENTIFICATION
			   ,@NOTIFY_TCU = IIF(CE.TCU_ACCEPTED = 0, 1, 0)
			   ,@SUBDOMAIN = AFFILIATOR.SUBDOMAIN
			   ,@COLOR = T.COLOR_HEADER
			   ,@LOG_AF = T.LOGO_AFFILIATE
			   ,@PHONE_NUMBER = CONTACT_USERS.NUMBER
			   ,@PASSPROV = PROVISORY_PASS_USER.[VALUE]
			   ,@DDD = CONTACT_USERS.DDD
			FROM USERS
			INNER JOIN COMMERCIAL_ESTABLISHMENT CE
				ON USERS.COD_EC = CE.COD_EC
			LEFT JOIN AFFILIATOR
				ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
			LEFT JOIN THEMES T
				ON AFFILIATOR.COD_AFFILIATOR = T.COD_AFFILIATOR
					AND T.ACTIVE = 1
			INNER JOIN CONTACT_USERS
				ON CONTACT_USERS.COD_USER = USERS.COD_USER
					AND CONTACT_USERS.ACTIVE = 1
			INNER JOIN PROVISORY_PASS_USER
				ON PROVISORY_PASS_USER.COD_USER = USERS.COD_USER
			WHERE USERS.COD_USER = @COD_USER;


			SELECT
				@TCU_COMPLETE = 1
			FROM SERVICES_AVAILABLE SA
			JOIN ITEMS_SERVICES_AVAILABLE ISA
				ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE
					AND ISA.ACTIVE = 1
			WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR
			AND SA.COD_EC IS NULL
			AND SA.ACTIVE = 1
			AND ISA.NAME = 'TCUDETAILED'



			SELECT
				@COD_USER AS COD_USER
			   ,@COD_ACESS AS [login]
			   ,@EMAIL_RET AS EMAIL
			   ,@NAME_RET AS [NAME]
			   ,@ACCESS_KEY AS ACCESS_KEY
			   ,@NOTIFY_TCU AS NOTIFY_TCU
			   ,@TCU_COMPLETE AS TCU_COMPLETE
			   ,@CODE_TERM AS CODE_TERM
			   ,@COD_AFFILIATOR AS CODAFF
			   ,@SUBDOMAIN AS SUBDOMAIN
			   ,@COLOR AS AFF_COLOR
			   ,@LOG_AF AS LOG_AFF
			   ,@PHONE_NUMBER AS PHONE_NUMBER
			   ,@DDD AS DDD
			   ,ISNULL(@PASSPROV, @VALUE) AS PASS;

		END

	END

END;

GO


GO

IF OBJECT_ID('SP_UPDATE_SERIAL_DATA_AC') IS NOT NULL
	DROP PROCEDURE [SP_UPDATE_SERIAL_DATA_AC];
GO

CREATE PROCEDURE [DBO].[SP_UPDATE_SERIAL_DATA_AC]
/*----------------------------------------------------------------------------------------                  
PROCEDURE NAME: [SP_UPDATE_SERIAL_DATA_AC]                  
PROJECT.......: TKPP                  
------------------------------------------------------------------------------------------                  
AUTHOR                          VERSION        DATE                            DESCRIPTION                  
------------------------------------------------------------------------------------------                  
LUIZ AQUINO                        V1          09/11/2018                      CREATION            
LUCAS AGUIAR                       V2          11/11/2018                       CHANGED       
CAIKE UCHOA                        V3          14/11/2019                       CHANGED  
CAIKE UCHOA                        V4          17/08/2020                    RETIRAR BLUETOOTH         
------------------------------------------------------------------------------------------*/ (@CODCOMP INT,
@CODEQUIP INT,
@CODACQUIRE INT = NULL,
@CODE VARCHAR(200) = NULL,
@CODMODEL INT,
@CHIP VARCHAR(200),
@ACTIVE INT,
@CODUSER INT)
AS

BEGIN
	DECLARE @COD_EC INT;
	DECLARE @TYPE_MODEL VARCHAR(100);


	INSERT INTO EQUIPMENT_LOG (CREATED_AT, TID, SERIAL, COD_MODEL, COD_COMP, ACTIVE, MODIFY_DATE, INITIALIZATION_DATE, CHIP, COD_USER, PUK, COD_OPER, COD_EQUIP)
		SELECT
			current_timestamp
		   ,TID
		   ,SERIAL
		   ,COD_MODEL
		   ,COD_COMP
		   ,ACTIVE
		   ,MODIFY_DATE
		   ,INITIALIZATION_DATE
		   ,CHIP
		   ,COD_USER
		   ,PUK
		   ,COD_OPER
		   ,COD_EQUIP
		FROM EQUIPMENT
		WHERE COD_EQUIP = @CODEQUIP;

	UPDATE EQUIPMENT
	SET COD_MODEL = @CODMODEL
	   ,CHIP = @CHIP
	   ,ACTIVE = @ACTIVE
	WHERE COD_EQUIP = @CODEQUIP;


	SELECT
		@TYPE_MODEL = MODEL_GROUP.CODE

	FROM EQUIPMENT
	INNER JOIN EQUIPMENT_MODEL
		ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
	INNER JOIN MODEL_GROUP
		ON MODEL_GROUP.COD_MODEL_GROUP = EQUIPMENT_MODEL.COD_MODEL_GROUP
	WHERE COD_EQUIP = @CODEQUIP

	IF @TYPE_MODEL <> 'ONLINE'
	BEGIN
		-- Busca o cod_ec  
		SELECT TOP 1
			@COD_EC = COD_EC
		FROM VW_COMPANY_EC_BR_DEP_EQUIP_MODEL
		WHERE COD_EQUIP = @CODEQUIP

		-- Chama procedure de valida��o e inser��o de TIDs  
		EXEC [SP_VAL_TID_BY_SEGMENT] @COD_EC = @COD_EC
									,@COD_USER = @CODUSER
									,@COD_COMP = @CODCOMP
	END
	ELSE
	BEGIN
		-- disponibiliza os TIDs existentes deste terminal para outros equipamentos   
		UPDATE DATA_TID_AVAILABLE_EC
		SET AVAILABLE = 1
		FROM DATA_TID_AVAILABLE_EC
		INNER JOIN DATA_EQUIPMENT_AC
			ON DATA_EQUIPMENT_AC.COD_EQUIP = @CODEQUIP
			AND DATA_EQUIPMENT_AC.ACTIVE = 1
			AND DATA_EQUIPMENT_AC.CODE = DATA_TID_AVAILABLE_EC.TID
			AND DATA_EQUIPMENT_AC.COD_AC IN (SELECT
					COD_AC
				FROM ACQUIRER
				WHERE [GROUP] = 'PAGSEGURO')

		--Inativa todos os TID's associados ao equipamento      
		UPDATE DATA_EQUIPMENT_AC
		SET ACTIVE = 0
		WHERE COD_EQUIP = @CODEQUIP
		AND COD_AC IN (SELECT
				COD_AC
			FROM ACQUIRER
			WHERE [GROUP] = 'PAGSEGURO')

		--Inativa a rota cadastrada para este equipamento    
		UPDATE ROUTE_ACQUIRER
		SET ACTIVE = 0
		   ,COD_USER_MODIFY = @CODUSER
		   ,MODIFY_DATE = current_timestamp
		WHERE COD_EQUIP = @CODEQUIP;
	END

END;


GO

GO

IF OBJECT_ID('SP_LS_PLAN_DN') IS NOT NULL
	DROP PROCEDURE [SP_LS_PLAN_DN];
GO
CREATE PROCEDURE [DBO].[SP_LS_PLAN_DN]

/*************************************************************************************************  
----------------------------------------------------------------------------------------          
Procedure Name: [SP_LS_PLAN_DN]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Kennedy Alef                      V1        27/07/2018                         Creation      
Marcus Gall Barreira              V2        30/10/2019                         Changed      
Caike Uch�a                       V3        19/08/2020                       add afiliador       
------------------------------------------------------------------------------------------  
*************************************************************************************************/ (@CODCOMP INT,
@COD_SEG INT,
@TYPE_PLAN INT,
@ACTIVO INT,
@NOME VARCHAR(100),
@COD_AFF INT = NULL)
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);

	DECLARE @CATEGORY INT;

	SELECT
		@CATEGORY = [COD_PLAN_CATEGORY]
	FROM [PLAN_CATEGORY]
	WHERE [CATEGORY] = 'AUTO CADASTRO';

	BEGIN

		SET @QUERY = '          
 SELECT            
 [PLAN].COD_PLAN,          
 [PLAN].CODE AS NAME,          
 [PLAN].ACTIVE ,          
 TYPE_PLAN.CODE AS TYPE_PLAN ,        
 [PLAN].COD_BILLING,      
 BILLING_TYPE.[DESCRIPTION] AS BILLING_TYPE,      
 0 AS AVAILABLE_SALE,
 AFFILIATOR.[NAME] AS AFFILIATOR
 FROM [PLAN]           
 INNER JOIN TYPE_PLAN ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN      
 LEFT JOIN BILLING_TYPE ON BILLING_TYPE.COD_BILLING = [PLAN].COD_BILLING    
 LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = [PLAN].COD_AFFILIATOR
 WHERE [PLAN].COD_PLAN_CATEGORY <> ' + CAST(@CATEGORY AS VARCHAR) + ' and [PLAN].COD_COMP = ' + CAST(@CODCOMP AS VARCHAR) + ' AND [PLAN].ACTIVE = ' + CAST(@ACTIVO AS VARCHAR);


		IF @TYPE_PLAN IS NOT NULL
			SET @QUERY = @QUERY + ' AND TYPE_PLAN.COD_T_PLAN =' + CAST(@TYPE_PLAN AS VARCHAR);

		IF @COD_SEG IS NOT NULL
			SET @QUERY = @QUERY + ' AND [PLAN].COD_SEG = ' + CAST(@COD_SEG AS VARCHAR);

		IF @NOME IS NOT NULL
			SET @QUERY = @QUERY + ' AND [PLAN].CODE = @NOME';


		IF @COD_AFF IS NOT NULL
			SET @QUERY = @QUERY + ' AND [PLAN].COD_AFFILIATOR = @Cod_Aff';


		--EXECUTE (@QUERY)          

		EXEC [sp_executesql] @QUERY
							,N'          
@COD_SEG INT,          
@TYPE_PLAN INT,          
@NOME VARCHAR(100),          
@Cod_Aff INT          
'
							,@COD_SEG = @COD_SEG
							,@TYPE_PLAN = @TYPE_PLAN
							,@NOME = @NOME
							,@COD_AFF = @COD_AFF;

	END;
END;

GO

IF OBJECT_ID('SP_REPORT_PLAN_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_PLAN_EXP];
GO

CREATE PROCEDURE [DBO].[SP_REPORT_PLAN_EXP]
/*----------------------------------------------------------------------------------------                                                
Procedure Name: [SP_REPORT_PLAN_EXP]                                                
Project.......: TKPP                                                
------------------------------------------------------------------------------------------                                                
Author                       VERSION            Date             Description                                                
------------------------------------------------------------------------------------------                                                        
Caike Uch�a                   v1            05/12/2019              Created      
Caike Uch�a                   v2            19/08/2020             add affiliator
------------------------------------------------------------------------------------------*/ (@CODE VARCHAR(255) = NULL,
@TYPE_PLAN INT = NULL,
@ACTIVE INT = NULL,
@COD_AFFILIATOR INT = NULL)
AS
BEGIN

	DECLARE @QUERY NVARCHAR(MAX);

	SET @QUERY =
	'SELECT   
PLAN_CATEGORY.CATEGORY AS CATEGORY,  
CASE   
WHEN TAX_PLAN.COD_BRAND = NULL THEN 1  
ELSE 0  
END AS [PLAN_WITHOUT_BRAND],  
[PLAN].ACTIVE,   
[PLAN].CODE,  
[PLAN].[DESCRIPTION],  
TYPE_PLAN.CODE AS TYPE_PLAN,  
TAX_PLAN.INTERVAL,  
TRANSACTION_TYPE.CODE AS TRANSACTION_TYPE,  
BRAND.[GROUP] AS BRAND,  
TAX_PLAN.QTY_INI_PLOTS,  
TAX_PLAN.QTY_FINAL_PLOTS,  
TAX_PLAN.PARCENTAGE,  
TAX_PLAN.RATE,  
TAX_PLAN.ANTICIPATION_PERCENTAGE,  
SOURCE_TRANSACTION.CODE AS SOURCE_TRANSACTION,
AFFILIATOR.[NAME] AS AFFILIATOR
FROM TAX_PLAN  
INNER JOIN [PLAN] ON [PLAN].COD_PLAN = TAX_PLAN.COD_PLAN  
INNER JOIN PLAN_CATEGORY ON PLAN_CATEGORY.COD_PLAN_CATEGORY = [PLAN].COD_PLAN_CATEGORY  
INNER JOIN TYPE_PLAN ON TYPE_PLAN.COD_T_PLAN = [PLAN].COD_T_PLAN  
INNER JOIN TRANSACTION_TYPE ON TRANSACTION_TYPE.COD_TTYPE = TAX_PLAN.COD_TTYPE  
LEFT JOIN BRAND ON BRAND.COD_BRAND = TAX_PLAN.COD_BRAND  
INNER JOIN SOURCE_TRANSACTION ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = TAX_PLAN.COD_SOURCE_TRAN  
LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = [PLAN].COD_AFFILIATOR
WHERE [PLAN].ACTIVE= @ACTIVE AND TAX_PLAN.ACTIVE = 1'

	IF @CODE IS NOT NULL
		SET @QUERY = @QUERY + ' AND [PLAN].CODE = @CODE';

	IF @TYPE_PLAN IS NOT NULL
		SET @QUERY = @QUERY + ' AND TYPE_PLAN.COD_T_PLAN = @TYPE_PLAN';

	IF @COD_AFFILIATOR IS NOT NULL
		SET @QUERY = @QUERY + ' AND AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATOR'


	SET @QUERY = @QUERY + ' ORDER BY [PLAN].CODE';


	EXEC sp_executesql @QUERY
					  ,N'  
  @CODE VARCHAR(100),  
  @TYPE_PLAN INT,  
  @ACTIVE INT,
  @COD_AFFILIATOR INT
  '

					  ,@CODE = @CODE
					  ,@TYPE_PLAN = @TYPE_PLAN
					  ,@ACTIVE = @ACTIVE
					  ,@COD_AFFILIATOR = @COD_AFFILIATOR

END;

GO

IF OBJECT_ID('SP_GET_EC_INSIDECODE') IS NOT NULL
	DROP PROCEDURE [SP_GET_EC_INSIDECODE];
GO

CREATE PROCEDURE [DBO].[SP_GET_EC_INSIDECODE]
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_GET_EC_INSIDECODE]    Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         21/08/2020                          Creation        
------------------------------------------------------------------------------------------*/ (@COD_BRANCH INT)
AS
BEGIN

	SELECT
		COMMERCIAL_ESTABLISHMENT.COD_EC
	FROM BRANCH_EC
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	WHERE BRANCH_EC.COD_BRANCH = @COD_BRANCH


END;

GO


IF OBJECT_ID('SP_BILLET_INFO_PRINT') IS NOT NULL
    DROP PROCEDURE SP_BILLET_INFO_PRINT
GO
CREATE PROCEDURE [dbo].[SP_BILLET_INFO_PRINT]
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author              VERSION        Date                 Description
------------------------------------------------------------------------------------------
Luiz Aquino         V1             2020-04-30           CREATED
------------------------------------------------------------------------------------------*/
(
    @BARCODE VARCHAR(64)
)
AS BEGIN
    DECLARE @CodAwaitConfirm INT;
    DECLARE @CodPayment INT;
    DECLARE @CodAwaitCompensate INT;

    SELECT @CodAwaitConfirm = COD_SITUATION FROM SITUATION WHERE NAME = 'AWAITING CONFIRMATION PAYMENT';
    SELECT @CodPayment = COD_SITUATION FROM SITUATION WHERE NAME = 'AWAITING PAYMENT';
    SELECT @CodAwaitCompensate = COD_SITUATION FROM SITUATION WHERE NAME = 'AWAITING COMPENSATION';

    select
        BILLET_TRANSACTION.CREATED_AT,
        BILLET_TRANSACTION.TRANSACTION_CODE,
        BILLET_TRANSACTION.BILLET_AMOUNT,
        BILLET_TRANSACTION.DUE_DATE,
        CE.TRADING_NAME [EC_NAME],
        CE.CPF_CNPJ [EC_DOC],
        BILLET_TRANSACTION.BARCODE,
        BILLET_TRANSACTION.BILLET_URL,
        BILLET_TRANSACTION.DIGITABLE_LINE,
            (CASE   WHEN BILLET_TRANSACTION.COD_SITUATION = @CodAwaitConfirm THEN 'CONFIRMACAO'
                WHEN BILLET_TRANSACTION.COD_SITUATION = @CodPayment THEN 'PAGAMENTO'
                WHEN BILLET_TRANSACTION.COD_SITUATION = @CodAwaitCompensate THEN 'AGUARDANDO COMPENSAR'
                ELSE COALESCE(TS.SITUATION_TR, S.NAME)
        END) [SITUATION_BILL],
        BILLET_TRANSACTION.DESCRIPTION_TRAN_BILLET,
        BILLET_TRANSACTION.OPTIONAL_DESCRIPTOR,
        BILLET_TRANSACTION.COD_SITUATION,
        BILLET_TRANSACTION.INSTRUCTIONS,
        CUSTOMER_BILLET.NAME [CUSTOMER],
        CUSTOMER_BILLET.DOCUMENT,
        CUSTOMER_BILLET.STREET,
        CUSTOMER_BILLET.NUMBER,
        CUSTOMER_BILLET.COMPLEMENT,
        CUSTOMER_BILLET.ZIPCODE,
        CUSTOMER_BILLET.DISTRICT,
        CUSTOMER_BILLET.CITY,
        CUSTOMER_BILLET.STATE,
        CUSTOMER_BILLET.COUNTRY
    FROM BILLET_TRANSACTION
    JOIN CUSTOMER_BILLET on BILLET_TRANSACTION.COD_BILLET = CUSTOMER_BILLET.COD_BILLET
    JOIN COMMERCIAL_ESTABLISHMENT CE on BILLET_TRANSACTION.COD_EC = CE.COD_EC
    JOIN SITUATION S on BILLET_TRANSACTION.COD_SITUATION = S.COD_SITUATION
    JOIN TRADUCTION_SITUATION TS on S.COD_SITUATION = TS.COD_SITUATION
    WHERE BILLET_TRANSACTION.BARCODE = @BARCODE

END
GO

IF (SELECT COUNT(*) as index_count FROM sys.indexes WHERE object_id = OBJECT_ID('BILLET_TRANSACTION') AND name='IX_BILLET_BARCODE') = 0
BEGIN
    CREATE NONCLUSTERED INDEX IX_BILLET_BARCODE ON BILLET_TRANSACTION(BARCODE)
END

go

 IF OBJECT_ID('SP_FD_EC_RISK') IS NOT NULL
    DROP PROCEDURE [SP_FD_EC_RISK];
	 GO
CREATE PROCEDURE [dbo].[SP_FD_EC_RISK]    
    
/*----------------------------------------------------------------------------------------      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                          VERSION        Date                            Description      
------------------------------------------------------------------------------------------      
Elir Ribeiro                    v1             2020-08-14                    create procedure SP_FD_EC_RISK 
------------------------------------------------------------------------------------------*/    
(@CPF_CNPJ            VARCHAR(14),     
 @COD_REP             INT,     
 @ID_EC               INT,     
 @SEGMENT             INT,     
 @COMP                INT,     
 @TYPE                VARCHAR(100),     
 @COD_PLAN            INT          = NULL,     
 @COD_AFF             INT          = NULL,     
 @Active              BIT          = NULL,     
 @PersonType          VARCHAR(100) = NULL,     
 @CODSIT              INT          = NULL,     
 @WAS_BLOCKED_FINANCE INT          = NULL,     
 @COD_SITUATION_RISK  INT          = NULL,     
 @IS_PROVIDER         INT          = NULL,     
 @BRANCH_BUSINESS     INT          = NULL,     
 @RISK_SITUATION_LIST [CODE_TYPE] READONLY,     
 @CREATED_FROM        DATETIME     = NULL,     
 @CREATED_UNTIL       DATETIME     = NULL    
)  
  
AS    
     DECLARE @QUERY_ NVARCHAR(MAX);    
     DECLARE @COD_BLOCKED_FINANCE INT;    
    BEGIN    
        SET @QUERY_ = N'      
        SELECT
		CASE 
		WHEN COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IS NULL THEN ''CELER''
		ELSE AFFILIATOR.NAME       
		END AS [NOME DO AFILIADOR]
		, CASE 
		WHEN COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IS NULL THEN ''22347623000178''
		ELSE AFFILIATOR.CPF_CNPJ
		END AS [CNPJ]
	    ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME AS [NOME FANTASIA DO EC]
		,COMMERCIAL_ESTABLISHMENT.NAME AS [RAZÃO SOCIAL EC]
		,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS [CPF_CNPJ DO EC]
		,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT AS [LIMITE TRANSACAO]
		,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY AS [LIMITE DIARIO DE TRANSACAO]
		,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY AS [LIMITE MENSAL DE TRANSACAO]
	   FROM COMMERCIAL_ESTABLISHMENT      
   INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC      
   INNER JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG      
   INNER JOIN TYPE_ESTAB ON COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = TYPE_ESTAB.COD_TYPE_ESTAB      
   INNER JOIN SALES_REPRESENTATIVE ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP      
   INNER JOIN USERS ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER      
   INNER JOIN DEPARTMENTS_BRANCH ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH        
   INNER JOIN TYPE_RECEIPT ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC      
   INNER JOIN SITUATION_REQUESTS ON SITUATION_REQUESTS.COD_SIT_REQ = COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ      
   LEFT JOIN BRANCH_BUSINESS ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS      
   LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR      
   LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_SITUATION      
   LEFT JOIN TRADUCTION_RISK_SITUATION ON TRADUCTION_RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION      
   INNER JOIN ADDRESS_BRANCH  ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH AND ADDRESS_BRANCH.ACTIVE = 1      
   INNER JOIN NEIGHBORHOOD  ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH      
   INNER JOIN CITY    ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY      
   INNER JOIN STATE   ON STATE.COD_STATE = CITY.COD_STATE      
        WHERE      
   COMMERCIAL_ESTABLISHMENT.COD_COMP = @COMP';    
        SELECT @COD_BLOCKED_FINANCE = COD_SITUATION    
        FROM SITUATION    
        WHERE NAME = 'LOCKED FINANCIAL SCHEDULE';    
        IF @ID_EC IS NOT NULL    
            BEGIN    
                IF @TYPE = 'BRANCH'    
                    SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.COD_BRANCH = @ID_EC ';    
                    ELSE    
                    SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @ID_EC ';    
            END;    
        IF @SEGMENT IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SEG = @SEGMENT ';    
        IF @COD_REP IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = @COD_REP ';    
        IF @TYPE IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.TYPE_BRANCH = @TYPE ';    
        IF @CPF_CNPJ IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.CPF_CNPJ = @CPF_CNPJ ';    
        IF @COD_PLAN IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND  DEPARTMENTS_BRANCH.COD_PLAN = @COD_PLAN ';    
        IF @COD_AFF IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF';    
        IF @Active IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.ACTIVE = @Active';    
        IF @IS_PROVIDER IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.IS_PROVIDER = @IS_PROVIDER';    
        IF @PersonType IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND TYPE_ESTAB.CODE = @PersonType';    
        IF @CODSIT IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ = @CODSIT';    
        IF @WAS_BLOCKED_FINANCE = 1    
            BEGIN    
                SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCKED_FINANCE';    
            END;    
            ELSE    
            IF @WAS_BLOCKED_FINANCE = 0    
                SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION <> @COD_BLOCKED_FINANCE';    
        IF @COD_SITUATION_RISK IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = @COD_SITUATION_RISK';    
        IF @BRANCH_BUSINESS IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS = @BRANCH_BUSINESS';    
        IF EXISTS    
        (    
            SELECT TOP 1 CODE    
            FROM @RISK_SITUATION_LIST    
        )    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION IN (SELECT CODE FROM @RISK_SITUATION_LIST)';    
        SET @QUERY_ = CONCAT(@QUERY_, '  GROUP BY      
                              AFFILIATOR.NAME 
							,AFFILIATOR.CPF_CNPJ 
							,COMMERCIAL_ESTABLISHMENT.TRADING_NAME 
							,COMMERCIAL_ESTABLISHMENT.NAME 
							,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ 
							,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT 
							,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY 
							,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
							,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR   
							
                              ');    
        EXEC sp_executesql     
             @QUERY_,     
             N'      
  @CPF_CNPJ VARCHAR(14),      
  @COD_REP INT,      
  @ID_EC INT,      
  @SEGMENT INT,      
  @COMP INT,      
  @TYPE VARCHAR(100),      
  @COD_PLAN INT,      
  @COD_AFF INT,      
  @Active BIT,      
  @PersonType VARCHAR(100),      
  @CODSIT INT,      
  @WAS_BLOCKED_FINANCE INT,      
  @COD_SITUATION_RISK INT,      
  @IS_PROVIDER INT,      
  @BRANCH_BUSINESS INT,      
  @RISK_SITUATION_LIST [CODE_TYPE] READONLY      
 ',     
             @CPF_CNPJ = @CPF_CNPJ,     
             @COD_REP = @COD_REP,     
             @ID_EC = @ID_EC,     
             @SEGMENT = @SEGMENT,     
             @COMP = @COMP,     
             @TYPE = @TYPE,     
             @COD_PLAN = @COD_PLAN,     
             @COD_AFF = @COD_AFF,     
             @Active = @Active,     
             @PersonType = @PersonType,     
             @CODSIT = @CODSIT,     
             @WAS_BLOCKED_FINANCE = @WAS_BLOCKED_FINANCE,     
             @COD_SITUATION_RISK = @COD_SITUATION_RISK,     
             @IS_PROVIDER = @IS_PROVIDER,     
             @BRANCH_BUSINESS = @BRANCH_BUSINESS,     
             @RISK_SITUATION_LIST = @RISK_SITUATION_LIST;    
    END;    
  

  GO

    GO

IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL
    DROP VIEW [VW_REPORT_FULL_CASH_FLOW];
GO

CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]            
 /*----------------------------------------------------------------------------------------                          
 View Name: [VW_REPORT_FULL_CASH_FLOW]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                        Description                          
 -----------------------------------------------------------------------------------------                           
 Caike Uch�a                       V1         30/03/2020            mdr afiliador-pela parcela           
 Caike Uch�a                       V2         30/04/2020               add colunas produto ec    
 Caike Uch�a                       V3         03/08/2020                   add QTY_DAYS_ANTECIP  
 Caike Uch�a                       V4         20/08/2020                Corre��o val liquid afiliador
 -----------------------------------------------------------------------------------------*/           
AS    
WITH CTE    
AS    
(SELECT --TOP(1000)                                       
  TRANSACTION_TITLES.TAX_INITIAL    
    ,TRANSACTION_TITLES.ANTICIP_PERCENT AS ANTECIP_EC    
    ,COALESCE(AFFILIATOR.[NAME], 'CELER') AS AFFILIATOR    
    ,[TRANSACTION_TYPE].CODE AS TRAN_TYPE    
    ,TRANSACTION_TITLES.PLOT    
    ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME) AS TRANSACTION_DATE    
    ,COMMERCIAL_ESTABLISHMENT.[NAME] AS MERSHANT    
    ,[TRANSACTION_TITLES].ACQ_TAX    
    ,[TRANSACTION_TITLES].PREVISION_PAY_DATE    
    ,[TRANSACTION_TITLES].PREVISION_RECEIVE_DATE    
    ,[TRANSACTION_TITLES].AMOUNT    
    ,[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT    
    ,[TRANSACTION].CODE AS NSU    
    ,[TRANSACTION].BRAND AS BRAND    
    ,ACQUIRER.[NAME] AS ACQUIRER    
    ,(CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE    
   ELSE 0    
  END) AS RATE    
    ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB    
    ,COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0) AS ANTECIP_AFF    
    ,COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0) AS MDR_AFF    
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)) AS EC    
    ,0 AS '0'    
    ,(dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
  (TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.ANTICIP_PERCENT, (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  ) - (CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE    
   ELSE 0    
  END)) AS EC_TARIFF    
    ,[TRANSACTION].PLOTS AS TOTAL_PLOTS    
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)) AS AFF_DISCOUNT    
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  (TRANSACTION_TITLES.AMOUNT),    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],    
  TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT)    
  , (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END    
  )) AS AFF_DISCOUNT_TARIFF    
    ,(    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
  (    
  TRANSACTION_TITLES.AMOUNT,    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],    
  TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  [TRANSACTION_TITLES_COST].ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  )    
  -    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END))    
  ) AS AFF    
    ,((    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
  ((TRANSACTION_TITLES.AMOUNT),    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],    
  TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END    
  ))    
  -    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  (TRANSACTION_TITLES.AMOUNT),    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END))    
  )    
  + (CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE      
   ELSE 0    
  END) 
  -
  (CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN [TRANSACTION_TITLES_COST].RATE_PLAN      
   ELSE 0    
  END)
  ) AS AFF_TARIFF    
    ,[TRANSACTION].COD_ASS_TR_COMP    
    ,TRANSACTION_TITLES.COD_TITLE    
    ,CE_DESTINY.COD_EC    
    ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR    
    ,BRANCH_EC.COD_BRANCH    
    ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH    
    ,[TRANSACTION].PAN    
    ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS 'CPF_CNPJ_ORIGINATOR'    
    ,CE_DESTINY.[NAME] AS 'EC_NAME_DESTINY'    
    ,CE_DESTINY.CPF_CNPJ AS 'CPF_CNPJ_DESTINY'    
    ,AFFILIATOR.CPF_CNPJ AS 'CPF_AFF'    
    ,(SELECT    
    EQUIPMENT.SERIAL    
   FROM ASS_DEPTO_EQUIP    
   INNER JOIN EQUIPMENT    
    ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP    
   WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)    
  AS SERIAL    
    ,[TRANSACTION_DATA_EXT].[value] AS 'EXTERNAL_NSU'    
    ,[TRANSACTION].CODE    
    ,[TRANSACTION].COD_TRAN    
    ,[COMPANY].COD_COMP    
    ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN AS REP_COD_TRAN    
    ,[TRANSACTION].COD_SITUATION    
    ,dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL, [TRANSACTION_TITLES].AMOUNT) AS LIQUID_MDR_EC    
    ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS    
  (    
  COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT, 0),    
  [TRANSACTION_TITLES].PLOT,    
  dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  ) AS ANTECIP_DISCOUNT_EC    
    ,CASE    
   WHEN [TRANSACTION].PLOTS = 1 THEN dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], [TRANSACTION].AMOUNT)    
   ELSE dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], [TRANSACTION].AMOUNT / [TRANSACTION].PLOTS)    
  END AS LIQUID_MDR_AFF    
    ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS    
  (    
  COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0),    
  [TRANSACTION_TITLES].PLOT,    
  dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,    
  [TRANSACTION_TITLES_COST].[PERCENTAGE]),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  ) AS ANTECIP_DISCOUNT_AFF    
    ,CASE    
   WHEN (SELECT    
      COUNT(*)    
     FROM TRANSACTION_SERVICES WITH (NOLOCK)    
     WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN    
     AND TRANSACTION_SERVICES.COD_ITEM_SERVICE = 4)    
    > 0 THEN 1    
   ELSE 0    
  END AS SPLIT    
    ,EC_TRAN.COD_EC AS COD_EC_TRANS    
    ,EC_TRAN.NAME AS TRANS_EC_NAME    
    ,EC_TRAN.CPF_CNPJ AS TRANS_EC_CPF_CNPJ    
    ,[TRANSACTION_TITLES].[ASSIGNED]    
    ,[ASSIGN_FILE_TITLE].RETAINED_AMOUNT    
    ,[ASSIGN_FILE_TITLE].[ORIGINAL_DATE]    
    ,CAST([TRANSACTION_TITLES].CREATED_AT AS DATE) TRAN_TITTLE_DATE    
    ,CAST([TRANSACTION_TITLES].CREATED_AT AS TIME) TRAN_TITTLE_TIME    
    ,(SELECT TOP 1    
    [NAME]    
   FROM ACQUIRER(NOLOCK)    
   JOIN ASSIGN_FILE_ACQUIRE(NOLOCK) fType    
    ON fType.COD_AC = ACQUIRER.COD_AC    
    AND fType.COD_ASSIGN_FILE_MODEL = assignModel.COD_ASSIGN_FILE_MODEL)    
  [ASSIGNEE]    
    ,(SELECT    
    TRANSACTION_DATA_EXT.[value]    
   FROM TRANSACTION_DATA_EXT WITH (NOLOCK)    
   WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN    
   AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')    
  AS [AUTH_CODE]    
    ,[TRANSACTION].CREDITOR_DOCUMENT    
    ,(SELECT    
    TRANSACTION_DATA_EXT.[value]    
   FROM TRANSACTION_DATA_EXT WITH (NOLOCK)    
   WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN    
   AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')    
  AS ORDER_CODE    
    ,TRANSACTION_TITLES.COD_SITUATION [COD_SITUATION_TITLE]    
    ,[EQUIPMENT_MODEL].CODIGO AS MODEL_POS    
    ,[SEGMENTS].[NAME] AS SEGMENT_EC    
    ,[State].UF AS STATE_EC    
    ,[CITY].[NAME] AS CITY_EC    
    ,[NEIGHBORHOOD].[NAME] AS NEIGHBORHOOD_EC    
    ,[ADDRESS_BRANCH].COD_ADDRESS    
    ,SOURCE_TRANSACTION.DESCRIPTION AS TYPE_TRAN    
    ,EC_PROD.[NAME] AS [EC_PROD]    
    ,EC_PROD.CPF_CNPJ AS [EC_PROD_CPF_CNPJ]    
    ,TRAN_PROD.[NAME] AS [NAME_PROD]    
    ,SPLIT_PROD.[PERCENTAGE] AS [PERCENT_PARTICIP_SPLIT]    
 ,[TRANSACTION_TITLES_COST].RATE_PLAN  
 ,[TRANSACTION_TITLES].QTY_DAYS_ANTECIP  
 FROM [TRANSACTION_TITLES] WITH (NOLOCK)    
 INNER JOIN [TRANSACTION] WITH (NOLOCK)    
  ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN    
 LEFT JOIN [TRANSACTION_TITLES_COST] WITH (NOLOCK)    
  ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE    
 INNER JOIN [TRANSACTION_TYPE] WITH (NOLOCK)    
  ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE    
 LEFT JOIN AFFILIATOR WITH (NOLOCK)    
  ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR    
 INNER JOIN ASS_DEPTO_EQUIP WITH (NOLOCK)    
  ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL    
 INNER JOIN DEPARTMENTS_BRANCH WITH (NOLOCK)    
  ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH    
 INNER JOIN DEPARTMENTS WITH (NOLOCK)    
  ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS    
 INNER JOIN BRANCH_EC WITH (NOLOCK)    
  ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH    
 INNER JOIN COMMERCIAL_ESTABLISHMENT WITH (NOLOCK)    
  ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC    
 INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY WITH (NOLOCK)    
  ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC    
 INNER JOIN PRODUCTS_ACQUIRER WITH (NOLOCK)    
  ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ    
 INNER JOIN ACQUIRER WITH (NOLOCK)    
  ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC    
 LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)    
  ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN    
 INNER JOIN [dbo].[PROCESS_BG_STATUS] WITH (NOLOCK)    
  ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)    
 LEFT JOIN COMPANY WITH (NOLOCK)    
  ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP    
 LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] WITH (NOLOCK)    
  ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)    
 LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN WITH (NOLOCK)    
  ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC    
 LEFT JOIN [ASSIGN_FILE_TITLE](NOLOCK)    
  ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE    
  AND [ASSIGN_FILE_TITLE].ACTIVE = 1    
 LEFT JOIN ASSIGN_FILE(NOLOCK)    
  ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE    
 LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)    
  ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_FILE.COD_ASSIGN_FILE_MODEL    
 INNER JOIN [EQUIPMENT] WITH (NOLOCK)    
  ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP    
 INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)    
  ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL    
 INNER JOIN [SEGMENTS] WITH (NOLOCK)    
  ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG    
 INNER JOIN [ADDRESS_BRANCH] WITH (NOLOCK)    
  ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH    
  AND [ADDRESS_BRANCH].ACTIVE = 1    
 INNER JOIN [NEIGHBORHOOD] WITH (NOLOCK)    
  ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH    
 INNER JOIN [CITY] WITH (NOLOCK)    
  ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY    
 INNER JOIN [State] WITH (NOLOCK)    
  ON [State].COD_STATE = [CITY].COD_STATE    
 INNER JOIN SOURCE_TRANSACTION WITH (NOLOCK)    
  ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN    
 LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)    
  ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD    
  AND [TRAN_PROD].ACTIVE = 1    
 LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD WITH (NOLOCK)    
  ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD    
 LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD WITH (NOLOCK)    
  ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC    
 WHERE    
 --[TRANSACTION].COD_SITUATION IN (3, 6, 10)            
 [TRANSACTION].COD_SITUATION = 3    
 AND [TRANSACTION_TITLES].COD_SITUATION != 26    
 AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')    
 AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0    
 AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3    
 AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].CREATED_AT    
 AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION_TITLES].CREATED_AT    
 --AND DATEPART(YEAR,[TRANSACTION].CREATED_AT) = DATEPART(YEAR,GETDATE())        
 AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)    
SELECT    
 AFFILIATOR    
   ,MERSHANT    
   ,SERIAL    
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE    
   ,CAST(TRANSACTION_DATE AS TIME) AS TRANSACTION_TIME    
   ,NSU    
   ,EXTERNAL_NSU    
   ,TRAN_TYPE    
   ,TRANSACTION_AMOUNT    
   ,TOTAL_PLOTS AS QUOTA_TOTAL    
   ,AMOUNT AS 'QUOTA_AMOUNT'    
   ,PLOT AS QUOTA    
   ,ACQUIRER    
   ,ACQ_TAX AS 'MDR_ACQ'    
   ,BRAND    
   ,CTE.TAX_INITIAL AS 'MDR_EC'    
   ,ANTECIP_EC AS 'ANTICIP_EC'    
   ,MDR_AFF AS 'MDR_AFF'    
   ,ANTECIP_AFF AS 'ANTICIP_AFF'    
   ,LIQUID_SUB AS 'TO_RECEIVE_ACQ'    
   ,CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'    
   ,(LIQUID_SUB - AFF_DISCOUNT) AS 'NET_WITHOUT_FEE_SUB'    
   ,RATE_PLAN AS 'FEE_AFFILIATOR'    
   ,(LIQUID_SUB - AFF_DISCOUNT_TARIFF) AS 'NET_SUB'    
   ,AFF AS 'NET_WITHOUT_FEE_AFF'    
   ,AFF_TARIFF AS 'NET_AFF'    
   ,EC AS 'MERCHANT_WITHOUT_FEE'    
   ,CTE.RATE AS 'FEE_MERCHANT'    
   ,EC_TARIFF AS 'MERCHANT_NET'    
   ,CAST(PREVISION_PAY_DATE AS DATE) AS 'PREDICTION_PAY_DATE'    
   ,CASE    
  WHEN TRAN_TYPE = 'CREDITO' AND    
   (CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)) THEN 1    
  ELSE 0    
 END AS ANTECIPATED    
   ,COD_EC    
   ,CTE.COD_AFFILIATOR    
   ,COD_BRANCH    
   ,CTE.COD_DEPTO_BRANCH    
   ,PAN    
   ,CPF_CNPJ_ORIGINATOR    
   ,EC_NAME_DESTINY    
   ,CPF_CNPJ_DESTINY    
   ,CPF_AFF    
   ,CTE.CODE    
   ,CTE.COD_TRAN    
   ,CTE.COD_COMP    
   ,CTE.REP_COD_TRAN    
   ,CTE.COD_SITUATION    
   ,CTE.LIQUID_MDR_EC    
   ,CTE.ANTECIP_DISCOUNT_EC    
   ,CTE.LIQUID_MDR_AFF    
   ,CTE.ANTECIP_DISCOUNT_AFF    
   ,CTE.SPLIT    
   ,CTE.COD_EC_TRANS    
   ,CTE.TRANS_EC_NAME    
   ,CTE.TRANS_EC_CPF_CNPJ    
   ,CTE.[ASSIGNED]    
   ,CTE.RETAINED_AMOUNT    
   ,CTE.[ORIGINAL_DATE]    
   ,CTE.[ASSIGNEE]    
   ,CTE.TRAN_TITTLE_DATE    
   ,CTE.TRAN_TITTLE_TIME    
   ,CTE.AUTH_CODE    
   ,CTE.CREDITOR_DOCUMENT    
   ,CTE.ORDER_CODE    
   ,CTE.COD_TITLE    
   ,CTE.[COD_SITUATION_TITLE]    
   ,CTE.MODEL_POS    
   ,CTE.SEGMENT_EC    
   ,CTE.STATE_EC    
   ,CTE.CITY_EC    
   ,CTE.NEIGHBORHOOD_EC    
   ,CTE.COD_ADDRESS    
   ,CTE.TYPE_TRAN    
   ,CTE.NAME_PROD    
   ,CTE.EC_PROD    
   ,CTE.EC_PROD_CPF_CNPJ    
   ,CTE.PERCENT_PARTICIP_SPLIT  
   ,CTE.QTY_DAYS_ANTECIP  
FROM CTE    
    
    
GO


IF OBJECT_ID('SP_BILLET_INFO_PRINT') IS NOT NULL
    DROP PROCEDURE SP_BILLET_INFO_PRINT
GO
CREATE PROCEDURE [dbo].[SP_BILLET_INFO_PRINT]
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author              VERSION        Date                 Description
------------------------------------------------------------------------------------------
Luiz Aquino         V1             2020-04-30           CREATED
------------------------------------------------------------------------------------------*/
(
    @BARCODE VARCHAR(64)
)
AS BEGIN
    DECLARE @CodAwaitConfirm INT;
    DECLARE @CodPayment INT;
    DECLARE @CodAwaitCompensate INT;

    SELECT @CodAwaitConfirm = COD_SITUATION FROM SITUATION WHERE NAME = 'AWAITING CONFIRMATION PAYMENT';
    SELECT @CodPayment = COD_SITUATION FROM SITUATION WHERE NAME = 'AWAITING PAYMENT';
    SELECT @CodAwaitCompensate = COD_SITUATION FROM SITUATION WHERE NAME = 'AWAITING COMPENSATION';

    select
        BILLET_TRANSACTION.CREATED_AT,
        BILLET_TRANSACTION.TRANSACTION_CODE,
        BILLET_TRANSACTION.BILLET_AMOUNT,
        BILLET_TRANSACTION.DUE_DATE,
        CE.TRADING_NAME [EC_NAME],
        CE.CPF_CNPJ [EC_DOC],
        BILLET_TRANSACTION.BARCODE,
        BILLET_TRANSACTION.BILLET_URL,
        BILLET_TRANSACTION.DIGITABLE_LINE,
            (CASE   WHEN BILLET_TRANSACTION.COD_SITUATION = @CodAwaitConfirm THEN 'CONFIRMACAO'
                WHEN BILLET_TRANSACTION.COD_SITUATION = @CodPayment THEN 'PAGAMENTO'
                WHEN BILLET_TRANSACTION.COD_SITUATION = @CodAwaitCompensate THEN 'AGUARDANDO COMPENSAR'
                ELSE COALESCE(TS.SITUATION_TR, S.NAME)
        END) [SITUATION_BILL],
        BILLET_TRANSACTION.DESCRIPTION_TRAN_BILLET,
        BILLET_TRANSACTION.OPTIONAL_DESCRIPTOR,
        BILLET_TRANSACTION.COD_SITUATION,
        BILLET_TRANSACTION.INSTRUCTIONS,
        CUSTOMER_BILLET.NAME [CUSTOMER],
        CUSTOMER_BILLET.DOCUMENT,
        CUSTOMER_BILLET.STREET,
        CUSTOMER_BILLET.NUMBER,
        CUSTOMER_BILLET.COMPLEMENT,
        CUSTOMER_BILLET.ZIPCODE,
        CUSTOMER_BILLET.DISTRICT,
        CUSTOMER_BILLET.CITY,
        CUSTOMER_BILLET.STATE,
        CUSTOMER_BILLET.COUNTRY
    FROM BILLET_TRANSACTION
    JOIN CUSTOMER_BILLET on BILLET_TRANSACTION.COD_BILLET = CUSTOMER_BILLET.COD_BILLET
    JOIN COMMERCIAL_ESTABLISHMENT CE on BILLET_TRANSACTION.COD_EC = CE.COD_EC
    JOIN SITUATION S on BILLET_TRANSACTION.COD_SITUATION = S.COD_SITUATION
    JOIN TRADUCTION_SITUATION TS on S.COD_SITUATION = TS.COD_SITUATION
    WHERE BILLET_TRANSACTION.BARCODE = @BARCODE

END
GO

IF (SELECT COUNT(*) as index_count FROM sys.indexes WHERE object_id = OBJECT_ID('BILLET_TRANSACTION') AND name='IX_BILLET_BARCODE') = 0
BEGIN
    CREATE NONCLUSTERED INDEX IX_BILLET_BARCODE ON BILLET_TRANSACTION(BARCODE)
END

GO

 IF OBJECT_ID('SP_FD_EC_RISK') IS NOT NULL
    DROP PROCEDURE [SP_FD_EC_RISK];
	 GO
CREATE PROCEDURE [dbo].[SP_FD_EC_RISK]    
    
/*----------------------------------------------------------------------------------------      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                          VERSION        Date                            Description      
------------------------------------------------------------------------------------------      
Elir Ribeiro                    v1             2020-08-14                    create procedure SP_FD_EC_RISK 
------------------------------------------------------------------------------------------*/    
(@CPF_CNPJ            VARCHAR(14),     
 @COD_REP             INT,     
 @ID_EC               INT,     
 @SEGMENT             INT,     
 @COMP                INT,     
 @TYPE                VARCHAR(100),     
 @COD_PLAN            INT          = NULL,     
 @COD_AFF             INT          = NULL,     
 @Active              BIT          = NULL,     
 @PersonType          VARCHAR(100) = NULL,     
 @CODSIT              INT          = NULL,     
 @WAS_BLOCKED_FINANCE INT          = NULL,     
 @COD_SITUATION_RISK  INT          = NULL,     
 @IS_PROVIDER         INT          = NULL,     
 @BRANCH_BUSINESS     INT          = NULL,     
 @RISK_SITUATION_LIST [CODE_TYPE] READONLY,     
 @CREATED_FROM        DATETIME     = NULL,     
 @CREATED_UNTIL       DATETIME     = NULL    
)  
  
AS    
     DECLARE @QUERY_ NVARCHAR(MAX);    
     DECLARE @COD_BLOCKED_FINANCE INT;    
    BEGIN    
        SET @QUERY_ = N'      
        SELECT
		CASE 
		WHEN COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IS NULL THEN ''CELER''
		ELSE AFFILIATOR.NAME       
		END AS [NOME DO AFILIADOR]
		, CASE 
		WHEN COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IS NULL THEN ''22347623000178''
		ELSE AFFILIATOR.CPF_CNPJ
		END AS [CNPJ]
	    ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME AS [NOME FANTASIA DO EC]
		,COMMERCIAL_ESTABLISHMENT.NAME AS [RAZÃO SOCIAL EC]
		,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS [CPF_CNPJ DO EC]
		,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT AS [LIMITE TRANSACAO]
		,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY AS [LIMITE DIARIO DE TRANSACAO]
		,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY AS [LIMITE MENSAL DE TRANSACAO]
	   FROM COMMERCIAL_ESTABLISHMENT      
   INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC      
   INNER JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG      
   INNER JOIN TYPE_ESTAB ON COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = TYPE_ESTAB.COD_TYPE_ESTAB      
   INNER JOIN SALES_REPRESENTATIVE ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP      
   INNER JOIN USERS ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER      
   INNER JOIN DEPARTMENTS_BRANCH ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH        
   INNER JOIN TYPE_RECEIPT ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC      
   INNER JOIN SITUATION_REQUESTS ON SITUATION_REQUESTS.COD_SIT_REQ = COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ      
   LEFT JOIN BRANCH_BUSINESS ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS      
   LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR      
   LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_SITUATION      
   LEFT JOIN TRADUCTION_RISK_SITUATION ON TRADUCTION_RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION      
   INNER JOIN ADDRESS_BRANCH  ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH AND ADDRESS_BRANCH.ACTIVE = 1      
   INNER JOIN NEIGHBORHOOD  ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH      
   INNER JOIN CITY    ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY      
   INNER JOIN STATE   ON STATE.COD_STATE = CITY.COD_STATE      
        WHERE      
   COMMERCIAL_ESTABLISHMENT.COD_COMP = @COMP';    
        SELECT @COD_BLOCKED_FINANCE = COD_SITUATION    
        FROM SITUATION    
        WHERE NAME = 'LOCKED FINANCIAL SCHEDULE';    
        IF @ID_EC IS NOT NULL    
            BEGIN    
                IF @TYPE = 'BRANCH'    
                    SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.COD_BRANCH = @ID_EC ';    
                    ELSE    
                    SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @ID_EC ';    
            END;    
        IF @SEGMENT IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SEG = @SEGMENT ';    
        IF @COD_REP IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = @COD_REP ';    
        IF @TYPE IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.TYPE_BRANCH = @TYPE ';    
        IF @CPF_CNPJ IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.CPF_CNPJ = @CPF_CNPJ ';    
        IF @COD_PLAN IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND  DEPARTMENTS_BRANCH.COD_PLAN = @COD_PLAN ';    
        IF @COD_AFF IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF';    
        IF @Active IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.ACTIVE = @Active';    
        IF @IS_PROVIDER IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.IS_PROVIDER = @IS_PROVIDER';    
        IF @PersonType IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND TYPE_ESTAB.CODE = @PersonType';    
        IF @CODSIT IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ = @CODSIT';    
        IF @WAS_BLOCKED_FINANCE = 1    
            BEGIN    
                SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCKED_FINANCE';    
            END;    
            ELSE    
            IF @WAS_BLOCKED_FINANCE = 0    
                SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION <> @COD_BLOCKED_FINANCE';    
        IF @COD_SITUATION_RISK IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = @COD_SITUATION_RISK';    
        IF @BRANCH_BUSINESS IS NOT NULL    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS = @BRANCH_BUSINESS';    
        IF EXISTS    
        (    
            SELECT TOP 1 CODE    
            FROM @RISK_SITUATION_LIST    
        )    
            SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION IN (SELECT CODE FROM @RISK_SITUATION_LIST)';    
        SET @QUERY_ = CONCAT(@QUERY_, '  GROUP BY      
                              AFFILIATOR.NAME 
							,AFFILIATOR.CPF_CNPJ 
							,COMMERCIAL_ESTABLISHMENT.TRADING_NAME 
							,COMMERCIAL_ESTABLISHMENT.NAME 
							,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ 
							,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT 
							,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY 
							,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
							,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR   
							
                              ');    
        EXEC sp_executesql     
             @QUERY_,     
             N'      
  @CPF_CNPJ VARCHAR(14),      
  @COD_REP INT,      
  @ID_EC INT,      
  @SEGMENT INT,      
  @COMP INT,      
  @TYPE VARCHAR(100),      
  @COD_PLAN INT,      
  @COD_AFF INT,      
  @Active BIT,      
  @PersonType VARCHAR(100),      
  @CODSIT INT,      
  @WAS_BLOCKED_FINANCE INT,      
  @COD_SITUATION_RISK INT,      
  @IS_PROVIDER INT,      
  @BRANCH_BUSINESS INT,      
  @RISK_SITUATION_LIST [CODE_TYPE] READONLY      
 ',     
             @CPF_CNPJ = @CPF_CNPJ,     
             @COD_REP = @COD_REP,     
             @ID_EC = @ID_EC,     
             @SEGMENT = @SEGMENT,     
             @COMP = @COMP,     
             @TYPE = @TYPE,     
             @COD_PLAN = @COD_PLAN,     
             @COD_AFF = @COD_AFF,     
             @Active = @Active,     
             @PersonType = @PersonType,     
             @CODSIT = @CODSIT,     
             @WAS_BLOCKED_FINANCE = @WAS_BLOCKED_FINANCE,     
             @COD_SITUATION_RISK = @COD_SITUATION_RISK,     
             @IS_PROVIDER = @IS_PROVIDER,     
             @BRANCH_BUSINESS = @BRANCH_BUSINESS,     
             @RISK_SITUATION_LIST = @RISK_SITUATION_LIST;    
    END;    
  

  GO

  GO
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'AMOUNT_OLD'
	AND object_id = OBJECT_ID(N'TRANSACTION'))
BEGIN
ALTER TABLE [TRANSACTION]
ADD AMOUNT_OLD DECIMAL(22,6)
END

GO 

IF OBJECT_ID('SP_REG_REPORT_CONSOLIDATED_TRANS_SUB') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_CONSOLIDATED_TRANS_SUB];
GO

CREATE PROCEDURE [dbo].[SP_REG_REPORT_CONSOLIDATED_TRANS_SUB]                            
 /*----------------------------------------------------------------------------------------                            
 Procedure Name: [SP_REG_REPORT_CONSOLIDATED_TRANS_SUB]                            
 Project.......: TKPP                            
 ------------------------------------------------------------------------------------------                            
 Author                          VERSION        Date             Description                            
 ------------------------------------------------------------------------------------------                            
 Fernando Henrique F. de O       V1              28/12/2018      Creation                          
 Fernando Henrique F. de O       V2              07/02/2019      Changed                      
 Luiz Aquino                     V3              22/02/2019      Remove Incomplete Installments                         
 Lucas Aguiar                    V4              22-04-2019      add originador e destino                     
 Caike Uch�a                     V5              16/08/2019      add columns AUTH_CODE e CREDITOR_DOCUMENT                 
 Caike Uch�a                     V6              11/09/2019      add column ORDER_CODE                  
 Marcus Gall                     V7              27/11/2019      Add Model_POS, Segment, Location_EC          
 Ana Paula Liick                 V8              31/01/2020      Add Origem_Trans        
 Caike Uch�a                     V9              30/04/2020      add produto ec    
 Caike Uch�a                     V10             03/08/2020      add QTY_DAYS_ANTECIP  
 Caike Uch�a                     V11             06/08/2020      Add AMOUNT_NEW
 -----------------------------------------------------------------------------------------*/                      
AS                           
   DECLARE @COUNT INT=0;    
        
          
              
BEGIN    
    
---------------------------------------------                          
--------------RECORDS INSERT-----------------                          
---------------------------------------------                            
SELECT    
 --TOP (1000)              
 [VW_REPORT_FULL_CASH_FLOW].COD_TRAN    
   ,[VW_REPORT_FULL_CASH_FLOW].AFFILIATOR    
   ,[VW_REPORT_FULL_CASH_FLOW].MERSHANT    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_TIME    
   ,[VW_REPORT_FULL_CASH_FLOW].NSU    
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_TOTAL    
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TYPE    
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA    
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_AMOUNT AMOUNT    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_AMOUNT    
   ,[VW_REPORT_FULL_CASH_FLOW].ACQUIRER    
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_ACQ    
   ,[VW_REPORT_FULL_CASH_FLOW].BRAND    
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_RATE    
   ,[VW_REPORT_FULL_CASH_FLOW].ANTECIPATED    
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_PAY_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].TO_RECEIVE_ACQ    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_AFF    
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_EC                                     
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF AS NET_WITHOUT_FEE_AFF_RATE    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_ACQ    
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_RECEIVE_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_MERCHANT AS RATE    
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_AFF, 0) AS ANTECIP_DISCOUNT_AFF    
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_EC, 0) AS ANTECIP_DISCOUNT_EC    
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].MDR_CURRENT_ACQ, 0) AS MDR_CURRENT_ACQ                                
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_AFF, 0) AS LIQUID_MDR_AFF    
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_AFF, 0) AS RATE_CURRENT_AFF                           
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_CURRENT_EC                            
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_EC, 0) AS LIQUID_MDR_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_WITHOUT_FEE    
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_AFFILIATOR    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_SUB    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_NET    
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_ORIGINATOR AS 'CPF_EC'    
   ,[VW_REPORT_FULL_CASH_FLOW].EC_NAME_DESTINY AS 'ECNAME_DESTINY'    
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_DESTINY AS 'DESTINY'    
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_AFF AS CPF_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].SERIAL    
   ,[VW_REPORT_FULL_CASH_FLOW].EXTERNAL_NSU    
   ,[VW_REPORT_FULL_CASH_FLOW].PAN    
   ,[VW_REPORT_FULL_CASH_FLOW].CODE    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_COMP    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_BRANCH    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_DEPTO_BRANCH    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_AFFILIATOR    
   ,[VW_REPORT_FULL_CASH_FLOW].SPLIT    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_TRANS    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_NAME    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_CPF_CNPJ    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION    
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNED]    
   ,[VW_REPORT_FULL_CASH_FLOW].[RETAINED_AMOUNT]    
   ,[VW_REPORT_FULL_CASH_FLOW].[ORIGINAL_DATE]    
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNEE]    
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_TIME    
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].AUTH_CODE    
   ,[VW_REPORT_FULL_CASH_FLOW].CREDITOR_DOCUMENT    
   ,[VW_REPORT_FULL_CASH_FLOW].ORDER_CODE    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_TITLE    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION_TITLE    
   ,[VW_REPORT_FULL_CASH_FLOW].MODEL_POS    
   ,[VW_REPORT_FULL_CASH_FLOW].SEGMENT_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].STATE_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].CITY_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].NEIGHBORHOOD_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_ADDRESS    
   ,[VW_REPORT_FULL_CASH_FLOW].TYPE_TRAN    
   ,[VW_REPORT_FULL_CASH_FLOW].NAME_PROD    
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD    
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD_CPF_CNPJ     
   ,[VW_REPORT_FULL_CASH_FLOW].PERCENT_PARTICIP_SPLIT   
   ,[VW_REPORT_FULL_CASH_FLOW].QTY_DAYS_ANTECIP  
   INTO #TB_REPORT_FULL_CASH_FLOW_INSERT    
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW]    
ORDER BY COD_TRAN, QUOTA    
OFFSET 0 ROWS FETCH FIRST 200 ROWS ONLY;    
    
WITH TRANINFO    
AS    
(SELECT    
  COUNT(COD_TRAN) AVAILABLE_INSTALLMENTS    
    ,COD_TRAN    
    ,QUOTA_TOTAL    
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT installments    
 GROUP BY COD_TRAN    
   ,QUOTA_TOTAL)    
DELETE INSTALLMENT    
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT INSTALLMENT    
 JOIN TRANINFO    
  ON TRANINFO.COD_TRAN = INSTALLMENT.COD_TRAN    
WHERE TRANINFO.QUOTA_TOTAL > TRANINFO.AVAILABLE_INSTALLMENTS    
    
    
SELECT    
 @COUNT = COUNT(*)    
FROM #TB_REPORT_FULL_CASH_FLOW_INSERT;    
    
IF @COUNT > 0    
BEGIN    
 INSERT INTO [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([COD_TRAN],    
[AFFILIATOR],    
[COMMERCIALESTABLISHMENT],    
[TRANSACTION_DATE],    
[TRANSACTION_TIME],    
[NSU],    
[QUOTA_TOTAL],    
[TRANSACTION_TYPE],    
[PLOT],    
[AMOUNT],    
[TRANSACTION_AMOUNT],    
[ACQUIRER],    
[MDR_ACQUIRER],    
[BRAND],    
[MDR_EC],    
[ANTECIP_PERCENT],    
[ANTECIP_AFFILIATOR],    
[MDR_AFFILIATOR],    
[LIQUID_VALUE_SUB],    
[ANTECIPATED],    
[PREVISION_PAY_DATE],    
[TO_RECEIVE_ACQ],    
[LIQUID_VALUE_AFFILIATOR],    
[LIQUID_AFF_RATE],    
[LIQUID_SUB_RATE],    
[PREVISION_RECEIVE_DATE],    
[RATE],    
[ANTECIP_CURRENT_AFF],    
[ANTECIP_CURRENT_EC],    
[MDR_CURRENT_AFF],    
[MDR_CURRENT_EC],    
[LIQUID_VALUE_EC],    
[FEE_AFFILIATOR],    
[NET_SUB_AQUIRER],    
[NET_WITHOUT_FEE_SUB],    
[NET_WITHOUT_FEE_AFF],    
[MERCHANT_NET],    
[CPF_EC],    
[DESTINY],    
[CPF_AFF],    
[SERIAL],    
[EXTERNALNSU],    
[PAN],    
[CODE],    
[COD_COMP],    
[COD_EC],    
[COD_BRANCH],    
[COD_DEPTO_BRANCH],    
[COD_AFFILIATOR],    
[COD_SITUATION],    
[SPLIT],    
[COD_EC_TRANS],    
[TRANS_EC_NAME],    
[TRANS_EC_CPF_CNPJ]    
, [ASSIGNED]    
, [RETAINED_AMOUNT]    
, [ORIGINAL_DATE]    
, [ASSIGNEE]    
, [MODIFY_DATE]    
, EC_NAME_DESTINY    
, TRANSACTION_TITTLE_DATE    
, TRANSACTION_TITTLE_TIME    
, AUTH_CODE    
, CREDITOR_DOCUMENT    
, ORDER_CODE    
, COD_TITLE    
, COD_SITUATION_TITLE    
, MODEL_POS    
, SEGMENT_EC    
, STATE_EC    
, CITY_EC    
, NEIGHBORHOOD_EC    
, COD_ADDRESS    
, TYPE_TRAN    
, NAME_PROD    
, EC_PROD    
, EC_PROD_CPF_CNPJ    
, PERCENT_PARTICIP_SPLIT  
, QTY_DAYS_ANTECIP)    
 (SELECT    
  TEMP.[COD_TRAN]    
    ,TEMP.[AFFILIATOR]    
    ,TEMP.[MERSHANT]    
    ,TEMP.[TRANSACTION_DATE]    
    ,TEMP.[TRANSACTION_TIME]    
    ,TEMP.[NSU]    
    ,TEMP.[QUOTA_TOTAL]    
    ,TEMP.[TRAN_TYPE]    
    ,TEMP.[QUOTA]    
    ,TEMP.[AMOUNT]    
    ,TEMP.[TRANSACTION_AMOUNT]    
    ,TEMP.[ACQUIRER]    
    ,TEMP.[MDR_ACQ]    
    ,TEMP.[BRAND]    
    ,TEMP.[MDR_EC]    
    ,TEMP.[ANTICIP_EC]    
    ,TEMP.[ANTICIP_AFF]    
    ,TEMP.[MDR_AFF]    
    ,TEMP.[NET_SUB_RATE]    
    ,TEMP.[ANTECIPATED]    
    ,TEMP.[PREDICTION_PAY_DATE]    
    ,TEMP.[TO_RECEIVE_ACQ]    
    ,TEMP.[NET_AFF]    
    ,TEMP.[NET_WITHOUT_FEE_AFF_RATE]    
    ,TEMP.[NET_SUB_ACQ]    
    ,TEMP.[PREDICTION_RECEIVE_DATE]    
    ,TEMP.[RATE]    
    ,TEMP.[ANTECIP_DISCOUNT_AFF]    
    ,TEMP.[ANTECIP_DISCOUNT_EC]    
    ,TEMP.[LIQUID_MDR_AFF]    
    ,TEMP.[LIQUID_MDR_EC]    
    ,TEMP.[MERCHANT_WITHOUT_FEE]    
    ,TEMP.[FEE_AFFILIATOR]    
    ,TEMP.[NET_SUB]    
    ,TEMP.[NET_WITHOUT_FEE_SUB]    
    ,TEMP.[NET_WITHOUT_FEE_AFF]    
    ,TEMP.[MERCHANT_NET]    
    ,TEMP.[CPF_AFF]    
    ,TEMP.[DESTINY]    
    ,TEMP.[CPF_EC]    
    ,TEMP.[SERIAL]    
    ,TEMP.[EXTERNAL_NSU]    
    ,TEMP.[PAN]    
    ,TEMP.[CODE]    
    ,TEMP.[COD_COMP]    
    ,TEMP.[COD_EC]    
    ,TEMP.[COD_BRANCH]    
    ,TEMP.[COD_DEPTO_BRANCH]    
    ,TEMP.[COD_AFFILIATOR]    
    ,TEMP.[COD_SITUATION]    
    ,TEMP.[SPLIT]    
    ,TEMP.[COD_EC_TRANS]    
    ,TEMP.[TRANS_EC_NAME]    
    ,TEMP.[TRANS_EC_CPF_CNPJ]    
    ,TEMP.[ASSIGNED]    
    ,TEMP.[RETAINED_AMOUNT]    
    ,TEMP.[ORIGINAL_DATE]    
    ,TEMP.[ASSIGNEE]    
    ,GETDATE()    
    ,TEMP.ECNAME_DESTINY    
    ,TRAN_TITTLE_DATE    
    ,TRAN_TITTLE_TIME    
    ,TEMP.AUTH_CODE    
    ,TEMP.CREDITOR_DOCUMENT    
    ,TEMP.ORDER_CODE    
    ,TEMP.COD_TITLE    
    ,TEMP.COD_SITUATION_TITLE    
    ,TEMP.MODEL_POS    
    ,TEMP.SEGMENT_EC    
    ,TEMP.STATE_EC    
    ,TEMP.CITY_EC    
    ,TEMP.NEIGHBORHOOD_EC    
    ,TEMP.COD_ADDRESS    
    ,TEMP.TYPE_TRAN    
    ,TEMP.NAME_PROD    
    ,TEMP.EC_PROD    
    ,TEMP.EC_PROD_CPF_CNPJ    
    ,TEMP.PERCENT_PARTICIP_SPLIT   
 ,TEMP.QTY_DAYS_ANTECIP  
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT TEMP    
 )    
    
IF @@rowcount < 1    
THROW 60000, 'COULD NOT REGISTER [REPORT_CONSOLIDATED_TRANS_SUB] ', 1;    
    
UPDATE [PROCESS_BG_STATUS]    
SET STATUS_PROCESSED = 1    
   ,MODIFY_DATE = GETDATE()    
FROM [PROCESS_BG_STATUS]    
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_INSERT    
 ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_INSERT.COD_TRAN)    
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;    
    
IF @@rowcount < 1    
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;    
END;    
    
---------------------------------------------                            
--------------RECORDS UPDATE-----------------                            
---------------------------------------------                              
SELECT    
 [VW_REPORT_FULL_CASH_FLOW_UP].COD_TRAN    
   ,[VW_REPORT_FULL_CASH_FLOW_UP].COD_SITUATION
   ,[VW_REPORT_FULL_CASH_FLOW_UP].TRANSACTION_AMOUNT INTO #TB_REPORT_FULL_CASH_FLOW_UPDATE    
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW_UP]    
    
    
SELECT    
 @COUNT = COUNT(*)    
FROM #TB_REPORT_FULL_CASH_FLOW_UPDATE;    
    
IF @COUNT > 0    
BEGIN    
UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]    
SET [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_SITUATION    
   ,[REPORT_CONSOLIDATED_TRANS_SUB].MODIFY_DATE = GETDATE()  
   ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT = #TB_REPORT_FULL_CASH_FLOW_UPDATE.TRANSACTION_AMOUNT
FROM [REPORT_CONSOLIDATED_TRANS_SUB]    
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE    
 ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN);    
    
IF @@rowcount < 1    
THROW 60001, 'COULD NOT UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]', 1;    
    
UPDATE [PROCESS_BG_STATUS]    
SET STATUS_PROCESSED = 1    
   ,MODIFY_DATE = GETDATE()    
FROM [PROCESS_BG_STATUS]    
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE    
 ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN)    
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;    
    
IF @@rowcount < 1    
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;    
END;    
END;    
   
   

GO 

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP];
GO
  
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_EXP]                          
     
/*****************************************************************************************************************    
----------------------------------------------------------------------------------------                          
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                            Description                          
 ------------------------------------------------------------------------------------------                          
 Fernando Henrique F.             V1       13/12/2018                          Creation                           
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                    
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                  
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE    
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento  
 Caike Uch�a                      v7       30/04/2020                        insert ec prod  
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess
 ------------------------------------------------------------------------------------------    
*****************************************************************************************************************/                         
                         
AS    
BEGIN  
    
    DECLARE @COUNT INT= 0;  
    
    
    
    
    
    BEGIN  
  
---------------------------------------------                        
--------------RECORDS INSERT-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ] INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];  
  
IF @COUNT > 0  
BEGIN  
INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],  
[TRANSACTION_CODE],  
[AMOUNT],  
[PLOTS],  
[TRANSACTION_DATE],  
[TRANSACTION_TYPE],  
[CPF_CNPJ],  
[NAME],  
[SERIAL_EQUIP],  
[TID],  
[SITUATION],  
[BRAND],  
[PAN],  
[TRAN_DATA_EXT],  
[TRAN_DATA_EXT_VALUE],  
[AUTH_CODE],  
[COD_AC],  
[NAME_ACQUIRER],  
[COMMENT],  
[TAX],  
[ANTICIPATION],  
[COD_AFFILIATOR],  
[NAME_AFFILIATOR],  
[NET_VALUE],  
[COD_COMP],  
[COD_EC],  
[COD_BRANCH],  
[STATE_NAME],  
[CITY_NAME],  
[COD_SITUATION],  
[COD_DEPTO_BRANCH],  
[GROSS_VALUE_AGENCY],  
[NET_VALUE_AGENCY],  
[TYPE_TRAN],  
[COD_SOURCE_TRAN],  
[POSWEB],  
[SEGMENTS_NAME],  
[CREATED_TRANSACTION_DATE],  
[COD_EC_TRANS],  
[TRANS_EC_NAME],  
[TRANS_EC_CPF_CNPJ],  
[SPLIT],  
[SALES_REP],  
[COD_USER_REP],  
[MODIFY_DATE],  
[CREDITOR_DOCUMENT],  
[COD_SALES_REP],  
[MODEL_POS],  
[CARD_NAME],  
[CNAE],  
[COD_USER],  
[NAME_USER],  
[LINK_PAYMENT_SERVICE],  
[CUSTOMER_EMAIL],  
[CUSTOMER_IDENTIFICATION],  
[PAYMENT_LINK_TRACKING],  
[NAME_PRODUCT_EC],  
[EC_PRODUCT],  
[EC_PRODUCT_CPF_CNPJ])  
 (SELECT  
  [TEMP].[COD_TRAN]  
    ,[TEMP].[TRANSACTION_CODE]  
    ,[TEMP].[AMOUNT]  
    ,[TEMP].[PLOTS]  
    ,[TEMP].[TRANSACTION_DATE]  
    ,[TEMP].[TRANSACTION_TYPE]  
    ,[TEMP].[CPF_CNPJ]  
    ,[TEMP].[NAME]  
    ,[TEMP].[SERIAL_EQUIP]  
    ,[TEMP].[TID]  
    ,[TEMP].[SITUATION]  
    ,[TEMP].[BRAND]  
    ,[TEMP].[PAN]  
    ,[TEMP].[TRAN_DATA_EXT]  
    ,[TEMP].[TRAN_DATA_EXT_VALUE]  
    ,[TEMP].[AUTH_CODE]  
    ,[TEMP].[COD_AC]  
    ,[TEMP].[NAME_ACQUIRER]  
    ,[TEMP].[COMMENT]  
    ,[TEMP].[TAX]  
    ,[TEMP].[ANTICIPATION]  
    ,[TEMP].[COD_AFFILIATOR]  
    ,[TEMP].[NAME_AFFILIATOR]  
    ,[TEMP].[NET_VALUE]  
    ,[TEMP].[COD_COMP]  
    ,[TEMP].[COD_EC]  
    ,[TEMP].[COD_BRANCH]  
    ,[TEMP].[STATE_NAME]  
    ,[TEMP].[CITY_NAME]  
    ,[TEMP].[COD_SITUATION]  
    ,[TEMP].[COD_DEPTO_BRANCH]  
    ,[TEMP].[GROSS_VALUE_AGENCY]  
    ,[TEMP].[NET_VALUE_AGENCY]  
    ,[TEMP].[TYPE_TRAN]  
    ,[TEMP].[COD_SOURCE_TRAN]  
    ,[TEMP].[POSWEB]  
    ,[TEMP].[SEGMENTS_NAME]  
    ,[TEMP].[CREATED_AT]  
    ,[TEMP].[COD_EC_TRANS]  
    ,[TEMP].[TRANS_EC_NAME]  
    ,[TEMP].[TRANS_EC_CPF_CNPJ]  
    ,[TEMP].[SPLIT]  
    ,[SALES_REP]  
    ,[COD_USER_REP]  
    ,GETDATE()  
    ,[CREDITOR_DOCUMENT]  
    ,[COD_SALES_REP]  
    ,[TEMP].[MODEL_POS]  
    ,[CARD_NAME]  
    ,[CNAE]  
    ,[COD_USER]  
    ,[NAME_USER]  
    ,[LINK_PAYMENT]  
    ,[CUSTOMER_EMAIL]  
    ,[CUSTOMER_IDENTIFICATION]  
    ,[TEMP].[PAYMENT_LINK_TRACKING]  
    ,[TEMP].[NAME_PRODUCT_EC]  
    ,[TEMP].[EC_PRODUCT]  
    ,[TEMP].[EC_PRODUCT_CPF_CNPJ]  
 FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);  
  
IF @@rowcount < 1  
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;  
END;  
  
  
---------------------------------------------                        
--------------RECORDS UPDATE-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];  
  
IF @COUNT > 0  
BEGIN  
UPDATE [REPORT_TRANSACTIONS_EXP]  
SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]  
   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]  
   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]  
   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()  
   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]  
   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]  
   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
FROM [REPORT_TRANSACTIONS_EXP]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
 ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;  
END;  
END;  
END;  


GO 

IF OBJECT_ID('SP_UP_TRANSACTION_ON') IS NOT NULL
    DROP PROCEDURE [SP_UP_TRANSACTION_ON];
GO
    
CREATE PROCEDURE [dbo].[SP_UP_TRANSACTION_ON]                    
/*----------------------------------------------------------------------------------------                    
Procedure Name: [SP_UP_TRANSACTION]                    
Project.......: TKPP                    
------------------------------------------------------------------------------------------                    
Author               VERSION           Date                  Description                    
------------------------------------------------------------------------------------------                    
Kennedy Alef           V1           27/07/2018                 Creation                    
Rodrigo Carvalho       V2           12/12/2018                 Creation                    
Lucas Aguiar           v3           2019-04-17    Add par�metro e rotina de aw. titles            
Caike Uch�a            v4           2020-08-06               add @AMOUNT_CHANGE
------------------------------------------------------------------------------------------*/                    
(                    
@CODE_TRAN VARCHAR(200),                    
@SITUATION VARCHAR(100),                    
@DESCRIPTION VARCHAR(200),                    
@CURRENCY VARCHAR(100),                
@COD_PROD_ACQ INT = NULL,              
@COD_AC INT = NULL,
@AMOUNT_CHANGE DECIMAL(22,6) = NULL
)                    
AS                    
DECLARE @CONT INT;      
          
              
DECLARE @AMOUNT_OLD DECIMAL(22,6);                
                    
DECLARE @SIT VARCHAR(100);      
          
              
                
                    
DECLARE @BRANCH INT      
          
              
                
DECLARE @COD_ASS_TR_COMP INT;      
          
              
BEGIN      
      
SELECT      
 @COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP      
FROM ASS_TR_TYPE_COMP      
INNER JOIN [TRANSACTION] WITH (NOLOCK)      
 ON [TRANSACTION].CODE = @CODE_TRAN      
  AND [TRANSACTION].PLOTS BETWEEN PLOT_INI AND PLOT_END      
INNER JOIN BRAND      
 ON BRAND.NAME = [TRANSACTION].BRAND      
  AND BRAND.COD_TTYPE = [TRANSACTION].COD_TTYPE      
  AND ASS_TR_TYPE_COMP.COD_BRAND = BRAND.COD_BRAND      
WHERE ASS_TR_TYPE_COMP.COD_SOURCE_TRAN = 1      
AND ACTIVE = 1      
AND ASS_TR_TYPE_COMP.COD_AC = @COD_AC      
      
SET @CONT = 1;      
SELECT      
 @CONT = COD_TRAN      
   ,@SIT = SITUATION.NAME      
FROM [TRANSACTION]      
INNER JOIN SITUATION      
 ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION      
WHERE CODE = @CODE_TRAN      
IF @CONT < 1      
 OR @CONT IS NULL      
THROW 60002, '601', 1;      
UPDATE PROCESS_BG_STATUS      
SET STATUS_PROCESSED = 0      
   ,MODIFY_DATE = GETDATE()      
WHERE CODE = @CONT      
AND COD_TYPE_PROCESS_BG = 1      
IF @SITUATION = 'APPROVED'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 1      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END      
ELSE      
IF @SITUATION = 'PENDENT'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 19      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END      
ELSE      
IF @SITUATION = 'CONFIRMED'      
BEGIN      
IF @SIT = @SITUATION      
THROW 60002, '603', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;     

UPDATE [TRANSACTION]      
SET COD_SITUATION = 3      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)  
   ,AMOUNT_OLD = [TRANSACTION].AMOUNT
   ,AMOUNT = ISNULL(@AMOUNT_CHANGE,[TRANSACTION].AMOUNT)
   FROM [TRANSACTION]
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
DELETE FROM TRANSACTION_PENDENT_TREATMENT      
WHERE TID = @CODE_TRAN      
EXECUTE [SP_GEN_TITLES_TRANS] @COD_TRAN = @CODE_TRAN      
END      
ELSE      
IF @SITUATION = 'AWAITING TITLES'      
BEGIN      
IF @SIT = @SITUATION      
THROW 60002, '603', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 22      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = '206 - AGUARDANDO TITULOS'      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
DELETE FROM TRANSACTION_PENDENT_TREATMENT      
WHERE TID = @CODE_TRAN;      
END      
ELSE      
IF @SITUATION = 'DENIED ACQUIRER'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 2      
   ,MODIFY_DATE = GETDATE()      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END;     
IF @SITUATION = 'DENIED FRAUD PREVENTION'     
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 35      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END     
    
    
    
IF @SITUATION = 'UNDONE'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 10      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END;      
--OR @SITUATION = ''                    
ELSE      
IF @SITUATION = 'PRE-APPROVED'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 31      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
   ,[TRANSACTION].PRE_APPROVED = 1      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END      
IF @SITUATION = 'FAILED'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 7      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END;      
ELSE      
IF @SITUATION = 'CANCELED'      
BEGIN      
IF (@SIT = 'AWAITING TITLES')      
BEGIN      IF @SIT = @SITUATION      
THROW 60002, '703', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
UPDATE TRANSACTION_TITLES      
SET TRANSACTION_TITLES.COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
FROM TRANSACTION_TITLES      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
UPDATE RELEASE_ADJUSTMENTS      
SET RELEASE_ADJUSTMENTS.COD_SITUATION = 6      
FROM RELEASE_ADJUSTMENTS      
INNER JOIN POSWEB_DATA_TRANSACTION      
 ON RELEASE_ADJUSTMENTS.COD_POS_DATA = POSWEB_DATA_TRANSACTION.COD_POS_DATA      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = POSWEB_DATA_TRANSACTION.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
END;      
ELSE      
BEGIN      
IF @SIT = @SITUATION      
THROW 60002, '703', 1      
SELECT      
 @CONT = COUNT(*)      
FROM TRANSACTION_TITLES      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
AND TRANSACTION_TITLES.COD_SITUATION != 4      
IF @CONT > 0      
THROW 60002, '704', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
UPDATE TRANSACTION_TITLES      
SET TRANSACTION_TITLES.COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
FROM TRANSACTION_TITLES      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
UPDATE RELEASE_ADJUSTMENTS      
SET RELEASE_ADJUSTMENTS.COD_SITUATION = 6      
FROM RELEASE_ADJUSTMENTS      
INNER JOIN POSWEB_DATA_TRANSACTION      
 ON RELEASE_ADJUSTMENTS.COD_POS_DATA = POSWEB_DATA_TRANSACTION.COD_POS_DATA      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = POSWEB_DATA_TRANSACTION.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
END;      
END ;     
END


GO 

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_PRCS') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_PRCS];
GO

CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_PRCS]                          
  
/*****************************************************************************************************************  
----------------------------------------------------------------------------------------                          
Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
Project.......: TKPP                          
------------------------------------------------------------------------------------------                          
Author                          VERSION        Date                            Description                          
------------------------------------------------------------------------------------------                          
LUCAS AGUIAR                      V1        16/01/2019                          Creation                  
LUCAS AGUIAR                      V2        23-04-2019                         ROTINA SPLIT     
Caike Uch�a                       V3        12-08-2020                         ADD AMOUNT_NEW
------------------------------------------------------------------------------------------  
*****************************************************************************************************************/                         
                         
AS  
BEGIN  
    DECLARE @COUNT INT= 0;  
  
  
  
  
    BEGIN  
  
---------------------------------------------                        
--------------RECORDS INSERT-----------------                        
---------------------------------------------                       
  
SELECT  
 [VW_REPORT_TRANSACTIONS_PRCS].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_AC]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_COMP]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SOURCE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[POSWEB]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_CODE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[AMOUNT]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[PLOTS]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_DATE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_TYPE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TYPE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_EC]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SERIAL_EQUIP]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TID]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[BRAND]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[NSU_EXT]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[PAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRACKING_TRANSACTION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[DESCRIPTION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_EC_TRANS]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANS_EC_NAME]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANS_EC_CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CREATED_AT]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SALES_REP_NAME]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[LINK_PAYMENT_SERVICE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CUSTOMER_EMAIL]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CUSTOMER_IDENTIFICATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[PAYMENT_LINK_TRACKING] INTO [#TB_REPORT_TRANSACTIONS_PRCS_INSERT]  
FROM [DBO].[VW_REPORT_TRANSACTIONS_PRCS]  
WHERE [VW_REPORT_TRANSACTIONS_PRCS].[REP_COD_TRAN] IS NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_PRCS_INSERT];  
  
IF @COUNT > 0  
BEGIN  
INSERT INTO [DBO].[REPORT_TRANSACTIONS] ([COD_TRAN],  
[COD_AC],  
[COD_COMP],  
[COD_SOURCE_TRAN],  
[POSWEB],  
[TRANSACTION_CODE],  
[TYPE_TRAN],  
[AMOUNT],  
[PLOTS],  
[TRANSACTION_DATE],  
[TRANSACTION_TYPE],  
[CPF_CNPJ],  
[NAME],  
[COD_EC],  
[SERIAL_EQUIP],  
[TID],  
[SITUATION],  
[COD_SITUATION],  
[BRAND],  
[NSU_EXT],  
[PAN],  
[COD_AFFILIATOR],  
[NAME_AFFILIATOR],  
[TRACKING_TRANSACTION],  
[DESCRIPTION],  
[COD_EC_TRANS],  
[TRANS_EC_NAME],  
[TRANS_EC_CPF_CNPJ],  
[CREATED_AT],  
[MODIFY_DATE],  
[COD_SALE_REP],  
[SALES_REPRESENTATIVE],  
[LINK_PAYMENT_SERVICE],  
[CUSTOMER_EMAIL],  [CUSTOMER_IDENTIFICATION],  
[PAYMENT_LINK_TRACKING])  
 SELECT  
  [#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_TRAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_AC]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_COMP]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SOURCE_TRAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[POSWEB]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_CODE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TYPE_TRAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[AMOUNT]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PLOTS]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_DATE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_TYPE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CPF_CNPJ]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SERIAL_EQUIP]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TID]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SITUATION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SITUATION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[BRAND]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NSU_EXT]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_AFFILIATOR]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME_AFFILIATOR]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRACKING_TRANSACTION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[DESCRIPTION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC_TRANS]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANS_EC_NAME]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANS_EC_CPF_CNPJ]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CREATED_AT]  
    ,GETDATE()  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SALES_REP]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SALES_REP_NAME]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[LINK_PAYMENT_SERVICE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CUSTOMER_EMAIL]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CUSTOMER_IDENTIFICATION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PAYMENT_LINK_TRACKING]  
 FROM [#TB_REPORT_TRANSACTIONS_PRCS_INSERT];  
  
IF @@rowcount < 1  
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_INSERT]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 4;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;  
END;  
  
  
---------------------------------------------                        
--------------RECORDS UPDATE-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_PRCS].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SITUATION]
   ,[VW_REPORT_TRANSACTIONS_PRCS].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]  
FROM [DBO].[VW_REPORT_TRANSACTIONS_PRCS]  
WHERE [VW_REPORT_TRANSACTIONS_PRCS].[REP_COD_TRAN] IS NOT NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE];  
  
IF @COUNT > 0  
BEGIN  
UPDATE [REPORT_TRANSACTIONS]  
SET [REPORT_TRANSACTIONS].[SITUATION] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[SITUATION]  
   ,[REPORT_TRANSACTIONS].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_SITUATION]  
   ,[REPORT_TRANSACTIONS].[MODIFY_DATE] = GETDATE()  
   ,[REPORT_TRANSACTIONS].AMOUNT = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[AMOUNT]
FROM [REPORT_TRANSACTIONS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]  
 ON ([REPORT_TRANSACTIONS].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_TRAN]);  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 4;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;  
END;  
  
  
END;  
END;  
  
GO

--DECLARANDO VARIAVEIS
DECLARE @COD_EC INT;
DECLARE @COD_USER INT;

--CRIANDO UM CURSOR
DECLARE ACCEPTUSER CURSOR
FOR SELECT
USERS.COD_EC , 
USERS.COD_USER
FROM USERS 
JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
AND COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT IS NULL
AND USERS.ACCEPT = 1 

-- ABRINDO UM CURSOR

OPEN ACCEPTUSER

--SELECIONAR OS DADOS( busca o pr�ximo dado do cursor)

FETCH NEXT FROM ACCEPTUSER 
INTO @COD_EC, @COD_USER;

-- itera��o entre os dados retornados pelo Cursor ( Enquanto tiver retornando dados, ele vai inserir as linhas)

WHILE @@FETCH_STATUS = 0
BEGIN 

----Pegar os pr�ximos dados

UPDATE COMMERCIAL_ESTABLISHMENT SET USER_TCU_ACCEPT= @COD_USER WHERE COD_EC = @COD_EC

FETCH NEXT FROM ACCEPTUSER 
INTO @COD_EC, @COD_USER;
--SELECT * FROM DATA_EQUIPMENT_AC WHERE CODE= @CODE AND ACTIVE= 1 AND COD_AC = 10

END

-- FECHANDO E DESALOCANDO O CURSOR DA MEM�RIA 

CLOSE ACCEPTUSER
DEALLOCATE ACCEPTUSER


GO 

IF OBJECT_ID('SP_LS_DATA_EMAIL_SMS_RESEND') IS NOT NULL
    DROP PROCEDURE [SP_LS_DATA_EMAIL_SMS_RESEND];
GO
CREATE PROCEDURE [dbo].[SP_LS_DATA_EMAIL_SMS_RESEND]         
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_LS_DATA_EMAIL_SMS_RESEND]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         03/07/2020                          Creation       
Caike Uch�a                       V2         18/08/2020                  Add Contact active and Term_Token
------------------------------------------------------------------------------------------*/       
(    
@COD_EC INT,    
@VALUE VARCHAR(200)    
)    
AS    
BEGIN  
    
    
    
DECLARE @COD_USER INT;  
    
DECLARE @CODE_TERM VARCHAR(64) = NULL  
      
DECLARE @COD_AFFILIATOR INT;  
    
DECLARE @TCU_COMPLETE INT = 0;  
    
DECLARE @EMAIL_RET VARCHAR(200);  
      
DECLARE @NAME_RET VARCHAR(200);  
      
DECLARE @ACCESS_KEY VARCHAR(200);  
      
DECLARE @CONT INT;  
      
DECLARE @NOTIFY_TCU INT;  
    
DECLARE @COD_ACESS VARCHAR(100);  
    
DECLARE @SUBDOMAIN VARCHAR(100);  
      
DECLARE @COLOR VARCHAR(16) = NULL;  
      
DECLARE @LOG_AF VARCHAR (256) = NULL;  
      
DECLARE @PHONE_NUMBER VARCHAR(100);  
    
DECLARE @PASSPROV VARCHAR(100) = NULL;  
      
DECLARE @DDD INT;  
    
   
  
IF( SELECT  
  COUNT(*)  
 FROM COMMERCIAL_ESTABLISHMENT  
 WHERE COD_EC = @COD_EC  
 AND ACTIVE = 1  
 AND TCU_ACCEPTED = 1)  
> 0  
  
THROW 61072, 'THIS ESTABLISHMENT HAS ALTERADY ACCEPEPTED THE TCU', 1;  
  
  
  
SELECT TOP 1  
 @CONT = COUNT(*)  
   ,@COD_USER = USERS.COD_USER  
   ,@ACCESS_KEY = COMPANY.ACCESS_KEY  
   ,@COD_ACESS = USERS.COD_ACCESS  
   ,@COD_AFFILIATOR = USERS.COD_AFFILIATOR  
FROM USERS   
INNER JOIN COMPANY  
 ON COMPANY.COD_COMP = USERS.COD_COMP  
INNER JOIN COMMERCIAL_ESTABLISHMENT CE  
 ON USERS.COD_EC = CE.COD_EC  
WHERE USERS.COD_EC = @COD_EC  
AND USERS.ACTIVE = 1  
GROUP BY USERS.COD_USER
  ,COMPANY.ACCESS_KEY  
  ,USERS.COD_ACCESS  
  ,USERS.COD_AFFILIATOR;  

  
IF @CONT IS NULL  
THROW 61071, 'THIS ESTABLISHMENT NOT CONTAIN USER', 1;  

  EXEC [SP_REG_TERM_TOKEN] @COD_USER
  
SELECT @CODE_TERM= CODE FROM TERM_TOKEN WHERE COD_USER = @COD_USER AND ACTIVE = 1
  
  
EXEC SP_REG_PROV_PASS_USER @CODACESS = @COD_ACESS  
        ,@ACCESS_KEY = @ACCESS_KEY  
        ,@VALUE = @VALUE  
        ,@REQUIRED = 1  
        ,@COD_AFFILIATOR = @COD_AFFILIATOR  
        ,@NOT_RETURN = 1;  
  
  
SELECT  
 @EMAIL_RET = USERS.EMAIL  
   ,@NAME_RET = USERS.IDENTIFICATION  
   ,@NOTIFY_TCU = IIF(CE.TCU_ACCEPTED = 0, 1, 0)  
   ,@SUBDOMAIN = AFFILIATOR.SUBDOMAIN  
   ,@COLOR = T.COLOR_HEADER  
   ,@LOG_AF = T.LOGO_AFFILIATE  
   ,@PHONE_NUMBER = CONTACT_USERS.NUMBER  
   ,@PASSPROV = PROVISORY_PASS_USER.[VALUE]  
   ,@DDD = CONTACT_USERS.DDD  
FROM USERS  
INNER JOIN COMMERCIAL_ESTABLISHMENT CE  
 ON USERS.COD_EC = CE.COD_EC  
LEFT JOIN AFFILIATOR  
 ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR  
LEFT JOIN THEMES T  
 ON AFFILIATOR.COD_AFFILIATOR = T.COD_AFFILIATOR  
  AND T.ACTIVE = 1  
LEFT JOIN CONTACT_USERS  
 ON CONTACT_USERS.COD_USER = USERS.COD_USER  
 AND CONTACT_USERS.ACTIVE = 1
INNER JOIN PROVISORY_PASS_USER  
 ON PROVISORY_PASS_USER.COD_USER = USERS.COD_USER  
WHERE USERS.COD_USER = @COD_USER;  
  
  
SELECT  
 @TCU_COMPLETE = 1  
FROM SERVICES_AVAILABLE SA  
JOIN ITEMS_SERVICES_AVAILABLE ISA  
 ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE  
  AND ISA.ACTIVE = 1  
WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR  
AND SA.COD_EC IS NULL  
AND SA.ACTIVE = 1  
AND ISA.NAME = 'TCUDETAILED'  
  
  
  
SELECT  
 @COD_USER AS COD_USER  
   ,@COD_ACESS AS [login]  
   ,@EMAIL_RET AS EMAIL  
   ,@NAME_RET AS [NAME]  
   ,@ACCESS_KEY AS ACCESS_KEY  
   ,@NOTIFY_TCU AS NOTIFY_TCU  
   ,@TCU_COMPLETE AS TCU_COMPLETE  
   ,@CODE_TERM AS CODE_TERM  
   ,@COD_AFFILIATOR AS CODAFF  
   ,@SUBDOMAIN AS SUBDOMAIN  
   ,@COLOR AS AFF_COLOR  
   ,@LOG_AF AS LOG_AFF  
   ,@PHONE_NUMBER AS PHONE_NUMBER  
   ,@DDD AS DDD  
   ,ISNULL(@PASSPROV, @VALUE) AS PASS;  
  
END;  


  
GO 

IF OBJECT_ID('SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE') IS NOT NULL
    DROP PROCEDURE [SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE];
GO

CREATE PROCEDURE [dbo].[SP_LS_ECS_RESEND_EMAIL_SMS_SERVICE]         
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_RESEND_EMAIL_SMS_SERVICE]       
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         18/08/2020                          Creation        
------------------------------------------------------------------------------------------*/         
AS
BEGIN 

 
SELECT DISTINCT COMMERCIAL_ESTABLISHMENT.COD_EC
INTO #TEMP_USER
FROM COMMERCIAL_ESTABLISHMENT 
JOIN USERS ON USERS.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
AND COMMERCIAL_ESTABLISHMENT.ACTIVE=1


SELECT DISTINCT REPORT_TRANSACTIONS.COD_EC
INTO #TEMP_TRAN
FROM REPORT_TRANSACTIONS
WHERE TRANSACTION_DATE > DATEADD(MONTH,-1,GETDATE())


SELECT 
COMMERCIAL_ESTABLISHMENT.COD_EC
FROM COMMERCIAL_ESTABLISHMENT
JOIN RISK_SITUATION ON RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
JOIN TRADUCTION_RISK_SITUATION ON TRADUCTION_RISK_SITUATION.COD_RISK_SITUATION = RISK_SITUATION.COD_RISK_SITUATION
LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
LEFT JOIN USERS USER_ACCEPT ON USER_ACCEPT.COD_USER = COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT
JOIN #TEMP_USER ON #TEMP_USER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
JOIN #TEMP_TRAN ON #TEMP_TRAN.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE COMMERCIAL_ESTABLISHMENT.USER_TCU_ACCEPT IS NULL

DROP TABLE #TEMP_TRAN
DROP TABLE #TEMP_USER


END;
  
GO 

IF OBJECT_ID('SP_REG_RESEND_EMAIL_SMS_SERVICE') IS NOT NULL
    DROP PROCEDURE [SP_REG_RESEND_EMAIL_SMS_SERVICE];
GO

CREATE PROCEDURE [dbo].[SP_REG_RESEND_EMAIL_SMS_SERVICE]         
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_REG_RESEND_EMAIL_SMS_SERVICE]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Caike Uch�a                       V1         18/08/2020                          Creation       
------------------------------------------------------------------------------------------*/       
(    
@COD_EC INT,    
@VALUE VARCHAR(200)    
)    
AS    
BEGIN  
    
    
DECLARE @COD_USER INT;  
    
DECLARE @CODE_TERM VARCHAR(64) = NULL  
      
DECLARE @COD_AFFILIATOR INT;  
    
DECLARE @TCU_COMPLETE INT = 0;  
    
DECLARE @EMAIL_RET VARCHAR(200);  
      
DECLARE @NAME_RET VARCHAR(200);  
      
DECLARE @ACCESS_KEY VARCHAR(200);  
      
DECLARE @CONT INT;  
      
DECLARE @NOTIFY_TCU INT;  
    
DECLARE @COD_ACESS VARCHAR(100);  
    
DECLARE @SUBDOMAIN VARCHAR(100);  
      
DECLARE @COLOR VARCHAR(16) = NULL;  
      
DECLARE @LOG_AF VARCHAR (256) = NULL;  
      
DECLARE @PHONE_NUMBER VARCHAR(100);  
    
DECLARE @PASSPROV VARCHAR(100) = NULL;  
      
DECLARE @DDD INT;  
    
   
  
IF( SELECT  
  COUNT(*)  
 FROM COMMERCIAL_ESTABLISHMENT  
 WHERE COD_EC = @COD_EC  
 AND ACTIVE = 1  
 AND TCU_ACCEPTED = 1
 AND USER_TCU_ACCEPT IS NOT NULL)  
= 0  
  
BEGIN
   
SELECT TOP 1  
 @CONT = COUNT(*)  
   ,@COD_USER = USERS.COD_USER  
   ,@ACCESS_KEY = COMPANY.ACCESS_KEY  
   ,@COD_ACESS = USERS.COD_ACCESS  
   ,@COD_AFFILIATOR = USERS.COD_AFFILIATOR  
FROM USERS   
INNER JOIN COMPANY  
 ON COMPANY.COD_COMP = USERS.COD_COMP  
INNER JOIN COMMERCIAL_ESTABLISHMENT CE  
 ON USERS.COD_EC = CE.COD_EC  
WHERE USERS.COD_EC = @COD_EC  
AND USERS.ACTIVE = 1  
GROUP BY USERS.COD_USER
  ,COMPANY.ACCESS_KEY  
  ,USERS.COD_ACCESS  
  ,USERS.COD_AFFILIATOR;  

  
  EXEC [SP_REG_TERM_TOKEN] @COD_USER
  
SELECT @CODE_TERM= CODE FROM TERM_TOKEN WHERE COD_USER = @COD_USER AND ACTIVE = 1
  
IF (@CONT IS NOT NULL) 
BEGIN  
  
EXEC SP_REG_PROV_PASS_USER @CODACESS = @COD_ACESS  
        ,@ACCESS_KEY = @ACCESS_KEY  
        ,@VALUE = @VALUE  
        ,@REQUIRED = 1  
        ,@COD_AFFILIATOR = @COD_AFFILIATOR  
        ,@NOT_RETURN = 1;  
  
  
SELECT  
 @EMAIL_RET = USERS.EMAIL  
   ,@NAME_RET = USERS.IDENTIFICATION  
   ,@NOTIFY_TCU = IIF(CE.TCU_ACCEPTED = 0, 1, 0)  
   ,@SUBDOMAIN = AFFILIATOR.SUBDOMAIN  
   ,@COLOR = T.COLOR_HEADER  
   ,@LOG_AF = T.LOGO_AFFILIATE  
   ,@PHONE_NUMBER = CONTACT_USERS.NUMBER  
   ,@PASSPROV = PROVISORY_PASS_USER.[VALUE]  
   ,@DDD = CONTACT_USERS.DDD  
FROM USERS  
INNER JOIN COMMERCIAL_ESTABLISHMENT CE  
 ON USERS.COD_EC = CE.COD_EC  
LEFT JOIN AFFILIATOR  
 ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR  
LEFT JOIN THEMES T  
 ON AFFILIATOR.COD_AFFILIATOR = T.COD_AFFILIATOR  
  AND T.ACTIVE = 1  
INNER JOIN CONTACT_USERS  
 ON CONTACT_USERS.COD_USER = USERS.COD_USER  
 AND CONTACT_USERS.ACTIVE = 1
INNER JOIN PROVISORY_PASS_USER  
 ON PROVISORY_PASS_USER.COD_USER = USERS.COD_USER  
WHERE USERS.COD_USER = @COD_USER;  
  
  
SELECT  
 @TCU_COMPLETE = 1  
FROM SERVICES_AVAILABLE SA  
JOIN ITEMS_SERVICES_AVAILABLE ISA  
 ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE  
  AND ISA.ACTIVE = 1  
WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR  
AND SA.COD_EC IS NULL  
AND SA.ACTIVE = 1  
AND ISA.NAME = 'TCUDETAILED'  
  
  
  
SELECT  
 @COD_USER AS COD_USER  
   ,@COD_ACESS AS [login]  
   ,@EMAIL_RET AS EMAIL  
   ,@NAME_RET AS [NAME]  
   ,@ACCESS_KEY AS ACCESS_KEY  
   ,@NOTIFY_TCU AS NOTIFY_TCU  
   ,@TCU_COMPLETE AS TCU_COMPLETE  
   ,@CODE_TERM AS CODE_TERM  
   ,@COD_AFFILIATOR AS CODAFF  
   ,@SUBDOMAIN AS SUBDOMAIN  
   ,@COLOR AS AFF_COLOR  
   ,@LOG_AF AS LOG_AFF  
   ,@PHONE_NUMBER AS PHONE_NUMBER  
   ,@DDD AS DDD  
   ,ISNULL(@PASSPROV, @VALUE) AS PASS;  

   END

END
  
END;  
  
GO

-- INICIO ST-1139 

GO
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'AMOUNT_OLD'
	AND object_id = OBJECT_ID(N'TRANSACTION'))
BEGIN
ALTER TABLE [TRANSACTION]
ADD AMOUNT_OLD DECIMAL(22,6)
END

GO 

IF OBJECT_ID('SP_REG_REPORT_CONSOLIDATED_TRANS_SUB') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_CONSOLIDATED_TRANS_SUB];
GO

CREATE PROCEDURE [dbo].[SP_REG_REPORT_CONSOLIDATED_TRANS_SUB]                            
 /*----------------------------------------------------------------------------------------                            
 Procedure Name: [SP_REG_REPORT_CONSOLIDATED_TRANS_SUB]                            
 Project.......: TKPP                            
 ------------------------------------------------------------------------------------------                            
 Author                          VERSION        Date             Description                            
 ------------------------------------------------------------------------------------------                            
 Fernando Henrique F. de O       V1              28/12/2018      Creation                          
 Fernando Henrique F. de O       V2              07/02/2019      Changed                      
 Luiz Aquino                     V3              22/02/2019      Remove Incomplete Installments                         
 Lucas Aguiar                    V4              22-04-2019      add originador e destino                     
 Caike Uchôa                     V5              16/08/2019      add columns AUTH_CODE e CREDITOR_DOCUMENT                 
 Caike Uchôa                     V6              11/09/2019      add column ORDER_CODE                  
 Marcus Gall                     V7              27/11/2019      Add Model_POS, Segment, Location_EC          
 Ana Paula Liick                 V8              31/01/2020      Add Origem_Trans        
 Caike Uchôa                     V9              30/04/2020      add produto ec    
 Caike Uchôa                     V10             03/08/2020      add QTY_DAYS_ANTECIP  
 Caike Uchôa                     V11             06/08/2020      Add AMOUNT_NEW
 -----------------------------------------------------------------------------------------*/                      
AS                           
   DECLARE @COUNT INT=0;    
        
          
              
BEGIN    
    
---------------------------------------------                          
--------------RECORDS INSERT-----------------                          
---------------------------------------------                            
SELECT    
 --TOP (1000)              
 [VW_REPORT_FULL_CASH_FLOW].COD_TRAN    
   ,[VW_REPORT_FULL_CASH_FLOW].AFFILIATOR    
   ,[VW_REPORT_FULL_CASH_FLOW].MERSHANT    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_TIME    
   ,[VW_REPORT_FULL_CASH_FLOW].NSU    
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_TOTAL    
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TYPE    
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA    
   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_AMOUNT AMOUNT    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_AMOUNT    
   ,[VW_REPORT_FULL_CASH_FLOW].ACQUIRER    
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_ACQ    
   ,[VW_REPORT_FULL_CASH_FLOW].BRAND    
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].MDR_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_RATE    
   ,[VW_REPORT_FULL_CASH_FLOW].ANTECIPATED    
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_PAY_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].TO_RECEIVE_ACQ    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_AFF    
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_EC                                     
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF AS NET_WITHOUT_FEE_AFF_RATE    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_ACQ    
   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_RECEIVE_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_MERCHANT AS RATE    
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_AFF, 0) AS ANTECIP_DISCOUNT_AFF    
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_EC, 0) AS ANTECIP_DISCOUNT_EC    
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].MDR_CURRENT_ACQ, 0) AS MDR_CURRENT_ACQ                                
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_AFF, 0) AS LIQUID_MDR_AFF    
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_AFF, 0) AS RATE_CURRENT_AFF                           
 --,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_CURRENT_EC                            
   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_EC, 0) AS LIQUID_MDR_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_WITHOUT_FEE    
   ,[VW_REPORT_FULL_CASH_FLOW].FEE_AFFILIATOR    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_SUB    
   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_NET    
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_ORIGINATOR AS 'CPF_EC'    
   ,[VW_REPORT_FULL_CASH_FLOW].EC_NAME_DESTINY AS 'ECNAME_DESTINY'    
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_DESTINY AS 'DESTINY'    
   ,[VW_REPORT_FULL_CASH_FLOW].CPF_AFF AS CPF_AFF    
   ,[VW_REPORT_FULL_CASH_FLOW].SERIAL    
   ,[VW_REPORT_FULL_CASH_FLOW].EXTERNAL_NSU    
   ,[VW_REPORT_FULL_CASH_FLOW].PAN    
   ,[VW_REPORT_FULL_CASH_FLOW].CODE    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_COMP    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_BRANCH    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_DEPTO_BRANCH    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_AFFILIATOR    
   ,[VW_REPORT_FULL_CASH_FLOW].SPLIT    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_TRANS    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_NAME    
   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_CPF_CNPJ    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION    
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNED]    
   ,[VW_REPORT_FULL_CASH_FLOW].[RETAINED_AMOUNT]    
   ,[VW_REPORT_FULL_CASH_FLOW].[ORIGINAL_DATE]    
   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNEE]    
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_TIME    
   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_DATE    
   ,[VW_REPORT_FULL_CASH_FLOW].AUTH_CODE    
   ,[VW_REPORT_FULL_CASH_FLOW].CREDITOR_DOCUMENT    
   ,[VW_REPORT_FULL_CASH_FLOW].ORDER_CODE    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_TITLE    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION_TITLE    
   ,[VW_REPORT_FULL_CASH_FLOW].MODEL_POS    
   ,[VW_REPORT_FULL_CASH_FLOW].SEGMENT_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].STATE_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].CITY_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].NEIGHBORHOOD_EC    
   ,[VW_REPORT_FULL_CASH_FLOW].COD_ADDRESS    
   ,[VW_REPORT_FULL_CASH_FLOW].TYPE_TRAN    
   ,[VW_REPORT_FULL_CASH_FLOW].NAME_PROD    
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD    
   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD_CPF_CNPJ     
   ,[VW_REPORT_FULL_CASH_FLOW].PERCENT_PARTICIP_SPLIT   
   ,[VW_REPORT_FULL_CASH_FLOW].QTY_DAYS_ANTECIP  
   INTO #TB_REPORT_FULL_CASH_FLOW_INSERT    
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW]    
ORDER BY COD_TRAN, QUOTA    
OFFSET 0 ROWS FETCH FIRST 200 ROWS ONLY;    
    
WITH TRANINFO    
AS    
(SELECT    
  COUNT(COD_TRAN) AVAILABLE_INSTALLMENTS    
    ,COD_TRAN    
    ,QUOTA_TOTAL    
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT installments    
 GROUP BY COD_TRAN    
   ,QUOTA_TOTAL)    
DELETE INSTALLMENT    
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT INSTALLMENT    
 JOIN TRANINFO    
  ON TRANINFO.COD_TRAN = INSTALLMENT.COD_TRAN    
WHERE TRANINFO.QUOTA_TOTAL > TRANINFO.AVAILABLE_INSTALLMENTS    
    
    
SELECT    
 @COUNT = COUNT(*)    
FROM #TB_REPORT_FULL_CASH_FLOW_INSERT;    
    
IF @COUNT > 0    
BEGIN    
 INSERT INTO [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([COD_TRAN],    
[AFFILIATOR],    
[COMMERCIALESTABLISHMENT],    
[TRANSACTION_DATE],    
[TRANSACTION_TIME],    
[NSU],    
[QUOTA_TOTAL],    
[TRANSACTION_TYPE],    
[PLOT],    
[AMOUNT],    
[TRANSACTION_AMOUNT],    
[ACQUIRER],    
[MDR_ACQUIRER],    
[BRAND],    
[MDR_EC],    
[ANTECIP_PERCENT],    
[ANTECIP_AFFILIATOR],    
[MDR_AFFILIATOR],    
[LIQUID_VALUE_SUB],    
[ANTECIPATED],    
[PREVISION_PAY_DATE],    
[TO_RECEIVE_ACQ],    
[LIQUID_VALUE_AFFILIATOR],    
[LIQUID_AFF_RATE],    
[LIQUID_SUB_RATE],    
[PREVISION_RECEIVE_DATE],    
[RATE],    
[ANTECIP_CURRENT_AFF],    
[ANTECIP_CURRENT_EC],    
[MDR_CURRENT_AFF],    
[MDR_CURRENT_EC],    
[LIQUID_VALUE_EC],    
[FEE_AFFILIATOR],    
[NET_SUB_AQUIRER],    
[NET_WITHOUT_FEE_SUB],    
[NET_WITHOUT_FEE_AFF],    
[MERCHANT_NET],    
[CPF_EC],    
[DESTINY],    
[CPF_AFF],    
[SERIAL],    
[EXTERNALNSU],    
[PAN],    
[CODE],    
[COD_COMP],    
[COD_EC],    
[COD_BRANCH],    
[COD_DEPTO_BRANCH],    
[COD_AFFILIATOR],    
[COD_SITUATION],    
[SPLIT],    
[COD_EC_TRANS],    
[TRANS_EC_NAME],    
[TRANS_EC_CPF_CNPJ]    
, [ASSIGNED]    
, [RETAINED_AMOUNT]    
, [ORIGINAL_DATE]    
, [ASSIGNEE]    
, [MODIFY_DATE]    
, EC_NAME_DESTINY    
, TRANSACTION_TITTLE_DATE    
, TRANSACTION_TITTLE_TIME    
, AUTH_CODE    
, CREDITOR_DOCUMENT    
, ORDER_CODE    
, COD_TITLE    
, COD_SITUATION_TITLE    
, MODEL_POS    
, SEGMENT_EC    
, STATE_EC    
, CITY_EC    
, NEIGHBORHOOD_EC    
, COD_ADDRESS    
, TYPE_TRAN    
, NAME_PROD    
, EC_PROD    
, EC_PROD_CPF_CNPJ    
, PERCENT_PARTICIP_SPLIT  
, QTY_DAYS_ANTECIP)    
 (SELECT    
  TEMP.[COD_TRAN]    
    ,TEMP.[AFFILIATOR]    
    ,TEMP.[MERSHANT]    
    ,TEMP.[TRANSACTION_DATE]    
    ,TEMP.[TRANSACTION_TIME]    
    ,TEMP.[NSU]    
    ,TEMP.[QUOTA_TOTAL]    
    ,TEMP.[TRAN_TYPE]    
    ,TEMP.[QUOTA]    
    ,TEMP.[AMOUNT]    
    ,TEMP.[TRANSACTION_AMOUNT]    
    ,TEMP.[ACQUIRER]    
    ,TEMP.[MDR_ACQ]    
    ,TEMP.[BRAND]    
    ,TEMP.[MDR_EC]    
    ,TEMP.[ANTICIP_EC]    
    ,TEMP.[ANTICIP_AFF]    
    ,TEMP.[MDR_AFF]    
    ,TEMP.[NET_SUB_RATE]    
    ,TEMP.[ANTECIPATED]    
    ,TEMP.[PREDICTION_PAY_DATE]    
    ,TEMP.[TO_RECEIVE_ACQ]    
    ,TEMP.[NET_AFF]    
    ,TEMP.[NET_WITHOUT_FEE_AFF_RATE]    
    ,TEMP.[NET_SUB_ACQ]    
    ,TEMP.[PREDICTION_RECEIVE_DATE]    
    ,TEMP.[RATE]    
    ,TEMP.[ANTECIP_DISCOUNT_AFF]    
    ,TEMP.[ANTECIP_DISCOUNT_EC]    
    ,TEMP.[LIQUID_MDR_AFF]    
    ,TEMP.[LIQUID_MDR_EC]    
    ,TEMP.[MERCHANT_WITHOUT_FEE]    
    ,TEMP.[FEE_AFFILIATOR]    
    ,TEMP.[NET_SUB]    
    ,TEMP.[NET_WITHOUT_FEE_SUB]    
    ,TEMP.[NET_WITHOUT_FEE_AFF]    
    ,TEMP.[MERCHANT_NET]    
    ,TEMP.[CPF_AFF]    
    ,TEMP.[DESTINY]    
    ,TEMP.[CPF_EC]    
    ,TEMP.[SERIAL]    
    ,TEMP.[EXTERNAL_NSU]    
    ,TEMP.[PAN]    
    ,TEMP.[CODE]    
    ,TEMP.[COD_COMP]    
    ,TEMP.[COD_EC]    
    ,TEMP.[COD_BRANCH]    
    ,TEMP.[COD_DEPTO_BRANCH]    
    ,TEMP.[COD_AFFILIATOR]    
    ,TEMP.[COD_SITUATION]    
    ,TEMP.[SPLIT]    
    ,TEMP.[COD_EC_TRANS]    
    ,TEMP.[TRANS_EC_NAME]    
    ,TEMP.[TRANS_EC_CPF_CNPJ]    
    ,TEMP.[ASSIGNED]    
    ,TEMP.[RETAINED_AMOUNT]    
    ,TEMP.[ORIGINAL_DATE]    
    ,TEMP.[ASSIGNEE]    
    ,GETDATE()    
    ,TEMP.ECNAME_DESTINY    
    ,TRAN_TITTLE_DATE    
    ,TRAN_TITTLE_TIME    
    ,TEMP.AUTH_CODE    
    ,TEMP.CREDITOR_DOCUMENT    
    ,TEMP.ORDER_CODE    
    ,TEMP.COD_TITLE    
    ,TEMP.COD_SITUATION_TITLE    
    ,TEMP.MODEL_POS    
    ,TEMP.SEGMENT_EC    
    ,TEMP.STATE_EC    
    ,TEMP.CITY_EC    
    ,TEMP.NEIGHBORHOOD_EC    
    ,TEMP.COD_ADDRESS    
    ,TEMP.TYPE_TRAN    
    ,TEMP.NAME_PROD    
    ,TEMP.EC_PROD    
    ,TEMP.EC_PROD_CPF_CNPJ    
    ,TEMP.PERCENT_PARTICIP_SPLIT   
 ,TEMP.QTY_DAYS_ANTECIP  
 FROM #TB_REPORT_FULL_CASH_FLOW_INSERT TEMP    
 )    
    
IF @@rowcount < 1    
THROW 60000, 'COULD NOT REGISTER [REPORT_CONSOLIDATED_TRANS_SUB] ', 1;    
    
UPDATE [PROCESS_BG_STATUS]    
SET STATUS_PROCESSED = 1    
   ,MODIFY_DATE = GETDATE()    
FROM [PROCESS_BG_STATUS]    
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_INSERT    
 ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_INSERT.COD_TRAN)    
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;    
    
IF @@rowcount < 1    
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;    
END;    
    
---------------------------------------------                            
--------------RECORDS UPDATE-----------------                            
---------------------------------------------                              
SELECT    
 [VW_REPORT_FULL_CASH_FLOW_UP].COD_TRAN    
   ,[VW_REPORT_FULL_CASH_FLOW_UP].COD_SITUATION
   ,[VW_REPORT_FULL_CASH_FLOW_UP].TRANSACTION_AMOUNT INTO #TB_REPORT_FULL_CASH_FLOW_UPDATE    
FROM [dbo].[VW_REPORT_FULL_CASH_FLOW_UP]    
    
    
SELECT    
 @COUNT = COUNT(*)    
FROM #TB_REPORT_FULL_CASH_FLOW_UPDATE;    
    
IF @COUNT > 0    
BEGIN    
UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]    
SET [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_SITUATION    
   ,[REPORT_CONSOLIDATED_TRANS_SUB].MODIFY_DATE = GETDATE()  
   ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT = #TB_REPORT_FULL_CASH_FLOW_UPDATE.TRANSACTION_AMOUNT
FROM [REPORT_CONSOLIDATED_TRANS_SUB]    
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE    
 ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN);    
    
IF @@rowcount < 1    
THROW 60001, 'COULD NOT UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]', 1;    
    
UPDATE [PROCESS_BG_STATUS]    
SET STATUS_PROCESSED = 1    
   ,MODIFY_DATE = GETDATE()    
FROM [PROCESS_BG_STATUS]    
INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE    
 ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN)    
WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;    
    
IF @@rowcount < 1    
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;    
END;    
END;    
   
   

GO 

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP];
GO
  
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_EXP]                          
     
/*****************************************************************************************************************    
----------------------------------------------------------------------------------------                          
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                            Description                          
 ------------------------------------------------------------------------------------------                          
 Fernando Henrique F.             V1       13/12/2018                          Creation                           
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                    
 Caike Uchôa                      V3       15/08/2019                       inserting coluns                  
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                
 Caike Uchôa                      V5       20/01/2020                            ADD CNAE    
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento  
 Caike Uchôa                      v7       30/04/2020                        insert ec prod  
 Caike Uchôa                      V8       06/08/2020                    Add [AMOUNT] to reprocess
 ------------------------------------------------------------------------------------------    
*****************************************************************************************************************/                         
                         
AS    
BEGIN  
    
    DECLARE @COUNT INT= 0;  
    
    
    
    
    
    BEGIN  
  
---------------------------------------------                        
--------------RECORDS INSERT-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE] INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];  
  
IF @COUNT > 0  
BEGIN  
INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],  
[TRANSACTION_CODE],  
[AMOUNT],  
[PLOTS],  
[TRANSACTION_DATE],  
[TRANSACTION_TYPE],  
[CPF_CNPJ],  
[NAME],  
[SERIAL_EQUIP],  
[TID],  
[SITUATION],  
[BRAND],  
[PAN],  
[TRAN_DATA_EXT],  
[TRAN_DATA_EXT_VALUE],  
[AUTH_CODE],  
[COD_AC],  
[NAME_ACQUIRER],  
[COMMENT],  
[TAX],  
[ANTICIPATION],  
[COD_AFFILIATOR],  
[NAME_AFFILIATOR],  
[NET_VALUE],  
[COD_COMP],  
[COD_EC],  
[COD_BRANCH],  
[STATE_NAME],  
[CITY_NAME],  
[COD_SITUATION],  
[COD_DEPTO_BRANCH],  
[GROSS_VALUE_AGENCY],  
[NET_VALUE_AGENCY],  
[TYPE_TRAN],  
[COD_SOURCE_TRAN],  
[POSWEB],  
[SEGMENTS_NAME],  
[CREATED_TRANSACTION_DATE],  
[COD_EC_TRANS],  
[TRANS_EC_NAME],  
[TRANS_EC_CPF_CNPJ],  
[SPLIT],  
[SALES_REP],  
[COD_USER_REP],  
[MODIFY_DATE],  
[CREDITOR_DOCUMENT],  
[COD_SALES_REP],  
[MODEL_POS],  
[CARD_NAME],  
[CNAE],  
[COD_USER],  
[NAME_USER],  
[LINK_PAYMENT_SERVICE],  
[CUSTOMER_EMAIL],  
[CUSTOMER_IDENTIFICATION],  
[PAYMENT_LINK_TRACKING],  
[NAME_PRODUCT_EC],  
[EC_PRODUCT],  
[EC_PRODUCT_CPF_CNPJ])  
 (SELECT  
  [TEMP].[COD_TRAN]  
    ,[TEMP].[TRANSACTION_CODE]  
    ,[TEMP].[AMOUNT]  
    ,[TEMP].[PLOTS]  
    ,[TEMP].[TRANSACTION_DATE]  
    ,[TEMP].[TRANSACTION_TYPE]  
    ,[TEMP].[CPF_CNPJ]  
    ,[TEMP].[NAME]  
    ,[TEMP].[SERIAL_EQUIP]  
    ,[TEMP].[TID]  
    ,[TEMP].[SITUATION]  
    ,[TEMP].[BRAND]  
    ,[TEMP].[PAN]  
    ,[TEMP].[TRAN_DATA_EXT]  
    ,[TEMP].[TRAN_DATA_EXT_VALUE]  
    ,[TEMP].[AUTH_CODE]  
    ,[TEMP].[COD_AC]  
    ,[TEMP].[NAME_ACQUIRER]  
    ,[TEMP].[COMMENT]  
    ,[TEMP].[TAX]  
    ,[TEMP].[ANTICIPATION]  
    ,[TEMP].[COD_AFFILIATOR]  
    ,[TEMP].[NAME_AFFILIATOR]  
    ,[TEMP].[NET_VALUE]  
    ,[TEMP].[COD_COMP]  
    ,[TEMP].[COD_EC]  
    ,[TEMP].[COD_BRANCH]  
    ,[TEMP].[STATE_NAME]  
    ,[TEMP].[CITY_NAME]  
    ,[TEMP].[COD_SITUATION]  
    ,[TEMP].[COD_DEPTO_BRANCH]  
    ,[TEMP].[GROSS_VALUE_AGENCY]  
    ,[TEMP].[NET_VALUE_AGENCY]  
    ,[TEMP].[TYPE_TRAN]  
    ,[TEMP].[COD_SOURCE_TRAN]  
    ,[TEMP].[POSWEB]  
    ,[TEMP].[SEGMENTS_NAME]  
    ,[TEMP].[CREATED_AT]  
    ,[TEMP].[COD_EC_TRANS]  
    ,[TEMP].[TRANS_EC_NAME]  
    ,[TEMP].[TRANS_EC_CPF_CNPJ]  
    ,[TEMP].[SPLIT]  
    ,[SALES_REP]  
    ,[COD_USER_REP]  
    ,GETDATE()  
    ,[CREDITOR_DOCUMENT]  
    ,[COD_SALES_REP]  
    ,[TEMP].[MODEL_POS]  
    ,[CARD_NAME]  
    ,[CNAE]  
    ,[COD_USER]  
    ,[NAME_USER]  
    ,[LINK_PAYMENT]  
    ,[CUSTOMER_EMAIL]  
    ,[CUSTOMER_IDENTIFICATION]  
    ,[TEMP].[PAYMENT_LINK_TRACKING]  
    ,[TEMP].[NAME_PRODUCT_EC]  
    ,[TEMP].[EC_PRODUCT]  
    ,[TEMP].[EC_PRODUCT_CPF_CNPJ]  
 FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);  
  
IF @@rowcount < 1  
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;  
END;  
  
  
---------------------------------------------                        
--------------RECORDS UPDATE-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];  
  
IF @COUNT > 0  
BEGIN  
UPDATE [REPORT_TRANSACTIONS_EXP]  
SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]  
   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]  
   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]  
   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()  
   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]  
   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]  
   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
FROM [REPORT_TRANSACTIONS_EXP]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
 ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;  
END;  
END;  
END;  


GO 

IF OBJECT_ID('SP_UP_TRANSACTION_ON') IS NOT NULL
    DROP PROCEDURE [SP_UP_TRANSACTION_ON];
GO
    
CREATE PROCEDURE [dbo].[SP_UP_TRANSACTION_ON]                    
/*----------------------------------------------------------------------------------------                    
Procedure Name: [SP_UP_TRANSACTION]                    
Project.......: TKPP                    
------------------------------------------------------------------------------------------                    
Author               VERSION           Date                  Description                    
------------------------------------------------------------------------------------------                    
Kennedy Alef           V1           27/07/2018                 Creation                    
Rodrigo Carvalho       V2           12/12/2018                 Creation                    
Lucas Aguiar           v3           2019-04-17    Add parâmetro e rotina de aw. titles            
Caike Uchôa            v4           2020-08-06               add @AMOUNT_CHANGE
------------------------------------------------------------------------------------------*/                    
(                    
@CODE_TRAN VARCHAR(200),                    
@SITUATION VARCHAR(100),                    
@DESCRIPTION VARCHAR(200),                    
@CURRENCY VARCHAR(100),                
@COD_PROD_ACQ INT = NULL,              
@COD_AC INT = NULL,
@AMOUNT_CHANGE DECIMAL(22,6) = NULL
)                    
AS                    
DECLARE @CONT INT;      
          
              
DECLARE @AMOUNT_OLD DECIMAL(22,6);                
                    
DECLARE @SIT VARCHAR(100);      
          
              
                
                    
DECLARE @BRANCH INT      
          
              
                
DECLARE @COD_ASS_TR_COMP INT;      
          
              
BEGIN      
      
SELECT      
 @COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP      
FROM ASS_TR_TYPE_COMP      
INNER JOIN [TRANSACTION] WITH (NOLOCK)      
 ON [TRANSACTION].CODE = @CODE_TRAN      
  AND [TRANSACTION].PLOTS BETWEEN PLOT_INI AND PLOT_END      
INNER JOIN BRAND      
 ON BRAND.NAME = [TRANSACTION].BRAND      
  AND BRAND.COD_TTYPE = [TRANSACTION].COD_TTYPE      
  AND ASS_TR_TYPE_COMP.COD_BRAND = BRAND.COD_BRAND      
WHERE ASS_TR_TYPE_COMP.COD_SOURCE_TRAN = 1      
AND ACTIVE = 1      
AND ASS_TR_TYPE_COMP.COD_AC = @COD_AC      
      
SET @CONT = 1;      
SELECT      
 @CONT = COD_TRAN      
   ,@SIT = SITUATION.NAME      
FROM [TRANSACTION]      
INNER JOIN SITUATION      
 ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION      
WHERE CODE = @CODE_TRAN      
IF @CONT < 1      
 OR @CONT IS NULL      
THROW 60002, '601', 1;      
UPDATE PROCESS_BG_STATUS      
SET STATUS_PROCESSED = 0      
   ,MODIFY_DATE = GETDATE()      
WHERE CODE = @CONT      
AND COD_TYPE_PROCESS_BG = 1      
IF @SITUATION = 'APPROVED'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 1      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END      
ELSE      
IF @SITUATION = 'PENDENT'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 19      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END      
ELSE      
IF @SITUATION = 'CONFIRMED'      
BEGIN      
IF @SIT = @SITUATION      
THROW 60002, '603', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;     

UPDATE [TRANSACTION]      
SET COD_SITUATION = 3      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)  
   ,AMOUNT_OLD = [TRANSACTION].AMOUNT
   ,AMOUNT = ISNULL(@AMOUNT_CHANGE,[TRANSACTION].AMOUNT)
   FROM [TRANSACTION]
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
DELETE FROM TRANSACTION_PENDENT_TREATMENT      
WHERE TID = @CODE_TRAN      
EXECUTE [SP_GEN_TITLES_TRANS] @COD_TRAN = @CODE_TRAN      
END      
ELSE      
IF @SITUATION = 'AWAITING TITLES'      
BEGIN      
IF @SIT = @SITUATION      
THROW 60002, '603', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 22      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = '206 - AGUARDANDO TITULOS'      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
DELETE FROM TRANSACTION_PENDENT_TREATMENT      
WHERE TID = @CODE_TRAN;      
END      
ELSE      
IF @SITUATION = 'DENIED ACQUIRER'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 2      
   ,MODIFY_DATE = GETDATE()      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END;     
IF @SITUATION = 'DENIED FRAUD PREVENTION'     
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 35      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END     
    
    
    
IF @SITUATION = 'UNDONE'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 10      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END;      
--OR @SITUATION = ''                    
ELSE      
IF @SITUATION = 'PRE-APPROVED'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 31      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,COD_CURRRENCY = (SELECT      
   COD_CURRRENCY      
  FROM CURRENCY      
  WHERE NUM = @CURRENCY)      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
   ,[TRANSACTION].PRE_APPROVED = 1      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END      
IF @SITUATION = 'FAILED'      
BEGIN      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 7      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
END;      
ELSE      
IF @SITUATION = 'CANCELED'      
BEGIN      
IF (@SIT = 'AWAITING TITLES')      
BEGIN      IF @SIT = @SITUATION      
THROW 60002, '703', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
UPDATE TRANSACTION_TITLES      
SET TRANSACTION_TITLES.COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
FROM TRANSACTION_TITLES      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
UPDATE RELEASE_ADJUSTMENTS      
SET RELEASE_ADJUSTMENTS.COD_SITUATION = 6      
FROM RELEASE_ADJUSTMENTS      
INNER JOIN POSWEB_DATA_TRANSACTION      
 ON RELEASE_ADJUSTMENTS.COD_POS_DATA = POSWEB_DATA_TRANSACTION.COD_POS_DATA      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = POSWEB_DATA_TRANSACTION.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
END;      
ELSE      
BEGIN      
IF @SIT = @SITUATION      
THROW 60002, '703', 1      
SELECT      
 @CONT = COUNT(*)      
FROM TRANSACTION_TITLES      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
AND TRANSACTION_TITLES.COD_SITUATION != 4      
IF @CONT > 0      
THROW 60002, '704', 1      
EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;      
UPDATE [TRANSACTION]      
SET COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
   ,[TRANSACTION].COD_PR_ACQ = ISNULL(@COD_PROD_ACQ, [TRANSACTION].COD_PR_ACQ)      
   ,[TRANSACTION].COD_ASS_TR_COMP = ISNULL(@COD_ASS_TR_COMP, [TRANSACTION].COD_ASS_TR_COMP)      
WHERE [TRANSACTION].CODE = @CODE_TRAN;      
IF @@rowcount < 1      
THROW 60002, '002', 1      
UPDATE TRANSACTION_TITLES      
SET TRANSACTION_TITLES.COD_SITUATION = 6      
   ,MODIFY_DATE = GETDATE()      
   ,COMMENT = @DESCRIPTION      
FROM TRANSACTION_TITLES      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
UPDATE RELEASE_ADJUSTMENTS      
SET RELEASE_ADJUSTMENTS.COD_SITUATION = 6      
FROM RELEASE_ADJUSTMENTS      
INNER JOIN POSWEB_DATA_TRANSACTION      
 ON RELEASE_ADJUSTMENTS.COD_POS_DATA = POSWEB_DATA_TRANSACTION.COD_POS_DATA      
INNER JOIN [TRANSACTION]      
 ON [TRANSACTION].COD_TRAN = POSWEB_DATA_TRANSACTION.COD_TRAN      
WHERE [TRANSACTION].CODE = @CODE_TRAN      
END;      
END ;     
END


GO 

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_PRCS') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_PRCS];
GO

CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_PRCS]                          
  
/*****************************************************************************************************************  
----------------------------------------------------------------------------------------                          
Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
Project.......: TKPP                          
------------------------------------------------------------------------------------------                          
Author                          VERSION        Date                            Description                          
------------------------------------------------------------------------------------------                          
LUCAS AGUIAR                      V1        16/01/2019                          Creation                  
LUCAS AGUIAR                      V2        23-04-2019                         ROTINA SPLIT     
Caike Uchôa                       V3        12-08-2020                         ADD AMOUNT_NEW
------------------------------------------------------------------------------------------  
*****************************************************************************************************************/                         
                         
AS  
BEGIN  
    DECLARE @COUNT INT= 0;  
  
  
  
  
    BEGIN  
  
---------------------------------------------                        
--------------RECORDS INSERT-----------------                        
---------------------------------------------                       
  
SELECT  
 [VW_REPORT_TRANSACTIONS_PRCS].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_AC]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_COMP]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SOURCE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[POSWEB]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_CODE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[AMOUNT]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[PLOTS]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_DATE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_TYPE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TYPE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_EC]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SERIAL_EQUIP]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TID]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[BRAND]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[NSU_EXT]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[PAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRACKING_TRANSACTION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[DESCRIPTION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_EC_TRANS]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANS_EC_NAME]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANS_EC_CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CREATED_AT]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SALES_REP_NAME]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[LINK_PAYMENT_SERVICE]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CUSTOMER_EMAIL]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[CUSTOMER_IDENTIFICATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[PAYMENT_LINK_TRACKING] INTO [#TB_REPORT_TRANSACTIONS_PRCS_INSERT]  
FROM [DBO].[VW_REPORT_TRANSACTIONS_PRCS]  
WHERE [VW_REPORT_TRANSACTIONS_PRCS].[REP_COD_TRAN] IS NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_PRCS_INSERT];  
  
IF @COUNT > 0  
BEGIN  
INSERT INTO [DBO].[REPORT_TRANSACTIONS] ([COD_TRAN],  
[COD_AC],  
[COD_COMP],  
[COD_SOURCE_TRAN],  
[POSWEB],  
[TRANSACTION_CODE],  
[TYPE_TRAN],  
[AMOUNT],  
[PLOTS],  
[TRANSACTION_DATE],  
[TRANSACTION_TYPE],  
[CPF_CNPJ],  
[NAME],  
[COD_EC],  
[SERIAL_EQUIP],  
[TID],  
[SITUATION],  
[COD_SITUATION],  
[BRAND],  
[NSU_EXT],  
[PAN],  
[COD_AFFILIATOR],  
[NAME_AFFILIATOR],  
[TRACKING_TRANSACTION],  
[DESCRIPTION],  
[COD_EC_TRANS],  
[TRANS_EC_NAME],  
[TRANS_EC_CPF_CNPJ],  
[CREATED_AT],  
[MODIFY_DATE],  
[COD_SALE_REP],  
[SALES_REPRESENTATIVE],  
[LINK_PAYMENT_SERVICE],  
[CUSTOMER_EMAIL],  [CUSTOMER_IDENTIFICATION],  
[PAYMENT_LINK_TRACKING])  
 SELECT  
  [#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_TRAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_AC]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_COMP]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SOURCE_TRAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[POSWEB]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_CODE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TYPE_TRAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[AMOUNT]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PLOTS]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_DATE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_TYPE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CPF_CNPJ]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SERIAL_EQUIP]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TID]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SITUATION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SITUATION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[BRAND]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NSU_EXT]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PAN]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_AFFILIATOR]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME_AFFILIATOR]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRACKING_TRANSACTION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[DESCRIPTION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC_TRANS]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANS_EC_NAME]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANS_EC_CPF_CNPJ]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CREATED_AT]  
    ,GETDATE()  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SALES_REP]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SALES_REP_NAME]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[LINK_PAYMENT_SERVICE]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CUSTOMER_EMAIL]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CUSTOMER_IDENTIFICATION]  
    ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PAYMENT_LINK_TRACKING]  
 FROM [#TB_REPORT_TRANSACTIONS_PRCS_INSERT];  
  
IF @@rowcount < 1  
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_INSERT]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 4;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;  
END;  
  
  
---------------------------------------------                        
--------------RECORDS UPDATE-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_PRCS].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_PRCS].[SITUATION]
   ,[VW_REPORT_TRANSACTIONS_PRCS].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]  
FROM [DBO].[VW_REPORT_TRANSACTIONS_PRCS]  
WHERE [VW_REPORT_TRANSACTIONS_PRCS].[REP_COD_TRAN] IS NOT NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE];  
  
IF @COUNT > 0  
BEGIN  
UPDATE [REPORT_TRANSACTIONS]  
SET [REPORT_TRANSACTIONS].[SITUATION] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[SITUATION]  
   ,[REPORT_TRANSACTIONS].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_SITUATION]  
   ,[REPORT_TRANSACTIONS].[MODIFY_DATE] = GETDATE()  
   ,[REPORT_TRANSACTIONS].AMOUNT = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[AMOUNT]
FROM [REPORT_TRANSACTIONS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]  
 ON ([REPORT_TRANSACTIONS].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_TRAN]);  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 4;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;  
END;  
  
  
END;  
END;  


-- FIM ST-1139 

 -- INICIO ST-943
  GO

IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL
    DROP VIEW [VW_REPORT_FULL_CASH_FLOW];
GO

CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]            
 /*----------------------------------------------------------------------------------------                          
 View Name: [VW_REPORT_FULL_CASH_FLOW]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                        Description                          
 -----------------------------------------------------------------------------------------                           
 Caike Uchôa                       V1         30/03/2020            mdr afiliador-pela parcela           
 Caike Uchôa                       V2         30/04/2020               add colunas produto ec    
 Caike Uchôa                       V3         29/07/2020                 add correção fee_affiliator
 Caike Uchôa                       V3         03/08/2020                   add QTY_DAYS_ANTECIP  
 Caike Uchôa                       V4         20/08/2020                Correção val liquid afiliador
 -----------------------------------------------------------------------------------------*/           
AS    
WITH CTE    
AS    
(SELECT --TOP(1000)                                       
  TRANSACTION_TITLES.TAX_INITIAL    
    ,TRANSACTION_TITLES.ANTICIP_PERCENT AS ANTECIP_EC    
    ,COALESCE(AFFILIATOR.[NAME], 'CELER') AS AFFILIATOR    
    ,[TRANSACTION_TYPE].CODE AS TRAN_TYPE    
    ,TRANSACTION_TITLES.PLOT    
    ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME) AS TRANSACTION_DATE    
    ,COMMERCIAL_ESTABLISHMENT.[NAME] AS MERSHANT    
    ,[TRANSACTION_TITLES].ACQ_TAX    
    ,[TRANSACTION_TITLES].PREVISION_PAY_DATE    
    ,[TRANSACTION_TITLES].PREVISION_RECEIVE_DATE    
    ,[TRANSACTION_TITLES].AMOUNT    
    ,[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT    
    ,[TRANSACTION].CODE AS NSU    
    ,[TRANSACTION].BRAND AS BRAND    
    ,ACQUIRER.[NAME] AS ACQUIRER    
    ,(CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE    
   ELSE 0    
  END) AS RATE    
    ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB    
    ,COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0) AS ANTECIP_AFF    
    ,COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0) AS MDR_AFF    
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)) AS EC    
    ,0 AS '0'    
    ,(dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
  (TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.ANTICIP_PERCENT, (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  ) - (CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE    
   ELSE 0    
  END)) AS EC_TARIFF    
    ,[TRANSACTION].PLOTS AS TOTAL_PLOTS    
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)) AS AFF_DISCOUNT    
    ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  (TRANSACTION_TITLES.AMOUNT),    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],    
  TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT)    
  , (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END    
  )) AS AFF_DISCOUNT_TARIFF    
    ,(    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
  (    
  TRANSACTION_TITLES.AMOUNT,    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],    
  TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  [TRANSACTION_TITLES_COST].ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  )    
  -    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  TRANSACTION_TITLES.AMOUNT,    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END))    
  ) AS AFF    
    ,((    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
  ((TRANSACTION_TITLES.AMOUNT),    
  COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],    
  TRANSACTION_TITLES.TAX_INITIAL),    
  TRANSACTION_TITLES.PLOT,    
  COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END    
  ))    
  -    
  dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
  (TRANSACTION_TITLES.AMOUNT),    
  TRANSACTION_TITLES.TAX_INITIAL,    
  TRANSACTION_TITLES.PLOT,    
  TRANSACTION_TITLES.ANTICIP_PERCENT,    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END))    
  )    
  + (CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE      
   ELSE 0    
  END) 
  -
  (CASE    
   WHEN TRANSACTION_TITLES.PLOT = 1 THEN [TRANSACTION_TITLES_COST].RATE_PLAN      
   ELSE 0    
  END)
  ) AS AFF_TARIFF    
    ,[TRANSACTION].COD_ASS_TR_COMP    
    ,TRANSACTION_TITLES.COD_TITLE    
    ,CE_DESTINY.COD_EC    
    ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR    
    ,BRANCH_EC.COD_BRANCH    
    ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH    
    ,[TRANSACTION].PAN    
    ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS 'CPF_CNPJ_ORIGINATOR'    
    ,CE_DESTINY.[NAME] AS 'EC_NAME_DESTINY'    
    ,CE_DESTINY.CPF_CNPJ AS 'CPF_CNPJ_DESTINY'    
    ,AFFILIATOR.CPF_CNPJ AS 'CPF_AFF'    
    ,(SELECT    
    EQUIPMENT.SERIAL    
   FROM ASS_DEPTO_EQUIP    
   INNER JOIN EQUIPMENT    
    ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP    
   WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)    
  AS SERIAL    
    ,[TRANSACTION_DATA_EXT].[value] AS 'EXTERNAL_NSU'    
    ,[TRANSACTION].CODE    
    ,[TRANSACTION].COD_TRAN    
    ,[COMPANY].COD_COMP    
    ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN AS REP_COD_TRAN    
    ,[TRANSACTION].COD_SITUATION    
    ,dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL, [TRANSACTION_TITLES].AMOUNT) AS LIQUID_MDR_EC    
    ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS    
  (    
  COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT, 0),    
  [TRANSACTION_TITLES].PLOT,    
  dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  ) AS ANTECIP_DISCOUNT_EC    
    ,CASE    
   WHEN [TRANSACTION].PLOTS = 1 THEN dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], [TRANSACTION].AMOUNT)    
   ELSE dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], [TRANSACTION].AMOUNT / [TRANSACTION].PLOTS)    
  END AS LIQUID_MDR_AFF    
    ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS    
  (    
  COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0),    
  [TRANSACTION_TITLES].PLOT,    
  dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,    
  [TRANSACTION_TITLES_COST].[PERCENTAGE]),    
  (CASE    
   WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)    
    
   ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP    
  END)    
  ) AS ANTECIP_DISCOUNT_AFF    
    ,CASE    
   WHEN (SELECT    
      COUNT(*)    
     FROM TRANSACTION_SERVICES WITH (NOLOCK)    
     WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN    
     AND TRANSACTION_SERVICES.COD_ITEM_SERVICE = 4)    
    > 0 THEN 1    
   ELSE 0    
  END AS SPLIT    
    ,EC_TRAN.COD_EC AS COD_EC_TRANS    
    ,EC_TRAN.NAME AS TRANS_EC_NAME    
    ,EC_TRAN.CPF_CNPJ AS TRANS_EC_CPF_CNPJ    
    ,[TRANSACTION_TITLES].[ASSIGNED]    
    ,[ASSIGN_FILE_TITLE].RETAINED_AMOUNT    
    ,[ASSIGN_FILE_TITLE].[ORIGINAL_DATE]    
    ,CAST([TRANSACTION_TITLES].CREATED_AT AS DATE) TRAN_TITTLE_DATE    
    ,CAST([TRANSACTION_TITLES].CREATED_AT AS TIME) TRAN_TITTLE_TIME    
    ,(SELECT TOP 1    
    [NAME]    
   FROM ACQUIRER(NOLOCK)    
   JOIN ASSIGN_FILE_ACQUIRE(NOLOCK) fType    
    ON fType.COD_AC = ACQUIRER.COD_AC    
    AND fType.COD_ASSIGN_FILE_MODEL = assignModel.COD_ASSIGN_FILE_MODEL)    
  [ASSIGNEE]    
    ,(SELECT    
    TRANSACTION_DATA_EXT.[value]    
   FROM TRANSACTION_DATA_EXT WITH (NOLOCK)    
   WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN    
   AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')    
  AS [AUTH_CODE]    
    ,[TRANSACTION].CREDITOR_DOCUMENT    
    ,(SELECT    
    TRANSACTION_DATA_EXT.[value]    
   FROM TRANSACTION_DATA_EXT WITH (NOLOCK)    
   WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN    
   AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')    
  AS ORDER_CODE    
    ,TRANSACTION_TITLES.COD_SITUATION [COD_SITUATION_TITLE]    
    ,[EQUIPMENT_MODEL].CODIGO AS MODEL_POS    
    ,[SEGMENTS].[NAME] AS SEGMENT_EC    
    ,[State].UF AS STATE_EC    
    ,[CITY].[NAME] AS CITY_EC    
    ,[NEIGHBORHOOD].[NAME] AS NEIGHBORHOOD_EC    
    ,[ADDRESS_BRANCH].COD_ADDRESS    
    ,SOURCE_TRANSACTION.DESCRIPTION AS TYPE_TRAN    
    ,EC_PROD.[NAME] AS [EC_PROD]    
    ,EC_PROD.CPF_CNPJ AS [EC_PROD_CPF_CNPJ]    
    ,TRAN_PROD.[NAME] AS [NAME_PROD]    
    ,SPLIT_PROD.[PERCENTAGE] AS [PERCENT_PARTICIP_SPLIT]    
 ,[TRANSACTION_TITLES_COST].RATE_PLAN  
 ,[TRANSACTION_TITLES].QTY_DAYS_ANTECIP  
 FROM [TRANSACTION_TITLES] WITH (NOLOCK)    
 INNER JOIN [TRANSACTION] WITH (NOLOCK)    
  ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN    
 LEFT JOIN [TRANSACTION_TITLES_COST] WITH (NOLOCK)    
  ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE    
 INNER JOIN [TRANSACTION_TYPE] WITH (NOLOCK)    
  ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE    
 LEFT JOIN AFFILIATOR WITH (NOLOCK)    
  ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR    
 INNER JOIN ASS_DEPTO_EQUIP WITH (NOLOCK)    
  ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL    
 INNER JOIN DEPARTMENTS_BRANCH WITH (NOLOCK)    
  ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH    
 INNER JOIN DEPARTMENTS WITH (NOLOCK)    
  ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS    
 INNER JOIN BRANCH_EC WITH (NOLOCK)    
  ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH    
 INNER JOIN COMMERCIAL_ESTABLISHMENT WITH (NOLOCK)    
  ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC    
 INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY WITH (NOLOCK)    
  ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC    
 INNER JOIN PRODUCTS_ACQUIRER WITH (NOLOCK)    
  ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ    
 INNER JOIN ACQUIRER WITH (NOLOCK)    
  ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC    
 LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)    
  ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN    
 INNER JOIN [dbo].[PROCESS_BG_STATUS] WITH (NOLOCK)    
  ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)    
 LEFT JOIN COMPANY WITH (NOLOCK)    
  ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP    
 LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] WITH (NOLOCK)    
  ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)    
 LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN WITH (NOLOCK)    
  ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC    
 LEFT JOIN [ASSIGN_FILE_TITLE](NOLOCK)    
  ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE    
  AND [ASSIGN_FILE_TITLE].ACTIVE = 1    
 LEFT JOIN ASSIGN_FILE(NOLOCK)    
  ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE    
 LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)    
  ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_FILE.COD_ASSIGN_FILE_MODEL    
 INNER JOIN [EQUIPMENT] WITH (NOLOCK)    
  ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP    
 INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)    
  ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL    
 INNER JOIN [SEGMENTS] WITH (NOLOCK)    
  ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG    
 INNER JOIN [ADDRESS_BRANCH] WITH (NOLOCK)    
  ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH    
  AND [ADDRESS_BRANCH].ACTIVE = 1    
 INNER JOIN [NEIGHBORHOOD] WITH (NOLOCK)    
  ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH    
 INNER JOIN [CITY] WITH (NOLOCK)    
  ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY    
 INNER JOIN [State] WITH (NOLOCK)    
  ON [State].COD_STATE = [CITY].COD_STATE    
 INNER JOIN SOURCE_TRANSACTION WITH (NOLOCK)    
  ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN    
 LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)    
  ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD    
  AND [TRAN_PROD].ACTIVE = 1    
 LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD WITH (NOLOCK)    
  ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD    
 LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD WITH (NOLOCK)    
  ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC    
 WHERE    
 --[TRANSACTION].COD_SITUATION IN (3, 6, 10)            
 [TRANSACTION].COD_SITUATION = 3    
 AND [TRANSACTION_TITLES].COD_SITUATION != 26    
 AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')    
 AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0    
 AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3    
 AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].CREATED_AT    
 AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION_TITLES].CREATED_AT    
 --AND DATEPART(YEAR,[TRANSACTION].CREATED_AT) = DATEPART(YEAR,GETDATE())        
 AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)    
SELECT    
 AFFILIATOR    
   ,MERSHANT    
   ,SERIAL    
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE    
   ,CAST(TRANSACTION_DATE AS TIME) AS TRANSACTION_TIME    
   ,NSU    
   ,EXTERNAL_NSU    
   ,TRAN_TYPE    
   ,TRANSACTION_AMOUNT    
   ,TOTAL_PLOTS AS QUOTA_TOTAL    
   ,AMOUNT AS 'QUOTA_AMOUNT'    
   ,PLOT AS QUOTA    
   ,ACQUIRER    
   ,ACQ_TAX AS 'MDR_ACQ'    
   ,BRAND    
   ,CTE.TAX_INITIAL AS 'MDR_EC'    
   ,ANTECIP_EC AS 'ANTICIP_EC'    
   ,MDR_AFF AS 'MDR_AFF'    
   ,ANTECIP_AFF AS 'ANTICIP_AFF'    
   ,LIQUID_SUB AS 'TO_RECEIVE_ACQ'    
   ,CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'    
   ,(LIQUID_SUB - AFF_DISCOUNT) AS 'NET_WITHOUT_FEE_SUB'    
   ,RATE_PLAN AS 'FEE_AFFILIATOR'    
   ,(LIQUID_SUB - AFF_DISCOUNT_TARIFF) AS 'NET_SUB'    
   ,AFF AS 'NET_WITHOUT_FEE_AFF'    
   ,AFF_TARIFF AS 'NET_AFF'    
   ,EC AS 'MERCHANT_WITHOUT_FEE'    
   ,CTE.RATE AS 'FEE_MERCHANT'    
   ,EC_TARIFF AS 'MERCHANT_NET'    
   ,CAST(PREVISION_PAY_DATE AS DATE) AS 'PREDICTION_PAY_DATE'    
   ,CASE    
  WHEN TRAN_TYPE = 'CREDITO' AND    
   (CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)) THEN 1    
  ELSE 0    
 END AS ANTECIPATED    
   ,COD_EC    
   ,CTE.COD_AFFILIATOR    
   ,COD_BRANCH    
   ,CTE.COD_DEPTO_BRANCH    
   ,PAN    
   ,CPF_CNPJ_ORIGINATOR    
   ,EC_NAME_DESTINY    
   ,CPF_CNPJ_DESTINY    
   ,CPF_AFF    
   ,CTE.CODE    
   ,CTE.COD_TRAN    
   ,CTE.COD_COMP    
   ,CTE.REP_COD_TRAN    
   ,CTE.COD_SITUATION    
   ,CTE.LIQUID_MDR_EC    
   ,CTE.ANTECIP_DISCOUNT_EC    
   ,CTE.LIQUID_MDR_AFF    
   ,CTE.ANTECIP_DISCOUNT_AFF    
   ,CTE.SPLIT    
   ,CTE.COD_EC_TRANS    
   ,CTE.TRANS_EC_NAME    
   ,CTE.TRANS_EC_CPF_CNPJ    
   ,CTE.[ASSIGNED]    
   ,CTE.RETAINED_AMOUNT    
   ,CTE.[ORIGINAL_DATE]    
   ,CTE.[ASSIGNEE]    
   ,CTE.TRAN_TITTLE_DATE    
   ,CTE.TRAN_TITTLE_TIME    
   ,CTE.AUTH_CODE    
   ,CTE.CREDITOR_DOCUMENT    
   ,CTE.ORDER_CODE    
   ,CTE.COD_TITLE    
   ,CTE.[COD_SITUATION_TITLE]    
   ,CTE.MODEL_POS    
   ,CTE.SEGMENT_EC    
   ,CTE.STATE_EC    
   ,CTE.CITY_EC    
   ,CTE.NEIGHBORHOOD_EC    
   ,CTE.COD_ADDRESS    
   ,CTE.TYPE_TRAN    
   ,CTE.NAME_PROD    
   ,CTE.EC_PROD    
   ,CTE.EC_PROD_CPF_CNPJ    
   ,CTE.PERCENT_PARTICIP_SPLIT  
   ,CTE.QTY_DAYS_ANTECIP  
FROM CTE    
    
    
	
-- FIM ST-943


-- INICIO ST-1232



IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'SALES_TYPE'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN

ALTER TABLE [REPORT_TRANSACTIONS_EXP] ADD SALES_TYPE VARCHAR(50)


END
 
GO

IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL
    DROP VIEW [VW_REPORT_TRANSACTIONS_EXP];
GO
  
CREATE VIEW [DBO].[VW_REPORT_TRANSACTIONS_EXP]                                         
/*----------------------------------------------------------------------------------------                            
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                            
Project.......: TKPP                            
------------------------------------------------------------------------------------------                            
Author                          VERSION        Date                            Description                            
------------------------------------------------------------------------------------------                            
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                  
Caike Uchôa                        v2       10/01/2020                         add CNAE        
Kennedy Alef                       v3       08/04/2020                      add link de pagamento  
Caike Uchôa                        v4       30/04/2020                        insert ec prod  
Caike Uchôa                        v5       17/08/2020                        Add SALES_TYPE
------------------------------------------------------------------------------------------*/                           
AS  
SELECT TOP (1000)  
 [TRANSACTION].[COD_TRAN]  
   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]  
   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]  
   ,[TRANSACTION].[PLOTS] AS [PLOTS]  
   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]  
   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]  
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]  
   ,[COMMERCIAL_ESTABLISHMENT].[NAME]  
   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]  
   ,[EQUIPMENT].[TID] AS [TID]  
   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]  
   ,[TRANSACTION].[BRAND]  
   ,[TRANSACTION].[PAN]  
   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]  
   , --TRANSACTION_DATA_EXT.NAME                                
 [TRANSACTION_DATA_EXT].[value] AS [TRAN_DATA_EXT_VALUE]  
   , --TRANSACTION_DATA_EXT.VALUE                               
 (SELECT  
   [TRANSACTION_DATA_EXT].[value]  
  FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)  
  WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]  
  AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')  
 AS [AUTH_CODE]  
   ,[ACQUIRER].[COD_AC]  
   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]  
   ,[TRANSACTION].[COMMENT] AS [COMMENT]  
   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]  
   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]  
   ,[AFFILIATOR].[COD_AFFILIATOR]  
   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]  
   ,(CASE  
  WHEN [SITUATION].[COD_SITUATION] = 3 AND  
   [PLAN].[COD_T_PLAN] = 2 THEN ([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], [ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE]) - [ASS_TAX_DEPART].[RATE])  
  WHEN [SITUATION].[COD_SITUATION] = 3 AND  
   [PLAN].[COD_T_PLAN] = 1 THEN ([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], 0) - [ASS_TAX_DEPART].[RATE])  
  ELSE 0  
 END) AS [NET_VALUE]  
   ,  
 --------------******------------                                
 [TRANSACTION].[COD_TTYPE]  
   ,[COMPANY].[COD_COMP]  
   ,[BRANCH_EC].[COD_EC]  
   ,[BRANCH_EC].[COD_BRANCH]  
   ,[State].[NAME] AS [STATE_NAME]  
   ,[CITY].[NAME] AS [CITY_NAME]  
   ,[SITUATION].[COD_SITUATION]  
   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]  
   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]  
   ,COALESCE([dbo].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]  
  
   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]  
   ,[TRANSACTION].[COD_SOURCE_TRAN]  
   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]  
   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]  
   ,[TRANSACTION].[CREATED_AT]  
   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]  
   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]  
   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]  
   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]  
   ,CASE  
  WHEN (SELECT  
     COUNT(*)  
    FROM [TRANSACTION_SERVICES]  
    WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]  
    AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)  
   > 0 THEN 1  
  ELSE 0  
 END AS [SPLIT]  
   ,[USERS].[IDENTIFICATION] AS [SALES_REP]  
   ,[USERS].[COD_USER] AS [COD_USER_REP]  
   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]  
   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]  
   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]  
   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]  
   ,[SEGMENTS].[CNAE]  
   ,[TRANSACTION].[COD_USER]  
   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]  
   ,CASE  
  WHEN (SELECT  
     COUNT(*)  
    FROM [TRANSACTION_SERVICES]  
    WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]  
    AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)  
   > 0 THEN 1  
  ELSE 0  
 END AS [LINK_PAYMENT]  
   ,[TRANSACTION].[CUSTOMER_EMAIL]  
   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]  
   ,CASE  
  WHEN (SELECT  
     COUNT(*)  
    FROM [TRANSACTION_SERVICES]  
    WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]  
    AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)  
   > 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]  
  ELSE NULL  
 END AS [PAYMENT_LINK_TRACKING]  
   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]  
   ,[EC_PROD].[NAME] AS [EC_PRODUCT]  
   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
FROM [TRANSACTION] WITH (NOLOCK)  
LEFT JOIN [dbo].[PROCESS_BG_STATUS]  
 ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])  
LEFT JOIN [ASS_DEPTO_EQUIP]  
 ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]  
LEFT JOIN [EQUIPMENT]  
 ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]  
LEFT JOIN [DEPARTMENTS_BRANCH]  
 ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]  
LEFT JOIN [DEPARTMENTS]  
 ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]  
LEFT JOIN [BRANCH_EC]  
 ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]  
LEFT JOIN [ADDRESS_BRANCH]  
 ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]  
LEFT JOIN [NEIGHBORHOOD]  
 ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]  
LEFT JOIN [ASS_TAX_DEPART]  
 ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]  
LEFT JOIN [PLAN]  
 ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]  
LEFT JOIN [CITY]  
 ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]  
LEFT JOIN [State]  
 ON [State].[COD_STATE] = [CITY].[COD_STATE]  
LEFT JOIN [COMMERCIAL_ESTABLISHMENT]  
 ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]  
LEFT JOIN [COMPANY]  
 ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]  
LEFT JOIN [TRANSACTION_TYPE]  
 ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]  
LEFT JOIN [SITUATION]  
 ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]  
LEFT JOIN [TRADUCTION_SITUATION]  
 ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]  
LEFT JOIN [SEGMENTS]  
 ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]  
LEFT JOIN [dbo].[REPORT_TRANSACTIONS_EXP]  
 ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])  
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)  
 ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]  
LEFT JOIN [AFFILIATOR]  
 ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]  
LEFT JOIN [POSWEB_DATA_TRANSACTION]  
 ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]  
LEFT JOIN [dbo].[SOURCE_TRANSACTION] WITH (NOLOCK)  
 ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])  
LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)  
 ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]  
LEFT JOIN [SALES_REPRESENTATIVE]  
 ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]  
LEFT JOIN [USERS]  
 ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]  
LEFT JOIN [USERS] AS [USER_TRAN]  
 ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]  
LEFT JOIN [ASS_TR_TYPE_COMP]  
 ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]  
LEFT JOIN [ACQUIRER]  
 ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]  
INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)  
 ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]  
LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)  
 ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD  
LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)  
 ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC  
LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK) 
 ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [ADDRESS_BRANCH].[ACTIVE] = 1  
AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0  
AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1  
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')  
AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT];  
  
  GO

IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
    DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP];
GO  
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_EXP]                          
     
/*****************************************************************************************************************    
----------------------------------------------------------------------------------------                          
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                          
 Project.......: TKPP                          
 ------------------------------------------------------------------------------------------                          
 Author                          VERSION        Date                            Description                          
 ------------------------------------------------------------------------------------------                          
 Fernando Henrique F.             V1       13/12/2018                          Creation                           
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                    
 Caike Uchôa                      V3       15/08/2019                       inserting coluns                  
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                
 Caike Uchôa                      V5       20/01/2020                            ADD CNAE    
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento  
 Caike Uchôa                      v7       30/04/2020                        insert ec prod  
 Caike Uchôa                      V8       06/08/2020                    Add [AMOUNT] to reprocess
 Caike Uchôa                      V9       17/08/2020                        Add SALES_TYPE
 ------------------------------------------------------------------------------------------    
*****************************************************************************************************************/                         
                         
AS    
BEGIN  
    
    DECLARE @COUNT INT= 0;  
    
    
    
    
    
    BEGIN  
  
---------------------------------------------                        
--------------RECORDS INSERT-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ] 
   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE] INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];  
  
IF @COUNT > 0  
BEGIN  
INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],  
[TRANSACTION_CODE],  
[AMOUNT],  
[PLOTS],  
[TRANSACTION_DATE],  
[TRANSACTION_TYPE],  
[CPF_CNPJ],  
[NAME],  
[SERIAL_EQUIP],  
[TID],  
[SITUATION],  
[BRAND],  
[PAN],  
[TRAN_DATA_EXT],  
[TRAN_DATA_EXT_VALUE],  
[AUTH_CODE],  
[COD_AC],  
[NAME_ACQUIRER],  
[COMMENT],  
[TAX],  
[ANTICIPATION],  
[COD_AFFILIATOR],  
[NAME_AFFILIATOR],  
[NET_VALUE],  
[COD_COMP],  
[COD_EC],  
[COD_BRANCH],  
[STATE_NAME],  
[CITY_NAME],  
[COD_SITUATION],  
[COD_DEPTO_BRANCH],  
[GROSS_VALUE_AGENCY],  
[NET_VALUE_AGENCY],  
[TYPE_TRAN],  
[COD_SOURCE_TRAN],  
[POSWEB],  
[SEGMENTS_NAME],  
[CREATED_TRANSACTION_DATE],  
[COD_EC_TRANS],  
[TRANS_EC_NAME],  
[TRANS_EC_CPF_CNPJ],  
[SPLIT],  
[SALES_REP],  
[COD_USER_REP],  
[MODIFY_DATE],  
[CREDITOR_DOCUMENT],  
[COD_SALES_REP],  
[MODEL_POS],  
[CARD_NAME],  
[CNAE],  
[COD_USER],  
[NAME_USER],  
[LINK_PAYMENT_SERVICE],  
[CUSTOMER_EMAIL],  
[CUSTOMER_IDENTIFICATION],  
[PAYMENT_LINK_TRACKING],  
[NAME_PRODUCT_EC],  
[EC_PRODUCT],  
[EC_PRODUCT_CPF_CNPJ],
[SALES_TYPE]
)  
 (SELECT  
  [TEMP].[COD_TRAN]  
    ,[TEMP].[TRANSACTION_CODE]  
    ,[TEMP].[AMOUNT]  
    ,[TEMP].[PLOTS]  
    ,[TEMP].[TRANSACTION_DATE]  
    ,[TEMP].[TRANSACTION_TYPE]  
    ,[TEMP].[CPF_CNPJ]  
    ,[TEMP].[NAME]  
    ,[TEMP].[SERIAL_EQUIP]  
    ,[TEMP].[TID]  
    ,[TEMP].[SITUATION]  
    ,[TEMP].[BRAND]  
    ,[TEMP].[PAN]  
    ,[TEMP].[TRAN_DATA_EXT]  
    ,[TEMP].[TRAN_DATA_EXT_VALUE]  
    ,[TEMP].[AUTH_CODE]  
    ,[TEMP].[COD_AC]  
    ,[TEMP].[NAME_ACQUIRER]  
    ,[TEMP].[COMMENT]  
    ,[TEMP].[TAX]  
    ,[TEMP].[ANTICIPATION]  
    ,[TEMP].[COD_AFFILIATOR]  
    ,[TEMP].[NAME_AFFILIATOR]  
    ,[TEMP].[NET_VALUE]  
    ,[TEMP].[COD_COMP]  
    ,[TEMP].[COD_EC]  
    ,[TEMP].[COD_BRANCH]  
    ,[TEMP].[STATE_NAME]  
    ,[TEMP].[CITY_NAME]  
    ,[TEMP].[COD_SITUATION]  
    ,[TEMP].[COD_DEPTO_BRANCH]  
    ,[TEMP].[GROSS_VALUE_AGENCY]  
    ,[TEMP].[NET_VALUE_AGENCY]  
    ,[TEMP].[TYPE_TRAN]  
    ,[TEMP].[COD_SOURCE_TRAN]  
    ,[TEMP].[POSWEB]  
    ,[TEMP].[SEGMENTS_NAME]  
    ,[TEMP].[CREATED_AT]  
    ,[TEMP].[COD_EC_TRANS]  
    ,[TEMP].[TRANS_EC_NAME]  
    ,[TEMP].[TRANS_EC_CPF_CNPJ]  
    ,[TEMP].[SPLIT]  
    ,[SALES_REP]  
    ,[COD_USER_REP]  
    ,GETDATE()  
    ,[CREDITOR_DOCUMENT]  
    ,[COD_SALES_REP]  
    ,[TEMP].[MODEL_POS]  
    ,[CARD_NAME]  
    ,[CNAE]  
    ,[COD_USER]  
    ,[NAME_USER]  
    ,[LINK_PAYMENT]  
    ,[CUSTOMER_EMAIL]  
    ,[CUSTOMER_IDENTIFICATION]  
    ,[TEMP].[PAYMENT_LINK_TRACKING]  
    ,[TEMP].[NAME_PRODUCT_EC]  
    ,[TEMP].[EC_PRODUCT]  
    ,[TEMP].[EC_PRODUCT_CPF_CNPJ]  
	,[TEMP].[SALES_TYPE]
 FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);  
  
IF @@rowcount < 1  
THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;  
END;  
  
  
---------------------------------------------                        
--------------RECORDS UPDATE-----------------                        
---------------------------------------------                          
SELECT  
 [VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]  
   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]  
WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;  
  
SELECT  
 @COUNT = COUNT(*)  
FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];  
  
IF @COUNT > 0  
BEGIN  
UPDATE [REPORT_TRANSACTIONS_EXP]  
SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]  
   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]  
   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]  
   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()  
   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]  
   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]  
   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
FROM [REPORT_TRANSACTIONS_EXP]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
 ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;  
  
UPDATE [PROCESS_BG_STATUS]  
SET [STATUS_PROCESSED] = 1  
   ,[MODIFY_DATE] = GETDATE()  
FROM [PROCESS_BG_STATUS]  
INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]  
 ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])  
WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;  
  
IF @@rowcount < 1  
THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;  
END;  
END;  
END;  
  

  GO

IF OBJECT_ID('SP_REPORT_TRANSACTIONS_EXP') IS NOT NULL
    DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP];
GO  

CREATE PROCEDURE [DBO].[SP_REPORT_TRANSACTIONS_EXP]  
 /***************************************************************************************  
----------------------------------------------------------------------------------------  
 Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]  
 Project.......: TKPP  
 ------------------------------------------------------------------------------------------  
 Author               VERSION         Date                     Description  
 ------------------------------------------------------------------------------------------  
 Fernando Henrique F.   V1         13/12/2018               Creation  
 Kennedy Alef           V2         16/01/2018               Modify  
 Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT  
 Caike Uchôa            V3         15/08/2019               inserting coluns  
 Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC  
 Caike Uchôa            V5         20/01/2020               ADD CNAE  
 Kennedy Alef           v3         08/04/2020               add link de pagamento  
 Caike Uchôa            v4         30/04/2020               insert ec prod  
 Caike Uchôa            v5         17/08/2020               Add SALES_TYPE
 ---------------------------------------------           ---------------------------------------------  
********************************************************************************************/  
(  
 @CODCOMP VARCHAR(10),  
 @INITIAL_DATE DATETIME,  
 @FINAL_DATE DATETIME,  
 @EC VARCHAR(10),  
 @BRANCH VARCHAR(10),  
 @DEPART VARCHAR(10),  
 @TERMINAL VARCHAR(100),  
 @STATE VARCHAR(100),  
 @CITY VARCHAR(100),  
 @TYPE_TRAN VARCHAR(10),  
 @SITUATION VARCHAR(10),  
 @NSU VARCHAR(100) = NULL,  
 @NSU_EXT VARCHAR(100) = NULL,  
 @BRAND VARCHAR(50) = NULL,  
 @PAN VARCHAR(50) = NULL,  
 @COD_AFFILIATOR INT = NULL,  
 @TRACKING_TRANSACTION VARCHAR(100) = NULL,  
 @DESCRIPTION VARCHAR(100) = NULL,  
 @SPOT_ELEGIBLE INT = 0,  
 @COD_ACQ INT = NULL,  
 @SOURCE_TRAN INT = NULL,  
 @POSWEB INT = 0,  
 @SPLIT INT = NULL,  
 @INITIAL_VALUE DECIMAL(22, 6) = NULL,  
 @FINAL_VALUE DECIMAL(22, 6) = NULL,  
 @COD_SALES_REP INT = NULL)  
AS  
BEGIN  
    DECLARE @QUERY_BASIS NVARCHAR(MAX)= '';  
    DECLARE @TIME_FINAL_DATE TIME;  
SET NOCOUNT ON;  
SET ARITHABORT ON;  
    BEGIN  
SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');  
--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));  
--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )  
SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);  
    IF(@TIME_FINAL_DATE = '00:00:00')  
SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));  
SET @QUERY_BASIS = '  
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE  
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT  
      ,[REPORT_TRANSACTIONS_EXP].PLOTS  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE  
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE  
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ  
      ,[REPORT_TRANSACTIONS_EXP].NAME  
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP  
      ,[REPORT_TRANSACTIONS_EXP].TID  
      ,[REPORT_TRANSACTIONS_EXP].SITUATION  
      ,[REPORT_TRANSACTIONS_EXP].BRAND  
      ,[REPORT_TRANSACTIONS_EXP].PAN  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE  
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT  
   ,(  
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT  
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN  
      ) AS [AUTH_CODE]  
      ,[REPORT_TRANSACTIONS_EXP].COD_AC  
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER  
      ,[REPORT_TRANSACTIONS_EXP].COMMENT  
      ,[REPORT_TRANSACTIONS_EXP].TAX  
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION  
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR  
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE  
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY  
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY  
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN  
      ,[REPORT_TRANSACTIONS_EXP].POSWEB  
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME  
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME  
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME  
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME  
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ  
      ,[REPORT_TRANSACTIONS_EXP].SPLIT  
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]  
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT  
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP  
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS  
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME  
      ,[REPORT_TRANSACTIONS_EXP].CNAE  
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL  
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION  
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING  
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]  
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]  
	  ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]  
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP  
    ';  
    IF @INITIAL_DATE IS NOT NULL AND @FINAL_DATE IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');  
IF @EC IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');  
IF @BRANCH IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');  
IF @DEPART IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');  
IF LEN(@TERMINAL) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');  
IF LEN(@STATE) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');  
IF LEN(@CITY) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');  
IF LEN(@TYPE_TRAN) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');  
IF LEN(@SITUATION) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');  
IF LEN(@BRAND) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');  
IF LEN(@PAN) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');  
IF LEN(@NSU) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');  
IF LEN(@NSU_EXT) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');  
--ELSE  
-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL  
-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');  
IF @COD_AFFILIATOR IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');  
IF LEN(@TRACKING_TRANSACTION) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');  
IF LEN(@DESCRIPTION) > 0  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');  
IF @SPOT_ELEGIBLE = 1  
BEGIN  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE  
        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');  
    END;  
IF @COD_ACQ IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');  
IF @SOURCE_TRAN IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');  
IF @POSWEB = 1  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');  
IF (@INITIAL_VALUE > 0)  
 AND (@FINAL_VALUE >= @INITIAL_VALUE)  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');  
IF (@SPLIT = 1)  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');  
IF @COD_SALES_REP IS NOT NULL  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');  
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');  
--SELECT @QUERY_BASIS  
EXEC [sp_executesql] @QUERY_BASIS  
     ,N'  
   @CODCOMP VARCHAR(10),  
   @INITIAL_DATE DATETIME,  
   @FINAL_DATE DATETIME,  
   @EC int,  
   @BRANCH int,  
   @DEPART int,  
   @TERMINAL varchar(14),  
   @STATE varchar(25),  
   @CITY varchar(40),  
   @TYPE_TRAN VARCHAR(10),  
   @SITUATION VARCHAR(10),  
   @NSU varchar(100),  
   @NSU_EXT varchar(100),  
   @BRAND varchar(50),  
   @COD_AFFILIATOR INT,  
   @PAN VARCHAR(50),  
   @SOURCE_TRAN INT,  
   @POSWEB INT,  
   @INITIAL_VALUE DECIMAL(22,6),  
   @FINAL_VALUE DECIMAL(22,6),  
   @COD_SALES_REP INT,  
   @COD_ACQ INT  
   '  
     ,@CODCOMP = @CODCOMP  
     ,@INITIAL_DATE = @INITIAL_DATE  
     ,@FINAL_DATE = @FINAL_DATE  
     ,@EC = @EC  
     ,@BRANCH = @BRANCH  
     ,@DEPART = @DEPART  
     ,@TERMINAL = @TERMINAL  
     ,@STATE = @STATE  
     ,@CITY = @CITY  
     ,@TYPE_TRAN = @TYPE_TRAN  
     ,@SITUATION = @SITUATION  
     ,@NSU = @NSU  
     ,@NSU_EXT = @NSU_EXT  
     ,@BRAND = @BRAND  
     ,@PAN = @PAN  
     ,@COD_AFFILIATOR = @COD_AFFILIATOR  
     ,@SOURCE_TRAN = @SOURCE_TRAN  
     ,@POSWEB = @POSWEB  
     ,@INITIAL_VALUE = @INITIAL_VALUE  
     ,@FINAL_VALUE = @FINAL_VALUE  
     ,@COD_SALES_REP = @COD_SALES_REP  
     ,@COD_ACQ = @COD_ACQ;  
END;  
END;


GO 

SELECT 
[TRANSACTION].COD_TRAN,
ISNULL(PRODUCTS_ACQUIRER.[NAME],'') AS PROD_ACQ
INTO #TEMP_EXP_TOTAL
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN PRODUCTS_ACQUIRER 
 ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [TRANSACTION].CREATED_AT > '2020-01-01 00:00:00'


go

CREATE TABLE #DELETE
(
COD_TRAN INT,
PROD_ACQ VARCHAR(200)
)

DECLARE @CONT INT;

SET @CONT = 0;

WHILE @CONT < 100
BEGIN 

INSERT INTO #DELETE
SELECT TOP 25000 COD_TRAN,PROD_ACQ FROM #TEMP_EXP_TOTAL

UPDATE 
REPORT_TRANSACTIONS_EXP 
SET SALES_TYPE = #DELETE.PROD_ACQ
FROM REPORT_TRANSACTIONS_EXP
JOIN #DELETE ON #DELETE.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
WHERE REPORT_TRANSACTIONS_EXP.COD_TRAN IN (
SELECT COD_TRAN FROM #DELETE
) 

DELETE FROM #TEMP_EXP_TOTAL WHERE COD_TRAN IN (SELECT COD_TRAN FROM #DELETE)

DELETE FROM #DELETE

SELECT @CONT AS QTY;

SET @CONT = @CONT + 1;

END

DROP TABLE #TEMP_EXP_TOTAL
DROP TABLE #DELETE






--FIM ST-1232