IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'TRANSACTION_TITLES'
	AND object_id = OBJECT_ID(N'COD_FIN_CALENDAR'))
BEGIN
ALTER TABLE [TRANSACTION_TITLES]
ADD [COD_FIN_CALENDAR] INT;
END;
GO


IF OBJECT_ID('FINANCE_CALENDAR') IS NOT NULL
DROP TABLE [FINANCE_CALENDAR];
GO

CREATE TABLE [FINANCE_CALENDAR](
	[COD_FIN_CALENDAR]          INT IDENTITY PRIMARY KEY, 
	[PREVISION_PAY_DATE]        DATETIME, 
	[PLOT_VALUE_PAYMENT]        DECIMAL(22, 6), 
	[COD_SITUATION]             INT, 
	[COD_BK_EC]                 INT, 
	[COD_BANK]                  INT, 
	[CODE_BANK]                 VARCHAR(100), 
	[PRIORITY]                  INT, 
	[BANK]                      VARCHAR(255), 
	[AGENCY]                    VARCHAR(100), 
	[DIGIT_AGENCY]              VARCHAR(10), 
	[ACCOUNT]                   VARCHAR(100), 
	[DIGIT_ACCOUNT]             VARCHAR(100), 
	[COD_TYPE_ACCOUNT]          INT, 
	[ACCOUNT_TYPE]              VARCHAR(100), 
	[COD_OPER_BANK]             INT, 
	[OPERATION_CODE]            VARCHAR(100), 
	[OPERATION_DESC]            VARCHAR(100), 
	[ACTIVE]                    INT DEFAULT 1, 
	[IS_LOCK]                   INT, 
	[IS_ASSIGNMENT]             INT, 
	[ASSIGNMENT_NAME]           VARCHAR(255), 
	[ASSIGNMENT_IDENTIFICATION] VARCHAR(14), 
	[COD_EC]                    INT, 
	[COD_COMP]                  INT, 
	[COMMERCIAL_CODE]           VARCHAR(100), 
	[EC_CPF_CNPJ]               VARCHAR(14), 
	[EC_NAME]                   VARCHAR(100), 
	[TYPE_ESTAB]                VARCHAR(100), 
	[TRADING_NAME]              VARCHAR(100), 
	[COD_AFFILIATOR]            INT, 
	[AFFILIATOR_NAME]           VARCHAR(100), 
	[AFFILIATOR_CPF_CNPJ]       VARCHAR(100), 
	[COD_FIN_SCH_FILE]          INT, 
	[COD_PAY_PROT]              INT, 
	[PAYMENT_DATE]              DATETIME, 
	CONSTRAINT [FK_FINANCE_CALENDAR_SITUATION] FOREIGN KEY([COD_SITUATION]) REFERENCES [SITUATION]([COD_SITUATION]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_BANK_DETAILS_EC] FOREIGN KEY([COD_BK_EC]) REFERENCES [BANK_DETAILS_EC]([COD_BK_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_BANK] FOREIGN KEY([COD_BANK]) REFERENCES [BANKS]([COD_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_ACCOUNT] FOREIGN KEY([COD_TYPE_ACCOUNT]) REFERENCES [ACCOUNT_TYPE]([COD_TYPE_ACCOUNT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_OPERATION_BANK] FOREIGN KEY([COD_OPER_BANK]) REFERENCES [OPERATION_BANK]([COD_OPER_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_COMMERCIAL] FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_AFFILIATOR] FOREIGN KEY([COD_AFFILIATOR]) REFERENCES [AFFILIATOR]([COD_AFFILIATOR]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_FILE] FOREIGN KEY([COD_FIN_SCH_FILE]) REFERENCES [FINANCE_SCHEDULE_FILE]([COD_FIN_SCH_FILE]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_PROTOCOL] FOREIGN KEY([COD_PAY_PROT]) REFERENCES [PROTOCOLS]([COD_PAY_PROT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_COMP] FOREIGN KEY([COD_COMP]) REFERENCES [COMPANY]([COD_COMP]));
GO


IF OBJECT_ID('FINANCE_CALENDAR_HIST') IS NOT NULL
DROP TABLE [FINANCE_CALENDAR_HIST];
GO

CREATE TABLE [FINANCE_CALENDAR_HIST](
	[COD_FIN_CALENDAR_HIST]     INT IDENTITY PRIMARY KEY, 
	[CREATED_AT]                DATETIME DEFAULT current_timestamp, 
	[COD_USER]                  INT, 
	[COD_FIN_CALENDAR]          INT, 
	[PREVISION_PAY_DATE]        DATETIME, 
	[PLOT_VALUE_PAYMENT]        DECIMAL(22, 6), 
	[COD_SITUATION]             INT, 
	[COD_BK_EC]                 INT, 
	[COD_BANK]                  INT, 
	[CODE_BANK]                 VARCHAR(100), 
	[PRIORITY]                  INT, 
	[BANK]                      VARCHAR(255), 
	[AGENCY]                    VARCHAR(100), 
	[DIGIT_AGENCY]              VARCHAR(10), 
	[ACCOUNT]                   VARCHAR(100), 
	[DIGIT_ACCOUNT]             VARCHAR(100), 
	[COD_TYPE_ACCOUNT]          INT, 
	[ACCOUNT_TYPE]              VARCHAR(100), 
	[COD_OPER_BANK]             INT, 
	[OPERATION_CODE]            VARCHAR(100), 
	[OPERATION_DESC]            VARCHAR(100), 
	[ACTIVE]                    INT DEFAULT 1, 
	[IS_LOCK]                   INT, 
	[IS_ASSIGNMENT]             INT, 
	[ASSIGNMENT_NAME]           VARCHAR(255), 
	[ASSIGNMENT_IDENTIFICATION] VARCHAR(14), 
	[COD_EC]                    INT, 
	[COD_COMP]                  INT, 
	[COMMERCIAL_CODE]           VARCHAR(100), 
	[EC_CPF_CNPJ]               VARCHAR(14), 
	[EC_NAME]                   VARCHAR(100), 
	[TYPE_ESTAB]                VARCHAR(100), 
	[TRADING_NAME]              VARCHAR(100), 
	[COD_AFFILIATOR]            INT, 
	[AFFILIATOR_NAME]           VARCHAR(100), 
	[AFFILIATOR_CPF_CNPJ]       VARCHAR(100), 
	[COD_FIN_SCH_FILE]          INT, 
	[COD_PAY_PROT]              INT, 
	[PAYMENT_DATE]              DATETIME, 
	[HAS_UNLINK]                INT DEFAULT 0, 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_SITUATION] FOREIGN KEY([COD_SITUATION]) REFERENCES [SITUATION]([COD_SITUATION]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_BANK_DETAILS_EC] FOREIGN KEY([COD_BK_EC]) REFERENCES [BANK_DETAILS_EC]([COD_BK_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_BANK] FOREIGN KEY([COD_BANK]) REFERENCES [BANKS]([COD_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_ACCOUNT] FOREIGN KEY([COD_TYPE_ACCOUNT]) REFERENCES [ACCOUNT_TYPE]([COD_TYPE_ACCOUNT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_OPERATION_BANK] FOREIGN KEY([COD_OPER_BANK]) REFERENCES [OPERATION_BANK]([COD_OPER_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_COMMERCIAL] FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_AFFILIATOR] FOREIGN KEY([COD_AFFILIATOR]) REFERENCES [AFFILIATOR]([COD_AFFILIATOR]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_FILE] FOREIGN KEY([COD_FIN_SCH_FILE]) REFERENCES [FINANCE_SCHEDULE_FILE]([COD_FIN_SCH_FILE]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_PROTOCOL] FOREIGN KEY([COD_PAY_PROT]) REFERENCES [PROTOCOLS]([COD_PAY_PROT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_USER] FOREIGN KEY([COD_USER]) REFERENCES [USERS]([COD_USER]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_COMP] FOREIGN KEY([COD_COMP]) REFERENCES [COMPANY]([COD_COMP]));
GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'TRANSACTION_TITLES'
	AND object_id = OBJECT_ID(N'COD_FIN_CALENDAR'))
BEGIN
ALTER TABLE [TRANSACTION_TITLES]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'TARIFF_EC'
	AND object_id = OBJECT_ID(N'COD_FIN_CALENDAR'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
	AND object_id = OBJECT_ID(N'COD_FIN_CALENDAR'))
BEGIN
ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
	AND object_id = OBJECT_ID(N'IS_PARTIAL'))
BEGIN
ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD [IS_PARTIAL] INT DEFAULT 0;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'[TARIFF_EC]'
	AND object_id = OBJECT_ID(N'IS_PARTIAL'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [IS_PARTIAL] INT DEFAULT 0;
END;

GO
GO

UPDATE [RELEASE_ADJUSTMENTS]
SET [IS_PARTIAL] = 0;

GO

UPDATE [TARIFF_EC]
SET [IS_PARTIAL] = 0;

GO

ALTER TABLE [TRANSACTION_TITLES]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);

GO

ALTER TABLE [TARIFF_EC]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);

GO

ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);
GO

CREATE NONCLUSTERED INDEX [IX_TARIFF_EC_COD_SITUATION_COD_FIN_CALENDAR] ON [DBO].[TARIFF_EC]([COD_SITUATION]) 
	INCLUDE([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_RELEASE_ADJUSTMENTS_COD_SITUATION_COD_FIN_CALENDAR] ON [DBO].[RELEASE_ADJUSTMENTS]([COD_SITUATION]) 
	INCLUDE([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_TRANSACTION_TITLES_COD_SITUATION_COD_FIN_CALENDAR] ON [DBO].[TRANSACTION_TITLES]([COD_SITUATION]) 
	INCLUDE([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_TITLES_[COD_FIN_CALENDAR_COD_SITUATION] ON [DBO].[TRANSACTION_TITLES]([COD_FIN_CALENDAR]) 
	INCLUDE([COD_SITUATION]);

GO

CREATE NONCLUSTERED INDEX [IX_FIN_CALENDAR_EC_ACTIVE] ON [DBO].[FINANCE_CALENDAR]([ACTIVE], [COD_EC]);

GO

CREATE NONCLUSTERED INDEX [IX_TARIFF_EC_COD_FIN_CALENDAR] ON [DBO].[TARIFF_EC]([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_RELEASE_ADJUSTMENTS_COD_FIN_CALENDAR] ON [DBO].[RELEASE_ADJUSTMENTS]([COD_FIN_CALENDAR]);

GO

IF EXISTS (SELECT
		*
	FROM [sys].[VIEWS] AS [V]
	INNER JOIN [sys].[SCHEMAS] AS [S]
		ON [V].schema_id = [S].schema_id
	WHERE [S].[NAME] = 'dbo'
	AND [V].[NAME] = 'VW_TITLES')
BEGIN
DROP VIEW [VW_TITLES];
END;
GO

CREATE VIEW [VW_TITLES]
AS
WITH CTE_TITLES_CERC
AS
(SELECT
		CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
		CASE
			WHEN [TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL THEN 1
			ELSE 1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
					WHEN [TRANSACTION_TITLES].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE])
					ELSE [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]
				END, ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) / 100)
		END) - (CASE
			WHEN [TRANSACTION_TITLES].[PLOT] = 1 THEN [TRANSACTION_TITLES].[RATE]
			ELSE 0
		END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[TRANSACTION_TITLES].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[TRANSACTION_TITLES].[COD_TITLE]
	   ,[TRANSACTION].[COD_TRAN]
	   ,CAST([TRANSACTION_TITLES].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[TRANSACTION_TITLES].[COD_SITUATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,CASE
			WHEN [AFFILIATOR].[COD_SITUATION] = 24 THEN 1
			WHEN [COMMERCIAL_ESTABLISHMENT].[COD_SITUATION] = 24 THEN 1
			ELSE 0
		END AS [BLOCKED_FINANCE]
	   ,1 AS [IS_LOCKED]
	   ,'TITLE' AS [TYPE]
	FROM [TRANSACTION_TITLES](NOLOCK)
	JOIN [TRANSACTION](NOLOCK)
		ON [TRANSACTION].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]
	JOIN [BRAND](NOLOCK)
		ON [TRANSACTION].[BRAND] = [BRAND].[NAME]
		AND [TRANSACTION].[COD_TTYPE] = [BRAND].[COD_TTYPE]
	JOIN [BANK_DETAILS_EC](NOLOCK)
		ON [BANK_DETAILS_EC].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [IS_CERC] = 1
	JOIN [BANK_DETAILS_CERC_INFO](NOLOCK)
		ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
		AND [BANK_DETAILS_CERC_INFO].[COD_BRAND] = [BRAND].[COD_BRAND]
	JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK)
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
	LEFT JOIN [AFFILIATOR](NOLOCK)
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TRANSACTION_TITLES].[COD_SITUATION] = 4),
CTE_TITLES_EC
AS
(SELECT
		CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
		CASE
			WHEN [TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL THEN 1
			ELSE 1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
					WHEN [TRANSACTION_TITLES].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE])
					ELSE [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]
				END, ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) / 100)
		END) - (CASE
			WHEN [TRANSACTION_TITLES].[PLOT] = 1 THEN [TRANSACTION_TITLES].[RATE]
			ELSE 0
		END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[TRANSACTION_TITLES].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[TRANSACTION_TITLES].[COD_TITLE]
	   ,[TRANSACTION].[COD_TRAN]
	   ,CAST([TRANSACTION_TITLES].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[TRANSACTION_TITLES].[COD_SITUATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,CASE
			WHEN [AFFILIATOR].[COD_SITUATION] = 24 THEN 1
			WHEN [COMMERCIAL_ESTABLISHMENT].[COD_SITUATION] = 24 THEN 1
			ELSE 0
		END AS [BLOCKED_FINANCE]
	   ,0 AS [IS_LOCKED]
	   ,'TITLE' AS [TYPE]
	FROM [TRANSACTION_TITLES](NOLOCK)
	JOIN [TRANSACTION](NOLOCK)
		ON [TRANSACTION].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]
	JOIN [BANK_DETAILS_EC](NOLOCK)
		ON [BANK_DETAILS_EC].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [IS_CERC] = 0
	JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK)
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
	LEFT JOIN [AFFILIATOR](NOLOCK)
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [CTE_TITLES_CERC] AS [LOCK]
		ON [LOCK].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
	WHERE [TRANSACTION_TITLES].[COD_SITUATION] = 4
	AND [LOCK].[COD_TITLE] IS NULL),
CTE_ALL
AS
(SELECT
		*
	FROM [CTE_TITLES_CERC]
	UNION ALL
	SELECT
		*
	FROM [CTE_TITLES_EC])
SELECT
	[COD_EC]
   ,[COD_BRANCH]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE]
   ,[COD_TRAN]
   ,[COD_SITUATION]
   ,[COD_AFFILIATOR]
   ,[BLOCKED_FINANCE]
   ,[IS_LOCKED]
   ,[type]
FROM [CTE_ALL];
GO


IF EXISTS (SELECT
		*
	FROM [sys].[VIEWS] AS [V]
	INNER JOIN [sys].[SCHEMAS] AS [S]
		ON [V].schema_id = [S].schema_id
	WHERE [S].[NAME] = 'dbo'
	AND [V].[NAME] = 'VW_ADJ_TFF')
BEGIN
DROP VIEW [VW_ADJ_TFF];
END;

GO

CREATE VIEW [VW_ADJ_TFF]
AS
WITH CTE
AS
(SELECT
		[RELEASE_ADJUSTMENTS].[COD_REL_ADJ] AS 'PK'
	   ,'AJUSTE' AS [TYPE]
	   ,[EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[dbo].[RELEASE_ADJUSTMENTS].VALUE AS [PLOT_VALUE_PAYMENT]
	   ,CAST([RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[SITUATION].[COD_SITUATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	FROM [dbo].[RELEASE_ADJUSTMENTS]
	INNER JOIN [dbo].[COMMERCIAL_ESTABLISHMENT] AS [EC]
		ON [EC].[COD_EC] = [RELEASE_ADJUSTMENTS].[COD_EC]
	INNER JOIN [dbo].[SITUATION]
		ON [SITUATION].[COD_SITUATION] = [RELEASE_ADJUSTMENTS].[COD_SITUATION]
	INNER JOIN [dbo].[BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [EC].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [EC].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [BANK_DETAILS_EC].[IS_CERC] = 0
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [EC].[COD_AFFILIATOR]
	WHERE [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
	AND [RELEASE_ADJUSTMENTS].value> 0
	UNION ALL
	SELECT
		[TARIFF_EC].[COD_TARIFF_EC] AS 'PK'
	   ,'TARIFA' AS [TYPE]
	   ,[EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[dbo].[TARIFF_EC].VALUE AS [PLOT_VALUE_PAYMENT]
	   ,CAST([TARIFF_EC].[PAYMENT_DAY] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[SITUATION].[COD_SITUATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	FROM [dbo].[TARIFF_EC]
	INNER JOIN [dbo].[COMMERCIAL_ESTABLISHMENT] AS [EC]
		ON [EC].[COD_EC] = [TARIFF_EC].[COD_EC]
	INNER JOIN [dbo].[SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TARIFF_EC].[COD_SITUATION]
	INNER JOIN [dbo].[BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [EC].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [EC].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [BANK_DETAILS_EC].[IS_CERC] = 0
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [EC].[COD_AFFILIATOR]
	WHERE [TARIFF_EC].[COD_SITUATION] = 4
	AND ([BRANCH_EC].[COD_TYPE_REC] = 1))
SELECT
	[PK]
   ,[type]
   ,[COD_EC]
   ,[COD_BRANCH]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_SITUATION]
   ,[COD_AFFILIATOR]
   ,[COD_BK_EC]
FROM [CTE];

GO

IF EXISTS (SELECT
		*
	FROM [sys].[VIEWS] AS [V]
	INNER JOIN [sys].[SCHEMAS] AS [S]
		ON [V].schema_id = [S].schema_id
	WHERE [S].[NAME] = 'dbo'
	AND [V].[NAME] = 'VW_RELEASES_FINANCE')
BEGIN
DROP VIEW [VW_RELEASES_FINANCE];
END;
GO

CREATE VIEW [VW_RELEASES_FINANCE]
AS
SELECT
	[COD_EC]
   ,[PLOT_VALUE_PAYMENT] AS [TITLE]
   ,0 AS [ADJ]
   ,0 AS [TARIFF]
   ,[COD_BK_EC]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE] AS [PK]
   ,[IS_LOCKED]
   ,[COD_SITUATION]
FROM [VW_TITLES]
UNION ALL
SELECT
	[COD_EC]
   ,0 AS [TITLE]
   ,[PLOT_VALUE_PAYMENT] AS [ADJ]
   ,0 AS [TARIFF]
   ,[COD_BK_EC]
   ,[PREVISION_PAY_DATE]
   ,[PK]
   ,0
   ,[COD_SITUATION]
FROM [VW_ADJ_TFF]
WHERE [type] = 'AJUSTE'
AND [PLOT_VALUE_PAYMENT] > 0;
--UNION ALL
--SELECT [COD_EC], 
--	  0 AS [TITLE], 
--	  0 AS [ADJ], 
--	  [PLOT_VALUE_PAYMENT] AS [TARIFF], 
--	  [COD_BK_EC], 
--	  [PREVISION_PAY_DATE], 
--	  [PK], 
--	  0, 
--	  [COD_SITUATION]
--FROM [VW_ADJ_TFF]
--WHERE [TYPE] = 'TARIFA';  



GO

IF OBJECT_ID('FINANCE_RESUME') IS NOT NULL
DROP TABLE [FINANCE_RESUME];
GO

CREATE TABLE [FINANCE_RESUME](
	[COD_FIN_RESUME]    INT
	PRIMARY KEY IDENTITY, 
	[CREATED_AT]        DATETIME DEFAULT current_timestamp, 
	[TITLES_VALUE]      DECIMAL(22, 6) DEFAULT 0.0, 
	[ADJUSTMENTS_VALUE] DECIMAL(22, 6) DEFAULT 0.0, 
	[TARIFF_VALUE]      DECIMAL(22, 6) DEFAULT 0.0, 
	[COD_FIN_CALENDAR]  INT, 
	[ACTIVE]            INT DEFAULT 1, 
	FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]));

GO

-- ******************************************************************************************


IF OBJECT_ID('SP_GEN_FINANCE_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_GEN_FINANCE_CALENDAR];
GO

CREATE PROCEDURE [SP_GEN_FINANCE_CALENDAR](
	@TP [CODE_TYPE] READONLY)
AS
BEGIN

    -- param procedure
    DECLARE @PREVISION_PAY_DATE DATE;

    DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);

    DECLARE @COD_SITUATION INT;

    DECLARE @COD_BK_EC INT;

    DECLARE @BANK VARCHAR(255);

    DECLARE @PRIORITY INT;

    DECLARE @COD_BANK INT;

    DECLARE @CODE_BANK VARCHAR(255);

    DECLARE @AGENCY VARCHAR(255);

    DECLARE @DIGIT_AGENCY VARCHAR(255);

    DECLARE @ACCOUNT VARCHAR(255);

    DECLARE @DIGIT_ACCOUNT VARCHAR(255);

    DECLARE @COD_TYPE_ACCOUNT INT;

    DECLARE @ACCOUNT_TYPE VARCHAR(255);

    DECLARE @COD_OPER_BANK INT;

    DECLARE @OPERATION_CODE VARCHAR(255);

    DECLARE @OPERATION_DESC VARCHAR(255);

    DECLARE @IS_LOCK INT;

    DECLARE @IS_ASSIGNMENT INT;

    DECLARE @ASSIGNMENT_NAME VARCHAR(255);

    DECLARE @ASSIGNMENT_IDENTIFICATION VARCHAR(255);

    DECLARE @COD_EC INT;

    DECLARE @COMMERCIAL_CODE VARCHAR(255);

    DECLARE @EC_CPF_CNPJ VARCHAR(14);

    DECLARE @EC_NAME VARCHAR(255);

    DECLARE @TYPE_ESTAB VARCHAR(255);

    DECLARE @TRADING_NAME VARCHAR(255);

    DECLARE @COD_AFFILIATOR INT;

    DECLARE @AFFILIATOR_NAME VARCHAR(255);

    DECLARE @AFFILIATOR_CPF_CNPJ VARCHAR(14);

    DECLARE @COD_FINANCE_CALENDAR INT;

    DECLARE @COD_COMP INT;


SELECT
	[VW_RELEASES_FINANCE].[COD_EC]
   ,SUM([TITLE]) AS [TITLE]
   ,SUM([ADJ]) AS [ADJ]
   ,SUM([TARIFF]) AS [TARIFF]
   ,[PREVISION_PAY_DATE]
   ,[COD_BK_EC]
   ,[IS_LOCKED]
   ,[COD_SITUATION]
   ,CAST(0 AS DECIMAL(22, 6)) AS [TOTAL]
   ,0 AS [EXCLUDE] INTO [#RELEASES_FIN]
FROM [VW_RELEASES_FINANCE]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW_RELEASES_FINANCE].[COD_EC]
GROUP BY [VW_RELEASES_FINANCE].[COD_EC]
		,[VW_RELEASES_FINANCE].[PREVISION_PAY_DATE]
		,[VW_RELEASES_FINANCE].[COD_BK_EC]
		,[VW_RELEASES_FINANCE].[IS_LOCKED]
		,[COD_SITUATION];




SELECT
	[VW].* INTO [#ALL_TITLES]
FROM [VW_TITLES] AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC];


SELECT
	[VW].* INTO [#ALL_ADJ_TARIFF]
FROM [VW_ADJ_TFF] AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC];


-- delete [FINANCE_CALENDAR] quando ec já exitir para a data de previsão e estiver com a situação 4

SELECT
	[COD_FIN_CALENDAR] INTO [#FINANCE_CALENDAR_EXISTS]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4;


UPDATE [FINANCE_RESUME]
SET [ACTIVE] = 0
FROM [FINANCE_RESUME]
WHERE [FINANCE_RESUME].[COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR_EXISTS]);


UPDATE [FINANCE_CALENDAR]
SET [ACTIVE] = 0
FROM [FINANCE_CALENDAR]
WHERE [FINANCE_CALENDAR].[COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR_EXISTS]);



-- Buscar maior valor cerc

SELECT
	MAX([TITLE]) AS [MAX_VALUE]
   ,[COD_EC]
   ,[PREVISION_PAY_DATE] INTO [#MAX_VALUE_LOCK]
FROM [#RELEASES_FIN]
WHERE [IS_LOCKED] = 1
GROUP BY [COD_EC]
		,[PREVISION_PAY_DATE];


SELECT
	SUM([ADJ]) AS [ADJ]
   ,SUM([TARIFF]) AS [TARIFF]
   ,[#RELEASES_FIN].[COD_EC]
   ,[#RELEASES_FIN].[PREVISION_PAY_DATE] INTO [#DISCOUNTS_CERC]
FROM [#RELEASES_FIN]
LEFT JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [#RELEASES_FIN].[COD_EC]
		AND [MAX_VALUE].[PREVISION_PAY_DATE] = [#RELEASES_FIN].[PREVISION_PAY_DATE] -- essa porra aqui
WHERE (CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) < 0
AND [MAX_VALUE].[COD_EC] IS NOT NULL
GROUP BY [#RELEASES_FIN].[COD_EC]
		,[#RELEASES_FIN].[PREVISION_PAY_DATE];


--atribuição de valores das tarifas

UPDATE [T]
SET [T].[TARIFF] = [#DISCOUNTS_CERC].[TARIFF]
   ,[T].[ADJ] = [#DISCOUNTS_CERC].[ADJ]
FROM [#RELEASES_FIN] AS [T]
JOIN [#MAX_VALUE_LOCK] [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [T].[COD_EC]
	AND [T].[TITLE] = [MAX_VALUE].[MAX_VALUE]
	AND [T].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE]
JOIN [#DISCOUNTS_CERC]
	ON [#DISCOUNTS_CERC].[COD_EC] = [T].[COD_EC]
	AND [T].[PREVISION_PAY_DATE] = [#DISCOUNTS_CERC].[PREVISION_PAY_DATE];

UPDATE [RELEASE]
SET [RELEASE].[TARIFF] = 0.0
   ,[RELEASE].[ADJ] = 0.0
FROM [#RELEASES_FIN] AS [RELEASE]
JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [RELEASE].[COD_EC]
WHERE ((CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) <= 0
AND [RELEASE].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE])
AND [RELEASE].[IS_LOCKED] = 0;


UPDATE [#RELEASES_FIN]
SET [TOTAL] = ([#RELEASES_FIN].[TITLE] + [#RELEASES_FIN].[ADJ] + [#RELEASES_FIN].[TARIFF]);


UPDATE [#RELEASES_FIN]
SET [EXCLUDE] = 1
FROM [#RELEASES_FIN] [RF]
WHERE ([RF].[TARIFF] < 0.001
AND [RF].[TARIFF] > -0.001)
AND ([RF].[TITLE] < 0.001
AND [RF].[TITLE] > -0.001)
AND ([RF].[ADJ] < 0.001
AND [RF].[ADJ] > -0.001);



--  UPDATE [#ALL_ADJ_TARIFF]
--SET 
--[COD_BK_EC] = [#RELEASES_FIN].[COD_BK_EC]
--  FROM [#ALL_ADJ_TARIFF]
--   JOIN [#RELEASES_FIN] ON [#RELEASES_FIN].[COD_EC] = [#ALL_ADJ_TARIFF].[COD_EC]
--				   AND [#RELEASES_FIN].[PREVISION_PAY_DATE] = [#ALL_ADJ_TARIFF].[PREVISION_PAY_DATE]
--				   AND [#RELEASES_FIN].[EXCLUDE] = 0
--				   AND [#RELEASES_FIN].[IS_LOCKED] = 1
--				   AND (([#RELEASES_FIN].[TARIFF] > 0.001
--					    OR [#RELEASES_FIN].[TARIFF] < -0.001)
--					   OR ([#RELEASES_FIN].[ADJ] > 0.001
--						  OR [#RELEASES_FIN].[ADJ] < -0.001));


-- cursor para inserção da finance_calendar

DECLARE FINANCE_CURSOR CURSOR FOR SELECT
	[FINANCE].[PREVISION_PAY_DATE]
   ,[FINANCE].[TOTAL]
   ,[FINANCE].[COD_SITUATION]
   ,[FINANCE].[COD_BK_EC]
   ,[BANK_DETAILS_EC].[COD_BANK]
   ,[BANKS].[NAME] AS [NAME_BANK]
   ,[BANKS].[PRIORITY]
   ,[BANKS].[CODE] AS [CODE_BANK]
   ,[BANK_DETAILS_EC].[AGENCY]
   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
   ,[BANK_DETAILS_EC].[ACCOUNT]
   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
   ,[BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
   ,[ACCOUNT_TYPE].[NAME] AS [ACCOUNT_TYPE]
   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
   ,[OPERATION].[CODE] AS [OPERATION]
   ,[OPERATION].[DESCRIPTION]
   ,[FINANCE].[IS_LOCKED]
   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
   ,[FINANCE].[COD_EC]
   ,[COMMERCIAL_ESTABLISHMENT].[CODE] AS [EC_CODE]
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ] AS [EC_CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME] AS [EC_NAME]
   ,[TYPE_ESTAB].[CODE] AS [TYPE_EC]
   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
   ,[AFFILIATOR].[NAME] AS [AFF_NAME]
   ,[AFFILIATOR].[CPF_CNPJ] AS [AFF_CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
FROM [#RELEASES_FIN] AS [FINANCE]
JOIN [BANK_DETAILS_EC]
	ON [BANK_DETAILS_EC].[COD_BK_EC] = [FINANCE].[COD_BK_EC]
JOIN [BANKS]
	ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
JOIN [ACCOUNT_TYPE]
	ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
LEFT JOIN [OPERATION_BANK]
	ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
LEFT JOIN [OPERATION]
	ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [FINANCE].[COD_EC]
JOIN [TYPE_ESTAB]
	ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
LEFT JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
WHERE [FINANCE].[EXCLUDE] = 0
ORDER BY [FINANCE].[COD_BK_EC],
[FINANCE].[TOTAL],
[FINANCE].[PREVISION_PAY_DATE];

OPEN FINANCE_CURSOR;

FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

WHILE @@fetch_status = 0
BEGIN

-- inserção da finance_calendar

SET @COD_FINANCE_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	VALUES (@PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @BANK, @PRIORITY, @COD_BANK, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP);

-- atualização da pk nos títulos, ajustes e tarifas
SET @COD_FINANCE_CALENDAR = @@identity;


UPDATE [TRANSACTION_TITLES]
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM [TRANSACTION_TITLES]
JOIN [#ALL_TITLES] [TITLE]
	ON [TITLE].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
	AND [TITLE].[COD_BK_EC] = @COD_BK_EC
	AND CAST([TITLE].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE
JOIN @TP [TP]
	ON [TP].[CODE] = [TITLE].[COD_EC];

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM [RELEASE_ADJUSTMENTS]
JOIN [#ALL_ADJ_TARIFF] [ADJ]
	ON [ADJ].[PK] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
	AND [type] = 'AJUSTE'
	AND [ADJ].[COD_BK_EC] = @COD_BK_EC
	AND CAST([ADJ].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE;

--  UPDATE [TARIFF_EC]
--SET 
--    [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
--  FROM [TARIFF_EC]
--   JOIN [#ALL_ADJ_TARIFF] [TARIFF] ON [TARIFF].[PK] = [TARIFF_EC].[COD_TARIFF_EC]
--							   AND [TYPE] = 'TARIFA'
--							   AND [TARIFF].[COD_BK_EC] = @COD_BK_EC
--							   AND CAST([TARIFF].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE;

INSERT INTO [FINANCE_RESUME] ([TITLES_VALUE],
[ADJUSTMENTS_VALUE],
[TARIFF_VALUE],
[COD_FIN_CALENDAR])
	SELECT
		[TITLE]
	   ,[ADJ]
	   ,[TARIFF]
	   ,@COD_FINANCE_CALENDAR
	FROM [#RELEASES_FIN]
	WHERE [COD_EC] = @COD_EC
	AND [COD_BK_EC] = @COD_BK_EC
	AND [PREVISION_PAY_DATE] = @PREVISION_PAY_DATE;
FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

END;

CLOSE FINANCE_CURSOR;

DEALLOCATE FINANCE_CURSOR;

END;

GO

IF OBJECT_ID('SP_CLS_FIN_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_CLS_FIN_CALENDAR];
GO

CREATE PROCEDURE [SP_CLS_FIN_CALENDAR]
AS
BEGIN

DELETE FROM [FINANCE_RESUME]
WHERE [ACTIVE] = 0;

DELETE FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 0;

END;

GO

IF OBJECT_ID('SP_FINANCE_CALENDAR_PRC') IS NOT NULL
DROP PROCEDURE [SP_FINANCE_CALENDAR_PRC];
GO

CREATE PROCEDURE [SP_FINANCE_CALENDAR_PRC](
	@INITIAL_DATE    DATETIME, 
	@FINAL_DATE      DATETIME, 
	@EC              [CODE_TYPE] READONLY, 
	@BANK            [CODE_TYPE] READONLY, 
	@CODAFF          [CODE_TYPE] READONLY, 
	@ACCOUNT         [CODE_TYPE] READONLY, 
	@CODSITUATION    INT         = NULL, 
	@ONLY_ASSIGNMENT INT         = 0, 
	@ONLY_LOCKED     INT         = 0)
AS
BEGIN
SET NOCOUNT ON;
SET ARITHABORT ON;

    DECLARE @QUERY NVARCHAR(MAX);

SET @QUERY = '        
   SELECT  
    [FINANCE_CALENDAR].[COD_EC] as BusinessEstablishmentInsideCode,         
   [FINANCE_CALENDAR].[TRADING_NAME] AS BusinessEstablishment,         
   [FINANCE_CALENDAR].[EC_CPF_CNPJ] AS Identification,         
   sum([FINANCE_CALENDAR].[PLOT_VALUE_PAYMENT]) as Amount,         
   @INITIAL_DATE as DatePrevisionPayment,         
   [FINANCE_CALENDAR].[COD_BANK],         
   [FINANCE_CALENDAR].[PRIORITY],         
   [FINANCE_CALENDAR].[CODE_BANK] as BankCode,         
   [FINANCE_CALENDAR].[BANK] as BankName,         
   [FINANCE_CALENDAR].[ACCOUNT] BankAccount,         
   [FINANCE_CALENDAR].[DIGIT_ACCOUNT] as DigitAccount,         
   [FINANCE_CALENDAR].[AGENCY] as BankAgency,         
   [FINANCE_CALENDAR].[DIGIT_AGENCY] as DigitAgency,         
   [FINANCE_CALENDAR].[ACCOUNT_TYPE] as BankTypeAccount,         
   [FINANCE_CALENDAR].[OPERATION_CODE] as OperationCode,         
   [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT],         
   (CASE        
    WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 30        
     AND [EC].[COD_SITUATION] <> 24        
     AND ([AFF].[COD_SITUATION] <> 24        
      OR [AFF].[COD_SITUATION] IS NULL) THEN ''AGUARDANDO SPLIT''        
    WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 17        
     AND [EC].[COD_SITUATION] <> 24        
     AND ([AFF].[COD_SITUATION] <> 24        
      OR [AFF].[COD_SITUATION] IS NULL) THEN ''CONFIRMACAO''        
    WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 4        
     AND [EC].[COD_SITUATION] <> 24        
     AND ([AFF].[COD_SITUATION] <> 24        
      OR [AFF].[COD_SITUATION] IS NULL) THEN ''PAGAMENTO''        
    WHEN [EC].[COD_SITUATION] = 24        
     OR [AFF].[COD_SITUATION] = 24 THEN ''AGENDA SUSPENSA''       
    END) AS Situation,         
   [FINANCE_CALENDAR].[COD_AFFILIATOR] as AffiliatorInsideCode,         
   [FINANCE_CALENDAR].[AFFILIATOR_NAME] AS Affiliator,         
   [FINANCE_CALENDAR].[COD_SITUATION] as SituationInsideCode,         
   [SITUATION].[NAME] AS [SITUATION_NAME],         
   [FINANCE_CALENDAR].[IS_ASSIGNMENT] as Assignment,         
   [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION] as IdentificationAssignment,         
   [FINANCE_CALENDAR].[IS_LOCK] AS HasLock,         
   IIF([COD_TYPE_ACCOUNT] = 3, 1, 0) AS IsPaymentAccount,         
   [FINANCE_CALENDAR].[COD_COMP],         
   [FINANCE_CALENDAR].[TYPE_ESTAB] as TypeEstab,         
   [FINANCE_CALENDAR].[COD_BK_EC] as BankEcInsideCode        
FROM [FINANCE_CALENDAR]  
 JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC] ON [EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]  
 JOIN [SITUATION] ON [SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]  
 LEFT JOIN [AFFILIATOR] AS [AFF] ON [AFF].[COD_AFFILIATOR] = [FINANCE_CALENDAR].[COD_AFFILIATOR]  
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1 AND [FINANCE_CALENDAR].[COD_SITUATION] IN(4, 17, 30) AND cast([PREVISION_PAY_DATE] as date) <= cast(@INITIAL_DATE as date)';



    IF @ONLY_ASSIGNMENT = 1
SET @QUERY = @QUERY + ' AND [IS_ASSIGNMENT] = 1';

IF @ONLY_LOCKED = 1
SET @QUERY = @QUERY + ' AND [IS_LOCK] = 1';

IF @CODSITUATION IS NOT NULL
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_SITUATION] = @CODSITUATION';

IF (SELECT
			COUNT(*)
		FROM @EC)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_EC] IN (SELECT [CODE] FROM @EC)';

IF (SELECT
			COUNT(*)
		FROM @BANK)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_BANK] IN (SELECT [CODE] FROM @BANK)';

IF (SELECT
			COUNT(*)
		FROM @CODAFF)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_AFFILIATOR] IN (SELECT [CODE] FROM @CODAFF)';

IF (SELECT
			COUNT(*)
		FROM @ACCOUNT)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT] IN (SELECT [CODE] FROM @ACCOUNT)';


SET @QUERY = @QUERY + '   
      
    GROUP BY [FINANCE_CALENDAR].[COD_EC],   
     [FINANCE_CALENDAR].[TRADING_NAME],   
     [FINANCE_CALENDAR].[EC_CPF_CNPJ],   
     [FINANCE_CALENDAR].[COD_BANK],   
     [FINANCE_CALENDAR].[PRIORITY],   
     [FINANCE_CALENDAR].[CODE_BANK],   
     [FINANCE_CALENDAR].[BANK],   
     [FINANCE_CALENDAR].[ACCOUNT],   
     [FINANCE_CALENDAR].[DIGIT_ACCOUNT],   
     [FINANCE_CALENDAR].[AGENCY],   
     [FINANCE_CALENDAR].[DIGIT_AGENCY],   
     [FINANCE_CALENDAR].[ACCOUNT_TYPE],   
     [FINANCE_CALENDAR].[OPERATION_CODE],   
     [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT],   
     (CASE  
      WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 30 AND [EC].[COD_SITUATION] <> 24 AND ([AFF].[COD_SITUATION] <> 24 OR [AFF].[COD_SITUATION] IS NULL) THEN ''AGUARDANDO SPLIT''  
      WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 17 AND [EC].[COD_SITUATION] <> 24 AND ([AFF].[COD_SITUATION] <> 24 OR [AFF].[COD_SITUATION] IS NULL) THEN ''CONFIRMACAO''  
      WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 4 AND [EC].[COD_SITUATION] <> 24 AND ([AFF].[COD_SITUATION] <> 24 OR [AFF].[COD_SITUATION] IS NULL) THEN ''PAGAMENTO''  
      WHEN [EC].[COD_SITUATION] = 24 OR [AFF].[COD_SITUATION] = 24 THEN ''AGENDA SUSPENSA''  
  END),   
     [FINANCE_CALENDAR].[COD_AFFILIATOR],   
     [FINANCE_CALENDAR].[AFFILIATOR_NAME],   
     [FINANCE_CALENDAR].[COD_SITUATION],   
     [SITUATION].[NAME],   
     [FINANCE_CALENDAR].[IS_ASSIGNMENT],   
     [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION],   
     [FINANCE_CALENDAR].[IS_LOCK],   
     IIF([COD_TYPE_ACCOUNT] = 3, 1, 0),   
     [FINANCE_CALENDAR].[COD_COMP],   
     [FINANCE_CALENDAR].[TYPE_ESTAB],   
     [FINANCE_CALENDAR].[COD_BK_EC]  
    ORDER BY [PRIORITY] DESC,FINANCE_CALENDAR.[COD_EC]';

--SELECT @QUERY;        

EXEC [sp_executesql] @QUERY
					,N'                 
  @INITIAL_DATE DATETIME,                
  @FINAL_DATE DATETIME,                    
  @EC [CODE_TYPE] READONLY,                    
  @BANK [CODE_TYPE] READONLY,                    
  @CodAff [CODE_TYPE] READONLY,                
  @ACCOUNT [CODE_TYPE] READONLY,                         
  @CodSituation INT = NULL,              
  @ONLY_ASSIGNMENT INT = 0,        
  @ONLY_LOCKED INT = 0        
 '
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@EC = @EC
					,@BANK = @BANK
					,@CODAFF = @CODAFF
					,@ACCOUNT = @ACCOUNT
					,@CODSITUATION = @CODSITUATION
					,@ONLY_ASSIGNMENT = @ONLY_ASSIGNMENT
					,@ONLY_LOCKED = @ONLY_LOCKED;

END;

GO

IF OBJECT_ID('SP_FIN_CALENDAR_TITLES_PRC') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TITLES_PRC];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TITLES_PRC](
	@COD_BK_EC     INT, 
	@DATE          DATE, 
	@COD_SITUATION INT  = NULL)
AS
BEGIN


SELECT
	[T].[CODE]
   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,CAST((([TT].[AMOUNT] * (1 - ([TT].[TAX_INITIAL] / 100)) *
	CASE
		WHEN [TT].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TT].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TT].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE])
				ELSE [TT].[QTY_DAYS_ANTECIP]
			END, ([TT].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TT].[PLOT] = 1 THEN [TT].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], 'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[S].[NAME] AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'TITLE' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].file_name
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,[TT].[IS_SPOT]
FROM [FINANCE_CALENDAR] AS [F]
JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
	ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
	ON [T].[COD_TRAN] = [TT].[COD_TRAN]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[COD_BK_EC] = @COD_BK_EC
AND [F].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [F].[ACTIVE] = 1
AND CAST([F].[PREVISION_PAY_DATE] AS DATE) <= @DATE;
END;

GO


IF OBJECT_ID('SP_LS_FIN_SCHEDULE_PRC') IS NOT NULL
DROP PROCEDURE [SP_LS_FIN_SCHEDULE_PRC];
GO

CREATE PROCEDURE [SP_LS_FIN_SCHEDULE_PRC](
	@TP             [CODE_TYPE] READONLY, 
	@COD_BANK       INT, 
	@PREVISION_DATE DATE)
AS
BEGIN

SELECT
	@PREVISION_DATE AS [PREVISION_PAY_DATE]
   ,SUM([FINANCE_CALENDAR].[PLOT_VALUE_PAYMENT]) AS [PLOT_VALUE_PAYMENT]
   ,[FINANCE_CALENDAR].[CODE_BANK]
   ,[FINANCE_CALENDAR].[AGENCY]
   ,[FINANCE_CALENDAR].[ACCOUNT]
   ,IIF([FINANCE_CALENDAR].[IS_ASSIGNMENT] = 1, [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION], [FINANCE_CALENDAR].[EC_CPF_CNPJ]) AS [CPF_CNPJ]
   ,[FINANCE_CALENDAR].[EC_NAME] AS [NAME]
   ,[FINANCE_CALENDAR].[AGENCY] AS [AGENCY_EC]
   ,[FINANCE_CALENDAR].[ACCOUNT] AS [ACCOUNT_EC]
   ,[FINANCE_CALENDAR].[COD_AFFILIATOR] AS [COD_AFFILIATOR]
   ,[FINANCE_CALENDAR].[COD_EC]
   ,[FINANCE_CALENDAR].[DIGIT_ACCOUNT] AS [DIGIT_ACCOUNT]
   ,[FINANCE_CALENDAR].[COD_BK_EC]
   ,0 AS [FILE_CODE] INTO [#DATA_FILE]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_BK_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
AND CAST([FINANCE_CALENDAR].[PREVISION_PAY_DATE] AS DATE) <= @PREVISION_DATE
GROUP BY [FINANCE_CALENDAR].[CODE_BANK]
		,[FINANCE_CALENDAR].[IS_ASSIGNMENT]
		,[FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION]
		,[FINANCE_CALENDAR].[EC_CPF_CNPJ]
		,[FINANCE_CALENDAR].[AGENCY]
		,[FINANCE_CALENDAR].[ACCOUNT]
		,[FINANCE_CALENDAR].[EC_NAME]
		,[FINANCE_CALENDAR].[AGENCY]
		,[FINANCE_CALENDAR].[ACCOUNT]
		,[FINANCE_CALENDAR].[COD_AFFILIATOR]
		,[FINANCE_CALENDAR].[COD_EC]
		,[FINANCE_CALENDAR].[DIGIT_ACCOUNT]
		,[FINANCE_CALENDAR].[COD_BK_EC];


IF @COD_BANK = 161
BEGIN
UPDATE [#DATA_FILE]
SET [FILE_CODE] = (NEXT VALUE FOR [SEQ_FINANCE_FILE])
FROM [#DATA_FILE] [PAYMENTS]
WHERE [PAYMENTS].[PLOT_VALUE_PAYMENT] > 0;

END;

IF @COD_BANK = 255
BEGIN
UPDATE [#DATA_FILE]
SET [FILE_CODE] = (NEXT VALUE FOR [SEQ_FINANCE_FILE_SAFRA])
FROM [#DATA_FILE] [PAYMENTS]
WHERE [PAYMENTS].[PLOT_VALUE_PAYMENT] > 0;
END;


SELECT
	[PREVISION_PAY_DATE]
   ,CAST([PLOT_VALUE_PAYMENT] AS DECIMAL(15, 2)) AS [PLOT_VALUE_PAYMENT]
   ,[CODE_BANK]
   ,[AGENCY]
   ,[ACCOUNT]
   ,[CPF_CNPJ]
   ,[NAME]
   ,[ACCOUNT_EC]
   ,[COD_AFFILIATOR]
   ,[COD_EC]
   ,[DIGIT_ACCOUNT]
   ,[COD_BK_EC]
   ,[FILE_CODE]
FROM [#DATA_FILE]
WHERE [PLOT_VALUE_PAYMENT] > 0;

END;

GO


IF OBJECT_ID('SP_LS_VALUE_PAYMENT_PRC') IS NOT NULL
DROP PROCEDURE [SP_LS_VALUE_PAYMENT_PRC];
GO

CREATE PROCEDURE [SP_LS_VALUE_PAYMENT_PRC](
	@TP   [CODE_TYPE] READONLY, 
	@DATE DATE)
AS
BEGIN

SELECT
	[COD_EC]
   ,SUM([PLOT_VALUE_PAYMENT]) AS [PLOT_VALUE_PAYMENT]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_BK_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
AND CAST([FINANCE_CALENDAR].[PREVISION_PAY_DATE] AS DATE) <= @DATE
GROUP BY [COD_EC];

END;


GO


IF OBJECT_ID('SP_GEN_AWAITING_PAYMENTS') IS NOT NULL
DROP PROCEDURE [SP_GEN_AWAITING_PAYMENTS];
GO

CREATE PROCEDURE [SP_GEN_AWAITING_PAYMENTS](
	@TP          [TP_CNAB_PAYMNT] READONLY, 
	@SOURCE_BANK INT, 
	@DATE        DATE)
AS
BEGIN

    DECLARE @COUNT INT= 0;

-- verifico de existo as seq por typebank

SELECT
	@COUNT = COUNT(*)
FROM [FINANCE_SCHEDULE_FILE] AS [FSF]
JOIN @TP AS [TP]
	ON [TP].[SEQ_FILE] = [FSF].[FILE_SEQUENCE]
WHERE [FSF].[TYPE_BANK] = @SOURCE_BANK
AND [FSF].[file_name] = [TP].[file_name];


IF @COUNT > 0
THROW 61005, 'FINANCE_SCHEDULE_FILE ALREADY REGISTERED', 1;

-- insiro na tabela de arquivos

INSERT INTO [dbo].[FINANCE_SCHEDULE_FILE] ([CREATED_AT],
[STATUS],
[file_name],
[FILE_SEQUENCE],
[RETURN_FILE_NAME],
[ACTIVE],
[COD_USER_CREAT],
[MODIFY_DATE],
[COD_USER_MODIFY],
[SEARCH_DATE],
[COD_BK_EC],
[TYPE_BANK],
[TRACEID],
[TRANSACTION_ID],
[AMOUNT])
	SELECT
		GETDATE()
	   ,NULL
	   ,[file_name]
	   ,[SEQ_FILE]
	   ,NULL
	   ,1
	   ,[COD_USER]
	   ,GETDATE()
	   ,[COD_USER]
	   ,[DATE]
	   ,[COD_BK_EC]
	   ,@SOURCE_BANK
	   ,[TRACE_ID]
	   ,[TRANSACTION_ID]
	   ,[AMOUNT]
	FROM @TP AS [F];

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [FINANCE_SCHEDULE_FILE] ', 1;

-- monto um tbl temp que retorna a pk da finance_calendar e a pk do arquivo 

SELECT
	[FC].[COD_FIN_CALENDAR]
   ,[TP].[SEQ_FILE]
   ,[FSF].[COD_FIN_SCH_FILE] INTO [#DATA_FILE]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN @TP AS [TP]
	ON [TP].[COD_EC] = [FC].[COD_EC]
		AND [TP].[COD_BK_EC] = [FC].[COD_BK_EC]
JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[FILE_SEQUENCE] = [TP].[SEQ_FILE]
		AND [FSF].file_name = [TP].file_name
		AND [FSF].[COD_BK_EC] = [FC].[COD_BK_EC]
		AND [FSF].[TYPE_BANK] = @SOURCE_BANK
WHERE [FC].[ACTIVE] = 1
AND [FC].[PREVISION_PAY_DATE] <= @DATE;


-- up para 17 e fk do arquivo na finance_calendar

UPDATE [FINANCE_CALENDAR]
SET [COD_SITUATION] = 17
   ,[COD_FIN_SCH_FILE] = [DF].[COD_FIN_SCH_FILE]
   ,[PAYMENT_DATE] = current_timestamp
FROM [FINANCE_CALENDAR]
JOIN [#DATA_FILE] [DF]
	ON [DF].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
AND [FINANCE_CALENDAR].[COD_FIN_SCH_FILE] IS NULL;

END;

GO




IF OBJECT_ID('SP_RECONCILE_FIN_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_RECONCILE_FIN_CALENDAR];
GO

CREATE PROCEDURE [SP_RECONCILE_FIN_CALENDAR]
--(
--	@COD_EC INT)
AS
BEGIN

UPDATE [TRANSACTION_TITLES]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TRANSACTION_TITLES]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TRANSACTION_TITLES].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([TRANSACTION_TITLES].[COD_PAY_PROT] <> ISNULL([TRANSACTION_TITLES].[COD_PAY_PROT], 0));
--AND [TRANSACTION_TITLES].[COD_EC] = @COD_EC;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [RELEASE_ADJUSTMENTS]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([RELEASE_ADJUSTMENTS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([RELEASE_ADJUSTMENTS].[COD_PAY_PROT] <> ISNULL([RELEASE_ADJUSTMENTS].[COD_PAY_PROT], 0));
--AND [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TARIFF_EC]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TARIFF_EC].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TARIFF_EC].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([TARIFF_EC].[COD_PAY_PROT] <> ISNULL([TARIFF_EC].[COD_PAY_PROT], 0));
--AND [TARIFF_EC].[COD_EC] = @COD_EC;


UPDATE [TITLE_LOCK_PAYMENT_DETAILS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS]
JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].[COD_TITLE] = [TITLE_LOCK_PAYMENT_DETAILS].[COD_TITLE]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TITLE_LOCK_PAYMENT_DETAILS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION]);
--AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

END;

GO



IF OBJECT_ID('[SP_GEN_PAYMENT]') IS NOT NULL
DROP PROCEDURE [SP_GEN_PAYMENT];
GO


CREATE PROCEDURE [SP_GEN_PAYMENT](
	@TP       [FIN_SCH_GEN_PAY_FILE_TP] READONLY, 
	@CODUSER  INT, 
	@PAYDATE  DATETIME, 
	@TYPEBANK INT)
AS
BEGIN

    DECLARE @PROT_FIN_CALENDAR TABLE(
	    [COD_PAY_PROT] INT, 
	    [COD_BK_EC]    INT);

SELECT
	[COD_FIN_SCH_FILE] INTO [#FILE_CODES]
FROM [FINANCE_SCHEDULE_FILE]
JOIN @TP AS [TP]
	ON [TP].[CODE_FILE] = [FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
WHERE [FINANCE_SCHEDULE_FILE].[TYPE_BANK] = @TYPEBANK;



INSERT INTO [PROTOCOLS] ([PROTOCOL],
[CREATED_AT],
value,
[COD_EC],
[COD_BK_EC],
[COD_USER],
[COD_TYPE_PROT],
[COD_ASS_CNAB])
OUTPUT [INSERTED].[COD_PAY_PROT],
[INSERTED].[COD_BK_EC]
INTO @PROT_FIN_CALENDAR ([COD_PAY_PROT],
[COD_BK_EC])
	SELECT
		(NEXT VALUE FOR [SEQ_PROT_PAY])
	   ,[FC].[PAYMENT_DATE]
	   ,SUM([FC].[PLOT_VALUE_PAYMENT])
	   ,[FC].[COD_EC]
	   ,[FC].[COD_BK_EC]
	   ,@CODUSER
	   ,1
	   ,[ASSOCIATE_GENERATE_CNAB].[COD_ASS_CNAB]
	FROM [FINANCE_CALENDAR] AS [FC]
	JOIN [#FILE_CODES] AS [FILE_CODES]
		ON [FILE_CODES].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
	JOIN [ASSOCIATE_GENERATE_CNAB]
		ON [ASSOCIATE_GENERATE_CNAB].[COD_BANK] = @TYPEBANK
			AND [ASSOCIATE_GENERATE_CNAB].[STANDARD_BANK] = 1
			AND [ASSOCIATE_GENERATE_CNAB].[COD_TYPE_ACCOUNT] = 2
			AND [ASSOCIATE_GENERATE_CNAB].[ACTIVE] = 1
	WHERE [FC].[ACTIVE] = 1
	AND [FC].[COD_SITUATION] = 17
	GROUP BY [FC].[PAYMENT_DATE]
			,[FC].[COD_EC]
			,[FC].[COD_BK_EC]
			,[ASSOCIATE_GENERATE_CNAB].[COD_ASS_CNAB];



INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE])
	SELECT
		[COD_FIN_CALENDAR]
	   ,@CODUSER
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	FROM [FINANCE_CALENDAR]
	JOIN [#FILE_CODES] AS [FILE_CODES]
		ON [FILE_CODES].[COD_FIN_SCH_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE];

UPDATE [FCALENDAR]
SET [COD_SITUATION] = 8
   ,[COD_PAY_PROT] = [PROT].[COD_PAY_PROT]
FROM [FINANCE_CALENDAR] AS [FCALENDAR]
JOIN [#FILE_CODES] AS [FCODE]
	ON [FCODE].[COD_FIN_SCH_FILE] = [FCALENDAR].[COD_FIN_SCH_FILE]
JOIN @PROT_FIN_CALENDAR AS [PROT]
	ON [PROT].[COD_BK_EC] = [FCALENDAR].[COD_BK_EC]
WHERE [FCALENDAR].[ACTIVE] = 1
AND [FCALENDAR].[COD_SITUATION] = 17;

END;


GO
	

IF OBJECT_ID('SP_UNLINK_PAYMENT') IS NOT NULL
DROP PROCEDURE [SP_UNLINK_PAYMENT];
GO

CREATE PROCEDURE [DBO].[SP_UNLINK_PAYMENT](
	@TP       [CODE_TYPE] READONLY, 
	@COD_USER INT, 
	@TYPEBANK INT)
AS
BEGIN

SELECT
	[COD_FIN_SCH_FILE] INTO [#FILE_CODES]
FROM [FINANCE_SCHEDULE_FILE]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
WHERE [FINANCE_SCHEDULE_FILE].[TYPE_BANK] = @TYPEBANK;

INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE],
[HAS_UNLINK])
	SELECT
		[COD_FIN_CALENDAR]
	   ,@COD_USER
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [#FILE_CODES] AS [FCODE]
		ON [FCODE].[COD_FIN_SCH_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE];


UPDATE [FCALENDAR]
SET [COD_SITUATION] = 4
   ,[COD_FIN_SCH_FILE] = NULL
   ,[PAYMENT_DATE] = NULL
FROM [FINANCE_CALENDAR] AS [FCALENDAR]
JOIN [#FILE_CODES] AS [FCODE]
	ON [FCODE].[COD_FIN_SCH_FILE] = [FCALENDAR].[COD_FIN_SCH_FILE]
WHERE [FCALENDAR].[ACTIVE] = 1
AND [COD_SITUATION] = 17;
END;

GO

IF OBJECT_ID('[SP_GEN_PAYMENT_UNIT]') IS NOT NULL
DROP PROCEDURE [SP_GEN_PAYMENT_UNIT];
GO

CREATE PROCEDURE [DBO].[SP_GEN_PAYMENT_UNIT](
	@TP      [CODE_TYPE] READONLY, 
	@DATE    DATETIME, 
	@CODUSER INT)
AS
BEGIN

    DECLARE @PROT_FIN_CALENDAR TABLE(
	    [COD_PAY_PROT] INT, 
	    [COD_BK_EC]    INT);


INSERT INTO [PROTOCOLS] ([PROTOCOL],
[CREATED_AT],
value,
[COD_EC],
[COD_BK_EC],
[COD_USER],
[COD_TYPE_PROT])
OUTPUT [INSERTED].[COD_PAY_PROT],
[INSERTED].[COD_BK_EC]
INTO @PROT_FIN_CALENDAR ([COD_PAY_PROT],
[COD_BK_EC])
	SELECT
		(NEXT VALUE FOR [SEQ_PROT_PAY])
	   ,@DATE
	   ,SUM([FC].[PLOT_VALUE_PAYMENT])
	   ,[FC].[COD_EC]
	   ,[FC].[COD_BK_EC]
	   ,@CODUSER
	   ,1
	FROM [FINANCE_CALENDAR] AS [FC]
	JOIN @TP AS [FILE_CODES]
		ON [FILE_CODES].[CODE] = [FC].[COD_BK_EC]
			AND CAST([FC].[PREVISION_PAY_DATE] AS DATE) <= CAST(@DATE AS DATE)
	WHERE [FC].[ACTIVE] = 1
	AND [FC].[COD_SITUATION] = 4
	GROUP BY [FC].[PAYMENT_DATE]
			,[FC].[COD_EC]
			,[FC].[COD_BK_EC];


INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE])
	SELECT
		[COD_FIN_CALENDAR]
	   ,@CODUSER
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	FROM [FINANCE_CALENDAR]
	JOIN @TP AS [FILE_CODES]
		ON [FILE_CODES].[CODE] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR];


UPDATE [FCALENDAR]
SET [COD_SITUATION] = 8
   ,[COD_PAY_PROT] = [PROT].[COD_PAY_PROT]
   ,[PAYMENT_DATE] = GETDATE()
FROM [FINANCE_CALENDAR] AS [FCALENDAR]
JOIN @TP AS [FCODE]
	ON [FCODE].[CODE] = [FCALENDAR].[COD_BK_EC]
JOIN @PROT_FIN_CALENDAR AS [PROT]
	ON [PROT].[COD_BK_EC] = [FCALENDAR].[COD_BK_EC]
WHERE [FCALENDAR].[ACTIVE] = 1
AND [FCALENDAR].[COD_SITUATION] = 4
AND [FCALENDAR].[PREVISION_PAY_DATE] <= @DATE;

END;


GO

IF OBJECT_ID('SP_FIN_CALENDAR_TITLES_UNLINK') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TITLES_UNLINK];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TITLES_UNLINK](
	@COD_BK_EC INT, 
	@DATE      DATE)
AS
BEGIN


SELECT
	[T].[CODE]
   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,CAST((([TT].[AMOUNT] * (1 - ([TT].[TAX_INITIAL] / 100)) *
	CASE
		WHEN [TT].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TT].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TT].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE])
				ELSE [TT].[QTY_DAYS_ANTECIP]
			END, ([TT].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TT].[PLOT] = 1 THEN [TT].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], 'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[S].[NAME] AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'TITLE' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].file_name
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,[TT].[IS_SPOT]
FROM [FINANCE_CALENDAR] AS [F]
JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
	ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
	ON [T].[COD_TRAN] = [TT].[COD_TRAN]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[ACTIVE] = 1
AND [F].[COD_SITUATION] = 17
AND [F].[COD_BK_EC] = @COD_BK_EC;

END;

GO


IF OBJECT_ID('SP_FIN_CALENDAR_TFF_ADJ_UNLINK') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TFF_ADJ_UNLINK];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TFF_ADJ_UNLINK](
	@COD_BK_EC INT, 
	@DATE      DATE)
AS
BEGIN
SELECT
	[RA].[COD_REL_ADJ] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[RA].VALUE AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[RA].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [RELEASE_ADJUSTMENTS] AS [RA] WITH (NOLOCK)
	ON [RA].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND [FC].[COD_SITUATION] = 17
UNION ALL
SELECT
	[TE].[COD_TARIFF_EC] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[TE].VALUE AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[TE].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [TARIFF_EC] AS [TE] WITH (NOLOCK)
	ON [TE].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND [FC].[COD_SITUATION] = 17;
END;


GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'FINANCE_SCHEDULE_HISTORY'
	AND object_id = OBJECT_ID(N'COD_FIN_CALENDAR'))
BEGIN
ALTER TABLE [FINANCE_SCHEDULE_HISTORY]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

ALTER TABLE [FINANCE_SCHEDULE_HISTORY]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);

GO


IF OBJECT_ID('SP_REG_FINANCIAL_FILE_SEQ_DISSOCIATION_PRC') IS NOT NULL
DROP PROCEDURE [SP_REG_FINANCIAL_FILE_SEQ_DISSOCIATION_PRC];
GO

CREATE PROCEDURE [DBO].[SP_REG_FINANCIAL_FILE_SEQ_DISSOCIATION_PRC](
	@DISS_INFO [TP_FIN_FILE_SEQ_DISSOCIATE] READONLY)
AS
BEGIN

INSERT INTO [FINANCE_SCHEDULE_HISTORY] ([COD_FIN_SCH_FILE_TITLE],
[COD_SITUATION_TITLE],
[COD_FIN_CALENDAR],
[COD_USER_CREAT],
[MODIFY_DATE],
[COD_USER_MODIFY])
	SELECT
		[INFO].[COD_FILE]
	   ,[FINANCE_CALENDAR].[COD_SITUATION]
	   ,[FINANCE_CALENDAR].[COD_FIN_CALENDAR]
	   ,[INFO].[COD_USER]
	   ,GETDATE()
	   ,[INFO].[COD_USER]
	FROM [FINANCE_CALENDAR]
	JOIN @DISS_INFO AS [INFO]
		ON [INFO].[COD_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	WHERE [FINANCE_CALENDAR].[COD_SITUATION] = 17
	AND [FINANCE_CALENDAR].[ACTIVE] = 1;

INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE],
[HAS_UNLINK])
	SELECT
		[COD_FIN_CALENDAR]
	   ,[INFO].[COD_USER]
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[FINANCE_CALENDAR].[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN @DISS_INFO AS [INFO]
		ON [INFO].[COD_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE];



UPDATE [FINANCE_CALENDAR]
SET [COD_SITUATION] = 4
   ,[PAYMENT_DATE] = NULL
   ,[COD_FIN_SCH_FILE] = NULL
FROM [FINANCE_CALENDAR]
JOIN @DISS_INFO [INFO]
	ON [INFO].[COD_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
WHERE [FINANCE_CALENDAR].[COD_SITUATION] = 17
AND [FINANCE_CALENDAR].[ACTIVE] = 1;


INSERT INTO [FINANCE_FILE_DISSOCIATED] ([file_name],
[FILE_SEQUENCE],
[AMOUNT],
[REASON],
[COD_USER],
[COD_EC],
[DISS_FILE_PATH])
	SELECT
		[INFO].[file_name]
	   ,[INFO].[FILE_SEQUENCE]
	   ,[INFO].[AMOUNT]
	   ,[INFO].[REASON]
	   ,[INFO].[COD_USER]
	   ,[INFO].[COD_EC]
	   ,[INFO].[DISS_FILE_PATH]
	FROM @DISS_INFO AS [INFO];

END;

GO

UPDATE [ASSOCIATE_GENERATE_CNAB]
SET [ACTIVE] = 0
WHERE [COD_BANK] = 255;

GO

IF OBJECT_ID('SP_PAYMENT_PROTOCOL_TARIFF_ADJ') IS NOT NULL
DROP PROCEDURE [SP_PAYMENT_PROTOCOL_TARIFF_ADJ];
GO

CREATE PROCEDURE [DBO].[SP_PAYMENT_PROTOCOL_TARIFF_ADJ](
	@PROTOCOL VARCHAR(100))
AS
BEGIN
SELECT
	[RA].[COD_REL_ADJ] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[RA].VALUE AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[RA].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[P].[PROTOCOL]
   ,[FC].[COD_SITUATION]
   ,[POSWEB_DATA_TRANSACTION].[TRACKING_TRANSACTION]
   ,[TRANSACTION].[CODE] AS 'NSU'
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [RELEASE_ADJUSTMENTS] AS [RA] WITH (NOLOCK)
	ON [RA].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [FC].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
LEFT JOIN [POSWEB_DATA_TRANSACTION]
	ON [POSWEB_DATA_TRANSACTION].[COD_POS_DATA] = [RA].[COD_POS_DATA]
LEFT JOIN [TRANSACTION]
	ON [TRANSACTION].[COD_TRAN] = [POSWEB_DATA_TRANSACTION].[COD_TRAN]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL
UNION ALL
SELECT
	[TE].[COD_TARIFF_EC] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[TE].VALUE AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[TE].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'TARIFA' AS [TYPE_RELEASE]
   ,[P].[PROTOCOL]
   ,[FC].[COD_SITUATION]
   ,'' AS [TRACKING_TRANSACTION]
   ,'' AS 'NSU'
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [TARIFF_EC] AS [TE] WITH (NOLOCK)
	ON [TE].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [FC].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL;

END;

GO
  

IF OBJECT_ID('SP_PAYMENT_PROTOCOL_TITLES') IS NOT NULL
DROP PROCEDURE [SP_PAYMENT_PROTOCOL_TITLES];
GO

CREATE PROCEDURE [DBO].[SP_PAYMENT_PROTOCOL_TITLES](
	@PROTOCOL VARCHAR(100))
AS
BEGIN


SELECT
	[T].[CODE] AS [TRANSACTION_CODE]
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,CAST((([TT].[AMOUNT] * (1 - ([TT].[TAX_INITIAL] / 100)) *
	CASE
		WHEN [TT].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TT].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TT].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE])
				ELSE [TT].[QTY_DAYS_ANTECIP]
			END, ([TT].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TT].[PLOT] = 1 THEN [TT].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], 'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[S].[NAME] AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'TITLE' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].file_name
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,[TT].[IS_SPOT]
   ,[P].[PROTOCOL]
FROM [FINANCE_CALENDAR] AS [F]
JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
	ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
	ON [T].[COD_TRAN] = [TT].[COD_TRAN]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [F].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[ACTIVE] = 1
AND [F].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL;
END;


GO

IF OBJECT_ID('SP_REMOVE_FINANCE_UNUSED') IS NOT NULL
DROP PROCEDURE [SP_REMOVE_FINANCE_UNUSED];
GO

CREATE PROCEDURE [SP_REMOVE_FINANCE_UNUSED]
AS
BEGIN


SELECT TOP 1000
	[COD_FIN_CALENDAR] INTO [#TMP_DELETE]
FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 0;

UPDATE [TRANSACTION_TITLES]
SET [COD_FIN_CALENDAR] = NULL
FROM [TRANSACTION_TITLES]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);


UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = NULL
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);


UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = NULL
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);

DELETE FROM [FINANCE_RESUME]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);




DELETE [FINANCE_CALENDAR]
	FROM [FINANCE_CALENDAR]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);


END;

GO




IF OBJECT_ID('SP_FINANCE_RATE_EC') IS NOT NULL
DROP PROCEDURE [SP_FINANCE_RATE_EC];
GO

CREATE PROCEDURE [SP_FINANCE_RATE_EC](
	@COD_EC INT)
AS
BEGIN

    DECLARE @COD_FIN_CALENDAR INT= NULL;
    DECLARE @COD_REL_ADJ INT;
    DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE DATETIME;
    DECLARE @CURRENT_DATE DATETIME= CURRENT_TIMESTAMP;
    DECLARE @COD_TARIFF_EC INT;

    DECLARE @EXIST_BK_LOCK INT= 0;
    DECLARE @EXIST_ADJ INT= 0;
    DECLARE @EXIST_CALENDAR INT= 0;
    DECLARE @EXIST_TFF INT= 0;

    DECLARE @TP [CODE_TYPE];


SELECT
	@EXIST_BK_LOCK = COUNT(*)
FROM [BANK_DETAILS_EC]
JOIN [BANK_DETAILS_CERC_INFO]
	ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
WHERE [BANK_DETAILS_EC].[ACTIVE] = 1
AND [BANK_DETAILS_EC].[COD_EC] = @COD_EC;

IF @EXIST_BK_LOCK >= 1
RETURN;

EXEC [SP_RECONCILE_FIN_CALENDAR_BY_EC] @COD_EC;

INSERT INTO @TP ([CODE])
	SELECT
		[COD_EC]
	FROM [COMMERCIAL_ESTABLISHMENT]
	WHERE [COD_EC] = @COD_EC;

EXEC [SP_GEN_FINANCE_CALENDAR] @TP;

SELECT
	[COD_FIN_CALENDAR]
   ,[COD_EC]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[FINANCE_CALENDAR].[IS_LOCK]
   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE] INTO [#FINANCE_CALENDAR]
FROM [FINANCE_CALENDAR]
WHERE [COD_EC] = @COD_EC
AND [ACTIVE] = 1
AND [COD_SITUATION] = 4
AND [IS_LOCK] = 0;


SELECT
	[COD_REL_ADJ]
   ,value
   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
   ,[RELEASE_ADJUSTMENTS].[COD_EC]
   ,0 AS [UPDATED] INTO [#ADJ]
FROM [RELEASE_ADJUSTMENTS]
WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
AND value < 0;

SELECT
	[COD_TARIFF_EC]
   ,value
   ,[TARIFF_EC].[PAYMENT_DAY]
   ,[TARIFF_EC].[COD_EC]
   ,0 AS [UPDATED] INTO [#TFF]
FROM [TARIFF_EC]
WHERE [TARIFF_EC].[COD_EC] = @COD_EC
AND [TARIFF_EC].[COD_SITUATION] = 4
AND CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT);


SELECT
	@EXIST_CALENDAR = COUNT(*)
FROM [#FINANCE_CALENDAR];

SELECT
	@EXIST_ADJ = COUNT(*)
FROM [#ADJ];

SELECT
	@EXIST_TFF = COUNT(*)
FROM [#TFF];

IF (@EXIST_CALENDAR <= 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
	OR (@EXIST_CALENDAR > 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
RETURN;


-- cursor para ajustes  
DECLARE CURSOR_FINANCE CURSOR FOR SELECT
	[COD_REL_ADJ]
   ,value
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
FROM [#ADJ]
ORDER BY [PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE;

FETCH NEXT FROM CURSOR_FINANCE INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;

WHILE @@fetch_status = 0
BEGIN

SET @COD_FIN_CALENDAR = NULL;

SELECT
	@COD_FIN_CALENDAR = [FIN].[COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR] AS [FIN]
WHERE CAST([PREVISION_PAY_DATE] AS DATE) = CAST(@PREVISION_PAY_DATE AS DATE);


IF @COD_FIN_CALENDAR IS NOT NULL
BEGIN

UPDATE [FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = ([PLOT_VALUE_PAYMENT] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [FINANCE_RESUME]
SET [ADJUSTMENTS_VALUE] = ([ADJUSTMENTS_VALUE] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

UPDATE [#ADJ]
SET [UPDATED] = 1
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE
	   ,@PLOT_VALUE_PAYMENT
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#ADJ] AS [ADJ]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [ADJ].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [ADJ].[UPDATED] = 0
	AND [ADJ].[COD_REL_ADJ] = @COD_REL_ADJ;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;


INSERT INTO [FINANCE_RESUME] ([ADJUSTMENTS_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@PLOT_VALUE_PAYMENT, @COD_FIN_CALENDAR);

END;
FETCH NEXT FROM CURSOR_FINANCE INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;
END;

CLOSE CURSOR_FINANCE;
DEALLOCATE CURSOR_FINANCE;

-- cursor para tarifas  
DECLARE CURSOR_FINANCE CURSOR FOR SELECT
	[COD_TARIFF_EC]
   ,value
   ,[PAYMENT_DAY]
   ,[COD_EC]
FROM [#TFF]
ORDER BY [PAYMENT_DAY];

OPEN CURSOR_FINANCE;
FETCH NEXT FROM CURSOR_FINANCE INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;

WHILE @@fetch_status = 0
BEGIN

SET @COD_FIN_CALENDAR = NULL;

SELECT
	@COD_FIN_CALENDAR = [FIN].[COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR] AS [FIN]
WHERE CAST([PREVISION_PAY_DATE] AS DATE) = CAST(@PREVISION_PAY_DATE AS DATE);

IF @COD_FIN_CALENDAR IS NOT NULL
BEGIN
UPDATE [FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = ([PLOT_VALUE_PAYMENT] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [FINANCE_RESUME]
SET [TARIFF_VALUE] = ([TARIFF_VALUE] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

UPDATE [#TFF]
SET [UPDATED] = 1
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;
END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE
	   ,@PLOT_VALUE_PAYMENT
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#TFF] AS [TFF]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TFF].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TFF].[UPDATED] = 0
	AND [TFF].[COD_TARIFF_EC] = @COD_TARIFF_EC;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;


INSERT INTO [FINANCE_RESUME] ([TARIFF_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@PLOT_VALUE_PAYMENT, @COD_FIN_CALENDAR);

END;

FETCH NEXT FROM CURSOR_FINANCE INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;
END;


CLOSE CURSOR_FINANCE;
DEALLOCATE CURSOR_FINANCE;


END;

GO



IF OBJECT_ID('[SP_FINANCE_RATE_LOCK]') IS NOT NULL
DROP PROCEDURE [SP_FINANCE_RATE_LOCK];
GO

CREATE PROCEDURE [SP_FINANCE_RATE_LOCK](
	@COD_EC INT)
AS
BEGIN

    DECLARE @COD_FIN_CALENDAR INT= NULL;
    DECLARE @COD_REL_ADJ INT;
    DECLARE @COD_TARIFF_EC INT;

    DECLARE @PLOT_VALUE_PAYMENT_ADJ DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE_ADJ DATETIME;

    DECLARE @PLOT_VALUE_PAYMENT_TFF DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE_TFF DATETIME;

    DECLARE @PLOT_VALUE_PAYMENT_FIN DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE_FIN DATETIME;
    DECLARE @COD_BK_EC INT;
    DECLARE @COMMENT VARCHAR(255);
    DECLARE @COD_TTARIFF INT;
    DECLARE @COD_ORIGIN INT;
    DECLARE @SUM_ADJ DECIMAL(22, 6);
    DECLARE @SUM_TFF DECIMAL(22, 6);
    DECLARE @ADJ_VALUE_PAID DECIMAL(22, 6);
    DECLARE @TFF_VALUE_PAID DECIMAL(22, 6);

    DECLARE @EXIST_ADJ INT= 0;
    DECLARE @EXIST_CALENDAR INT= 0;
    DECLARE @EXIST_BK_LOCK INT= 0;
    DECLARE @EXIST_TFF INT= 0;
    DECLARE @CURRENT_DATE DATETIME= CURRENT_TIMESTAMP;

    DECLARE @CONTROL DECIMAL(22, 6);
    DECLARE @I INT= 0;

    DECLARE @TP [CODE_TYPE];

SELECT
	@EXIST_BK_LOCK = COUNT(*)
FROM [BANK_DETAILS_EC]
JOIN [BANK_DETAILS_CERC_INFO]
	ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
WHERE [BANK_DETAILS_EC].[ACTIVE] = 1
AND [BANK_DETAILS_EC].[COD_EC] = @COD_EC;


IF @EXIST_BK_LOCK <= 0
RETURN;

EXEC [SP_RECONCILE_FIN_CALENDAR_BY_EC] @COD_EC;

INSERT INTO @TP ([CODE])
	SELECT
		[COD_EC]
	FROM [COMMERCIAL_ESTABLISHMENT]
	WHERE [COD_EC] = @COD_EC;

EXEC [SP_GEN_FINANCE_CALENDAR] @TP;

SELECT
	[COD_FIN_CALENDAR]
   ,[COD_EC]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[FINANCE_CALENDAR].[IS_LOCK]
   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE]
   ,CAST(NULL AS DECIMAL(22, 6)) AS [CALCULATED_VALUE]
   ,CAST([PLOT_VALUE_PAYMENT] AS DECIMAL(22, 6)) AS [POSITIVE_VALUE]
   ,CAST(0 AS DECIMAL(22, 6)) AS [ADJ_VALUE]
   ,CAST(0 AS DECIMAL(22, 6)) AS [TFF_VALUE]
   ,0 AS [EXCLUDED] INTO [#FINANCE_CALENDAR]
FROM [FINANCE_CALENDAR]
WHERE [COD_EC] = @COD_EC
AND [ACTIVE] = 1
AND [COD_SITUATION] = 4;


UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = 4
FROM [RELEASE_ADJUSTMENTS]
JOIN [RELEASE_ADJUSTMENTS] [ADJ_PARTIAL]
	ON [ADJ_PARTIAL].[COD_ORIGIN] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
	AND [ADJ_PARTIAL].[COD_EC] = @COD_EC
	AND [ADJ_PARTIAL].[COD_SITUATION] = 4;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = 28
WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
AND value < 0
AND [COD_ORIGIN] IS NOT NULL;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 4
FROM [TARIFF_EC]
JOIN [TARIFF_EC] [TFF_PARTIAL]
	ON [TFF_PARTIAL].[COD_ORIGIN] = [TARIFF_EC].[COD_TARIFF_EC]
	AND [TFF_PARTIAL].[COD_EC] = @COD_EC
	AND [TFF_PARTIAL].[COD_SITUATION] = 4;

UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 28
WHERE [TARIFF_EC].[COD_EC] = @COD_EC
AND [TARIFF_EC].[COD_SITUATION] = 4
AND [COD_ORIGIN] IS NOT NULL;


SELECT
	[COD_REL_ADJ]
   ,value
   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
   ,[RELEASE_ADJUSTMENTS].[COD_EC]
   ,[RELEASE_ADJUSTMENTS].[COMMENT]
   ,CAST(NULL AS DECIMAL(22, 6)) AS [DISCOUNT_APPLIED] INTO [#ADJ]
FROM [RELEASE_ADJUSTMENTS]
WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
AND value < 0;


SELECT
	[COD_TARIFF_EC]
   ,value
   ,[TARIFF_EC].[PAYMENT_DAY]
   ,[TARIFF_EC].[COD_EC]
   ,[TARIFF_EC].[COMMENT]
   ,[TARIFF_EC].[COD_TTARIFF]
   ,CAST(NULL AS DECIMAL(22, 6)) AS [DISCOUNT_APPLIED] INTO [#TFF]
FROM [TARIFF_EC]
WHERE [TARIFF_EC].[COD_EC] = @COD_EC
AND [TARIFF_EC].[COD_SITUATION] = 4
AND CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT);

SELECT
	@EXIST_CALENDAR = COUNT(*)
FROM [#FINANCE_CALENDAR];

SELECT
	@EXIST_ADJ = COUNT(*)
FROM [#ADJ];

SELECT
	@EXIST_TFF = COUNT(*)
FROM [#TFF];

IF (@EXIST_CALENDAR <= 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
	OR (@EXIST_CALENDAR > 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
RETURN;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = 28
   ,[COD_FIN_CALENDAR] = NULL
FROM [RELEASE_ADJUSTMENTS]
JOIN [#ADJ] [ADJ]
	ON [ADJ].[COD_REL_ADJ] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ];

UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 28
   ,[COD_FIN_CALENDAR] = NULL
FROM [TARIFF_EC]
JOIN [#TFF] [TFF]
	ON [TFF].[COD_TARIFF_EC] = [TARIFF_EC].[COD_TARIFF_EC];

-- cursor para o rateio dos ajustes              
DECLARE CURSOR_FINANCE_ADJ CURSOR FOR SELECT
	[COD_REL_ADJ]
   ,value
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
   ,[COMMENT]
FROM [#ADJ]
ORDER BY [PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE_ADJ;

FETCH NEXT FROM CURSOR_FINANCE_ADJ INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT_ADJ, @PREVISION_PAY_DATE_ADJ, @COD_EC, @COMMENT;

WHILE @@fetch_status = 0
BEGIN


SET @CONTROL = @PLOT_VALUE_PAYMENT_ADJ;
SET @I = 1;

SELECT
	@COD_ORIGIN = ISNULL([COD_ORIGIN], [COD_REL_ADJ])
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

SET @ADJ_VALUE_PAID = 0;


SELECT
	@ADJ_VALUE_PAID = SUM(value)
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_ORIGIN] = @COD_ORIGIN
AND [COD_SITUATION] = 8;

SET @CONTROL = @CONTROL + (@ADJ_VALUE_PAID * -1);

UPDATE [#FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE];


IF @EXIST_CALENDAR > 0
BEGIN

DECLARE CURSOR_FINANCE_FIN CURSOR FOR SELECT
	[COD_FIN_CALENDAR]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
   ,[COD_BK_EC]
FROM [#FINANCE_CALENDAR]
WHERE [EXCLUDED] = 0
ORDER BY [IS_LOCK] DESC,
[COD_BK_EC],
[PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE_FIN;

FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
WHILE @@fetch_status = 0
BEGIN

SET @CONTROL = @PLOT_VALUE_PAYMENT_FIN + @CONTROL;

			 IF @CONTROL < 0
			 BEGIN

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
value,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_REQ],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[BRANCH_EC].[COD_EC]
	   ,(@PLOT_VALUE_PAYMENT_FIN) * -1
	   ,[PREVISION_PAY_DATE]
	   ,1
	   ,CONCAT(@COMMENT, ' - (1/', @I, ')')
	   ,4
	   ,NULL
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_ADJ = SUM(value)
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
AND value < 0;

-- Coloco como [EXCLUDED] pq o valor já foi abatido          
UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = 0
   ,[EXCLUDED] = 1
   ,[ADJ_VALUE] = @SUM_ADJ
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SET @I = @I + 1;

UPDATE [#ADJ]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;
END;

IF @CONTROL >= 0
BEGIN

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
value,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_REQ],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[BRANCH_EC].[COD_EC]
	   ,(@CONTROL - @PLOT_VALUE_PAYMENT_FIN)
	   ,[PREVISION_PAY_DATE]
	   ,1
	   ,CONCAT(@COMMENT, ' - (1/', @I, ')')
	   ,4
	   ,NULL
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_ADJ = SUM(value)
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
AND value < 0;

UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @PLOT_VALUE_PAYMENT_FIN + @SUM_ADJ
   ,[ADJ_VALUE] = @SUM_ADJ
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#ADJ]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;
BREAK;
END;

FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
END;

CLOSE CURSOR_FINANCE_FIN;
DEALLOCATE CURSOR_FINANCE_FIN;
END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE_ADJ
	   ,@CONTROL
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#ADJ] AS [ADJ]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [ADJ].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [ADJ].[COD_REL_ADJ] = @COD_REL_ADJ;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
   ,[COD_SITUATION] = 4
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;


INSERT INTO [FINANCE_RESUME] ([ADJUSTMENTS_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@CONTROL, @COD_FIN_CALENDAR);

END;

FETCH NEXT FROM CURSOR_FINANCE_ADJ INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT_ADJ, @PREVISION_PAY_DATE_ADJ, @COD_EC, @COMMENT;
END;

CLOSE CURSOR_FINANCE_ADJ;
DEALLOCATE CURSOR_FINANCE_ADJ;


UPDATE [#ADJ]
SET [DISCOUNT_APPLIED] = [#ADJ].value
WHERE [#ADJ].[DISCOUNT_APPLIED] IS NULL;


IF @EXIST_CALENDAR > 0
BEGIN

SELECT TOP 1
	@COD_FIN_CALENDAR = [COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR]
ORDER BY [IS_LOCK] DESC;

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
value,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_REQ],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[BRANCH_EC].[COD_EC]
	   ,[ADJ].[DISCOUNT_APPLIED]
	   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE]
	   ,1
	   ,[ADJ].[COMMENT]
	   ,4
	   ,NULL
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,[ADJ].[COD_REL_ADJ]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	JOIN [#ADJ] AS [ADJ]
		ON [ADJ].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
			AND [ADJ].[DISCOUNT_APPLIED] < 0
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;


UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @CONTROL
   ,[ADJ_VALUE] = [ADJ_VALUE] + ISNULL((SELECT
			SUM([DISCOUNT_APPLIED])
		FROM [#ADJ]
		WHERE [#ADJ].[DISCOUNT_APPLIED] < 0)
	, 0)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

END;

SET @CONTROL = NULL;
SET @COD_ORIGIN = NULL;

UPDATE [#FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE];

--  --cursor para o rateio das tarifas             

DECLARE CURSOR_FINANCE_TFF CURSOR FOR SELECT
	[COD_TARIFF_EC]
   ,value
   ,[PAYMENT_DAY]
   ,[COD_EC]
   ,[COMMENT]
   ,[COD_TTARIFF]
FROM [#TFF]
ORDER BY [PAYMENT_DAY];

OPEN CURSOR_FINANCE_TFF;

FETCH NEXT FROM CURSOR_FINANCE_TFF INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT_TFF, @PREVISION_PAY_DATE_TFF, @COD_EC, @COMMENT, @COD_TTARIFF;

WHILE @@fetch_status = 0
BEGIN

SET @CONTROL = @PLOT_VALUE_PAYMENT_TFF;
SET @I = 1;

SELECT
	@COD_ORIGIN = ISNULL([COD_ORIGIN], [COD_TARIFF_EC])
FROM [TARIFF_EC]
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

UPDATE [#FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE];

SET @TFF_VALUE_PAID = 0;

SELECT
	@TFF_VALUE_PAID = SUM(value)
FROM [TARIFF_EC]
WHERE [COD_ORIGIN] = @COD_ORIGIN
AND [COD_SITUATION] = 8;

SET @CONTROL = @CONTROL + (@TFF_VALUE_PAID * -1);


	   IF @EXIST_CALENDAR > 0
	   BEGIN
		  DECLARE CURSOR_FINANCE_FIN CURSOR
		  FOR SELECT
	[COD_FIN_CALENDAR]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
   ,[COD_BK_EC]
FROM [#FINANCE_CALENDAR]
WHERE [EXCLUDED] = 0
AND CAST(CONVERT(CHAR(6), [#FINANCE_CALENDAR].[PREVISION_PAY_DATE], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT)
ORDER BY [IS_LOCK] DESC,
[COD_BK_EC],
[PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE_FIN;

FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
WHILE @@fetch_status = 0
BEGIN

SET @CONTROL = @PLOT_VALUE_PAYMENT_FIN + @CONTROL;

			 IF @CONTROL < 0
			 BEGIN

INSERT INTO [TARIFF_EC] ([COD_TTARIFF],
[COD_EC],
value,
[PAYMENT_DAY],
[PLOT],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_SITUATION],
[COMMENT],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		@COD_TTARIFF
	   ,[BRANCH_EC].[COD_EC]
	   ,(@PLOT_VALUE_PAYMENT_FIN) * -1
	   ,@PREVISION_PAY_DATE_TFF
	   ,1
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,4
	   ,CONCAT(ISNULL(@COMMENT, [PREVISION_PAY_DATE]), ' - (1/', @I, ')')
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_TFF = SUM(value)
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;


UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = 0
   ,[EXCLUDED] = 1
   ,[TFF_VALUE] = @SUM_TFF
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#TFF]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

SET @I = @I + 1;
			 END;

IF @CONTROL >= 0
BEGIN

INSERT INTO [TARIFF_EC] ([COD_TTARIFF],
[COD_EC],
value,
[PAYMENT_DAY],
[PLOT],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_SITUATION],
[COMMENT],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		@COD_TTARIFF
	   ,[BRANCH_EC].[COD_EC]
	   ,(@CONTROL - @PLOT_VALUE_PAYMENT_FIN)
	   ,@PREVISION_PAY_DATE_TFF
	   ,1
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,4
	   ,CONCAT(@COMMENT, ' - (1/', @I, ')')
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_TFF = SUM(value)
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @PLOT_VALUE_PAYMENT_FIN + @SUM_TFF
   ,[TFF_VALUE] = @SUM_TFF
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#TFF]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;
BREAK;
END;


FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
END;

CLOSE CURSOR_FINANCE_FIN;
DEALLOCATE CURSOR_FINANCE_FIN;
END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE_TFF
	   ,@CONTROL
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#TFF] AS [TFF]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TFF].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TFF].[COD_TARIFF_EC] = @COD_TARIFF_EC;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
   ,[COD_SITUATION] = 4
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;


INSERT INTO [FINANCE_RESUME] ([TARIFF_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@CONTROL, @COD_FIN_CALENDAR);
END;

FETCH NEXT FROM CURSOR_FINANCE_TFF INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT_TFF, @PREVISION_PAY_DATE_TFF, @COD_EC, @COMMENT, @COD_TTARIFF;

END;

CLOSE CURSOR_FINANCE_TFF;
DEALLOCATE CURSOR_FINANCE_TFF;

UPDATE [#TFF]
SET [DISCOUNT_APPLIED] = [#TFF].value
WHERE [#TFF].[DISCOUNT_APPLIED] IS NULL;


IF @EXIST_CALENDAR > 0
BEGIN

SELECT TOP 1
	@COD_FIN_CALENDAR = [COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR]
ORDER BY [IS_LOCK] DESC;

INSERT INTO [TARIFF_EC] ([COD_TTARIFF],
[COD_EC],
value,
[PAYMENT_DAY],
[PLOT],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_SITUATION],
[COMMENT],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[TFF].[COD_TTARIFF]
	   ,[BRANCH_EC].[COD_EC]
	   ,[TFF].[DISCOUNT_APPLIED]
	   ,[PREVISION_PAY_DATE]
	   ,1
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,4
	   ,[TFF].[COMMENT]
	   ,[TFF].[COD_TARIFF_EC]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	JOIN [#TFF] AS [TFF]
		ON [TFF].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
			AND [TFF].[DISCOUNT_APPLIED] < 0
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;


UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @CONTROL
   ,[TFF_VALUE] = [TFF_VALUE] + ISNULL((SELECT
			SUM([DISCOUNT_APPLIED])
		FROM [#TFF]
		WHERE [#TFF].[DISCOUNT_APPLIED] < 0)
	, 0)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

END;


UPDATE [FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [FN].[POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE]
FROM [FINANCE_CALENDAR]
JOIN [#FINANCE_CALENDAR] [FN]
	ON [FN].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR];

UPDATE [FINANCE_RESUME]
SET [ADJUSTMENTS_VALUE] = [ADJUSTMENTS_VALUE] + [ADJ_VALUE]
   ,[TARIFF_VALUE] = [TARIFF_VALUE] + [TFF_VALUE]
FROM [FINANCE_RESUME]
JOIN [#FINANCE_CALENDAR] [FN]
	ON [FN].[COD_FIN_CALENDAR] = [FINANCE_RESUME].[COD_FIN_CALENDAR];

END;
GO

IF OBJECT_ID('SP_UP_BANK_DETAILS_EC') IS NOT NULL
DROP PROCEDURE [SP_UP_BANK_DETAILS_EC];
GO

CREATE PROCEDURE [DBO].[SP_UP_BANK_DETAILS_EC]      
    
/*********************************************************************************************************
----------------------------------------------------------------------------------------     
    Procedure Name: [SP_UP_BANK_DETAILS_EC]     
    Project.......: TKPP     
    ------------------------------------------------------------------------------------------     
    Author                          VERSION        Date                            Description            
    ------------------------------------------------------------------------------------------     
    Kennedy Alef     V1      27/07/2018         Creation           
    Elir Ribeiro     v2      19/11/2018         Changed            
    Luiz Aquino      v3      03/07/2019         update not is cerc    
 	Lucas Aguiar     v4      2019-10-28      Conta Cessão    
    ------------------------------------------------------------------------------------------
*********************************************************************************************************/
     
(
	@AGENCY                    VARCHAR(100), 
	@DIGIT_AGENCY              VARCHAR(100), 
	@ACCOUNT                   VARCHAR(100), 
	@DIGIT_ACCOUNT             VARCHAR(100) = NULL, 
	@COD_EC                    INT, 
	@COD_BANK                  INT, 
	@COD_USER                  INT, 
	@COD_TYPE_ACCOUNT          INT, 
	@COD_BRANCH                INT, 
	@COD_OPER                  INT          = NULL, 
	@IS_ASSIGNMENT             INT          = 0, 
	@ASSIGNMENT_NAME           VARCHAR(255) = NULL, 
	@ASSIGNMENT_IDENTIFICATION VARCHAR(14)  = NULL)
AS
BEGIN
    DECLARE @CONT INT= 0;

    BEGIN
UPDATE [BANK_DETAILS_EC]
SET [ACTIVE] = 0
   ,[MODIFY_DATE] = GETDATE()
WHERE [COD_BRANCH] = @COD_BRANCH
AND [ACTIVE] = 1
AND [IS_CERC] = 0;


INSERT INTO [BANK_DETAILS_EC] ([CREATED_AT],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_EC],
[COD_BANK],
[COD_USER],
[ACTIVE],
[COD_TYPE_ACCOUNT],
[COD_BRANCH],
[COD_OPER_BANK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION])
	VALUES (GETDATE(), @AGENCY, ISNULL(REPLACE(@DIGIT_AGENCY, '-', ''), ''), @ACCOUNT, @DIGIT_ACCOUNT, @COD_EC, @COD_BANK, @COD_USER, 1, @COD_TYPE_ACCOUNT, @COD_BRANCH, @COD_OPER, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION);

SELECT
	@CONT = COUNT([COD_FIN_CALENDAR])
FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 1
AND [COD_EC] = @COD_EC
AND [COD_SITUATION] = 4
AND [IS_LOCK] = 0;

IF @CONT > 0
BEGIN

EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

END;


END;
END;

GO

IF OBJECT_ID('SP_REG_RELEASE_ADJ') IS NOT NULL
DROP PROCEDURE [SP_REG_RELEASE_ADJ];
GO

CREATE PROCEDURE [DBO].[SP_REG_RELEASE_ADJ]    

/*********************************************************************************************
----------------------------------------------------------------------------------------    
Procedure Name: [SP_REG_RELEASE_ADJ]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef     V1    27/07/2018      Creation    
Elir Ribeiro    v2     20-08-2019     Changed Cod_Tran  
------------------------------------------------------------------------------------------
*********************************************************************************************/
    
(
	@COD_EC        INT, 
	@VALUE         DECIMAL(22, 6), 
	@DATE          DATETIME, 
	@JUSTIFY_CODE  INT, 
	@COMMENT       VARCHAR(200), 
	@CODUSER       INT, 
	@COD_REQ       INT            = NULL, 
	@COD_SITUATION INT            = NULL, 
	@COD_BRANCH    INT            = NULL, 
	@COD_TRAN      INT            = NULL)
AS
BEGIN

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
value,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_USER],
[COD_REQ],
[COD_BRANCH],
[COD_TRAN])
	VALUES (@COD_EC, @VALUE, @DATE, @JUSTIFY_CODE, @COMMENT, 4, @CODUSER, @COD_REQ, @COD_BRANCH, @COD_TRAN);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER RELEASE_ADJUSTMENTS ', 1;


EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

END;

GO

CREATE NONCLUSTERED INDEX [IX_FIN_CALENDAR_EC_SITUATION] ON [DBO].[FINANCE_CALENDAR]([COD_EC], [COD_SITUATION]);

GO


-- IF OBJECT_ID('APPORTIONMENT') IS NOT NULL DROP TABLE [APPORTIONMENT];
-- GO
-- CREATE TABLE [APPORTIONMENT](
-- 	[COD_APPORTIONMENT] INT IDENTITY PRIMARY KEY, 
-- 	[CREATED_AT]        DATETIME DEFAULT current_timestamp, 
-- 	[COD_EC]            INT, 
-- 	[AMOUNT]            DECIMAL(22, 6), 
-- 	CONSTRAINT [FK_APPORTIONMENT_EC] FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]));

-- GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
	AND object_id = OBJECT_ID(N'COD_ORIGIN'))
BEGIN
ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD [COD_ORIGIN] INT;
END;

GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
-- 	  AND object_id = OBJECT_ID(N'COD_DESTINY'))
-- BEGIN
-- ALTER TABLE [RELEASE_ADJUSTMENTS]
-- ADD [COD_DESTINY] INT; 
-- END

-- GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
-- 	  AND object_id = OBJECT_ID(N'COD_MAIN'))
-- BEGIN
-- ALTER TABLE [RELEASE_ADJUSTMENTS]
-- ADD [COD_MAIN] INT; 
-- END

-- GO

ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD CONSTRAINT [FK_APPORTIONMENT_ORIGIN] FOREIGN KEY([COD_ORIGIN]) REFERENCES [RELEASE_ADJUSTMENTS]([COD_REL_ADJ]);

GO


IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'TARIFF_EC'
	AND object_id = OBJECT_ID(N'COD_ORIGIN'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [COD_ORIGIN] INT;
END;

GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'TARIFF_EC'
-- 	  AND object_id = OBJECT_ID(N'COD_DESTINY'))
-- BEGIN
-- ALTER TABLE [TARIFF_EC]
-- ADD [COD_DESTINY] INT; 
-- END

-- GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'TARIFF_EC'
-- 	  AND object_id = OBJECT_ID(N'COD_MAIN'))
-- BEGIN
-- ALTER TABLE [TARIFF_EC]
-- ADD [COD_MAIN] INT; 
-- END

-- GO


ALTER TABLE [TARIFF_EC]
ADD FOREIGN KEY([COD_ORIGIN]) REFERENCES [TARIFF_EC]([COD_TARIFF_EC]);


-- ALTER TABLE [TARIFF_EC]
-- ADD FOREIGN KEY([COD_DESTINY]) REFERENCES [APPORTIONMENT]([COD_APPORTIONMENT]);


-- ALTER TABLE [TARIFF_EC]
-- ADD FOREIGN KEY(COD_MAIN) REFERENCES [APPORTIONMENT]([COD_APPORTIONMENT]);

GO

CREATE NONCLUSTERED INDEX [FINANCE_CALENDAR_ACTIVE_COD_EC_COD_SITUATION_COD_PAY_PROT] ON [DBO].[FINANCE_CALENDAR]([ACTIVE], [COD_EC]) 
	INCLUDE([COD_SITUATION], [COD_PAY_PROT]);


GO


-- IF OBJECT_ID('APPORTIONMENT_TRACKING') IS NOT NULL
--     DROP TABLE [APPORTIONMENT_TRACKING];
-- GO

-- CREATE TABLE [APPORTIONMENT_TRACKING](
-- 	[COD_APP_TRACK] INT IDENTITY PRIMARY KEY, 
-- 	[COD_MAIN]      INT, 
-- 	[COD_REL_ADJ]   INT, 
-- 	[COD_EC]        INT, 
-- 	[ACTIVE]        INT DEFAULT 1, 
-- 	FOREIGN KEY([COD_REL_ADJ]) REFERENCES [RELEASE_ADJUSTMENTS]([COD_REL_ADJ]), 
-- 	FOREIGN KEY([COD_MAIN]) REFERENCES [APPORTIONMENT]([COD_APPORTIONMENT]), 
-- 	FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]));


-- GO



-- INSERT INTO [TYPE_TARIFF]
-- ([NAME], 
--  [TYPE], 
--  [QTY_PLOTS], 
--  [ACTIVE], 
--  [COD_USER], 
--  [AMOUNT],
--  COD_COMP
-- )
-- VALUES ( 
-- 	'AGRUPADO', 'AGRUPADO', 1, 1, 287, 0 , 8);

-- GO

IF OBJECT_ID('SP_RECONCILE_FIN_CALENDAR_BY_EC') IS NOT NULL
DROP PROCEDURE [SP_RECONCILE_FIN_CALENDAR_BY_EC];
GO

CREATE PROCEDURE [SP_RECONCILE_FIN_CALENDAR_BY_EC](
	@COD_EC INT)
AS
BEGIN

UPDATE [TRANSACTION_TITLES]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TRANSACTION_TITLES]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TRANSACTION_TITLES].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [RELEASE_ADJUSTMENTS]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([RELEASE_ADJUSTMENTS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;



UPDATE [TARIFF_EC]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TARIFF_EC]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TARIFF_EC].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TARIFF_EC].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;


UPDATE [TITLE_LOCK_PAYMENT_DETAILS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS]
JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].[COD_TITLE] = [TITLE_LOCK_PAYMENT_DETAILS].[COD_TITLE]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TITLE_LOCK_PAYMENT_DETAILS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

END;


GO


IF OBJECT_ID('SP_GEN_ALL_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_GEN_ALL_CALENDAR];
GO

CREATE PROCEDURE [SP_GEN_ALL_CALENDAR]
AS
BEGIN
    DECLARE @COD_EC INT;


    DECLARE CURSOR_FIN CURSOR
    FOR SELECT
	[COD_EC]
FROM [COMMERCIAL_ESTABLISHMENT];

OPEN CURSOR_FIN;
FETCH NEXT FROM CURSOR_FIN INTO @COD_EC;

WHILE @@fetch_status = 0
BEGIN

EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

FETCH NEXT FROM CURSOR_FIN INTO @COD_EC;

END;
CLOSE CURSOR_FIN;
DEALLOCATE CURSOR_FIN;
END;
GO


IF OBJECT_ID('SP_FIN_CALENDAR_TFF_ADJ_PRC') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TFF_ADJ_PRC];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TFF_ADJ_PRC](
	@COD_BK_EC     INT, 
	@DATE          DATE, 
	@COD_SITUATION INT  = NULL)
AS
BEGIN
SELECT
	[RA].[COD_REL_ADJ] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[RA].VALUE AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[RA].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
   ,[RA].[IS_PARTIAL]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [RELEASE_ADJUSTMENTS] AS [RA] WITH (NOLOCK)
	ON [RA].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND CAST([FC].[PREVISION_PAY_DATE] AS DATE) <= @DATE
UNION ALL
SELECT
	[TE].[COD_TARIFF_EC] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[TE].VALUE AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[TE].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'TARIFA' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
   ,[TE].[IS_PARTIAL]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [TARIFF_EC] AS [TE] WITH (NOLOCK)
	ON [TE].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND CAST([FC].[PREVISION_PAY_DATE] AS DATE) <= @DATE;

END;

GO



IF OBJECT_ID('SP_MAIN_ADJ') IS NOT NULL
DROP PROCEDURE [SP_MAIN_ADJ];
GO

CREATE PROCEDURE [SP_MAIN_ADJ](
	@COD_ADJ INT)
AS
BEGIN

SELECT
	[RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
   ,[ADJ_PARTIAL].[COD_REL_ADJ]
   ,[RELEASE_ADJUSTMENTS].value
   ,[RELEASE_ADJUSTMENTS].[COMMENT]
   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
FROM [RELEASE_ADJUSTMENTS]
JOIN [RELEASE_ADJUSTMENTS] AS [ADJ_PARTIAL]
	ON [ADJ_PARTIAL].[COD_ORIGIN] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
		AND [ADJ_PARTIAL].[COD_SITUATION] = 4
WHERE [ADJ_PARTIAL].[COD_REL_ADJ] = @COD_ADJ;

END;

GO

IF OBJECT_ID('SP_MAIN_TFF') IS NOT NULL
DROP PROCEDURE [SP_MAIN_TFF];
GO

CREATE PROCEDURE [SP_MAIN_TFF](
	@COD_ADJ INT)
AS
BEGIN
SELECT
	[TARIFF_EC].[COD_TARIFF_EC]
   ,[TFF_PARTIAL].[COD_TARIFF_EC]
   ,[TARIFF_EC].value
   ,[TARIFF_EC].[COMMENT]
   ,[TARIFF_EC].[PAYMENT_DAY] AS [PREVISION_PAY_DATE]
FROM [TARIFF_EC]
JOIN [TARIFF_EC] AS [TFF_PARTIAL]
	ON [TFF_PARTIAL].[COD_ORIGIN] = [TARIFF_EC].[COD_TARIFF_EC]
		AND [TFF_PARTIAL].[COD_SITUATION] = 4
WHERE [TFF_PARTIAL].[COD_TARIFF_EC] = @COD_ADJ;
END;

GO

-- 08515856000101
GO
if object_id('SP_REPORT_RELEASE_ADJUSTMENTS') IS NOT NULL DROP PROCEDURE SP_REPORT_RELEASE_ADJUSTMENTS
GO
CREATE PROCEDURE [DBO].[SP_REPORT_RELEASE_ADJUSTMENTS]                  
    
/***********************************************************************************************************
----------------------------------------------------------------------------------------                  
Procedure Name: [SP_REPORT_RELEASE_ADJUSTMENTS]                  
Project.......: TKPP                  
------------------------------------------------------------------------------------------                  
Author                          VERSION         Date            Description                  
------------------------------------------------------------------------------------------                  
Kennedy Alef                    V1              27/07/2018      Creation                  
Gian Luca Dalle Cort            V2              04/10/2018      Changed                
Lucas Aguiar              v3              26/11/2018      Changed              
Luiz Aquino                     v4              06/05/2019      Adicionar NSU              
Elir Ribeiro                   v5             23/08/2019       add motivo,justificativa          
------------------------------------------------------------------------------------------    
***********************************************************************************************************/                  
               
(
	@INITIAL_DATE         DATETIME, 
	@FINAL_DATE           DATETIME, 
	@CODCOMP              INT, 
	@CPFEC                VARCHAR(100), 
	@CODAFF               INT          = NULL, 
	@COD_EC               INT          = NULL, 
	@TRACKING_TRANSACTION VARCHAR(100) = NULL, 
	@DESCRIPTION          VARCHAR(100) = NULL, 
	@NSU                  VARCHAR(255) = NULL, 
	@NSUEXT               VARCHAR(255) = NULL)
AS
BEGIN
    DECLARE @QUERY_BASIS NVARCHAR(MAX);


SET @QUERY_BASIS = '                  
    SELECT [RELEASE_ADJUSTMENTS].[COD_REL_ADJ],     
   CAST([DBO].[FN_FUS_UTF] ( [RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE] ) AS DATETIME) AS [PREVISION_PAY_DATE],     
   [RELEASE_ADJUSTMENTS].VALUE,     
   [FINANCE_CALENDAR].[EC_NAME] AS [NAME],     
   [FINANCE_CALENDAR].[EC_CPF_CNPJ] as [CPF_CNPJ],     
   ISNULL([PROTOCOLS].[PROTOCOL], ''-'') AS [PROTOCOL],     
   [TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION],     
   [FINANCE_CALENDAR].[AFFILIATOR_NAME] as [NAME_AFFILIATOR],     
   [POSWEB_DATA_TRANSACTION].[TRACKING_TRANSACTION] AS [COD_RAST],     
   [POSWEB_DATA_TRANSACTION].[DESCRIPTION] AS [DESCRIPTION],     
   [REPORT_TRANSACTIONS].[TRANSACTION_CODE] AS [NSU],     
   [REPORT_TRANSACTIONS].[NSU_EXT] AS [EXTERNALNSU],    
   [TYPE_JUSTIFICATION].[DESCRIPTION] AS [DESCRIPTION_JUSTIFY],     
   [RELEASE_ADJUSTMENTS].[COMMENT],    
   CAST([DBO].[FN_FUS_UTF] ( [PROTOCOLS].[CREATED_AT] ) AS DATETIME) AS [TRANSACTION_DATE],     
   ISNULL([USERS].[COD_ACCESS], '' '') AS [USUARIO],     
   [RELEASE_ADJUSTMENTS].[IS_PARTIAL],     
   [ADJ_PARTIAL].VALUE AS [ORIGINAL_VALUE],
   ADJ_PARTIAL.COD_REL_ADJ as COD_REL_ADJ_PARTIAL
FROM [FINANCE_CALENDAR]    
 JOIN [RELEASE_ADJUSTMENTS] ON [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR]    
 JOIN [TRADUCTION_SITUATION](NOLOCK) ON [TRADUCTION_SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]    
 LEFT JOIN [RELEASE_ADJUSTMENTS] AS [ADJ_PARTIAL] ON [ADJ_PARTIAL].[COD_REL_ADJ] = [RELEASE_ADJUSTMENTS].[COD_ORIGIN]    
 LEFT JOIN [PROTOCOLS] ON [PROTOCOLS].[COD_PAY_PROT] = [RELEASE_ADJUSTMENTS].[COD_PAY_PROT]    
 LEFT JOIN [POSWEB_DATA_TRANSACTION](NOLOCK) ON [POSWEB_DATA_TRANSACTION].[COD_POS_DATA] = [RELEASE_ADJUSTMENTS].[COD_POS_DATA]    
 LEFT JOIN [REPORT_TRANSACTIONS](NOLOCK) ON [REPORT_TRANSACTIONS].[COD_TRAN] = [POSWEB_DATA_TRANSACTION].[COD_TRAN] OR [REPORT_TRANSACTIONS].[COD_TRAN] = [RELEASE_ADJUSTMENTS].[COD_TRAN]    
 LEFT JOIN [TYPE_JUSTIFICATION] ON [TYPE_JUSTIFICATION].[COD_TYPEJUST] = [RELEASE_ADJUSTMENTS].[COD_TYPEJUST]    
 LEFT JOIN [USERS] ON [USERS].[COD_USER] = [RELEASE_ADJUSTMENTS].[COD_USER]    
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1 and    
 CAST([dbo].[FN_FUS_UTF](RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE) as DATETIME) BETWEEN  ''' + CAST(@INITIAL_DATE AS VARCHAR) + ''' AND ''' + CAST(@FINAL_DATE AS VARCHAR) + '''               
     AND FINANCE_CALENDAR.COD_COMP = ' + CAST(@CODCOMP AS VARCHAR);

    IF @CPFEC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.EC_CPF_CNPJ  = @CPFEC ');

IF @CODAFF IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.COD_AFFILIATOR = @CodAff ');

IF @COD_EC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.COD_EC  = @COD_EC ');

IF LEN(@TRACKING_TRANSACTION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND POSWEB_DATA_TRANSACTION.TRACKING_TRANSACTION  = @TRACKING_TRANSACTION ');

IF LEN(@DESCRIPTION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND POSWEB_DATA_TRANSACTION.DESCRIPTION  LIKE  ''%' + @DESCRIPTION + '%''');

IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND  REPORT_TRANSACTIONS.TRANSACTION_CODE = @NSU ');

IF LEN(@NSUEXT) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND  REPORT_TRANSACTIONS.NSU_EXT = @NSUEXT ');

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '   ORDER BY CAST([dbo].[FN_FUS_UTF](RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE) as DATETIME) DESC,  FINANCE_CALENDAR.COD_EC');

EXEC [sp_executesql] @QUERY_BASIS
					,N' @CPFEC VARCHAR(14),                  
    @CodAff INT,              
    @COD_EC INT,              
    @TRACKING_TRANSACTION  VARCHAR(100),              
    @DESCRIPTION  VARCHAR(100),              
    @NSU VARCHAR(255),              
    @NSUEXT VARCHAR(255)              
    '
					,@CPFEC = @CPFEC
					,@CODAFF = @CODAFF
					,@COD_EC = @COD_EC
					,@TRACKING_TRANSACTION = @TRACKING_TRANSACTION
					,@DESCRIPTION = @DESCRIPTION
					,@NSU = @NSU
					,@NSUEXT = @NSUEXT;

--SELECT @QUERY_BASIS            
END;

GO



IF OBJECT_ID('[SP_REPORT_TARIFF]') IS NOT NULL
DROP PROCEDURE [SP_REPORT_TARIFF];
GO

CREATE PROCEDURE [DBO].[SP_REPORT_TARIFF]      

/***********************************************************************************************
----------------------------------------------------------------------------------------      
Procedure Name: [SP_REPORT_TARIFF]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                          VERSION        Date                            Description      
------------------------------------------------------------------------------------------      
Kennedy Alef     V1      27/07/2018        Creation      
------------------------------------------------------------------------------------------
***********************************************************************************************/
          
(
	@INITIAL_DATE DATETIME, 
	@FINAL_DATE   DATETIME, 
	@CODCOMP      INT, 
	@CPFEC        VARCHAR(100), 
	@CODAFF       INT          = NULL)
AS
BEGIN
    DECLARE @QUERY_BASIS NVARCHAR(MAX);

    BEGIN

SET @QUERY_BASIS = '      
SELECT [TARIFF_EC].[PLOT], 
	  [TARIFF_EC].[CREATED_AT], 
	  [TARIFF_EC].[PAYMENT_DAY] AS [PREVISION_PAY_DAY], 
	  [TARIFF_EC].VALUE, 
	  [TFF_PARTIAL].VALUE AS [ORIGINAL_VALUE], 
	  [FINANCE_CALENDAR].[EC_NAME] AS [NAME], 
	  [FINANCE_CALENDAR].[EC_CPF_CNPJ] AS [CPF_CNPJ], 
	  ISNULL([PROTOCOLS].[PROTOCOL], ''-'') AS [PROTOCOL], 
	  [TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION], 
	  [PROTOCOLS].[CREATED_AT] AS [PAYMENT_DAY], 
	  [FINANCE_CALENDAR].[COD_AFFILIATOR], 
	  [FINANCE_CALENDAR].[AFFILIATOR_NAME] AS [NAME_AFFILIATOR],
	  [TARIFF_EC].[IS_PARTIAL],
	  TFF_PARTIAL.COD_TARIFF_EC as COD_TARIFF_EC_PARTIAL,
	  TARIFF_EC.COD_TARIFF_EC,
	  TARIFF_EC.COMMENT
FROM [FINANCE_CALENDAR]
	JOIN [TARIFF_EC] ON [TARIFF_EC].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR]
	LEFT JOIN [TARIFF_EC] AS [TFF_PARTIAL] ON [TFF_PARTIAL].[COD_TARIFF_EC] = [TARIFF_EC].[COD_ORIGIN]
	LEFT JOIN [PROTOCOLS] ON [PROTOCOLS].[COD_PAY_PROT] = [TARIFF_EC].[COD_PAY_PROT]
	JOIN [TRADUCTION_SITUATION] ON [TRADUCTION_SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1   
AND TARIFF_EC.PAYMENT_DAY BETWEEN  ''' + CAST(@INITIAL_DATE AS VARCHAR) + ''' AND ''' + CAST(@FINAL_DATE AS VARCHAR) + '''      
 AND FINANCE_CALENDAR.COD_COMP = ''' + CAST(@CODCOMP AS VARCHAR) + ''' ';


	   IF @CPFEC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.EC_CPF_CNPJ  = @CPFEC ');

IF @CODAFF IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.COD_AFFILIATOR  = @CodAff ');

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY TARIFF_EC.PAYMENT_DAY DESC, FINANCE_CALENDAR.cod_ec');


--EXECUTE (@QUERY_BASIS);      
EXEC [sp_executesql] @QUERY_BASIS
					,N'      
@CPFEC varchar(14),      
@CodAff INT      
'
					,@CPFEC = @CPFEC
					,@CODAFF = @CODAFF;

END;
END;

GO


IF OBJECT_ID('[SP_CANCEL_TARIFF_EC]') IS NOT NULL
DROP PROCEDURE [SP_CANCEL_TARIFF_EC];
GO

CREATE PROCEDURE [DBO].[SP_CANCEL_TARIFF_EC]  
    
/*****************************************************************************************************
----------------------------------------------------------------------------------------  
    Procedure Name: [SP_CANCEL_TARIFF_EC]  
    Project.......: TKPP  
    ------------------------------------------------------------------------------------------  
    Author                          VERSION        Date                            Description  
    ------------------------------------------------------------------------------------------  
    Kennedy Alef     V1    27/07/2018      Creation  
    Luiz Aquino                     v2              03/07/2019        Filter bank details by is_cerc  
    ------------------------------------------------------------------------------------------
*****************************************************************************************************/
  
(
	@COD_TARIFF    INT, 
	@CODUSER       INT, 
	@COD_EC        INT, 
	@JUSTITICATIVE VARCHAR(300))
AS
BEGIN
    DECLARE @CONT INT;
    DECLARE @COD_ORIGIN INT;
    DECLARE @IS_PARTIAL INT;
    DECLARE @TARIFF_VALUE DECIMAL(22, 6);
    DECLARE @PROT_GENERATED VARCHAR(100);
    BEGIN

SELECT
	@CONT = COUNT(*)
   ,@TARIFF_VALUE = [TARIFF_EC].[value]
   ,@COD_ORIGIN = [TARIFF_EC].[COD_ORIGIN]
   ,@IS_PARTIAL = [TARIFF_EC].[IS_PARTIAL]
FROM [TARIFF_EC]
WHERE [COD_TARIFF_EC] = @COD_TARIFF
AND [COD_SITUATION] = 4
GROUP BY [value]
		,[TARIFF_EC].[COD_ORIGIN]
		,[TARIFF_EC].[IS_PARTIAL];

IF @CONT < 1
THROW 61031, 'INVALID TARIFF TO CANCEL', 1;

INSERT INTO [PROTOCOLS] ([PROTOCOL],
[value],
[COD_EC],
[COD_USER],
[COD_BK_EC],
[COD_TYPE_PROT],
[JUSTIFICATIVE])
	VALUES ((NEXT VALUE FOR [SEQ_PROT_PAY]), @TARIFF_VALUE, @COD_EC, @CODUSER, (SELECT [COD_BK_EC] FROM [BANK_DETAILS_EC] WHERE [COD_EC] = @COD_EC AND [ACTIVE] = 1 AND [IS_CERC] = 0), 2, @JUSTITICATIVE);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER CANCELING PROTOCOL ', 1;

SELECT
	@PROT_GENERATED = @@identity;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 6
   ,[COD_PAY_PROT] = @PROT_GENERATED
WHERE [COD_TARIFF_EC] = @COD_TARIFF;

IF @IS_PARTIAL = 1
BEGIN
UPDATE [TARIFF_EC]
SET value = value - @TARIFF_VALUE
WHERE [TARIFF_EC].[COD_TARIFF_EC] = @COD_ORIGIN;
END;

SELECT
	@PROT_GENERATED AS [PROTOCOL];

END;
END;


GO

IF OBJECT_ID('[SP_PROCESS_FINANCE_RATE]') IS NOT NULL
DROP PROCEDURE [SP_PROCESS_FINANCE_RATE];
GO

CREATE PROCEDURE [SP_PROCESS_FINANCE_RATE](
	@COD_EC INT)
AS
BEGIN

EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;
END;

GO

-- 08515856000101


CREATE NONCLUSTERED INDEX [IX_TRAN_TITLE_COD_SIT_FIN_CALENDAR_SEARCH]
ON [dbo].[TRANSACTION_TITLES] ([COD_SITUATION],[COD_FIN_CALENDAR])


CREATE NONCLUSTERED INDEX [IX_FN_CALENDAR_ACTIVE_PROTOCOL]
ON [dbo].[FINANCE_CALENDAR] ([ACTIVE],[COD_PAY_PROT])





GO

--SELECT 
-- count(*)
--FROM transaction_titles WHERE COD_SITUATION=8  AND COD_FIN_CALENDAR IS NOT NULL

GO

--WITH CTE
--AS
--(
--SELECT 
--top 500000
--transaction_titles.cod_title 
--FROM transaction_titles WHERE COD_SITUATION=8  AND COD_FIN_CALENDAR IS NOT NULL
--)
--UPDATE 
--transaction_titles SET transaction_titles.COD_FIN_CALENDAR = NULL
--WHERE transaction_titles.cod_title IN (
--SELECT * FROM CTE
--)



--go


--UPDATE FINANCE_CALENDAR SET ACTIVE = 0 WHERE COD_SITUATION=8 AND ACTIVE=1

--WITH CTE
--AS
--(
--SELECT 
--FINANCE_CALENDAR.COD_FIN_CALENDAR 
--FROM FINANCE_CALENDAR WHERE COD_SITUATION=8 AND ACTIVE=1
--)
--UPDATE 
--FINANCE_CALENDAR SET ACTIVE = 0
--WHERE FINANCE_CALENDAR.COD_FIN_CALENDAR IN (
--SELECT * FROM CTE
--)



IF OBJECT_ID('tempdb..#TMP_PROTOCOLS_PROCESSED') IS NOT NULL
DROP TABLE #TMP_PROTOCOLS_PROCESSED;

IF OBJECT_ID('tempdb..#TMP_PROTOCOLS_PROCESSED') IS NOT NULL
DROP TABLE #TMP_PROTOCOLS_PROCESSED;

GO
SELECT
	PROTOCOLS.CREATED_AT AS PREVISION_PAY_DATE
   ,PROTOCOLS.[value] PLOT_VALUE_PAYMENT
   ,8 AS COD_SITUATION
   ,PROTOCOLS.COD_BK_EC
   ,BANK_DETAILS_EC.COD_BANK
   ,BANKS.CODE AS CODE_BANK
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS COD_TYPE_ACCOUNT
   ,ACCOUNT_TYPE.CODE AS ACCOUNT_TYPE
   ,AGENCY
   ,DIGIT_AGENCY
   ,ACCOUNT
   ,DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,OPERATION.CODE AS OPERATION_CODE
   ,OPERATION.[DESCRIPTION] OPERATION_DESC
   ,BANK_DETAILS_EC.IS_CERC
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,COMMERCIAL_ESTABLISHMENT.CODE AS COMMERCIAL_CODE
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS EC_CPF_CNPJ
   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS EC_NAME
   ,TYPE_ESTAB.CODE TYPE_ESTAB
   ,COMMERCIAL_ESTABLISHMENT.[TRADING_NAME]
   ,AFFILIATOR.COD_AFFILIATOR
   ,AFFILIATOR.[NAME] AFFILIATOR_NAME
   ,AFFILIATOR.CPF_CNPJ AFFILIATOR_CPF_CNPJ
   ,(
	ISNULL(
	ISNULL((SELECT
		TOP 1
			COD_FIN_SCH_FILE
		FROM [TRANSACTION_TITLES]
		WHERE COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT)
	, (SELECT
		TOP 1
			COD_FIN_SCH_FILE
		FROM RELEASE_ADJUSTMENTS
		WHERE COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT)
	), (SELECT
		TOP 1
			COD_FIN_SCH_FILE
		FROM TARIFF_EC
		WHERE COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT)
	--

	)
	) AS COD_FIN_SCH_FILE
   ,PROTOCOLS.COD_PAY_PROT
   ,BANKS.[PRIORITY]
   ,BANKS.[NAME] BANK
   ,COMMERCIAL_ESTABLISHMENT.COD_COMP INTO #TMP_PROTOCOLS_PROCESSED
FROM PROTOCOLS
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = PROTOCOLS.COD_EC
JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BK_EC = PROTOCOLS.COD_BK_EC
JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN OPERATION_BANK
	ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
LEFT JOIN OPERATION
	ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT



--select * from protocols where protocol='412074248'

--select protocols.*, PLOT_VALUE_PAYMENT from protocols
--JOIN FINANCE_CALENDAR ON FINANCE_CALENDAR.COD_PAY_PROT = protocols.COD_PAY_PROT
--			AND FINANCE_CALENDAR.ACTIVE=1
--where FINANCE_CALENDAR.cod_pay_prot=388511
--select * from finance_calendar where cod_pay_prot=389570 and active=1

--SELECT top 10 *
--FROM TRANSACTION_TITLES
--JOIN TITLE_LOCK_PAYMENT_DETAILS ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
--WHERE
--TRANSACTION_TITLES.COD_SITUATION = 8 AND
--TRANSACTION_TITLES.COD_PAY_PROT IS NOT NULL AND
--TITLE_LOCK_PAYMENT_DETAILS.COD_PAY_PROT <> TRANSACTION_TITLES.COD_PAY_PROT 


-- PROT TITTLE 180551
-- PROT LOCK 191878
GO






INSERT INTO FINANCE_CALENDAR (PREVISION_PAY_DATE
, PLOT_VALUE_PAYMENT
, COD_SITUATION
, COD_BK_EC
, COD_BANK
, CODE_BANK
, AGENCY
, DIGIT_AGENCY
, ACCOUNT
, DIGIT_ACCOUNT
, COD_TYPE_ACCOUNT
, ACCOUNT_TYPE
, COD_OPER_BANK
, OPERATION_CODE
, OPERATION_DESC
, IS_LOCK
, IS_ASSIGNMENT
, ASSIGNMENT_NAME
, ASSIGNMENT_IDENTIFICATION
, COD_EC
, COMMERCIAL_CODE
, EC_CPF_CNPJ
, EC_NAME
, TYPE_ESTAB
, TRADING_NAME
, COD_AFFILIATOR
, AFFILIATOR_NAME
, AFFILIATOR_CPF_CNPJ
, COD_FIN_SCH_FILE
, COD_PAY_PROT
, ACTIVE
, [PRIORITY]
, BANK
, COD_COMP)
	SELECT
		PREVISION_PAY_DATE
	   ,PLOT_VALUE_PAYMENT
	   ,COD_SITUATION
	   ,COD_BK_EC
	   ,COD_BANK
	   ,CODE_BANK
	   ,AGENCY
	   ,DIGIT_AGENCY
	   ,ACCOUNT
	   ,DIGIT_ACCOUNT
	   ,COD_TYPE_ACCOUNT
	   ,ACCOUNT_TYPE
	   ,COD_OPER_BANK
	   ,OPERATION_CODE
	   ,OPERATION_DESC
	   ,IS_CERC
	   ,IS_ASSIGNMENT
	   ,ASSIGNMENT_NAME
	   ,ASSIGNMENT_IDENTIFICATION
	   ,COD_EC
	   ,COMMERCIAL_CODE
	   ,EC_CPF_CNPJ
	   ,EC_NAME
	   ,TYPE_ESTAB
	   ,TRADING_NAME
	   ,COD_AFFILIATOR
	   ,AFFILIATOR_NAME
	   ,AFFILIATOR_CPF_CNPJ
	   ,COD_FIN_SCH_FILE
	   ,COD_PAY_PROT
	   ,1
	   ,[PRIORITY]
	   ,BANK
	   ,COD_COMP
	FROM #TMP_PROTOCOLS_PROCESSED

GO


SELECT
	COD_TITLE
   ,COD_PAY_PROT
   ,(SELECT
			COD_FIN_CALENDAR
		FROM FINANCE_CALENDAR
		WHERE FINANCE_CALENDAR.ACTIVE = 1
		AND FINANCE_CALENDAR.COD_PAY_PROT = TRANSACTION_TITLES.COD_PAY_PROT)
	AS COD_FINANCE_CALENDAR
--INTO #TMP_TITLES_UPDATE
FROM TRANSACTION_TITLES
WHERE COD_FIN_CALENDAR IS NULL



--UPDATE TRANSACTION_TITLES
--SET 
DECLARE @CONT INT = 0

WHILE @CONT < 10 
BEGIN
WITH CTE
AS
(SELECT
	TOP 500000
		TRANSACTION_TITLES.COD_TITLE AS PK
	   ,(SELECT
				COD_FIN_CALENDAR
			FROM FINANCE_CALENDAR
			JOIN PROTOCOLS
				ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
				AND FINANCE_CALENDAR.ACTIVE = 1
				AND FINANCE_CALENDAR.COD_PAY_PROT = ISNULL(TRANSACTION_TITLES.COD_PAY_PROT, TITLE_LOCK_PAYMENT_DETAILS.COD_PAY_PROT))
		AS COD_FIN_CALENDAR
	FROM TRANSACTION_TITLES
	LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
		ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
	WHERE TRANSACTION_TITLES.COD_SITUATION = 8
	AND COD_FIN_CALENDAR IS NULL)
UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_FIN_CALENDAR = CTE.COD_FIN_CALENDAR
FROM TRANSACTION_TITLES
JOIN CTE
	ON CTE.PK = TRANSACTION_TITLES.COD_TITLE
--WHERE TRANSACTION_TITLES.COD_TITLE = CTE.PK

SET @CONT = @CONT + 1
END
GO
-- 734220




UPDATE RELEASE_ADJUSTMENTS
SET RELEASE_ADJUSTMENTS.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM RELEASE_ADJUSTMENTS WITH (NOLOCK)
JOIN PROTOCOLS
	ON RELEASE_ADJUSTMENTS.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
	AND FINANCE_CALENDAR.ACTIVE = 1
WHERE RELEASE_ADJUSTMENTS.COD_SITUATION = 8
AND RELEASE_ADJUSTMENTS.COD_FIN_CALENDAR IS NULL



UPDATE TARIFF_EC
SET TARIFF_EC.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM TARIFF_EC WITH (NOLOCK)
JOIN PROTOCOLS
	ON TARIFF_EC.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
WHERE TARIFF_EC.COD_SITUATION = 8
AND TARIFF_EC.COD_FIN_CALENDAR IS NULL





IF OBJECT_ID('tempdb..#TMP_PENDING') IS NOT NULL
DROP TABLE #TMP_PENDING;

IF OBJECT_ID('tempdb..#TMP_PENDING_CONFIRM') IS NOT NULL
DROP TABLE #TMP_PENDING_CONFIRM;


-- SITUATION 17

WITH CTE
AS
(SELECT
		TRANSACTION_TITLES.COD_TITLE
	   ,TRANSACTION_TITLES.COD_EC
	   ,'TITTLE' AS [TYPE]
	   ,TRANSACTION_TITLES.COD_FIN_SCH_FILE
	   ,(
		(
		(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END, (TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS AMOUNT
	FROM TRANSACTION_TITLES
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TRANSACTION_TITLES.COD_FIN_SCH_FILE
	LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
		ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
	WHERE TRANSACTION_TITLES.COD_SITUATION = 17
	AND TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET IS NULL
	UNION
	SELECT
		RELEASE_ADJUSTMENTS.COD_REL_ADJ
	   ,RELEASE_ADJUSTMENTS.COD_EC
	   ,'ADJUSTMENT' AS [TYPE]
	   ,RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	   ,RELEASE_ADJUSTMENTS.[value] AS AMOUNT
	FROM RELEASE_ADJUSTMENTS
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	WHERE RELEASE_ADJUSTMENTS.COD_SITUATION = 17
	UNION
	SELECT
		TARIFF_EC.COD_TARIFF_EC
	   ,TARIFF_EC.COD_EC
	   ,'TARIFF' AS [TYPE]
	   ,TARIFF_EC.COD_FIN_SCH_FILE
	   ,TARIFF_EC.[value] AS AMOUNT
	FROM TARIFF_EC
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TARIFF_EC.COD_FIN_SCH_FILE
	WHERE TARIFF_EC.COD_SITUATION = 17
	UNION
	SELECT
		TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_EC
	   ,'TITTLE_LOCK' AS [TYPE]
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE
	   ,TITLE_LOCK_PAYMENT_DETAILS.AMOUNT
	FROM TITLE_LOCK_PAYMENT_DETAILS
	JOIN TRANSACTION_TITLES
		ON TRANSACTION_TITLES.COD_TITLE = TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE
	WHERE TITLE_LOCK_PAYMENT_DETAILS.COD_SITUATION = 17
	AND TRANSACTION_TITLES.COD_FIN_SCH_FILE IS NULL)
SELECT

	COD_FIN_SCH_FILE
   ,COD_EC
   ,SUM(AMOUNT) AS AMOUNT INTO #TMP_PENDING

FROM CTE
GROUP BY COD_FIN_SCH_FILE
		,COD_EC



GO



SELECT
	CAST(FINANCE_SCHEDULE_FILE.CREATED_AT AS DATE) AS PREVISION_PAY_DATE
   ,#TMP_PENDING.AMOUNT
   ,17 AS COD_SITUATION
   ,FINANCE_SCHEDULE_FILE.COD_BK_EC
   ,BANKS.COD_BANK COD_BANK
   ,BANKS.CODE CODE_BANK
   ,AGENCY
   ,DIGIT_AGENCY
   ,ACCOUNT
   ,DIGIT_ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
   ,ACCOUNT_TYPE.[NAME] ACCOUNT_TYPE
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,OPERATION.CODE OPERATION_CODE
   ,OPERATION.[DESCRIPTION] OPERATION_DESC
   ,BANK_DETAILS_EC.IS_CERC IS_LOCK
   ,IS_ASSIGNMENT
   ,ASSIGNMENT_NAME
   ,ASSIGNMENT_IDENTIFICATION
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,COMMERCIAL_ESTABLISHMENT.CODE COMMERCIAL_CODE
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ EC_CPF_CNPJ
   ,COMMERCIAL_ESTABLISHMENT.[NAME] EC_NAME
   ,TYPE_ESTAB.CODE TYPE_ESTAB
   ,TRADING_NAME
   ,AFFILIATOR.COD_AFFILIATOR
   ,AFFILIATOR.[NAME] AFFILIATOR_NAME
   ,AFFILIATOR.CPF_CNPJ AFFILIATOR_CPF_CNPJ
   ,#TMP_PENDING.COD_FIN_SCH_FILE
   ,NULL AS COD_PAY_PROT
   ,1 AS ACTIVE
   ,BANKS.[PRIORITY]
   ,BANKS.[NAME] AS BANK
   ,COMMERCIAL_ESTABLISHMENT.COD_COMP INTO #TMP_PENDING_CONFIRM
FROM #TMP_PENDING
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = #TMP_PENDING.COD_EC
JOIN FINANCE_SCHEDULE_FILE
	ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = #TMP_PENDING.COD_FIN_SCH_FILE
JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BK_EC = FINANCE_SCHEDULE_FILE.COD_BK_EC
JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN OPERATION_BANK
	ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
LEFT JOIN OPERATION
	ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT




--SELECT SUM(AMOUNT) FROM #TMP_PENDING WHERE COD_EC = 6472



--SELECT SUM(AMOUNT) FROM  #TMP_PENDING WHERE COD_EC= 624

--SELECT * FROM COMMERCIAL_ESTABLISHMENT WHERE COD_EC=6472

--SELECT  * FROM #TMP_PENDING
--JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = #TMP_PENDING.COD_EC
--JOIN FINANCE_SCHEDULE_FILE ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = #TMP_PENDING.COD_FIN_SCH_FILE
--LEFT JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_BK_EC = FINANCE_SCHEDULE_FILE.COD_BK_EC


GO



--SELECT TRANSACTION_TITLES.* FROM TITLE_LOCK_PAYMENT_DETAILS 
--JOIN TRANSACTION_TITLES ON TRANSACTION_TITLES.COD_TITLE = TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE
--WHERE  TRANSACTION_TITLES.COD_EC = 3581 AND TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE = 217772

--SELECT * FROM TARIFF_EC WHERE COD_FIN_SCH_FILE=217772

--SELECT * FROM RELEASE_ADJUSTMENTS WHERE COD_FIN_SCH_FILE=217772

--SELECT * FROM TARIFF_EC WHERE COD_EC= 3581 AND COD_SITUATION=4 ORDER BY PAYMENT_DAY DESC




UPDATE FINANCE_CALENDAR
SET PAYMENT_DATE = PREVISION_PAY_DATE
WHERE PAYMENT_DATE IS NULL
AND COD_SITUATION = 17
AND ACTIVE = 1



GO



INSERT INTO FINANCE_CALENDAR (PREVISION_PAY_DATE
, PLOT_VALUE_PAYMENT
, COD_SITUATION
, COD_BK_EC
, COD_BANK
, CODE_BANK
, AGENCY
, DIGIT_AGENCY
, ACCOUNT
, DIGIT_ACCOUNT
, COD_TYPE_ACCOUNT
, ACCOUNT_TYPE
, COD_OPER_BANK
, OPERATION_CODE
, OPERATION_DESC
, IS_LOCK
, IS_ASSIGNMENT
, ASSIGNMENT_NAME
, ASSIGNMENT_IDENTIFICATION
, COD_EC
, COMMERCIAL_CODE
, EC_CPF_CNPJ
, EC_NAME
, TYPE_ESTAB
, TRADING_NAME
, COD_AFFILIATOR
, AFFILIATOR_NAME
, AFFILIATOR_CPF_CNPJ
, COD_FIN_SCH_FILE
, COD_PAY_PROT
, ACTIVE
, [PRIORITY]
, BANK
, COD_COMP)


	SELECT
		PREVISION_PAY_DATE
	   ,AMOUNT
	   ,COD_SITUATION
	   ,COD_BK_EC
	   ,COD_BANK
	   ,CODE_BANK
	   ,AGENCY
	   ,DIGIT_AGENCY
	   ,ACCOUNT
	   ,DIGIT_ACCOUNT
	   ,COD_TYPE_ACCOUNT
	   ,ACCOUNT_TYPE
	   ,COD_OPER_BANK
	   ,OPERATION_CODE
	   ,OPERATION_DESC
	   ,IS_LOCK
	   ,IS_ASSIGNMENT
	   ,ASSIGNMENT_NAME
	   ,ASSIGNMENT_IDENTIFICATION
	   ,COD_EC
	   ,COMMERCIAL_CODE
	   ,EC_CPF_CNPJ
	   ,EC_NAME
	   ,TYPE_ESTAB
	   ,TRADING_NAME
	   ,COD_AFFILIATOR
	   ,AFFILIATOR_NAME
	   ,AFFILIATOR_CPF_CNPJ
	   ,COD_FIN_SCH_FILE
	   ,COD_PAY_PROT
	   ,1
	   ,[PRIORITY]
	   ,BANK
	   ,COD_COMP
	FROM #TMP_PENDING_CONFIRM


UPDATE [TRANSACTION_TITLES]
SET TRANSACTION_TITLES.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM TRANSACTION_TITLES
LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
	ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_SCH_FILE = ISNULL(TRANSACTION_TITLES.COD_FIN_SCH_FILE, TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE)
	AND FINANCE_CALENDAR.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION
	AND FINANCE_CALENDAR.ACTIVE = 1

WHERE FINANCE_CALENDAR.COD_SITUATION = 17

UPDATE RELEASE_ADJUSTMENTS
SET RELEASE_ADJUSTMENTS.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM RELEASE_ADJUSTMENTS
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_SCH_FILE = RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	AND FINANCE_CALENDAR.COD_SITUATION = RELEASE_ADJUSTMENTS.COD_SITUATION
	AND FINANCE_CALENDAR.ACTIVE = 1
WHERE FINANCE_CALENDAR.COD_SITUATION = 17

UPDATE TARIFF_EC
SET TARIFF_EC.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM TARIFF_EC
JOIN FINANCE_CALENDAR
	ON TARIFF_EC.COD_FIN_SCH_FILE = FINANCE_CALENDAR.COD_FIN_SCH_FILE
	AND FINANCE_CALENDAR.COD_SITUATION = FINANCE_CALENDAR.COD_SITUATION
	AND FINANCE_CALENDAR.ACTIVE = 1

WHERE TARIFF_EC.COD_SITUATION = 17

GO








--  ** UNASSOCIATE FINANCE_CALENDAR


--UPDATE TRANSACTION_TITLES SET COD_FIN_CALENDAR=NULL WHERE COD_SITUATION=17
--UPDATE RELEASE_ADJUSTMENTS SET COD_FIN_CALENDAR=NULL WHERE COD_SITUATION=17
--UPDATE TARIFF_EC SET COD_FIN_CALENDAR=NULL WHERE COD_SITUATION=17
--UPDATE FINANCE_CALENDAR SET ACTIVE=0 WHERE COD_SITUATION=17






--select * from FINANCE_CALENDAR where 
--EC_CPF_CNPJ = '09354049000117'
--AND
--COD_SITUATION=17 and ACTIVE=1
--GO


--SELECT * FROM TRANSACTION_TITLES WHERE COD_FIN_CALENDAR=47384
--SELECT * FROM TARIFF_EC WHERE COD_FIN_CALENDAR=47384
--SELECT * FROM RELEASE_ADJUSTMENTS WHERE COD_FIN_CALENDAR=47384
--GO

SELECT TOP 100
	*
FROM TITLE_LOCK_PAYMENT_DETAILS
ORDER BY 1 DESC
GO

--SELECT * FROM FINANCE_CALENDAR WHERE ACTIVE=1 AND IS_LOCK=1 

--223145


--UPDATE [TRANSACTION_TITLES] SET 
--TRANSACTION_TITLES.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR 



UPDATE [TITLE]
SET [TITLE].[COD_SITUATION] = [LOCK].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS] AS [LOCK]
JOIN [TRANSACTION_TITLES] AS [TITLE]
	ON [TITLE].[COD_TITLE] = [LOCK].[COD_TITLE]
	AND [TITLE].[COD_SITUATION] <> [LOCK].[COD_SITUATION];


GO

							