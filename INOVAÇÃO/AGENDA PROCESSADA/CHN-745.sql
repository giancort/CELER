IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_FIN_CALENDAR'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE [TRANSACTION_TITLES]
ADD [COD_FIN_CALENDAR] INT;
END;
GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_ORIGIN'
	AND object_id = OBJECT_ID(N'TARIFF_EC'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [COD_ORIGIN] INT;
END;
GO
IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_ORIGIN'
	AND object_id = OBJECT_ID(N'RELEASE_ADJUSTMENTS'))
BEGIN
ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD [COD_ORIGIN] INT;
END;

GO


IF OBJECT_ID('FINANCE_CALENDAR') IS NOT NULL
DROP TABLE [FINANCE_CALENDAR];
GO

CREATE TABLE [FINANCE_CALENDAR](
	[COD_FIN_CALENDAR]          INT IDENTITY PRIMARY KEY, 
	[PREVISION_PAY_DATE]        DATETIME, 
	[PLOT_VALUE_PAYMENT]        DECIMAL(22, 6), 
	[COD_SITUATION]             INT, 
	[COD_BK_EC]                 INT, 
	[COD_BANK]                  INT, 
	[CODE_BANK]                 VARCHAR(100), 
	[PRIORITY]                  INT, 
	[BANK]                      VARCHAR(255), 
	[AGENCY]                    VARCHAR(100), 
	[DIGIT_AGENCY]              VARCHAR(10), 
	[ACCOUNT]                   VARCHAR(100), 
	[DIGIT_ACCOUNT]             VARCHAR(100), 
	[COD_TYPE_ACCOUNT]          INT, 
	[ACCOUNT_TYPE]              VARCHAR(100), 
	[COD_OPER_BANK]             INT, 
	[OPERATION_CODE]            VARCHAR(100), 
	[OPERATION_DESC]            VARCHAR(100), 
	[ACTIVE]                    INT DEFAULT 1, 
	[IS_LOCK]                   INT, 
	[IS_ASSIGNMENT]             INT, 
	[ASSIGNMENT_NAME]           VARCHAR(255), 
	[ASSIGNMENT_IDENTIFICATION] VARCHAR(14), 
	[COD_EC]                    INT, 
	[COD_COMP]                  INT, 
	[COMMERCIAL_CODE]           VARCHAR(100), 
	[EC_CPF_CNPJ]               VARCHAR(14), 
	[EC_NAME]                   VARCHAR(100), 
	[TYPE_ESTAB]                VARCHAR(100), 
	[TRADING_NAME]              VARCHAR(100), 
	[COD_AFFILIATOR]            INT, 
	[AFFILIATOR_NAME]           VARCHAR(100), 
	[AFFILIATOR_CPF_CNPJ]       VARCHAR(100), 
	[COD_FIN_SCH_FILE]          INT, 
	[COD_PAY_PROT]              INT, 
	[PAYMENT_DATE]              DATETIME, 
	CONSTRAINT [FK_FINANCE_CALENDAR_SITUATION] FOREIGN KEY([COD_SITUATION]) REFERENCES [SITUATION]([COD_SITUATION]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_BANK_DETAILS_EC] FOREIGN KEY([COD_BK_EC]) REFERENCES [BANK_DETAILS_EC]([COD_BK_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_BANK] FOREIGN KEY([COD_BANK]) REFERENCES [BANKS]([COD_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_ACCOUNT] FOREIGN KEY([COD_TYPE_ACCOUNT]) REFERENCES [ACCOUNT_TYPE]([COD_TYPE_ACCOUNT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_OPERATION_BANK] FOREIGN KEY([COD_OPER_BANK]) REFERENCES [OPERATION_BANK]([COD_OPER_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_COMMERCIAL] FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_AFFILIATOR] FOREIGN KEY([COD_AFFILIATOR]) REFERENCES [AFFILIATOR]([COD_AFFILIATOR]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_FILE] FOREIGN KEY([COD_FIN_SCH_FILE]) REFERENCES [FINANCE_SCHEDULE_FILE]([COD_FIN_SCH_FILE]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_PROTOCOL] FOREIGN KEY([COD_PAY_PROT]) REFERENCES [PROTOCOLS]([COD_PAY_PROT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_COMP] FOREIGN KEY([COD_COMP]) REFERENCES [COMPANY]([COD_COMP]));
GO


IF OBJECT_ID('FINANCE_CALENDAR_HIST') IS NOT NULL
DROP TABLE [FINANCE_CALENDAR_HIST];
GO

CREATE TABLE [FINANCE_CALENDAR_HIST](
	[COD_FIN_CALENDAR_HIST]     INT IDENTITY PRIMARY KEY, 
	[CREATED_AT]                DATETIME DEFAULT current_timestamp, 
	[COD_USER]                  INT, 
	[COD_FIN_CALENDAR]          INT, 
	[PREVISION_PAY_DATE]        DATETIME, 
	[PLOT_VALUE_PAYMENT]        DECIMAL(22, 6), 
	[COD_SITUATION]             INT, 
	[COD_BK_EC]                 INT, 
	[COD_BANK]                  INT, 
	[CODE_BANK]                 VARCHAR(100), 
	[PRIORITY]                  INT, 
	[BANK]                      VARCHAR(255), 
	[AGENCY]                    VARCHAR(100), 
	[DIGIT_AGENCY]              VARCHAR(10), 
	[ACCOUNT]                   VARCHAR(100), 
	[DIGIT_ACCOUNT]             VARCHAR(100), 
	[COD_TYPE_ACCOUNT]          INT, 
	[ACCOUNT_TYPE]              VARCHAR(100), 
	[COD_OPER_BANK]             INT, 
	[OPERATION_CODE]            VARCHAR(100), 
	[OPERATION_DESC]            VARCHAR(100), 
	[ACTIVE]                    INT DEFAULT 1, 
	[IS_LOCK]                   INT, 
	[IS_ASSIGNMENT]             INT, 
	[ASSIGNMENT_NAME]           VARCHAR(255), 
	[ASSIGNMENT_IDENTIFICATION] VARCHAR(14), 
	[COD_EC]                    INT, 
	[COD_COMP]                  INT, 
	[COMMERCIAL_CODE]           VARCHAR(100), 
	[EC_CPF_CNPJ]               VARCHAR(14), 
	[EC_NAME]                   VARCHAR(100), 
	[TYPE_ESTAB]                VARCHAR(100), 
	[TRADING_NAME]              VARCHAR(100), 
	[COD_AFFILIATOR]            INT, 
	[AFFILIATOR_NAME]           VARCHAR(100), 
	[AFFILIATOR_CPF_CNPJ]       VARCHAR(100), 
	[COD_FIN_SCH_FILE]          INT, 
	[COD_PAY_PROT]              INT, 
	[PAYMENT_DATE]              DATETIME, 
	[HAS_UNLINK]                INT DEFAULT 0, 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_SITUATION] FOREIGN KEY([COD_SITUATION]) REFERENCES [SITUATION]([COD_SITUATION]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_BANK_DETAILS_EC] FOREIGN KEY([COD_BK_EC]) REFERENCES [BANK_DETAILS_EC]([COD_BK_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_BANK] FOREIGN KEY([COD_BANK]) REFERENCES [BANKS]([COD_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_ACCOUNT] FOREIGN KEY([COD_TYPE_ACCOUNT]) REFERENCES [ACCOUNT_TYPE]([COD_TYPE_ACCOUNT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_OPERATION_BANK] FOREIGN KEY([COD_OPER_BANK]) REFERENCES [OPERATION_BANK]([COD_OPER_BANK]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_COMMERCIAL] FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_AFFILIATOR] FOREIGN KEY([COD_AFFILIATOR]) REFERENCES [AFFILIATOR]([COD_AFFILIATOR]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_FILE] FOREIGN KEY([COD_FIN_SCH_FILE]) REFERENCES [FINANCE_SCHEDULE_FILE]([COD_FIN_SCH_FILE]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_PROTOCOL] FOREIGN KEY([COD_PAY_PROT]) REFERENCES [PROTOCOLS]([COD_PAY_PROT]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_USER] FOREIGN KEY([COD_USER]) REFERENCES [USERS]([COD_USER]), 
	CONSTRAINT [FK_FINANCE_CALENDAR_HIST_COMP] FOREIGN KEY([COD_COMP]) REFERENCES [COMPANY]([COD_COMP]));
GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_FIN_CALENDAR'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE [TRANSACTION_TITLES]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_FIN_CALENDAR'
	AND object_id = OBJECT_ID(N'TARIFF_EC'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_FIN_CALENDAR'
	AND object_id = OBJECT_ID(N'RELEASE_ADJUSTMENTS'))
BEGIN
ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'IS_PARTIAL'
	AND object_id = OBJECT_ID(N'RELEASE_ADJUSTMENTS'))
BEGIN
ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD [IS_PARTIAL] INT DEFAULT 0;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'IS_PARTIAL'
	AND object_id = OBJECT_ID(N'[TARIFF_EC]'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [IS_PARTIAL] INT DEFAULT 0;
END;

GO
GO

UPDATE [RELEASE_ADJUSTMENTS]
SET [IS_PARTIAL] = 0;

GO

UPDATE [TARIFF_EC]
SET [IS_PARTIAL] = 0;

GO

ALTER TABLE [TRANSACTION_TITLES]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);

GO

ALTER TABLE [TARIFF_EC]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);

GO

ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);
GO

CREATE NONCLUSTERED INDEX [IX_TARIFF_EC_COD_SITUATION_COD_FIN_CALENDAR] ON [DBO].[TARIFF_EC]([COD_SITUATION]) 
	INCLUDE([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_RELEASE_ADJUSTMENTS_COD_SITUATION_COD_FIN_CALENDAR] ON [DBO].[RELEASE_ADJUSTMENTS]([COD_SITUATION]) 
	INCLUDE([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_TRANSACTION_TITLES_COD_SITUATION_COD_FIN_CALENDAR] ON [DBO].[TRANSACTION_TITLES]([COD_SITUATION]) 
	INCLUDE([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_TITLES_[COD_FIN_CALENDAR_COD_SITUATION] ON [DBO].[TRANSACTION_TITLES]([COD_FIN_CALENDAR]) 
	INCLUDE([COD_SITUATION]);

GO

CREATE NONCLUSTERED INDEX [IX_FIN_CALENDAR_EC_ACTIVE] ON [DBO].[FINANCE_CALENDAR]([ACTIVE], [COD_EC]);

GO

CREATE NONCLUSTERED INDEX [IX_TARIFF_EC_COD_FIN_CALENDAR] ON [DBO].[TARIFF_EC]([COD_FIN_CALENDAR]);

GO

CREATE NONCLUSTERED INDEX [IX_RELEASE_ADJUSTMENTS_COD_FIN_CALENDAR] ON [DBO].[RELEASE_ADJUSTMENTS]([COD_FIN_CALENDAR]);

GO


IF EXISTS (SELECT
		*
	FROM [sys].[VIEWS] AS [V]
	INNER JOIN [sys].[SCHEMAS] AS [S]
		ON [V].schema_id = [S].schema_id
	WHERE [S].[NAME] = 'dbo'
	AND [V].[NAME] = 'VW_ADJ_TFF')
BEGIN
DROP VIEW [VW_ADJ_TFF];
END;

GO

CREATE VIEW [VW_ADJ_TFF]
AS
WITH CTE
AS
(SELECT
		[RELEASE_ADJUSTMENTS].[COD_REL_ADJ] AS 'PK'
	   ,'AJUSTE' AS [TYPE]
	   ,[EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[dbo].[RELEASE_ADJUSTMENTS].[VALUE] AS [PLOT_VALUE_PAYMENT]
	   ,CAST([RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[SITUATION].[COD_SITUATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	FROM [dbo].[RELEASE_ADJUSTMENTS]
	INNER JOIN [dbo].[COMMERCIAL_ESTABLISHMENT] AS [EC]
		ON [EC].[COD_EC] = [RELEASE_ADJUSTMENTS].[COD_EC]
	INNER JOIN [dbo].[SITUATION]
		ON [SITUATION].[COD_SITUATION] = [RELEASE_ADJUSTMENTS].[COD_SITUATION]
	INNER JOIN [dbo].[BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [EC].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [EC].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [BANK_DETAILS_EC].[IS_CERC] = 0
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [EC].[COD_AFFILIATOR]
	WHERE [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
	AND [RELEASE_ADJUSTMENTS].value> 0
	UNION ALL
	SELECT
		[TARIFF_EC].[COD_TARIFF_EC] AS 'PK'
	   ,'TARIFA' AS [TYPE]
	   ,[EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[dbo].[TARIFF_EC].[VALUE] AS [PLOT_VALUE_PAYMENT]
	   ,CAST([TARIFF_EC].[PAYMENT_DAY] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[SITUATION].[COD_SITUATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	FROM [dbo].[TARIFF_EC]
	INNER JOIN [dbo].[COMMERCIAL_ESTABLISHMENT] AS [EC]
		ON [EC].[COD_EC] = [TARIFF_EC].[COD_EC]
	INNER JOIN [dbo].[SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TARIFF_EC].[COD_SITUATION]
	INNER JOIN [dbo].[BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [EC].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [EC].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [BANK_DETAILS_EC].[IS_CERC] = 0
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [EC].[COD_AFFILIATOR]
	WHERE [TARIFF_EC].[COD_SITUATION] = 4
	AND ([BRANCH_EC].[COD_TYPE_REC] = 1))
SELECT
	[PK]
   ,[TYPE]
   ,[COD_EC]
   ,[COD_BRANCH]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_SITUATION]
   ,[COD_AFFILIATOR]
   ,[COD_BK_EC]
FROM [CTE];

GO

IF EXISTS (SELECT
		*
	FROM [sys].[VIEWS] AS [V]
	INNER JOIN [sys].[SCHEMAS] AS [S]
		ON [V].schema_id = [S].schema_id
	WHERE [S].[NAME] = 'dbo'
	AND [V].[NAME] = 'VW_TITLES')
BEGIN
DROP VIEW [VW_TITLES];
END;
GO

CREATE VIEW [VW_TITLES]
AS
WITH CTE_TITLES_CERC
AS
(SELECT
		CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
		CASE
			WHEN [TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL THEN 1
			ELSE 1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
					WHEN [TRANSACTION_TITLES].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE])
					ELSE [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]
				END, ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) / 100)
		END) - (CASE
			WHEN [TRANSACTION_TITLES].[PLOT] = 1 THEN [TRANSACTION_TITLES].[RATE]
			ELSE 0
		END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[TRANSACTION_TITLES].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[TRANSACTION_TITLES].[COD_TITLE]
	   ,[TRANSACTION].[COD_TRAN]
	   ,CAST([TRANSACTION_TITLES].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[TRANSACTION_TITLES].[COD_SITUATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,CASE
			WHEN [AFFILIATOR].[COD_SITUATION] = 24 THEN 1
			WHEN [COMMERCIAL_ESTABLISHMENT].[COD_SITUATION] = 24 THEN 1
			ELSE 0
		END AS [BLOCKED_FINANCE]
	   ,1 AS [IS_LOCKED]
	   ,'TITLE' AS [TYPE]
	FROM [TRANSACTION_TITLES](NOLOCK)
	JOIN [TRANSACTION](NOLOCK)
		ON [TRANSACTION].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]
	JOIN [BRAND](NOLOCK)
		ON [TRANSACTION].[BRAND] = [BRAND].[NAME]
		AND [TRANSACTION].[COD_TTYPE] = [BRAND].[COD_TTYPE]
	JOIN [BANK_DETAILS_EC](NOLOCK)
		ON [BANK_DETAILS_EC].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [IS_CERC] = 1
	JOIN [BANK_DETAILS_CERC_INFO](NOLOCK)
		ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
		AND [BANK_DETAILS_CERC_INFO].[COD_BRAND] = [BRAND].[COD_BRAND]
	JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK)
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
	LEFT JOIN [AFFILIATOR](NOLOCK)
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TRANSACTION_TITLES].[COD_SITUATION] = 4),
CTE_TITLES_EC
AS
(SELECT
		CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
		CASE
			WHEN [TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL THEN 1
			ELSE 1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
					WHEN [TRANSACTION_TITLES].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE])
					ELSE [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]
				END, ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) / 100)
		END) - (CASE
			WHEN [TRANSACTION_TITLES].[PLOT] = 1 THEN [TRANSACTION_TITLES].[RATE]
			ELSE 0
		END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[TRANSACTION_TITLES].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[TRANSACTION_TITLES].[COD_TITLE]
	   ,[TRANSACTION].[COD_TRAN]
	   ,CAST([TRANSACTION_TITLES].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
	   ,[TRANSACTION_TITLES].[COD_SITUATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,CASE
			WHEN [AFFILIATOR].[COD_SITUATION] = 24 THEN 1
			WHEN [COMMERCIAL_ESTABLISHMENT].[COD_SITUATION] = 24 THEN 1
			ELSE 0
		END AS [BLOCKED_FINANCE]
	   ,0 AS [IS_LOCKED]
	   ,'TITLE' AS [TYPE]
	FROM [TRANSACTION_TITLES](NOLOCK)
	JOIN [TRANSACTION](NOLOCK)
		ON [TRANSACTION].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]
	JOIN [BANK_DETAILS_EC](NOLOCK)
		ON [BANK_DETAILS_EC].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [IS_CERC] = 0
	JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK)
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
	LEFT JOIN [AFFILIATOR](NOLOCK)
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [CTE_TITLES_CERC] AS [LOCK]
		ON [LOCK].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
	WHERE [TRANSACTION_TITLES].[COD_SITUATION] = 4
	AND [LOCK].[COD_TITLE] IS NULL),
CTE_ALL
AS
(SELECT
		*
	FROM [CTE_TITLES_CERC]
	UNION ALL
	SELECT
		*
	FROM [CTE_TITLES_EC])
SELECT
	[COD_EC]
   ,[COD_BRANCH]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE]
   ,[COD_TRAN]
   ,[COD_SITUATION]
   ,[COD_AFFILIATOR]
   ,[BLOCKED_FINANCE]
   ,[IS_LOCKED]
   ,[TYPE]
FROM [CTE_ALL];
GO


GO

IF EXISTS (SELECT
		*
	FROM [sys].[VIEWS] AS [V]
	INNER JOIN [sys].[SCHEMAS] AS [S]
		ON [V].schema_id = [S].schema_id
	WHERE [S].[NAME] = 'dbo'
	AND [V].[NAME] = 'VW_RELEASES_FINANCE')
BEGIN
DROP VIEW [VW_RELEASES_FINANCE];
END;
GO

CREATE VIEW [VW_RELEASES_FINANCE]
AS
SELECT
	[COD_EC]
   ,[PLOT_VALUE_PAYMENT] AS [TITLE]
   ,0 AS [ADJ]
   ,0 AS [TARIFF]
   ,[COD_BK_EC]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE] AS [PK]
   ,[IS_LOCKED]
   ,[COD_SITUATION]
FROM [VW_TITLES]
UNION ALL
SELECT
	[COD_EC]
   ,0 AS [TITLE]
   ,[PLOT_VALUE_PAYMENT] AS [ADJ]
   ,0 AS [TARIFF]
   ,[COD_BK_EC]
   ,[PREVISION_PAY_DATE]
   ,[PK]
   ,0
   ,[COD_SITUATION]
FROM [VW_ADJ_TFF]
WHERE [TYPE] = 'AJUSTE'
AND [PLOT_VALUE_PAYMENT] > 0;
--UNION ALL
--SELECT [COD_EC], 
--	  0 AS [TITLE], 
--	  0 AS [ADJ], 
--	  [PLOT_VALUE_PAYMENT] AS [TARIFF], 
--	  [COD_BK_EC], 
--	  [PREVISION_PAY_DATE], 
--	  [PK], 
--	  0, 
--	  [COD_SITUATION]
--FROM [VW_ADJ_TFF]
--WHERE [TYPE] = 'TARIFA';  



GO

IF OBJECT_ID('FINANCE_RESUME') IS NOT NULL
DROP TABLE [FINANCE_RESUME];
GO

CREATE TABLE [FINANCE_RESUME](
	[COD_FIN_RESUME]    INT
	PRIMARY KEY IDENTITY, 
	[CREATED_AT]        DATETIME DEFAULT current_timestamp, 
	[TITLES_VALUE]      DECIMAL(22, 6) DEFAULT 0.0, 
	[ADJUSTMENTS_VALUE] DECIMAL(22, 6) DEFAULT 0.0, 
	[TARIFF_VALUE]      DECIMAL(22, 6) DEFAULT 0.0, 
	[COD_FIN_CALENDAR]  INT, 
	[ACTIVE]            INT DEFAULT 1, 
	FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]));

GO

-- ******************************************************************************************


IF OBJECT_ID('SP_GEN_FINANCE_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_GEN_FINANCE_CALENDAR];
GO

CREATE PROCEDURE [SP_GEN_FINANCE_CALENDAR](
	@TP [CODE_TYPE] READONLY)
AS
BEGIN

    -- param procedure
    DECLARE @PREVISION_PAY_DATE DATE;

    DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);

    DECLARE @COD_SITUATION INT;

    DECLARE @COD_BK_EC INT;

    DECLARE @BANK VARCHAR(255);

    DECLARE @PRIORITY INT;

    DECLARE @COD_BANK INT;

    DECLARE @CODE_BANK VARCHAR(255);

    DECLARE @AGENCY VARCHAR(255);

    DECLARE @DIGIT_AGENCY VARCHAR(255);

    DECLARE @ACCOUNT VARCHAR(255);

    DECLARE @DIGIT_ACCOUNT VARCHAR(255);

    DECLARE @COD_TYPE_ACCOUNT INT;

    DECLARE @ACCOUNT_TYPE VARCHAR(255);

    DECLARE @COD_OPER_BANK INT;

    DECLARE @OPERATION_CODE VARCHAR(255);

    DECLARE @OPERATION_DESC VARCHAR(255);

    DECLARE @IS_LOCK INT;

    DECLARE @IS_ASSIGNMENT INT;

    DECLARE @ASSIGNMENT_NAME VARCHAR(255);

    DECLARE @ASSIGNMENT_IDENTIFICATION VARCHAR(255);

    DECLARE @COD_EC INT;

    DECLARE @COMMERCIAL_CODE VARCHAR(255);

    DECLARE @EC_CPF_CNPJ VARCHAR(14);

    DECLARE @EC_NAME VARCHAR(255);

    DECLARE @TYPE_ESTAB VARCHAR(255);

    DECLARE @TRADING_NAME VARCHAR(255);

    DECLARE @COD_AFFILIATOR INT;

    DECLARE @AFFILIATOR_NAME VARCHAR(255);

    DECLARE @AFFILIATOR_CPF_CNPJ VARCHAR(14);

    DECLARE @COD_FINANCE_CALENDAR INT;

    DECLARE @COD_COMP INT;


SELECT
	[VW_RELEASES_FINANCE].[COD_EC]
   ,SUM([TITLE]) AS [TITLE]
   ,SUM([ADJ]) AS [ADJ]
   ,SUM([TARIFF]) AS [TARIFF]
   ,[PREVISION_PAY_DATE]
   ,[COD_BK_EC]
   ,[IS_LOCKED]
   ,[COD_SITUATION]
   ,CAST(0 AS DECIMAL(22, 6)) AS [TOTAL]
   ,0 AS [EXCLUDE] INTO [#RELEASES_FIN]
FROM [VW_RELEASES_FINANCE]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW_RELEASES_FINANCE].[COD_EC]
GROUP BY [VW_RELEASES_FINANCE].[COD_EC]
		,[VW_RELEASES_FINANCE].[PREVISION_PAY_DATE]
		,[VW_RELEASES_FINANCE].[COD_BK_EC]
		,[VW_RELEASES_FINANCE].[IS_LOCKED]
		,[COD_SITUATION];




SELECT
	[VW].* INTO [#ALL_TITLES]
FROM [VW_TITLES] AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC];


SELECT
	[VW].* INTO [#ALL_ADJ_TARIFF]
FROM [VW_ADJ_TFF] AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC];


-- delete [FINANCE_CALENDAR] quando ec já exitir para a data de previsão e estiver com a situação 4

SELECT
	[COD_FIN_CALENDAR] INTO [#FINANCE_CALENDAR_EXISTS]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4;


UPDATE [FINANCE_RESUME]
SET [ACTIVE] = 0
FROM [FINANCE_RESUME]
WHERE [FINANCE_RESUME].[COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR_EXISTS]);


UPDATE [FINANCE_CALENDAR]
SET [ACTIVE] = 0
FROM [FINANCE_CALENDAR]
WHERE [FINANCE_CALENDAR].[COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR_EXISTS]);



-- Buscar maior valor cerc

SELECT
	MAX([TITLE]) AS [MAX_VALUE]
   ,[COD_EC]
   ,[PREVISION_PAY_DATE] INTO [#MAX_VALUE_LOCK]
FROM [#RELEASES_FIN]
WHERE [IS_LOCKED] = 1
GROUP BY [COD_EC]
		,[PREVISION_PAY_DATE];


SELECT
	SUM([ADJ]) AS [ADJ]
   ,SUM([TARIFF]) AS [TARIFF]
   ,[#RELEASES_FIN].[COD_EC]
   ,[#RELEASES_FIN].[PREVISION_PAY_DATE] INTO [#DISCOUNTS_CERC]
FROM [#RELEASES_FIN]
LEFT JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [#RELEASES_FIN].[COD_EC]
		AND [MAX_VALUE].[PREVISION_PAY_DATE] = [#RELEASES_FIN].[PREVISION_PAY_DATE] -- essa porra aqui
WHERE (CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) < 0
AND [MAX_VALUE].[COD_EC] IS NOT NULL
GROUP BY [#RELEASES_FIN].[COD_EC]
		,[#RELEASES_FIN].[PREVISION_PAY_DATE];


--atribuição de valores das tarifas

UPDATE [T]
SET [T].[TARIFF] = [#DISCOUNTS_CERC].[TARIFF]
   ,[T].[ADJ] = [#DISCOUNTS_CERC].[ADJ]
FROM [#RELEASES_FIN] AS [T]
JOIN [#MAX_VALUE_LOCK] [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [T].[COD_EC]
	AND [T].[TITLE] = [MAX_VALUE].[MAX_VALUE]
	AND [T].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE]
JOIN [#DISCOUNTS_CERC]
	ON [#DISCOUNTS_CERC].[COD_EC] = [T].[COD_EC]
	AND [T].[PREVISION_PAY_DATE] = [#DISCOUNTS_CERC].[PREVISION_PAY_DATE];

UPDATE [RELEASE]
SET [RELEASE].[TARIFF] = 0.0
   ,[RELEASE].[ADJ] = 0.0
FROM [#RELEASES_FIN] AS [RELEASE]
JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [RELEASE].[COD_EC]
WHERE ((CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) <= 0
AND [RELEASE].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE])
AND [RELEASE].[IS_LOCKED] = 0;


UPDATE [#RELEASES_FIN]
SET [TOTAL] = ([#RELEASES_FIN].[TITLE] + [#RELEASES_FIN].[ADJ] + [#RELEASES_FIN].[TARIFF]);


UPDATE [#RELEASES_FIN]
SET [EXCLUDE] = 1
FROM [#RELEASES_FIN] [RF]
WHERE ([RF].[TARIFF] < 0.001
AND [RF].[TARIFF] > -0.001)
AND ([RF].[TITLE] < 0.001
AND [RF].[TITLE] > -0.001)
AND ([RF].[ADJ] < 0.001
AND [RF].[ADJ] > -0.001);



--  UPDATE [#ALL_ADJ_TARIFF]
--SET 
--[COD_BK_EC] = [#RELEASES_FIN].[COD_BK_EC]
--  FROM [#ALL_ADJ_TARIFF]
--   JOIN [#RELEASES_FIN] ON [#RELEASES_FIN].[COD_EC] = [#ALL_ADJ_TARIFF].[COD_EC]
--				   AND [#RELEASES_FIN].[PREVISION_PAY_DATE] = [#ALL_ADJ_TARIFF].[PREVISION_PAY_DATE]
--				   AND [#RELEASES_FIN].[EXCLUDE] = 0
--				   AND [#RELEASES_FIN].[IS_LOCKED] = 1
--				   AND (([#RELEASES_FIN].[TARIFF] > 0.001
--					    OR [#RELEASES_FIN].[TARIFF] < -0.001)
--					   OR ([#RELEASES_FIN].[ADJ] > 0.001
--						  OR [#RELEASES_FIN].[ADJ] < -0.001));


-- cursor para inserção da finance_calendar

DECLARE FINANCE_CURSOR CURSOR FOR SELECT
	[FINANCE].[PREVISION_PAY_DATE]
   ,[FINANCE].[TOTAL]
   ,[FINANCE].[COD_SITUATION]
   ,[FINANCE].[COD_BK_EC]
   ,[BANK_DETAILS_EC].[COD_BANK]
   ,[BANKS].[NAME] AS [NAME_BANK]
   ,[BANKS].[PRIORITY]
   ,[BANKS].[CODE] AS [CODE_BANK]
   ,[BANK_DETAILS_EC].[AGENCY]
   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
   ,[BANK_DETAILS_EC].[ACCOUNT]
   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
   ,[BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
   ,[ACCOUNT_TYPE].[NAME] AS [ACCOUNT_TYPE]
   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
   ,[OPERATION].[CODE] AS [OPERATION]
   ,[OPERATION].[DESCRIPTION]
   ,[FINANCE].[IS_LOCKED]
   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
   ,[FINANCE].[COD_EC]
   ,[COMMERCIAL_ESTABLISHMENT].[CODE] AS [EC_CODE]
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ] AS [EC_CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME] AS [EC_NAME]
   ,[TYPE_ESTAB].[CODE] AS [TYPE_EC]
   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
   ,[AFFILIATOR].[NAME] AS [AFF_NAME]
   ,[AFFILIATOR].[CPF_CNPJ] AS [AFF_CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
FROM [#RELEASES_FIN] AS [FINANCE]
JOIN [BANK_DETAILS_EC]
	ON [BANK_DETAILS_EC].[COD_BK_EC] = [FINANCE].[COD_BK_EC]
JOIN [BANKS]
	ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
JOIN [ACCOUNT_TYPE]
	ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
LEFT JOIN [OPERATION_BANK]
	ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
LEFT JOIN [OPERATION]
	ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [FINANCE].[COD_EC]
JOIN [TYPE_ESTAB]
	ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
LEFT JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
WHERE [FINANCE].[EXCLUDE] = 0
ORDER BY [FINANCE].[COD_BK_EC],
[FINANCE].[TOTAL],
[FINANCE].[PREVISION_PAY_DATE];

OPEN FINANCE_CURSOR;

FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

WHILE @@fetch_status = 0
BEGIN

-- inserção da finance_calendar

SET @COD_FINANCE_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	VALUES (@PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @BANK, @PRIORITY, @COD_BANK, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP);

-- atualização da pk nos títulos, ajustes e tarifas
SET @COD_FINANCE_CALENDAR = @@identity;


UPDATE [TRANSACTION_TITLES]
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM [TRANSACTION_TITLES]
JOIN [#ALL_TITLES] [TITLE]
	ON [TITLE].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
	AND [TITLE].[COD_BK_EC] = @COD_BK_EC
	AND CAST([TITLE].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE
JOIN @TP [TP]
	ON [TP].[CODE] = [TITLE].[COD_EC];

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM [RELEASE_ADJUSTMENTS]
JOIN [#ALL_ADJ_TARIFF] [ADJ]
	ON [ADJ].[PK] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
	AND [TYPE] = 'AJUSTE'
	AND [ADJ].[COD_BK_EC] = @COD_BK_EC
	AND CAST([ADJ].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE;

--  UPDATE [TARIFF_EC]
--SET 
--    [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
--  FROM [TARIFF_EC]
--   JOIN [#ALL_ADJ_TARIFF] [TARIFF] ON [TARIFF].[PK] = [TARIFF_EC].[COD_TARIFF_EC]
--							   AND [TYPE] = 'TARIFA'
--							   AND [TARIFF].[COD_BK_EC] = @COD_BK_EC
--							   AND CAST([TARIFF].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE;

INSERT INTO [FINANCE_RESUME] ([TITLES_VALUE],
[ADJUSTMENTS_VALUE],
[TARIFF_VALUE],
[COD_FIN_CALENDAR])
	SELECT
		[TITLE]
	   ,[ADJ]
	   ,[TARIFF]
	   ,@COD_FINANCE_CALENDAR
	FROM [#RELEASES_FIN]
	WHERE [COD_EC] = @COD_EC
	AND [COD_BK_EC] = @COD_BK_EC
	AND [PREVISION_PAY_DATE] = @PREVISION_PAY_DATE;
FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

END;

CLOSE FINANCE_CURSOR;

DEALLOCATE FINANCE_CURSOR;

END;

GO

IF OBJECT_ID('SP_CLS_FIN_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_CLS_FIN_CALENDAR];
GO

CREATE PROCEDURE [SP_CLS_FIN_CALENDAR]
AS
BEGIN

DELETE FROM [FINANCE_RESUME]
WHERE [ACTIVE] = 0;

DELETE FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 0;

END;

GO

IF OBJECT_ID('SP_FINANCE_CALENDAR_PRC') IS NOT NULL
DROP PROCEDURE [SP_FINANCE_CALENDAR_PRC];
GO

CREATE PROCEDURE [SP_FINANCE_CALENDAR_PRC](
	@INITIAL_DATE    DATETIME, 
	@FINAL_DATE      DATETIME, 
	@EC              [CODE_TYPE] READONLY, 
	@BANK            [CODE_TYPE] READONLY, 
	@CODAFF          [CODE_TYPE] READONLY, 
	@ACCOUNT         [CODE_TYPE] READONLY, 
	@CODSITUATION    INT         = NULL, 
	@ONLY_ASSIGNMENT INT         = 0, 
	@ONLY_LOCKED     INT         = 0)
AS
BEGIN
SET NOCOUNT ON;
SET ARITHABORT ON;

    DECLARE @QUERY NVARCHAR(MAX);

SET @QUERY = '        
   SELECT  
    [FINANCE_CALENDAR].[COD_EC] as BusinessEstablishmentInsideCode,         
   [FINANCE_CALENDAR].[TRADING_NAME] AS BusinessEstablishment,         
   [FINANCE_CALENDAR].[EC_CPF_CNPJ] AS Identification,         
   sum([FINANCE_CALENDAR].[PLOT_VALUE_PAYMENT]) as Amount,         
   @INITIAL_DATE as DatePrevisionPayment,         
   [FINANCE_CALENDAR].[COD_BANK],         
   [FINANCE_CALENDAR].[PRIORITY],         
   [FINANCE_CALENDAR].[CODE_BANK] as BankCode,         
   [FINANCE_CALENDAR].[BANK] as BankName,         
   [FINANCE_CALENDAR].[ACCOUNT] BankAccount,         
   [FINANCE_CALENDAR].[DIGIT_ACCOUNT] as DigitAccount,         
   [FINANCE_CALENDAR].[AGENCY] as BankAgency,         
   [FINANCE_CALENDAR].[DIGIT_AGENCY] as DigitAgency,         
   [FINANCE_CALENDAR].[ACCOUNT_TYPE] as BankTypeAccount,         
   [FINANCE_CALENDAR].[OPERATION_CODE] as OperationCode,         
   [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT],         
   (CASE        
    WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 30        
     AND [EC].[COD_SITUATION] <> 24        
     AND ([AFF].[COD_SITUATION] <> 24        
      OR [AFF].[COD_SITUATION] IS NULL) THEN ''AGUARDANDO SPLIT''        
    WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 17        
     AND [EC].[COD_SITUATION] <> 24        
     AND ([AFF].[COD_SITUATION] <> 24        
      OR [AFF].[COD_SITUATION] IS NULL) THEN ''CONFIRMACAO''        
    WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 4        
     AND [EC].[COD_SITUATION] <> 24        
     AND ([AFF].[COD_SITUATION] <> 24        
      OR [AFF].[COD_SITUATION] IS NULL) THEN ''PAGAMENTO''        
    WHEN [EC].[COD_SITUATION] = 24        
     OR [AFF].[COD_SITUATION] = 24 THEN ''AGENDA SUSPENSA''       
    END) AS Situation,         
   [FINANCE_CALENDAR].[COD_AFFILIATOR] as AffiliatorInsideCode,         
   [FINANCE_CALENDAR].[AFFILIATOR_NAME] AS Affiliator,         
   [FINANCE_CALENDAR].[COD_SITUATION] as SituationInsideCode,         
   [SITUATION].[NAME] AS [SITUATION_NAME],         
   [FINANCE_CALENDAR].[IS_ASSIGNMENT] as Assignment,         
   [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION] as IdentificationAssignment,         
   [FINANCE_CALENDAR].[IS_LOCK] AS HasLock,         
   IIF([COD_TYPE_ACCOUNT] = 3, 1, 0) AS IsPaymentAccount,         
   [FINANCE_CALENDAR].[COD_COMP],         
   [FINANCE_CALENDAR].[TYPE_ESTAB] as TypeEstab,         
   [FINANCE_CALENDAR].[COD_BK_EC] as BankEcInsideCode        
FROM [FINANCE_CALENDAR]  
 JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC] ON [EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]  
 JOIN [SITUATION] ON [SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]  
 LEFT JOIN [AFFILIATOR] AS [AFF] ON [AFF].[COD_AFFILIATOR] = [FINANCE_CALENDAR].[COD_AFFILIATOR]  
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1 AND [FINANCE_CALENDAR].[COD_SITUATION] IN(4, 17, 30) AND cast([PREVISION_PAY_DATE] as date) <= cast(@INITIAL_DATE as date)';



    IF @ONLY_ASSIGNMENT = 1
SET @QUERY = @QUERY + ' AND [IS_ASSIGNMENT] = 1';

IF @ONLY_LOCKED = 1
SET @QUERY = @QUERY + ' AND [IS_LOCK] = 1';

IF @CODSITUATION IS NOT NULL
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_SITUATION] = @CODSITUATION';

IF (SELECT
			COUNT(*)
		FROM @EC)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_EC] IN (SELECT [CODE] FROM @EC)';

IF (SELECT
			COUNT(*)
		FROM @BANK)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_BANK] IN (SELECT [CODE] FROM @BANK)';

IF (SELECT
			COUNT(*)
		FROM @CODAFF)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_AFFILIATOR] IN (SELECT [CODE] FROM @CODAFF)';

IF (SELECT
			COUNT(*)
		FROM @ACCOUNT)
	> 0
SET @QUERY = @QUERY + ' AND [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT] IN (SELECT [CODE] FROM @ACCOUNT)';


SET @QUERY = @QUERY + '   
      
    GROUP BY [FINANCE_CALENDAR].[COD_EC],   
     [FINANCE_CALENDAR].[TRADING_NAME],   
     [FINANCE_CALENDAR].[EC_CPF_CNPJ],   
     [FINANCE_CALENDAR].[COD_BANK],   
     [FINANCE_CALENDAR].[PRIORITY],   
     [FINANCE_CALENDAR].[CODE_BANK],   
     [FINANCE_CALENDAR].[BANK],   
     [FINANCE_CALENDAR].[ACCOUNT],   
     [FINANCE_CALENDAR].[DIGIT_ACCOUNT],   
     [FINANCE_CALENDAR].[AGENCY],   
     [FINANCE_CALENDAR].[DIGIT_AGENCY],   
     [FINANCE_CALENDAR].[ACCOUNT_TYPE],   
     [FINANCE_CALENDAR].[OPERATION_CODE],   
     [FINANCE_CALENDAR].[COD_TYPE_ACCOUNT],   
     (CASE  
      WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 30 AND [EC].[COD_SITUATION] <> 24 AND ([AFF].[COD_SITUATION] <> 24 OR [AFF].[COD_SITUATION] IS NULL) THEN ''AGUARDANDO SPLIT''  
      WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 17 AND [EC].[COD_SITUATION] <> 24 AND ([AFF].[COD_SITUATION] <> 24 OR [AFF].[COD_SITUATION] IS NULL) THEN ''CONFIRMACAO''  
      WHEN [FINANCE_CALENDAR].[COD_SITUATION] = 4 AND [EC].[COD_SITUATION] <> 24 AND ([AFF].[COD_SITUATION] <> 24 OR [AFF].[COD_SITUATION] IS NULL) THEN ''PAGAMENTO''  
      WHEN [EC].[COD_SITUATION] = 24 OR [AFF].[COD_SITUATION] = 24 THEN ''AGENDA SUSPENSA''  
  END),   
     [FINANCE_CALENDAR].[COD_AFFILIATOR],   
     [FINANCE_CALENDAR].[AFFILIATOR_NAME],   
     [FINANCE_CALENDAR].[COD_SITUATION],   
     [SITUATION].[NAME],   
     [FINANCE_CALENDAR].[IS_ASSIGNMENT],   
     [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION],   
     [FINANCE_CALENDAR].[IS_LOCK],   
     IIF([COD_TYPE_ACCOUNT] = 3, 1, 0),   
     [FINANCE_CALENDAR].[COD_COMP],   
     [FINANCE_CALENDAR].[TYPE_ESTAB],   
     [FINANCE_CALENDAR].[COD_BK_EC]  
    ORDER BY [PRIORITY] DESC,FINANCE_CALENDAR.[COD_EC]';

--SELECT @QUERY;        

EXEC [sp_executesql] @QUERY
					,N'                 
  @INITIAL_DATE DATETIME,                
  @FINAL_DATE DATETIME,                    
  @EC [CODE_TYPE] READONLY,                    
  @BANK [CODE_TYPE] READONLY,                    
  @CodAff [CODE_TYPE] READONLY,                
  @ACCOUNT [CODE_TYPE] READONLY,                         
  @CodSituation INT = NULL,              
  @ONLY_ASSIGNMENT INT = 0,        
  @ONLY_LOCKED INT = 0        
 '
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@EC = @EC
					,@BANK = @BANK
					,@CODAFF = @CODAFF
					,@ACCOUNT = @ACCOUNT
					,@CODSITUATION = @CODSITUATION
					,@ONLY_ASSIGNMENT = @ONLY_ASSIGNMENT
					,@ONLY_LOCKED = @ONLY_LOCKED;

END;

GO

IF OBJECT_ID('SP_FIN_CALENDAR_TITLES_PRC') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TITLES_PRC];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TITLES_PRC](
	@COD_BK_EC     INT, 
	@DATE          DATE, 
	@COD_SITUATION INT  = NULL)
AS
BEGIN


SELECT
	[T].[CODE]
   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,CAST((([TT].[AMOUNT] * (1 - ([TT].[TAX_INITIAL] / 100)) *
	CASE
		WHEN [TT].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TT].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TT].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE])
				ELSE [TT].[QTY_DAYS_ANTECIP]
			END, ([TT].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TT].[PLOT] = 1 THEN [TT].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], 'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[S].[NAME] AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'TITLE' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].file_name
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,[TT].[IS_SPOT]
FROM [FINANCE_CALENDAR] AS [F]
JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
	ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
	ON [T].[COD_TRAN] = [TT].[COD_TRAN]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[COD_BK_EC] = @COD_BK_EC
AND [F].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [F].[ACTIVE] = 1
AND CAST([F].[PREVISION_PAY_DATE] AS DATE) <= @DATE;
END;

GO


IF OBJECT_ID('SP_LS_FIN_SCHEDULE_PRC') IS NOT NULL
DROP PROCEDURE [SP_LS_FIN_SCHEDULE_PRC];
GO

CREATE PROCEDURE [SP_LS_FIN_SCHEDULE_PRC](
	@TP             [CODE_TYPE] READONLY, 
	@COD_BANK       INT, 
	@PREVISION_DATE DATE)
AS
BEGIN

SELECT
	@PREVISION_DATE AS [PREVISION_PAY_DATE]
   ,SUM([FINANCE_CALENDAR].[PLOT_VALUE_PAYMENT]) AS [PLOT_VALUE_PAYMENT]
   ,[FINANCE_CALENDAR].[CODE_BANK]
   ,[FINANCE_CALENDAR].[AGENCY]
   ,[FINANCE_CALENDAR].[ACCOUNT]
   ,IIF([FINANCE_CALENDAR].[IS_ASSIGNMENT] = 1, [FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION], [FINANCE_CALENDAR].[EC_CPF_CNPJ]) AS [CPF_CNPJ]
   ,[FINANCE_CALENDAR].[EC_NAME] AS [NAME]
   ,[FINANCE_CALENDAR].[AGENCY] AS [AGENCY_EC]
   ,[FINANCE_CALENDAR].[ACCOUNT] AS [ACCOUNT_EC]
   ,[FINANCE_CALENDAR].[COD_AFFILIATOR] AS [COD_AFFILIATOR]
   ,[FINANCE_CALENDAR].[COD_EC]
   ,[FINANCE_CALENDAR].[DIGIT_ACCOUNT] AS [DIGIT_ACCOUNT]
   ,[FINANCE_CALENDAR].[COD_BK_EC]
   ,0 AS [FILE_CODE] INTO [#DATA_FILE]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_BK_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
AND CAST([FINANCE_CALENDAR].[PREVISION_PAY_DATE] AS DATE) <= @PREVISION_DATE
GROUP BY [FINANCE_CALENDAR].[CODE_BANK]
		,[FINANCE_CALENDAR].[IS_ASSIGNMENT]
		,[FINANCE_CALENDAR].[ASSIGNMENT_IDENTIFICATION]
		,[FINANCE_CALENDAR].[EC_CPF_CNPJ]
		,[FINANCE_CALENDAR].[AGENCY]
		,[FINANCE_CALENDAR].[ACCOUNT]
		,[FINANCE_CALENDAR].[EC_NAME]
		,[FINANCE_CALENDAR].[AGENCY]
		,[FINANCE_CALENDAR].[ACCOUNT]
		,[FINANCE_CALENDAR].[COD_AFFILIATOR]
		,[FINANCE_CALENDAR].[COD_EC]
		,[FINANCE_CALENDAR].[DIGIT_ACCOUNT]
		,[FINANCE_CALENDAR].[COD_BK_EC];


IF @COD_BANK = 161
BEGIN
UPDATE [#DATA_FILE]
SET [FILE_CODE] = (NEXT VALUE FOR [SEQ_FINANCE_FILE])
FROM [#DATA_FILE] [PAYMENTS]
WHERE [PAYMENTS].[PLOT_VALUE_PAYMENT] > 0;

END;

IF @COD_BANK = 255
BEGIN
UPDATE [#DATA_FILE]
SET [FILE_CODE] = (NEXT VALUE FOR [SEQ_FINANCE_FILE_SAFRA])
FROM [#DATA_FILE] [PAYMENTS]
WHERE [PAYMENTS].[PLOT_VALUE_PAYMENT] > 0;
END;


SELECT
	[PREVISION_PAY_DATE]
   ,CAST([PLOT_VALUE_PAYMENT] AS DECIMAL(15, 2)) AS [PLOT_VALUE_PAYMENT]
   ,[CODE_BANK]
   ,[AGENCY]
   ,[ACCOUNT]
   ,[CPF_CNPJ]
   ,[NAME]
   ,[ACCOUNT_EC]
   ,[COD_AFFILIATOR]
   ,[COD_EC]
   ,[DIGIT_ACCOUNT]
   ,[COD_BK_EC]
   ,[FILE_CODE]
FROM [#DATA_FILE]
WHERE [PLOT_VALUE_PAYMENT] > 0;

END;

GO


IF OBJECT_ID('SP_LS_VALUE_PAYMENT_PRC') IS NOT NULL
DROP PROCEDURE [SP_LS_VALUE_PAYMENT_PRC];
GO

CREATE PROCEDURE [SP_LS_VALUE_PAYMENT_PRC](
	@TP   [CODE_TYPE] READONLY, 
	@DATE DATE)
AS
BEGIN

SELECT
	[COD_EC]
   ,SUM([PLOT_VALUE_PAYMENT]) AS [PLOT_VALUE_PAYMENT]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_BK_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
AND CAST([FINANCE_CALENDAR].[PREVISION_PAY_DATE] AS DATE) <= @DATE
GROUP BY [COD_EC];

END;


GO


IF OBJECT_ID('SP_GEN_AWAITING_PAYMENTS') IS NOT NULL
DROP PROCEDURE [SP_GEN_AWAITING_PAYMENTS];
GO

CREATE PROCEDURE [SP_GEN_AWAITING_PAYMENTS](
	@TP          [TP_CNAB_PAYMNT] READONLY, 
	@SOURCE_BANK INT, 
	@DATE        DATE)
AS
BEGIN

    DECLARE @COUNT INT= 0;

-- verifico de existo as seq por typebank

SELECT
	@COUNT = COUNT(*)
FROM [FINANCE_SCHEDULE_FILE] AS [FSF]
JOIN @TP AS [TP]
	ON [TP].[SEQ_FILE] = [FSF].[FILE_SEQUENCE]
WHERE [FSF].[TYPE_BANK] = @SOURCE_BANK
AND [FSF].[file_name] = [TP].[file_name];


IF @COUNT > 0
THROW 61005, 'FINANCE_SCHEDULE_FILE ALREADY REGISTERED', 1;

-- insiro na tabela de arquivos

INSERT INTO [dbo].[FINANCE_SCHEDULE_FILE] ([CREATED_AT],
[STATUS],
[file_name],
[FILE_SEQUENCE],
[RETURN_FILE_NAME],
[ACTIVE],
[COD_USER_CREAT],
[MODIFY_DATE],
[COD_USER_MODIFY],
[SEARCH_DATE],
[COD_BK_EC],
[TYPE_BANK],
[TRACEID],
[TRANSACTION_ID],
[AMOUNT])
	SELECT
		GETDATE()
	   ,NULL
	   ,[file_name]
	   ,[SEQ_FILE]
	   ,NULL
	   ,1
	   ,[COD_USER]
	   ,GETDATE()
	   ,[COD_USER]
	   ,[DATE]
	   ,[COD_BK_EC]
	   ,@SOURCE_BANK
	   ,[TRACE_ID]
	   ,[TRANSACTION_ID]
	   ,[AMOUNT]
	FROM @TP AS [F];

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [FINANCE_SCHEDULE_FILE] ', 1;

-- monto um tbl temp que retorna a pk da finance_calendar e a pk do arquivo 

SELECT
	[FC].[COD_FIN_CALENDAR]
   ,[TP].[SEQ_FILE]
   ,[FSF].[COD_FIN_SCH_FILE] INTO [#DATA_FILE]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN @TP AS [TP]
	ON [TP].[COD_EC] = [FC].[COD_EC]
		AND [TP].[COD_BK_EC] = [FC].[COD_BK_EC]
JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[FILE_SEQUENCE] = [TP].[SEQ_FILE]
		AND [FSF].file_name = [TP].file_name
		AND [FSF].[COD_BK_EC] = [FC].[COD_BK_EC]
		AND [FSF].[TYPE_BANK] = @SOURCE_BANK
WHERE [FC].[ACTIVE] = 1
AND [FC].[PREVISION_PAY_DATE] <= @DATE;


-- up para 17 e fk do arquivo na finance_calendar

UPDATE [FINANCE_CALENDAR]
SET [COD_SITUATION] = 17
   ,[COD_FIN_SCH_FILE] = [DF].[COD_FIN_SCH_FILE]
   ,[PAYMENT_DATE] = current_timestamp
FROM [FINANCE_CALENDAR]
JOIN [#DATA_FILE] [DF]
	ON [DF].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
AND [FINANCE_CALENDAR].[COD_FIN_SCH_FILE] IS NULL;

END;

GO




IF OBJECT_ID('SP_RECONCILE_FIN_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_RECONCILE_FIN_CALENDAR];
GO

CREATE PROCEDURE [SP_RECONCILE_FIN_CALENDAR]
--(
--	@COD_EC INT)
AS
BEGIN

UPDATE [TRANSACTION_TITLES]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TRANSACTION_TITLES]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TRANSACTION_TITLES].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([TRANSACTION_TITLES].[COD_PAY_PROT] <> ISNULL([TRANSACTION_TITLES].[COD_PAY_PROT], 0));
--AND [TRANSACTION_TITLES].[COD_EC] = @COD_EC;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [RELEASE_ADJUSTMENTS]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([RELEASE_ADJUSTMENTS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([RELEASE_ADJUSTMENTS].[COD_PAY_PROT] <> ISNULL([RELEASE_ADJUSTMENTS].[COD_PAY_PROT], 0));
--AND [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TARIFF_EC]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TARIFF_EC].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TARIFF_EC].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([TARIFF_EC].[COD_PAY_PROT] <> ISNULL([TARIFF_EC].[COD_PAY_PROT], 0));
--AND [TARIFF_EC].[COD_EC] = @COD_EC;


UPDATE [TITLE_LOCK_PAYMENT_DETAILS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS]
JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].[COD_TITLE] = [TITLE_LOCK_PAYMENT_DETAILS].[COD_TITLE]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TITLE_LOCK_PAYMENT_DETAILS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION]);
--AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

END;

GO



IF OBJECT_ID('[SP_GEN_PAYMENT]') IS NOT NULL
DROP PROCEDURE [SP_GEN_PAYMENT];
GO


CREATE PROCEDURE [SP_GEN_PAYMENT](
	@TP       [FIN_SCH_GEN_PAY_FILE_TP] READONLY, 
	@CODUSER  INT, 
	@PAYDATE  DATETIME, 
	@TYPEBANK INT)
AS
BEGIN

    DECLARE @PROT_FIN_CALENDAR TABLE(
	    [COD_PAY_PROT] INT, 
	    [COD_BK_EC]    INT);

SELECT
	[COD_FIN_SCH_FILE] INTO [#FILE_CODES]
FROM [FINANCE_SCHEDULE_FILE]
JOIN @TP AS [TP]
	ON [TP].[CODE_FILE] = [FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
WHERE [FINANCE_SCHEDULE_FILE].[TYPE_BANK] = @TYPEBANK;



INSERT INTO [PROTOCOLS] ([PROTOCOL],
[CREATED_AT],
VALUE,
[COD_EC],
[COD_BK_EC],
[COD_USER],
[COD_TYPE_PROT],
[COD_ASS_CNAB])
OUTPUT [INSERTED].[COD_PAY_PROT],
[INSERTED].[COD_BK_EC]
INTO @PROT_FIN_CALENDAR ([COD_PAY_PROT],
[COD_BK_EC])
	SELECT
		(NEXT VALUE FOR [SEQ_PROT_PAY])
	   ,[FC].[PAYMENT_DATE]
	   ,SUM([FC].[PLOT_VALUE_PAYMENT])
	   ,[FC].[COD_EC]
	   ,[FC].[COD_BK_EC]
	   ,@CODUSER
	   ,1
	   ,[ASSOCIATE_GENERATE_CNAB].[COD_ASS_CNAB]
	FROM [FINANCE_CALENDAR] AS [FC]
	JOIN [#FILE_CODES] AS [FILE_CODES]
		ON [FILE_CODES].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
	JOIN [ASSOCIATE_GENERATE_CNAB]
		ON [ASSOCIATE_GENERATE_CNAB].[COD_BANK] = @TYPEBANK
			AND [ASSOCIATE_GENERATE_CNAB].[STANDARD_BANK] = 1
			AND [ASSOCIATE_GENERATE_CNAB].[COD_TYPE_ACCOUNT] = 2
			AND [ASSOCIATE_GENERATE_CNAB].[ACTIVE] = 1
	WHERE [FC].[ACTIVE] = 1
	AND [FC].[COD_SITUATION] = 17
	GROUP BY [FC].[PAYMENT_DATE]
			,[FC].[COD_EC]
			,[FC].[COD_BK_EC]
			,[ASSOCIATE_GENERATE_CNAB].[COD_ASS_CNAB];



INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE])
	SELECT
		[COD_FIN_CALENDAR]
	   ,@CODUSER
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	FROM [FINANCE_CALENDAR]
	JOIN [#FILE_CODES] AS [FILE_CODES]
		ON [FILE_CODES].[COD_FIN_SCH_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE];

UPDATE [FCALENDAR]
SET [COD_SITUATION] = 8
   ,[COD_PAY_PROT] = [PROT].[COD_PAY_PROT]
FROM [FINANCE_CALENDAR] AS [FCALENDAR]
JOIN [#FILE_CODES] AS [FCODE]
	ON [FCODE].[COD_FIN_SCH_FILE] = [FCALENDAR].[COD_FIN_SCH_FILE]
JOIN @PROT_FIN_CALENDAR AS [PROT]
	ON [PROT].[COD_BK_EC] = [FCALENDAR].[COD_BK_EC]
WHERE [FCALENDAR].[ACTIVE] = 1
AND [FCALENDAR].[COD_SITUATION] = 17;

END;


GO
	

IF OBJECT_ID('SP_UNLINK_PAYMENT') IS NOT NULL
DROP PROCEDURE [SP_UNLINK_PAYMENT];
GO

CREATE PROCEDURE [DBO].[SP_UNLINK_PAYMENT](
	@TP       [CODE_TYPE] READONLY, 
	@COD_USER INT, 
	@TYPEBANK INT)
AS
BEGIN

SELECT
	[COD_FIN_SCH_FILE] INTO [#FILE_CODES]
FROM [FINANCE_SCHEDULE_FILE]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
WHERE [FINANCE_SCHEDULE_FILE].[TYPE_BANK] = @TYPEBANK;

INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE],
[HAS_UNLINK])
	SELECT
		[COD_FIN_CALENDAR]
	   ,@COD_USER
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [#FILE_CODES] AS [FCODE]
		ON [FCODE].[COD_FIN_SCH_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE];


UPDATE [FCALENDAR]
SET [COD_SITUATION] = 4
   ,[COD_FIN_SCH_FILE] = NULL
   ,[PAYMENT_DATE] = NULL
FROM [FINANCE_CALENDAR] AS [FCALENDAR]
JOIN [#FILE_CODES] AS [FCODE]
	ON [FCODE].[COD_FIN_SCH_FILE] = [FCALENDAR].[COD_FIN_SCH_FILE]
WHERE [FCALENDAR].[ACTIVE] = 1
AND [COD_SITUATION] = 17;
END;

GO

IF OBJECT_ID('[SP_GEN_PAYMENT_UNIT]') IS NOT NULL
DROP PROCEDURE [SP_GEN_PAYMENT_UNIT];
GO

CREATE PROCEDURE [DBO].[SP_GEN_PAYMENT_UNIT](
	@TP      [CODE_TYPE] READONLY, 
	@DATE    DATETIME, 
	@CODUSER INT)
AS
BEGIN

    DECLARE @PROT_FIN_CALENDAR TABLE(
	    [COD_PAY_PROT] INT, 
	    [COD_BK_EC]    INT);


INSERT INTO [PROTOCOLS] ([PROTOCOL],
[CREATED_AT],
VALUE,
[COD_EC],
[COD_BK_EC],
[COD_USER],
[COD_TYPE_PROT])
OUTPUT [INSERTED].[COD_PAY_PROT],
[INSERTED].[COD_BK_EC]
INTO @PROT_FIN_CALENDAR ([COD_PAY_PROT],
[COD_BK_EC])
	SELECT
		(NEXT VALUE FOR [SEQ_PROT_PAY])
	   ,@DATE
	   ,SUM([FC].[PLOT_VALUE_PAYMENT])
	   ,[FC].[COD_EC]
	   ,[FC].[COD_BK_EC]
	   ,@CODUSER
	   ,1
	FROM [FINANCE_CALENDAR] AS [FC]
	JOIN @TP AS [FILE_CODES]
		ON [FILE_CODES].[CODE] = [FC].[COD_BK_EC]
			AND CAST([FC].[PREVISION_PAY_DATE] AS DATE) <= CAST(@DATE AS DATE)
	WHERE [FC].[ACTIVE] = 1
	AND [FC].[COD_SITUATION] = 4
	GROUP BY [FC].[PAYMENT_DATE]
			,[FC].[COD_EC]
			,[FC].[COD_BK_EC];


INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE])
	SELECT
		[COD_FIN_CALENDAR]
	   ,@CODUSER
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	FROM [FINANCE_CALENDAR]
	JOIN @TP AS [FILE_CODES]
		ON [FILE_CODES].[CODE] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR];


UPDATE [FCALENDAR]
SET [COD_SITUATION] = 8
   ,[COD_PAY_PROT] = [PROT].[COD_PAY_PROT]
   ,[PAYMENT_DATE] = GETDATE()
FROM [FINANCE_CALENDAR] AS [FCALENDAR]
JOIN @TP AS [FCODE]
	ON [FCODE].[CODE] = [FCALENDAR].[COD_BK_EC]
JOIN @PROT_FIN_CALENDAR AS [PROT]
	ON [PROT].[COD_BK_EC] = [FCALENDAR].[COD_BK_EC]
WHERE [FCALENDAR].[ACTIVE] = 1
AND [FCALENDAR].[COD_SITUATION] = 4
AND [FCALENDAR].[PREVISION_PAY_DATE] <= @DATE;

END;


GO

IF OBJECT_ID('SP_FIN_CALENDAR_TITLES_UNLINK') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TITLES_UNLINK];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TITLES_UNLINK](
	@COD_BK_EC INT, 
	@DATE      DATE)
AS
BEGIN


SELECT
	[T].[CODE]
   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,CAST((([TT].[AMOUNT] * (1 - ([TT].[TAX_INITIAL] / 100)) *
	CASE
		WHEN [TT].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TT].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TT].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE])
				ELSE [TT].[QTY_DAYS_ANTECIP]
			END, ([TT].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TT].[PLOT] = 1 THEN [TT].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], 'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[S].[NAME] AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'TITLE' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].file_name
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,[TT].[IS_SPOT]
FROM [FINANCE_CALENDAR] AS [F]
JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
	ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
	ON [T].[COD_TRAN] = [TT].[COD_TRAN]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[ACTIVE] = 1
AND [F].[COD_SITUATION] = 17
AND [F].[COD_BK_EC] = @COD_BK_EC;

END;

GO


IF OBJECT_ID('SP_FIN_CALENDAR_TFF_ADJ_UNLINK') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TFF_ADJ_UNLINK];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TFF_ADJ_UNLINK](
	@COD_BK_EC INT, 
	@DATE      DATE)
AS
BEGIN
SELECT
	[RA].[COD_REL_ADJ] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[RA].[VALUE] AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[RA].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [RELEASE_ADJUSTMENTS] AS [RA] WITH (NOLOCK)
	ON [RA].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND [FC].[COD_SITUATION] = 17
UNION ALL
SELECT
	[TE].[COD_TARIFF_EC] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[TE].[VALUE] AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[TE].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [TARIFF_EC] AS [TE] WITH (NOLOCK)
	ON [TE].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND [FC].[COD_SITUATION] = 17;
END;


GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_FIN_CALENDAR'
	AND object_id = OBJECT_ID(N'FINANCE_SCHEDULE_HISTORY'))
BEGIN
ALTER TABLE [FINANCE_SCHEDULE_HISTORY]
ADD [COD_FIN_CALENDAR] INT;
END;

GO

ALTER TABLE [FINANCE_SCHEDULE_HISTORY]
ADD FOREIGN KEY([COD_FIN_CALENDAR]) REFERENCES [FINANCE_CALENDAR]([COD_FIN_CALENDAR]);

GO


IF OBJECT_ID('SP_REG_FINANCIAL_FILE_SEQ_DISSOCIATION_PRC') IS NOT NULL
DROP PROCEDURE [SP_REG_FINANCIAL_FILE_SEQ_DISSOCIATION_PRC];
GO

CREATE PROCEDURE [DBO].[SP_REG_FINANCIAL_FILE_SEQ_DISSOCIATION_PRC](
	@DISS_INFO [TP_FIN_FILE_SEQ_DISSOCIATE] READONLY)
AS
BEGIN

INSERT INTO [FINANCE_SCHEDULE_HISTORY] ([COD_FIN_SCH_FILE_TITLE],
[COD_SITUATION_TITLE],
[COD_FIN_CALENDAR],
[COD_USER_CREAT],
[MODIFY_DATE],
[COD_USER_MODIFY])
	SELECT
		[INFO].[COD_FILE]
	   ,[FINANCE_CALENDAR].[COD_SITUATION]
	   ,[FINANCE_CALENDAR].[COD_FIN_CALENDAR]
	   ,[INFO].[COD_USER]
	   ,GETDATE()
	   ,[INFO].[COD_USER]
	FROM [FINANCE_CALENDAR]
	JOIN @DISS_INFO AS [INFO]
		ON [INFO].[COD_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	WHERE [FINANCE_CALENDAR].[COD_SITUATION] = 17
	AND [FINANCE_CALENDAR].[ACTIVE] = 1;

INSERT INTO [FINANCE_CALENDAR_HIST] ([COD_FIN_CALENDAR],
[COD_USER],
[PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[COD_BANK],
[CODE_BANK],
[PRIORITY],
[BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[ACTIVE],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COD_COMP],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_FIN_SCH_FILE],
[COD_PAY_PROT],
[PAYMENT_DATE],
[HAS_UNLINK])
	SELECT
		[COD_FIN_CALENDAR]
	   ,[INFO].[COD_USER]
	   ,[PREVISION_PAY_DATE]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[COD_SITUATION]
	   ,[COD_BK_EC]
	   ,[COD_BANK]
	   ,[CODE_BANK]
	   ,[PRIORITY]
	   ,[BANK]
	   ,[AGENCY]
	   ,[DIGIT_AGENCY]
	   ,[ACCOUNT]
	   ,[DIGIT_ACCOUNT]
	   ,[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE]
	   ,[COD_OPER_BANK]
	   ,[OPERATION_CODE]
	   ,[OPERATION_DESC]
	   ,[ACTIVE]
	   ,[IS_LOCK]
	   ,[IS_ASSIGNMENT]
	   ,[ASSIGNMENT_NAME]
	   ,[ASSIGNMENT_IDENTIFICATION]
	   ,[FINANCE_CALENDAR].[COD_EC]
	   ,[COD_COMP]
	   ,[COMMERCIAL_CODE]
	   ,[EC_CPF_CNPJ]
	   ,[EC_NAME]
	   ,[TYPE_ESTAB]
	   ,[TRADING_NAME]
	   ,[COD_AFFILIATOR]
	   ,[AFFILIATOR_NAME]
	   ,[AFFILIATOR_CPF_CNPJ]
	   ,[FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
	   ,[COD_PAY_PROT]
	   ,[PAYMENT_DATE]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN @DISS_INFO AS [INFO]
		ON [INFO].[COD_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE];



UPDATE [FINANCE_CALENDAR]
SET [COD_SITUATION] = 4
   ,[PAYMENT_DATE] = NULL
   ,[COD_FIN_SCH_FILE] = NULL
FROM [FINANCE_CALENDAR]
JOIN @DISS_INFO [INFO]
	ON [INFO].[COD_FILE] = [FINANCE_CALENDAR].[COD_FIN_SCH_FILE]
WHERE [FINANCE_CALENDAR].[COD_SITUATION] = 17
AND [FINANCE_CALENDAR].[ACTIVE] = 1;


INSERT INTO [FINANCE_FILE_DISSOCIATED] ([file_name],
[FILE_SEQUENCE],
[AMOUNT],
[REASON],
[COD_USER],
[COD_EC],
[DISS_FILE_PATH])
	SELECT
		[INFO].[file_name]
	   ,[INFO].[FILE_SEQUENCE]
	   ,[INFO].[AMOUNT]
	   ,[INFO].[REASON]
	   ,[INFO].[COD_USER]
	   ,[INFO].[COD_EC]
	   ,[INFO].[DISS_FILE_PATH]
	FROM @DISS_INFO AS [INFO];

END;

GO

UPDATE [ASSOCIATE_GENERATE_CNAB]
SET [ACTIVE] = 0
WHERE [COD_BANK] = 255;

GO

IF OBJECT_ID('SP_PAYMENT_PROTOCOL_TARIFF_ADJ') IS NOT NULL
DROP PROCEDURE [SP_PAYMENT_PROTOCOL_TARIFF_ADJ];
GO

CREATE PROCEDURE [DBO].[SP_PAYMENT_PROTOCOL_TARIFF_ADJ](
	@PROTOCOL VARCHAR(100))
AS
BEGIN
SELECT
	[RA].[COD_REL_ADJ] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[RA].[VALUE] AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[RA].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[P].[PROTOCOL]
   ,[FC].[COD_SITUATION]
   ,[POSWEB_DATA_TRANSACTION].[TRACKING_TRANSACTION]
   ,[TRANSACTION].[CODE] AS 'NSU'
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [RELEASE_ADJUSTMENTS] AS [RA] WITH (NOLOCK)
	ON [RA].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [FC].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
LEFT JOIN [POSWEB_DATA_TRANSACTION]
	ON [POSWEB_DATA_TRANSACTION].[COD_POS_DATA] = [RA].[COD_POS_DATA]
LEFT JOIN [TRANSACTION]
	ON [TRANSACTION].[COD_TRAN] = [POSWEB_DATA_TRANSACTION].[COD_TRAN]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL
UNION ALL
SELECT
	[TE].[COD_TARIFF_EC] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[TE].[VALUE] AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[TE].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'TARIFA' AS [TYPE_RELEASE]
   ,[P].[PROTOCOL]
   ,[FC].[COD_SITUATION]
   ,'' AS [TRACKING_TRANSACTION]
   ,'' AS 'NSU'
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [TARIFF_EC] AS [TE] WITH (NOLOCK)
	ON [TE].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [FC].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL;

END;

GO
  

IF OBJECT_ID('SP_PAYMENT_PROTOCOL_TITLES') IS NOT NULL
DROP PROCEDURE [SP_PAYMENT_PROTOCOL_TITLES];
GO

CREATE PROCEDURE [DBO].[SP_PAYMENT_PROTOCOL_TITLES](
	@PROTOCOL VARCHAR(100))
AS
BEGIN


SELECT
	[T].[CODE] AS [TRANSACTION_CODE]
   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,CAST((([TT].[AMOUNT] * (1 - ([TT].[TAX_INITIAL] / 100)) *
	CASE
		WHEN [TT].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TT].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TT].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE])
				ELSE [TT].[QTY_DAYS_ANTECIP]
			END, ([TT].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TT].[PLOT] = 1 THEN [TT].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)) AS [PLOT_VALUE]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], 'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[S].[NAME] AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'TITLE' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].file_name
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,[TT].[IS_SPOT]
   ,[P].[PROTOCOL]
FROM [FINANCE_CALENDAR] AS [F]
JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
	ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
	ON [T].[COD_TRAN] = [TT].[COD_TRAN]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [F].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[ACTIVE] = 1
AND [F].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL;
END;


GO

IF OBJECT_ID('SP_REMOVE_FINANCE_UNUSED') IS NOT NULL
DROP PROCEDURE [SP_REMOVE_FINANCE_UNUSED];
GO

CREATE PROCEDURE [SP_REMOVE_FINANCE_UNUSED]
AS
BEGIN


SELECT TOP 1000
	[COD_FIN_CALENDAR] INTO [#TMP_DELETE]
FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 0;

UPDATE [TRANSACTION_TITLES]
SET [COD_FIN_CALENDAR] = NULL
FROM [TRANSACTION_TITLES]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);


UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = NULL
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);


UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = NULL
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);

DELETE FROM [FINANCE_RESUME]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);




DELETE [FINANCE_CALENDAR]
	FROM [FINANCE_CALENDAR]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);


END;

GO




IF OBJECT_ID('SP_FINANCE_RATE_EC') IS NOT NULL
DROP PROCEDURE [SP_FINANCE_RATE_EC];
GO

CREATE PROCEDURE [SP_FINANCE_RATE_EC](
	@COD_EC INT)
AS
BEGIN

    DECLARE @COD_FIN_CALENDAR INT= NULL;
    DECLARE @COD_REL_ADJ INT;
    DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE DATETIME;
    DECLARE @CURRENT_DATE DATETIME= CURRENT_TIMESTAMP;
    DECLARE @COD_TARIFF_EC INT;

    DECLARE @EXIST_BK_LOCK INT= 0;
    DECLARE @EXIST_ADJ INT= 0;
    DECLARE @EXIST_CALENDAR INT= 0;
    DECLARE @EXIST_TFF INT= 0;

    DECLARE @TP [CODE_TYPE];


SELECT
	@EXIST_BK_LOCK = COUNT(*)
FROM [BANK_DETAILS_EC]
JOIN [BANK_DETAILS_CERC_INFO]
	ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
WHERE [BANK_DETAILS_EC].[ACTIVE] = 1
AND [BANK_DETAILS_EC].[COD_EC] = @COD_EC;

IF @EXIST_BK_LOCK >= 1
RETURN;

EXEC [SP_RECONCILE_FIN_CALENDAR_BY_EC] @COD_EC;

INSERT INTO @TP ([CODE])
	SELECT
		[COD_EC]
	FROM [COMMERCIAL_ESTABLISHMENT]
	WHERE [COD_EC] = @COD_EC;

EXEC [SP_GEN_FINANCE_CALENDAR] @TP;

SELECT
	[COD_FIN_CALENDAR]
   ,[COD_EC]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[FINANCE_CALENDAR].[IS_LOCK]
   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE] INTO [#FINANCE_CALENDAR]
FROM [FINANCE_CALENDAR]
WHERE [COD_EC] = @COD_EC
AND [ACTIVE] = 1
AND [COD_SITUATION] = 4
AND [IS_LOCK] = 0;


SELECT
	[COD_REL_ADJ]
   ,VALUE
   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
   ,[RELEASE_ADJUSTMENTS].[COD_EC]
   ,0 AS [UPDATED] INTO [#ADJ]
FROM [RELEASE_ADJUSTMENTS]
WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
AND VALUE < 0;

SELECT
	[COD_TARIFF_EC]
   ,VALUE
   ,[TARIFF_EC].[PAYMENT_DAY]
   ,[TARIFF_EC].[COD_EC]
   ,0 AS [UPDATED] INTO [#TFF]
FROM [TARIFF_EC]
WHERE [TARIFF_EC].[COD_EC] = @COD_EC
AND [TARIFF_EC].[COD_SITUATION] = 4
AND CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT);


SELECT
	@EXIST_CALENDAR = COUNT(*)
FROM [#FINANCE_CALENDAR];

SELECT
	@EXIST_ADJ = COUNT(*)
FROM [#ADJ];

SELECT
	@EXIST_TFF = COUNT(*)
FROM [#TFF];

IF (@EXIST_CALENDAR <= 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
	OR (@EXIST_CALENDAR > 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
RETURN;


-- cursor para ajustes  
DECLARE CURSOR_FINANCE CURSOR FOR SELECT
	[COD_REL_ADJ]
   ,VALUE
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
FROM [#ADJ]
ORDER BY [PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE;

FETCH NEXT FROM CURSOR_FINANCE INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;

WHILE @@fetch_status = 0
BEGIN

SET @COD_FIN_CALENDAR = NULL;

SELECT
	@COD_FIN_CALENDAR = [FIN].[COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR] AS [FIN]
WHERE CAST([PREVISION_PAY_DATE] AS DATE) = CAST(@PREVISION_PAY_DATE AS DATE);


IF @COD_FIN_CALENDAR IS NOT NULL
BEGIN

UPDATE [FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = ([PLOT_VALUE_PAYMENT] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [FINANCE_RESUME]
SET [ADJUSTMENTS_VALUE] = ([ADJUSTMENTS_VALUE] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

UPDATE [#ADJ]
SET [UPDATED] = 1
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE
	   ,@PLOT_VALUE_PAYMENT
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#ADJ] AS [ADJ]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [ADJ].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [ADJ].[UPDATED] = 0
	AND [ADJ].[COD_REL_ADJ] = @COD_REL_ADJ;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;


INSERT INTO [FINANCE_RESUME] ([ADJUSTMENTS_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@PLOT_VALUE_PAYMENT, @COD_FIN_CALENDAR);

END;
FETCH NEXT FROM CURSOR_FINANCE INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;
END;

CLOSE CURSOR_FINANCE;
DEALLOCATE CURSOR_FINANCE;

-- cursor para tarifas  
DECLARE CURSOR_FINANCE CURSOR FOR SELECT
	[COD_TARIFF_EC]
   ,VALUE
   ,[PAYMENT_DAY]
   ,[COD_EC]
FROM [#TFF]
ORDER BY [PAYMENT_DAY];

OPEN CURSOR_FINANCE;
FETCH NEXT FROM CURSOR_FINANCE INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;

WHILE @@fetch_status = 0
BEGIN

SET @COD_FIN_CALENDAR = NULL;

SELECT
	@COD_FIN_CALENDAR = [FIN].[COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR] AS [FIN]
WHERE CAST([PREVISION_PAY_DATE] AS DATE) = CAST(@PREVISION_PAY_DATE AS DATE);

IF @COD_FIN_CALENDAR IS NOT NULL
BEGIN
UPDATE [FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = ([PLOT_VALUE_PAYMENT] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [FINANCE_RESUME]
SET [TARIFF_VALUE] = ([TARIFF_VALUE] + @PLOT_VALUE_PAYMENT)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

UPDATE [#TFF]
SET [UPDATED] = 1
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;
END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE
	   ,@PLOT_VALUE_PAYMENT
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#TFF] AS [TFF]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TFF].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TFF].[UPDATED] = 0
	AND [TFF].[COD_TARIFF_EC] = @COD_TARIFF_EC;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;


INSERT INTO [FINANCE_RESUME] ([TARIFF_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@PLOT_VALUE_PAYMENT, @COD_FIN_CALENDAR);

END;

FETCH NEXT FROM CURSOR_FINANCE INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;
END;


CLOSE CURSOR_FINANCE;
DEALLOCATE CURSOR_FINANCE;


END;

GO



IF OBJECT_ID('[SP_FINANCE_RATE_LOCK]') IS NOT NULL
DROP PROCEDURE [SP_FINANCE_RATE_LOCK];
GO

CREATE PROCEDURE [SP_FINANCE_RATE_LOCK](
	@COD_EC INT)
AS
BEGIN

    DECLARE @COD_FIN_CALENDAR INT= NULL;
    DECLARE @COD_REL_ADJ INT;
    DECLARE @COD_TARIFF_EC INT;

    DECLARE @PLOT_VALUE_PAYMENT_ADJ DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE_ADJ DATETIME;

    DECLARE @PLOT_VALUE_PAYMENT_TFF DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE_TFF DATETIME;

    DECLARE @PLOT_VALUE_PAYMENT_FIN DECIMAL(22, 6);
    DECLARE @PREVISION_PAY_DATE_FIN DATETIME;
    DECLARE @COD_BK_EC INT;
    DECLARE @COMMENT VARCHAR(255);
    DECLARE @COD_TTARIFF INT;
    DECLARE @COD_ORIGIN INT;
    DECLARE @SUM_ADJ DECIMAL(22, 6);
    DECLARE @SUM_TFF DECIMAL(22, 6);
    DECLARE @ADJ_VALUE_PAID DECIMAL(22, 6);
    DECLARE @TFF_VALUE_PAID DECIMAL(22, 6);

    DECLARE @EXIST_ADJ INT= 0;
    DECLARE @EXIST_CALENDAR INT= 0;
    DECLARE @EXIST_BK_LOCK INT= 0;
    DECLARE @EXIST_TFF INT= 0;
    DECLARE @CURRENT_DATE DATETIME= CURRENT_TIMESTAMP;

    DECLARE @CONTROL DECIMAL(22, 6);
    DECLARE @I INT= 0;

    DECLARE @TP [CODE_TYPE];

SELECT
	@EXIST_BK_LOCK = COUNT(*)
FROM [BANK_DETAILS_EC]
JOIN [BANK_DETAILS_CERC_INFO]
	ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
WHERE [BANK_DETAILS_EC].[ACTIVE] = 1
AND [BANK_DETAILS_EC].[COD_EC] = @COD_EC;


IF @EXIST_BK_LOCK <= 0
RETURN;

EXEC [SP_RECONCILE_FIN_CALENDAR_BY_EC] @COD_EC;

INSERT INTO @TP ([CODE])
	SELECT
		[COD_EC]
	FROM [COMMERCIAL_ESTABLISHMENT]
	WHERE [COD_EC] = @COD_EC;

EXEC [SP_GEN_FINANCE_CALENDAR] @TP;

SELECT
	[COD_FIN_CALENDAR]
   ,[COD_EC]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[FINANCE_CALENDAR].[IS_LOCK]
   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE]
   ,CAST(NULL AS DECIMAL(22, 6)) AS [CALCULATED_VALUE]
   ,CAST([PLOT_VALUE_PAYMENT] AS DECIMAL(22, 6)) AS [POSITIVE_VALUE]
   ,CAST(0 AS DECIMAL(22, 6)) AS [ADJ_VALUE]
   ,CAST(0 AS DECIMAL(22, 6)) AS [TFF_VALUE]
   ,0 AS [EXCLUDED] INTO [#FINANCE_CALENDAR]
FROM [FINANCE_CALENDAR]
WHERE [COD_EC] = @COD_EC
AND [ACTIVE] = 1
AND [COD_SITUATION] = 4;


UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = 4
FROM [RELEASE_ADJUSTMENTS]
JOIN [RELEASE_ADJUSTMENTS] [ADJ_PARTIAL]
	ON [ADJ_PARTIAL].[COD_ORIGIN] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
	AND [ADJ_PARTIAL].[COD_EC] = @COD_EC
	AND [ADJ_PARTIAL].[COD_SITUATION] = 4;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = 28
WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
AND VALUE < 0
AND [COD_ORIGIN] IS NOT NULL;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 4
FROM [TARIFF_EC]
JOIN [TARIFF_EC] [TFF_PARTIAL]
	ON [TFF_PARTIAL].[COD_ORIGIN] = [TARIFF_EC].[COD_TARIFF_EC]
	AND [TFF_PARTIAL].[COD_EC] = @COD_EC
	AND [TFF_PARTIAL].[COD_SITUATION] = 4;

UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 28
WHERE [TARIFF_EC].[COD_EC] = @COD_EC
AND [TARIFF_EC].[COD_SITUATION] = 4
AND [COD_ORIGIN] IS NOT NULL;


SELECT
	[COD_REL_ADJ]
   ,VALUE
   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
   ,[RELEASE_ADJUSTMENTS].[COD_EC]
   ,[RELEASE_ADJUSTMENTS].[COMMENT]
   ,CAST(NULL AS DECIMAL(22, 6)) AS [DISCOUNT_APPLIED] INTO [#ADJ]
FROM [RELEASE_ADJUSTMENTS]
WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
AND VALUE < 0;


SELECT
	[COD_TARIFF_EC]
   ,VALUE
   ,[TARIFF_EC].[PAYMENT_DAY]
   ,[TARIFF_EC].[COD_EC]
   ,[TARIFF_EC].[COMMENT]
   ,[TARIFF_EC].[COD_TTARIFF]
   ,CAST(NULL AS DECIMAL(22, 6)) AS [DISCOUNT_APPLIED] INTO [#TFF]
FROM [TARIFF_EC]
WHERE [TARIFF_EC].[COD_EC] = @COD_EC
AND [TARIFF_EC].[COD_SITUATION] = 4
AND CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT);

SELECT
	@EXIST_CALENDAR = COUNT(*)
FROM [#FINANCE_CALENDAR];

SELECT
	@EXIST_ADJ = COUNT(*)
FROM [#ADJ];

SELECT
	@EXIST_TFF = COUNT(*)
FROM [#TFF];

IF (@EXIST_CALENDAR <= 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
	OR (@EXIST_CALENDAR > 0
	AND @EXIST_ADJ <= 0
	AND @EXIST_TFF <= 0)
RETURN;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = 28
   ,[COD_FIN_CALENDAR] = NULL
FROM [RELEASE_ADJUSTMENTS]
JOIN [#ADJ] [ADJ]
	ON [ADJ].[COD_REL_ADJ] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ];

UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 28
   ,[COD_FIN_CALENDAR] = NULL
FROM [TARIFF_EC]
JOIN [#TFF] [TFF]
	ON [TFF].[COD_TARIFF_EC] = [TARIFF_EC].[COD_TARIFF_EC];

-- cursor para o rateio dos ajustes              
DECLARE CURSOR_FINANCE_ADJ CURSOR FOR SELECT
	[COD_REL_ADJ]
   ,VALUE
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
   ,[COMMENT]
FROM [#ADJ]
ORDER BY [PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE_ADJ;

FETCH NEXT FROM CURSOR_FINANCE_ADJ INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT_ADJ, @PREVISION_PAY_DATE_ADJ, @COD_EC, @COMMENT;

WHILE @@fetch_status = 0
BEGIN


SET @CONTROL = @PLOT_VALUE_PAYMENT_ADJ;
SET @I = 1;

SELECT
	@COD_ORIGIN = ISNULL([COD_ORIGIN], [COD_REL_ADJ])
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

SET @ADJ_VALUE_PAID = 0;


SELECT
	@ADJ_VALUE_PAID = SUM(VALUE)
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_ORIGIN] = @COD_ORIGIN
AND [COD_SITUATION] = 8;

SET @CONTROL = @CONTROL + (@ADJ_VALUE_PAID * -1);

UPDATE [#FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE];


IF @EXIST_CALENDAR > 0
BEGIN

DECLARE CURSOR_FINANCE_FIN CURSOR FOR SELECT
	[COD_FIN_CALENDAR]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
   ,[COD_BK_EC]
FROM [#FINANCE_CALENDAR]
WHERE [EXCLUDED] = 0
ORDER BY [IS_LOCK] DESC,
[COD_BK_EC],
[PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE_FIN;

FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
WHILE @@fetch_status = 0
BEGIN

SET @CONTROL = @PLOT_VALUE_PAYMENT_FIN + @CONTROL;

			 IF @CONTROL < 0
			 BEGIN

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
VALUE,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_REQ],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[BRANCH_EC].[COD_EC]
	   ,(@PLOT_VALUE_PAYMENT_FIN) * -1
	   ,[PREVISION_PAY_DATE]
	   ,1
	   ,CONCAT(@COMMENT, ' - (1/', @I, ')')
	   ,4
	   ,NULL
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_ADJ = SUM(VALUE)
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
AND VALUE < 0;

-- Coloco como [EXCLUDED] pq o valor já foi abatido          
UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = 0
   ,[EXCLUDED] = 1
   ,[ADJ_VALUE] = @SUM_ADJ
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SET @I = @I + 1;

UPDATE [#ADJ]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;
END;

IF @CONTROL >= 0
BEGIN

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
VALUE,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_REQ],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[BRANCH_EC].[COD_EC]
	   ,(@CONTROL - @PLOT_VALUE_PAYMENT_FIN)
	   ,[PREVISION_PAY_DATE]
	   ,1
	   ,CONCAT(@COMMENT, ' - (1/', @I, ')')
	   ,4
	   ,NULL
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_ADJ = SUM(VALUE)
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
AND VALUE < 0;

UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @PLOT_VALUE_PAYMENT_FIN + @SUM_ADJ
   ,[ADJ_VALUE] = @SUM_ADJ
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#ADJ]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;
BREAK;
END;

FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
END;

CLOSE CURSOR_FINANCE_FIN;
DEALLOCATE CURSOR_FINANCE_FIN;
END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE_ADJ
	   ,@CONTROL
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#ADJ] AS [ADJ]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [ADJ].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [ADJ].[COD_REL_ADJ] = @COD_REL_ADJ;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
   ,[COD_SITUATION] = 4
WHERE [COD_REL_ADJ] = @COD_REL_ADJ;


INSERT INTO [FINANCE_RESUME] ([ADJUSTMENTS_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@CONTROL, @COD_FIN_CALENDAR);

END;

FETCH NEXT FROM CURSOR_FINANCE_ADJ INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT_ADJ, @PREVISION_PAY_DATE_ADJ, @COD_EC, @COMMENT;
END;

CLOSE CURSOR_FINANCE_ADJ;
DEALLOCATE CURSOR_FINANCE_ADJ;


UPDATE [#ADJ]
SET [DISCOUNT_APPLIED] = [#ADJ].value
WHERE [#ADJ].[DISCOUNT_APPLIED] IS NULL;


IF @EXIST_CALENDAR > 0
BEGIN

SELECT TOP 1
	@COD_FIN_CALENDAR = [COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR]
ORDER BY [IS_LOCK] DESC;

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
VALUE,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_REQ],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[BRANCH_EC].[COD_EC]
	   ,[ADJ].[DISCOUNT_APPLIED]
	   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE]
	   ,1
	   ,[ADJ].[COMMENT]
	   ,4
	   ,NULL
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,[ADJ].[COD_REL_ADJ]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	JOIN [#ADJ] AS [ADJ]
		ON [ADJ].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
			AND [ADJ].[DISCOUNT_APPLIED] < 0
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;


UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @CONTROL
   ,[ADJ_VALUE] = [ADJ_VALUE] + ISNULL((SELECT
			SUM([DISCOUNT_APPLIED])
		FROM [#ADJ]
		WHERE [#ADJ].[DISCOUNT_APPLIED] < 0)
	, 0)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

END;

SET @CONTROL = NULL;
SET @COD_ORIGIN = NULL;

UPDATE [#FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE];

--  --cursor para o rateio das tarifas             

DECLARE CURSOR_FINANCE_TFF CURSOR FOR SELECT
	[COD_TARIFF_EC]
   ,VALUE
   ,[PAYMENT_DAY]
   ,[COD_EC]
   ,[COMMENT]
   ,[COD_TTARIFF]
FROM [#TFF]
ORDER BY [PAYMENT_DAY];

OPEN CURSOR_FINANCE_TFF;

FETCH NEXT FROM CURSOR_FINANCE_TFF INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT_TFF, @PREVISION_PAY_DATE_TFF, @COD_EC, @COMMENT, @COD_TTARIFF;

WHILE @@fetch_status = 0
BEGIN

SET @CONTROL = @PLOT_VALUE_PAYMENT_TFF;
SET @I = 1;

SELECT
	@COD_ORIGIN = ISNULL([COD_ORIGIN], [COD_TARIFF_EC])
FROM [TARIFF_EC]
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

UPDATE [#FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE];

SET @TFF_VALUE_PAID = 0;

SELECT
	@TFF_VALUE_PAID = SUM(VALUE)
FROM [TARIFF_EC]
WHERE [COD_ORIGIN] = @COD_ORIGIN
AND [COD_SITUATION] = 8;

SET @CONTROL = @CONTROL + (@TFF_VALUE_PAID * -1);


	   IF @EXIST_CALENDAR > 0
	   BEGIN
		  DECLARE CURSOR_FINANCE_FIN CURSOR
		  FOR SELECT
	[COD_FIN_CALENDAR]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_EC]
   ,[COD_BK_EC]
FROM [#FINANCE_CALENDAR]
WHERE [EXCLUDED] = 0
AND CAST(CONVERT(CHAR(6), [#FINANCE_CALENDAR].[PREVISION_PAY_DATE], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT)
ORDER BY [IS_LOCK] DESC,
[COD_BK_EC],
[PREVISION_PAY_DATE];

OPEN CURSOR_FINANCE_FIN;

FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
WHILE @@fetch_status = 0
BEGIN

SET @CONTROL = @PLOT_VALUE_PAYMENT_FIN + @CONTROL;

			 IF @CONTROL < 0
			 BEGIN

INSERT INTO [TARIFF_EC] ([COD_TTARIFF],
[COD_EC],
VALUE,
[PAYMENT_DAY],
[PLOT],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_SITUATION],
[COMMENT],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		@COD_TTARIFF
	   ,[BRANCH_EC].[COD_EC]
	   ,(@PLOT_VALUE_PAYMENT_FIN) * -1
	   ,@PREVISION_PAY_DATE_TFF
	   ,1
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,4
	   ,CONCAT(ISNULL(@COMMENT, [PREVISION_PAY_DATE]), ' - (1/', @I, ')')
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_TFF = SUM(VALUE)
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;


UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = 0
   ,[EXCLUDED] = 1
   ,[TFF_VALUE] = @SUM_TFF
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#TFF]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

SET @I = @I + 1;
			 END;

IF @CONTROL >= 0
BEGIN

INSERT INTO [TARIFF_EC] ([COD_TTARIFF],
[COD_EC],
VALUE,
[PAYMENT_DAY],
[PLOT],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_SITUATION],
[COMMENT],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		@COD_TTARIFF
	   ,[BRANCH_EC].[COD_EC]
	   ,(@CONTROL - @PLOT_VALUE_PAYMENT_FIN)
	   ,@PREVISION_PAY_DATE_TFF
	   ,1
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,4
	   ,CONCAT(@COMMENT, ' - (1/', @I, ')')
	   ,@COD_ORIGIN
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

SELECT
	@SUM_TFF = SUM(VALUE)
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @PLOT_VALUE_PAYMENT_FIN + @SUM_TFF
   ,[TFF_VALUE] = @SUM_TFF
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

UPDATE [#TFF]
SET [DISCOUNT_APPLIED] = @CONTROL
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;
BREAK;
END;


FETCH NEXT FROM CURSOR_FINANCE_FIN INTO @COD_FIN_CALENDAR, @PLOT_VALUE_PAYMENT_FIN, @PREVISION_PAY_DATE_FIN, @COD_EC, @COD_BK_EC;
END;

CLOSE CURSOR_FINANCE_FIN;
DEALLOCATE CURSOR_FINANCE_FIN;
END;
ELSE
BEGIN
SET @COD_FIN_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	SELECT
		@PREVISION_PAY_DATE_TFF
	   ,@CONTROL
	   ,4
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[BANKS].[NAME]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[COD_BANK]
	   ,[BANKS].[CODE]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE]
	   ,[OPERATION].[DESCRIPTION]
	   ,0
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[TYPE_ESTAB].[CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME]
	   ,[AFFILIATOR].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#TFF] AS [TFF]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TFF].[COD_EC]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
			AND [BANK_DETAILS_EC].[ACTIVE] = 1
			AND [BANK_DETAILS_EC].[IS_CERC] = 0
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TFF].[COD_TARIFF_EC] = @COD_TARIFF_EC;

SET @COD_FIN_CALENDAR = @@identity;

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
   ,[COD_SITUATION] = 4
WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;


INSERT INTO [FINANCE_RESUME] ([TARIFF_VALUE],
[COD_FIN_CALENDAR])
	VALUES (@CONTROL, @COD_FIN_CALENDAR);
END;

FETCH NEXT FROM CURSOR_FINANCE_TFF INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT_TFF, @PREVISION_PAY_DATE_TFF, @COD_EC, @COMMENT, @COD_TTARIFF;

END;

CLOSE CURSOR_FINANCE_TFF;
DEALLOCATE CURSOR_FINANCE_TFF;

UPDATE [#TFF]
SET [DISCOUNT_APPLIED] = [#TFF].value
WHERE [#TFF].[DISCOUNT_APPLIED] IS NULL;


IF @EXIST_CALENDAR > 0
BEGIN

SELECT TOP 1
	@COD_FIN_CALENDAR = [COD_FIN_CALENDAR]
FROM [#FINANCE_CALENDAR]
ORDER BY [IS_LOCK] DESC;

INSERT INTO [TARIFF_EC] ([COD_TTARIFF],
[COD_EC],
VALUE,
[PAYMENT_DAY],
[PLOT],
[COD_BRANCH],
[COD_FIN_CALENDAR],
[COD_SITUATION],
[COMMENT],
[COD_ORIGIN],
[IS_PARTIAL])
	SELECT
		[TFF].[COD_TTARIFF]
	   ,[BRANCH_EC].[COD_EC]
	   ,[TFF].[DISCOUNT_APPLIED]
	   ,[PREVISION_PAY_DATE]
	   ,1
	   ,[COD_BRANCH]
	   ,[COD_FIN_CALENDAR]
	   ,4
	   ,[TFF].[COMMENT]
	   ,[TFF].[COD_TARIFF_EC]
	   ,1
	FROM [FINANCE_CALENDAR]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
	JOIN [#TFF] AS [TFF]
		ON [TFF].[COD_EC] = [FINANCE_CALENDAR].[COD_EC]
			AND [TFF].[DISCOUNT_APPLIED] < 0
	WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;


UPDATE [#FINANCE_CALENDAR]
SET [CALCULATED_VALUE] = @CONTROL
   ,[TFF_VALUE] = [TFF_VALUE] + ISNULL((SELECT
			SUM([DISCOUNT_APPLIED])
		FROM [#TFF]
		WHERE [#TFF].[DISCOUNT_APPLIED] < 0)
	, 0)
WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

END;


UPDATE [FINANCE_CALENDAR]
SET [PLOT_VALUE_PAYMENT] = [FN].[POSITIVE_VALUE] + [ADJ_VALUE] + [TFF_VALUE]
FROM [FINANCE_CALENDAR]
JOIN [#FINANCE_CALENDAR] [FN]
	ON [FN].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR];

UPDATE [FINANCE_RESUME]
SET [ADJUSTMENTS_VALUE] = [ADJUSTMENTS_VALUE] + [ADJ_VALUE]
   ,[TARIFF_VALUE] = [TARIFF_VALUE] + [TFF_VALUE]
FROM [FINANCE_RESUME]
JOIN [#FINANCE_CALENDAR] [FN]
	ON [FN].[COD_FIN_CALENDAR] = [FINANCE_RESUME].[COD_FIN_CALENDAR];

END;
GO

IF OBJECT_ID('SP_UP_BANK_DETAILS_EC') IS NOT NULL
DROP PROCEDURE [SP_UP_BANK_DETAILS_EC];
GO

CREATE PROCEDURE [DBO].[SP_UP_BANK_DETAILS_EC]      
    
/*********************************************************************************************************
----------------------------------------------------------------------------------------     
    Procedure Name: [SP_UP_BANK_DETAILS_EC]     
    Project.......: TKPP     
    ------------------------------------------------------------------------------------------     
    Author                          VERSION        Date                            Description            
    ------------------------------------------------------------------------------------------     
    Kennedy Alef     V1      27/07/2018         Creation           
    Elir Ribeiro     v2      19/11/2018         Changed            
    Luiz Aquino      v3      03/07/2019         update not is cerc    
 	Lucas Aguiar     v4      2019-10-28      Conta Cessão    
    ------------------------------------------------------------------------------------------
*********************************************************************************************************/
     
(
	@AGENCY                    VARCHAR(100), 
	@DIGIT_AGENCY              VARCHAR(100), 
	@ACCOUNT                   VARCHAR(100), 
	@DIGIT_ACCOUNT             VARCHAR(100) = NULL, 
	@COD_EC                    INT, 
	@COD_BANK                  INT, 
	@COD_USER                  INT, 
	@COD_TYPE_ACCOUNT          INT, 
	@COD_BRANCH                INT, 
	@COD_OPER                  INT          = NULL, 
	@IS_ASSIGNMENT             INT          = 0, 
	@ASSIGNMENT_NAME           VARCHAR(255) = NULL, 
	@ASSIGNMENT_IDENTIFICATION VARCHAR(14)  = NULL)
AS
BEGIN
    DECLARE @CONT INT= 0;

    BEGIN
UPDATE [BANK_DETAILS_EC]
SET [ACTIVE] = 0
   ,[MODIFY_DATE] = GETDATE()
WHERE [COD_BRANCH] = @COD_BRANCH
AND [ACTIVE] = 1
AND [IS_CERC] = 0;


INSERT INTO [BANK_DETAILS_EC] ([CREATED_AT],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_EC],
[COD_BANK],
[COD_USER],
[ACTIVE],
[COD_TYPE_ACCOUNT],
[COD_BRANCH],
[COD_OPER_BANK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION])
	VALUES (GETDATE(), @AGENCY, ISNULL(REPLACE(@DIGIT_AGENCY, '-', ''), ''), @ACCOUNT, @DIGIT_ACCOUNT, @COD_EC, @COD_BANK, @COD_USER, 1, @COD_TYPE_ACCOUNT, @COD_BRANCH, @COD_OPER, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION);

SELECT
	@CONT = COUNT([COD_FIN_CALENDAR])
FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 1
AND [COD_EC] = @COD_EC
AND [COD_SITUATION] = 4
AND [IS_LOCK] = 0;

IF @CONT > 0
BEGIN

EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

END;


END;
END;

GO

IF OBJECT_ID('SP_REG_RELEASE_ADJ') IS NOT NULL
DROP PROCEDURE [SP_REG_RELEASE_ADJ];
GO

CREATE PROCEDURE [DBO].[SP_REG_RELEASE_ADJ]    

/*********************************************************************************************
----------------------------------------------------------------------------------------    
Procedure Name: [SP_REG_RELEASE_ADJ]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef     V1    27/07/2018      Creation    
Elir Ribeiro    v2     20-08-2019     Changed Cod_Tran  
------------------------------------------------------------------------------------------
*********************************************************************************************/
    
(
	@COD_EC        INT, 
	@VALUE         DECIMAL(22, 6), 
	@DATE          DATETIME, 
	@JUSTIFY_CODE  INT, 
	@COMMENT       VARCHAR(200), 
	@CODUSER       INT, 
	@COD_REQ       INT            = NULL, 
	@COD_SITUATION INT            = NULL, 
	@COD_BRANCH    INT            = NULL, 
	@COD_TRAN      INT            = NULL)
AS
BEGIN

INSERT INTO [RELEASE_ADJUSTMENTS] ([COD_EC],
VALUE,
[PREVISION_PAY_DATE],
[COD_TYPEJUST],
[COMMENT],
[COD_SITUATION],
[COD_USER],
[COD_REQ],
[COD_BRANCH],
[COD_TRAN])
	VALUES (@COD_EC, @VALUE, @DATE, @JUSTIFY_CODE, @COMMENT, 4, @CODUSER, @COD_REQ, @COD_BRANCH, @COD_TRAN);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER RELEASE_ADJUSTMENTS ', 1;


EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

END;

GO

CREATE NONCLUSTERED INDEX [IX_FIN_CALENDAR_EC_SITUATION] ON [DBO].[FINANCE_CALENDAR]([COD_EC], [COD_SITUATION]);

GO


-- IF OBJECT_ID('APPORTIONMENT') IS NOT NULL DROP TABLE [APPORTIONMENT];
-- GO
-- CREATE TABLE [APPORTIONMENT](
-- 	[COD_APPORTIONMENT] INT IDENTITY PRIMARY KEY, 
-- 	[CREATED_AT]        DATETIME DEFAULT current_timestamp, 
-- 	[COD_EC]            INT, 
-- 	[AMOUNT]            DECIMAL(22, 6), 
-- 	CONSTRAINT [FK_APPORTIONMENT_EC] FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]));

-- GO

GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
-- 	  AND object_id = OBJECT_ID(N'COD_DESTINY'))
-- BEGIN
-- ALTER TABLE [RELEASE_ADJUSTMENTS]
-- ADD [COD_DESTINY] INT; 
-- END

-- GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'RELEASE_ADJUSTMENTS'
-- 	  AND object_id = OBJECT_ID(N'COD_MAIN'))
-- BEGIN
-- ALTER TABLE [RELEASE_ADJUSTMENTS]
-- ADD [COD_MAIN] INT; 
-- END

-- GO

ALTER TABLE [RELEASE_ADJUSTMENTS]
ADD CONSTRAINT [FK_APPORTIONMENT_ORIGIN] FOREIGN KEY([COD_ORIGIN]) REFERENCES [RELEASE_ADJUSTMENTS]([COD_REL_ADJ]);

GO


IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'COD_ORIGIN'
	AND object_id = OBJECT_ID(N'TARIFF_EC'))
BEGIN
ALTER TABLE [TARIFF_EC]
ADD [COD_ORIGIN] INT;
END;

GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'TARIFF_EC'
-- 	  AND object_id = OBJECT_ID(N'COD_DESTINY'))
-- BEGIN
-- ALTER TABLE [TARIFF_EC]
-- ADD [COD_DESTINY] INT; 
-- END

-- GO

-- IF NOT EXISTS
-- (SELECT 1
--  FROM [SYS].[COLUMNS]
--  WHERE [NAME] = N'TARIFF_EC'
-- 	  AND object_id = OBJECT_ID(N'COD_MAIN'))
-- BEGIN
-- ALTER TABLE [TARIFF_EC]
-- ADD [COD_MAIN] INT; 
-- END

-- GO


ALTER TABLE [TARIFF_EC]
ADD FOREIGN KEY([COD_ORIGIN]) REFERENCES [TARIFF_EC]([COD_TARIFF_EC]);


-- ALTER TABLE [TARIFF_EC]
-- ADD FOREIGN KEY([COD_DESTINY]) REFERENCES [APPORTIONMENT]([COD_APPORTIONMENT]);


-- ALTER TABLE [TARIFF_EC]
-- ADD FOREIGN KEY(COD_MAIN) REFERENCES [APPORTIONMENT]([COD_APPORTIONMENT]);

GO

CREATE NONCLUSTERED INDEX [FINANCE_CALENDAR_ACTIVE_COD_EC_COD_SITUATION_COD_PAY_PROT] ON [DBO].[FINANCE_CALENDAR]([ACTIVE], [COD_EC]) 
	INCLUDE([COD_SITUATION], [COD_PAY_PROT]);


GO


-- IF OBJECT_ID('APPORTIONMENT_TRACKING') IS NOT NULL
--     DROP TABLE [APPORTIONMENT_TRACKING];
-- GO

-- CREATE TABLE [APPORTIONMENT_TRACKING](
-- 	[COD_APP_TRACK] INT IDENTITY PRIMARY KEY, 
-- 	[COD_MAIN]      INT, 
-- 	[COD_REL_ADJ]   INT, 
-- 	[COD_EC]        INT, 
-- 	[ACTIVE]        INT DEFAULT 1, 
-- 	FOREIGN KEY([COD_REL_ADJ]) REFERENCES [RELEASE_ADJUSTMENTS]([COD_REL_ADJ]), 
-- 	FOREIGN KEY([COD_MAIN]) REFERENCES [APPORTIONMENT]([COD_APPORTIONMENT]), 
-- 	FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]));


-- GO



-- INSERT INTO [TYPE_TARIFF]
-- ([NAME], 
--  [TYPE], 
--  [QTY_PLOTS], 
--  [ACTIVE], 
--  [COD_USER], 
--  [AMOUNT],
--  COD_COMP
-- )
-- VALUES ( 
-- 	'AGRUPADO', 'AGRUPADO', 1, 1, 287, 0 , 8);

-- GO

IF OBJECT_ID('SP_RECONCILE_FIN_CALENDAR_BY_EC') IS NOT NULL
DROP PROCEDURE [SP_RECONCILE_FIN_CALENDAR_BY_EC];
GO

CREATE PROCEDURE [SP_RECONCILE_FIN_CALENDAR_BY_EC](
	@COD_EC INT)
AS
BEGIN

UPDATE [TRANSACTION_TITLES]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TRANSACTION_TITLES]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TRANSACTION_TITLES].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [RELEASE_ADJUSTMENTS]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([RELEASE_ADJUSTMENTS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;



UPDATE [TARIFF_EC]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TARIFF_EC]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TARIFF_EC].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TARIFF_EC].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;


UPDATE [TITLE_LOCK_PAYMENT_DETAILS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS]
JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].[COD_TITLE] = [TITLE_LOCK_PAYMENT_DETAILS].[COD_TITLE]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TITLE_LOCK_PAYMENT_DETAILS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

END;


GO


IF OBJECT_ID('SP_GEN_ALL_CALENDAR') IS NOT NULL
DROP PROCEDURE [SP_GEN_ALL_CALENDAR];
GO

CREATE PROCEDURE [SP_GEN_ALL_CALENDAR]
AS
BEGIN
    DECLARE @COD_EC INT;


    DECLARE CURSOR_FIN CURSOR
    FOR SELECT
	[COD_EC]
FROM [COMMERCIAL_ESTABLISHMENT];

OPEN CURSOR_FIN;
FETCH NEXT FROM CURSOR_FIN INTO @COD_EC;

WHILE @@fetch_status = 0
BEGIN

EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

FETCH NEXT FROM CURSOR_FIN INTO @COD_EC;

END;
CLOSE CURSOR_FIN;
DEALLOCATE CURSOR_FIN;
END;
GO


IF OBJECT_ID('SP_FIN_CALENDAR_TFF_ADJ_PRC') IS NOT NULL
DROP PROCEDURE [SP_FIN_CALENDAR_TFF_ADJ_PRC];
GO

CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TFF_ADJ_PRC](
	@COD_BK_EC     INT, 
	@DATE          DATE, 
	@COD_SITUATION INT  = NULL)
AS
BEGIN
SELECT
	[RA].[COD_REL_ADJ] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[RA].[VALUE] AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[RA].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'AJUSTE' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
   ,[RA].[IS_PARTIAL]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [RELEASE_ADJUSTMENTS] AS [RA] WITH (NOLOCK)
	ON [RA].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND CAST([FC].[PREVISION_PAY_DATE] AS DATE) <= @DATE
UNION ALL
SELECT
	[TE].[COD_TARIFF_EC] AS [CODE]
   ,[FC].[COD_EC]
   ,[FC].[EC_NAME] AS [EC]
   ,[TE].[VALUE] AS [PLOT_VALUE_PAYMENT]
   ,CAST([FC].[PREVISION_PAY_DATE] AS DATE) AS [PREVISION_PAY_DATE]
   ,[TE].[COMMENT]
   ,[FC].[COD_BANK]
   ,ISNULL([FC].[CODE_BANK], 'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([FC].[BANK], 'NÃO CADASTRADO') AS [BANCO]
   ,[FC].[AGENCY] AS [AGENCY]
   ,CONCAT([FC].[ACCOUNT], [FC].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,[FC].[ACCOUNT_TYPE]
   ,[S].[NAME] AS [SITUATION]
   ,'TARIFA' AS [TYPE_RELEASE]
   ,[FC].[COD_PAY_PROT]
   ,[FC].[COD_SITUATION]
   ,[FC].[COD_FIN_SCH_FILE]
   ,[FSF].[FILE_SEQUENCE]
   ,[FSF].file_name
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
   ,[TE].[IS_PARTIAL]
FROM [FINANCE_CALENDAR] AS [FC]
JOIN [TARIFF_EC] AS [TE] WITH (NOLOCK)
	ON [TE].[COD_FIN_CALENDAR] = [FC].[COD_FIN_CALENDAR]
JOIN [SITUATION] AS [S]
	ON [S].[COD_SITUATION] = [FC].[COD_SITUATION]
LEFT JOIN [FINANCE_SCHEDULE_FILE] AS [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [FC].[COD_FIN_SCH_FILE]
WHERE [FC].[ACTIVE] = 1
AND [FC].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [FC].[COD_BK_EC] = @COD_BK_EC
AND CAST([FC].[PREVISION_PAY_DATE] AS DATE) <= @DATE;

END;

GO



IF OBJECT_ID('SP_MAIN_ADJ') IS NOT NULL
DROP PROCEDURE [SP_MAIN_ADJ];
GO

CREATE PROCEDURE [SP_MAIN_ADJ](
	@COD_ADJ INT)
AS
BEGIN

SELECT
	[RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
   ,[ADJ_PARTIAL].[COD_REL_ADJ]
   ,[RELEASE_ADJUSTMENTS].value
   ,[RELEASE_ADJUSTMENTS].[COMMENT]
   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
FROM [RELEASE_ADJUSTMENTS]
JOIN [RELEASE_ADJUSTMENTS] AS [ADJ_PARTIAL]
	ON [ADJ_PARTIAL].[COD_ORIGIN] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
		AND [ADJ_PARTIAL].[COD_SITUATION] = 4
WHERE [ADJ_PARTIAL].[COD_REL_ADJ] = @COD_ADJ;

END;

GO

IF OBJECT_ID('SP_MAIN_TFF') IS NOT NULL
DROP PROCEDURE [SP_MAIN_TFF];
GO

CREATE PROCEDURE [SP_MAIN_TFF](
	@COD_ADJ INT)
AS
BEGIN
SELECT
	[TARIFF_EC].[COD_TARIFF_EC]
   ,[TFF_PARTIAL].[COD_TARIFF_EC]
   ,[TARIFF_EC].value
   ,[TARIFF_EC].[COMMENT]
   ,[TARIFF_EC].[PAYMENT_DAY] AS [PREVISION_PAY_DATE]
FROM [TARIFF_EC]
JOIN [TARIFF_EC] AS [TFF_PARTIAL]
	ON [TFF_PARTIAL].[COD_ORIGIN] = [TARIFF_EC].[COD_TARIFF_EC]
		AND [TFF_PARTIAL].[COD_SITUATION] = 4
WHERE [TFF_PARTIAL].[COD_TARIFF_EC] = @COD_ADJ;
END;

GO

-- 08515856000101
GO
if object_id('SP_REPORT_RELEASE_ADJUSTMENTS') IS NOT NULL DROP PROCEDURE SP_REPORT_RELEASE_ADJUSTMENTS
GO
CREATE PROCEDURE [DBO].[SP_REPORT_RELEASE_ADJUSTMENTS]                  
    
/***********************************************************************************************************
----------------------------------------------------------------------------------------                  
Procedure Name: [SP_REPORT_RELEASE_ADJUSTMENTS]                  
Project.......: TKPP                  
------------------------------------------------------------------------------------------                  
Author                          VERSION         Date            Description                  
------------------------------------------------------------------------------------------                  
Kennedy Alef                    V1              27/07/2018      Creation                  
Gian Luca Dalle Cort            V2              04/10/2018      Changed                
Lucas Aguiar              v3              26/11/2018      Changed              
Luiz Aquino                     v4              06/05/2019      Adicionar NSU              
Elir Ribeiro                   v5             23/08/2019       add motivo,justificativa          
------------------------------------------------------------------------------------------    
***********************************************************************************************************/                  
               
(
	@INITIAL_DATE         DATETIME, 
	@FINAL_DATE           DATETIME, 
	@CODCOMP              INT, 
	@CPFEC                VARCHAR(100), 
	@CODAFF               INT          = NULL, 
	@COD_EC               INT          = NULL, 
	@TRACKING_TRANSACTION VARCHAR(100) = NULL, 
	@DESCRIPTION          VARCHAR(100) = NULL, 
	@NSU                  VARCHAR(255) = NULL, 
	@NSUEXT               VARCHAR(255) = NULL)
AS
BEGIN
    DECLARE @QUERY_BASIS NVARCHAR(MAX);


SET @QUERY_BASIS = '                  
    SELECT [RELEASE_ADJUSTMENTS].[COD_REL_ADJ],     
   CAST([DBO].[FN_FUS_UTF] ( [RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE] ) AS DATETIME) AS [PREVISION_PAY_DATE],     
   [RELEASE_ADJUSTMENTS].VALUE,     
   [FINANCE_CALENDAR].[EC_NAME] AS [NAME],     
   [FINANCE_CALENDAR].[EC_CPF_CNPJ] as [CPF_CNPJ],     
   ISNULL([PROTOCOLS].[PROTOCOL], ''-'') AS [PROTOCOL],     
   [TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION],     
   [FINANCE_CALENDAR].[AFFILIATOR_NAME] as [NAME_AFFILIATOR],     
   [POSWEB_DATA_TRANSACTION].[TRACKING_TRANSACTION] AS [COD_RAST],     
   [POSWEB_DATA_TRANSACTION].[DESCRIPTION] AS [DESCRIPTION],     
   [REPORT_TRANSACTIONS].[TRANSACTION_CODE] AS [NSU],     
   [REPORT_TRANSACTIONS].[NSU_EXT] AS [EXTERNALNSU],    
   [TYPE_JUSTIFICATION].[DESCRIPTION] AS [DESCRIPTION_JUSTIFY],     
   [RELEASE_ADJUSTMENTS].[COMMENT],    
   CAST([DBO].[FN_FUS_UTF] ( [PROTOCOLS].[CREATED_AT] ) AS DATETIME) AS [TRANSACTION_DATE],     
   ISNULL([USERS].[COD_ACCESS], '' '') AS [USUARIO],     
   [RELEASE_ADJUSTMENTS].[IS_PARTIAL],     
   [ADJ_PARTIAL].VALUE AS [ORIGINAL_VALUE],
   ADJ_PARTIAL.COD_REL_ADJ as COD_REL_ADJ_PARTIAL
FROM [FINANCE_CALENDAR]    
 JOIN [RELEASE_ADJUSTMENTS] ON [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR]    
 JOIN [TRADUCTION_SITUATION](NOLOCK) ON [TRADUCTION_SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]    
 LEFT JOIN [RELEASE_ADJUSTMENTS] AS [ADJ_PARTIAL] ON [ADJ_PARTIAL].[COD_REL_ADJ] = [RELEASE_ADJUSTMENTS].[COD_ORIGIN]    
 LEFT JOIN [PROTOCOLS] ON [PROTOCOLS].[COD_PAY_PROT] = [RELEASE_ADJUSTMENTS].[COD_PAY_PROT]    
 LEFT JOIN [POSWEB_DATA_TRANSACTION](NOLOCK) ON [POSWEB_DATA_TRANSACTION].[COD_POS_DATA] = [RELEASE_ADJUSTMENTS].[COD_POS_DATA]    
 LEFT JOIN [REPORT_TRANSACTIONS](NOLOCK) ON [REPORT_TRANSACTIONS].[COD_TRAN] = [POSWEB_DATA_TRANSACTION].[COD_TRAN] OR [REPORT_TRANSACTIONS].[COD_TRAN] = [RELEASE_ADJUSTMENTS].[COD_TRAN]    
 LEFT JOIN [TYPE_JUSTIFICATION] ON [TYPE_JUSTIFICATION].[COD_TYPEJUST] = [RELEASE_ADJUSTMENTS].[COD_TYPEJUST]    
 LEFT JOIN [USERS] ON [USERS].[COD_USER] = [RELEASE_ADJUSTMENTS].[COD_USER]    
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1 and    
 CAST([dbo].[FN_FUS_UTF](RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE) as DATETIME) BETWEEN  ''' + CAST(@INITIAL_DATE AS VARCHAR) + ''' AND ''' + CAST(@FINAL_DATE AS VARCHAR) + '''               
     AND FINANCE_CALENDAR.COD_COMP = ' + CAST(@CODCOMP AS VARCHAR);

    IF @CPFEC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.EC_CPF_CNPJ  = @CPFEC ');

IF @CODAFF IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.COD_AFFILIATOR = @CodAff ');

IF @COD_EC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.COD_EC  = @COD_EC ');

IF LEN(@TRACKING_TRANSACTION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND POSWEB_DATA_TRANSACTION.TRACKING_TRANSACTION  = @TRACKING_TRANSACTION ');

IF LEN(@DESCRIPTION) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND POSWEB_DATA_TRANSACTION.DESCRIPTION  LIKE  ''%' + @DESCRIPTION + '%''');

IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND  REPORT_TRANSACTIONS.TRANSACTION_CODE = @NSU ');

IF LEN(@NSUEXT) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND  REPORT_TRANSACTIONS.NSU_EXT = @NSUEXT ');

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '   ORDER BY CAST([dbo].[FN_FUS_UTF](RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE) as DATETIME) DESC,  FINANCE_CALENDAR.COD_EC');

EXEC [sp_executesql] @QUERY_BASIS
					,N' @CPFEC VARCHAR(14),                  
    @CodAff INT,              
    @COD_EC INT,              
    @TRACKING_TRANSACTION  VARCHAR(100),              
    @DESCRIPTION  VARCHAR(100),              
    @NSU VARCHAR(255),              
    @NSUEXT VARCHAR(255)              
    '
					,@CPFEC = @CPFEC
					,@CODAFF = @CODAFF
					,@COD_EC = @COD_EC
					,@TRACKING_TRANSACTION = @TRACKING_TRANSACTION
					,@DESCRIPTION = @DESCRIPTION
					,@NSU = @NSU
					,@NSUEXT = @NSUEXT;

--SELECT @QUERY_BASIS            
END;

GO



IF OBJECT_ID('[SP_REPORT_TARIFF]') IS NOT NULL
DROP PROCEDURE [SP_REPORT_TARIFF];
GO

CREATE PROCEDURE [DBO].[SP_REPORT_TARIFF]      

/***********************************************************************************************
----------------------------------------------------------------------------------------      
Procedure Name: [SP_REPORT_TARIFF]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                          VERSION        Date                            Description      
------------------------------------------------------------------------------------------      
Kennedy Alef     V1      27/07/2018        Creation      
------------------------------------------------------------------------------------------
***********************************************************************************************/
          
(
	@INITIAL_DATE DATETIME, 
	@FINAL_DATE   DATETIME, 
	@CODCOMP      INT, 
	@CPFEC        VARCHAR(100), 
	@CODAFF       INT          = NULL)
AS
BEGIN
    DECLARE @QUERY_BASIS NVARCHAR(MAX);

    BEGIN

SET @QUERY_BASIS = '      
SELECT [TARIFF_EC].[PLOT], 
	  [TARIFF_EC].[CREATED_AT], 
	  [TARIFF_EC].[PAYMENT_DAY] AS [PREVISION_PAY_DAY], 
	  [TARIFF_EC].VALUE, 
	  [TFF_PARTIAL].VALUE AS [ORIGINAL_VALUE], 
	  [FINANCE_CALENDAR].[EC_NAME] AS [NAME], 
	  [FINANCE_CALENDAR].[EC_CPF_CNPJ] AS [CPF_CNPJ], 
	  ISNULL([PROTOCOLS].[PROTOCOL], ''-'') AS [PROTOCOL], 
	  [TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION], 
	  [PROTOCOLS].[CREATED_AT] AS [PAYMENT_DAY], 
	  [FINANCE_CALENDAR].[COD_AFFILIATOR], 
	  [FINANCE_CALENDAR].[AFFILIATOR_NAME] AS [NAME_AFFILIATOR],
	  [TARIFF_EC].[IS_PARTIAL],
	  TFF_PARTIAL.COD_TARIFF_EC as COD_TARIFF_EC_PARTIAL,
	  TARIFF_EC.COD_TARIFF_EC,
	  TARIFF_EC.COMMENT
FROM [FINANCE_CALENDAR]
	JOIN [TARIFF_EC] ON [TARIFF_EC].[COD_FIN_CALENDAR] = [FINANCE_CALENDAR].[COD_FIN_CALENDAR]
	LEFT JOIN [TARIFF_EC] AS [TFF_PARTIAL] ON [TFF_PARTIAL].[COD_TARIFF_EC] = [TARIFF_EC].[COD_ORIGIN]
	LEFT JOIN [PROTOCOLS] ON [PROTOCOLS].[COD_PAY_PROT] = [TARIFF_EC].[COD_PAY_PROT]
	JOIN [TRADUCTION_SITUATION] ON [TRADUCTION_SITUATION].[COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1   
AND TARIFF_EC.PAYMENT_DAY BETWEEN  ''' + CAST(@INITIAL_DATE AS VARCHAR) + ''' AND ''' + CAST(@FINAL_DATE AS VARCHAR) + '''      
 AND FINANCE_CALENDAR.COD_COMP = ''' + CAST(@CODCOMP AS VARCHAR) + ''' ';


	   IF @CPFEC IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.EC_CPF_CNPJ  = @CPFEC ');

IF @CODAFF IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND FINANCE_CALENDAR.COD_AFFILIATOR  = @CodAff ');

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY TARIFF_EC.PAYMENT_DAY DESC, FINANCE_CALENDAR.cod_ec');


--EXECUTE (@QUERY_BASIS);      
EXEC [sp_executesql] @QUERY_BASIS
					,N'      
@CPFEC varchar(14),      
@CodAff INT      
'
					,@CPFEC = @CPFEC
					,@CODAFF = @CODAFF;

END;
END;

GO


IF OBJECT_ID('[SP_CANCEL_TARIFF_EC]') IS NOT NULL
DROP PROCEDURE [SP_CANCEL_TARIFF_EC];
GO

CREATE PROCEDURE [DBO].[SP_CANCEL_TARIFF_EC]  
    
/*****************************************************************************************************
----------------------------------------------------------------------------------------  
    Procedure Name: [SP_CANCEL_TARIFF_EC]  
    Project.......: TKPP  
    ------------------------------------------------------------------------------------------  
    Author                          VERSION        Date                            Description  
    ------------------------------------------------------------------------------------------  
    Kennedy Alef     V1    27/07/2018      Creation  
    Luiz Aquino                     v2              03/07/2019        Filter bank details by is_cerc  
    ------------------------------------------------------------------------------------------
*****************************************************************************************************/
  
(
	@COD_TARIFF    INT, 
	@CODUSER       INT, 
	@COD_EC        INT, 
	@JUSTITICATIVE VARCHAR(300))
AS
BEGIN
    DECLARE @CONT INT;
    DECLARE @COD_ORIGIN INT;
    DECLARE @IS_PARTIAL INT;
    DECLARE @TARIFF_VALUE DECIMAL(22, 6);
    DECLARE @PROT_GENERATED VARCHAR(100);
    BEGIN

SELECT
	@CONT = COUNT(*)
   ,@TARIFF_VALUE = [TARIFF_EC].[VALUE]
   ,@COD_ORIGIN = [TARIFF_EC].[COD_ORIGIN]
   ,@IS_PARTIAL = [TARIFF_EC].[IS_PARTIAL]
FROM [TARIFF_EC]
WHERE [COD_TARIFF_EC] = @COD_TARIFF
AND [COD_SITUATION] = 4
GROUP BY [VALUE]
		,[TARIFF_EC].[COD_ORIGIN]
		,[TARIFF_EC].[IS_PARTIAL];

IF @CONT < 1
THROW 61031, 'INVALID TARIFF TO CANCEL', 1;

INSERT INTO [PROTOCOLS] ([PROTOCOL],
[VALUE],
[COD_EC],
[COD_USER],
[COD_BK_EC],
[COD_TYPE_PROT],
[JUSTIFICATIVE])
	VALUES ((NEXT VALUE FOR [SEQ_PROT_PAY]), @TARIFF_VALUE, @COD_EC, @CODUSER, (SELECT [COD_BK_EC] FROM [BANK_DETAILS_EC] WHERE [COD_EC] = @COD_EC AND [ACTIVE] = 1 AND [IS_CERC] = 0), 2, @JUSTITICATIVE);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER CANCELING PROTOCOL ', 1;

SELECT
	@PROT_GENERATED = @@identity;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = 6
   ,[COD_PAY_PROT] = @PROT_GENERATED
WHERE [COD_TARIFF_EC] = @COD_TARIFF;

IF @IS_PARTIAL = 1
BEGIN
UPDATE [TARIFF_EC]
SET VALUE = VALUE - @TARIFF_VALUE
WHERE [TARIFF_EC].[COD_TARIFF_EC] = @COD_ORIGIN;
END;

SELECT
	@PROT_GENERATED AS [PROTOCOL];

END;
END;


GO

IF OBJECT_ID('[SP_PROCESS_FINANCE_RATE]') IS NOT NULL
DROP PROCEDURE [SP_PROCESS_FINANCE_RATE];
GO

CREATE PROCEDURE [SP_PROCESS_FINANCE_RATE](
	@COD_EC INT)
AS
BEGIN

EXEC [SP_FINANCE_RATE_EC] @COD_EC;

EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;
END;

GO

-- 08515856000101


CREATE NONCLUSTERED INDEX [IX_TRAN_TITLE_COD_SIT_FIN_CALENDAR_SEARCH]
ON [dbo].[TRANSACTION_TITLES] ([COD_SITUATION],[COD_FIN_CALENDAR])


CREATE NONCLUSTERED INDEX [IX_FN_CALENDAR_ACTIVE_PROTOCOL]
ON [dbo].[FINANCE_CALENDAR] ([ACTIVE],[COD_PAY_PROT])





GO

--SELECT 
-- count(*)
--FROM transaction_titles WHERE COD_SITUATION=8  AND COD_FIN_CALENDAR IS NOT NULL

GO

--WITH CTE
--AS
--(
--SELECT 
--top 500000
--transaction_titles.cod_title 
--FROM transaction_titles WHERE COD_SITUATION=8  AND COD_FIN_CALENDAR IS NOT NULL
--)
--UPDATE 
--transaction_titles SET transaction_titles.COD_FIN_CALENDAR = NULL
--WHERE transaction_titles.cod_title IN (
--SELECT * FROM CTE
--)



--go


--UPDATE FINANCE_CALENDAR SET ACTIVE = 0 WHERE COD_SITUATION=8 AND ACTIVE=1

--WITH CTE
--AS
--(
--SELECT 
--FINANCE_CALENDAR.COD_FIN_CALENDAR 
--FROM FINANCE_CALENDAR WHERE COD_SITUATION=8 AND ACTIVE=1
--)
--UPDATE 
--FINANCE_CALENDAR SET ACTIVE = 0
--WHERE FINANCE_CALENDAR.COD_FIN_CALENDAR IN (
--SELECT * FROM CTE
--)



IF OBJECT_ID('tempdb..#TMP_PROTOCOLS_PROCESSED') IS NOT NULL
DROP TABLE #TMP_PROTOCOLS_PROCESSED;

IF OBJECT_ID('tempdb..#TMP_PROTOCOLS_PROCESSED') IS NOT NULL
DROP TABLE #TMP_PROTOCOLS_PROCESSED;

GO
SELECT
	PROTOCOLS.CREATED_AT AS PREVISION_PAY_DATE
   ,PROTOCOLS.[VALUE] PLOT_VALUE_PAYMENT
   ,8 AS COD_SITUATION
   ,PROTOCOLS.COD_BK_EC
   ,BANK_DETAILS_EC.COD_BANK
   ,BANKS.CODE AS CODE_BANK
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS COD_TYPE_ACCOUNT
   ,ACCOUNT_TYPE.CODE AS ACCOUNT_TYPE
   ,AGENCY
   ,DIGIT_AGENCY
   ,ACCOUNT
   ,DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,OPERATION.CODE AS OPERATION_CODE
   ,OPERATION.[DESCRIPTION] OPERATION_DESC
   ,BANK_DETAILS_EC.IS_CERC
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,COMMERCIAL_ESTABLISHMENT.CODE AS COMMERCIAL_CODE
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS EC_CPF_CNPJ
   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS EC_NAME
   ,TYPE_ESTAB.CODE TYPE_ESTAB
   ,COMMERCIAL_ESTABLISHMENT.[TRADING_NAME]
   ,AFFILIATOR.COD_AFFILIATOR
   ,AFFILIATOR.[NAME] AFFILIATOR_NAME
   ,AFFILIATOR.CPF_CNPJ AFFILIATOR_CPF_CNPJ
   ,(
	ISNULL(
	ISNULL((SELECT
		TOP 1
			COD_FIN_SCH_FILE
		FROM [TRANSACTION_TITLES]
		WHERE COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT)
	, (SELECT
		TOP 1
			COD_FIN_SCH_FILE
		FROM RELEASE_ADJUSTMENTS
		WHERE COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT)
	), (SELECT
		TOP 1
			COD_FIN_SCH_FILE
		FROM TARIFF_EC
		WHERE COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT)
	--

	)
	) AS COD_FIN_SCH_FILE
   ,PROTOCOLS.COD_PAY_PROT
   ,BANKS.[PRIORITY]
   ,BANKS.[NAME] BANK
   ,COMMERCIAL_ESTABLISHMENT.COD_COMP INTO #TMP_PROTOCOLS_PROCESSED
FROM PROTOCOLS
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = PROTOCOLS.COD_EC
JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BK_EC = PROTOCOLS.COD_BK_EC
JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN OPERATION_BANK
	ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
LEFT JOIN OPERATION
	ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT



--select * from protocols where protocol='412074248'

--select protocols.*, PLOT_VALUE_PAYMENT from protocols
--JOIN FINANCE_CALENDAR ON FINANCE_CALENDAR.COD_PAY_PROT = protocols.COD_PAY_PROT
--			AND FINANCE_CALENDAR.ACTIVE=1
--where FINANCE_CALENDAR.cod_pay_prot=388511
--select * from finance_calendar where cod_pay_prot=389570 and active=1

--SELECT top 10 *
--FROM TRANSACTION_TITLES
--JOIN TITLE_LOCK_PAYMENT_DETAILS ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
--WHERE
--TRANSACTION_TITLES.COD_SITUATION = 8 AND
--TRANSACTION_TITLES.COD_PAY_PROT IS NOT NULL AND
--TITLE_LOCK_PAYMENT_DETAILS.COD_PAY_PROT <> TRANSACTION_TITLES.COD_PAY_PROT 


-- PROT TITTLE 180551
-- PROT LOCK 191878
GO






INSERT INTO FINANCE_CALENDAR (PREVISION_PAY_DATE
, PLOT_VALUE_PAYMENT
, COD_SITUATION
, COD_BK_EC
, COD_BANK
, CODE_BANK
, AGENCY
, DIGIT_AGENCY
, ACCOUNT
, DIGIT_ACCOUNT
, COD_TYPE_ACCOUNT
, ACCOUNT_TYPE
, COD_OPER_BANK
, OPERATION_CODE
, OPERATION_DESC
, IS_LOCK
, IS_ASSIGNMENT
, ASSIGNMENT_NAME
, ASSIGNMENT_IDENTIFICATION
, COD_EC
, COMMERCIAL_CODE
, EC_CPF_CNPJ
, EC_NAME
, TYPE_ESTAB
, TRADING_NAME
, COD_AFFILIATOR
, AFFILIATOR_NAME
, AFFILIATOR_CPF_CNPJ
, COD_FIN_SCH_FILE
, COD_PAY_PROT
, ACTIVE
, [PRIORITY]
, BANK
, COD_COMP)
	SELECT
		PREVISION_PAY_DATE
	   ,PLOT_VALUE_PAYMENT
	   ,COD_SITUATION
	   ,COD_BK_EC
	   ,COD_BANK
	   ,CODE_BANK
	   ,AGENCY
	   ,DIGIT_AGENCY
	   ,ACCOUNT
	   ,DIGIT_ACCOUNT
	   ,COD_TYPE_ACCOUNT
	   ,ACCOUNT_TYPE
	   ,COD_OPER_BANK
	   ,OPERATION_CODE
	   ,OPERATION_DESC
	   ,IS_CERC
	   ,IS_ASSIGNMENT
	   ,ASSIGNMENT_NAME
	   ,ASSIGNMENT_IDENTIFICATION
	   ,COD_EC
	   ,COMMERCIAL_CODE
	   ,EC_CPF_CNPJ
	   ,EC_NAME
	   ,TYPE_ESTAB
	   ,TRADING_NAME
	   ,COD_AFFILIATOR
	   ,AFFILIATOR_NAME
	   ,AFFILIATOR_CPF_CNPJ
	   ,COD_FIN_SCH_FILE
	   ,COD_PAY_PROT
	   ,1
	   ,[PRIORITY]
	   ,BANK
	   ,COD_COMP
	FROM #TMP_PROTOCOLS_PROCESSED

GO


SELECT
	COD_TITLE
   ,COD_PAY_PROT
   ,(SELECT
			COD_FIN_CALENDAR
		FROM FINANCE_CALENDAR
		WHERE FINANCE_CALENDAR.ACTIVE = 1
		AND FINANCE_CALENDAR.COD_PAY_PROT = TRANSACTION_TITLES.COD_PAY_PROT)
	AS COD_FINANCE_CALENDAR
--INTO #TMP_TITLES_UPDATE
FROM TRANSACTION_TITLES
WHERE COD_FIN_CALENDAR IS NULL



--UPDATE TRANSACTION_TITLES
--SET 
DECLARE @CONT INT = 0

WHILE @CONT < 10 
BEGIN
WITH CTE
AS
(SELECT
	TOP 500000
		TRANSACTION_TITLES.COD_TITLE AS PK
	   ,(SELECT
				COD_FIN_CALENDAR
			FROM FINANCE_CALENDAR
			JOIN PROTOCOLS
				ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
				AND FINANCE_CALENDAR.ACTIVE = 1
				AND FINANCE_CALENDAR.COD_PAY_PROT = ISNULL(TRANSACTION_TITLES.COD_PAY_PROT, TITLE_LOCK_PAYMENT_DETAILS.COD_PAY_PROT))
		AS COD_FIN_CALENDAR
	FROM TRANSACTION_TITLES
	LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
		ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
	WHERE TRANSACTION_TITLES.COD_SITUATION = 8
	AND COD_FIN_CALENDAR IS NULL)
UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_FIN_CALENDAR = CTE.COD_FIN_CALENDAR
FROM TRANSACTION_TITLES
JOIN CTE
	ON CTE.PK = TRANSACTION_TITLES.COD_TITLE
--WHERE TRANSACTION_TITLES.COD_TITLE = CTE.PK

SET @CONT = @CONT + 1
END
GO
-- 734220




UPDATE RELEASE_ADJUSTMENTS
SET RELEASE_ADJUSTMENTS.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM RELEASE_ADJUSTMENTS WITH (NOLOCK)
JOIN PROTOCOLS
	ON RELEASE_ADJUSTMENTS.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
	AND FINANCE_CALENDAR.ACTIVE = 1
WHERE RELEASE_ADJUSTMENTS.COD_SITUATION = 8
AND RELEASE_ADJUSTMENTS.COD_FIN_CALENDAR IS NULL



UPDATE TARIFF_EC
SET TARIFF_EC.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM TARIFF_EC WITH (NOLOCK)
JOIN PROTOCOLS
	ON TARIFF_EC.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
WHERE TARIFF_EC.COD_SITUATION = 8
AND TARIFF_EC.COD_FIN_CALENDAR IS NULL





IF OBJECT_ID('tempdb..#TMP_PENDING') IS NOT NULL
DROP TABLE #TMP_PENDING;

IF OBJECT_ID('tempdb..#TMP_PENDING_CONFIRM') IS NOT NULL
DROP TABLE #TMP_PENDING_CONFIRM;


-- SITUATION 17

WITH CTE
AS
(SELECT
		TRANSACTION_TITLES.COD_TITLE
	   ,TRANSACTION_TITLES.COD_EC
	   ,'TITTLE' AS [TYPE]
	   ,TRANSACTION_TITLES.COD_FIN_SCH_FILE
	   ,(
		(
		(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END, (TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS AMOUNT
	FROM TRANSACTION_TITLES
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TRANSACTION_TITLES.COD_FIN_SCH_FILE
	LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
		ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
	WHERE TRANSACTION_TITLES.COD_SITUATION = 17
	AND TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET IS NULL
	UNION
	SELECT
		RELEASE_ADJUSTMENTS.COD_REL_ADJ
	   ,RELEASE_ADJUSTMENTS.COD_EC
	   ,'ADJUSTMENT' AS [TYPE]
	   ,RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	   ,RELEASE_ADJUSTMENTS.[VALUE] AS AMOUNT
	FROM RELEASE_ADJUSTMENTS
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	WHERE RELEASE_ADJUSTMENTS.COD_SITUATION = 17
	UNION
	SELECT
		TARIFF_EC.COD_TARIFF_EC
	   ,TARIFF_EC.COD_EC
	   ,'TARIFF' AS [TYPE]
	   ,TARIFF_EC.COD_FIN_SCH_FILE
	   ,TARIFF_EC.[VALUE] AS AMOUNT
	FROM TARIFF_EC
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TARIFF_EC.COD_FIN_SCH_FILE
	WHERE TARIFF_EC.COD_SITUATION = 17
	UNION
	SELECT
		TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_EC
	   ,'TITTLE_LOCK' AS [TYPE]
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE
	   ,TITLE_LOCK_PAYMENT_DETAILS.AMOUNT
	FROM TITLE_LOCK_PAYMENT_DETAILS
	JOIN TRANSACTION_TITLES
		ON TRANSACTION_TITLES.COD_TITLE = TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE
	WHERE TITLE_LOCK_PAYMENT_DETAILS.COD_SITUATION = 17
	AND TRANSACTION_TITLES.COD_FIN_SCH_FILE IS NULL)
SELECT

	COD_FIN_SCH_FILE
   ,COD_EC
   ,SUM(AMOUNT) AS AMOUNT INTO #TMP_PENDING

FROM CTE
GROUP BY COD_FIN_SCH_FILE
		,COD_EC



GO



SELECT
	CAST(FINANCE_SCHEDULE_FILE.CREATED_AT AS DATE) AS PREVISION_PAY_DATE
   ,#TMP_PENDING.AMOUNT
   ,17 AS COD_SITUATION
   ,FINANCE_SCHEDULE_FILE.COD_BK_EC
   ,BANKS.COD_BANK COD_BANK
   ,BANKS.CODE CODE_BANK
   ,AGENCY
   ,DIGIT_AGENCY
   ,ACCOUNT
   ,DIGIT_ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
   ,ACCOUNT_TYPE.[NAME] ACCOUNT_TYPE
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,OPERATION.CODE OPERATION_CODE
   ,OPERATION.[DESCRIPTION] OPERATION_DESC
   ,BANK_DETAILS_EC.IS_CERC IS_LOCK
   ,IS_ASSIGNMENT
   ,ASSIGNMENT_NAME
   ,ASSIGNMENT_IDENTIFICATION
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,COMMERCIAL_ESTABLISHMENT.CODE COMMERCIAL_CODE
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ EC_CPF_CNPJ
   ,COMMERCIAL_ESTABLISHMENT.[NAME] EC_NAME
   ,TYPE_ESTAB.CODE TYPE_ESTAB
   ,TRADING_NAME
   ,AFFILIATOR.COD_AFFILIATOR
   ,AFFILIATOR.[NAME] AFFILIATOR_NAME
   ,AFFILIATOR.CPF_CNPJ AFFILIATOR_CPF_CNPJ
   ,#TMP_PENDING.COD_FIN_SCH_FILE
   ,NULL AS COD_PAY_PROT
   ,1 AS ACTIVE
   ,BANKS.[PRIORITY]
   ,BANKS.[NAME] AS BANK
   ,COMMERCIAL_ESTABLISHMENT.COD_COMP INTO #TMP_PENDING_CONFIRM
FROM #TMP_PENDING
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = #TMP_PENDING.COD_EC
JOIN FINANCE_SCHEDULE_FILE
	ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = #TMP_PENDING.COD_FIN_SCH_FILE
JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BK_EC = FINANCE_SCHEDULE_FILE.COD_BK_EC
JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN OPERATION_BANK
	ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
LEFT JOIN OPERATION
	ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT




--SELECT SUM(AMOUNT) FROM #TMP_PENDING WHERE COD_EC = 6472



--SELECT SUM(AMOUNT) FROM  #TMP_PENDING WHERE COD_EC= 624

--SELECT * FROM COMMERCIAL_ESTABLISHMENT WHERE COD_EC=6472

--SELECT  * FROM #TMP_PENDING
--JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = #TMP_PENDING.COD_EC
--JOIN FINANCE_SCHEDULE_FILE ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = #TMP_PENDING.COD_FIN_SCH_FILE
--LEFT JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_BK_EC = FINANCE_SCHEDULE_FILE.COD_BK_EC


GO



--SELECT TRANSACTION_TITLES.* FROM TITLE_LOCK_PAYMENT_DETAILS 
--JOIN TRANSACTION_TITLES ON TRANSACTION_TITLES.COD_TITLE = TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE
--WHERE  TRANSACTION_TITLES.COD_EC = 3581 AND TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE = 217772

--SELECT * FROM TARIFF_EC WHERE COD_FIN_SCH_FILE=217772

--SELECT * FROM RELEASE_ADJUSTMENTS WHERE COD_FIN_SCH_FILE=217772

--SELECT * FROM TARIFF_EC WHERE COD_EC= 3581 AND COD_SITUATION=4 ORDER BY PAYMENT_DAY DESC




UPDATE FINANCE_CALENDAR
SET PAYMENT_DATE = PREVISION_PAY_DATE
WHERE PAYMENT_DATE IS NULL
AND COD_SITUATION = 17
AND ACTIVE = 1



GO



INSERT INTO FINANCE_CALENDAR (PREVISION_PAY_DATE
, PLOT_VALUE_PAYMENT
, COD_SITUATION
, COD_BK_EC
, COD_BANK
, CODE_BANK
, AGENCY
, DIGIT_AGENCY
, ACCOUNT
, DIGIT_ACCOUNT
, COD_TYPE_ACCOUNT
, ACCOUNT_TYPE
, COD_OPER_BANK
, OPERATION_CODE
, OPERATION_DESC
, IS_LOCK
, IS_ASSIGNMENT
, ASSIGNMENT_NAME
, ASSIGNMENT_IDENTIFICATION
, COD_EC
, COMMERCIAL_CODE
, EC_CPF_CNPJ
, EC_NAME
, TYPE_ESTAB
, TRADING_NAME
, COD_AFFILIATOR
, AFFILIATOR_NAME
, AFFILIATOR_CPF_CNPJ
, COD_FIN_SCH_FILE
, COD_PAY_PROT
, ACTIVE
, [PRIORITY]
, BANK
, COD_COMP)


	SELECT
		PREVISION_PAY_DATE
	   ,AMOUNT
	   ,COD_SITUATION
	   ,COD_BK_EC
	   ,COD_BANK
	   ,CODE_BANK
	   ,AGENCY
	   ,DIGIT_AGENCY
	   ,ACCOUNT
	   ,DIGIT_ACCOUNT
	   ,COD_TYPE_ACCOUNT
	   ,ACCOUNT_TYPE
	   ,COD_OPER_BANK
	   ,OPERATION_CODE
	   ,OPERATION_DESC
	   ,IS_LOCK
	   ,IS_ASSIGNMENT
	   ,ASSIGNMENT_NAME
	   ,ASSIGNMENT_IDENTIFICATION
	   ,COD_EC
	   ,COMMERCIAL_CODE
	   ,EC_CPF_CNPJ
	   ,EC_NAME
	   ,TYPE_ESTAB
	   ,TRADING_NAME
	   ,COD_AFFILIATOR
	   ,AFFILIATOR_NAME
	   ,AFFILIATOR_CPF_CNPJ
	   ,COD_FIN_SCH_FILE
	   ,COD_PAY_PROT
	   ,1
	   ,[PRIORITY]
	   ,BANK
	   ,COD_COMP
	FROM #TMP_PENDING_CONFIRM


UPDATE [TRANSACTION_TITLES]
SET TRANSACTION_TITLES.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM TRANSACTION_TITLES
LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
	ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_SCH_FILE = ISNULL(TRANSACTION_TITLES.COD_FIN_SCH_FILE, TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE)
	AND FINANCE_CALENDAR.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION
	AND FINANCE_CALENDAR.ACTIVE = 1

WHERE FINANCE_CALENDAR.COD_SITUATION = 17

UPDATE RELEASE_ADJUSTMENTS
SET RELEASE_ADJUSTMENTS.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM RELEASE_ADJUSTMENTS
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_SCH_FILE = RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	AND FINANCE_CALENDAR.COD_SITUATION = RELEASE_ADJUSTMENTS.COD_SITUATION
	AND FINANCE_CALENDAR.ACTIVE = 1
WHERE FINANCE_CALENDAR.COD_SITUATION = 17

UPDATE TARIFF_EC
SET TARIFF_EC.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR
FROM TARIFF_EC
JOIN FINANCE_CALENDAR
	ON TARIFF_EC.COD_FIN_SCH_FILE = FINANCE_CALENDAR.COD_FIN_SCH_FILE
	AND FINANCE_CALENDAR.COD_SITUATION = FINANCE_CALENDAR.COD_SITUATION
	AND FINANCE_CALENDAR.ACTIVE = 1

WHERE TARIFF_EC.COD_SITUATION = 17

GO








--  ** UNASSOCIATE FINANCE_CALENDAR


--UPDATE TRANSACTION_TITLES SET COD_FIN_CALENDAR=NULL WHERE COD_SITUATION=17
--UPDATE RELEASE_ADJUSTMENTS SET COD_FIN_CALENDAR=NULL WHERE COD_SITUATION=17
--UPDATE TARIFF_EC SET COD_FIN_CALENDAR=NULL WHERE COD_SITUATION=17
--UPDATE FINANCE_CALENDAR SET ACTIVE=0 WHERE COD_SITUATION=17






--select * from FINANCE_CALENDAR where 
--EC_CPF_CNPJ = '09354049000117'
--AND
--COD_SITUATION=17 and ACTIVE=1
--GO


--SELECT * FROM TRANSACTION_TITLES WHERE COD_FIN_CALENDAR=47384
--SELECT * FROM TARIFF_EC WHERE COD_FIN_CALENDAR=47384
--SELECT * FROM RELEASE_ADJUSTMENTS WHERE COD_FIN_CALENDAR=47384
--GO

SELECT TOP 100
	*
FROM TITLE_LOCK_PAYMENT_DETAILS
ORDER BY 1 DESC
GO

--SELECT * FROM FINANCE_CALENDAR WHERE ACTIVE=1 AND IS_LOCK=1 

--223145


--UPDATE [TRANSACTION_TITLES] SET 
--TRANSACTION_TITLES.COD_FIN_CALENDAR = FINANCE_CALENDAR.COD_FIN_CALENDAR 



UPDATE [TITLE]
SET [TITLE].[COD_SITUATION] = [LOCK].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS] AS [LOCK]
JOIN [TRANSACTION_TITLES] AS [TITLE]
	ON [TITLE].[COD_TITLE] = [LOCK].[COD_TITLE]
	AND [TITLE].[COD_SITUATION] <> [LOCK].[COD_SITUATION];


GO


IF OBJECT_ID('SP_UP_TRANSACTION') IS NOT NULL
DROP PROCEDURE [SP_UP_TRANSACTION];

GO
CREATE PROCEDURE [dbo].[SP_UP_TRANSACTION]                                 
/*----------------------------------------------------------------------------------------                                 
Procedure Name: [SP_UP_TRANSACTION]                                 
Project.......: TKPP                                 
------------------------------------------------------------------------------------------                                 
Author   Version  Date   Description                                 
------------------------------------------------------------------------------------------                                 
Kennedy Alef V1   27/07/2018  Creation                        
Lucas Aguiar V2   17-04-2019  rotina de aw. titles e cancelamento                         
Elir Ribeiro V3   12-08-2019  Changed situation Blocked                  
Elir Ribeiro V4   20-08-2019  Changed situation AWAITING PAYMENT           
Marcus Gall  V5   01-02-2020  Changes CONFIRMED, New CANCELED after RELEASED          
Elir Ribeiro v6   27-02-2020  Changes Cod_user
Kennedy Alef v7   11-05-2020  Reprocess financial calendar
------------------------------------------------------------------------------------------*/                                 
(                                 
@CODE_TRAN VARCHAR(200),                                 
@SITUATION VARCHAR(100),                                 
@DESCRIPTION VARCHAR(200) = NULL,                                 
@CURRENCY VARCHAR(100),                                 
@CODE_ERROR VARCHAR(100) = NULL,                              
@TRAN_ID INT   = NULL,            
@LOGICAL_NUMBER_ACQ VARCHAR(100) = NULL ,            
@CARD_HOLDER_NAME VARCHAR(100) = NULL,         
@COD_USER INT = NULL                        
)                                 
AS                                 
DECLARE @QTY INT=0;
  
          
                                
DECLARE @CONT INT;
  
          
                                 
DECLARE @SIT VARCHAR(100);
  
          
                                 
DECLARE @BRANCH INT;
  

DECLARE @COD_EC_TITTLE INT;

DECLARE @DATE_TRAN DATE;
                            
                                
IF @TRAN_ID IS NULL          
 BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.[NAME]
   ,@DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE CODE = @CODE_TRAN;
END;
ELSE
BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.NAME
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE COD_TRAN = @TRAN_ID;
END;

IF @CONT < 1
	OR @CONT IS NULL
THROW 60002, '601', 1;

UPDATE PROCESS_BG_STATUS
SET STATUS_PROCESSED = 0
   ,MODIFY_DATE = GETDATE()
FROM PROCESS_BG_STATUS WITH (NOLOCK)
WHERE CODE = @CONT
AND COD_TYPE_PROCESS_BG = 1;

-- @SITUATION CONDITIONALS          
IF @SITUATION = 'APPROVED'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,1
	   ,'100 - APROVADA';

UPDATE [TRANSACTION]
SET COD_SITUATION = 1
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '100 - APROVADA')
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 100)
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,LOGICAL_NUMBER_ACQ = @LOGICAL_NUMBER_ACQ
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CONFIRMED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '603', 1;

INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,3
	   ,@DESCRIPTION;

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 200)
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '200 - CONFIRMADA')
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
--EXECUTE [SP_GEN_TITLES_TRANS] @COD_TRAN = @CODE_TRAN, @TRAN_ID= @TRAN_ID;          

END;
ELSE
IF @SITUATION = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,22
	   ,'206 - AGUARDANDO TITULOS';

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
UPDATE [TRANSACTION]
SET COD_SITUATION = 22
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = 206
   ,COMMENT = '206 - AGUARDANDO TITULOS'
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'PROCESSING UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,21
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 21
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'UNDONE FAIL'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,23
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 23
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'DENIED ACQUIRER'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                            
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,2
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 2
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'BLOCKED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,14
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;
IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;


--- REPROCESS FINANCIAL CALENDAR 

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;


ELSE
IF @SITUATION = 'AWAITING PAYMENT'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,4
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 4
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 4
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

--- REPROCESS FINANCIAL CALENDAR 

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR

END;
ELSE
IF @SITUATION = 'UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,10
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 10
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
IF @SITUATION = 'FAILED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,7
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 7
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 700)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CANCELED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '703', 1;
IF @SIT = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
BEGIN
SELECT
	@QTY = COUNT(*)
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND TRANSACTION_TITLES.COD_SITUATION NOT IN (4, 20);

IF @QTY > 0
THROW 60002, '704', 1;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @DATE_TRAN = dbo.FN_FUS_UTF(GETDATE())
BEGIN


--- REPROCESS FINANCIAL CALENDAR 

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;



END;

END;
ELSE
IF @SITUATION = 'CANCELED PARTIAL'
BEGIN
IF @SIT = 'CANCELED'
THROW 60002, '703', 1;

INSERT INTO RELEASE_ADJUSTMENTS (COD_EC, VALUE, PREVISION_PAY_DATE, COD_TYPEJUST, COMMENT, COD_SITUATION, COD_USER, COD_REQ, COD_BRANCH, COD_TRAN, COD_TITLE_REF)
	SELECT
		CAST([TRANSACTION].COD_EC AS INT) AS COD_EC
	   ,(CAST(
		(
		(
		(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END, (TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS DECIMAL(22, 6)) * -1) AS VALUE
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE AS PREVISION_PAY_DATE
	   ,CAST(2 AS INT) AS COD_TYPEJUST
	   ,CAST('CANCELAMENTO PARCIAL, NSU: ' + [TRANSACTION].CODE AS VARCHAR(200)) AS COMMENT
	   ,CAST(4 AS INT) AS COD_SITUATION
	   ,NULL AS CODUSER
	   ,NULL AS COD_REQ
	   ,CAST([COMMERCIAL_ESTABLISHMENT].COD_EC AS INT) AS COD_BRANCH
	   ,CAST([TRANSACTION].COD_TRAN AS INT) AS COD_TRAN
	   ,CAST([TRANSACTION_TITLES].COD_TITLE AS INT) AS COD_TITLE_REF
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	INNER JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
	INNER JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].COD_EC = [TRANSACTION].COD_EC
	WHERE [TRANSACTION].COD_TRAN = @CONT
	AND [TRANSACTION_TITLES].COD_SITUATION = 8;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION_TITLES]
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES].COD_SITUATION = 4;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES_COST].COD_SITUATION = 4;


DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;


END;

GO
  
-----------------------------
-- ET-465 Gestão de Risco
-----------------------------


IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'OPERATION_AFF'
	AND object_id = OBJECT_ID(N'AFFILIATOR'))
BEGIN
ALTER TABLE AFFILIATOR
ADD OPERATION_AFF INT DEFAULT 0;
END;

GO

IF NOT EXISTS (SELECT
		1
	FROM [sys].[COLUMNS]
	WHERE [NAME] = N'REQUESTED_PRESENTIAL_TRANSACTION'
	AND object_id = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD REQUESTED_PRESENTIAL_TRANSACTION INT DEFAULT 0;
END;

GO

UPDATE AFFILIATOR
SET OPERATION_AFF = 0
WHERE OPERATION_AFF IS NULL
GO

IF OBJECT_ID('SP_VAL_OPERATION_AFF') IS NOT NULL DROP PROCEDURE SP_VAL_OPERATION_AFF;
GO
CREATE PROCEDURE SP_VAL_OPERATION_AFF
(
@COD_AFILIATOR INT
)
AS
BEGIN

SELECT
	OPERATION_AFF
FROM AFFILIATOR
WHERE COD_AFFILIATOR = @COD_AFILIATOR;

END;

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE [NAME] = N'REQUESTED_PRESENTIAL_TRANSACTION'
		AND [object_id] = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD REQUESTED_PRESENTIAL_TRANSACTION INT NOT NULL DEFAULT 1
END
GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE [NAME] = N'REQUESTED_ONLINE_TRANSACTION'
	AND [object_id] = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD REQUESTED_ONLINE_TRANSACTION INT NOT NULL DEFAULT 1
END

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE [NAME] = N'COD_USER_MODIFY'
	AND [object_id] = OBJECT_ID(N'DOCS_BRANCH'))
BEGIN
ALTER TABLE DOCS_BRANCH
ADD COD_USER_MODIFY INT NULL REFERENCES USERS (COD_USER)
END
GO

IF (OBJECT_ID('[FNC_REG_DENIED_TRAN]') IS NOT NULL)
DROP FUNCTION [FNC_REG_DENIED_TRAN]
GO

CREATE FUNCTION [dbo].[FNC_REG_DENIED_TRAN]
(
    @TRAN_ONLINE INT,
    @TRAN_LIMIT DECIMAL(22, 6),
    @TRAN_AMOUNT DECIMAL(22, 6),
    @COD_TAX_DEP INT,
    @EQUIP_ACTIVE INT,
    @EC_ACTIVE INT,
    @COD_EC INT
)
RETURNS VARCHAR(200)
AS
BEGIN
    DECLARE @MSG VARCHAR(200) = null

    IF @TRAN_ONLINE = 0
        BEGIN
SET @MSG = '402;Transaction Online is disable'
            RETURN @MSG;
        END

    IF @TRAN_AMOUNT > @TRAN_LIMIT
        BEGIN
SET @MSG = '402;Transaction limit value exceeded"d'
            RETURN @MSG;
        END

    IF @COD_TAX_DEP IS NULL
        BEGIN
SET @MSG = '404;Plan tax/Not found '
            RETURN @MSG;
        END;

IF @EQUIP_ACTIVE = 0
BEGIN
SET @MSG = '003;Blocked terminal'
            RETURN @MSG;
        END;

IF @EC_ACTIVE = 0
BEGIN
SET @MSG = '009;Blocked commercial establishment'
            RETURN @MSG;
        END;

SELECT
	@MSG = dbo.[SP_VAL_LIMIT_EC_FNC](@COD_EC, @TRAN_AMOUNT)
RETURN @MSG;


END;
GO


IF OBJECT_ID('ESTABLISHMENT_CONDITIONS') IS NOT NULL
DROP TABLE [ESTABLISHMENT_CONDITIONS];
GO
CREATE TABLE [ESTABLISHMENT_CONDITIONS](
	[COD_EC_CONDIT]          INT IDENTITY PRIMARY KEY, 
	[COD_COMP]               INT NOT NULL, 
	[COD_USER]               INT NOT NULL, 
	[COD_EC]                 INT NOT NULL, 
	[CREATED_AT]             DATETIME DEFAULT CURRENT_TIMESTAMP, 
	[MODIFY_DATE]            DATETIME, 
	[ACTIVE]                 INT DEFAULT 1, 
	[PRESENCIAL_TRANSACTION] INT NOT NULL, 
	[ONLINE_TRANSACTION]     INT NOT NULL, 
	[DOCUMENT]               INT NOT NULL, 
	FOREIGN KEY([COD_COMP]) REFERENCES [COMPANY]([COD_COMP]), 
	FOREIGN KEY([COD_USER]) REFERENCES [USERS]([COD_USER]), 
	FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]));

GO

IF OBJECT_ID('ESTABLISHMENT_CONDITIONS_HIST') IS NOT NULL
DROP TABLE [ESTABLISHMENT_CONDITIONS_HIST];
GO
CREATE TABLE [ESTABLISHMENT_CONDITIONS_HIST](
	[COD_EC_CONDIT]          INT PRIMARY KEY, 
	[COD_COMP]               INT NOT NULL, 
	[COD_USER]               INT NOT NULL, 
	[COD_EC]                 INT NOT NULL, 
	[CREATED_AT]             DATETIME DEFAULT CURRENT_TIMESTAMP, 
	[MODIFY_DATE]            DATETIME, 
	[ACTIVE]                 INT DEFAULT 1, 
	[PRESENCIAL_TRANSACTION] INT NOT NULL, 
	[ONLINE_TRANSACTION]     INT NOT NULL, 
	[DOCUMENT]               INT NOT NULL, 
	FOREIGN KEY([COD_COMP]) REFERENCES [COMPANY]([COD_COMP]), 
	FOREIGN KEY([COD_USER]) REFERENCES [USERS]([COD_USER]), 
	FOREIGN KEY([COD_EC]) REFERENCES [COMMERCIAL_ESTABLISHMENT]([COD_EC]));
GO

IF NOT EXISTS (SELECT
		1
	FROM sys.indexes
	WHERE object_id = OBJECT_ID('ESTABLISHMENT_CONDITIONS')
	AND NAME = 'IDX_ESTAB_COND_EC')
BEGIN
CREATE NONCLUSTERED INDEX IDX_ESTAB_COND_EC ON ESTABLISHMENT_CONDITIONS (COD_EC, ACTIVE) INCLUDE (PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION)
END
GO
IF NOT EXISTS (SELECT
		1
	FROM sys.indexes
	WHERE object_id = OBJECT_ID('ESTABLISHMENT_CONDITIONS')
	AND NAME = 'IDX_ESTAB_COND_COMP_EC')
BEGIN
CREATE NONCLUSTERED INDEX IDX_ESTAB_COND_COMP_EC ON ESTABLISHMENT_CONDITIONS (COD_COMP, COD_EC, ACTIVE) INCLUDE (PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION)
END
GO

IF OBJECT_ID('SP_REG_ESTABLISHMENT_CONDITIONS') IS NOT NULL
DROP PROCEDURE [SP_REG_ESTABLISHMENT_CONDITIONS];
GO
CREATE PROCEDURE [DBO].[SP_REG_ESTABLISHMENT_CONDITIONS]

/************************************************************************************************
---------------------------------------------------------------------------------------------
    Project.......: TKPP
-----------------------------------------------------------------------------------------------
    Author                      VERSION         Date                        Description
-----------------------------------------------------------------------------------------------
    Lucas Aguiar			    v1		     2020-02-12			 Procedure para o registro das condições
    Luiz Aquino                 V2           2020-03-16          Adicionar bloqueio da agenda
    Luiz Aquino                 V2           2020-03-17          Adicionar campos
    Marcus Gall					v3 			 2020-04-28			 Aprovação/Envio para Análise de todos os docs
************************************************************************************************/

(
	@COD_EC                 INT,
	@COD_COMP               INT,
	@COD_USER               INT,
	@PRESENCIAL_TRANSACTION INT,
	@ONLINE_TRANSACTION     INT,
	@DOCUMENT               INT,
    @RequestedOnlineTransaction INT = NULL,
    @RequestedPresentialTransaction INT = NULL,
    @KEEP_SITUATION INT = NULL
)
AS
BEGIN
    DECLARE @COD_RISK INT
    DECLARE @COD_SIT INT
    DECLARE @JUSTIFY_FINANCE VARCHAR(500)
    DECLARE @JUSTIFY_RISC VARCHAR(500)
    DECLARE @COD_SIT_FIN_BLOCK INT
    DECLARE @COD_SIT_RELEASED INT
    DECLARE @DEFAULT_BLOCK_MESSAGE VARCHAR(64) = 'Pendente aprovação dos documentos'
    DECLARE @COD_BRANCH INT
    DECLARE @COD_SIT_DOC INT
    DECLARE @COMMENT VARCHAR(500)

SELECT
	@COD_SIT_FIN_BLOCK = COD_SITUATION
FROM SITUATION
WHERE NAME = 'LOCKED FINANCIAL SCHEDULE'
SELECT
	@COD_SIT_RELEASED = COD_SITUATION
FROM SITUATION
WHERE NAME = 'RELEASED'

IF @KEEP_SITUATION IS NULL
BEGIN
IF @DOCUMENT = 0
	AND EXISTS (SELECT TOP 1
			COD_EC
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE COD_EC = @COD_EC
		AND COD_SITUATION = @COD_SIT_RELEASED)
BEGIN
SELECT
	@COD_RISK = COD_RISK_SITUATION
   ,@COD_SIT = COD_SITUATION
   ,@JUSTIFY_FINANCE = NOTE_FINANCE_SCHEDULE
   ,@JUSTIFY_RISC = RISK_REASON
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
AND COD_COMP = @COD_COMP

EXEC SP_UP_EC_SITUATION @COD_EC
					   ,@COD_USER
					   ,@COD_RISK
					   ,1
					   ,@DEFAULT_BLOCK_MESSAGE
					   ,@JUSTIFY_RISC
END
ELSE
IF EXISTS (SELECT TOP 1
			COD_EC
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE COD_EC = @COD_EC
		AND COD_SITUATION = @COD_SIT_FIN_BLOCK
		AND NOTE_FINANCE_SCHEDULE = @DEFAULT_BLOCK_MESSAGE)
BEGIN
SELECT
	@COD_RISK = COD_RISK_SITUATION
   ,@COD_SIT = COD_SITUATION
   ,@JUSTIFY_FINANCE = NOTE_FINANCE_SCHEDULE
   ,@JUSTIFY_RISC = RISK_REASON
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC
AND COD_COMP = @COD_COMP

EXEC SP_UP_EC_SITUATION @COD_EC
					   ,@COD_USER
					   ,@COD_RISK
					   ,0
					   ,NULL
					   ,@JUSTIFY_RISC
END

IF @RequestedPresentialTransaction IS NOT NULL
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET REQUESTED_PRESENTIAL_TRANSACTION = @RequestedPresentialTransaction
WHERE COD_EC = @COD_EC
END

IF @RequestedOnlineTransaction IS NOT NULL
BEGIN
UPDATE COMMERCIAL_ESTABLISHMENT
SET REQUESTED_ONLINE_TRANSACTION = @RequestedOnlineTransaction
WHERE COD_EC = @COD_EC
END
END

INSERT INTO ESTABLISHMENT_CONDITIONS_HIST (COD_EC_CONDIT, COD_COMP, COD_USER, COD_EC, CREATED_AT, MODIFY_DATE, ACTIVE, PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION, DOCUMENT)
	SELECT
		COD_EC_CONDIT
	   ,COD_COMP
	   ,COD_USER
	   ,COD_EC
	   ,CREATED_AT
	   ,current_timestamp
	   ,ACTIVE
	   ,PRESENCIAL_TRANSACTION
	   ,ONLINE_TRANSACTION
	   ,DOCUMENT
	FROM ESTABLISHMENT_CONDITIONS
	WHERE [COD_EC] = @COD_EC
	AND [COD_COMP] = @COD_COMP
	AND [ACTIVE] = 1;

DELETE FROM ESTABLISHMENT_CONDITIONS
WHERE [COD_EC] = @COD_EC
	AND [COD_COMP] = @COD_COMP
	AND [ACTIVE] = 1;

INSERT INTO [ESTABLISHMENT_CONDITIONS] ([COD_USER],
[COD_COMP],
[COD_EC],
[PRESENCIAL_TRANSACTION],
[ONLINE_TRANSACTION],
[DOCUMENT])
	VALUES (@COD_USER, @COD_COMP, @COD_EC, @PRESENCIAL_TRANSACTION, @ONLINE_TRANSACTION, @DOCUMENT);

-- APROVAR / ANALISAR TODOS DOCUMENTOS
IF @KEEP_SITUATION IS NOT NULL
BEGIN
SELECT
	@COD_BRANCH = COD_BRANCH
FROM BRANCH_EC
WHERE COD_EC = @COD_EC;

IF @DOCUMENT = 0
	AND EXISTS (SELECT TOP 1
			COD_DOC_BR
		FROM DOCS_BRANCH
		WHERE ACTIVE = 1
		AND COD_BRANCH = @COD_BRANCH)
BEGIN
SELECT
	@COD_SIT_DOC = COD_SIT_REQ
FROM SITUATION_REQUESTS
WHERE TYPE = 'DOC'
AND NAME = 'EM ANÁLISE';
SELECT
	@COMMENT = 'Todos os documentos enviados para análise';
END
ELSE
IF EXISTS (SELECT
			1 COD_DOC_BR
		FROM DOCS_BRANCH
		WHERE ACTIVE = 1
		AND COD_BRANCH = @COD_BRANCH
		AND PATH_DOC IS NOT NULL)
BEGIN
SELECT
	@COD_SIT_DOC = COD_SIT_REQ
FROM SITUATION_REQUESTS
WHERE TYPE = 'DOC'
AND NAME = 'APROVADO';
SELECT
	@COMMENT = 'Todos os documentos foram aprovados';
END

INSERT INTO HIST_SIT_DOCS_BRANCH (COD_DOC_BR, COD_USER, COD_SIT_REQ)
	SELECT
		COD_DOC_BR
	   ,COD_USER
	   ,COD_SIT_REQ
	FROM DOCS_BRANCH
	WHERE ACTIVE = 1
	AND COD_BRANCH = @COD_BRANCH
	AND PATH_DOC IS NOT NULL;
IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER HIST_SIT_DOCS_BRANCH', 1;

UPDATE DOCS_BRANCH
SET COD_SIT_REQ = @COD_SIT_DOC
   ,MODIFY_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER
   ,COMMENT = @COMMENT
WHERE ACTIVE = 1
AND COD_BRANCH = @COD_BRANCH
AND PATH_DOC IS NOT NULL;
IF @@rowcount < 1
THROW 60000, 'COULD NOT UPDATE DOCS_BRANCH', 1;
END
-- APROVAR / ANALISAR TODOS DOCUMENTOS

END;

GO

IF OBJECT_ID('[SP_FD_ESTABLISHMENT_CONDITIONS]') IS NOT NULL
DROP PROCEDURE [SP_FD_ESTABLISHMENT_CONDITIONS];
GO

CREATE PROCEDURE [DBO].[SP_FD_ESTABLISHMENT_CONDITIONS]  

/************************************************************************************************
---------------------------------------------------------------------------------------------  
    Project.......: TKPP  
-----------------------------------------------------------------------------------------------  
    Author                        VERSION         Date                        Description  
-----------------------------------------------------------------------------------------------  
    Lucas Aguiar			    v1		     2020-02-12			 Procedure para o busca das condições
************************************************************************************************/

(
	@COD_EC   INT, 
	@COD_COMP INT)
AS
BEGIN

SELECT
	[ESTABLISHMENT_CONDITIONS].[COD_EC_CONDIT]
   ,[ESTABLISHMENT_CONDITIONS].[COD_EC]
   ,[ESTABLISHMENT_CONDITIONS].[DOCUMENT]
   ,[ESTABLISHMENT_CONDITIONS].[ONLINE_TRANSACTION]
   ,[ESTABLISHMENT_CONDITIONS].[PRESENCIAL_TRANSACTION]
FROM [ESTABLISHMENT_CONDITIONS]
WHERE [COD_COMP] = @COD_COMP
AND [COD_EC] = @COD_EC
AND [ACTIVE] = 1;

END;

GO



IF OBJECT_ID('[SP_LS_DOCS]') IS NOT NULL
DROP PROCEDURE [SP_LS_DOCS];
GO

CREATE PROCEDURE [DBO].[SP_LS_DOCS]          

/*************************************************************************************************
----------------------------------------------------------------------------------------        
Procedure Name: [SP_LS_DOCS]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Lucas Aguiar     V1    05/10/2018      Creation        
Gian Luca Dalle Cort   V1    15/10/2018      Changed        
------------------------------------------------------------------------------------------
*************************************************************************************************/
        
(
	@COD_BRANCH INT, 
	@COD_EC     INT = NULL)
AS
BEGIN

    IF @COD_EC IS NOT NULL
SELECT
	@COD_BRANCH = [COD_BRANCH]
FROM [BRANCH_EC]
WHERE [COD_EC] = @COD_EC
AND [TYPE_BRANCH] = 'PRINCIPAL';


SELECT
	[DOC].[COD_DOC_BR] AS 'COD_DOC_BR'
   ,[DOC].[COD_USER] AS 'COD_USER'
   ,[DOC].[COD_BRANCH] AS 'COD_BRANCH'
   ,[DOC].[COD_SIT_REQ] AS 'COD_SIT_REQ'
   ,[DOC].[COD_DOC_TYPE] AS 'COD_DOC_TYPE'
   ,[D_TYPE].[NAME] AS 'NAME'
   ,[DOC].[PATH_DOC] AS 'PATH_DOC'
   ,[DOC].[ACTIVE] AS 'ACTIVE'
   ,[DOC].[COMMENT] AS 'COMMENT'
   ,[DOC].[MODIFY_DATE] AS 'MODIFY_DATE'
   ,[DOC].[COD_SUP_TIC] AS 'COD_SUP_TIC'
   ,[SITUATION_REQUESTS].[NAME] AS 'SITUATION'
FROM [DOCS_BRANCH] AS [DOC]
INNER JOIN [DOC_TYPES] AS [D_TYPE]
	ON [D_TYPE].[COD_DOC_TYPE] = [DOC].[COD_DOC_TYPE]
INNER JOIN [SITUATION_REQUESTS]
	ON [SITUATION_REQUESTS].[COD_SIT_REQ] = [DOC].[COD_SIT_REQ]
WHERE [ACTIVE] = 1
AND [COD_BRANCH] = @COD_BRANCH
AND [DOC].[PATH_DOC] IS NOT NULL
ORDER BY [D_TYPE].[NAME];

END;

GO

UPDATE SITUATION_REQUESTS
SET TYPE = NULL
WHERE [TYPE] = 'DOC';

GO

UPDATE [SITUATION_REQUESTS]
SET [TYPE] = 'DOC'
WHERE [COD_SIT_REQ] IN (12, 13, 21, 16, 14);

GO

IF
( SELECT
		COUNT(*)
	FROM [SITUATION_REQUESTS]
	WHERE [CODE] = 'PENDING ON ANALYSIS')
= 0
INSERT INTO [SITUATION_REQUESTS] ([CODE],
[NAME],
[TYPE])
	VALUES ('PENDING ON ANALYSIS', 'PENDENTE DE ANÁLISE', 'DOC');

GO

IF OBJECT_ID('LS_DOC_SITUATION') IS NOT NULL
DROP PROCEDURE [LS_DOC_SITUATION];
GO

CREATE PROCEDURE [LS_DOC_SITUATION]
AS
BEGIN
SELECT
	[COD_SIT_REQ]
   ,[NAME]
FROM [SITUATION_REQUESTS]
WHERE [TYPE] = 'DOC';
END;
GO


IF (OBJECT_ID('SP_UP_DOC_BRANCH') IS NOT NULL)
DROP PROCEDURE [SP_UP_DOC_BRANCH];
GO
CREATE PROCEDURE [dbo].[SP_UP_DOC_BRANCH]
/*************************************************************************************************
----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date             Description
------------------------------------------------------------------------------------------
Lucas Aguiar                     V1             2018-10-05      Creation
Gian Luca Dalle Cort             V2             2018-10-15      Changed
Luiz Aquino                      v3             2020-03-04      Add Cod User Modify
------------------------------------------------------------------------------------------
*************************************************************************************************/
(@COD_DOC INT,  @COD_SIT INT, @COD_USER INT = null, @COMMENT VARCHAR(100) = null)
AS
BEGIN

INSERT INTO HIST_SIT_DOCS_BRANCH (COD_DOC_BR, COD_USER, COD_SIT_REQ)
	SELECT
		@COD_DOC
	   ,COD_USER
	   ,COD_SIT_REQ
	FROM DOCS_BRANCH
	WHERE COD_DOC_BR = @COD_DOC

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER HIST_SIT_DOCS_BRANCH', 1;

UPDATE DOCS_BRANCH
SET COD_SIT_REQ = @COD_SIT
   ,MODIFY_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER
   ,COMMENT = @COMMENT
WHERE COD_DOC_BR = @COD_DOC;

IF @@rowcount < 1
THROW 60000, 'COULD NOT UPDATE DOCS_BRANCH', 1;

DECLARE @COD_BRANCH INT;
DECLARE @COD_SIT_DOC_APROVED INT;
DECLARE @COD_EC INT;
DECLARE @COD_COMP INT;

SELECT TOP 1
	@COD_BRANCH = COD_BRANCH
FROM DOCS_BRANCH
WHERE COD_DOC_BR = @COD_DOC;
SELECT
	@COD_SIT_DOC_APROVED = COD_SIT_REQ
FROM SITUATION_REQUESTS
WHERE TYPE = 'DOC'
AND NAME = 'APROVADO';
SELECT
	@COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
   ,@COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE BRANCH_EC.COD_BRANCH = @COD_BRANCH;

IF NOT EXISTS (SELECT TOP 1
			COD_DOC_BR
		FROM DOCS_BRANCH
		WHERE COD_BRANCH = @COD_BRANCH
		AND ACTIVE = 1
		AND COD_SIT_REQ != @COD_SIT_DOC_APROVED
		AND PATH_DOC IS NOT NULL)
BEGIN
UPDATE ESTABLISHMENT_CONDITIONS
SET [DOCUMENT] = 1
WHERE [COD_EC] = @COD_EC
AND [COD_COMP] = @COD_COMP
AND [ACTIVE] = 1;
IF @@rowcount < 1
THROW 60000, 'COULD NOT UPDATE ESTABLISHMENT_CONDITIONS', 1;
END
ELSE
IF EXISTS (SELECT TOP 1
			COD_EC_CONDIT
		FROM ESTABLISHMENT_CONDITIONS
		WHERE [COD_EC] = @COD_EC
		AND [COD_COMP] = @COD_COMP
		AND ACTIVE = 1
		AND DOCUMENT = 1)
BEGIN
UPDATE ESTABLISHMENT_CONDITIONS
SET [DOCUMENT] = 0
WHERE [COD_EC] = @COD_EC
AND [COD_COMP] = @COD_COMP
AND [ACTIVE] = 1;
IF @@rowcount < 1
THROW 60000, 'COULD NOT UPDATE ESTABLISHMENT_CONDITIONS', 1;
END
END;
GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE [NAME] = N'COD_RISK_SITUATION'
	AND [object_id] = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT_LOG'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT_LOG
ADD COD_RISK_SITUATION INT NULL REFERENCES RISK_SITUATION (COD_RISK_SITUATION)
END

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE [NAME] = N'NOTE_FINANCE_SCHEDULE'
	AND [object_id] = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT_LOG'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT_LOG
ADD NOTE_FINANCE_SCHEDULE VARCHAR(500)
END

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE [NAME] = N'RISK_REASON'
	AND [object_id] = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT_LOG'))
BEGIN
ALTER TABLE COMMERCIAL_ESTABLISHMENT_LOG
ADD RISK_REASON VARCHAR(500)
END

IF (OBJECT_ID('[SP_UP_EC_SITUATION]') IS NOT NULL)
DROP PROCEDURE [SP_UP_EC_SITUATION]
GO
CREATE PROCEDURE [dbo].[SP_UP_EC_SITUATION]
/*************************************************************************************************
----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date             Description
------------------------------------------------------------------------------------------
Luiz Aquino                      v3             2020-03-04      Created
------------------------------------------------------------------------------------------
*************************************************************************************************/
(@COD_EC INT, @COD_USER INT, @COD_RISK_SITUATION INT, @FINANCE_BLOCKED INT, @JUSTIFY_FINANCE VARCHAR(500), @JUSTIFY_RISC VARCHAR(500))
AS
BEGIN

INSERT INTO COMMERCIAL_ESTABLISHMENT_LOG (CODE, NAME, TRADING_NAME, CPF_CNPJ, DOCUMENT_TYPE, EMAIL, STATE_REGISTRATION, MUNICIPAL_REGISTRATION, COD_SEG, TRANSACTION_LIMIT, LIMIT_TRANSACTION_DIALY, BIRTHDATE, COD_USER, COD_COMP, MODIFY_DATE, COD_USER_MODIFY, SEC_FACTOR_AUTH_ACTIVE, COD_TYPE_ESTAB, COD_SEX, DOCUMENT, COD_SALES_REP, COD_EC, NOTE, COD_SIT_REQ, COD_SITUATION, COD_REQ, COD_AFFILIATOR, TRANSACTION_ONLINE, USER_ONLINE, PWD_ONLINE, DEFAULT_EC, NOTE_FINANCE_SCHEDULE, COD_RISK_SITUATION, RISK_REASON)
	SELECT
		CODE
	   ,NAME
	   ,TRADING_NAME
	   ,CPF_CNPJ
	   ,DOCUMENT_TYPE
	   ,EMAIL
	   ,STATE_REGISTRATION
	   ,MUNICIPAL_REGISTRATION
	   ,COD_SEG
	   ,TRANSACTION_LIMIT
	   ,LIMIT_TRANSACTION_DIALY
	   ,BIRTHDATE
	   ,COD_USER
	   ,COD_COMP
	   ,MODIFY_DATE
	   ,COD_USER_MODIFY
	   ,SEC_FACTOR_AUTH_ACTIVE
	   ,COD_TYPE_ESTAB
	   ,COD_SEX
	   ,DOCUMENT
	   ,COD_SALES_REP
	   ,COD_EC
	   ,NOTE
	   ,COD_SIT_REQ
	   ,COD_SITUATION
	   ,COD_REQ
	   ,COD_AFFILIATOR
	   ,TRANSACTION_ONLINE
	   ,USER_ONLINE
	   ,PWD_ONLINE
	   ,DEFAULT_EC
	   ,NOTE_FINANCE_SCHEDULE
	   ,COD_RISK_SITUATION
	   ,RISK_REASON
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC

DECLARE @COD_SITUATION INT
DECLARE @BlockedSituation INT

SELECT
	@COD_SITUATION = COD_SITUATION
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC

SELECT
	@BlockedSituation = COD_SITUATION
FROM SITUATION
WHERE NAME = 'LOCKED FINANCIAL SCHEDULE'

IF @FINANCE_BLOCKED = 1
BEGIN
SET @COD_SITUATION = @BlockedSituation
    END
    IF @FINANCE_BLOCKED = 0 AND @COD_SITUATION = @BlockedSituation BEGIN
SELECT
	@COD_SITUATION = COD_SITUATION
FROM SITUATION
WHERE NAME = 'RELEASED'
END

UPDATE COMMERCIAL_ESTABLISHMENT
SET COD_USER_MODIFY = @COD_USER
   ,COD_RISK_SITUATION = @COD_RISK_SITUATION
   ,NOTE_FINANCE_SCHEDULE = @JUSTIFY_FINANCE
   ,RISK_REASON = @JUSTIFY_RISC
   ,COD_SITUATION = @COD_SITUATION
WHERE COD_EC = @COD_EC

END;
GO

INSERT INTO MESSAGING_CATEGORY ([DESCRIPTION], [SECONS_ON_SCREEN], [TRANSLATE_DESCRIPTION], [CLASS_STYLE])
	VALUES ('WARNING', 30, 'AVISO', 'warning')
GO

IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE [NAME] = N'REDIRECT_URL'
	AND [object_id] = OBJECT_ID(N'MESSAGING'))
BEGIN
ALTER TABLE MESSAGING
ADD REDIRECT_URL VARCHAR(128) NULL
END
GO

IF (OBJECT_ID('[SP_REG_MESSAGING]') IS NOT NULL)
DROP PROCEDURE [SP_REG_MESSAGING]
GO
CREATE PROCEDURE [dbo].[SP_REG_MESSAGING]
/*************************************************************************************************
----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date             Description
------------------------------------------------------------------------------------------
Luiz Aquino                      v2             2020-03-09      Add Redirect Url
------------------------------------------------------------------------------------------
*************************************************************************************************/
(
    @EXPIRATION_TIME INT = 1,
    @COD_USER_ORIGIN INT,
    @COD_USER CODE_TYPE READONLY,
    @COD_EC CODE_TYPE READONLY,
    @COD_AFFILIATOR CODE_TYPE READONLY,
    @COD_MES_CAT INT,
    @CONTENT_MESSAGE VARCHAR(MAX),
    @LINK_MESSAGE VARCHAR(250) = NULL,
    @COD_SHIPPING_OPT INT,
    @TITLE VARCHAR(255),
    @REDIRECT_URL VARCHAR(128) = NULL
)
AS
BEGIN

    DECLARE @USERS CODE_TYPE;

    DECLARE @TABLE_ID TABLE ( ID INT );

    DECLARE @SEQ_GROUP INT = NEXT VALUE FOR SEQ_MESSAGE_GROUP;

    IF @COD_SHIPPING_OPT = 1
        BEGIN
INSERT INTO @USERS
	SELECT
		COD_USER
	FROM USERS
	WHERE ACTIVE = 1
	AND ((SELECT
			COUNT(*)
		FROM @COD_AFFILIATOR)
	= 0
	OR (COD_AFFILIATOR IN (SELECT
			*
		FROM @COD_AFFILIATOR)
	))
	AND COD_MODULE = 5;
END
ELSE
IF @COD_SHIPPING_OPT = 2
BEGIN
INSERT INTO @USERS
	SELECT
		COD_USER
	FROM USERS
	WHERE COD_AFFILIATOR IN (SELECT
			*
		FROM @COD_AFFILIATOR)
	AND ((SELECT
			COUNT(*)
		FROM @COD_EC)
	= 0
	OR COD_EC IN (SELECT
			*
		FROM @COD_EC)
	)
	AND ACTIVE = 1
	AND COD_MODULE = 2;
END
ELSE
IF @COD_SHIPPING_OPT = 3
BEGIN
INSERT INTO @USERS
	SELECT
		COD_USER
	FROM USERS
	WHERE ACTIVE = 1
	AND (COD_EC IN (SELECT
			*
		FROM @COD_EC)
	)
	AND COD_MODULE = 2;
END
ELSE
IF @COD_SHIPPING_OPT = 4
BEGIN
INSERT INTO @USERS
	SELECT
		COD_USER
	FROM USERS
	WHERE ACTIVE = 1
	AND (COD_USER IN (SELECT
			*
		FROM @COD_USER)
	)
END
ELSE
THROW 60001, 'SHIPPING OPTION NOT FOUND', 1;

IF (SELECT
			COUNT(*)
		FROM @USERS)
	= 0
THROW 61006, 'USER NOT FOUND', 1;

INSERT INTO MESSAGING (TITLE, CREATED_AT, EXPIRATION_DATE, COD_USER_ORIGIN, COD_USER, COD_EC, COD_AFFILIATOR,
COD_MES_CAT, CONTENT_MESSAGE, LINK_MESSAGE, CODE_GROUP, COD_SHIPPING_OPT, REDIRECT_URL)
OUTPUT INSERTED.COD_MESSAGING INTO @TABLE_ID
	SELECT
		@TITLE
	   ,current_timestamp
	   ,DATEADD(DAY, 30, current_timestamp)
	   ,@COD_USER_ORIGIN
	   ,CODE
	   ,COD_EC
	   ,COD_AFFILIATOR
	   ,@COD_MES_CAT
	   ,@CONTENT_MESSAGE
	   ,@LINK_MESSAGE
	   ,@SEQ_GROUP
	   ,@COD_SHIPPING_OPT
	   ,@REDIRECT_URL
	FROM @USERS U
	JOIN USERS
		ON USERS.COD_USER = U.CODE

SELECT
	tbl.ID
   ,MESSAGING.COD_USER
FROM @TABLE_ID tbl
JOIN MESSAGING
	ON MESSAGING.COD_MESSAGING = tbl.ID

END;
GO

IF (OBJECT_ID('[SP_LS_EC_USER_ONLINE]') IS NOT NULL)
DROP PROCEDURE [SP_LS_EC_USER_ONLINE]
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_USER_ONLINE]
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date          Description
------------------------------------------------------------------------------------------
Caike Uchoa                      V1         2018-10-29        Creation
Luiz Aquino                      V2         2020-03-10        Add Cof affiliator
------------------------------------------------------------------------------------------*/
    @COD_COMP INT,
    @COD_EC INT
AS
SELECT
	[COMMERCIAL_ESTABLISHMENT].[NAME]
   ,[COMMERCIAL_ESTABLISHMENT].PWD_ONLINE
   ,[COMMERCIAL_ESTABLISHMENT].USER_ONLINE
   ,[COMMERCIAL_ESTABLISHMENT].TRADING_NAME
   ,[COMMERCIAL_ESTABLISHMENT].CPF_CNPJ
   ,[COMMERCIAL_ESTABLISHMENT].COD_EC
   ,[COMMERCIAL_ESTABLISHMENT].COD_AFFILIATOR
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
WHERE COMMERCIAL_ESTABLISHMENT.COD_COMP = @COD_COMP
AND COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC

GO

IF (OBJECT_ID('[SP_LS_USER_PENDING_MESSAGING]') IS NOT NULL)
DROP PROCEDURE [SP_LS_USER_PENDING_MESSAGING]
GO
CREATE PROCEDURE SP_LS_USER_PENDING_MESSAGING
/*************************************************************************************************
----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date             Description
------------------------------------------------------------------------------------------
Luiz Aquino                      v2             2020-03-10      Add Redirect Url
------------------------------------------------------------------------------------------
*************************************************************************************************/
(
    @COD_USER INT
)
AS
BEGIN

SELECT
	MESSAGING.COD_MESSAGING
   ,MESSAGING.CREATED_AT
   ,MESSAGING.TITLE
   ,MESSAGING.EXPIRATION_DATE
   ,MESSAGING.COD_USER_ORIGIN
   ,MESSAGING.COD_USER
   ,MESSAGING.COD_EC
   ,MESSAGING.COD_AFFILIATOR
   ,MESSAGING.COD_MES_CAT
   ,MESSAGING.CONTENT_MESSAGE
   ,MESSAGING.LINK_MESSAGE
   ,MESSAGING.HAS_READED
   ,MESSAGING_CATEGORY.COD_MES_CAT
   ,MESSAGING_CATEGORY.DESCRIPTION
   ,MESSAGING_CATEGORY.SECONS_ON_SCREEN
   ,MESSAGING_CATEGORY.CLASS_STYLE
   ,MESSAGING.REDIRECT_URL
FROM MESSAGING
INNER JOIN MESSAGING_CATEGORY
	ON MESSAGING.COD_MES_CAT = MESSAGING_CATEGORY.COD_MES_CAT
WHERE COD_USER = @COD_USER
AND HAS_READED = 0;

UPDATE MESSAGING
SET HAS_READED = 1
WHERE COD_USER = @COD_USER
AND HAS_READED = 0;
END;
GO


IF (OBJECT_ID('[SP_MESSAGES_USER]') IS NOT NULL)
DROP PROCEDURE [SP_MESSAGES_USER]
GO
CREATE PROCEDURE SP_MESSAGES_USER
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author          ERSION        Date            Description
------------------------------------------------------------------------------------------
Lucas Aguiar     V1         2019-10-21        Creation
Luiz Aquino      V2         2020-03-10         Add redirect url
------------------------------------------------------------------------------------------*/
(
    @COD_USER INT
)
AS

BEGIN
SELECT
	TITLE
   ,CONTENT_MESSAGE
   ,MESSAGING_CATEGORY.TRANSLATE_DESCRIPTION
   ,LINK_MESSAGE
   ,VIEWER_NOTIFY
   ,REDIRECT_URL
FROM MESSAGING
JOIN MESSAGING_CATEGORY
	ON MESSAGING_CATEGORY.COD_MES_CAT = MESSAGING.COD_MES_CAT
WHERE COD_USER = @COD_USER
AND current_timestamp <= EXPIRATION_DATE
ORDER BY CREATED_AT DESC
END;
GO

IF (OBJECT_ID('[SP_FD_DATA_EC]') IS NOT NULL)
DROP PROCEDURE [SP_FD_DATA_EC]
GO
CREATE PROCEDURE SP_FD_DATA_EC
/*----------------------------------------------------------------------------------------
Project.......: TKPP
Procedure Name: [SP_FD_DATA_EC]
------------------------------------------------------------------------------------------
Author              VERSION        Date   Description
------------------------------------------------------------------------------------------
Kennedy Alef  V1   2018-07-27  Creation
Elir Ribeiro  V2   2018-11-07  Changed
Lucas Aguiar  V3   2019-04-22  Add split
Lucas Aguiar  V4   2019-07-01  rotina de travar agenda do ec
Luiz Aquino   V5   2019-07-03  Is_Cerc
Elir Ribeiro  V6   2019-10-01  changed Limit transaction monthy
Caike Uchoa   V7   2019-10-03  add case split pelo afiliador
Luiz Aquino   V8   2019-10-16  Add reten��o de agenda
Lucas Aguiar  V9   2019-10-28  Conta Cess�o
Marcus Gall   V10   2019-11-11  Add FK with BRANCH BUSINESS
Marcus Gall   V11   2019-12-06  Add field HAS_CREDENTIALS
Elir Ribeiro  V12   2020-01-08  trazendo dados meet consumer
Elir Ribeiro  V13   2020-01-15  ajustando procedure
Marcus Gall   V14   2020-01-22  Add Translate service
Luiz Aquino   v15   2020-03-11  Add requested transaction type
------------------------------------------------------------------------------------------*/
(
    @COD_EC INT
)
AS
BEGIN

    DECLARE @CodSpotService INT

    DECLARE @COD_SPLIT_SERVICE INT;

    DECLARE @COD_BLOCK_SITUATION INT;

    DECLARE @COD_CUSTOMERINSTALLMENT INT;

    DECLARE @CodSchRetention INT;

    DECLARE @COD_TRANSLATE_SERVICE INT;

SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';

SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

SELECT
	@COD_BLOCK_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';

SELECT
	@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PARCELADOCLIENTE';

SELECT
	@CodSchRetention = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SCHEDULEDRETENTION';

SELECT
	@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';

SELECT
	BRANCH_EC.[NAME]
   ,BRANCH_EC.TRADING_NAME
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,BRANCH_EC.BIRTHDATE
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,BRANCH_EC.NOTE AS NOTE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.ACTIVE
   ,ADDRESS_BRANCH.[ADDRESS]
   ,ADDRESS_BRANCH.NUMBER AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.[NAME] AS CITY
   ,[STATE].COD_STATE
   ,[STATE].[NAME] AS [STATE]
   ,COUNTRY.COD_COUNTRY
   ,COUNTRY.[NAME] AS COUNTRY
   ,BANKS.COD_BANK AS BANK_INSIDECODE
   ,BANKS.[NAME] AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
   ,BANK_DETAILS_EC.AGENCY AS AGENCY
   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,TYPE_RECEIPT.COD_TYPE_REC
   ,TYPE_RECEIPT.CODE AS TYPE_RECEIPT
   ,CARDS_TOBRANCH.CARDNUMBER
   ,CARDS_TOBRANCH.ACCOUNTID AS 'ACCOUNTID'
   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS 'COD_CARD_BRANCH'
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS 'TRANSACTION_ONLINE'
   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
   ,CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
		ELSE 0
	END [FINANCE_BLOCK]
   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPOT]
   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1
				AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
				AND SERVICES_AVAILABLE.COD_EC IS NULL)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_CUSTOMERINSTALLMENT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SCHRETENTION]
   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
   ,MEET_COSTUMER.CNPJ [ACCEPTANCE]
   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) QTY_EMPLOYEES
   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AVERAGE_BILLING
   ,MEET_COSTUMER.URL_SITE
   ,MEET_COSTUMER.FACEBOOK
   ,MEET_COSTUMER.INSTAGRAM
   ,MEET_COSTUMER.STREET
   ,MEET_COSTUMER.COMPLEMENT [COMPLEMENTO]
   ,MEET_COSTUMER.ANOTHER_INFO
   ,MEET_COSTUMER.NUMBER
   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
   ,MEET_COSTUMER.CITY AS MEET_CITY
   ,MEET_COSTUMER.STATES
   ,MEET_COSTUMER.REFERENCEPOINT
   ,MEET_COSTUMER.ZIPCODE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_TRANSLATE]
   ,[REQUESTED_PRESENTIAL_TRANSACTION]
   ,[REQUESTED_ONLINE_TRANSACTION]
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
INNER JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
INNER JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
INNER JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
INNER JOIN TYPE_RECEIPT
	ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN CARDS_TOBRANCH
	ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN BRANCH_BUSINESS
	ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
LEFT JOIN MEET_COSTUMER
	ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND (CARDS_TOBRANCH.COD_SITUATION = 15
OR CARDS_TOBRANCH.COD_SITUATION IS NULL)

END;
GO


IF (OBJECT_ID('[SP_UP_DATA_BR]') IS NOT NULL)
DROP PROCEDURE [SP_UP_DATA_BR]
GO
CREATE PROCEDURE [dbo].[SP_UP_DATA_BR]
/*----------------------------------------------------------------------------------------
Procedure Name: [SP_UP_DATA_BR]
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION   Date                            Description
------------------------------------------------------------------------------------------
Kennedy Alef					V1		27/07/2018			Creation
Elir Ribeiro					V2		07/11/2018			Changed
Elir Ribeiro					V3		08/11/2018			Changed
Kennedy Alef					V1		10/12/2018			Changed
Luiz Aquino						V3		13/12/2018			Add Has_SPOT SPOT_TAX
Lucas Aguiar					V6		14/12/2018			Add  TRANSACTION_DIGITED
Lucas Aguiar					V7		01/07/2019			Desabilitar a agenda financeira do ec
Elir Ribeiro					V8		24/07/2019			Data Ofac = null
Lucas Aguiar					V9		06/08/2019			add servi?o parcelado cliente
Elir Ribeiro					V9		02/08/2019			add RiskSituation and Reason Risck
Elir Ribeiro					V10		21-08-2019			changed Active  de acordo com o RiskSituation
Elir Ribeiro					V11		01-10-2019			changed Limit Transaction Monthly
Marcus Gall						V12		11-11-2019			Add Branch Business
Luiz Aquino                     v13     11-03-2020          Add permissoes de transacao (ET-465)
------------------------------------------------------------------------------------------*/
(
    @NAME VARCHAR(100),
    @TRADING_NAME VARCHAR(100),
    @EMAIL VARCHAR(100),
    @STATE_REG VARCHAR(30),
    @MUN_REG VARCHAR(30),
    @LIMIT_TRANSACTION_DIALY DECIMAL(22, 6),
    @LIMIT_TRANSACTION DECIMAL(22, 6),
    @LIMIT_TRANSACTION_MONTHLY DECIMAL(22, 6),
    @BIRTHDATE DATETIME,
    @COD_USER INT,
    @TYPE_BRANCH VARCHAR(100),
    @TYPE_ESTAB INT,
    @DOCUMENT VARCHAR(100),
    @SEX INT,
    @COD_SALES_REP INT,
    @ACTIVE INT,
    @COD_BR INT,
    @COD_EC INT,
    @ADDRESS VARCHAR(400),
    @NUMBER VARCHAR(10),
    @COMPLEMENT VARCHAR(300),
    @CEP VARCHAR(12),
    @COD_NEIGH INT,
    @REFERENCE_POINT VARCHAR(200),
    @SEC_FACTOR_AUTH_ACTIVE INT,
    @COD_SEG INT,
    @NOTE VARCHAR(400) = null,
    @CPF_CNPJ varchar(30),
    @WAS_BLOCKED INT = NULL,
    @COD_SITUATION INT = NULL,
    @NOTE_FINANCE VARCHAR(MAX) = NULL,
    @COD_RISK_SITUATION INT = NULL,
    @RISK_REASON VARCHAR(500) = NULL,
    @BRANCH_BUSINESS INT = NULL,
    @REQUEST_ONLINE_TRANSACTION INT = 0,
    @REQUEST_PRESENTIAL_TRANSACTION INT = 0
 )
AS

DECLARE @REGISTRO VARCHAR(100)
DECLARE @COD_ACTIVE_SITUATION_EC INT
DECLARE @CURRENT_ACTIVE INT;
DECLARE @CURRENT_CPF_CNPJ varchar(30);

BEGIN

    IF @COD_RISK_SITUATION IS NULL
SET @COD_RISK_SITUATION = 1

SELECT
	@COD_ACTIVE_SITUATION_EC = SITUATION_EC
FROM RISK_SITUATION
WHERE COD_RISK_SITUATION = @COD_RISK_SITUATION

IF @WAS_BLOCKED = 1
SELECT
	@COD_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';
ELSE
IF @WAS_BLOCKED = 0
SELECT
	@COD_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'RELEASED';
ELSE
SELECT
	@COD_SITUATION = COD_SITUATION
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC;

SELECT
	@REGISTRO = CPF_CNPJ
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC

SELECT
	@CURRENT_CPF_CNPJ = CPF_CNPJ
   ,@CURRENT_ACTIVE = ACTIVE
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_EC = @COD_EC;

IF (@CURRENT_CPF_CNPJ <> @CPF_CNPJ)
	OR (@CURRENT_ACTIVE <> @ACTIVE)
UPDATE ASS_CERC_EC
SET ACTIVE = @ACTIVE
   ,MODIFY_DATE = current_timestamp
   ,PROCESSED = 0
WHERE COD_EC = @COD_EC;

UPDATE BRANCH_EC
SET [NAME] = @NAME
   ,TRADING_NAME = @TRADING_NAME
   ,EMAIL = @EMAIL
   ,STATE_REGISTRATION = @STATE_REG
   ,MUNICIPAL_REGISTRATION = @MUN_REG
   ,TRANSACTION_LIMIT = @LIMIT_TRANSACTION
   ,LIMIT_TRANSACTION_DIALY = @LIMIT_TRANSACTION_DIALY
   ,BIRTHDATE = @BIRTHDATE
   ,COD_USER = @COD_USER
   ,COD_TYPE_ESTAB = @TYPE_ESTAB
   ,DOCUMENT = @DOCUMENT
   ,COD_SEX = @SEX
   ,COD_SALES_REP = @COD_SALES_REP
   ,ACTIVE = @ACTIVE
   ,[NOTE] = @NOTE
   ,CPF_CNPJ = @CPF_CNPJ
WHERE COD_BRANCH = @COD_BR

IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE BRANCH_EC', 1

UPDATE ADDRESS_BRANCH
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND COD_BRANCH = @COD_BR

INSERT INTO ADDRESS_BRANCH (ADDRESS, NUMBER, COMPLEMENT, CEP, COD_NEIGH, COD_BRANCH, REFERENCE_POINT)
	VALUES (@ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, @COD_BR, @REFERENCE_POINT)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ADDRESS_BRANCH ', 1

IF @TYPE_BRANCH = 'PRINCIPAL'
BEGIN
EXEC SP_LOG_MERC_REG @COD_EC
					,@COD_USER

-- UPDATE MERCHANT TABLE

UPDATE COMMERCIAL_ESTABLISHMENT
SET [NAME] = @NAME
   ,TRADING_NAME = @TRADING_NAME
   ,EMAIL = @EMAIL
   ,STATE_REGISTRATION = @STATE_REG
   ,MUNICIPAL_REGISTRATION = @MUN_REG
   ,TRANSACTION_LIMIT = @LIMIT_TRANSACTION
   ,LIMIT_TRANSACTION_DIALY = @LIMIT_TRANSACTION_DIALY
   ,LIMIT_TRANSACTION_MONTHLY = @LIMIT_TRANSACTION_MONTHLY
   ,BIRTHDATE = @BIRTHDATE
   ,COD_USER = @COD_USER
   ,COD_TYPE_ESTAB = @TYPE_ESTAB
   ,DOCUMENT = @DOCUMENT
   ,COD_SEX = @SEX
   ,COD_SALES_REP = @COD_SALES_REP
   ,ACTIVE = @COD_ACTIVE_SITUATION_EC
   ,SEC_FACTOR_AUTH_ACTIVE = @SEC_FACTOR_AUTH_ACTIVE
   ,COD_SEG = @COD_SEG
   ,COD_USER_MODIFY = @COD_USER
   ,MODIFY_DATE = GETDATE()
   ,[NOTE] = @NOTE
   ,CPF_CNPJ = @CPF_CNPJ
   ,COD_SITUATION = @COD_SITUATION
   ,NOTE_FINANCE_SCHEDULE = @NOTE_FINANCE
   ,DATE_OFAC = NULL
   ,COD_RISK_SITUATION = @COD_RISK_SITUATION
   ,RISK_REASON = @RISK_REASON
   ,COD_BRANCH_BUSINESS = @BRANCH_BUSINESS
   ,REQUESTED_ONLINE_TRANSACTION = @REQUEST_ONLINE_TRANSACTION
   ,REQUESTED_PRESENTIAL_TRANSACTION = @REQUEST_PRESENTIAL_TRANSACTION
WHERE COD_EC = @COD_EC
END
END;
GO

IF (OBJECT_ID('[SP_FD_EC]') IS NOT NULL)
DROP PROCEDURE [SP_FD_EC]
GO
CREATE PROCEDURE [dbo].[SP_FD_EC]
/*----------------------------------------------------------------------------------------
Project.......: TKPP
------------------------------------------------------------------------------------------
Author                          VERSION        Date                            Description
------------------------------------------------------------------------------------------
Kennedy Alef					V1			27/07/2018			Creation
Gian Luca Dalle Cort			V2			04/10/2018			Changed
Lucas Aguiar					V3			15/10/2018			Changed
Elir Ribeiro					V4			14/11/2018			Changed
Luiz Aquino						V5			26/12/2018			Add Column Spot_tax
Lucas Aguiar					V6			01/07/2019			Add Rotina de travar agenda
Elir Ribeiro					V7			02/08/2019			Add Situa��o Risco
Lucas Aguiar					V8			04-09-2019			IS_PROVIDER
Marcus Gall Barreira			V9			11-11-2019			Add parameter Branch Business
Marcus Gall Barreira			V10			19-11-2019			Add informações de endereço do EC
Marcus Gall						v11			06-05-2020			Add ModifyDate
------------------------------------------------------------------------------------------*/
(
    @CPF_CNPJ VARCHAR(14),
    @COD_REP INT,
    @ID_EC INT,
    @SEGMENT INT,
    @COMP INT,
    @TYPE VARCHAR(100),
    @COD_PLAN INT = null,
    @COD_AFF INT = null,
    @Active BIT = null,
    @PersonType VARCHAR(100) = NULL,
    @CODSIT INT = null,
    @WAS_BLOCKED_FINANCE INT = null,
    @COD_SITUATION_RISK INT = NULL,
    @IS_PROVIDER INT = NULL,
    @BRANCH_BUSINESS INT = NULL,
    @RISK_SITUATION_LIST [CODE_TYPE] READONLY,
    @CREATED_FROM DATETIME = NULL,
    @CREATED_UNTIL DATETIME = NULL
 )
AS

    DECLARE @QUERY_ NVARCHAR(MAX);
    DECLARE @COD_BLOCKED_FINANCE INT;

BEGIN
SET @QUERY_ = N'
        SELECT
			 BRANCH_EC.COD_EC,
			 BRANCH_EC.CODE,
			 dbo.FN_FUS_UTF(BRANCH_EC.CREATED_AT) AS CREATED_AT,
			 BRANCH_EC.NAME,
			 BRANCH_EC.TRADING_NAME,
			 BRANCH_EC.COD_BRANCH,
			 BRANCH_EC.CPF_CNPJ,
			 BRANCH_EC.DOCUMENT_TYPE,
			 BRANCH_EC.EMAIL,
			 BRANCH_EC.STATE_REGISTRATION,
			 BRANCH_EC.MUNICIPAL_REGISTRATION,
			 BRANCH_EC.TRANSACTION_LIMIT,
			 BRANCH_EC.LIMIT_TRANSACTION_DIALY,
			 BRANCH_EC.BIRTHDATE,
			 TYPE_ESTAB.CODE AS TYPE_EC,
			 BRANCH_EC.TYPE_BRANCH AS TYPE_BR,
			 SEGMENTS.NAME AS SEGMENTS,
			 BRANCH_EC.ACTIVE,
			 USERS.IDENTIFICATION AS SALES_REP,
			 ASS_TAX_DEPART.COD_PLAN,
			 TYPE_RECEIPT.[CODE] AS ACCOUNT_TYPE,
			 COUNT(*) AS QTY,
			 AFFILIATOR.COD_AFFILIATOR,
			 ISNULL(AFFILIATOR.NAME, ''CELER'')  AS NAME_AFFILIATOR,
			 SITUATION_REQUESTS.NAME AS SIT_REQUEST,
			 ISNULL(COMMERCIAL_ESTABLISHMENT.DEFAULT_EC, 0) AS DEFAULT_EC,
			 COMMERCIAL_ESTABLISHMENT.SPOT_TAX,
			 TRADUCTION_SITUATION.SITUATION_TR,
			 TRADUCTION_RISK_SITUATION.RISK_SITUATION_TR
			 , COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
			 , BRANCH_BUSINESS.NAME AS BRANCH_BUSINESS
			 , NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
			 , CITY.[NAME] AS CITY
			 , STATE.[NAME] AS STATE
			 , dbo.FN_FUS_UTF(COMMERCIAL_ESTABLISHMENT.MODIFY_DATE) AS MODIFY_DATE 
        FROM COMMERCIAL_ESTABLISHMENT
			INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
			INNER JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
			INNER JOIN TYPE_ESTAB ON COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = TYPE_ESTAB.COD_TYPE_ESTAB
			INNER JOIN SALES_REPRESENTATIVE ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
			INNER JOIN USERS ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER
			INNER JOIN DEPARTMENTS_BRANCH ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
			INNER JOIN ASS_TAX_DEPART ON ASS_TAX_DEPART.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH AND ASS_TAX_DEPART.ACTIVE = 1
			INNER JOIN TYPE_RECEIPT ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
			INNER JOIN SITUATION_REQUESTS ON SITUATION_REQUESTS.COD_SIT_REQ = COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ
			LEFT JOIN BRANCH_BUSINESS ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
			LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
			LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_SITUATION
			LEFT JOIN TRADUCTION_RISK_SITUATION ON TRADUCTION_RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
			INNER JOIN ADDRESS_BRANCH  ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH AND ADDRESS_BRANCH.ACTIVE = 1
			INNER JOIN NEIGHBORHOOD	 ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
			INNER JOIN CITY			 ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
			INNER JOIN STATE		 ON STATE.COD_STATE = CITY.COD_STATE
        WHERE
			COMMERCIAL_ESTABLISHMENT.COD_COMP = @COMP'

SELECT
	@COD_BLOCKED_FINANCE = COD_SITUATION
FROM SITUATION
WHERE NAME = 'LOCKED FINANCIAL SCHEDULE';

IF @ID_EC IS NOT NULL
BEGIN
IF @TYPE = 'BRANCH'
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.COD_BRANCH = @ID_EC ';
ELSE
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @ID_EC ';
END;

IF @SEGMENT IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SEG = @SEGMENT ';

IF @COD_REP IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = @COD_REP ';

IF @TYPE IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.TYPE_BRANCH = @TYPE ';

IF @CPF_CNPJ IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.CPF_CNPJ = @CPF_CNPJ ';

IF @COD_PLAN IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND  ASS_TAX_DEPART.COD_PLAN = @COD_PLAN ';

IF @COD_AFF IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF';

IF @Active IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.ACTIVE = @Active';

IF @IS_PROVIDER IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.IS_PROVIDER = @IS_PROVIDER';

IF @PersonType IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND TYPE_ESTAB.CODE = @PersonType';

IF @CODSIT IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ = @CODSIT';

IF @WAS_BLOCKED_FINANCE = 1
BEGIN
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCKED_FINANCE';
        END
    ELSE
        IF @WAS_BLOCKED_FINANCE = 0
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION <> @COD_BLOCKED_FINANCE';

IF @COD_SITUATION_RISK IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = @COD_SITUATION_RISK';

IF @BRANCH_BUSINESS IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS = @BRANCH_BUSINESS'

	IF EXISTS (SELECT TOP 1
		CODE
	FROM @RISK_SITUATION_LIST)
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION IN (SELECT CODE FROM @RISK_SITUATION_LIST)'

SET @QUERY_ = CONCAT(@QUERY_,
' GROUP BY
                              BRANCH_EC.CREATED_AT,
							  BRANCH_EC.COD_EC,
                              BRANCH_EC.CODE,
                              BRANCH_EC.NAME,
                              BRANCH_EC.TRADING_NAME,
                              BRANCH_EC.COD_BRANCH,
                              BRANCH_EC.CPF_CNPJ,
                              BRANCH_EC.DOCUMENT_TYPE,
                              BRANCH_EC.EMAIL,
                              BRANCH_EC.STATE_REGISTRATION,
                              BRANCH_EC.MUNICIPAL_REGISTRATION,
                              BRANCH_EC.TRANSACTION_LIMIT,
                              BRANCH_EC.LIMIT_TRANSACTION_DIALY,
                              BRANCH_EC.BIRTHDATE,
                              TYPE_ESTAB.CODE,
                              BRANCH_EC.TYPE_BRANCH,
                              SEGMENTS.NAME,
                              BRANCH_BUSINESS.NAME,
                              BRANCH_EC.ACTIVE,
                              USERS.IDENTIFICATION,
                              ASS_TAX_DEPART.COD_PLAN,
                              TYPE_RECEIPT.[CODE],
                              AFFILIATOR.COD_AFFILIATOR,
                              AFFILIATOR.NAME,
                              SITUATION_REQUESTS.NAME,
                              COMMERCIAL_ESTABLISHMENT.DEFAULT_EC,
                              COMMERCIAL_ESTABLISHMENT.SPOT_TAX ,
                              TRADUCTION_SITUATION.SITUATION_TR,
                              TRADUCTION_RISK_SITUATION.RISK_SITUATION_TR,
                              COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
                              , NEIGHBORHOOD.[NAME]
                              , CITY.[NAME]
                              , STATE.[NAME]
							  , COMMERCIAL_ESTABLISHMENT.MODIFY_DATE
                              ');

EXEC sp_executesql @QUERY_
				  ,N'
		@CPF_CNPJ VARCHAR(14),
		@COD_REP INT,
		@ID_EC INT,
		@SEGMENT INT,
		@COMP INT,
		@TYPE VARCHAR(100),
		@COD_PLAN INT,
		@COD_AFF INT,
		@Active BIT,
		@PersonType VARCHAR(100),
		@CODSIT INT,
		@WAS_BLOCKED_FINANCE INT,
		@COD_SITUATION_RISK INT,
		@IS_PROVIDER INT,
		@BRANCH_BUSINESS INT,
		@RISK_SITUATION_LIST [CODE_TYPE] READONLY
	'
				  ,@CPF_CNPJ = @CPF_CNPJ
				  ,@COD_REP = @COD_REP
				  ,@ID_EC = @ID_EC
				  ,@SEGMENT = @SEGMENT
				  ,@COMP = @COMP
				  ,@TYPE = @TYPE
				  ,@COD_PLAN = @COD_PLAN
				  ,@COD_AFF = @COD_AFF
				  ,@Active = @Active
				  ,@PersonType = @PersonType
				  ,@CODSIT = @CODSIT
				  ,@WAS_BLOCKED_FINANCE = @WAS_BLOCKED_FINANCE
				  ,@COD_SITUATION_RISK = @COD_SITUATION_RISK
				  ,@IS_PROVIDER = @IS_PROVIDER
				  ,@BRANCH_BUSINESS = @BRANCH_BUSINESS
				  ,@RISK_SITUATION_LIST = @RISK_SITUATION_LIST

END;
GO

IF (OBJECT_ID('[SP_VALIDATE_TRANSACTION]') IS NOT NULL)
DROP PROCEDURE [SP_VALIDATE_TRANSACTION]
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_TRANSACTION]
/*------------------------------------------------------------------------------------------------------------------------------------------------
    Project.......: TKPP
--------------------------------------------------------------------------------------------------------------------------------------------------
Author                      VERSION        Date         Description
--------------------------------------------------------------------------------------------------------------------------------------------------
    Kennedy Alef            V1          27/07/2018      Creation
    Gian Luca Dalle Cort    V1          14/08/2018      Changed
    Lucas Aguiar            v3          17-04-2019      Passar parâmetro opcional (CODE_SPLIT) e fazer suas respectivas inserções
    Lucas Aguiar            v4          23-04-2019      Parametro opc cod ec
    Kennedy Alef	        v5	        12-11-2019      Card holder name, doc holder, logical number
    Luiz Aquino             V6          17-03-2020      Adicionaar validações de risco (ET-465)
--------------------------------------------------------------------------------------------------------------------------------------------------*/
  (
    @TERMINALID      INT,
    @TYPETRANSACTION VARCHAR(100),
    @AMOUNT          DECIMAL(22,6),
    @QTY_PLOTS       INT,
    @PAN             VARCHAR(100),
    @BRAND           VARCHAR(200),
    @TRCODE          VARCHAR(200),
    @TERMINALDATE    DATETIME,
    @CODPROD_ACQ     INT,
    @TYPE            VARCHAR(100),
    @COD_BRANCH      INT,
	@CODE_SPLIT		 INT = NULL,
	@COD_EC          INT = NULL,
	@HOLDER_NAME     VARCHAR(100) = NULL,
	@HOLDER_DOC		 VARCHAR(100) = NULL,
	@LOGICAL_NUMBER  VARCHAR(100) = NULL
  )
AS
  DECLARE @CODTX INT;
  DECLARE @CODPLAN INT;
  DECLARE @INTERVAL INT;
  DECLARE @TERMINALACTIVE INT;
  DECLARE @CODEC INT;
  DECLARE @CODASS INT;
  DECLARE @CODAC INT;
  DECLARE @COMPANY INT;
  DECLARE @BRANCH INT = 0;
  DECLARE @TYPETRAN INT;
  DECLARE @ACTIVE_EC INT;
  DECLARE @CONT INT;
  DECLARE @COD_COMP INT;
  DECLARE @LIMIT DECIMAL(22,6);
  DECLARE @COD_AFFILIATOR INT;
  DECLARE @PLAN_AFF INT;
  DECLARE @CODTR_RETURN INT;
  DECLARE @EC_TRANS INT;
  DECLARE @GEN_TITLES INT;
  DECLARE @ALLOWED_TRANSACTION  INT;

BEGIN

SELECT
TOP 1
	@CODTX = ASS_TAX_DEPART.COD_ASS_TX_DEP
   ,@CODPLAN = ASS_TAX_DEPART.COD_ASS_TX_DEP
   ,@INTERVAL = ASS_TAX_DEPART.INTERVAL
   ,@TERMINALACTIVE = EQUIPMENT.ACTIVE
   ,@CODEC = COMMERCIAL_ESTABLISHMENT.COD_EC
   ,@CODASS = [ASS_DEPTO_EQUIP].COD_ASS_DEPTO_TERMINAL
   ,@COMPANY = COMPANY.COD_COMP
   ,@TYPETRAN = TRANSACTION_TYPE.COD_TTYPE
   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
   ,@BRANCH = BRANCH_EC.COD_BRANCH
   ,@COD_COMP = COMPANY.COD_COMP
   ,@LIMIT = COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,@COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,@GEN_TITLES = BRAND.GEN_TITLES
   ,@ALLOWED_TRANSACTION = (CASE
		WHEN EQUIPMENT_MODEL.ONLINE = 1 THEN CASE
				WHEN ESTABLISHMENT_CONDITIONS.ONLINE_TRANSACTION = 1 AND
					COMMERCIAL_ESTABLISHMENT.REQUESTED_ONLINE_TRANSACTION = 1 THEN 1
				ELSE 0
			END
		ELSE CASE
				WHEN ESTABLISHMENT_CONDITIONS.PRESENCIAL_TRANSACTION = 1 AND
					COMMERCIAL_ESTABLISHMENT.REQUESTED_PRESENTIAL_TRANSACTION = 1 THEN 1
				ELSE 0
			END
	END)
FROM [ASS_DEPTO_EQUIP]
LEFT JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
LEFT JOIN EQUIPMENT_MODEL
	ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
LEFT JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = [ASS_DEPTO_EQUIP].COD_DEPTO_BRANCH
LEFT JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
LEFT JOIN DEPARTMENTS
	ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
LEFT JOIN COMPANY
	ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
LEFT JOIN ASS_TAX_DEPART
	ON ASS_TAX_DEPART.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
LEFT JOIN TRANSACTION_TYPE
	ON TRANSACTION_TYPE.COD_TTYPE = ASS_TAX_DEPART.COD_TTYPE
LEFT JOIN BRAND
	ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
		AND BRAND.COD_TTYPE = TRANSACTION_TYPE.COD_TTYPE
LEFT JOIN ESTABLISHMENT_CONDITIONS
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = ESTABLISHMENT_CONDITIONS.COD_EC
		AND ESTABLISHMENT_CONDITIONS.ACTIVE = 1
WHERE ASS_TAX_DEPART.ACTIVE = 1
AND [ASS_DEPTO_EQUIP].ACTIVE = 1
AND ASS_TAX_DEPART.COD_SOURCE_TRAN = 2
AND EQUIPMENT.COD_EQUIP = @TERMINALID
AND LOWER(TRANSACTION_TYPE.NAME) = @TYPETRANSACTION
AND ASS_TAX_DEPART.QTY_INI_PLOTS <= @QTY_PLOTS
AND ASS_TAX_DEPART.QTY_FINAL_PLOTS >= @QTY_PLOTS
AND (BRAND.[NAME] = @BRAND
OR BRAND.COD_BRAND IS NULL)

IF (@COD_EC IS NOT NULL)
SET @EC_TRANS = @COD_EC;
ELSE
SET @EC_TRANS = @CODEC;


IF @AMOUNT > @LIMIT
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '402 - Transaction limit value exceeded"d'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;


THROW 60002, '402', 1;

END;

IF @CODTX IS NULL
/* PROCEDURE DE REGISTRO DE TRANSAÇÕES NEGADAS*/
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '404 - PLAN/TAX NOT FOUND'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002, '404', 1;
END;

IF @COD_AFFILIATOR IS NOT NULL
BEGIN

SELECT TOP 1
	@PLAN_AFF = COD_PLAN_TAX_AFF
FROM PLAN_TAX_AFFILIATOR
INNER JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = PLAN_TAX_AFFILIATOR.COD_AFFILIATOR
WHERE PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATOR
AND @QTY_PLOTS BETWEEN QTY_INI_PLOTS AND QTY_FINAL_PLOTS
AND COD_TTYPE = @TYPETRAN
AND PLAN_TAX_AFFILIATOR.ACTIVE = 1

IF @PLAN_AFF IS NULL
BEGIN

EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '404 - PLAN/TAX NOT FOUND TO AFFILIATOR'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002, '404', 1;
END;

END;


IF @TERMINALACTIVE = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '003 - Blocked terminal'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;


THROW 60002, '003', 1;

END

IF @ACTIVE_EC = 0
	OR @ALLOWED_TRANSACTION = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '009 - Blocked commercial establishment'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;


THROW 60002, '009', 1;
END

EXEC SP_VAL_LIMIT_EC @CODEC
					,@AMOUNT
					,@PAN = @PAN
					,@BRAND = @BRAND
					,@CODASS_DEPTO_TERMINAL = @CODASS
					,@COD_TTYPE = @TYPETRAN
					,@PLOTS = @QTY_PLOTS
					,@CODTAX_ASS = @CODTX
					,@CODETR = @TRCODE
					,@TYPE = @TYPE
					,@TERMINALDATE = @TERMINALDATE
					,@COD_COMP = @COD_COMP
					,@COD_AFFILIATOR = @COD_AFFILIATOR
					,@CODE_SPLIT = @CODE_SPLIT
					,@EC_TRANS = @EC_TRANS
					,@HOLDER_NAME = @HOLDER_NAME
					,@HOLDER_DOC = @HOLDER_DOC
					,@LOGICAL_NUMBER = @LOGICAL_NUMBER
					,@SOURCE_TRAN = 2;



EXEC @CODAC = SP_DEFINE_ACQ @TR_TYPE = @TYPETRAN
						   ,@COMPANY = @COMPANY
						   ,@QTY_PLOTS = @QTY_PLOTS
						   ,@BRAND = @BRAND
						   ,@COD_PR = @CODPROD_ACQ

IF @CODAC = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '004 - Acquirer key not found for terminal  '
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002, '004', 1;

END;

IF @GEN_TITLES = 0
	AND @CODE_SPLIT IS NOT NULL
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '012 - PRIVATE LABELS ESTABLISHMENTS CAN NOT HAVE SPLIT'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002, '012', 1;
END;



EXECUTE [SP_REG_TRANSACTION] @AMOUNT
							,@PAN
							,@BRAND
							,@CODASS_DEPTO_TERMINAL = @CODASS
							,@COD_TTYPE = @TYPETRAN
							,@PLOTS = @QTY_PLOTS
							,@CODTAX_ASS = @CODTX
							,@CODAC = @CODAC
							,@CODETR = @TRCODE
							,@TERMINALDATE = @TERMINALDATE
							,@COD_ASS_TR_ACQ = @CODAC
							,@CODPROD_ACQ = @CODPROD_ACQ
							,@TYPE = @TYPE
							,@COD_COMP = @COD_COMP
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = 2
							,@CODE_SPLIT = @CODE_SPLIT
							,@EC_TRANS = @EC_TRANS
							,@RET_CODTRAN = @CODTR_RETURN OUTPUT
							,@HOLDER_NAME = @HOLDER_NAME
							,@HOLDER_DOC = @HOLDER_DOC
							,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

SELECT
	@CODAC AS ACQUIRER
   ,@TRCODE AS TRAN_CODE
   ,@CODTR_RETURN AS COD_TRAN


END;
GO

IF (OBJECT_ID('[SP_VALIDATE_TRANSACTION_ON]') IS NOT NULL)
DROP PROCEDURE [SP_VALIDATE_TRANSACTION_ON]
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_TRANSACTION_ON]
    /*------------------------------------------------------------------------------------------------------------------------------------------                                        
   Procedure Name: [SP_VALIDATE_TRANSACTION]                                        
   Project.......: TKPP                                        
   ------------------------------------------------------------------------------------------------------------------------------------------------                                        
   Author			VERSION        Date                            Description                                        
   -------------------------------------------------------------------------------------------------------------------------------------------------                                        
   Kennedy Alef     V1			20/08/2018    Creation                                        
   Lucas Aguiar     v2			17-04-2019    Passar parâmetro opcional (CODE_SPLIT) e fazer suas respectivas inserções                            
   Lucas Aguiar     v4			23-04-2019    Parametro opc cod ec 
   Luiz Aquino      V6          17-03-2020      Adicionaar validações de risco (ET-465)
   ------------------------------------------------------------------------------------------------------------------------------------------------*/
(@TERMINALID VARCHAR(100)
, @TYPETRANSACTION VARCHAR(100)
, @AMOUNT DECIMAL(22, 6)
, @QTY_PLOTS INT
, @PAN VARCHAR(100)
, @BRAND VARCHAR(200)
, @TRCODE VARCHAR(200)
, @TERMINALDATE DATETIME = NULL
, @CODPROD_ACQ INT
, @TYPE VARCHAR(100)
, @COD_BRANCH INT = NULL
, @MID VARCHAR(100)
, @DESCRIPTION VARCHAR(300) = NULL
, @CODE_SPLIT INT = NULL
, @COD_EC INT = NULL
, @CREDITOR_DOC VARCHAR(100) = NULL
, @DESCRIPTION_TRAN VARCHAR(100) = NULL
, @TRACKING VARCHAR(100) = NULL
, @HOLDER_NAME VARCHAR(100) = NULL
, @HOLDER_DOC VARCHAR(100) = NULL
, @LOGICAL_NUMBER VARCHAR(100) = NULL)
AS
DECLARE @CODTX INT;


DECLARE @CODPLAN INT;


DECLARE @INTERVAL INT;


DECLARE @TERMINALACTIVE INT;


DECLARE @CODEC INT;


DECLARE @CODASS INT;


DECLARE @CODAC INT;


DECLARE @COMPANY INT;


DECLARE @BRANCH INT = 0;


DECLARE @TYPETRAN INT;


DECLARE @ACTIVE_EC INT;


DECLARE @CONT INT;


DECLARE @COD_COMP INT;


DECLARE @LIMIT DECIMAL(22, 6);


DECLARE @COD_AFFILIATOR INT;


DECLARE @ONLINE INT = NULL;


DECLARE @TYPE_CREDIT INT;


DECLARE @EC_TRANS INT;


DECLARE @GEN_TITLES INT;

  DECLARE @ALLOWED_TRANSACTION  INT;

--DECLARE @PRODUCT_ACQ INT;                                
BEGIN
SELECT
	@CODTX = ASS_TAX_DEPART.COD_ASS_TX_DEP
   ,@CODPLAN = ASS_TAX_DEPART.COD_ASS_TX_DEP
   ,@INTERVAL = ASS_TAX_DEPART.INTERVAL
   ,@TERMINALACTIVE = EQUIPMENT.ACTIVE
   ,@CODEC = COMMERCIAL_ESTABLISHMENT.COD_EC
   ,@CODASS = [ASS_DEPTO_EQUIP].COD_ASS_DEPTO_TERMINAL
   ,@COMPANY = COMPANY.COD_COMP
   ,@TYPETRAN = TRANSACTION_TYPE.COD_TTYPE
   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
   ,@BRANCH = BRANCH_EC.COD_BRANCH
   ,@COD_COMP = COMPANY.COD_COMP
   ,@LIMIT = COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,@COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,@ONLINE = COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE
   ,@GEN_TITLES = BRAND.GEN_TITLES
   ,@ALLOWED_TRANSACTION = (CASE
		WHEN EQUIPMENT_MODEL.ONLINE = 1 THEN CASE
				WHEN ESTABLISHMENT_CONDITIONS.ONLINE_TRANSACTION = 1 AND
					COMMERCIAL_ESTABLISHMENT.REQUESTED_ONLINE_TRANSACTION = 1 THEN 1
				ELSE 0
			END
		ELSE CASE
				WHEN ESTABLISHMENT_CONDITIONS.PRESENCIAL_TRANSACTION = 1 AND
					COMMERCIAL_ESTABLISHMENT.REQUESTED_PRESENTIAL_TRANSACTION = 1 THEN 1
				ELSE 0
			END
	END)
FROM [ASS_DEPTO_EQUIP]
LEFT JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
LEFT JOIN EQUIPMENT_MODEL
	ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
LEFT JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = [ASS_DEPTO_EQUIP].COD_DEPTO_BRANCH
LEFT JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
LEFT JOIN DEPARTMENTS
	ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
LEFT JOIN COMPANY
	ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
LEFT JOIN ASS_TAX_DEPART
	ON ASS_TAX_DEPART.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
LEFT JOIN TRANSACTION_TYPE
	ON TRANSACTION_TYPE.COD_TTYPE = ASS_TAX_DEPART.COD_TTYPE
LEFT JOIN BRAND
	ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
		AND BRAND.COD_TTYPE = TRANSACTION_TYPE.COD_TTYPE
--LEFT JOIN EXTERNAL_DATA_EC_ACQ ON EXTERNAL_DATA_EC_ACQ.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC       
LEFT JOIN ESTABLISHMENT_CONDITIONS
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = ESTABLISHMENT_CONDITIONS.COD_EC
		AND ESTABLISHMENT_CONDITIONS.ACTIVE = 1
WHERE ASS_TAX_DEPART.ACTIVE = 1
AND ASS_TAX_DEPART.COD_SOURCE_TRAN = 1
AND [ASS_DEPTO_EQUIP].ACTIVE = 1
AND EQUIPMENT.SERIAL = @TERMINALID
AND LOWER(TRANSACTION_TYPE.NAME) = @TYPETRANSACTION
AND ASS_TAX_DEPART.QTY_INI_PLOTS <= @QTY_PLOTS
AND ASS_TAX_DEPART.QTY_FINAL_PLOTS >= @QTY_PLOTS
AND (BRAND.[NAME] = @BRAND
OR BRAND.COD_BRAND IS NULL)


IF (@CODE_SPLIT = 0
	OR @CODE_SPLIT IS NULL)
SET @EC_TRANS = 3;
ELSE
SET @EC_TRANS = @CODEC;

--AND (EXTERNAL_DATA_EC_ACQ.[NAME] = 'MID' OR EXTERNAL_DATA_EC_ACQ.[NAME] IS NULL)                                     
IF @ONLINE = NULL
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '402 - TRANSACTION ONLINE NOT ENABLE'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002
, '402'
, 1;
END;

IF @AMOUNT > @LIMIT
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '402 - Transaction limit value exceeded"d'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002
, '402'
, 1;
END;

IF @CODTX IS NULL
/* PROCEDURE DE REGISTRO DE TRANSAÇÕES NEGADAS*/
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '404 - PLAN/TAX NOT FOUND'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002
, '404'
, 1;
END;

IF @TERMINALACTIVE = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '003 - Blocked terminal  '
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002
, '003'
, 1;
END

IF @ACTIVE_EC = 0
	OR @ALLOWED_TRANSACTION = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '009 - Blocked commercial establishment'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002
, '009'
, 1;
END

EXEC SP_VAL_LIMIT_EC @CODEC
					,@AMOUNT
					,@PAN = @PAN
					,@BRAND = @BRAND
					,@CODASS_DEPTO_TERMINAL = @CODASS
					,@COD_TTYPE = @TYPETRAN
					,@PLOTS = @QTY_PLOTS
					,@CODTAX_ASS = @CODTX
					,@CODETR = @TRCODE
					,@TYPE = @TYPE
					,@TERMINALDATE = @TERMINALDATE
					,@COD_COMP = @COD_COMP
					,@COD_AFFILIATOR = @COD_AFFILIATOR
					,@CODE_SPLIT = @CODE_SPLIT
					,@EC_TRANS = @EC_TRANS
					,@HOLDER_NAME = @HOLDER_NAME
					,@HOLDER_DOC = @HOLDER_DOC
					,@LOGICAL_NUMBER = @LOGICAL_NUMBER
					,@SOURCE_TRAN = 1;

EXEC @CODAC = SP_DEFINE_ACQ @TR_TYPE = @TYPETRAN
						   ,@COMPANY = @COMPANY
						   ,@QTY_PLOTS = @QTY_PLOTS
						   ,@BRAND = @BRAND
						   ,@DOC_CREDITOR = @CREDITOR_DOC

-- DEFINIR SE PARCELA > 1 ENTAO , CREDITO PARCELADO                              
IF @QTY_PLOTS > 1
SET @TYPE_CREDIT = 2;
ELSE
SET @TYPE_CREDIT = 1;

IF (@CREDITOR_DOC IS NOT NULL)
BEGIN
SELECT
	@CODPROD_ACQ = [PRODUCTS_ACQUIRER].COD_PR_ACQ
FROM [PRODUCTS_ACQUIRER]
INNER JOIN BRAND
	ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
INNER JOIN ASS_TR_TYPE_COMP
	ON ASS_TR_TYPE_COMP.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		AND ASS_TR_TYPE_COMP.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
WHERE ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = @CODAC
AND [PRODUCTS_ACQUIRER].PLOT_VALUE = @TYPE_CREDIT
AND BRAND.NAME = @BRAND
END


IF @CODAC = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '004 - Acquirer key not found for terminal '
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002
, '004'
, 1;
END;



IF @GEN_TITLES = 0
	AND @CODE_SPLIT IS NOT NULL
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '012 - PRIVATE LABELS ESTABLISHMENTS CAN NOT HAVE SPLIT'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@SOURCE_TRAN = 2
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS
								,@CREDITOR_DOC = @CREDITOR_DOC
								,@HOLDER_NAME = @HOLDER_NAME
								,@HOLDER_DOC = @HOLDER_DOC
								,@LOGICAL_NUMBER = @LOGICAL_NUMBER;

THROW 60002, '012', 1;
END;

EXECUTE [SP_REG_TRANSACTION] @AMOUNT
							,@PAN
							,@BRAND
							,@CODASS_DEPTO_TERMINAL = @CODASS
							,@COD_TTYPE = @TYPETRAN
							,@PLOTS = @QTY_PLOTS
							,@CODTAX_ASS = @CODTX
							,@CODAC = @CODAC
							,@CODETR = @TRCODE
							,@TERMINALDATE = @TERMINALDATE
							,@COD_ASS_TR_ACQ = @CODAC
							,@CODPROD_ACQ = @CODPROD_ACQ
							,@TYPE = @TYPE
							,@COD_COMP = @COD_COMP
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = 1
							,@POSWEB = 0
							 --,@DESCRIPTION = @DESCRIPTION                      
							,@CODE_SPLIT = @CODE_SPLIT
							,@EC_TRANS = @EC_TRANS
							,@CREDITOR_DOC = @CREDITOR_DOC
							,@TRACKING_DESCRIPTION = @TRACKING
							,@DESCRIPTION = @DESCRIPTION_TRAN
							,@HOLDER_NAME = @HOLDER_NAME
							,@HOLDER_DOC = @HOLDER_DOC
							,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
--SELECT                                        
--  'ADQ'  AS ACQUIRER,                       
--  '1234567489' AS TRAN_CODE,                                      
--  'ESTABLISHMENT COMMERCIAL TEST' AS EC                                    
SELECT
	EXTERNAL_DATA_EC_ACQ.[VALUE] AS EC
   ,@TRCODE AS TRAN_CODE
   ,ACQUIRER.NAME AS ACQUIRER
--,@CODPROD_ACQ AS PRODUCT    
FROM ASS_TR_TYPE_COMP
INNER JOIN ACQUIRER
	ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
LEFT JOIN EXTERNAL_DATA_EC_ACQ
	ON EXTERNAL_DATA_EC_ACQ.COD_AC = ASS_TR_TYPE_COMP.COD_AC
WHERE
--ISNULL(EXTERNAL_DATA_EC_ACQ.[NAME],'MID') = 'MID' AND                                 
ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = @CODAC
END;
GO


IF (OBJECT_ID('[SP_VALIDATE_TRANSACTION_POSWEB]') IS NOT NULL)
DROP PROCEDURE [SP_VALIDATE_TRANSACTION_POSWEB]
GO

CREATE PROCEDURE [dbo].[SP_VALIDATE_TRANSACTION_POSWEB]
	/*---------------------------------------------------------------------------------------------------------------------------------------------                            
Project.......: TKPP                            
---------------------------------------------------------------------------------------------------------------------------------------------------                            
Author           VERSION        Date          Description                            
---------------------------------------------------------------------------------------------------------------------------------------------------                            
Kennedy Alef	  V1		  13/11/2018	  Creation                            
Lucas Aguiar	  v2		  17-04-2019	  Passar parâmetro opcional (CODE_SPLIT) e fazer suas respectivas inserções
Lucas Aguiar	  v4		  23-04-2019	  Parametro opc cod ec                
 Luiz Aquino      V6          17-03-2020      Adicionaar validações de risco (ET-465)
---------------------------------------------------------------------------------------------------------------------------------------------------*/
(
	@TERMINALID VARCHAR(100)
	,@TYPETRANSACTION VARCHAR(100)
	,@AMOUNT DECIMAL(22, 6)
	,@QTY_PLOTS INT
	,@PAN VARCHAR(100)
	,@BRAND VARCHAR(200)
	,@TRCODE VARCHAR(200)
	,@TERMINALDATE DATETIME = NULL
	,@CODPROD_ACQ INT = NULL
	,@TYPE VARCHAR(100)
	,@COD_BRANCH INT = NULL
	,@MID VARCHAR(100)
	,
	-- NEWS                
	 @COD_EC_AFFILIATOR INT
	,@COD_EQUIP_AFFILIATOR INT = NULL
	,@IDENTIFI_TRANSACTION VARCHAR(400) = NULL
	,@TRAN_DESCRIPTION VARCHAR(MAX)
	,@TRAN_DESC_ID INT = NULL
	,@TARIFF_MERCHANT_DEFAULT DECIMAL(22, 6)
	,@CODE_SPLIT INT = NULL
	,@COD_EC INT = NULL
)
AS
DECLARE @CODTX INT;
DECLARE @CODPLAN INT;
DECLARE @INTERVAL INT;
DECLARE @TERMINALACTIVE INT;
DECLARE @CODEC INT;
DECLARE @CODASS INT;
DECLARE @CODAC INT;
DECLARE @COMPANY INT;
DECLARE @BRANCH INT = 0;
DECLARE @TYPETRAN INT;
DECLARE @ACTIVE_EC INT;
DECLARE @CONT INT;
DECLARE @COD_COMP INT;
DECLARE @LIMIT DECIMAL(22, 6);
DECLARE @COD_AFFILIATOR INT;
DECLARE @ONLINE INT = NULL;
DECLARE @TYPE_CREDIT INT;
DECLARE @FOUND INT;
DECLARE @MSG_ERRO VARCHAR(100);
-- POSWEB VALUES             
DECLARE @COD_TX_POSWEB INT;
DECLARE @COD_DEPTO_TERM_POSWEB INT;
DECLARE @INTERVAL_POSWEB INT;
DECLARE @MDR_POSWEB DECIMAL(22, 6);
DECLARE @ANTICIP_POSWEB DECIMAL(22, 6)
DECLARE @RATE_POSWEB DECIMAL(22, 6);
DECLARE @VALIDATE VARCHAR(200);
DECLARE @FOUND_POSWEB INT;
DECLARE @EC_TRANS INT;

BEGIN

WITH CTE
AS
(SELECT
		ASS_TAX_DEPART.COD_ASS_TX_DEP
	   ,ASS_TAX_DEPART.INTERVAL
	   ,ASS_TAX_DEPART.PARCENTAGE AS [MDR]
	   ,ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE AS [ANTICIPATION]
	   ,ASS_TAX_DEPART.RATE
	   ,EQUIPMENT.ACTIVE AS EQUIP_ACTIVE
	   ,COMMERCIAL_ESTABLISHMENT.COD_EC
	   ,[ASS_DEPTO_EQUIP].COD_ASS_DEPTO_TERMINAL
	   ,TRANSACTION_TYPE.COD_TTYPE
	   ,COMMERCIAL_ESTABLISHMENT.ACTIVE
	   ,BRANCH_EC.COD_BRANCH
	   ,COMPANY.COD_COMP
	   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
	   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	   ,COMMERCIAL_ESTABLISHMENT.ACTIVE AS EC_ACTIVE
	   ,EQUIPMENT.COD_EQUIP
	   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE
	   ,(CASE
			WHEN EQUIPMENT_MODEL.ONLINE = 1 THEN CASE
					WHEN ESTABLISHMENT_CONDITIONS.ONLINE_TRANSACTION = 1 AND
						COMMERCIAL_ESTABLISHMENT.REQUESTED_ONLINE_TRANSACTION = 1 THEN 1
					ELSE 0
				END
			ELSE CASE
					WHEN ESTABLISHMENT_CONDITIONS.PRESENCIAL_TRANSACTION = 1 AND
						COMMERCIAL_ESTABLISHMENT.REQUESTED_PRESENTIAL_TRANSACTION = 1 THEN 1
					ELSE 0
				END
		END) ALLOWED_TRANSACTION
	--INTO #TRAN_TEMP                           
	FROM [ASS_DEPTO_EQUIP]
	LEFT JOIN EQUIPMENT
		ON EQUIPMENT.COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
	LEFT JOIN EQUIPMENT_MODEL
		ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
	LEFT JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = [ASS_DEPTO_EQUIP].COD_DEPTO_BRANCH
	LEFT JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	LEFT JOIN DEPARTMENTS
		ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
	LEFT JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	LEFT JOIN COMPANY
		ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
	LEFT JOIN ASS_TAX_DEPART
		ON ASS_TAX_DEPART.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
	LEFT JOIN BRAND
		ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
	LEFT JOIN TRANSACTION_TYPE
		ON TRANSACTION_TYPE.COD_TTYPE = ASS_TAX_DEPART.COD_TTYPE
	LEFT JOIN ESTABLISHMENT_CONDITIONS
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = ESTABLISHMENT_CONDITIONS.COD_EC
		AND ESTABLISHMENT_CONDITIONS.ACTIVE = 1
	WHERE ASS_TAX_DEPART.ACTIVE = 1
	AND [ASS_DEPTO_EQUIP].ACTIVE = 1
	AND EQUIPMENT.SERIAL = @TERMINALID
	AND LOWER(TRANSACTION_TYPE.NAME) = @TYPETRANSACTION
	AND ASS_TAX_DEPART.QTY_INI_PLOTS <= @QTY_PLOTS
	AND ASS_TAX_DEPART.QTY_FINAL_PLOTS >= @QTY_PLOTS
	AND ASS_TAX_DEPART.COD_SOURCE_TRAN = 1
	AND (
	BRAND.[NAME] = @BRAND
	OR BRAND.COD_BRAND IS NULL
	))
--AND (BRAND.[NAME] = NULL            
--OR BRAND.COD_BRAND IS NULL))            
SELECT
	@VALIDATE = dbo.FNC_REG_DENIED_TRAN(CTE.TRANSACTION_ONLINE, CTE.TRANSACTION_LIMIT, @AMOUNT, COD_ASS_TX_DEP, CTE.EQUIP_ACTIVE, IIF(CTE.EC_ACTIVE = 1 AND CTE.ALLOWED_TRANSACTION = 1, 1, 0), COD_EC)
   ,@FOUND = COUNT(*)
   ,@CODTX = CTE.COD_ASS_TX_DEP
   ,@INTERVAL = CTE.INTERVAL
   ,@CODASS = CTE.COD_ASS_DEPTO_TERMINAL
   ,@COMPANY = CTE.COD_COMP
   ,@TYPETRAN = CTE.COD_TTYPE
   ,@BRANCH = CTE.COD_BRANCH
   ,@COD_AFFILIATOR = CTE.COD_AFFILIATOR
   ,@INTERVAL_POSWEB = CTE.INTERVAL
   ,@MDR_POSWEB = CTE.MDR
   ,@ANTICIP_POSWEB = CTE.ANTICIPATION
   ,@RATE_POSWEB = CTE.RATE
FROM CTE
GROUP BY CTE.TRANSACTION_ONLINE
		,CTE.TRANSACTION_LIMIT
		,COD_ASS_TX_DEP
		,CTE.EQUIP_ACTIVE
		,CTE.EC_ACTIVE
		,CTE.COD_EC
		,CTE.COD_ASS_TX_DEP
		,CTE.INTERVAL
		,CTE.COD_ASS_DEPTO_TERMINAL
		,CTE.COD_COMP
		,CTE.COD_TTYPE
		,CTE.COD_BRANCH
		,CTE.COD_AFFILIATOR
		,CTE.MDR
		,CTE.ANTICIPATION
		,CTE.RATE
		,ALLOWED_TRANSACTION

IF (@COD_EC IS NULL)
SET @EC_TRANS = @COD_EC;
ELSE
SET @EC_TRANS = @COD_EC_AFFILIATOR;

IF @FOUND IS NULL
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '450 - Plan/tax not found for default EC'
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@POSWEB = 1
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS;

THROW 60002
, '450'
, 1;
END
ELSE
IF @VALIDATE IS NOT NULL
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = @VALIDATE
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@POSWEB = 1
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS;

SELECT
	@MSG_ERRO = dbo.[FNC_DEFINE_ERRROR](@VALIDATE);

THROW 60002
, @MSG_ERRO
, 1;
END;

EXEC @CODAC = SP_DEFINE_ACQ @TR_TYPE = @TYPETRAN
						   ,@COMPANY = @COMPANY
						   ,@QTY_PLOTS = @QTY_PLOTS
						   ,@BRAND = @BRAND

IF @CODAC = 0
BEGIN
EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
								,@PAN = @PAN
								,@BRAND = @BRAND
								,@CODASS_DEPTO_TERMINAL = @CODASS
								,@COD_TTYPE = @TYPETRAN
								,@PLOTS = @QTY_PLOTS
								,@CODTAX_ASS = @CODTX
								,@CODAC = NULL
								,@CODETR = @TRCODE
								,@COMMENT = '004 - Acquirer key not found for terminal  '
								,@TERMINALDATE = @TERMINALDATE
								,@TYPE = @TYPE
								,@COD_COMP = @COD_COMP
								,@COD_AFFILIATOR = @COD_AFFILIATOR
								,@POSWEB = 1
								,@SOURCE_TRAN = 1
								,@CODE_SPLIT = @CODE_SPLIT
								,@COD_EC = @EC_TRANS;

THROW 60002
, '004'
, 1;
END;

-- DEFINIR SE PARCELA > 1 ENTAO , CREDITO PARCELADO                  
IF @QTY_PLOTS > 1
SET @TYPE_CREDIT = 2;
ELSE
SET @TYPE_CREDIT = 1;

SELECT
	@CODPROD_ACQ = [PRODUCTS_ACQUIRER].COD_PR_ACQ
FROM [PRODUCTS_ACQUIRER]
INNER JOIN BRAND
	ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
INNER JOIN ASS_TR_TYPE_COMP
	ON ASS_TR_TYPE_COMP.COD_AC = PRODUCTS_ACQUIRER.COD_AC
		AND ASS_TR_TYPE_COMP.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
WHERE ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = @CODAC
AND [PRODUCTS_ACQUIRER].PLOT_VALUE = @TYPE_CREDIT
AND BRAND.NAME = @BRAND
AND ASS_TR_TYPE_COMP.COD_SOURCE_TRAN = 1

EXECUTE [SP_REG_TRANSACTION] @AMOUNT
							,@PAN
							,@BRAND
							,@CODASS_DEPTO_TERMINAL = @CODASS
							,@COD_TTYPE = @TYPETRAN
							,@PLOTS = @QTY_PLOTS
							,@CODTAX_ASS = @CODTX
							,@CODAC = @CODAC
							,@CODETR = @TRCODE
							,@TERMINALDATE = @TERMINALDATE
							,@COD_ASS_TR_ACQ = @CODAC
							,@CODPROD_ACQ = @CODPROD_ACQ
							,@TYPE = @TYPE
							,@COD_COMP = @COD_COMP
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@POSWEB = 1
							,@COD_EC = @COD_EC_AFFILIATOR
							,@COD_DESCRIPTION = @TRAN_DESC_ID
							,@DESCRIPTION = @TRAN_DESCRIPTION
							,@VALUE = @TARIFF_MERCHANT_DEFAULT
							,@TRACKING_DESCRIPTION = @IDENTIFI_TRANSACTION
							,@COD_EQUIP = @COD_EQUIP_AFFILIATOR
							,@MDR = @MDR_POSWEB
							,@ANTICIP = @ANTICIP_POSWEB
							,@TARIFF = @RATE_POSWEB
							,@SOURCE_TRAN = 1
							,@CODE_SPLIT = @CODE_SPLIT
							,@EC_TRANS = @EC_TRANS;

SELECT
	EXTERNAL_DATA_EC_ACQ.[VALUE] AS EC
   ,@TRCODE AS TRAN_CODE
   ,ACQUIRER.NAME AS ACQUIRER
FROM ASS_TR_TYPE_COMP
INNER JOIN ACQUIRER
	ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
LEFT JOIN EXTERNAL_DATA_EC_ACQ
	ON EXTERNAL_DATA_EC_ACQ.COD_AC = ASS_TR_TYPE_COMP.COD_AC
WHERE
--ISNULL(EXTERNAL_DATA_EC_ACQ.[NAME],'MID') = 'MID' AND                     
ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = @CODAC
END;
GO


-----------------------------
-- Atualizar legado 

-- FAVOR REVISAR
-----------------------------

IF OBJECT_ID('tempdb..#ecs') IS NOT NULL
DROP TABLE #ecs

CREATE TABLE #ecs
(
    COD_DEPTO_BRANCH INT,
    COD_BRANCH INT,
    COD_EC INT,
    COD_USER INT,
    COD_COMP INT
)

INSERT INTO #ecs (COD_DEPTO_BRANCH, COD_BRANCH, COD_EC, COD_USER, COD_COMP)
	SELECT
		ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	   ,BEC.COD_BRANCH
	   ,CE.COD_EC
	   ,CE.COD_USER
	   ,CE.COD_COMP
	FROM ASS_DEPTO_EQUIP
	INNER JOIN DEPARTMENTS_BRANCH DB
		ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = DB.COD_DEPTO_BRANCH
	INNER JOIN BRANCH_EC BEC
		ON BEC.COD_BRANCH = DB.COD_BRANCH
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE
		ON BEC.COD_EC = CE.COD_EC
	WHERE ASS_DEPTO_EQUIP.ACTIVE = 1
	GROUP BY ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
			,BEC.COD_BRANCH
			,CE.COD_EC
			,CE.COD_USER
			,CE.COD_COMP


IF OBJECT_ID('tempdb..#ecs_info') IS NOT NULL
DROP TABLE #ecs_info

CREATE TABLE #ecs_info
(
    COD_DEPTO_BRANCH INT,
    COD_BRANCH INT,
    COD_EC INT,
    COD_USER INT,
    COD_COMP INT,
    [ONLINE] INT,
    [OFFLINE] INT
)

INSERT INTO #ecs_info (COD_DEPTO_BRANCH, COD_BRANCH, COD_EC, COD_USER, COD_COMP, [ONLINE], [OFFLINE])
	SELECT
		e.COD_DEPTO_BRANCH
	   ,e.COD_BRANCH
	   ,e.COD_EC
	   ,e.COD_USER
	   ,e.COD_COMP
	   ,CASE
			WHEN EXISTS (SELECT TOP 1
						1
					FROM ASS_DEPTO_EQUIP a
					JOIN EQUIPMENT eq
						ON eq.COD_EQUIP = a.COD_EQUIP
					JOIN EQUIPMENT_MODEL EM
						ON eq.COD_MODEL = EM.COD_MODEL
					WHERE a.COD_DEPTO_BRANCH = e.COD_DEPTO_BRANCH
					AND a.ACTIVE = 1
					AND EM.ONLINE = 1) THEN 1
			ELSE 0
		END ONLINE
	   ,CASE
			WHEN EXISTS (SELECT TOP 1
						1
					FROM ASS_DEPTO_EQUIP a
					JOIN EQUIPMENT eq
						ON eq.COD_EQUIP = a.COD_EQUIP
					JOIN EQUIPMENT_MODEL EM
						ON eq.COD_MODEL = EM.COD_MODEL
					WHERE a.COD_DEPTO_BRANCH = e.COD_DEPTO_BRANCH
					AND a.ACTIVE = 1
					AND (EM.ONLINE IS NULL
					OR EM.ONLINE = 0)) THEN 1
			ELSE 0
		END [OFFLINE]
	FROM #ecs e
	ORDER BY e.COD_EC

INSERT INTO ESTABLISHMENT_CONDITIONS_HIST (COD_EC_CONDIT, COD_COMP, COD_USER, COD_EC, CREATED_AT, MODIFY_DATE, ACTIVE, PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION, DOCUMENT)
	SELECT
		COD_EC_CONDIT
	   ,COD_COMP
	   ,COD_USER
	   ,COD_EC
	   ,CREATED_AT
	   ,GETDATE()
	   ,ACTIVE
	   ,PRESENCIAL_TRANSACTION
	   ,ONLINE_TRANSACTION
	   ,DOCUMENT
	FROM ESTABLISHMENT_CONDITIONS

DELETE FROM ESTABLISHMENT_CONDITIONS

INSERT INTO ESTABLISHMENT_CONDITIONS (COD_COMP, COD_USER, COD_EC, CREATED_AT, MODIFY_DATE, ACTIVE, PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION, DOCUMENT)
	SELECT
		COD_COMP
	   ,COD_USER
	   ,COD_EC
	   ,GETDATE()
	   ,GETDATE()
	   ,1
	   ,0
	   ,0
	   ,0
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE ACTIVE = 1
	AND COD_RISK_SITUATION IN (SELECT
			COD_RISK_SITUATION
		FROM RISK_SITUATION
		WHERE [NAME] IN ('Pending risk Analysis', 'Denied for Risk', 'In Analysis'))

INSERT INTO ESTABLISHMENT_CONDITIONS (COD_COMP, COD_USER, COD_EC, CREATED_AT, MODIFY_DATE, ACTIVE, PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION, DOCUMENT)
	SELECT
		COMMERCIAL_ESTABLISHMENT.COD_COMP
	   ,COMMERCIAL_ESTABLISHMENT.COD_USER
	   ,COMMERCIAL_ESTABLISHMENT.COD_EC
	   ,GETDATE()
	   ,GETDATE()
	   ,1
	   ,0
	   ,0
	   ,1
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE ACTIVE = 1
	AND COD_COMP IS NOT NULL
	AND COD_RISK_SITUATION IN (SELECT
			COD_RISK_SITUATION
		FROM RISK_SITUATION
		WHERE [NAME] IN ('Released by Risk'))

UPDATE COMMERCIAL_ESTABLISHMENT
SET COD_SITUATION = (SELECT
			COD_SITUATION
		FROM SITUATION
		WHERE SITUATION.NAME = 'LOCKED FINANCIAL SCHEDULE')
   ,NOTE_FINANCE_SCHEDULE = 'Pendente aprovação dos documentos'
WHERE ACTIVE = 1
AND COD_COMP IS NOT NULL
AND COD_RISK_SITUATION IN (SELECT
		COD_RISK_SITUATION
	FROM RISK_SITUATION
	WHERE [NAME] IN ('Pending risk Analysis', 'Denied for Risk', 'In Analysis'))

INSERT INTO ESTABLISHMENT_CONDITIONS (COD_COMP, COD_USER, COD_EC, CREATED_AT, MODIFY_DATE, ACTIVE, PRESENCIAL_TRANSACTION, ONLINE_TRANSACTION, DOCUMENT)
	SELECT
		COD_COMP
	   ,COD_USER
	   ,COD_EC
	   ,GETDATE()
	   ,GETDATE()
	   ,1
	   ,[OFFLINE]
	   ,[ONLINE]
	   ,1
	FROM #ecs_info

GO

-----------------------------
-- ET-648 Pesquisa de Risco B2e
-----------------------------
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'CLAIMS'
	AND object_id = OBJECT_ID(N'ACCESS_APPAPI'))
BEGIN
ALTER TABLE ACCESS_APPAPI ADD CLAIMS VARCHAR(30)
END
GO

IF ( SELECT
		COUNT(*)
	FROM ACCESS_APPAPI
	WHERE APPNAME = 'B2E')
= 0
INSERT INTO ACCESS_APPAPI (APPNAME, CLIENT_ID, [NAME], COD_COMP, SECRETKEY, COD_AFFILIATOR, ACTIVE, CLAIMS)
	VALUES ('B2E', 'kug-w-er=f+-chgfdFIUREIRGJIFJ', 'B2E', 8, 'hfbhvbhGTrewScVRetYYdeEdDfgfGghFDE4wiHuiuOJOPIJE3EWde653wrsedt56rG-09876657&_KIFDR%', NULL, 1, '8.7');
GO

IF OBJECT_ID('SP_VAL_USER_APP_ACESS_CLAIM') IS NOT NULL DROP PROCEDURE SP_VAL_USER_APP_ACESS_CLAIM;
GO
CREATE PROCEDURE SP_VAL_USER_APP_ACESS_CLAIM
/*--------------------------------------------------------------------------------------------
    Procedure Name: [SP_VAL_USER_APP_ACESS_CLAIM]
    Project.......: TKPP
    ------------------------------------------------------------------------------------------
    Author                          VERSION        Date                            Description
    ------------------------------------------------------------------------------------------
    Luiz Aquino                     V1         	2020-02-13 				Creation
    Caike Uchoa						V2			2020-03-12				Add field CLAIMS
----------------------------------------------------------------------------------------------*/
(
	@Username VARCHAR(200)
 	, @Password VARCHAR(500)
) AS

BEGIN
SELECT
	COD_COMP
   ,COD_AFFILIATOR
   ,CLAIMS
   ,COD_ACCESS_APP
FROM ACCESS_APPAPI
WHERE [NAME] = @Username
AND SECRETKEY = @Password
AND CLAIMS IS NOT NULL
END
GO

IF OBJECT_ID('RESEARCH_RISK_TYPE') IS NOT NULL DROP TABLE RESEARCH_RISK_TYPE;
GO
	CREATE TABLE RESEARCH_RISK_TYPE (
		COD_RESEARCH_RISK_TYPE 	INT IDENTITY(1,1) PRIMARY KEY,
		CODE 					VARCHAR(20),
		CODE_POLICY				VARCHAR(100) NULL,
		ACTIVE					INT DEFAULT 1,
		DOCUMENT_TYPE			VARCHAR(5)
	);
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'values=[INITIAL,MONTHLY,YEARLY]'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_TYPE'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'CODE';
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'CodigoInstituicao on JSON request B2e'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_TYPE'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'CODE_POLICY';
GO

IF ( SELECT
		COUNT(*)
	FROM RESEARCH_RISK_TYPE
	WHERE CODE IN ('INITIAL', 'MONTHLY', 'YEARLY'))
> 0
DELETE FROM RESEARCH_RISK_TYPE;
GO

-- PF
INSERT INTO RESEARCH_RISK_TYPE
	VALUES ('INITIAL', '0181E3C6-0C2F-4719-B117-04398A47CBC2', 1, 'CPF');
INSERT INTO RESEARCH_RISK_TYPE
	VALUES ('MONTHLY', '0181E3C6-0C2F-4719-B117-04398A47CBC2', 1, 'CPF');
INSERT INTO RESEARCH_RISK_TYPE
	VALUES ('YEARLY', '0181E3C6-0C2F-4719-B117-04398A47CBC2', 1, 'CPF');
-- PJ e MEI
INSERT INTO RESEARCH_RISK_TYPE
	VALUES ('INITIAL', 'E3A03047-9BA6-4A68-AF81-741F4382AFA9', 1, 'CNPJ');
INSERT INTO RESEARCH_RISK_TYPE
	VALUES ('MONTHLY', 'E3A03047-9BA6-4A68-AF81-741F4382AFA9', 1, 'CNPJ');
INSERT INTO RESEARCH_RISK_TYPE
	VALUES ('YEARLY', 'E3A03047-9BA6-4A68-AF81-741F4382AFA9', 1, 'CNPJ');

IF OBJECT_ID('RESEARCH_RISK') IS NOT NULL DROP TABLE RESEARCH_RISK;
GO
	CREATE TABLE RESEARCH_RISK (
		COD_RESEARCH_RISK		INT IDENTITY(1,1) NOT NULL,
		COD_EC 					INT NULL,
		COD_USER				INT NULL,
		COD_RESEARCH_RISK_TYPE	INT NULL,
		CREATED_AT				DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
		SEND_AT					DATETIME NULL,
		MODIFY_AT				DATETIME NULL,
		COD_STATUS				INT DEFAULT((0)),
		CONSTRAINT [PK_RESEARCH_RISK] PRIMARY KEY CLUSTERED( [COD_RESEARCH_RISK] ASC) WITH (
			STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
		) ON [PRIMARY]
	) ON [PRIMARY]
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'using CodigoPropostaCliente on JSON response and request'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'COD_RESEARCH_RISK';
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'0: Não enviado, 1: Enviado, 2: Recebido, 3:Falha'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'COD_STATUS';
GO

IF EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_EC'
	AND object_id = OBJECT_ID(N'RESEARCH_RISK'))
BEGIN
ALTER TABLE [dbo].[RESEARCH_RISK] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_EC] FOREIGN KEY ([COD_EC]) REFERENCES [dbo].[COMMERCIAL_ESTABLISHMENT] ([COD_EC])
END
GO

IF EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_USER'
	AND object_id = OBJECT_ID(N'RESEARCH_RISK'))
BEGIN
ALTER TABLE [dbo].[RESEARCH_RISK] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_USERS] FOREIGN KEY ([COD_USER]) REFERENCES [dbo].[USERS] ([COD_USER])
END
GO

IF EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_RESEARCH_RISK_TYPE'
	AND object_id = OBJECT_ID(N'RESEARCH_RISK'))
BEGIN
ALTER TABLE [dbo].[RESEARCH_RISK] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_RRT] FOREIGN KEY ([COD_RESEARCH_RISK_TYPE]) REFERENCES [dbo].[RESEARCH_RISK_TYPE] ([COD_RESEARCH_RISK_TYPE])
END
GO

--IF (SELECT COUNT(*)	FROM RESEARCH_RISK) = 0
	-- #3 TEST INITIAL RESEARCH PJ
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (427, 4683, 4, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (433, 4683, 4, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (1172, 4683, 4, 0);
	---- #3 TEST INITIAL RESEARCH PF
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (10, 4683, 1, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (11, 4683, 1, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (16, 4683, 1, 0);
	--
	---- #1 TEST MONTHLY RESEARCH PJ
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS, CREATED_AT) VALUES (440, 4683, 5, 0, '2020-02-10 10:15:43.453');
	---- #1 TEST MONTHLY RESEARCH PF
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS, CREATED_AT) VALUES (411, 4683, 5, 0, '2020-02-06 13:15:43.453');
	--
	---- #1 TEST YEARLY RESEARCH PJ
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS, CREATED_AT) VALUES (474, 4683, 6, 0, '2019-03-10 10:15:43.453');
	---- #1 TEST YEARLY RESEARCH PF
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS, CREATED_AT) VALUES (578, 4683, 6, 0, '2020-02-06 13:15:43.453');
	--
	--INSERT INTO RESEARCH_RISK (COD_EC,COD_USER,COD_RESEARCH_RISK_TYPE,CREATED_AT,COD_STATUS) VALUES	(2192	,474 ,4,CURRENT_TIMESTAMP,0);
	--INSERT INTO RESEARCH_RISK (COD_EC,COD_USER,COD_RESEARCH_RISK_TYPE,CREATED_AT,COD_STATUS) VALUES	(13		,474 ,1,CURRENT_TIMESTAMP,0);
	--INSERT INTO RESEARCH_RISK (COD_EC,COD_USER,COD_RESEARCH_RISK_TYPE,CREATED_AT,COD_STATUS) VALUES	(40		,474 ,1,CURRENT_TIMESTAMP,0);
	--INSERT INTO RESEARCH_RISK (COD_EC,COD_USER,COD_RESEARCH_RISK_TYPE,CREATED_AT,COD_STATUS) VALUES	(42		,474 ,1,CURRENT_TIMESTAMP,0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (2262, 4683, 4, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (2162, 4683, 4, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (2192, 4683, 4, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (2435, 4683, 4, 0);
	--INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS) VALUES (2599, 4683, 4, 0);
--GO

IF OBJECT_ID('RESEARCH_RISK_RESPONSE') IS NOT NULL DROP TABLE RESEARCH_RISK_RESPONSE;
GO
	CREATE TABLE RESEARCH_RISK_RESPONSE (
		COD_RESEARCH_RISK_RESPONSE	INT IDENTITY(1,1) NOT NULL,
		COD_RESEARCH_RISK 			INT NULL,
		BID_ID						VARCHAR(100),
		SITUATION_RISK				VARCHAR(50),
		MESSAGE_SITUATION			VARCHAR(500),
		CODE_POLICY					VARCHAR(100),
		CNAE						VARCHAR(10),
		STATE_REGISTRATION			VARCHAR(20),
		CPF_CNPJ					VARCHAR(20),
		NAME_EC						VARCHAR(200),
		ACTIVE						INT DEFAULT((1)),
		CREATED_AT					DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
		CONSTRAINT [PK_RESEARCH_RISK_RESPONSE] PRIMARY KEY CLUSTERED( [COD_RESEARCH_RISK_RESPONSE] ASC) WITH (
			STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
		) ON [PRIMARY]
	) ON [PRIMARY]
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'B2e ID research'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_RESPONSE'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'BID_ID';
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'Situacao on JSON response'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_RESPONSE'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'SITUATION_RISK';
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'Mensagem on JSON response'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_RESPONSE'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'MESSAGE_SITUATION';
GO

IF EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_RESEARCH_RISK'
	AND object_id = OBJECT_ID(N'RESEARCH_RISK_RESPONSE'))
BEGIN
ALTER TABLE [dbo].[RESEARCH_RISK_RESPONSE] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_RESPONSE_RR] FOREIGN KEY ([COD_RESEARCH_RISK]) REFERENCES [dbo].[RESEARCH_RISK] ([COD_RESEARCH_RISK])
END
GO

IF OBJECT_ID('RESEARCH_RISK_RESPONSE_DETAILS') IS NOT NULL DROP TABLE RESEARCH_RISK_RESPONSE_DETAILS;
GO
	CREATE TABLE RESEARCH_RISK_RESPONSE_DETAILS (
		COD_RESEARCH_RISK_RESPONSE_DETAILS 	INT IDENTITY(1,1) NOT NULL,
		COD_RESEARCH_RISK_RESPONSE 			INT NULL,
		CODE 								VARCHAR(20),
		COD_SITUATION						VARCHAR(10),
		SITUATION_DESCRIPTION 				VARCHAR(200),
		COD_PARTNER_EC						INT NULL,
		CPF_PARTNER_EC						VARCHAR(20) NULL,
		CONSTRAINT [PK_RESEARCH_RISK_RESPONSE_DETAILS] PRIMARY KEY CLUSTERED( [COD_RESEARCH_RISK_RESPONSE_DETAILS] ASC) WITH (
			STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
		) ON [PRIMARY]
	) ON [PRIMARY]
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'FK with ADITIONAL_DATA_TYPE_EC, referencia as sócios de um PJ'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_RESPONSE_DETAILS'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'COD_PARTNER_EC';
EXEC sys.sp_addextendedproperty @NAME = N'MS_Description'
							   ,@VALUE = N'values=[PEP, RECEITA FEDERAL, OFAC]'
							   ,@level0type = N'SCHEMA'
							   ,@level0name = N'dbo'
							   ,@level1type = N'TABLE'
							   ,@level1name = N'RESEARCH_RISK_RESPONSE_DETAILS'
							   ,@level2type = N'COLUMN'
							   ,@level2name = N'CODE';
GO

IF EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_RESEARCH_RISK_RESPONSE'
	AND object_id = OBJECT_ID(N'RESEARCH_RISK_RESPONSE_DETAILS'))
BEGIN
ALTER TABLE [dbo].[RESEARCH_RISK_RESPONSE_DETAILS] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_RESPONSE_DETAILS_RRR] FOREIGN KEY ([COD_RESEARCH_RISK_RESPONSE]) REFERENCES [dbo].[RESEARCH_RISK_RESPONSE] ([COD_RESEARCH_RISK_RESPONSE])
END
GO

IF EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_PARTNER_EC'
	AND object_id = OBJECT_ID(N'RESEARCH_RISK_RESPONSE_DETAILS'))
BEGIN
ALTER TABLE [dbo].[RESEARCH_RISK_RESPONSE_DETAILS] WITH CHECK ADD CONSTRAINT [FK_RESEARCH_RISK_RESPONSE_DETAILS_PARTNER] FOREIGN KEY ([COD_PARTNER_EC]) REFERENCES [dbo].[ADITIONAL_DATA_TYPE_EC] ([COD_ADT_DATA])
END
GO

IF OBJECT_ID('VW_DATA_RESEARCH_RISK_EC') IS NOT NULL DROP VIEW VW_DATA_RESEARCH_RISK_EC;
GO
	CREATE VIEW [dbo].[VW_DATA_RESEARCH_RISK_EC]
	/*---------------------------------------------------------------------------------------- 
		View Name: [VW_DATA_RESEARCH_RISK_EC]		Project.......: TKPP 
	------------------------------------------------------------------------------------------ 
		Author              VERSION        Date         Description 
	------------------------------------------------------------------------------------------ 
		Marcus Gall			V1			04/03/2020		Create
	------------------------------------------------------------------------------------------*/ 
	AS
SELECT
	COMMERCIAL_ESTABLISHMENT.COD_EC
   ,COMMERCIAL_ESTABLISHMENT.NAME
   ,COMMERCIAL_ESTABLISHMENT.DOCUMENT_TYPE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB
   ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
   ,COMMERCIAL_ESTABLISHMENT.DOCUMENT
   ,COMMERCIAL_ESTABLISHMENT.BIRTHDATE
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.ADDRESS AS STREET
   ,ADDRESS_BRANCH.NUMBER
   ,ADDRESS_BRANCH.COMPLEMENT
   ,NEIGHBORHOOD.NAME AS NEIGHBORHOOD
   ,CITY.NAME AS CITY
   ,STATE.UF
   ,SEX_TYPE.NAME AS SEX
   ,(CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = 3 THEN 'R'
		ELSE 'C'
	END) AS TYPE_ADDRESS
   ,CONTACT_BRANCH.DDD
   ,CONTACT_BRANCH.NUMBER AS PHONE_NUMBER
   ,(CASE
		WHEN CONTACT_BRANCH.COD_TP_CONT = 1 THEN 'M'
		WHEN CONTACT_BRANCH.COD_TP_CONT = 2 THEN 'R'
		WHEN CONTACT_BRANCH.COD_TP_CONT = 3 THEN 'C'
		ELSE ''
	END) AS TYPE_CONTACT
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
INNER JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN STATE
	ON STATE.COD_STATE = CITY.COD_STATE
LEFT JOIN SEX_TYPE
	ON SEX_TYPE.COD_SEX = COMMERCIAL_ESTABLISHMENT.COD_SEX

-- PELA NECESSIDADE DE RESGATAR CONTATOS MAIS RELEVANTES PARA A PESQUISA DE RISCO
OUTER APPLY (SELECT TOP 1
		*
	FROM CONTACT_BRANCH
	WHERE COD_BRANCH = BRANCH_EC.COD_BRANCH
	AND ACTIVE = 1
	AND NUMBER IS NOT NULL
	ORDER BY NUMBER ASC, COD_TP_CONT) AS CONTACT_BRANCH
GO

IF OBJECT_ID('SP_LS_EC_RESEARCH_RISK') IS NOT NULL DROP PROCEDURE SP_LS_EC_RESEARCH_RISK;
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_RESEARCH_RISK]
/*----------------------------------------------------------------------------------------
    Procedure Name: [SP_FD_LS_RESEARCH_RISK]		Project.......: TKPP
------------------------------------------------------------------------------------------
    Author              VERSION        Date         Description
------------------------------------------------------------------------------------------
    Marcus Gall        V1          04/03/2020      Creation
------------------------------------------------------------------------------------------*/
(
    @RESEARCH_RISK_TYPE VARCHAR(20) = NULL
)
AS

DECLARE @QUERY_ NVARCHAR(MAX) = '';

BEGIN
SET @QUERY_ = CONCAT(@QUERY_, '
	SELECT RESEARCH_RISK.COD_RESEARCH_RISK, RESEARCH_RISK_TYPE.CODE_POLICY
	, VW_DATA_RESEARCH_RISK_EC.COD_EC
	, VW_DATA_RESEARCH_RISK_EC.NAME
	, VW_DATA_RESEARCH_RISK_EC.DOCUMENT_TYPE
	, VW_DATA_RESEARCH_RISK_EC.TYPE_ESTAB
   	, VW_DATA_RESEARCH_RISK_EC.TRADING_NAME
   	, VW_DATA_RESEARCH_RISK_EC.CPF_CNPJ
   	, VW_DATA_RESEARCH_RISK_EC.DOCUMENT
   	, VW_DATA_RESEARCH_RISK_EC.BIRTHDATE
	, VW_DATA_RESEARCH_RISK_EC.CEP
	, VW_DATA_RESEARCH_RISK_EC.STREET
	, VW_DATA_RESEARCH_RISK_EC.NUMBER
	, VW_DATA_RESEARCH_RISK_EC.COMPLEMENT
	, VW_DATA_RESEARCH_RISK_EC.NEIGHBORHOOD
   	, VW_DATA_RESEARCH_RISK_EC.CITY
   	, VW_DATA_RESEARCH_RISK_EC.UF
	, VW_DATA_RESEARCH_RISK_EC.SEX
	, VW_DATA_RESEARCH_RISK_EC.TYPE_ADDRESS
	, VW_DATA_RESEARCH_RISK_EC.DDD
	, VW_DATA_RESEARCH_RISK_EC.PHONE_NUMBER
	, VW_DATA_RESEARCH_RISK_EC.TYPE_CONTACT
	, ADITIONAL_DATA_TYPE_EC.NAME AS PARTNER_NAME, ADITIONAL_DATA_TYPE_EC.CPF PARTNER_CPF, ADITIONAL_DATA_TYPE_EC.BIRTH_DATA AS PARTNER_BIRTHDATE
	, TYPE_PARTNER.NAME AS PARTNER_TYPE 
	FROM RESEARCH_RISK
	INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE
	INNER JOIN VW_DATA_RESEARCH_RISK_EC ON VW_DATA_RESEARCH_RISK_EC.COD_EC = RESEARCH_RISK.COD_EC
	LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_EC = RESEARCH_RISK.COD_EC
	LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER 
	WHERE RESEARCH_RISK.COD_STATUS = 0');

	IF @RESEARCH_RISK_TYPE IS NOT NULL
	BEGIN
SET @QUERY_ = CONCAT(@QUERY_, ' AND RESEARCH_RISK_TYPE.CODE =''' + @RESEARCH_RISK_TYPE + '''');
	END
	
	IF @RESEARCH_RISK_TYPE = 'MONTHLY'
	BEGIN
SET @QUERY_ = CONCAT(@QUERY_, ' AND DATEADD(MONTH, 1, RESEARCH_RISK.CREATED_AT) < GETDATE()');
	END
	
	IF @RESEARCH_RISK_TYPE = 'YEARLY'
	BEGIN
SET @QUERY_ = CONCAT(@QUERY_, ' AND DATEADD(YEAR, 1, RESEARCH_RISK.CREATED_AT) < GETDATE()');
	END

SET @QUERY_ = CONCAT(@QUERY_, ' ORDER BY RESEARCH_RISK.CREATED_AT');
EXEC sp_executesql @QUERY_
				  ,N' @RESEARCH_RISK_TYPE VARCHAR(20)'
				  ,@RESEARCH_RISK_TYPE = @RESEARCH_RISK_TYPE;
END
GO

IF OBJECT_ID('SP_UP_RESEARCH_RISK') IS NOT NULL DROP PROCEDURE SP_UP_RESEARCH_RISK;
GO
CREATE PROCEDURE [dbo].[SP_UP_RESEARCH_RISK]
/*----------------------------------------------------------------------------------------
    Procedure Name: [SP_UP_RESEARCH_RISK]		Project.......: TKPP
------------------------------------------------------------------------------------------
    Author              VERSION        Date         Description
------------------------------------------------------------------------------------------
    Marcus Gall        V1          04/03/2020      Creation
------------------------------------------------------------------------------------------*/
(
	@COD_RESEARCH_RISK INT
	, @COD_STATUS INT
)
AS

BEGIN
	IF @COD_STATUS = 1
UPDATE RESEARCH_RISK
SET SEND_AT = current_timestamp
   ,COD_STATUS = @COD_STATUS
WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;
IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK', 1;
END
GO

IF TYPE_ID('TP_RESEARCH_RISK_RESPONSE_DETAILS') IS NOT NULL DROP TYPE TP_RESEARCH_RISK_RESPONSE_DETAILS;
GO
CREATE TYPE [dbo].[TP_RESEARCH_RISK_RESPONSE_DETAILS]
/*----------------------------------------------------------------------------------------
	Type Name: [TP_RESEARCH_RISK_RESPONSE_DETAILS]						Project.......: TKPP
------------------------------------------------------------------------------------------
	Author			Version		Date        	Description
------------------------------------------------------------------------------------------
	Marcus Gall		V1			05/03/2020		Creation
------------------------------------------------------------------------------------------*/
AS TABLE(
	[CODE] [varchar](20) NOT NULL
	, [COD_SITUATION] [varchar](10) NULL
	, [SITUATION_DESCRIPTION] [varchar](200) NULL
	, [CPF_PARTNER_EC] [varchar](20) NULL
)
GO

IF OBJECT_ID('SP_REG_RESEARCH_RISK_RESPONSE') IS NOT NULL DROP PROCEDURE SP_REG_RESEARCH_RISK_RESPONSE;
GO
CREATE PROCEDURE [dbo].[SP_REG_RESEARCH_RISK_RESPONSE]
/*----------------------------------------------------------------------------------------
	Procedure Name: [SP_REG_RESEARCH_RISK_RESPONSE]					Project.......: TKPP
------------------------------------------------------------------------------------------
	Author			Version		Date        	Description
------------------------------------------------------------------------------------------
	Marcus Gall		V1			05/03/2020		Creation
------------------------------------------------------------------------------------------*/
(
	@COD_RESEARCH_RISK INT
	, @BID_ID VARCHAR(100) = NULL
	, @SITUATION_RISK VARCHAR(50) = NULL
	, @MESSAGE VARCHAR(500) = NULL
	, @CODE_POLICY VARCHAR(100) = NULL
	, @CNAE VARCHAR(10) = NULL
	, @STATE_REGISTRATION VARCHAR(20) = NULL
	, @CPF_CNPJ VARCHAR(20) = NULL
	, @NAME VARCHAR(200) = NULL
	, @LINES_RESEARCH_RISK_DETAILS TP_RESEARCH_RISK_RESPONSE_DETAILS READONLY
)
AS

	DECLARE @COD_RESEARCH_RISK_RESPONSE INT;
	DECLARE @COD_EC INT;
	DECLARE @DOCUMENT_TYPE VARCHAR(5);
	DECLARE @COD_RESEARCH_RISK_TYPE INT;

BEGIN
	-- BEGIN > REGISTRANDO O RESULTADO DA PESQUISA RECEBIDA
	IF ( SELECT
		COUNT(RESEARCH_RISK.COD_RESEARCH_RISK)
	FROM RESEARCH_RISK
	WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK)
= 0
THROW 60001, 'BAD REQUEST, NOT FOUND RESEARCH_RISK REGISTER WITH PARAMETER >> @COD_RESEARCH_RISK', 1;

UPDATE RESEARCH_RISK
SET MODIFY_AT = current_timestamp
   ,COD_STATUS = 2
WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;
IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK', 1;

UPDATE RESEARCH_RISK_RESPONSE
SET ACTIVE = 0
WHERE COD_RESEARCH_RISK = @COD_RESEARCH_RISK;
INSERT INTO RESEARCH_RISK_RESPONSE (COD_RESEARCH_RISK, BID_ID, SITUATION_RISK, MESSAGE_SITUATION, CODE_POLICY, CNAE, STATE_REGISTRATION, CPF_CNPJ, NAME_EC)
	VALUES (@COD_RESEARCH_RISK, @BID_ID, @SITUATION_RISK, @MESSAGE, @CODE_POLICY, @CNAE, @STATE_REGISTRATION, @CPF_CNPJ, @NAME);
SET @COD_RESEARCH_RISK_RESPONSE = @@identity;
	IF @@ROWCOUNT < 1
		THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK_RESPONSE', 1;

INSERT INTO RESEARCH_RISK_RESPONSE_DETAILS (COD_RESEARCH_RISK_RESPONSE, CODE, COD_SITUATION, SITUATION_DESCRIPTION, COD_PARTNER_EC, CPF_PARTNER_EC)
	SELECT
		@COD_RESEARCH_RISK_RESPONSE
	   ,LINES.[CODE]
	   ,LINES.[COD_SITUATION]
	   ,LINES.[SITUATION_DESCRIPTION]
	   ,EC_PARTNERS.COD_ADT_DATA
	   ,LINES.[CPF_PARTNER_EC]
	FROM @LINES_RESEARCH_RISK_DETAILS AS LINES
	INNER JOIN RESEARCH_RISK
		ON RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK
	LEFT JOIN ADITIONAL_DATA_TYPE_EC AS EC_PARTNERS
		ON EC_PARTNERS.COD_EC = RESEARCH_RISK.COD_EC
			AND LINES.[CPF_PARTNER_EC] = EC_PARTNERS.CPF;
IF @@rowcount < 1
THROW 60001, 'COULD NOT UPDATE RESEARCH_RISK_RESPONSE', 1;


-- BEGIN > AGENDAMENTO DE NOVAS PESQUISAS PROGRAMADAS (MONTHLY, YEARLY)
SELECT TOP 1
	@COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
   ,@DOCUMENT_TYPE = COMMERCIAL_ESTABLISHMENT.DOCUMENT_TYPE
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN RESEARCH_RISK
	ON RESEARCH_RISK.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE RESEARCH_RISK.COD_RESEARCH_RISK = @COD_RESEARCH_RISK;

-- > YEARLY
IF (SELECT
			COUNT(RESEARCH_RISK.COD_RESEARCH_RISK)
		FROM RESEARCH_RISK
		INNER JOIN RESEARCH_RISK_TYPE
			ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE
		WHERE RESEARCH_RISK_TYPE.CODE = 'YEARLY'
		AND RESEARCH_RISK.COD_STATUS IN (0, 1)
		AND RESEARCH_RISK.COD_EC = @COD_EC)
	= 0
BEGIN
SET @COD_RESEARCH_RISK_TYPE = (SELECT TOP 1
		RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE
	FROM RESEARCH_RISK_TYPE
	WHERE RESEARCH_RISK_TYPE.CODE = 'YEARLY'
	AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = @DOCUMENT_TYPE
	AND RESEARCH_RISK_TYPE.ACTIVE = 1);
INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS)
	VALUES (@COD_EC, NULL, @COD_RESEARCH_RISK_TYPE, 0);
END

SET @COD_RESEARCH_RISK_TYPE = 0;
			
	-- > MONTHLY
	IF ( SELECT
		COUNT(RESEARCH_RISK.COD_RESEARCH_RISK)
	FROM RESEARCH_RISK
	INNER JOIN RESEARCH_RISK_TYPE
		ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE
	WHERE RESEARCH_RISK.COD_EC = @COD_EC
	AND ((RESEARCH_RISK_TYPE.CODE = 'MONTHLY'
	AND RESEARCH_RISK.COD_STATUS IN (0, 1))
	OR (RESEARCH_RISK_TYPE.CODE = 'YEARLY'
	AND RESEARCH_RISK.COD_STATUS IN (0, 1)
	AND DATEADD(YEAR, 1, RESEARCH_RISK.CREATED_AT) < GETDATE())))
= 0
BEGIN
SET @COD_RESEARCH_RISK_TYPE = (SELECT TOP 1
		RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE
	FROM RESEARCH_RISK_TYPE
	WHERE RESEARCH_RISK_TYPE.CODE = 'MONTHLY'
	AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = @DOCUMENT_TYPE
	AND RESEARCH_RISK_TYPE.ACTIVE = 1);
INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS)
	VALUES (@COD_EC, NULL, @COD_RESEARCH_RISK_TYPE, 0);
END
END
GO

-----------------------------
-- ET-649 Agendar pesquisa de Risco ao criar EC
-----------------------------

IF OBJECT_ID('SP_REG_COMMERCIAL_ESTAB') IS NOT NULL DROP PROCEDURE [SP_REG_COMMERCIAL_ESTAB];
GO

CREATE PROCEDURE [dbo].[SP_REG_COMMERCIAL_ESTAB]                                                
/*----------------------------------------------------------------------------------------                                                
Procedure Name: [SP_REG_COMMERCIAL_ESTAB]                                                
Project.......: TKPP                                                
------------------------------------------------------------------------------------------                                                
Author					VERSION        Date         Description                                                
------------------------------------------------------------------------------------------                                                
Kennedy Alef            V1          27/07/2018      Creation                                                
Elir Ribeiro            V2          13/09/2018      Changed                                            
Elir Ribeiro            V3          17/09/2018      Changed                                        
Fernando Henrique       V5          05/1/2018       Changed                                      
Elir Ribeiro            v6          09/11/2018      Changed                                  
Luiz Aquino				v7			13/12/2018      ADD HAS_SPOT and SPOT_TAX                      
Lucas Aguiar			v8			14/12/2018      ADD TRANSACTION_DIGITED                      
Lucas Aguiar			v9			2019-04-18      ADD ROTINA DE SPLIT                  
Elir Ribeiro			v10			2019-08-01      ADD SITUATION ANALYSE RISK              
Elir Ribeiro			v11			2019-10-01      ADD @TRANS_LIMIT_MONTHLY                
Lucas Aguiar			v12			2019-10-28      Conta Cess�o          
Marcus Gall				v13			2019-11-06      ADD FK BRANCH_BUSINESS      
Marcus Gall				v14			2019-12-06      When enabling online transaction, create credentials and flag true in field HAS_CREDENTIALS      
Elir Ribeiro			v15			2020-01-08      add type Consumer
Marcus Gall				v16			2020-03-12		Scheduling risk research in table RESEARCH_RISK
------------------------------------------------------------------------------------------*/                                                
(                                                
 @CODE VARCHAR(100),                                                
 @NAME VARCHAR(200),                                   
 @TRADING_NAME VARCHAR(100),                                                
 @CPF_CNPJ VARCHAR(100),                                                
 @DOCUMENT VARCHAR(100),                                                
 @DOCUMENT_TYPE VARCHAR(100),                                                
 @EMAIL VARCHAR(100),                                                
 @STATE_REG VARCHAR(100),                                                
 @MUN_REG VARCHAR(100),                                                
 @CODSEG INT,          
 @TRANS_LIMIT DECIMAL(22,6),                                                
 @TRANS_LIMIT_DIALY DECIMAL(22,6),             
 @TRANS_LIMIT_MONTHLY DECIMAL(22,6) = NULL,             
 @BIRTHDATE  DATE,                                                
 @TYPE_EC INT,                                                
 @CODUSER INT,                                                
 @COMPANY INT,                                                
 @AGENCY VARCHAR(100),                                                
 @DIGIT VARCHAR(100),                                                
 @ACCOUNT VARCHAR(100),                                                
 @DIGIT_ACCOUNT VARCHAR(100) = null,                                                
 @BANK INT,                                                
 @ACCOUNT_TYPE INT,                                                
 @SEC_FACT_AUTH INT,                                                
 @ADDRESS VARCHAR(300),              
 @NUMBER VARCHAR(100),                                                
 @COMPLEMENT VARCHAR(200),                                                
 @REFPOINT VARCHAR(100),                                                
 @CEP VARCHAR(12),                                   
 @COD_NEIGH INT,                                                
 @CODSEX INT,                                                
 @CODREP INT,                                                
 @COD_OPER VARCHAR(50) = NULL,                                                
 @COD_REQ INT = NULL,                             
 @COD_SIT INT = NULL,                                                
 @COD_RECEIPT INT = NULL,                                                
 @COD_AFFILIATOR INT = NULL,                                             
 @TRANSACTION_ONLINE INT   = NULL,                                      
 @REGISTERNEWTICKET INT = NULL,                                  
 @REQUESTCARD INT = NULL,                                  
 @COD_CARD_PRD INT = NULL,                              
 @DEFAULT_EC INT = NULL,                      
 @HAS_SPOT INT = 0,                      
 @SPOT_TAX DECIMAL(6,2) = 0,                  
 @HAS_SPLIT INT = 0,          
 @IS_ASSIGNMENT INT = 0,          
 @ASSIGNMENT_NAME VARCHAR(255) = NULL,          
 @ASSIGNMENT_IDENTIFICATION VARCHAR(14) = NULL,        
 @CODBRANCHBUSINESS INT = NULL,    
 @TypeClient TP_MEET_COSTUMER READONLY     
)                                               
AS                  
          
DECLARE @TYPEBR VARCHAR(100);
DECLARE @IDEC INT;
DECLARE @IDDEPART INT;
DECLARE @IDBR INT;
DECLARE @SEQ INT;
DECLARE @CONT INT;
DECLARE @USER_ONLINE VARCHAR(100) = NULL;
DECLARE @PWD_ONLINE uniqueidentifier;
DECLARE @TRANSACTION_LIMIT DECIMAL(22,6);
DECLARE @TRANSACTION_DAILY DECIMAL(22,6);
DECLARE @COD_RISK INT = NULL;
DECLARE @COD_OPT_SERV INT;
DECLARE @HAS_CREDENTIALS BIT = 0;
      
                  
BEGIN

SET @TYPEBR = 'PRINCIPAL'

SELECT
	@CONT = COUNT(*)
FROM COMMERCIAL_ESTABLISHMENT
WHERE COD_COMP = @COMPANY
AND CPF_CNPJ = @CPF_CNPJ
AND (COD_AFFILIATOR = @COD_AFFILIATOR
OR @COD_AFFILIATOR IS NULL);

IF @CONT > 0
THROW 61002, 'COMMERCIAL ESTABLISHMENT ALREADY REGISTERED', 1;

DECLARE @CodSpotService INT
DECLARE @COD_SPLIT_SERVICE INT;

SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';

SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

IF (@HAS_SPOT = 1
	AND @COD_AFFILIATOR IS NOT NULL
	AND (SELECT
			COUNT(*)
		FROM SERVICES_AVAILABLE
		WHERE COD_ITEM_SERVICE = @CodSpotService
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL
		AND ACTIVE = 1)
	= 0)
THROW 61039, 'Affiliated is not allowed to give advance (SPOT)', 1;

SELECT
	@SEQ = NEXT VALUE FOR [SEQ_ECCODE];

IF (@TRANSACTION_ONLINE = 1)
BEGIN
SET @USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
SET @PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
SET @HAS_CREDENTIALS = 1
      
END

SELECT
	@TRANSACTION_LIMIT = TRANSACTION_LIMIT
   ,@TRANSACTION_DAILY = LIMIT_TRANSACTION_DIALY
   ,@TRANS_LIMIT_MONTHLY = (SELECT
			LIMIT_TRANSACTION_MONTHLY
		FROM SEGMENTS
		WHERE COD_SEG = @CODSEG)
FROM TRANSACTION_LIMIT
WHERE ACTIVE = 1
AND COD_TYPE_ESTAB = @TYPE_EC
AND COD_COMP = @COMPANY;

INSERT INTO COMMERCIAL_ESTABLISHMENT (CODE,
NAME,
TRADING_NAME,
CPF_CNPJ,
DOCUMENT,
DOCUMENT_TYPE,
EMAIL,
STATE_REGISTRATION,
MUNICIPAL_REGISTRATION,
COD_SEG,
COD_BRANCH_BUSINESS,
TRANSACTION_LIMIT,
LIMIT_TRANSACTION_DIALY,
LIMIT_TRANSACTION_MONTHLY,
BIRTHDATE,
COD_COMP,
COD_TYPE_ESTAB,
COD_USER,
SEC_FACTOR_AUTH_ACTIVE,
COD_SEX,
COD_SALES_REP,
COD_REQ,
COD_SIT_REQ,
COD_AFFILIATOR,
TRANSACTION_ONLINE,
USER_ONLINE,
PWD_ONLINE,
DEFAULT_EC,
--HAS_SPOT,                      
SPOT_TAX,
COD_SITUATION,
COD_RISK_SITUATION,
HAS_CREDENTIALS)
	VALUES (@SEQ, @NAME, @TRADING_NAME, @CPF_CNPJ, @DOCUMENT, @DOCUMENT_TYPE, @EMAIL, @STATE_REG, @MUN_REG, @CODSEG, @CODBRANCHBUSINESS, @TRANSACTION_LIMIT, @TRANSACTION_DAILY, @TRANS_LIMIT_MONTHLY, @BIRTHDATE, @COMPANY, @TYPE_EC, @CODUSER, @SEC_FACT_AUTH, @CODSEX, @CODREP, @COD_REQ, ISNULL(@COD_SIT, 1), @COD_AFFILIATOR, ISNULL(@TRANSACTION_ONLINE, 0), @USER_ONLINE, @PWD_ONLINE, @DEFAULT_EC,
	--@HAS_SPOT,                      
	@SPOT_TAX, (SELECT COD_SITUATION FROM SITUATION WHERE [NAME] = 'RELEASED'), 1, @HAS_CREDENTIALS);

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER COMMERCIAL_ESTABLISHMENT', 1;

SET @IDEC = SCOPE_IDENTITY();
      
                    
IF(@COD_AFFILIATOR IS NOT NULL AND @HAS_SPOT = 1)                 
 BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @CODUSER, @CodSpotService, NULL, @COD_AFFILIATOR, @IDEC, 1, NULL)
END
ELSE
BEGIN
INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
	VALUES (current_timestamp, @CODUSER, @CodSpotService, NULL, @COD_AFFILIATOR, @IDEC, 0, NULL)
END

IF (@HAS_SPLIT = 1)
BEGIN
SELECT
	@COD_OPT_SERV = COD_OPT_SERV
FROM OPTIONS_SERVICES
WHERE [DESCRIPTION] = 'ALGUNS';

INSERT INTO SERVICES_AVAILABLE (COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, COD_OPT_SERV, MODIFY_DATE)
	VALUES (@CODUSER, @COD_SPLIT_SERVICE, @COMPANY, @COD_AFFILIATOR, @IDEC, 1, @COD_OPT_SERV, current_timestamp);
END;

SELECT
	@SEQ = NEXT VALUE FOR [SEQ_BRANCHCODE];

INSERT INTO [BRANCH_EC] (CODE,
NAME,
TRADING_NAME,
CPF_CNPJ,
DOCUMENT,
DOCUMENT_TYPE,
EMAIL,
STATE_REGISTRATION,
MUNICIPAL_REGISTRATION,
TRANSACTION_LIMIT,
LIMIT_TRANSACTION_DIALY,
BIRTHDATE,
COD_EC,
TYPE_BRANCH,
COD_USER,
COD_SEX,
COD_SALES_REP,
COD_TYPE_ESTAB,
COD_REQ,
COD_SITUATION,
COD_TYPE_REC)
	VALUES (@SEQ, @NAME, @TRADING_NAME, @CPF_CNPJ, @DOCUMENT, @DOCUMENT_TYPE, @EMAIL, @STATE_REG, @MUN_REG, @TRANSACTION_LIMIT, @TRANSACTION_DAILY, @BIRTHDATE, @IDEC, @TYPEBR, @CODUSER, @CODSEX, @CODREP, @TYPE_EC, @COD_REQ, @COD_SIT, @COD_RECEIPT)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER BRANCH_EC', 1;

SELECT
	@IDBR = @@identity;

-- TODO: Defina valores de par?metros aqui.                                                

IF @COD_RECEIPT = 2
BEGIN
IF @@rowcount < 1
THROW 60000, 'COULD NOT CARD REQUEST', 1
END;

IF @COD_RECEIPT = 1
	OR @COD_RECEIPT IS NULL
BEGIN
INSERT INTO BANK_DETAILS_EC (AGENCY, DIGIT_AGENCY, COD_TYPE_ACCOUNT, COD_EC, COD_BANK, ACCOUNT, DIGIT_ACCOUNT, COD_USER, COD_OPER_BANK, COD_BRANCH
, IS_ASSIGNMENT, ASSIGNMENT_NAME, ASSIGNMENT_IDENTIFICATION)
	VALUES (@AGENCY, ISNULL(REPLACE(@DIGIT, '-', ''), ''), @ACCOUNT_TYPE, @IDEC, @BANK, @ACCOUNT, @DIGIT_ACCOUNT, @CODUSER, @COD_OPER, @IDBR, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER BANK_DETAILS_EC', 1;
END;

UPDATE ADDRESS_BRANCH
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
WHERE ACTIVE = 1
AND COD_BRANCH = @IDBR

INSERT INTO ADDRESS_BRANCH (ADDRESS, NUMBER, COMPLEMENT, CEP, COD_NEIGH, REFERENCE_POINT, COD_BRANCH)
	VALUES (@ADDRESS, @NUMBER, @COMPLEMENT, @CEP, @COD_NEIGH, @REFPOINT, @IDBR)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ADDRESS_BRANCH ', 1;

INSERT INTO DEPARTMENTS_BRANCH (COD_BRANCH, COD_DEPARTS, COD_USER)
	VALUES (@IDBR, 1, @CODUSER)

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER DEPARTMENTS_BRANCH', 1;

SELECT
	@IDDEPART = @@identity;

EXEC SP_REG_EXTERNAL_DATA_EC_ACQ @IDEC
								,@CODUSER

SET @COD_RISK = (SELECT
		COD_RISK_PERSON
	FROM RISK_PERSON
	WHERE CPF_CNPJ = @CPF_CNPJ);
      
        
          
                  
                
IF ISNULL(@REGISTERNEWTICKET,0) = 1
EXEC SP_REG_SUPPORT_TICKET 1
						  ,@NAME
						  ,'AGUARDANDO ANALISE DE RISCO'
						  ,@COD_RISK
						  ,1
						  ,1
						  ,63
IF @REQUESTCARD = 1
EXEC SP_REG_FFILIATOR_CARD_PROVIDER @COD_CARD_PRD
								   ,@CODUSER
								   ,@COD_AFFILIATOR
ELSE
IF @REQUESTCARD = 0
BEGIN
INSERT INTO CARDSTOBRANCH_REQUESTS (COD_BRANCH,
COD_SIT_REQ,
COD_USER_CAD,
COD_PRD)
	VALUES (@IDBR, 1, @CODUSER, @COD_CARD_PRD)

EXEC SP_REG_FFILIATOR_CARD_PROVIDER @COD_CARD_PRD
								   ,@CODUSER
								   ,@COD_AFFILIATOR;
END

SELECT
	@IDEC AS COD_EC
   ,@IDBR AS COD_BR
   ,@IDDEPART AS COD_DEPART

-- conhe�a seu cliente    

IF (SELECT
			COUNT(*)
		FROM @TypeClient)
	> 0
BEGIN

INSERT INTO MEET_COSTUMER (COD_EC,
QTY_EMPLOYEES,
AVERAGE_BILLING,
URL_SITE,
INSTAGRAM,
FACEBOOK,
COD_NEIGH,
STREET,
NUMBER,
COMPLEMENT,
ANOTHER_INFO,
CNPJ,
NEIGHBORHOOD,
CITY,
STATES,
REFERENCEPOINT,
ZIPCODE)
	SELECT
		@IDEC
	   ,QTY_EMPLOYEES
	   ,AVERAGE_BILLING
	   ,URL_SITE
	   ,INSTAGRAM
	   ,FACEBOOK
	   ,COD_NEIGH
	   ,STREET
	   ,NUMBER
	   ,COMPLEMENT
	   ,ANOTHER_INFO
	   ,CNPJ
	   ,NEIGHBORHOOD
	   ,CITY
	   ,STATES
	   ,REFERENCEPOINT
	   ,ZIPCODE
	FROM @TypeClient


IF @@rowcount < (SELECT
			COUNT(*)
		FROM @TypeClient)
THROW 70020, 'COULD NOT REGISTER [MEET_COSTUMER]. Parameter name: 70020', 1;
END

-- BEGIN > Scheduling risk research 
DECLARE @COD_RESEARCH_RISK_TYPE INT;
SET @COD_RESEARCH_RISK_TYPE = (SELECT TOP 1
		RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE
	FROM RESEARCH_RISK_TYPE
	WHERE RESEARCH_RISK_TYPE.CODE = 'INITIAL'
	AND RESEARCH_RISK_TYPE.DOCUMENT_TYPE = @DOCUMENT_TYPE
	AND RESEARCH_RISK_TYPE.ACTIVE = 1);

INSERT INTO RESEARCH_RISK (COD_EC, COD_USER, COD_RESEARCH_RISK_TYPE, COD_STATUS)
	VALUES (@IDEC, @CODUSER, @COD_RESEARCH_RISK_TYPE, 0);
-- BEGIN > Scheduling risk research 

-- FIM --    
END;
GO

-----------------------------
-- ET-650 Relatório de Pesquisa de Risco
-----------------------------

IF OBJECT_ID('SP_REPORT_RESEARCH_RISK') IS NOT NULL DROP PROCEDURE [SP_REPORT_RESEARCH_RISK];
GO

CREATE PROCEDURE [dbo].[SP_REPORT_RESEARCH_RISK]                                    
/*----------------------------------------------------------------------------------------                                                                      
Procedure Name: [SP_REPORT_RESEARCH_RISK]                                                                      
Project.......: TKPP                                                                      
------------------------------------------------------------------------------------------                                                                      
Author                          VERSION         Date                        Description                                                                      
------------------------------------------------------------------------------------------                                                                      
Caike Uchôa                       v1          2020-03-23                      CREATION                
------------------------------------------------------------------------------------------*/                                                                                    
(                      
@COD_EC INT = NULL,  
@TYPE_RESEARCH VARCHAR(20) = NULL,  
@DATE_RESEARCH DATETIME = NULL,
@LAST_LINE_RESEARCH INT = NULL
)                      
AS          
  
DECLARE @QUERY NVARCHAR(MAX);
  
  
BEGIN

SET @QUERY = CONCAT(@QUERY, 'SELECT 
COMMERCIAL_ESTABLISHMENT.TRADING_NAME,  
COMMERCIAL_ESTABLISHMENT.[NAME],  
COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,  
COMMERCIAL_ESTABLISHMENT.BIRTHDATE,  
SEX_TYPE.[NAME] AS [SEXO],  
RESEARCH_RISK_RESPONSE.STATE_REGISTRATION,  
RESEARCH_RISK_RESPONSE.CNAE,  
RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK,  
RESEARCH_RISK_RESPONSE.BID_ID,  
RESEARCH_RISK_TYPE.CODE_POLICY,   
CASE
WHEN RESEARCH_RISK_TYPE.CODE = ''INITIAL'' THEN ''Inicial''
WHEN RESEARCH_RISK_TYPE.CODE = ''MONTHLY'' THEN ''Mensal''
WHEN RESEARCH_RISK_TYPE.CODE = ''YEARLY'' THEN ''Anual''
END
AS [TYPE_POLICY],  
RESEARCH_RISK_RESPONSE.SITUATION_RISK,  
RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION,  
CASE
WHEN TRIM(RESEARCH_RISK_RESPONSE_DETAILS.CODE) LIKE ''receita%'' THEN ''Receita Federal''
ELSE RESEARCH_RISK_RESPONSE_DETAILS.CODE
END AS [CODE],
CASE   
WHEN RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION = ''Não Consultado'' THEN ''Erro''
WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''1'' THEN ''Negado''  
WHEN RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION = ''0'' THEN ''Aprovado''
END AS [SITUATION_DESCRIPTION],
RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION,
RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION AS SITUATION_DESCRIPTION_DETAILS,
RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC,  
RESEARCH_RISK_RESPONSE.CREATED_AT, 
RESEARCH_RISK.SEND_AT,
RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE,
TYPE_PARTNER.NAME AS PARTNER_TYPE, 
ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS AS PERCENTAGE_QUOTAS,
ADITIONAL_DATA_TYPE_EC.NAME AS PARTNER_NAME 
FROM RESEARCH_RISK_RESPONSE_DETAILS ');

IF @LAST_LINE_RESEARCH IS NOT NULL   
	BEGIN
SET @QUERY = CONCAT(@QUERY, ' 
		JOIN (
			SELECT MAX(TOP_RRR.COD_RESEARCH_RISK_RESPONSE) AS COD_RESEARCH_RISK_RESPONSE, TOP_RR.COD_EC FROM RESEARCH_RISK_RESPONSE AS TOP_RRR
			JOIN RESEARCH_RISK AS TOP_RR ON TOP_RRR.COD_RESEARCH_RISK = TOP_RR.COD_RESEARCH_RISK
			GROUP BY TOP_RR.COD_EC
		) AS MOST_RECENT_RESEARCH_RISK_RESPONSE ON MOST_RECENT_RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE 
		INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = MOST_RECENT_RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE ');
	END
ELSE
	BEGIN
SET @QUERY = CONCAT(@QUERY, ' INNER JOIN RESEARCH_RISK_RESPONSE ON RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE = RESEARCH_RISK_RESPONSE_DETAILS.COD_RESEARCH_RISK_RESPONSE ');
	END

SET @QUERY = CONCAT(@QUERY, ' 
INNER JOIN RESEARCH_RISK ON RESEARCH_RISK.COD_RESEARCH_RISK = RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK  
INNER JOIN RESEARCH_RISK_TYPE ON RESEARCH_RISK_TYPE.COD_RESEARCH_RISK_TYPE = RESEARCH_RISK.COD_RESEARCH_RISK_TYPE  
INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = RESEARCH_RISK.COD_EC  
INNER JOIN SEX_TYPE ON SEX_TYPE.COD_SEX = COMMERCIAL_ESTABLISHMENT.COD_SEX  
LEFT JOIN ADITIONAL_DATA_TYPE_EC ON ADITIONAL_DATA_TYPE_EC.COD_ADT_DATA = RESEARCH_RISK_RESPONSE_DETAILS.COD_PARTNER_EC
LEFT JOIN TYPE_PARTNER ON TYPE_PARTNER.COD_TYPE_PARTNER = ADITIONAL_DATA_TYPE_EC.COD_TYPE_PARTNER
WHERE RESEARCH_RISK_RESPONSE.ACTIVE = 1');
   
  
IF @COD_EC IS NOT NULL   
BEGIN
SET @QUERY = CONCAT(@QUERY, ' AND RESEARCH_RISK.COD_EC = @COD_EC');
  
END
  
  
IF @TYPE_RESEARCH IS NOT NULL   
BEGIN
SET @QUERY = CONCAT(@QUERY, ' AND RESEARCH_RISK_TYPE.CODE = @TYPE_RESEARCH');
  
END
  
  
IF @DATE_RESEARCH IS NOT NULL   
BEGIN
SET @QUERY = CONCAT(@QUERY, ' AND CAST(RESEARCH_RISK_RESPONSE.CREATED_AT AS DATE) = CAST(@DATE_RESEARCH AS DATE)');
  
END

SET @QUERY = CONCAT(@QUERY, ' 
GROUP BY   
COMMERCIAL_ESTABLISHMENT.TRADING_NAME,  
COMMERCIAL_ESTABLISHMENT.[NAME],  
COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,  
COMMERCIAL_ESTABLISHMENT.BIRTHDATE,  
SEX_TYPE.[NAME],
RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK_RESPONSE,
RESEARCH_RISK_RESPONSE.STATE_REGISTRATION,  
RESEARCH_RISK_RESPONSE.CNAE,  
RESEARCH_RISK_RESPONSE.COD_RESEARCH_RISK,  
RESEARCH_RISK_RESPONSE.BID_ID,  
RESEARCH_RISK_TYPE.CODE_POLICY,  
RESEARCH_RISK_TYPE.CODE,  
RESEARCH_RISK_RESPONSE.SITUATION_RISK,  
RESEARCH_RISK_RESPONSE.MESSAGE_SITUATION,  
RESEARCH_RISK_RESPONSE_DETAILS.CODE,  
RESEARCH_RISK_RESPONSE_DETAILS.COD_SITUATION,
RESEARCH_RISK_RESPONSE_DETAILS.SITUATION_DESCRIPTION,
RESEARCH_RISK_RESPONSE_DETAILS.CPF_PARTNER_EC,  
RESEARCH_RISK_RESPONSE.CREATED_AT,
RESEARCH_RISK.SEND_AT,
TYPE_PARTNER.NAME, 
ADITIONAL_DATA_TYPE_EC.PERCENTEGE_QUOTAS,
ADITIONAL_DATA_TYPE_EC.NAME');

EXEC sp_executesql @QUERY
				  ,N' @COD_EC INT,  
@TYPE_RESEARCH VARCHAR(20),  
@DATE_RESEARCH DATETIME,
@LAST_LINE_RESEARCH INT
'
				  ,@COD_EC = @COD_EC
				  ,@TYPE_RESEARCH = @TYPE_RESEARCH
				  ,@DATE_RESEARCH = @DATE_RESEARCH
				  ,@LAST_LINE_RESEARCH = @LAST_LINE_RESEARCH
;

END
GO
 

-----------------------------
-- ET-829 Ajuste de Gestão de Risco em Documentos
-----------------------------

IF (OBJECT_ID('[SP_REG_DOC_EC]') IS NOT NULL) DROP PROCEDURE [SP_REG_DOC_EC]
GO

CREATE PROCEDURE [dbo].[SP_REG_DOC_EC]                
/*----------------------------------------------------------------------------------------                                                                      
Project.......: TKPP								Procedure Name: [SP_REG_DOC_EC]                                                                      
------------------------------------------------------------------------------------------                                                                      
Author                 VERSION      Date            Description                                                                      
------------------------------------------------------------------------------------------                                                                      
Desconhecido			v1          00-00-0000      CREATION                
Marcus Gall				v2			05-05-2020		Alterar a situação de Risco ou ModifyDate alterar um documento.
------------------------------------------------------------------------------------------*/    
(                
@DOC VARCHAR(300) ,                 
@TYPE_INSIDECODE INT,                
@COD_BRANCH INT,                
@COD_USER INT                
)                
AS                
                
DECLARE @COD_STATUS_EC INT;
                
DECLARE @NAME VARCHAR;
                
DECLARE @COD_RISK INT;
                
DECLARE @TICKET INT;
                
DECLARE @COD_DOC INT;
                
DECLARE @COD_EC INT;
   
DECLARE @RISK INT;
  
DECLARE @DETAIL_DESCRIPTION VARCHAR(255);
DECLARE @COD_EC_RISK INT;
                
BEGIN

UPDATE DOCS_BRANCH
SET ACTIVE = 0
WHERE COD_BRANCH = @COD_BRANCH
AND COD_DOC_TYPE = @TYPE_INSIDECODE
AND ACTIVE = 1;

SELECT
	@COD_EC_RISK = COMMERCIAL_ESTABLISHMENT.COD_EC
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE BRANCH_EC.COD_BRANCH = @COD_BRANCH;

IF ((SELECT
			COUNT(COD_EC)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE COD_EC = @COD_EC_RISK
		AND COD_RISK_SITUATION = (SELECT
				COD_RISK_SITUATION
			FROM RISK_SITUATION
			WHERE [NAME] = 'Released by Risk'))
	= 1)
BEGIN
INSERT INTO COMMERCIAL_ESTABLISHMENT_LOG (CODE, NAME, TRADING_NAME, CPF_CNPJ, DOCUMENT_TYPE, EMAIL, STATE_REGISTRATION, MUNICIPAL_REGISTRATION, COD_SEG, TRANSACTION_LIMIT, LIMIT_TRANSACTION_DIALY, BIRTHDATE, COD_USER, COD_COMP, MODIFY_DATE, COD_USER_MODIFY, SEC_FACTOR_AUTH_ACTIVE, COD_TYPE_ESTAB, COD_SEX, DOCUMENT, COD_SALES_REP, COD_EC, NOTE, COD_SIT_REQ, COD_SITUATION, COD_REQ, COD_AFFILIATOR, TRANSACTION_ONLINE, USER_ONLINE, PWD_ONLINE, DEFAULT_EC, NOTE_FINANCE_SCHEDULE, COD_RISK_SITUATION, RISK_REASON)
	SELECT
		CODE
	   ,NAME
	   ,TRADING_NAME
	   ,CPF_CNPJ
	   ,DOCUMENT_TYPE
	   ,EMAIL
	   ,STATE_REGISTRATION
	   ,MUNICIPAL_REGISTRATION
	   ,COD_SEG
	   ,TRANSACTION_LIMIT
	   ,LIMIT_TRANSACTION_DIALY
	   ,BIRTHDATE
	   ,COD_USER
	   ,COD_COMP
	   ,MODIFY_DATE
	   ,COD_USER_MODIFY
	   ,SEC_FACTOR_AUTH_ACTIVE
	   ,COD_TYPE_ESTAB
	   ,COD_SEX
	   ,DOCUMENT
	   ,COD_SALES_REP
	   ,COD_EC
	   ,NOTE
	   ,COD_SIT_REQ
	   ,COD_SITUATION
	   ,COD_REQ
	   ,COD_AFFILIATOR
	   ,TRANSACTION_ONLINE
	   ,USER_ONLINE
	   ,PWD_ONLINE
	   ,DEFAULT_EC
	   ,NOTE_FINANCE_SCHEDULE
	   ,COD_RISK_SITUATION
	   ,RISK_REASON
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC;
UPDATE COMMERCIAL_ESTABLISHMENT
SET COD_RISK_SITUATION = (SELECT
			COD_RISK_SITUATION
		FROM RISK_SITUATION
		WHERE [NAME] = 'In Analysis')
   ,RISK_REASON = 'Pendencia de análise em novo documento enviado'
   ,MODIFY_DATE = GETDATE()
WHERE COD_EC = @COD_EC_RISK;
END
ELSE
BEGIN
INSERT INTO COMMERCIAL_ESTABLISHMENT_LOG (CODE, NAME, TRADING_NAME, CPF_CNPJ, DOCUMENT_TYPE, EMAIL, STATE_REGISTRATION, MUNICIPAL_REGISTRATION, COD_SEG, TRANSACTION_LIMIT, LIMIT_TRANSACTION_DIALY, BIRTHDATE, COD_USER, COD_COMP, MODIFY_DATE, COD_USER_MODIFY, SEC_FACTOR_AUTH_ACTIVE, COD_TYPE_ESTAB, COD_SEX, DOCUMENT, COD_SALES_REP, COD_EC, NOTE, COD_SIT_REQ, COD_SITUATION, COD_REQ, COD_AFFILIATOR, TRANSACTION_ONLINE, USER_ONLINE, PWD_ONLINE, DEFAULT_EC, NOTE_FINANCE_SCHEDULE, COD_RISK_SITUATION, RISK_REASON)
	SELECT
		CODE
	   ,NAME
	   ,TRADING_NAME
	   ,CPF_CNPJ
	   ,DOCUMENT_TYPE
	   ,EMAIL
	   ,STATE_REGISTRATION
	   ,MUNICIPAL_REGISTRATION
	   ,COD_SEG
	   ,TRANSACTION_LIMIT
	   ,LIMIT_TRANSACTION_DIALY
	   ,BIRTHDATE
	   ,COD_USER
	   ,COD_COMP
	   ,MODIFY_DATE
	   ,COD_USER_MODIFY
	   ,SEC_FACTOR_AUTH_ACTIVE
	   ,COD_TYPE_ESTAB
	   ,COD_SEX
	   ,DOCUMENT
	   ,COD_SALES_REP
	   ,COD_EC
	   ,NOTE
	   ,COD_SIT_REQ
	   ,COD_SITUATION
	   ,COD_REQ
	   ,COD_AFFILIATOR
	   ,TRANSACTION_ONLINE
	   ,USER_ONLINE
	   ,PWD_ONLINE
	   ,DEFAULT_EC
	   ,NOTE_FINANCE_SCHEDULE
	   ,COD_RISK_SITUATION
	   ,RISK_REASON
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC;
UPDATE COMMERCIAL_ESTABLISHMENT
SET MODIFY_DATE = GETDATE()
WHERE COD_EC = @COD_EC_RISK;
END

SELECT
	@COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
   ,@COD_STATUS_EC = COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ
   ,@COD_RISK = RISK_PERSON.COD_RISK_PERSON
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
INNER JOIN RISK_PERSON
	ON RISK_PERSON.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE BRANCH_EC.COD_BRANCH = @COD_BRANCH
AND BRANCH_EC.TYPE_BRANCH = 'PRINCIPAL'
AND BRANCH_EC.ACTIVE = 1
AND RISK_PERSON.ACTIVE = 1;

SET @TICKET = (SELECT TOP 1
		ST.COD_SUP_TIC
	FROM SUPPORT_TICKET ST
	INNER JOIN RISK_PERSON RP
		ON ST.COD_RISK_PERSON = RP.COD_RISK_PERSON
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE
		ON RP.COD_EC = CE.COD_EC
	INNER JOIN BRANCH_EC BEC
		ON CE.COD_EC = BEC.COD_EC
	WHERE BEC.COD_BRANCH = @COD_BRANCH
	AND BEC.TYPE_BRANCH = 'PRINCIPAL'
	AND CE.ACTIVE = 1
--AND ST.COD_SUP_TIC_STA = 1                
--OR  ST.COD_SUP_TIC_STA = 4                
--ORDER BY 1 DESC
);
      
      
	IF (@DOC = '') SET @DOC = NULL;

INSERT INTO DOCS_BRANCH (COD_USER, COD_BRANCH, COD_SIT_REQ, COD_DOC_TYPE, PATH_DOC, COD_SUP_TIC, MODIFY_DATE)
	VALUES (@COD_USER, @COD_BRANCH, 16, @TYPE_INSIDECODE, @DOC, @TICKET, dbo.FN_FUS_UTF(GETDATE()));

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER DOCS_BRANCH', 1;

SET @COD_DOC = @@identity;
          
   
	IF (@COD_STATUS_EC = 5)      
	BEGIN
--SET @TICKET =       
--(                
-- SELECT TOP       
--  1 ST.COD_SUP_TIC                 
-- FROM                 
-- SUPPORT_TICKET ST                
-- INNER JOIN RISK_PERSON RP ON ST.COD_RISK_PERSON = RP.COD_RISK_PERSON                
-- INNER JOIN  COMMERCIAL_ESTABLISHMENT CE ON RP.COD_EC = CE.COD_EC                
-- INNER JOIN BRANCH_EC BEC ON CE.COD_EC  = BEC.COD_EC                
-- WHERE BEC.COD_BRANCH = @COD_BRANCH                 
-- AND BEC.TYPE_BRANCH = 'PRINCIPAL'                 
-- AND CE.ACTIVE = 1                 
----AND ST.COD_SUP_TIC_STA = 1                
----OR  ST.COD_SUP_TIC_STA = 4               
--  --ORDER BY 1 DESC                
--);       

UPDATE DOCS_BRANCH
SET COD_SUP_TIC = @TICKET
WHERE DOCS_BRANCH.COD_DOC_BR = @COD_DOC;

IF @@rowcount < 1
THROW 60000, 'COULD NOT UPDATE DOCUMENT TICKET', 1;

IF (SELECT
			COUNT(COD_DOC_BR)
		FROM VW_DOCS_BRANCH_BY_EC
		WHERE COD_EC = @COD_EC
		AND PATH_DOC IS NULL)
	= 0
BEGIN

--INSERT INTO COMMERCIAL_ESTABLISHMENT_LOG     
--SELECT         
-- CREATED_AT,         
-- CODE,         
-- NAME,         
-- TRADING_NAME,         
-- CPF_CNPJ,         
-- DOCUMENT_TYPE,         
-- EMAIL,         
-- STATE_REGISTRATION,         
-- MUNICIPAL_REGISTRATION,         
-- COD_SEG,        
-- TRANSACTION_LIMIT,         
-- LIMIT_TRANSACTION_DIALY,         
-- BIRTHDATE,         
-- COD_USER,         
-- COD_COMP,         
-- ACTIVE,         
-- MODIFY_DATE,         
-- COD_USER_MODIFY,         
-- SEC_FACTOR_AUTH_ACTIVE,         
-- COD_TYPE_ESTAB,         
-- COD_SEX,         
-- DOCUMENT,         
-- COD_SALES_REP,         
-- COD_EC, NOTE,         
-- COD_SIT_REQ        
--FROM COMMERCIAL_ESTABLISHMENT WHERE COD_EC = @COD_EC;        

UPDATE COMMERCIAL_ESTABLISHMENT
SET COD_SIT_REQ = 9
WHERE COD_EC = @COD_EC;

SELECT
	@RISK = COD_RISK_PERSON
FROM RISK_PERSON
WHERE COD_EC = @COD_EC;

SELECT TOP (1)
	@DETAIL_DESCRIPTION = CONCAT('REPROVADO; ', SOURCES_CONSULT_RISK.NAME_SOURCES, '.')
FROM DETAIL_RISK
INNER JOIN SOURCES_CONSULT_RISK
	ON (SOURCES_CONSULT_RISK.COD_CONSULT_RISK = DETAIL_RISK.COD_CONSULT_RISK)
WHERE DETAIL_RISK.SUCCESS <> 'A'
AND DETAIL_RISK.COD_RISK_PERSON = @RISK
ORDER BY COD_DETAIL_RISK DESC

EXEC [SP_UP_SUPPORT_TICKET] @COD_SUP_TIC = @TICKET
						   ,@COD_SUP_TIC_STA = 1
						   ,@COD_SUP_TIC_QUE = 9
						   ,@DESCRIPTION = @DETAIL_DESCRIPTION
						   ,@COMMENT = NULL
						   ,@COD_USER = 63;
END;
END;
END;
GO
IF OBJECT_ID('SP_LOGIN_USER') IS NOT NULL DROP PROCEDURE SP_LOGIN_USER;
GO
CREATE PROCEDURE [dbo].[SP_LOGIN_USER]                  
/*----------------------------------------------------------------------------------------                  
    Procedure Name: SP_LOGIN_USER                  
    Project.......: TKPP            
      
    ------------------------------------------------------------------------------------------                  
    Author                          VERSION        Date                            Description                  
    ------------------
------------------------------------------------------------------------                  
    Kennedy Alef     V1      31/07/2018        Creation                  
    Gian Luca Dalle Cort   V2      31/07/2018        Changed                  
    Lucas A
guiar   v3  26/11/2018  changed          
       
*/
          
(                 
@ACESSKEY VARCHAR(300),                  
@USER VARCHAR(100) ,                 
@COD_AFFILIATOR INT                   
)                  
AS                  
DECLARE @LOCK DATETIME;
                  
DECLARE @ACTIVE_USER INT;
                  
DECLARE @CODUSER INT;
                  
DECLARE @ACTIVE_EC INT;
                  
DECLARE @DATEPASS DATETIME
                  
DECLARE @LOGGED INT;
                  
DECLARE @PASS_TMP VARCHAR(MAX);
                  
DECLARE @RETURN VARCHAR(200);
                  
DECLARE @ACTIVE_AFL INT;
                  
DECLARE @COD_AFF INT;
                   
DECLARE @COD_MODULE_ INT;
               
DECLARE @COD_SALES_REP INT;
          
BEGIN


SELECT
	@LOCK = LOCKED_UP
   ,@ACTIVE_USER = USERS.ACTIVE
   ,@CODUSER = USERS.COD_USER
   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
   ,@DATEPASS = PASS_HISTORY.CREATED_AT
   ,@LOGGED = USERS.LOGGED
   ,@PASS_TMP = PASS_HISTORY.PASS
   ,@ACTIVE_AFL = AFFILIATOR.ACTIVE
   ,@COD_AFF = AFFILIATOR.COD_AFFILIATOR
   ,@COD_SALES_REP = SALES_REPRESENTATIVE.COD_SALES_REP
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE

INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER
LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR =
		USERS.COD_AFFILIATOR --BUSCA SE USU�RIO POSSUI C�DIGO DE AFILIADOR                  
LEFT JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_USER = USERS.COD_USER
WHERE COD_ACCESS = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY

AND PASS_HISTORY.ACTUAL = 1
OR USERS.EMAIL = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1

IF @CODUSER IS NULL
	OR @CODUSER = 0
BEGIN

SET @RETURN = CONCAT('USER NOT FOUND', ';') + ISNULL(@PASS_TMP, 0);
                  
THROW 61006,@RETURN,1;
                  
END
                  
                
IF ISNULL(@COD_AFF,0) <> ISNULL(@COD_AFFILIATOR,0)              
BEGIN

SET @RETURN = CONCAT('USER NOT FOUND r', ';') + ISNULL(@PASS_TMP, 0);
                  
THROW 61006,@RETURN,1;
                  
END
                 
                
   
               
IF DATEDIFF(MINUTE,@LOCK,GETDATE()) < 30                  
BEGIN

SET @RETURN = CONCAT(CONCAT('USER BLOCKED', ';'), @PASS_TMP);
                  
THROW 61008,@RETURN,1;
                  
END
               
   
                  
IF @ACTIVE_USER = 0                  
BEGIN
SET @RETURN = CONCAT(CONCAT('USER INACTIVE', ';'), @PASS_TMP);
                  
--SET @RETURN = CONCAT('USER INACTIVE',CONCAT('-',@PASS_TMP))                  
THROW 61007,@RETURN,1;
                  
END
                  
                  
IF @ACTIVE_EC = 0                  
BEGIN
SET @RETURN = CONCAT(CONCAT('COMMERCIAL ESTABLISHMENT INACTIVE', ';'), @PASS_TMP);
                  
--SET @RETURN = CONCAT('COMMERCIAL ESTABLISHMENT INACTIVE',CONCAT('-',@PASS_TMP))                  
THROW 61009,@RETURN,1;
                  
END
                  
                  
IF @ACTIVE_AFL = 0                  
BEGIN
SET @RETURN = CONCAT(CONCAT('AFFILIATOR INACTIVE', ';'), @PASS_TMP);
                  
--SET @RETURN = CONCAT('COMMERCIAL ESTABLISHMENT INACTIVE',CONCAT('-',@PASS_TMP))                  
THROW 61009,@RETURN,1;
                  
END
                  
                  
IF DATEDIFF(DAY,@DATEPASS
,GETDATE()) >= 30                  
BEGIN
SET @RETURN = CONCAT(CONCAT('PASSWORD EXPIRED', ';'), @PASS_TMP);
                  
--SET @RETURN = CONCAT('PASSWORD EXPIRED',CONCAT('-',@PASS_TMP))                  
THROW 61010,@RETURN,1;
                
  
END
                  
IF @LOGGED = 1                  
BEGIN
UPDATE USERS
SET LOGGED = 0
WHERE USERS.COD_USER = @CODUSER;
DELETE FROM TEMP_TOKEN
WHERE TEMP_TOKEN.COD_USER = @CODUSER;
SET @RETURN =
CONCAT(CONCAT('USER ALREADY LOGGED', ';'), @PASS_TMP);
                  
--SET @RETURN = CONCAT('USER ALREADY LOGGED',CONCAT('-',@PASS_TMP))                  
THROW 61011,@RETURN,1;
                  
END
                  
IF @PASS_TMP IS NULL               
  
THROW 61029,'TEMPORARY ACCESS',1;



SELECT
	USERS.COD_ACCESS AS USERNAME
   ,USERS.COD_USER
   ,USERS.IDENTIFICATION
   ,PASS_HISTORY.PASS
   ,USERS.CPF_CNPJ AS CPF_CNPJ_USER
   ,USERS.EMAIL
   ,COMPANY.COD_COMP AS COD_COMP
   ,AFFILIATOR.COD_AFFILIATOR AS INSIDECODE_AFL
   ,PROFILE_ACCESS.CODE AS COD_PROFILE
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,MODULES.CODE AS MODULE
   ,MODULES.COD_MODULE AS COD_MODULE
   ,@COD_AFFILIATOR AS PAR_AFFILIATOR
   ,@COD_AFF AS AFF_RET
   ,CASE COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
		WHEN 1 THEN AUTHENTICATION_FACTOR.NAME
		WHEN 0 THEN NULL
		ELSE AUTHENTICATION_FACTOR.NAME

	END
	AS AUTHENTICATION_FACTOR
   ,CASE
		WHEN FIRST_LOGIN_DATE IS NULL THEN 1
		ELSE 0
	END
	AS FIRST_ACCESS
   ,AUTHENTICATION_FACTOR.COD_FACT
   ,(-1 * (DATEDIFF(DAY, ((DATEADD(DAY, 30, GETDATE()) + GETDATE()) - GETDATE()), @DATEPASS))) AS DAYSTO_EXPIRE
   ,THEMES.COD_THEMES AS 'ThemeCode'
   ,THEMES.CREATED_AT AS 'CreatedDate'
   ,THEMES.LOGO_AFFILIATE AS 'PathLogo'
   ,THEMES.LOGO_HEADER_AFFILIATE AS 'PathLogoHeader'
   ,THEMES.COD_AFFILIATOR AS 'AffiliatorCode'
   ,THEMES.MODIFY_DATE AS 'ModifyDate'
   ,THEMES.COLOR_HEADER AS 'ColorHeader'
   ,THEMES.Active AS 'Active'
   ,AFFILIATOR.SubDomain AS 'SubDomain'
   ,AFFILIATOR.Guid AS 'Guid'
   ,THEMES.BACKGROUND_IMAGE AS 'BackgroundImage'
   ,THEMES.SECONDARY_COLOR AS 'SecondaryColor'
   ,[POS_AVAILABLE].[AVAILABLE] AS 'AvailablePOS'
   ,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC AS 'DefaultEc'
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,USERS.LAST_LOGIN
FROM USERS
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = USERS.COD_COMP
INNER JOIN PROFILE_ACCESS
	ON PROFILE_ACCESS.COD_PROFILE = USERS.COD_PROFILE

LEFT JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = USERS.COD_EC
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
INNER JOIN PASS_HISTORY
	ON PASS_HISTORY.COD_USER = USERS.COD_USER

INNER JOIN MODULES
	ON MODULES.COD_MODULE = USERS.COD_MODULE
LEFT JOIN ASS_FACTOR_AUTH_COMPANY
	ON ASS_FACTOR_AUTH_COMPANY.COD_COMP = COMPANY.COD_COMP
LEFT JOIN AUTHENTICATION_FACTOR
	ON AUTHENTICATION_FACTOR.COD_FACT = ASS_FACTOR_AUTH_COMPANY.COD_FACT
LEFT JOIN THEMES
	ON THEMES.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
LEFT JOIN POS_AVAILABLE
	ON POS_AVAILABLE.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
LEFT JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_USER = USERS.COD_USER
WHERE COD_ACCESS = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
AND (THEMES.Active = 1
OR THEMES.Active IS NULL)
OR USERS.EMAIL = @USER
AND COMPANY.ACCESS_KEY = @ACESSKEY
AND PASS_HISTORY.ACTUAL = 1
AND (THEMES.Active = 1
OR THEMES.Active IS NULL)

END;


GO

CREATE NONCLUSTERED INDEX [IX_TRAN_TITLE_FINANCE_PROT]
ON [dbo].[TRANSACTION_TITLES] ([COD_FIN_CALENDAR])
INCLUDE ([COD_PAY_PROT])
GO



IF OBJECT_ID('VW_REP_RELEASES_EC_COMPARE') IS NOT NULL
DROP VIEW [VW_REP_RELEASES_EC_COMPARE];

GO

CREATE VIEW [dbo].[VW_REP_RELEASES_EC_COMPARE]  
AS
WITH CTE_RELEASE_PAYMENTS
AS
(SELECT
		BRANCH_EC.COD_EC
	   ,EC.CODE
	   ,EC.TRADING_NAME AS EC
	   ,EC.CPF_CNPJ AS CPF_CNPJ_EC
	   ,EC.COD_COMP
	   ,SUM(dbo.RELEASE_ADJUSTMENTS.value) AS PLOT_VALUE_PAYMENT
	   ,CAST(RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE AS DATE) AS PREVISION_PAY_DATE
	   ,BANKS.COD_BANK
	   ,ISNULL(BANKS.CODE, 'NÃO CADASTRADO') AS CODE_BANK
	   ,ISNULL(BANKS.NAME, 'NÃO CADASTRADO') AS BANK
	   ,{ FN concat(dbo.BANK_DETAILS_EC.AGENCY, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_AGENCY) }, '')) } AS AGENCY
	   ,{ FN concat(dbo.BANK_DETAILS_EC.ACCOUNT, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_ACCOUNT) }, '')) } AS ACCOUNT
	   ,ACCOUNT_TYPE.NAME AS ACCOUNT_TYPE
	   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
	   ,OPERATION.CODE AS OPERATION_CODE
	   ,SITUATION.NAME AS SITUATION
	   ,SITUATION.COD_SITUATION
	   ,'AJUSTE' AS TYPE_RELEASE
	   ,ISNULL(ORIGIN_BANK.STANDARD_BANK, (SELECT
				ORIGIN_BANK.STANDARD_BANK
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS STANDARD_BANK
	   ,ISNULL(ORIGIN_BANK.MIN_TRANSFER_VALUE, (SELECT
				ORIGIN_BANK.MIN_TRANSFER_VALUE
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS MIN_TRANSFER_VALUE
	   ,ISNULL(ORIGIN_BANK.MIN_TED_VALUE, (SELECT
				ORIGIN_BANK.MIN_TED_VALUE
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS MIN_TED_VALUE
	   ,BRANCH_EC.TYPE_BRANCH
	   ,BRANCH_EC.COD_BRANCH
	   ,AFFILIATOR.COD_AFFILIATOR
	   ,AFFILIATOR.NAME AS NAME_AFFILIATOR
	   ,TYPE_ESTAB.CODE AS TYPE_ESTAB
	   ,EC.CREATED_AT
	   ,0 IS_SPOT
	   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
	   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT_EC
	   ,RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	   ,CASE
			WHEN AFFILIATOR.COD_SITUATION = 24 THEN 1
			WHEN EC.COD_SITUATION = 24 THEN 1
			ELSE 0
		END BLOCKED_FINANCE
	   ,BANK_DETAILS_EC.IS_ASSIGNMENT
	   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
	FROM dbo.RELEASE_ADJUSTMENTS
	INNER JOIN dbo.COMMERCIAL_ESTABLISHMENT AS EC
		ON EC.COD_EC = RELEASE_ADJUSTMENTS.COD_EC
	INNER JOIN dbo.SITUATION
		ON SITUATION.COD_SITUATION = RELEASE_ADJUSTMENTS.COD_SITUATION
	INNER JOIN dbo.BRANCH_EC
		ON BRANCH_EC.COD_EC = EC.COD_EC
	INNER JOIN dbo.BANK_DETAILS_EC
		ON BANK_DETAILS_EC.COD_EC = EC.COD_EC
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
	LEFT OUTER JOIN dbo.BANKS
		ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
	LEFT OUTER JOIN dbo.ACCOUNT_TYPE
		ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
	LEFT OUTER JOIN dbo.OPERATION_BANK
		ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
	LEFT OUTER JOIN dbo.OPERATION
		ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
	LEFT JOIN ORIGIN_BANK
		ON ORIGIN_BANK.COD_BANK = BANKS.COD_BANK
		AND ORIGIN_BANK.COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
		AND ORIGIN_BANK.ACTIVE = 1
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
	LEFT JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = EC.COD_TYPE_ESTAB
	WHERE (RELEASE_ADJUSTMENTS.COD_SITUATION IN (4, 17))
	AND (BRANCH_EC.COD_TYPE_REC = 1)
	GROUP BY EC.TRADING_NAME
			,EC.CPF_CNPJ
			,EC.COD_COMP
			,CAST(RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE AS DATE)
			,ISNULL(BANKS.CODE, 'NÃO CADASTRADO')
			,ISNULL(BANKS.NAME, 'NÃO CADASTRADO')
			,BANKS.COD_BANK
			,BANKS.CODE
			,BANKS.NAME
			,{ FN concat(dbo.BANK_DETAILS_EC.AGENCY, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_AGENCY) }, '')) }
			,dbo.BANK_DETAILS_EC.ACCOUNT
			,dbo.BANK_DETAILS_EC.DIGIT_ACCOUNT
			,ACCOUNT_TYPE.NAME
			,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			,SITUATION.NAME
			,SITUATION.COD_SITUATION
			,BRANCH_EC.COD_EC
			,BANKS.COD_BANK
			,OPERATION.CODE
			,EC.CODE
			,ORIGIN_BANK.STANDARD_BANK
			,ORIGIN_BANK.MIN_TRANSFER_VALUE
			,ORIGIN_BANK.MIN_TED_VALUE
			,TYPE_BRANCH
			,BRANCH_EC.COD_BRANCH
			,AFFILIATOR.COD_AFFILIATOR
			,AFFILIATOR.[NAME]
			,EC.CODE
			,EC.CREATED_AT
			,TYPE_ESTAB.CODE
			,RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
			,EC.COD_SITUATION
			,AFFILIATOR.COD_SITUATION
			,BANK_DETAILS_EC.IS_ASSIGNMENT
			,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION

	UNION ALL

	SELECT
		COD_EC
	   ,CODE
	   ,EC
	   ,CPF_CNPJ_EC
	   ,VW_PAYMENT_DIARY.COD_COMP
	   ,PLOT_VALUE_PAYMENT
	   ,PREVISION_PAY_DATE
	   ,VW_PAYMENT_DIARY.COD_BANK
	   ,VW_PAYMENT_DIARY.CODE_BANK
	   ,VW_PAYMENT_DIARY.BANK
	   ,VW_PAYMENT_DIARY.AGENCY
	   ,VW_PAYMENT_DIARY.ACCOUNT
	   ,VW_PAYMENT_DIARY.ACCOUNT_TYPE
	   ,VW_PAYMENT_DIARY.COD_TYPE_ACCOUNT
	   ,VW_PAYMENT_DIARY.OPERATION_CODE
	   ,VW_PAYMENT_DIARY.SITUATION
	   ,VW_PAYMENT_DIARY.COD_SITUATION
	   ,TYPE_RELEASE
	   ,VW_PAYMENT_DIARY.STANDARD_BANK
	   ,VW_PAYMENT_DIARY.MIN_TRANSFER_VALUE
	   ,VW_PAYMENT_DIARY.MIN_TED_VALUE
	   ,TYPE_BRANCH
	   ,COD_BRANCH
	   ,COD_AFFILIATOR
	   ,NAME_AFFILIATOR
	   ,TYPE_ESTAB
	   ,CREATED_AT
	   ,VW_PAYMENT_DIARY.IS_SPOT
	   ,VW_PAYMENT_DIARY.DIGIT_ACCOUNT
	   ,VW_PAYMENT_DIARY.ACCOUNT_EC
	   ,VW_PAYMENT_DIARY.COD_FIN_SCH_FILE
	   ,VW_PAYMENT_DIARY.BLOCKED_FINANCE
	   ,VW_PAYMENT_DIARY.IS_ASSIGNMENT
	   ,VW_PAYMENT_DIARY.ASSIGNMENT_IDENTIFICATION
	FROM dbo.VW_PAYMENT_DIARY

	UNION ALL

	SELECT
		BRANCH_EC.COD_EC
	   ,EC.CODE
	   ,EC.TRADING_NAME AS EC
	   ,EC.CPF_CNPJ AS CPF_CNPJ_EC
	   ,EC.COD_COMP
	   ,SUM(dbo.TARIFF_EC.value) AS PLOT_VALUE_PAYMENT
	   ,CAST(TARIFF_EC.PAYMENT_DAY AS DATE) AS PREVISION_PAY_DATE
	   ,BANKS.COD_BANK
	   ,ISNULL(BANKS.CODE, 'NÃO CADASTRADO') AS CODE_BANK
	   ,ISNULL(BANKS.NAME, 'NÃO CADASTRADO') AS BANK
	   ,{ FN concat(dbo.BANK_DETAILS_EC.AGENCY, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_AGENCY) }, '')) } AS AGENCY
	   ,{ FN concat(dbo.BANK_DETAILS_EC.ACCOUNT, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_ACCOUNT) }, '')) } AS ACCOUNT
	   ,ACCOUNT_TYPE.NAME AS ACCOUNT_TYPE
	   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
	   ,OPERATION.CODE AS OPERATION_CODE
	   ,SITUATION.NAME AS SITUATION
	   ,SITUATION.COD_SITUATION
	   ,'TARIFA' AS TYPE_RELEASE
	   ,ISNULL(ORIGIN_BANK.STANDARD_BANK, (SELECT
				ORIGIN_BANK.STANDARD_BANK
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS STANDARD_BANK
	   ,ISNULL(ORIGIN_BANK.MIN_TRANSFER_VALUE, (SELECT
				ORIGIN_BANK.MIN_TRANSFER_VALUE
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS MIN_TRANSFER_VALUE
	   ,ISNULL(ORIGIN_BANK.MIN_TED_VALUE, (SELECT
				ORIGIN_BANK.MIN_TED_VALUE
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS MIN_TED_VALUE
	   ,BRANCH_EC.TYPE_BRANCH
	   ,BRANCH_EC.COD_BRANCH
	   ,AFFILIATOR.COD_AFFILIATOR
	   ,AFFILIATOR.NAME AS NAME_AFFILIATOR
	   ,TYPE_ESTAB.CODE AS TYPE_ESTAB
	   ,EC.CREATED_AT
	   ,0 IS_SPOT
	   ,dbo.BANK_DETAILS_EC.DIGIT_ACCOUNT
	   ,dbo.BANK_DETAILS_EC.ACCOUNT AS ACCOUNT_EC
	   ,TARIFF_EC.COD_FIN_SCH_FILE
	   ,CASE
			WHEN AFFILIATOR.COD_SITUATION = 24 THEN 1
			WHEN EC.COD_SITUATION = 24 THEN 1
			ELSE 0
		END BLOCKED_FINANCE
	   ,BANK_DETAILS_EC.IS_ASSIGNMENT
	   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
	FROM dbo.TARIFF_EC
	INNER JOIN dbo.COMMERCIAL_ESTABLISHMENT AS EC
		ON EC.COD_EC = TARIFF_EC.COD_EC
	INNER JOIN dbo.SITUATION
		ON SITUATION.COD_SITUATION = TARIFF_EC.COD_SITUATION
	INNER JOIN dbo.BRANCH_EC
		ON BRANCH_EC.COD_EC = EC.COD_EC
	INNER JOIN dbo.BANK_DETAILS_EC
		ON BANK_DETAILS_EC.COD_EC = EC.COD_EC
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
	LEFT OUTER JOIN dbo.BANKS
		ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
	LEFT OUTER JOIN dbo.ACCOUNT_TYPE
		ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
	LEFT OUTER JOIN dbo.OPERATION_BANK
		ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
	LEFT OUTER JOIN dbo.OPERATION
		ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
	LEFT JOIN ORIGIN_BANK
		ON BANKS.COD_BANK = ORIGIN_BANK.COD_BANK
		AND ACCOUNT_TYPE.COD_TYPE_ACCOUNT = ORIGIN_BANK.COD_TYPE_ACCOUNT
		AND ORIGIN_BANK.ACTIVE = 1
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
	LEFT JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = EC.COD_TYPE_ESTAB
	WHERE (TARIFF_EC.COD_SITUATION IN (4, 17))
	AND (BRANCH_EC.COD_TYPE_REC = 1)
	--AND FORMAT(PAYMENT_DAY, 'MMyyyy')  <= FORMAT(dbo.FN_FUS_UTF(getdate()), 'MMyyyy')
	AND
	--CAST(REPLACE(RIGHT(CONVERT(VARCHAR(10), PAYMENT_DAY , 105), 7), '-','') AS INT) >= CAST(REPLACE(RIGHT(CONVERT(VARCHAR(10), GETDATE() , 105), 7), '-','') AS INT) 
	CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), GETDATE(), 112) AS INT)
	GROUP BY EC.TRADING_NAME
			,EC.CPF_CNPJ
			,EC.COD_COMP
			,CAST(TARIFF_EC.PAYMENT_DAY AS DATE)
			,BANKS.COD_BANK
			,ISNULL(BANKS.CODE, 'NÃO CADASTRADO')
			,ISNULL(BANKS.NAME, 'NÃO CADASTRADO')
			,BANKS.COD_BANK
			,BANKS.CODE
			,BANKS.NAME
			,{ FN concat(dbo.BANK_DETAILS_EC.AGENCY, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_AGENCY) }, '')) }
			,dbo.BANK_DETAILS_EC.ACCOUNT
			,dbo.BANK_DETAILS_EC.DIGIT_ACCOUNT
			,ACCOUNT_TYPE.NAME
			,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			,SITUATION.NAME
			,SITUATION.COD_SITUATION
			,BRANCH_EC.COD_EC
			,OPERATION.CODE
			,EC.CODE
			,ORIGIN_BANK.STANDARD_BANK
			,ORIGIN_BANK.MIN_TRANSFER_VALUE
			,ORIGIN_BANK.MIN_TED_VALUE
			,TYPE_BRANCH
			,BRANCH_EC.COD_BRANCH
			,AFFILIATOR.COD_AFFILIATOR
			,AFFILIATOR.[NAME]
			,EC.CODE
			,EC.CREATED_AT
			,TYPE_ESTAB.CODE
			,dbo.BANK_DETAILS_EC.ACCOUNT
			,TARIFF_EC.COD_FIN_SCH_FILE
			,EC.COD_SITUATION
			,AFFILIATOR.COD_SITUATION
			,BANK_DETAILS_EC.IS_ASSIGNMENT
			,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
			,dbo.TARIFF_EC.PAYMENT_DAY
	UNION ALL

	SELECT
		EC.COD_EC
	   ,EC.CODE
	   ,EC.TRADING_NAME AS EC
	   ,EC.CPF_CNPJ AS CPF_CNPJ_EC
	   ,EC.COD_COMP
	   ,title_lock.AMOUNT AS PLOT_VALUE_PAYMENT
	   ,CAST(TRANSACTION_TITLES.PREVISION_PAY_DATE AS DATE) AS PREVISION_PAY_DATE
	   ,BANKS.COD_BANK
	   ,ISNULL(BANKS.CODE, 'NÃO CADASTRADO') AS CODE_BANK
	   ,ISNULL(BANKS.NAME, 'NÃO CADASTRADO') AS BANK
	   ,{ FN concat(dbo.BANK_DETAILS_EC.AGENCY, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_AGENCY) }, '')) } AS AGENCY
	   ,{ FN concat(dbo.BANK_DETAILS_EC.ACCOUNT, COALESCE({ FN concat('-', dbo.BANK_DETAILS_EC.DIGIT_ACCOUNT) }, '')) } AS ACCOUNT
	   ,ACCOUNT_TYPE.NAME AS ACCOUNT_TYPE
	   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT
	   ,OPERATION.CODE AS OPERATION_CODE
	   ,SITUATION.NAME AS SITUATION
	   ,SITUATION.COD_SITUATION
	   ,'TRAVA' AS TYPE_RELEASE
	   ,ISNULL(ORIGIN_BANK.STANDARD_BANK, (SELECT
				ORIGIN_BANK.STANDARD_BANK
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS STANDARD_BANK
	   ,ISNULL(ORIGIN_BANK.MIN_TRANSFER_VALUE, (SELECT
				ORIGIN_BANK.MIN_TRANSFER_VALUE
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS MIN_TRANSFER_VALUE
	   ,ISNULL(ORIGIN_BANK.MIN_TED_VALUE, (SELECT
				ORIGIN_BANK.MIN_TED_VALUE
			FROM ORIGIN_BANK
			WHERE COD_TYPE_ACCOUNT = ACCOUNT_TYPE.COD_TYPE_ACCOUNT
			AND STANDARD_BANK = 1
			AND ACTIVE = 1)
		) AS MIN_TED_VALUE
	   ,BRANCH_EC.TYPE_BRANCH
	   ,BRANCH_EC.COD_BRANCH
	   ,AFFILIATOR.COD_AFFILIATOR
	   ,AFFILIATOR.NAME AS NAME_AFFILIATOR
	   ,TYPE_ESTAB.CODE AS TYPE_ESTAB
	   ,EC.CREATED_AT
	   ,0 IS_SPOT
	   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
	   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT_EC
	   ,title_lock.COD_FIN_SCH_FILE
	   ,CASE
			WHEN AFFILIATOR.COD_SITUATION = 24 THEN 1
			WHEN EC.COD_SITUATION = 24 THEN 1
			ELSE 0
		END BLOCKED_FINANCE
	   ,BANK_DETAILS_EC.IS_ASSIGNMENT
	   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
	FROM TITLE_LOCK_PAYMENT_DETAILS title_lock (NOLOCK)
	JOIN TRANSACTION_TITLES(NOLOCK)
		ON TRANSACTION_TITLES.COD_TITLE = title_lock.COD_TITLE
	INNER JOIN dbo.BANK_DETAILS_EC
		ON BANK_DETAILS_EC.COD_EC = title_lock.COD_EC
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
	JOIN BANKS(NOLOCK)
		ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
	JOIN COMMERCIAL_ESTABLISHMENT EC (NOLOCK)
		ON EC.COD_EC = title_lock.COD_EC
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_EC = title_lock.COD_EC
	JOIN [TRANSACTION](NOLOCK)
		ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
	JOIN BRAND(NOLOCK)
		ON [TRANSACTION].BRAND = BRAND.[NAME]
		AND [TRANSACTION].COD_TTYPE = BRAND.COD_TTYPE
	JOIN BANK_DETAILS_EC cerc_bank (NOLOCK)
		ON cerc_bank.COD_BK_EC = title_lock.COD_BK_EC
	JOIN BANK_DETAILS_CERC_INFO(NOLOCK)
		ON BANK_DETAILS_CERC_INFO.COD_BK_EC = cerc_bank.COD_BK_EC
		AND BANK_DETAILS_CERC_INFO.COD_BRAND = BRAND.COD_BRAND
		AND BANK_DETAILS_CERC_INFO.COD_SITUATION = 3
	INNER JOIN dbo.SITUATION
		ON SITUATION.COD_SITUATION = title_lock.COD_SITUATION
	LEFT OUTER JOIN dbo.ACCOUNT_TYPE
		ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
	LEFT OUTER JOIN dbo.OPERATION_BANK
		ON OPERATION_BANK.COD_OPER_BANK = BANK_DETAILS_EC.COD_OPER_BANK
	LEFT OUTER JOIN dbo.OPERATION
		ON OPERATION.COD_OPER = OPERATION_BANK.COD_OPER
	LEFT JOIN ORIGIN_BANK
		ON BANKS.COD_BANK = ORIGIN_BANK.COD_BANK
		AND ACCOUNT_TYPE.COD_TYPE_ACCOUNT = ORIGIN_BANK.COD_TYPE_ACCOUNT
		AND ORIGIN_BANK.ACTIVE = 1
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
	LEFT JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = EC.COD_TYPE_ESTAB
	WHERE (title_lock.COD_SITUATION = 4
	AND TRANSACTION_TITLES.COD_SITUATION IN (8, 17))
	OR (title_lock.COD_SITUATION = 17
	AND TRANSACTION_TITLES.COD_SITUATION IN (8, 4)))
SELECT
	CTE_RELEASE_PAYMENTS.COD_EC
   ,CTE_RELEASE_PAYMENTS.CODE
   ,CTE_RELEASE_PAYMENTS.EC
   ,CTE_RELEASE_PAYMENTS.CPF_CNPJ_EC
   ,CTE_RELEASE_PAYMENTS.COD_COMP
   ,SUM(PLOT_VALUE_PAYMENT) AS PLOT_VALUE_PAYMENT
   ,CTE_RELEASE_PAYMENTS.PREVISION_PAY_DATE
   ,CTE_RELEASE_PAYMENTS.COD_BANK
   ,CTE_RELEASE_PAYMENTS.CODE_BANK
   ,CTE_RELEASE_PAYMENTS.BANK
   ,CTE_RELEASE_PAYMENTS.ACCOUNT
   ,CTE_RELEASE_PAYMENTS.AGENCY
   ,CTE_RELEASE_PAYMENTS.OPERATION_CODE
   ,CTE_RELEASE_PAYMENTS.ACCOUNT_TYPE
   ,CTE_RELEASE_PAYMENTS.COD_TYPE_ACCOUNT
   ,CTE_RELEASE_PAYMENTS.SITUATION
   ,CTE_RELEASE_PAYMENTS.COD_SITUATION
   ,CTE_RELEASE_PAYMENTS.STANDARD_BANK
   ,CTE_RELEASE_PAYMENTS.MIN_TRANSFER_VALUE
   ,CTE_RELEASE_PAYMENTS.MIN_TED_VALUE
   ,CTE_RELEASE_PAYMENTS.TYPE_BRANCH
   ,CTE_RELEASE_PAYMENTS.COD_BRANCH
   ,CTE_RELEASE_PAYMENTS.COD_AFFILIATOR
   ,CTE_RELEASE_PAYMENTS.NAME_AFFILIATOR
   ,CTE_RELEASE_PAYMENTS.TYPE_ESTAB
   ,CTE_RELEASE_PAYMENTS.CREATED_AT
   ,CTE_RELEASE_PAYMENTS.IS_SPOT
   ,CTE_RELEASE_PAYMENTS.DIGIT_ACCOUNT
   ,CTE_RELEASE_PAYMENTS.ACCOUNT_EC
   ,CTE_RELEASE_PAYMENTS.COD_FIN_SCH_FILE
   ,CTE_RELEASE_PAYMENTS.BLOCKED_FINANCE
   ,CTE_RELEASE_PAYMENTS.IS_ASSIGNMENT
   ,CTE_RELEASE_PAYMENTS.ASSIGNMENT_IDENTIFICATION
FROM CTE_RELEASE_PAYMENTS
GROUP BY EC
		,CTE_RELEASE_PAYMENTS.CPF_CNPJ_EC
		,CTE_RELEASE_PAYMENTS.COD_COMP
		,CTE_RELEASE_PAYMENTS.PREVISION_PAY_DATE
		,CTE_RELEASE_PAYMENTS.COD_BANK
		,CTE_RELEASE_PAYMENTS.CODE_BANK
		,CTE_RELEASE_PAYMENTS.BANK
		,CTE_RELEASE_PAYMENTS.SITUATION
		,CTE_RELEASE_PAYMENTS.COD_SITUATION
		,CTE_RELEASE_PAYMENTS.COD_EC
		,CTE_RELEASE_PAYMENTS.ACCOUNT
		,CTE_RELEASE_PAYMENTS.ACCOUNT_TYPE
		,CTE_RELEASE_PAYMENTS.COD_TYPE_ACCOUNT
		,CTE_RELEASE_PAYMENTS.AGENCY
		,CTE_RELEASE_PAYMENTS.OPERATION_CODE
		,CTE_RELEASE_PAYMENTS.CODE
		,CTE_RELEASE_PAYMENTS.STANDARD_BANK
		,CTE_RELEASE_PAYMENTS.MIN_TRANSFER_VALUE
		,CTE_RELEASE_PAYMENTS.MIN_TED_VALUE
		,CTE_RELEASE_PAYMENTS.TYPE_BRANCH
		,CTE_RELEASE_PAYMENTS.COD_BRANCH
		,CTE_RELEASE_PAYMENTS.COD_AFFILIATOR
		,CTE_RELEASE_PAYMENTS.NAME_AFFILIATOR
		,CTE_RELEASE_PAYMENTS.TYPE_ESTAB
		,CTE_RELEASE_PAYMENTS.CREATED_AT
		,CTE_RELEASE_PAYMENTS.IS_SPOT
		,CTE_RELEASE_PAYMENTS.DIGIT_ACCOUNT
		,CTE_RELEASE_PAYMENTS.ACCOUNT_EC
		,CTE_RELEASE_PAYMENTS.COD_FIN_SCH_FILE
		,CTE_RELEASE_PAYMENTS.BLOCKED_FINANCE
		,CTE_RELEASE_PAYMENTS.IS_ASSIGNMENT
		,CTE_RELEASE_PAYMENTS.ASSIGNMENT_IDENTIFICATION;



GO
IF OBJECT_ID('SP_UP_TRANSACTION') IS NOT NULL
DROP PROCEDURE [SP_UP_TRANSACTION];

GO
CREATE PROCEDURE [dbo].[SP_UP_TRANSACTION]                                 
/*----------------------------------------------------------------------------------------                                 
Procedure Name: [SP_UP_TRANSACTION]                                 
Project.......: TKPP                                 
------------------------------------------------------------------------------------------                                 
Author   Version  Date   Description                                 
------------------------------------------------------------------------------------------                                 
Kennedy Alef V1   27/07/2018  Creation                        
Lucas Aguiar V2   17-04-2019  rotina de aw. titles e cancelamento                         
Elir Ribeiro V3   12-08-2019  Changed situation Blocked                  
Elir Ribeiro V4   20-08-2019  Changed situation AWAITING PAYMENT           
Marcus Gall  V5   01-02-2020  Changes CONFIRMED, New CANCELED after RELEASED          
Elir Ribeiro v6   27-02-2020  Changes Cod_user
Kennedy Alef v7   11-05-2020  Reprocess financial calendar
------------------------------------------------------------------------------------------*/                                 
(                                 
@CODE_TRAN VARCHAR(200),                                 
@SITUATION VARCHAR(100),                                 
@DESCRIPTION VARCHAR(200) = NULL,                                 
@CURRENCY VARCHAR(100),                                 
@CODE_ERROR VARCHAR(100) = NULL,                              
@TRAN_ID INT   = NULL,            
@LOGICAL_NUMBER_ACQ VARCHAR(100) = NULL ,            
@CARD_HOLDER_NAME VARCHAR(100) = NULL,         
@COD_USER INT = NULL                        
)                                 
AS                                 
DECLARE @QTY INT=0;
  
          
                                
DECLARE @CONT INT;
  
          
                                 
DECLARE @SIT VARCHAR(100);
  
          
                                 
DECLARE @BRANCH INT;
  

DECLARE @COD_EC_TITTLE INT;

DECLARE @DATE_TRAN DATE;
                            
                                
IF @TRAN_ID IS NULL          
 BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.[NAME]
   ,@DATE_TRAN = [TRANSACTION].BRAZILIAN_DATE
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE CODE = @CODE_TRAN;
END;
ELSE
BEGIN
SELECT
	@CONT = COD_TRAN
   ,@SIT = SITUATION.NAME
FROM [TRANSACTION] WITH (NOLOCK)
INNER JOIN SITUATION
	ON SITUATION.COD_SITUATION = [TRANSACTION].COD_SITUATION
WHERE COD_TRAN = @TRAN_ID;
END;

IF @CONT < 1
	OR @CONT IS NULL
THROW 60002, '601', 1;

UPDATE PROCESS_BG_STATUS
SET STATUS_PROCESSED = 0
   ,MODIFY_DATE = GETDATE()
FROM PROCESS_BG_STATUS WITH (NOLOCK)
WHERE CODE = @CONT
AND COD_TYPE_PROCESS_BG = 1;

-- @SITUATION CONDITIONALS          
IF @SITUATION = 'APPROVED'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,1
	   ,'100 - APROVADA';

UPDATE [TRANSACTION]
SET COD_SITUATION = 1
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '100 - APROVADA')
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 100)
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,LOGICAL_NUMBER_ACQ = @LOGICAL_NUMBER_ACQ
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CONFIRMED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '603', 1;

INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,3
	   ,@DESCRIPTION;

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 200)
   ,COMMENT = ISNULL(dbo.[ISNULLOREMPTY](@DESCRIPTION), '200 - CONFIRMADA')
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
--EXECUTE [SP_GEN_TITLES_TRANS] @COD_TRAN = @CODE_TRAN, @TRAN_ID= @TRAN_ID;          

END;
ELSE
IF @SITUATION = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,22
	   ,'206 - AGUARDANDO TITULOS';

--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
UPDATE [TRANSACTION]
SET COD_SITUATION = 22
   ,MODIFY_DATE = GETDATE()
   ,CODE_ERROR = 206
   ,COMMENT = '206 - AGUARDANDO TITULOS'
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'PROCESSING UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,21
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 21
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'UNDONE FAIL'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,23
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 23
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'DENIED ACQUIRER'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                            
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,2
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 2
   ,MODIFY_DATE = GETDATE()
   ,COD_CURRRENCY = (SELECT
			COD_CURRRENCY
		FROM CURRENCY
		WHERE NUM = @CURRENCY)
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
   ,CARD_HOLDER_NAME = @CARD_HOLDER_NAME
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'BLOCKED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,14
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;
IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 14
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;


--- REPROCESS FINANCIAL CALENDAR 

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;


ELSE
IF @SITUATION = 'AWAITING PAYMENT'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,4
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 3
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 4
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 4
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

--- REPROCESS FINANCIAL CALENDAR 

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR

END;
ELSE
IF @SITUATION = 'UNDONE'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,10
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 10
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = @CODE_ERROR
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION]
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
IF @SITUATION = 'FAILED'
BEGIN
--EXEC SP_REG_HIST_TRANSACTION @CODE_TR = @CODE_TRAN;                                 
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,7
	   ,'';

UPDATE [TRANSACTION]
SET COD_SITUATION = 7
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 700)
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT

IF @@rowcount < 1
THROW 60002, '002', 1;
END;
ELSE
IF @SITUATION = 'CANCELED'
BEGIN
IF @SIT = @SITUATION
THROW 60002, '703', 1;
IF @SIT = 'AWAITING TITLES'
BEGIN
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;
END;
ELSE
BEGIN
SELECT
	@QTY = COUNT(*)
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND TRANSACTION_TITLES.COD_SITUATION NOT IN (4, 20);

IF @QTY > 0
THROW 60002, '704', 1;
INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
	SELECT
		@CONT
	   ,@CODE_TRAN
	   ,6
	   ,@DESCRIPTION;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE TRANSACTION_TITLES
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM TRANSACTION_TITLES WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @DATE_TRAN = CAST(dbo.FN_FUS_UTF(GETDATE()) AS DATE)
BEGIN


--- REPROCESS FINANCIAL CALENDAR 

DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;

END;



END;

END;
ELSE
IF @SITUATION = 'CANCELED PARTIAL'
BEGIN
IF @SIT = 'CANCELED'
THROW 60002, '703', 1;

INSERT INTO RELEASE_ADJUSTMENTS (COD_EC, VALUE, PREVISION_PAY_DATE, COD_TYPEJUST, COMMENT, COD_SITUATION, COD_USER, COD_REQ, COD_BRANCH, COD_TRAN, COD_TITLE_REF)
	SELECT
		CAST([TRANSACTION].COD_EC AS INT) AS COD_EC
	   ,(CAST(
		(
		(
		(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END, (TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS DECIMAL(22, 6)) * -1) AS VALUE
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE AS PREVISION_PAY_DATE
	   ,CAST(2 AS INT) AS COD_TYPEJUST
	   ,CAST('CANCELAMENTO PARCIAL, NSU: ' + [TRANSACTION].CODE AS VARCHAR(200)) AS COMMENT
	   ,CAST(4 AS INT) AS COD_SITUATION
	   ,NULL AS CODUSER
	   ,NULL AS COD_REQ
	   ,CAST([COMMERCIAL_ESTABLISHMENT].COD_EC AS INT) AS COD_BRANCH
	   ,CAST([TRANSACTION].COD_TRAN AS INT) AS COD_TRAN
	   ,CAST([TRANSACTION_TITLES].COD_TITLE AS INT) AS COD_TITLE_REF
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	INNER JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
	INNER JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].COD_EC = [TRANSACTION].COD_EC
	WHERE [TRANSACTION].COD_TRAN = @CONT
	AND [TRANSACTION_TITLES].COD_SITUATION = 8;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,CODE_ERROR = ISNULL(@CODE_ERROR, 300)
   ,COD_USER = @COD_USER
FROM [TRANSACTION] WITH (NOLOCK)
WHERE [TRANSACTION].COD_TRAN = @CONT;

IF @@rowcount < 1
THROW 60002, '002', 1;

UPDATE [TRANSACTION_TITLES]
SET TRANSACTION_TITLES.COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
   ,TRANSACTION_TITLES.COD_FIN_CALENDAR = NULL
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES].COD_SITUATION = 4;

UPDATE [TRANSACTION_TITLES_COST]
SET COD_SITUATION = 6
   ,MODIFY_DATE = GETDATE()
   ,COMMENT = @DESCRIPTION
FROM [TRANSACTION_TITLES_COST] WITH (NOLOCK)
INNER JOIN [TRANSACTION_TITLES] WITH (NOLOCK)
	ON [TRANSACTION_TITLES].COD_TITLE = [TRANSACTION_TITLES_COST].COD_TITLE
INNER JOIN [TRANSACTION] WITH (NOLOCK)
	ON [TRANSACTION].COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
WHERE [TRANSACTION].COD_TRAN = @CONT
AND [TRANSACTION_TITLES_COST].COD_SITUATION = 4;


DECLARE _CURSOR CURSOR FOR SELECT DISTINCT
	COD_EC
FROM [TRANSACTION_TITLES] WITH (NOLOCK)
WHERE COD_TRAN = @CONT

OPEN _CURSOR

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE

WHILE @@fetch_status = 0
BEGIN

EXEC SP_PROCESS_FINANCE_RATE @COD_EC_TITTLE

FETCH NEXT FROM _CURSOR INTO @COD_EC_TITTLE


END;

CLOSE _CURSOR
DEALLOCATE _CURSOR;


END;

GO


IF OBJECT_ID('SP_FINANCIAL_CALENDAR_CONCILIATOR_SERVICE') IS NOT NULL
DROP PROCEDURE SP_FINANCIAL_CALENDAR_CONCILIATOR_SERVICE;
GO

CREATE PROCEDURE SP_FINANCIAL_CALENDAR_CONCILIATOR_SERVICE
AS
BEGIN



IF OBJECT_ID(N'tempdb..#TMP_COMPARE2') IS NOT NULL

DROP TABLE #TMP_COMPARE2;

IF OBJECT_ID(N'tempdb..#TMP_REP_RELEASE2') IS NOT NULL
DROP TABLE #TMP_REP_RELEASE2;


IF OBJECT_ID(N'tempdb..#TMP_RETURN_CONCILIATED') IS NOT NULL

DROP TABLE #TMP_RETURN_CONCILIATED;



IF OBJECT_ID(N'tempdb..#TMP_CONFIRMED_CONCILIATED') IS NOT NULL

DROP TABLE #TMP_CONFIRMED_CONCILIATED;


IF OBJECT_ID(N'tempdb..#TMP_CONFIRMED_RELEASES') IS NOT NULL

DROP TABLE #TMP_CONFIRMED_RELEASES

IF OBJECT_ID(N'tempdb..#TITLE_CONC') IS NOT NULL


DROP TABLE #TITLE_CONC

IF OBJECT_ID(N'tempdb..#TMP_FINANCE_CONCILIATED') IS NOT NULL

DROP TABLE #TMP_FINANCE_CONCILIATED

IF OBJECT_ID(N'tempdb..#TMP_PENDING_RELEASES') IS NOT NULL

DROP TABLE #TMP_PENDING_RELEASES


IF OBJECT_ID(N'tempdb..#TMP_PENDING_CONCILIATED') IS NOT NULL

DROP TABLE #TMP_PENDING_CONCILIATED


IF OBJECT_ID(N'tempdb..#TMP_RETURN_CONCILIATED') IS NOT NULL

DROP TABLE #TMP_RETURN_CONCILIATED

IF OBJECT_ID(N'tempdb..#TMP_COMPARE') IS NOT NULL

DROP TABLE #TMP_RETURN_CONCILIATED;

IF OBJECT_ID(N'tempdb..#TMP_REP_RELEASE') IS NOT NULL
DROP TABLE #TMP_REP_RELEASE;




CREATE TABLE #TMP_RETURN_CONCILIATED (
	RECALCULATED_AMOUNT DECIMAL(22, 6)
   ,PROCESSED_AMOUNT DECIMAL(22, 6)
   ,COD_EC INT
   ,CPF_CNPJ VARCHAR(100)
   ,COD_AFF INT
   ,AFFILIATOR VARCHAR(100)
   ,COD_FIN_CALENDAR INT
   ,[TYPE] VARCHAR(100)
   ,PROTOCOL VARCHAR(100)
   ,DATE_REF DATETIME
)



/*

 Financial calendar awaiting payment (cod_situation = 4 )

*/

-- SELECT ALL TITTLES PENDING AGROUP FROM FINANCE_CALENDAR (PROCESSED TABLE) INTO TEMPORARY TABLE
BEGIN
SELECT
	COD_TITLE
   ,CAST(
	(
	(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
	CASE
		WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
		ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
			COALESCE(CASE
				WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
				ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
			END, (TRANSACTION_TITLES.PLOT * 30) - 1)
			) / 100)
	END
	)
	- (CASE
		WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
		ELSE 0
	END)
	AS DECIMAL(22, 6)) AS PLOT_VALUE_PAYMENT
   ,COD_FIN_CALENDAR
   ,COD_SITUATION INTO #TITLE_CONC
FROM TRANSACTION_TITLES
WHERE COD_FIN_CALENDAR IS NOT NULL
AND COD_SITUATION = 4

END

/*
SELECT ALL RELEASE ADJUSTMENTS AND TARIFFS PENDING ACCORDING FINANCE_CALENDAR (PROCESSED TABLE) AND SUM WITH TITTLE VALUES 
TO COMPARE WITH FINANCE_CALENDAR VALUES AFTER
*/
BEGIN
WITH CTE
AS
(SELECT
		SUM([VALUE]) AS AMOUNT
	   ,COD_FIN_CALENDAR
	   ,COD_SITUATION
	   ,'RELEASE' AS TYPE_RELEASE
	FROM RELEASE_ADJUSTMENTS
	WHERE COD_SITUATION = 4
	GROUP BY COD_FIN_CALENDAR
			,COD_SITUATION
	UNION
	SELECT
		SUM([VALUE]) AS AMOUNT
	   ,COD_FIN_CALENDAR
	   ,COD_SITUATION
	   ,'TARIFF' AS TYPE_RELEASE
	FROM TARIFF_EC
	WHERE COD_SITUATION = 4
	AND CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), GETDATE(), 112) AS INT)
	GROUP BY COD_FIN_CALENDAR
			,COD_SITUATION
	UNION
	SELECT
		SUM(PLOT_VALUE_PAYMENT) AS AMOUNT
	   ,COD_FIN_CALENDAR
	   ,COD_SITUATION
	   ,'TITTLE' AS TYPE_RELEASE
	FROM #TITLE_CONC
	GROUP BY COD_FIN_CALENDAR
			,COD_SITUATION)
SELECT
	SUM(CTE.AMOUNT) AS SUM_RELEASES
   ,CTE.COD_FIN_CALENDAR
   ,FINANCE_CALENDAR.PLOT_VALUE_PAYMENT
   ,COD_AFFILIATOR
   ,FINANCE_CALENDAR.AFFILIATOR_NAME
   ,FINANCE_CALENDAR.COD_EC
   ,FINANCE_CALENDAR.EC_CPF_CNPJ INTO #TMP_FINANCE_CONCILIATED
FROM CTE
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_CALENDAR = CTE.COD_FIN_CALENDAR
		AND FINANCE_CALENDAR.ACTIVE = 1
GROUP BY CTE.COD_FIN_CALENDAR
		,FINANCE_CALENDAR.PLOT_VALUE_PAYMENT
		,COD_AFFILIATOR
		,FINANCE_CALENDAR.AFFILIATOR_NAME
		,FINANCE_CALENDAR.COD_EC
		,FINANCE_CALENDAR.EC_CPF_CNPJ

END;


/*
COMPARE SUM_VALUES FROM RELEASES (ADJUSTMENTS, TARIFFS AND TITTLES) WITH CALENDAR VALUES 
ABS  = SHOW ABSOLUT VALUE

*/





INSERT INTO #TMP_RETURN_CONCILIATED (RECALCULATED_AMOUNT,
PROCESSED_AMOUNT,
COD_EC,
CPF_CNPJ,
COD_AFF,
AFFILIATOR,
COD_FIN_CALENDAR,
[TYPE])

	SELECT
		SUM_RELEASES
	   ,PLOT_VALUE_PAYMENT
	   ,COD_EC
	   ,EC_CPF_CNPJ
	   ,COD_AFFILIATOR
	   ,AFFILIATOR_NAME
	   ,COD_FIN_CALENDAR
	   ,'COMPARE SUM_VALUES FROM RELEASES (ADJUSTMENTS, TARIFFS AND TITTLES) WITH CALENDAR VALUES '
	FROM #TMP_FINANCE_CONCILIATED
	WHERE ABS(SUM_RELEASES - PLOT_VALUE_PAYMENT) <> 0



/*

ABOUT PENDING IN FINANCE CALENDAR (SITUATON 17)

*/

BEGIN

WITH CTE
AS
(SELECT
		TRANSACTION_TITLES.COD_TITLE
	   ,TRANSACTION_TITLES.COD_EC
	   ,'TITTLE' AS [TYPE]
	   ,TRANSACTION_TITLES.COD_FIN_SCH_FILE
	   ,(
		(
		(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END, (TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		) AS AMOUNT
	FROM TRANSACTION_TITLES
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TRANSACTION_TITLES.COD_FIN_SCH_FILE
	LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
		ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
	WHERE TRANSACTION_TITLES.COD_SITUATION = 17
	AND TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET IS NULL
	UNION
	SELECT
		RELEASE_ADJUSTMENTS.COD_REL_ADJ
	   ,RELEASE_ADJUSTMENTS.COD_EC
	   ,'ADJUSTMENT' AS [TYPE]
	   ,RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	   ,RELEASE_ADJUSTMENTS.[VALUE] AS AMOUNT
	FROM RELEASE_ADJUSTMENTS
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	WHERE RELEASE_ADJUSTMENTS.COD_SITUATION = 17
	UNION
	SELECT
		TARIFF_EC.COD_TARIFF_EC
	   ,TARIFF_EC.COD_EC
	   ,'TARIFF' AS [TYPE]
	   ,TARIFF_EC.COD_FIN_SCH_FILE
	   ,TARIFF_EC.[VALUE] AS AMOUNT
	FROM TARIFF_EC
	JOIN FINANCE_SCHEDULE_FILE
		ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TARIFF_EC.COD_FIN_SCH_FILE
	WHERE TARIFF_EC.COD_SITUATION = 17
	UNION
	SELECT
		TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_EC
	   ,'TITTLE_LOCK' AS [TYPE]
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_FIN_SCH_FILE
	   ,TITLE_LOCK_PAYMENT_DETAILS.AMOUNT
	FROM TITLE_LOCK_PAYMENT_DETAILS
	JOIN TRANSACTION_TITLES
		ON TRANSACTION_TITLES.COD_TITLE = TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE
	WHERE TITLE_LOCK_PAYMENT_DETAILS.COD_SITUATION = 17
	AND TRANSACTION_TITLES.COD_FIN_SCH_FILE IS NULL)
SELECT

	COD_FIN_SCH_FILE
   ,COD_EC
   ,SUM(AMOUNT) AS AMOUNT INTO #TMP_PENDING_RELEASES
FROM CTE
GROUP BY COD_FIN_SCH_FILE
		,COD_EC

END;

SELECT
	#TMP_PENDING_RELEASES.COD_FIN_SCH_FILE
   ,#TMP_PENDING_RELEASES.AMOUNT AS TMP_VALUES
   ,SUM(FINANCE_CALENDAR.PLOT_VALUE_PAYMENT) AS PROCESSED_VALUES
   ,FINANCE_CALENDAR.COD_FIN_CALENDAR
   ,COD_AFFILIATOR
   ,FINANCE_CALENDAR.AFFILIATOR_NAME
   ,FINANCE_CALENDAR.COD_EC
   ,FINANCE_CALENDAR.EC_CPF_CNPJ INTO #TMP_PENDING_CONCILIATED
FROM #TMP_PENDING_RELEASES
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_FIN_SCH_FILE = #TMP_PENDING_RELEASES.COD_FIN_SCH_FILE
		AND FINANCE_CALENDAR.ACTIVE = 1
GROUP BY #TMP_PENDING_RELEASES.COD_FIN_SCH_FILE
		,#TMP_PENDING_RELEASES.AMOUNT
		,COD_AFFILIATOR
		,FINANCE_CALENDAR.AFFILIATOR_NAME
		,FINANCE_CALENDAR.COD_EC
		,FINANCE_CALENDAR.EC_CPF_CNPJ
		,FINANCE_CALENDAR.COD_FIN_CALENDAR




INSERT INTO #TMP_RETURN_CONCILIATED (RECALCULATED_AMOUNT,
PROCESSED_AMOUNT,
COD_EC,
CPF_CNPJ,
COD_AFF,
AFFILIATOR,
COD_FIN_CALENDAR,
[TYPE])
	SELECT
		TMP_VALUES
	   ,PROCESSED_VALUES
	   ,COD_EC
	   ,EC_CPF_CNPJ
	   ,COD_AFFILIATOR
	   ,AFFILIATOR_NAME
	   ,COD_FIN_CALENDAR
	   ,'ABOUT PENDING IN FINANCE CALENDAR (SITUATON 17)'
	FROM #TMP_PENDING_CONCILIATED
	WHERE ABS(PROCESSED_VALUES - TMP_VALUES) <> 0




-- RESUME
BEGIN
WITH CTE
AS
(SELECT
		(TITLES_VALUE + ADJUSTMENTS_VALUE + TARIFF_VALUE) AS AMOUNT
	   ,COD_FIN_CALENDAR
	FROM FINANCE_RESUME
	WHERE ACTIVE = 1)
INSERT INTO #TMP_RETURN_CONCILIATED (RECALCULATED_AMOUNT,
PROCESSED_AMOUNT,
COD_EC,
CPF_CNPJ,
COD_AFF,
AFFILIATOR,
COD_FIN_CALENDAR,
[TYPE])
	SELECT
		AMOUNT
	   ,FINANCE_CALENDAR.PLOT_VALUE_PAYMENT
	   ,FINANCE_CALENDAR.COD_EC
	   ,FINANCE_CALENDAR.EC_CPF_CNPJ
	   ,COD_AFFILIATOR
	   ,FINANCE_CALENDAR.AFFILIATOR_NAME
	   ,CTE.COD_FIN_CALENDAR
	   ,'COMPARISION BETWEEN RESUME AND FINANCE_CALENDAR'
	FROM CTE
	JOIN FINANCE_CALENDAR
		ON FINANCE_CALENDAR.COD_FIN_CALENDAR = CTE.COD_FIN_CALENDAR
	WHERE ACTIVE = 1
	AND ABS(FINANCE_CALENDAR.PLOT_VALUE_PAYMENT - AMOUNT) <> 0

END;

--- CONFIRMED




BEGIN
WITH CTE
AS
(SELECT
		TRANSACTION_TITLES.COD_TITLE
	   ,TRANSACTION_TITLES.COD_EC
	   ,'TITTLE' AS [TYPE]
	   ,TRANSACTION_TITLES.COD_PAY_PROT
	   ,CAST(

		(
		(
		(TRANSACTION_TITLES.AMOUNT * (1 - (TRANSACTION_TITLES.TAX_INITIAL / 100))) *
		CASE
			WHEN TRANSACTION_TITLES.ANTICIP_PERCENT IS NULL THEN 1
			ELSE 1 - (((TRANSACTION_TITLES.ANTICIP_PERCENT / 30) *
				COALESCE(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END, (TRANSACTION_TITLES.PLOT * 30) - 1)
				) / 100)
		END
		)
		- (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		)
		AS DECIMAL(22, 3))
		AS AMOUNT
	FROM TRANSACTION_TITLES
	--JOIN FINANCE_SCHEDULE_FILE ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TRANSACTION_TITLES.COD_FIN_SCH_FILE
	LEFT JOIN TITLE_LOCK_PAYMENT_DETAILS
		ON TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
	WHERE TRANSACTION_TITLES.COD_SITUATION = 8
	AND TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET IS NULL
	--AND TRANSACTION_TITLES.COD_PAY_PROT=10907
	UNION
	SELECT
		RELEASE_ADJUSTMENTS.COD_REL_ADJ
	   ,RELEASE_ADJUSTMENTS.COD_EC
	   ,'ADJUSTMENT' AS [TYPE]
	   ,RELEASE_ADJUSTMENTS.COD_PAY_PROT
	   ,RELEASE_ADJUSTMENTS.[VALUE] AS AMOUNT
	FROM RELEASE_ADJUSTMENTS
	--JOIN FINANCE_SCHEDULE_FILE ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = RELEASE_ADJUSTMENTS.COD_FIN_SCH_FILE
	WHERE RELEASE_ADJUSTMENTS.COD_SITUATION = 8
	--AND COD_PAY_PROT=10907

	UNION
	SELECT
		TARIFF_EC.COD_TARIFF_EC
	   ,TARIFF_EC.COD_EC
	   ,'TARIFF' AS [TYPE]
	   ,TARIFF_EC.COD_PAY_PROT
	   ,TARIFF_EC.[VALUE] AS AMOUNT
	FROM TARIFF_EC
	--JOIN FINANCE_SCHEDULE_FILE ON FINANCE_SCHEDULE_FILE.COD_FIN_SCH_FILE = TARIFF_EC.COD_FIN_SCH_FILE
	WHERE TARIFF_EC.COD_SITUATION = 8
	--AND COD_PAY_PROT=10907

	UNION
	SELECT
		TITLE_LOCK_PAYMENT_DETAILS.COD_LK_PAY_DET
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_EC
	   ,'TITTLE_LOCK' AS [TYPE]
	   ,TITLE_LOCK_PAYMENT_DETAILS.COD_PAY_PROT
	   ,TITLE_LOCK_PAYMENT_DETAILS.AMOUNT
	FROM TITLE_LOCK_PAYMENT_DETAILS
	JOIN TRANSACTION_TITLES
		ON TRANSACTION_TITLES.COD_TITLE = TITLE_LOCK_PAYMENT_DETAILS.COD_TITLE
	WHERE TITLE_LOCK_PAYMENT_DETAILS.COD_SITUATION = 8
--AND TITLE_LOCK_PAYMENT_DETAILS.COD_PAY_PROT=10907


)
SELECT

	--COD_FIN_SCH_FILE,
	COD_EC
   ,COD_PAY_PROT
   ,(SUM(AMOUNT)) AS AMOUNT INTO #TMP_CONFIRMED_RELEASES
FROM CTE
--WHERE [TYPE] = 'TITTLE'
GROUP BY
--COD_FIN_SCH_FILE,
 COD_EC
,COD_PAY_PROT


END;




SELECT
	#TMP_CONFIRMED_RELEASES.COD_PAY_PROT
   ,#TMP_CONFIRMED_RELEASES.AMOUNT AS TMP_VALUES
   ,SUM(FINANCE_CALENDAR.PLOT_VALUE_PAYMENT) AS PROCESSED_VALUES INTO #TMP_CONFIRMED_CONCILIATED
FROM #TMP_CONFIRMED_RELEASES
JOIN FINANCE_CALENDAR
	ON FINANCE_CALENDAR.COD_PAY_PROT = #TMP_CONFIRMED_RELEASES.COD_PAY_PROT
		AND FINANCE_CALENDAR.ACTIVE = 1
GROUP BY #TMP_CONFIRMED_RELEASES.COD_PAY_PROT
		,#TMP_CONFIRMED_RELEASES.AMOUNT

-- PAYMENTS WITH DIFFENCENTE BETWEEN PROTOCOL AND DETAILS

INSERT INTO #TMP_RETURN_CONCILIATED (RECALCULATED_AMOUNT,
PROCESSED_AMOUNT,
COD_EC,
CPF_CNPJ,
COD_AFF,
AFFILIATOR,
COD_FIN_CALENDAR,
[TYPE],
PROTOCOL)
	SELECT
		#TMP_CONFIRMED_CONCILIATED.TMP_VALUES
	   ,#TMP_CONFIRMED_CONCILIATED.PROCESSED_VALUES
	   ,FINANCE_CALENDAR.COD_EC
	   ,FINANCE_CALENDAR.EC_CPF_CNPJ
	   ,FINANCE_CALENDAR.COD_AFFILIATOR
	   ,FINANCE_CALENDAR.AFFILIATOR_NAME
	   ,FINANCE_CALENDAR.COD_FIN_CALENDAR
	   ,'PAYMENT MADE'
	   ,PROTOCOLS.PROTOCOL
	FROM #TMP_CONFIRMED_CONCILIATED
	JOIN PROTOCOLS
		ON PROTOCOLS.COD_PAY_PROT = #TMP_CONFIRMED_CONCILIATED.COD_PAY_PROT
	JOIN FINANCE_CALENDAR
		ON FINANCE_CALENDAR.COD_PAY_PROT = PROTOCOLS.COD_PAY_PROT
			AND FINANCE_CALENDAR.ACTIVE = 1
	WHERE ABS(PROCESSED_VALUES - TMP_VALUES) > 0.1
	AND PROTOCOLS.CREATED_AT > '2019-01-01 00:00:00'

-- SELECT ALL DATA FROM REP_RELEASE_EC IN TEMPORARY TABLE 

--drop table #TMP_COMPARE
--drop table #TMP_REP_RELEASE



SELECT
	* INTO #TMP_REP_RELEASE
FROM [VW_REP_RELEASES_EC_COMPARE]
WHERE COD_SITUATION = 4


-- GENERATE GROUP BY EC AND PREVISION_PAYMENT

SELECT
	COD_EC
   ,CASE
		WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
		ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
	END
	AS PREVISION_PAY_DATE
   ,SUM(PLOT_VALUE_PAYMENT) AS AMOUNT INTO #TMP_COMPARE
FROM #TMP_REP_RELEASE
GROUP BY COD_EC
		,CASE
			 WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
			 ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
		 END



--- Compare incorrect data
BEGIN

WITH CTE
AS
(SELECT
		COD_EC
	   ,FINANCE_CALENDAR.COD_AFFILIATOR
	   ,FINANCE_CALENDAR.EC_CPF_CNPJ
	   ,FINANCE_CALENDAR.AFFILIATOR_NAME
	   ,CASE
			WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
			ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
		END
		AS PREVISION_PAY_DATE
	   ,SUM(PLOT_VALUE_PAYMENT) AS AMOUNT
	FROM FINANCE_CALENDAR
	WHERE FINANCE_CALENDAR.COD_SITUATION = 4
	AND FINANCE_CALENDAR.ACTIVE = 1
	GROUP BY COD_EC
			,CASE
				 WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
				 ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
			 END
			,FINANCE_CALENDAR.COD_AFFILIATOR
			,FINANCE_CALENDAR.EC_CPF_CNPJ
			,FINANCE_CALENDAR.AFFILIATOR_NAME)

INSERT INTO #TMP_RETURN_CONCILIATED (RECALCULATED_AMOUNT,
PROCESSED_AMOUNT,
COD_EC,
CPF_CNPJ,
COD_AFF,
AFFILIATOR,
DATE_REF,
[TYPE])

	SELECT
		CTE.AMOUNT
	   ,#TMP_COMPARE.AMOUNT
	   ,CTE.COD_EC
	   ,CTE.EC_CPF_CNPJ
	   ,CTE.COD_AFFILIATOR
	   ,CTE.AFFILIATOR_NAME
	   ,CTE.PREVISION_PAY_DATE
	   ,'COMPARISION MONTHLY VALUES FROM RELEASES AND FINANCIAL PROCESSED'
	FROM CTE
	JOIN #TMP_COMPARE
		ON #TMP_COMPARE.COD_EC = CTE.COD_EC
			AND #TMP_COMPARE.PREVISION_PAY_DATE = CTE.PREVISION_PAY_DATE

	WHERE (CAST(CTE.AMOUNT AS DECIMAL(22, 2)) - CAST(#TMP_COMPARE.AMOUNT AS DECIMAL(22, 2))) < 0
	OR (CAST(CTE.AMOUNT AS DECIMAL(22, 2)) - CAST(#TMP_COMPARE.AMOUNT AS DECIMAL(22, 2))) > 0
	ORDER BY 1

END;

-- COMPARE VALUES PROCESSED X REAL 


SELECT
	* INTO #TMP_REP_RELEASE2
FROM [VW_REP_RELEASES_EC_COMPARE]
WHERE COD_SITUATION = 4


-- GENERATE GROUP BY EC AND PREVISION_PAYMENT

SELECT
	COD_EC
   ,CASE
		WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
		ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
	END
	AS PREVISION_PAY_DATE
   ,SUM(PLOT_VALUE_PAYMENT) AS AMOUNT INTO #TMP_COMPARE2
FROM #TMP_REP_RELEASE2
GROUP BY COD_EC
		,CASE
			 WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
			 ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
		 END



--- Compare incorrect data
BEGIN

WITH CTE
AS
(SELECT
		COD_EC
	   ,FINANCE_CALENDAR.COD_AFFILIATOR
	   ,FINANCE_CALENDAR.EC_CPF_CNPJ
	   ,FINANCE_CALENDAR.AFFILIATOR_NAME
	   ,CASE
			WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
			ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
		END
		AS PREVISION_PAY_DATE
	   ,SUM(PLOT_VALUE_PAYMENT) AS AMOUNT
	FROM FINANCE_CALENDAR
	WHERE FINANCE_CALENDAR.COD_SITUATION = 4
	AND FINANCE_CALENDAR.ACTIVE = 1
	GROUP BY COD_EC
			,CASE
				 WHEN PREVISION_PAY_DATE > dbo.FN_FUS_UTF(GETDATE()) THEN FORMAT(PREVISION_PAY_DATE, 'MM-yyyy')
				 ELSE FORMAT(dbo.FN_FUS_UTF(GETDATE()), 'MM-yyyy')
			 END
			,FINANCE_CALENDAR.COD_AFFILIATOR
			,FINANCE_CALENDAR.EC_CPF_CNPJ
			,FINANCE_CALENDAR.AFFILIATOR_NAME)

INSERT INTO #TMP_RETURN_CONCILIATED (RECALCULATED_AMOUNT,
PROCESSED_AMOUNT,
COD_EC,
CPF_CNPJ,
COD_AFF,
AFFILIATOR,
DATE_REF,
[TYPE])

	SELECT
		CTE.AMOUNT
	   ,#TMP_COMPARE2.AMOUNT
	   ,CTE.COD_EC
	   ,CTE.EC_CPF_CNPJ
	   ,CTE.COD_AFFILIATOR
	   ,CTE.AFFILIATOR_NAME
	   ,CTE.PREVISION_PAY_DATE
	   ,'COMPARISION MONTHLY VALUES FROM RELEASES AND FINANCIAL PROCESSED'
	FROM CTE
	JOIN #TMP_COMPARE2
		ON #TMP_COMPARE2.COD_EC = CTE.COD_EC
			AND #TMP_COMPARE2.PREVISION_PAY_DATE = CTE.PREVISION_PAY_DATE

	WHERE (CAST(CTE.AMOUNT AS DECIMAL(22, 2)) - CAST(#TMP_COMPARE2.AMOUNT AS DECIMAL(22, 2))) < 0
	OR (CAST(CTE.AMOUNT AS DECIMAL(22, 2)) - CAST(#TMP_COMPARE2.AMOUNT AS DECIMAL(22, 2))) > 0
	ORDER BY 1


END;



SELECT
	*
FROM #TMP_RETURN_CONCILIATED

END;