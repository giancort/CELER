IF OBJECT_ID('TABLE_LOAD_PRCS') IS NOT NULL
DROP TABLE TABLE_LOAD_PRCS;
GO
  

CREATE TABLE TABLE_LOAD_PRCS
(
COD_TABLE_LOAD INT IDENTITY,
CREATED_AT DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()) ,
ACQUIRER_NAME VARCHAR(100),
PRODUCT_ID INT,
PRODUCT_NAME VARCHAR(100),
PRODUCT_EXT_CODE VARCHAR(100),
TRAN_TYPE INT,
TRAN_TYPE_NAME VARCHAR(100),
CODE_EC_ACQ INT,
BRAND VARCHAR(100),
CONF_TYPE INT,
IS_SIMULATED INT,
DATE_PLAN DATETIME,
COD_EQUIP INT,
CONSTRAINT PK_TABLE_LOAD_PRCS PRIMARY KEY(COD_TABLE_LOAD),
CONSTRAINT FK_EQUIP_TABLE_LOAD_PRCS FOREIGN KEY(COD_EQUIP) REFERENCES EQUIPMENT(COD_EQUIP)
)
GO

IF OBJECT_ID('SP_LOAD_TABLES_EQUIP_PRCS') IS NOT NULL
DROP PROCEDURE SP_LOAD_TABLES_EQUIP_PRCS;
GO
  

CREATE PROCEDURE SP_LOAD_TABLES_EQUIP_PRCS
(
@TERMINAL_ID INT
)
AS
BEGIN

SELECT
	ACQUIRER_NAME
   ,PRODUCT_ID
   ,PRODUCT_NAME
   ,PRODUCT_EXT_CODE
   ,TRAN_TYPE
   ,TRAN_TYPE_NAME
   ,CODE_EC_ACQ
   ,BRAND
   ,CONF_TYPE
   ,IS_SIMULATED
   ,(CASE
		WHEN dbo.FN_FUS_UTF(DATE_PLAN) > CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME) THEN dbo.FN_FUS_UTF(DATE_PLAN)
		ELSE CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME)
	END) DATE_PLAN
   ,COD_EQUIP
FROM TABLE_LOAD_PRCS
WHERE COD_EQUIP = @TERMINAL_ID

END
GO

IF OBJECT_ID('SP_LOAD_TABLES_EQUIP_REGISTER') IS NOT NULL
DROP PROCEDURE [SP_LOAD_TABLES_EQUIP_REGISTER];
GO
  
CREATE PROCEDURE [DBO].[SP_LOAD_TABLES_EQUIP_REGISTER] (@TERMINALID INT)                             
AS                             
BEGIN

DELETE FROM TABLE_LOAD_PRCS
WHERE COD_EQUIP = @TERMINALID

BEGIN


DECLARE @COD_EC INT
	   ,@COD_AFF INT
	   ,@COD_SUB INT
	   ,@DATE_PLAN DATETIME
	   ,@EQUIP_MODEL VARCHAR(100)
	   ,@TODAY DATETIME = CAST(CONVERT(VARCHAR, GETDATE(), 101) AS DATETIME)
	   ,@COD_DPTO_TERM INT;
--@TERMINALID INT = 19886;      

WITH CTE_DATA
AS
(SELECT
		ISNULL(CE.COD_AFFILIATOR, 0) AS COD_AFFILIATOR
	   ,E.COD_COMP
	   ,BE.COD_EC
	   ,MAX(ATD.CREATED_AT) AS DATE_PLAN
	   ,E.COD_MODEL
	   ,ADE.COD_ASS_DEPTO_TERMINAL
	FROM ASS_DEPTO_EQUIP ADE
	JOIN EQUIPMENT E
		ON E.COD_EQUIP = ADE.COD_EQUIP
		AND E.ACTIVE = 1
	JOIN DEPARTMENTS_BRANCH DB
		ON DB.COD_DEPTO_BRANCH = ADE.COD_DEPTO_BRANCH
	JOIN BRANCH_EC BE
		ON BE.COD_BRANCH = DB.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT CE
		ON BE.COD_EC = CE.COD_EC
	JOIN ASS_TAX_DEPART ATD
		ON DB.COD_DEPTO_BRANCH = ATD.COD_DEPTO_BRANCH
		AND ATD.ACTIVE = 1
	WHERE ADE.COD_EQUIP = @TERMINALID
	AND ADE.ACTIVE = 1
	GROUP BY E.COD_COMP
			,ISNULL(CE.COD_AFFILIATOR, 0)
			,BE.COD_EC
			,E.COD_EQUIP
			,E.COD_MODEL
			,ADE.COD_ASS_DEPTO_TERMINAL)
SELECT
	@COD_AFF = COD_AFFILIATOR
   ,@COD_SUB = COD_COMP
   ,@COD_EC = COD_EC
   ,@DATE_PLAN = IIF(DATE_PLAN > @TODAY, DATE_PLAN, @TODAY)
   ,@EQUIP_MODEL = COD_MODEL
   ,@COD_DPTO_TERM = COD_ASS_DEPTO_TERMINAL
FROM CTE_DATA;

SELECT
	COD_BRAND INTO #BRAND_EQP
FROM ROUTE_ACQUIRER
WHERE COD_EQUIP = @TERMINALID
AND ACTIVE = 1
AND COD_SOURCE_TRAN = 2

SELECT
	RA.COD_BRAND INTO #BRAND_EC
FROM ROUTE_ACQUIRER RA
LEFT JOIN #BRAND_EQP EQP
	ON EQP.COD_BRAND = RA.COD_BRAND
WHERE RA.COD_EC = @COD_EC
AND RA.ACTIVE = 1
AND EQP.COD_BRAND IS NULL

SELECT
	RA.COD_BRAND INTO #BRAND_AFF
FROM ROUTE_ACQUIRER RA
LEFT JOIN #BRAND_EQP EQP
	ON EQP.COD_BRAND = RA.COD_BRAND
LEFT JOIN #BRAND_EC EC
	ON EC.COD_BRAND = RA.COD_BRAND
WHERE RA.COD_AFFILIATOR = @COD_AFF
AND RA.ACTIVE = 1
AND EQP.COD_BRAND IS NULL
AND EC.COD_BRAND IS NULL

SELECT
	RA.COD_BRAND INTO #BRAND_SUB
FROM ROUTE_ACQUIRER RA
LEFT JOIN #BRAND_EQP EQP
	ON EQP.COD_BRAND = RA.COD_BRAND
LEFT JOIN #BRAND_EC EC
	ON EC.COD_BRAND = RA.COD_BRAND
LEFT JOIN #BRAND_AFF AF
	ON AF.COD_BRAND = RA.COD_BRAND
WHERE RA.COD_COMP = @COD_SUB
AND RA.ACTIVE = 1
AND EQP.COD_BRAND IS NULL
AND EC.COD_BRAND IS NULL
AND AF.COD_BRAND IS NULL

CREATE TABLE #ROUTES_TERMINAL (
	ACQUIRER_NAME VARCHAR(128)
   ,PRODUCT_ID INT
   ,PRODUCT_NAME VARCHAR(64)
   ,PRODUCT_EXT_CODE VARCHAR(64)
   ,TRAN_TYPE INT
   ,TRAN_TYPE_NAME VARCHAR(32)
   ,CODE_EC_ACQ VARCHAR(10)
   ,BRAND VARCHAR(64)
   ,CONF_TYPE INT
   ,IS_SIMULATED INT
   ,DATE_PLAN DATETIME
   ,COD_AC INT
   ,COD_BRAND INT
   ,DEBIT INT
   ,CREDIT INT
   ,CREDIT_INSTALLMENTS INT
   ,CLIENT_INSTALLMENT INT
   ,CLIENT_DEBIT INT
   ,CLIENT_CREDIT INT
   ,ONLINE INT
   ,PRESENTIAL INT
   ,RATE_FREE INT
)

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_SUB CTE_SUB
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = CTE_SUB.COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_COMP = @COD_SUB
			AND RA.CONF_TYPE = 4
	INNER JOIN BRAND B
		ON B.COD_BRAND = CTE_SUB.COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = CTE_SUB.COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_AFF CTE_AFF
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = CTE_AFF.COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_AFFILIATOR = @COD_AFF
			AND RA.CONF_TYPE = 3
	INNER JOIN BRAND B
		ON B.COD_BRAND = CTE_AFF.COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = CTE_AFF.COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_EC [CTE_EC]
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = [CTE_EC].COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_EC = @COD_EC
			AND RA.CONF_TYPE = 2
	INNER JOIN BRAND B
		ON B.COD_BRAND = [CTE_EC].COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = [CTE_EC].COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1

INSERT INTO #ROUTES_TERMINAL (ACQUIRER_NAME, PRODUCT_ID, PRODUCT_NAME, PRODUCT_EXT_CODE, TRAN_TYPE, TRAN_TYPE_NAME, CODE_EC_ACQ, BRAND, CONF_TYPE, IS_SIMULATED, DATE_PLAN, COD_AC, COD_BRAND, DEBIT, CREDIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_DEBIT, CLIENT_CREDIT, ONLINE, PRESENTIAL, RATE_FREE)
	SELECT
		ACQUIRER.[GROUP] AS ACQUIRER_NAME
	   ,PA.COD_PR_ACQ AS PRODUCT_ID
	   ,PA.NAME AS PRODUCT_NAME
	   ,PA.EXTERNALCODE AS PRODUCT_EXT_CODE
	   ,[TT].COD_TTYPE AS TRAN_TYPE
	   ,[TT].NAME AS TRAN_TYPE_NAME
	   ,'0' AS CODE_EC_ACQ
	   ,B.NAME AS BRAND
	   ,RA.CONF_TYPE
	   ,PA.IS_SIMULATED
	   ,@DATE_PLAN AS DATE_PLAN
	   ,PA.COD_AC
	   ,B.COD_BRAND
	   ,IIF(PA.COD_TTYPE = 2 AND PA.IS_SIMULATED != 1, 1, NULL) DEBIT
	   ,IIF(PA.COD_TTYPE = 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT
	   ,IIF(PA.PLOT_VALUE > 1 AND PA.IS_SIMULATED != 1, 1, NULL) CREDIT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE > 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_INSTALLMENTS
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 2, 1, NULL) CLIENT_DEBIT
	   ,IIF(PA.IS_SIMULATED = 1 AND PLOT_VALUE = 1 AND PA.COD_TTYPE = 1, 1, NULL) CLIENT_CREDIT
	   ,IIF(PA.COD_SOURCE_TRAN = 1, 1, NULL) ONLINE
	   ,IIF(PA.COD_SOURCE_TRAN = 2, 1, NULL) PRESENTIAL
	   ,IIF(CHARINDEX('SEM JUROS', PA.NAME) > 0, 1, NULL) RATE_FREE
	FROM #BRAND_EQP [CTE_EQUIP]
	INNER JOIN ROUTE_ACQUIRER RA
		ON RA.COD_BRAND = [CTE_EQUIP].COD_BRAND
			AND RA.ACTIVE = 1
			AND RA.COD_SOURCE_TRAN = 2
			AND RA.COD_EQUIP = @TERMINALID
			AND RA.CONF_TYPE = 1
	INNER JOIN BRAND B
		ON B.COD_BRAND = [CTE_EQUIP].COD_BRAND
	INNER JOIN [TRANSACTION_TYPE] TT
		ON [TT].COD_TTYPE = B.COD_TTYPE
	INNER JOIN ACQUIRER
		ON ACQUIRER.COD_AC = RA.COD_AC
	INNER JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_BRAND = [CTE_EQUIP].COD_BRAND
			AND PA.COD_AC = RA.COD_AC
			AND PA.COD_SOURCE_TRAN = 2
			AND PA.VISIBLE = 1



CREATE TABLE #TERMINAL_FILTER (
	COD_AC INT
   ,COD_MODEL INT
   ,COD_BRAND INT
   ,ONLINE INT
   ,PRESENTIAL INT
   ,CREDIT INT
   ,DEBIT INT
   ,CREDIT_INSTALLMENTS INT
   ,CLIENT_INSTALLMENT INT
   ,CLIENT_CREDIT INT
   ,CLIENT_DEBIT INT
   ,RATE_FREE INT
)



IF EXISTS (SELECT
			COD_PRD_ACQ_FILTER
		FROM PRODUCT_ACQUIRE_FILTER
		WHERE COD_ASS_DEPTO_TERMINAL = @COD_DPTO_TERM)
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_ASS_DEPTO_TERMINAL = @COD_DPTO_TERM
END
ELSE
IF EXISTS (SELECT
			COD_PRD_ACQ_FILTER
		FROM PRODUCT_ACQUIRE_FILTER
		WHERE COD_EC = @COD_EC)
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_EC = @COD_EC
END
ELSE
IF EXISTS (SELECT
			COD_PRD_ACQ_FILTER
		FROM PRODUCT_ACQUIRE_FILTER
		WHERE COD_AFFILIATOR = @COD_AFF)
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_AFFILIATOR = @COD_AFF
END
ELSE
BEGIN
INSERT INTO #TERMINAL_FILTER (COD_AC, COD_MODEL, COD_BRAND, ONLINE, PRESENTIAL, CREDIT, DEBIT, CREDIT_INSTALLMENTS, CLIENT_INSTALLMENT, CLIENT_CREDIT, CLIENT_DEBIT, RATE_FREE)
	SELECT
		COD_AC
	   ,COD_MODEL
	   ,COD_BRAND
	   ,ONLINE
	   ,PRESENTIAL
	   ,CREDIT
	   ,DEBIT
	   ,CREDIT_INSTALLMENTS
	   ,CLIENT_INSTALLMENT
	   ,CLIENT_CREDIT
	   ,CLIENT_DEBIT
	   ,RATE_FREE
	FROM PRODUCT_ACQUIRE_FILTER
	WHERE COD_AFFILIATOR IS NULL
	AND COD_EC IS NULL
	AND COD_ASS_DEPTO_TERMINAL IS NULL
END

DELETE RT
	FROM #ROUTES_TERMINAL RT
	JOIN #TERMINAL_FILTER PAF
		ON (PAF.COD_AC IS NULL
		OR PAF.COD_AC = RT.COD_AC)
		AND (PAF.COD_MODEL IS NULL
		OR PAF.COD_MODEL = @EQUIP_MODEL)
		AND (PAF.COD_BRAND IS NULL
		OR PAF.COD_BRAND = RT.COD_BRAND)
		AND (
		PAF.ONLINE = RT.ONLINE
		OR PAF.PRESENTIAL = RT.PRESENTIAL
		OR PAF.CREDIT = RT.CREDIT
		OR PAF.DEBIT = RT.DEBIT
		OR PAF.CREDIT_INSTALLMENTS = RT.CREDIT_INSTALLMENTS
		OR PAF.CLIENT_INSTALLMENT = RT.CLIENT_INSTALLMENT
		OR PAF.CLIENT_CREDIT = RT.CLIENT_CREDIT
		OR PAF.CLIENT_DEBIT = RT.CLIENT_DEBIT
		OR PAF.RATE_FREE = RT.RATE_FREE
		)

SELECT
	ACQUIRER_NAME
   ,PRODUCT_ID
   ,PRODUCT_NAME
   ,PRODUCT_EXT_CODE
   ,TRAN_TYPE
   ,TRAN_TYPE_NAME
   ,CODE_EC_ACQ
   ,BRAND
   ,CONF_TYPE
   ,IS_SIMULATED
   ,DATE_PLAN INTO #ROUTE_TO_REGISTER
FROM #ROUTES_TERMINAL

INSERT INTO TABLE_LOAD_PRCS (ACQUIRER_NAME
, PRODUCT_ID
, PRODUCT_NAME
, PRODUCT_EXT_CODE
, TRAN_TYPE
, TRAN_TYPE_NAME
, CODE_EC_ACQ
, BRAND
, CONF_TYPE
, IS_SIMULATED
, DATE_PLAN
, COD_EQUIP)
	SELECT
		*
	   ,@TERMINALID
	FROM #ROUTE_TO_REGISTER
END;
END;

GO


IF OBJECT_ID('SP_UP_DATA_PLAN_TABLE_LOAD') IS NOT NULL
DROP PROCEDURE SP_UP_DATA_PLAN_TABLE_LOAD;
GO
  

CREATE PROCEDURE SP_UP_DATA_PLAN_TABLE_LOAD
(
@COD_DEPTO_BR INT 
)
AS
BEGIN

UPDATE TABLE_LOAD_PRCS
SET DATE_PLAN = GETDATE()
WHERE COD_EQUIP IN (SELECT
		COD_EQUIP
	FROM VW_COMPANY_EC_AFF_BR_DEP_EQUIP
	WHERE COD_DEPTO_BR = @COD_DEPTO_BR)

END;





GO

IF OBJECT_ID('SP_UP_DISABLE_ROUTE_EQUIP') IS NOT NULL
DROP PROCEDURE [SP_UP_DISABLE_ROUTE_EQUIP];
GO

CREATE PROCEDURE [dbo].[SP_UP_DISABLE_ROUTE_EQUIP]  
(  
 @COD_COMP INT,  
 @COD_EQUIP INT,  
 @COD_USER INT  
)  
AS  
BEGIN
UPDATE ROUTE_ACQUIRER_HIST
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER
WHERE COD_EQUIP = @COD_EQUIP
AND ACTIVE = 1
AND CONF_TYPE = 1
AND COD_SOURCE_TRAN = 2

DELETE FROM ROUTE_ACQUIRER
WHERE COD_EQUIP = @COD_EQUIP
	AND ACTIVE = 1
	AND CONF_TYPE = 1
	AND COD_SOURCE_TRAN = 2

EXEC SP_LOAD_TABLES_EQUIP_REGISTER @COD_EQUIP



END

GO


IF NOT EXISTS (SELECT
		1
	FROM sys.indexes
	WHERE object_id = OBJECT_ID('CUSTOMIZED_UNAVAILABLE_PRODUCTS')
	AND name = 'IX_CUST_PRD_UNAVA_PRD_UNIT')
BEGIN
CREATE NONCLUSTERED INDEX [IX_CUST_PRD_UNAVA_PRD_UNIT]
ON [dbo].[CUSTOMIZED_UNAVAILABLE_PRODUCTS] ([COD_PR_UN_EC])
INCLUDE ([COD_PR_ACQ], [COD_MODEL])
END

GO

IF OBJECT_ID('SP_ADD_TAX_DEPTO') IS NOT NULL
DROP PROCEDURE [SP_ADD_TAX_DEPTO];
GO
 

CREATE PROCEDURE [dbo].[SP_ADD_TAX_DEPTO]  
/*----------------------------------------------------------------------------------------          
 Procedure Name: [SP_DISABLE_TX_DEPTO_PLAN]          
 Project.......: TKPP          
 ------------------------------------------------------------------------------------------          
 Author                          VERSION         Date                            Description          
 ------------------------------------------------------------------------------------------          
 Luiz Aquino                     V1              05/02/2019                      Add Cod Plan Affiliated          
 ------------------------------------------------------------------------------------------*/  
(  
    @COD_TTYPE INT,  
    @QTY_INI_PLOTS INT,  
    @QTY_FINAL_PLOTS INT,  
    @PARCENTAGE DECIMAL(22, 6),  
    @RATE DECIMAL(22, 6),  
    @INTERVAL INT,  
    @COD_DEPTO_BRANCH INT,  
    @CODUSER INT,  
    @ANTICIPATION DECIMAL(22, 6),  
    @PERCENTAGE_EFFECTIVE DECIMAL(22, 6),  
    @COD_PLAN INT,  
    @COD_BRAND INT = NULL,  
    @COD_TAX_TYPE INT = 2,  
    @COD_PLAN_AFFILIATED INT = NULL,  
 @COD_MODEL int = null   
) AS DECLARE @QTD INT;
  
  
DECLARE @COD_AFFILIATED INT;
  
  
DECLARE @PERCENTAGE_VALID DECIMAL(22, 6);
  
  
DECLARE @RATE_VALID DECIMAL(22, 6);
  
  
DECLARE @ANTECIP_VALID DECIMAL(22, 6);
  
  
BEGIN
SELECT
TOP 1
	@COD_AFFILIATED = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
FROM DEPARTMENTS_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
WHERE DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
IF @COD_PLAN_AFFILIATED IS NULL
	AND @COD_AFFILIATED IS NOT NULL
SELECT
TOP 1
	@COD_PLAN_AFFILIATED = PLAN_TAX_AFFILIATOR.COD_PLAN
FROM PLAN_TAX_AFFILIATOR
WHERE PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATED
AND ACTIVE = 1
IF @COD_AFFILIATED IS NOT NULL
BEGIN
SELECT
	@PERCENTAGE_VALID = (@PARCENTAGE - PLAN_TAX_AFFILIATOR.[PERCENTAGE])
   ,@RATE_VALID = (@RATE - PLAN_TAX_AFFILIATOR.RATE)
   ,@ANTECIP_VALID = (
	@ANTICIPATION - PLAN_TAX_AFFILIATOR.ANTICIPATION_PERCENTAGE
	)
FROM PLAN_TAX_AFFILIATOR
WHERE PLAN_TAX_AFFILIATOR.COD_TTYPE = @COD_TTYPE
AND (
PLAN_TAX_AFFILIATOR.COD_BRAND = @COD_BRAND
OR PLAN_TAX_AFFILIATOR.COD_BRAND IS NULL
)
AND PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = @COD_TAX_TYPE
AND @QTY_INI_PLOTS BETWEEN PLAN_TAX_AFFILIATOR.QTY_INI_PLOTS
AND PLAN_TAX_AFFILIATOR.QTY_FINAL_PLOTS
AND PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATED
AND ACTIVE = 1;


SELECT
	@PERCENTAGE_VALID = (@PARCENTAGE - PLAN_TAX_AFFILIATOR.[PERCENTAGE])
   ,@RATE_VALID = (@RATE - PLAN_TAX_AFFILIATOR.RATE)
   ,@ANTECIP_VALID = (
	@ANTICIPATION - PLAN_TAX_AFFILIATOR.ANTICIPATION_PERCENTAGE
	)
FROM PLAN_TAX_AFFILIATOR
WHERE PLAN_TAX_AFFILIATOR.COD_TTYPE = @COD_TTYPE
AND (
PLAN_TAX_AFFILIATOR.COD_BRAND = @COD_BRAND
OR PLAN_TAX_AFFILIATOR.COD_BRAND IS NULL
)
AND PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = @COD_TAX_TYPE
AND @QTY_FINAL_PLOTS BETWEEN PLAN_TAX_AFFILIATOR.QTY_INI_PLOTS
AND PLAN_TAX_AFFILIATOR.QTY_FINAL_PLOTS
AND PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATED
AND ACTIVE = 1;

END;

INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
COD_DEPTO_BRANCH,
COD_USER,
COD_PLAN,
EFFECTIVE_PERCENTAGE,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_MODEL)
	VALUES (@COD_TTYPE, @QTY_INI_PLOTS, @QTY_FINAL_PLOTS, @PARCENTAGE, @RATE, @INTERVAL, @COD_DEPTO_BRANCH, @CODUSER, @COD_PLAN, @PERCENTAGE_EFFECTIVE, @ANTICIPATION, @COD_BRAND, @COD_TAX_TYPE, @COD_MODEL);

UPDATE DEPARTMENTS_BRANCH
SET COD_PLAN = @COD_PLAN
   ,COD_T_PLAN = (SELECT
			COD_T_PLAN
		FROM [PLAN]
		WHERE COD_PLAN = @COD_PLAN)
WHERE DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH;

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ASS_TAX_DEPART ', 1;

EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH

END;

GO

IF OBJECT_ID('SP_ASS_DEPTO_PLAN') IS NOT NULL
DROP PROCEDURE [SP_ASS_DEPTO_PLAN];
GO
   
      
CREATE PROCEDURE [dbo].[SP_ASS_DEPTO_PLAN]        
/*----------------------------------------------------------------------------------------        
Procedure Name: SP_ASS_DEPTO_PLAN        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author                          VERSION        Date                            Description        
------------------------------------------------------------------------------------------        
Kennedy Alef     V1    27/07/2018      Creation        
Gian Luca Dalle Cort   V1    13/09/2018      Changed        
------------------------------------------------------------------------------------------*/        
(        
@CODPLAN INT,        
@COD_DEPTO_BRANCH INT,        
@CODUSER INT)        
AS        
DECLARE @QTD INT;
  
    
        
DECLARE @TP_PLAN INT;
  
    
BEGIN

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
AND ACTIVE = 1

SELECT
	@TP_PLAN = COD_T_PLAN
FROM [PLAN]
WHERE COD_PLAN = @CODPLAN;

UPDATE DEPARTMENTS_BRANCH
SET COD_PLAN = @CODPLAN
   ,COD_T_PLAN = @TP_PLAN
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH

INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
COD_DEPTO_BRANCH,
COD_USER,
COD_PLAN,
EFFECTIVE_PERCENTAGE,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_MODEL)
	SELECT
		COD_TTYPE
	   ,QTY_INI_PLOTS
	   ,QTY_FINAL_PLOTS
	   ,PARCENTAGE
	   ,RATE
	   ,INTERVAL
	   ,@COD_DEPTO_BRANCH
	   ,@CODUSER
	   ,@CODPLAN
	   ,EFFECTIVE_PERCENTAGE
	   ,ANTICIPATION_PERCENTAGE
	   ,COD_BRAND
	   ,COD_SOURCE_TRAN
	   ,COD_MODEL
	FROM TAX_PLAN
	WHERE COD_PLAN = @CODPLAN
	AND TAX_PLAN.ACTIVE = 1


IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER ASS_TAX_DEPART ', 1;

EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH


END;

GO

IF OBJECT_ID('SP_DISABLE_TX_DEPTO_PLAN') IS NOT NULL
DROP PROCEDURE [SP_DISABLE_TX_DEPTO_PLAN];
GO
   
      
  
CREATE PROCEDURE [dbo].[SP_DISABLE_TX_DEPTO_PLAN]    
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_DISABLE_TX_DEPTO_PLAN]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef     V1    27/07/2018      Creation    
------------------------------------------------------------------------------------------*/    
(    
@COD_DEPTO_BRANCH INT)    
AS    
DECLARE @QTD INT;
    
BEGIN

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
FROM ASS_TAX_DEPART
WHERE ACTIVE = 1
AND COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH

EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH


END;

GO

IF OBJECT_ID('SP_GW_ASS_PLAN_EC_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_ASS_PLAN_EC_MODEL_EQUIPMENT];
GO
   
   

CREATE PROCEDURE [dbo].[SP_GW_ASS_PLAN_EC_MODEL_EQUIPMENT]  
/*----------------------------------------------------------------------------------------      
Procedure Name: [SP_GW_ASS_PLAN_EC_MODEL_EQUIPMENT]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                          VERSION        Date                            Description      
------------------------------------------------------------------------------------------      
Marcus Gall      V1   2020-07-13  ET-921: Handle Plan by Equipment  
------------------------------------------------------------------------------------------*/ (@COD_PLAN INT,  
@COD_EC INT,  
@COD_AFFILIATOR INT)  
AS  
BEGIN
  
  
 DECLARE @COD_AFF_PLAN INT;
  
 DECLARE @TP_RATES_EC_MODEL_EQUIPMENT AS dbo.TP_RATES_EC_MODEL_EQUIPMENT;
  
 DECLARE @COD_DEPTO_BRANCH INT;
  
 DECLARE @COD_USER INT;

SELECT
	@COD_AFF_PLAN = COD_AFFILIATOR
FROM [PLAN]
WHERE COD_PLAN = @COD_PLAN
AND ACTIVE = 1;
IF @COD_AFF_PLAN <> @COD_AFFILIATOR
THROW 61064, 'INVALID PLAN FOR THIS AFFILIATOR OR PLAN IS INACTIVE', 1;


IF (SELECT
			COUNT(*)
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE COD_EC = @COD_EC
		AND COD_AFFILIATOR = @COD_AFFILIATOR)
	= 0
THROW 61065, 'INVALID MERCHANT FOR THIS AFFILIATOR', 1;

INSERT INTO @TP_RATES_EC_MODEL_EQUIPMENT
	SELECT
		TAX_PLAN.INTERVAL
	   ,TAX_PLAN.PARCENTAGE
	   ,TAX_PLAN.QTY_INI_PLOTS
	   ,TAX_PLAN.QTY_FINAL_PLOTS
	   ,TAX_PLAN.ANTICIPATION_PERCENTAGE
	   ,TAX_PLAN.COD_TTYPE
	   ,TAX_PLAN.COD_SOURCE_TRAN
	   ,@COD_AFFILIATOR
	   ,TAX_PLAN.COD_BRAND
	   ,[PLAN].COD_T_PLAN
	   ,TAX_PLAN.RATE
	   ,[PLAN].COD_PLAN
	   ,TAX_PLAN.COD_MODEL
	FROM [PLAN]
	JOIN TAX_PLAN
		ON TAX_PLAN.COD_PLAN = [PLAN].COD_PLAN
	WHERE [PLAN].COD_PLAN = @COD_PLAN
	AND TAX_PLAN.ACTIVE = 1;

EXEC SP_GW_VALIDATE_PLAN_EC_AFF_MODEL_EQUIPMENT @TP_RATES_EC_MODEL_EQUIPMENT;

SELECT
	@COD_DEPTO_BRANCH = COD_DEPTO_BRANCH
FROM COMMERCIAL_ESTABLISHMENT
JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC;

SELECT
	@COD_USER = COD_USER_INT
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @COD_AFFILIATOR;

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
AND ACTIVE = 1;

INSERT INTO ASS_TAX_DEPART (INTERVAL,
PARCENTAGE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
ANTICIPATION_PERCENTAGE,
COD_TTYPE,
COD_SOURCE_TRAN,
COD_BRAND,
RATE,
ACTIVE,
COD_PLAN,
COD_DEPTO_BRANCH,
COD_USER,
COD_MODEL)
	SELECT
		TAX_PLAN.INTERVAL
	   ,TAX_PLAN.PARCENTAGE
	   ,TAX_PLAN.QTY_INI_PLOTS
	   ,TAX_PLAN.QTY_FINAL_PLOTS
	   ,TAX_PLAN.ANTICIPATION_PERCENTAGE
	   ,TAX_PLAN.COD_TTYPE
	   ,TAX_PLAN.COD_SOURCE_TRAN
	   ,TAX_PLAN.COD_BRAND
	   ,TAX_PLAN.RATE
	   ,1
	   ,[PLAN].COD_PLAN
	   ,@COD_DEPTO_BRANCH
	   ,@COD_USER
	   ,TAX_PLAN.COD_MODEL
	FROM [PLAN]
	JOIN TAX_PLAN
		ON TAX_PLAN.COD_PLAN = [PLAN].COD_PLAN
	WHERE [PLAN].COD_PLAN = @COD_PLAN
	AND TAX_PLAN.ACTIVE = 1

EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH

END

GO

IF OBJECT_ID('SP_GW_REG_TAX_DEPTO_BR_EC') IS NOT NULL
DROP PROCEDURE [SP_GW_REG_TAX_DEPTO_BR_EC];
GO
   
   
CREATE  PROCEDURE [dbo].[SP_GW_REG_TAX_DEPTO_BR_EC]  
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_GW_REG_TAX_DEPTO_BR_EC]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION        Date                            Description  
------------------------------------------------------------------------------------------  
Kennedy Alef     V1    27/07/2018      Creation  
------------------------------------------------------------------------------------------*/  
(  
@COD_TTYPE INT,  
@QTY_INI_PLOTS INT ,  
@QTY_FINAL_PLOTS INT,  
@PARCENTAGE DECIMAL(22,6),  
@RATE DECIMAL(22,6),  
@INTERVAL INT,  
@COD_DEPTO_BRANCH INT,  
@CODUSER INT,  
@ANTICIPATION DECIMAL(22,6),  
@PERCENTAGE_EFFECTIVE DECIMAL(22,6)  
)  
AS  
DECLARE @QTD INT;
  
BEGIN


INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
COD_DEPTO_BRANCH,
EFFECTIVE_PERCENTAGE,
ANTICIPATION_PERCENTAGE)
	VALUES (@COD_TTYPE, @QTY_INI_PLOTS, @QTY_FINAL_PLOTS, @PARCENTAGE, @RATE, @INTERVAL, @COD_DEPTO_BRANCH, @PERCENTAGE_EFFECTIVE, @ANTICIPATION);


IF @@ROWCOUNT < 1
THROW 60000, 'COULD NOT REGISTER ASS_TAX_DEPART ', 1;

EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH


END;

GO

IF OBJECT_ID('SP_GW_UP_PLAN_ESTABLISHMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_UP_PLAN_ESTABLISHMENT];
GO
   
       
      
CREATE PROCEDURE [dbo].[SP_GW_UP_PLAN_ESTABLISHMENT]            
/*----------------------------------------------------------------------------------------              
Procedure Name: [SP_GW_UP_PLAN_ESTABLISHMENT]              
Project.......: TKPP              
------------------------------------------------------------------------------------------              
Author                          VERSION        Date                            Description              
------------------------------------------------------------------------------------------              
Caike Uch?a                       V1          2020-06-09                        Creation            
------------------------------------------------------------------------------------------*/              
(              
 @TP_RATES_EC [TP_RATES_EC] READONLY,        
 @COD_EC INT ,  
 @COD_T_PLAN VARCHAR(100) = NULL  
)        
AS        
BEGIN
        
         
DECLARE @COD_DEPTO_BRANCH INT;
        
DECLARE @COD_USER INT;
        
DECLARE @COD_AFFILIATOR INT;
        
DECLARE @QTD_TAX INT;
        
DECLARE @COUNT_TAX_EQUALS INT;
       
DECLARE @_COD_PLAN INT;
    
DECLARE @COD_T_PLAN_INS INT = 0;



SELECT
	@COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
   ,@QTD_TAX = COUNT(*)
   ,@_COD_PLAN = ASS_TAX_DEPART.COD_PLAN
FROM ASS_TAX_DEPART
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND ASS_TAX_DEPART.ACTIVE = 1
GROUP BY ASS_TAX_DEPART.COD_DEPTO_BRANCH
		,ASS_TAX_DEPART.COD_PLAN


SET @COD_T_PLAN_INS = (SELECT
		CASE
			WHEN @COD_T_PLAN = 'PARCELADO' THEN 1
			WHEN @COD_T_PLAN = 'AGRUPADO' THEN 2
			ELSE NULL
		END);


UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
AND ACTIVE = 1

SELECT
	@COD_USER = COD_USER_INT
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @COD_AFFILIATOR

INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_DEPTO_BRANCH,
COD_USER,
EFFECTIVE_PERCENTAGE)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,@_COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,@COD_DEPTO_BRANCH
	   ,@COD_USER
	   ,0
	FROM @TP_RATES_EC ITEM

IF @@rowcount < 1

THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE DEPARTMENTS_BRANCH
SET COD_T_PLAN = ISNULL(@COD_T_PLAN_INS, COD_T_PLAN)
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH


EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH


END;
GO

IF OBJECT_ID('SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT') IS NOT NULL
DROP PROCEDURE [SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT];
GO
   

CREATE PROCEDURE [dbo].[SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT]    
/*----------------------------------------------------------------------------------------          
Procedure Name: [SP_GW_UP_PLAN_ESTABLISHMENT_MODEL_EQUIPMENT]          
Project.......: TKPP          
------------------------------------------------------------------------------------------          
Author                          VERSION        Date                            Description          
------------------------------------------------------------------------------------------          
Marcus Gall                         V1      2020-07-13          ET-921: Handle Plan by Equipment    
Caike Uchoa                         v2      2020-10-16                       return cod_plan  
------------------------------------------------------------------------------------------*/   
(  
@TP_RATES_EC_MODEL_EQUIPMENT [TP_RATES_EC_MODEL_EQUIPMENT] READONLY,    
@COD_EC INT,    
@COD_T_PLAN VARCHAR(100) = NULL)    
AS    
BEGIN
  
    
    
 DECLARE @COD_DEPTO_BRANCH INT;
  
    
    
 DECLARE @COD_USER INT;
  
    
    
 DECLARE @COD_AFFILIATOR INT;
  
    
    
 DECLARE @QTD_TAX INT;
  
    
    
 DECLARE @COUNT_TAX_EQUALS INT;
  
    
    
 DECLARE @_COD_PLAN INT;
  
    
    
 DECLARE @COD_T_PLAN_INS INT = 0;

SELECT
	@COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
   ,@QTD_TAX = COUNT(*)
   ,@_COD_PLAN = ASS_TAX_DEPART.COD_PLAN
FROM ASS_TAX_DEPART
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND ASS_TAX_DEPART.ACTIVE = 1
GROUP BY ASS_TAX_DEPART.COD_DEPTO_BRANCH
		,ASS_TAX_DEPART.COD_PLAN


SET @COD_T_PLAN_INS = (SELECT
		CASE
			WHEN @COD_T_PLAN = 'PARCELADO' THEN 1
			WHEN @COD_T_PLAN = 'AGRUPADO' THEN 2
			ELSE NULL
		END);

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH
AND ACTIVE = 1;

SELECT
	@COD_USER = COD_USER_INT
FROM ACCESS_APPAPI
WHERE COD_AFFILIATOR = @COD_AFFILIATOR;

INSERT INTO ASS_TAX_DEPART (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_DEPTO_BRANCH,
COD_USER,
EFFECTIVE_PERCENTAGE,
COD_MODEL)

	SELECT
		ITEM.COD_TRAN_TYPE
	   ,ITEM.QTY_INI_PL
	   ,ITEM.QTY_FINAL_FL
	   ,ITEM.[PERCENTAGE]
	   ,ITEM.RATE
	   ,ITEM.INTERVAL
	   ,1
	   ,@_COD_PLAN
	   ,ITEM.ANTICIPATION
	   ,ITEM.COD_BRAND
	   ,ITEM.COD_SOURCE_TRAN
	   ,@COD_DEPTO_BRANCH
	   ,@COD_USER
	   ,0
	   ,ITEM.COD_MODEL
	FROM @TP_RATES_EC_MODEL_EQUIPMENT ITEM

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER [TAX_PLAN] ', 1;

UPDATE DEPARTMENTS_BRANCH
SET COD_T_PLAN = ISNULL(@COD_T_PLAN_INS, COD_T_PLAN)
WHERE COD_DEPTO_BRANCH = @COD_DEPTO_BRANCH

EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH


SELECT
	@_COD_PLAN AS COD_PLAN

END;

GO


IF OBJECT_ID('SP_MIGRATE_PLAN_TERMINAL') IS NOT NULL
DROP PROCEDURE SP_MIGRATE_PLAN_TERMINAL;
GO
   

  
CREATE PROCEDURE SP_MIGRATE_PLAN_TERMINAL(@COD_AFF INT)  
AS  
    BEGIN
  
    DECLARE @COD_USER INT= NULL;
  
	DECLARE @TB_DEPTO AS TABLE (COD_DEPTO INT)

SELECT
	@COD_USER = IIF(MIGRATION_PLANS.COD_MODIFY_USER IS NULL, MIGRATION_PLANS.COD_USER, MIGRATION_PLANS.COD_MODIFY_USER)
FROM MIGRATION_PLANS
WHERE COD_AFFILIATOR = @COD_AFF
AND PROCESSED = 0
AND ACTIVE = 1;

DECLARE @COD_MODEL INT;

DECLARE CURSOR_TERMINAL CURSOR FOR SELECT
	COD_MODEL
FROM EQUIPMENT_MODEL
WHERE TIPO = 'MPOS';

OPEN CURSOR_TERMINAL;

FETCH NEXT FROM CURSOR_TERMINAL INTO @COD_MODEL;

WHILE @@fetch_status = 0
BEGIN
-- plano cadastrado  
INSERT INTO TAX_PLAN (COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
ACTIVE,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
EFFECTIVE_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_MODEL)
	SELECT
		TAX_PLAN.COD_TTYPE
	   ,TAX_PLAN.QTY_INI_PLOTS
	   ,TAX_PLAN.QTY_FINAL_PLOTS
	   ,TAX_PLAN.PARCENTAGE
	   ,TAX_PLAN.RATE
	   ,TAX_PLAN.INTERVAL
	   ,TAX_PLAN.ACTIVE
	   ,TAX_PLAN.COD_PLAN
	   ,TAX_PLAN.ANTICIPATION_PERCENTAGE
	   ,TAX_PLAN.EFFECTIVE_PERCENTAGE
	   ,TAX_PLAN.COD_BRAND
	   ,TAX_PLAN.COD_SOURCE_TRAN
	   ,@COD_MODEL
	FROM TAX_PLAN
	JOIN [PLAN] P
		ON P.COD_PLAN = TAX_PLAN.COD_PLAN
			AND (P.COD_PLAN_OPT <> 3
				OR P.COD_PLAN_OPT IS NULL)
			AND P.COD_AFFILIATOR = @COD_AFF
			AND P.ACTIVE = 1
	WHERE TAX_PLAN.ACTIVE = 1
	AND COD_MODEL IS NULL
	AND TAX_PLAN.COD_SOURCE_TRAN = 2;
-- plano ec  

INSERT INTO ASS_TAX_DEPART (CREATED_AT,
COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PARCENTAGE,
RATE,
INTERVAL,
COD_USER,
ACTIVE,
COD_DEPTO_BRANCH,
COD_PLAN,
ANTICIPATION_PERCENTAGE,
EFFECTIVE_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_MODEL)
OUTPUT INSERTED.COD_DEPTO_BRANCH INTO @TB_DEPTO
	SELECT
		GETDATE()
	   ,ASS_TAX_DEPART.COD_TTYPE
	   ,ASS_TAX_DEPART.QTY_INI_PLOTS
	   ,ASS_TAX_DEPART.QTY_FINAL_PLOTS
	   ,ASS_TAX_DEPART.PARCENTAGE
	   ,ASS_TAX_DEPART.RATE
	   ,ASS_TAX_DEPART.INTERVAL
	   ,@COD_USER
	   ,ASS_TAX_DEPART.ACTIVE
	   ,ASS_TAX_DEPART.COD_DEPTO_BRANCH
	   ,ASS_TAX_DEPART.COD_PLAN
	   ,ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE
	   ,ASS_TAX_DEPART.EFFECTIVE_PERCENTAGE
	   ,ASS_TAX_DEPART.COD_BRAND
	   ,ASS_TAX_DEPART.COD_SOURCE_TRAN
	   ,@COD_MODEL
	FROM ASS_TAX_DEPART
	JOIN [PLAN]
		ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN
			AND [PLAN].COD_AFFILIATOR = @COD_AFF
			AND ([PLAN].COD_PLAN_OPT <> 3
				OR [PLAN].COD_PLAN_OPT IS NULL)
			AND [PLAN].ACTIVE = 1
	WHERE ASS_TAX_DEPART.ACTIVE = 1
	AND ASS_TAX_DEPART.COD_SOURCE_TRAN = 2
	AND COD_MODEL IS NULL;
-- plano aff  

INSERT INTO PLAN_TAX_AFFILIATOR (CREATED_AT,
COD_TTYPE,
QTY_INI_PLOTS,
QTY_FINAL_PLOTS,
PERCENTAGE,
RATE,
INTERVAL,
COD_USER,
ACTIVE,
COD_PLAN,
COD_AFFILIATOR,
ANTICIPATION_PERCENTAGE,
EFFECTIVE_PERCENTAGE,
COD_BRAND,
COD_SOURCE_TRAN,
COD_MODEL)
	SELECT
		GETDATE()
	   ,COD_TTYPE
	   ,QTY_INI_PLOTS
	   ,QTY_FINAL_PLOTS
	   ,PERCENTAGE
	   ,RATE
	   ,INTERVAL
	   ,@COD_USER
	   ,ACTIVE
	   ,COD_PLAN
	   ,COD_AFFILIATOR
	   ,ANTICIPATION_PERCENTAGE
	   ,EFFECTIVE_PERCENTAGE
	   ,COD_BRAND
	   ,COD_SOURCE_TRAN
	   ,@COD_MODEL
	FROM PLAN_TAX_AFFILIATOR
	WHERE COD_AFFILIATOR = @COD_AFF
	AND ACTIVE = 1
	AND COD_MODEL IS NULL
	AND COD_SOURCE_TRAN = 2;

FETCH NEXT FROM CURSOR_TERMINAL INTO @COD_MODEL;
END;

CLOSE CURSOR_TERMINAL;

DEALLOCATE CURSOR_TERMINAL;

UPDATE [PLAN]
SET COD_PLAN_OPT = 3
   ,MODIFY_DATE = GETDATE()
   ,COD_USER_MODIFY = @COD_USER
FROM [PLAN]
WHERE COD_PLAN_OPT IS NULL
AND COD_AFFILIATOR = @COD_AFF
AND ACTIVE = 1;

UPDATE TAX_PLAN
SET ACTIVE = 0
FROM TAX_PLAN
JOIN [PLAN]
	ON [PLAN].COD_PLAN = TAX_PLAN.COD_PLAN
WHERE TAX_PLAN.ACTIVE = 1
AND COD_AFFILIATOR = @COD_AFF
AND COD_SOURCE_TRAN = 2
AND COD_MODEL IS NULL;

UPDATE ASS_TAX_DEPART
SET ACTIVE = 0
   ,MODIFY_DATE = GETDATE()
FROM ASS_TAX_DEPART
JOIN [PLAN]
	ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN
WHERE ASS_TAX_DEPART.ACTIVE = 1
AND COD_AFFILIATOR = @COD_AFF
AND COD_SOURCE_TRAN = 2
AND COD_MODEL IS NULL;

UPDATE PLAN_TAX_AFFILIATOR
SET ACTIVE = 0
FROM PLAN_TAX_AFFILIATOR
JOIN [PLAN]
	ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN
WHERE PLAN_TAX_AFFILIATOR.ACTIVE = 1
AND PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = @COD_AFF
AND COD_SOURCE_TRAN = 2
AND COD_MODEL IS NULL;

UPDATE MIGRATION_PLANS
SET PROCESSED = 1
WHERE COD_AFFILIATOR = @COD_AFF
AND PROCESSED = 0;





DECLARE @COD_DEPTO_BRANCH INT;
DECLARE CURSOR_ECS CURSOR FOR SELECT
	COD_DEPTO
FROM @TB_DEPTO


OPEN CURSOR_ECS;

FETCH NEXT FROM CURSOR_ECS INTO @COD_DEPTO_BRANCH;

WHILE @@fetch_status = 0
BEGIN


EXEC SP_UP_DATA_PLAN_TABLE_LOAD @COD_DEPTO_BRANCH

FETCH NEXT FROM CURSOR_ECS INTO @COD_DEPTO_BRANCH;

END;
CLOSE CURSOR_ECS;

DEALLOCATE CURSOR_ECS;



END;

GO