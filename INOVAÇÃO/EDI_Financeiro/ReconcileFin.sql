
IF NOT EXISTS
    (SELECT 1
FROM [SYS].[COLUMNS]
WHERE name = N'IS_FIN_REC'
  AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
    BEGIN
  alter table TRANSACTION_TITLES
            add IS_FIN_REC bit default 0
END;
go

IF OBJECT_ID('ASS_EDI_FILE_TITLE') IS NOT NULL DROP TABLE ASS_EDI_FILE_TITLE;
GO
CREATE TABLE ASS_EDI_FILE_TITLE
(
  COD_ASS_EDI_TITLE INT IDENTITY PRIMARY KEY,
  COD_TITLE INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE),
  LINE VARCHAR(MAX),
  ACTIVE BIT DEFAULT 1
)
GO

IF NOT EXISTS
    (SELECT 1
     FROM [SYS].[COLUMNS]
     WHERE name = N'COD_TITLE'
       AND object_id = OBJECT_ID(N'RECONCILE_TRAN_INVALID'))
    BEGIN
        alter table RECONCILE_TRAN_INVALID
            ADD COD_TITLE INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE)
    END;
go


IF NOT EXISTS
    (SELECT 1
     FROM [SYS].[COLUMNS]
     WHERE name = N'PREVISION_PAYMENT'
       AND object_id = OBJECT_ID(N'RECONCILE_TRAN_INVALID'))
    BEGIN
        alter table RECONCILE_TRAN_INVALID
            ADD PREVISION_PAYMENT DATE
    END;
go



IF NOT EXISTS
(
    SELECT 1
		 FROM SYS.INDEXES
		 WHERE object_id = OBJECT_ID('TRANSACTION')
			  AND NAME = 'IX_TRANSACTION_COD_SITUATION_BRAZILIAN_DATE'
)
    BEGIN
	   CREATE NONCLUSTERED INDEX [IX_TRANSACTION_COD_SITUATION_BRAZILIAN_DATE] ON [DBO].[TRANSACTION]([COD_SITUATION], [BRAZILIAN_DATE]) INCLUDE([COD_ASS_TR_COMP], [LOGICAL_NUMBER_ACQ]);
    END;

GO


IF TYPE_ID('TP_FINANCE_EDI') IS NOT NULL
    DROP TYPE TP_FINANCE_EDI
GO
CREATE TYPE TP_FINANCE_EDI AS TABLE
(
  COD_TITLE INT,
  LINE VARCHAR(MAX)
)
GO


IF OBJECT_ID('SP_REG_FIN_REC_TITLE') IS NOT NULL DROP PROCEDURE SP_REG_FIN_REC_TITLE;
GO
CREATE PROCEDURE SP_REG_FIN_REC_TITLE(@TP TP_FINANCE_EDI READONLY)
AS
BEGIN

    UPDATE TRANSACTION_TITLES SET IS_FIN_REC = 1 WHERE COD_TITLE IN (SELECT COD_TITLE FROM @TP);

    delete from ASS_EDI_FILE_TITLE WHERE COD_TITLE IN (SELECT COD_TITLE FROM @TP)

    INSERT ASS_EDI_FILE_TITLE(COD_TITLE, LINE)
    SELECT COD_TITLE, LINE
    FROM @TP

END
GO

IF OBJECT_ID('SP_FD_DATA_RECONCILE_FIN') IS NOT NULL DROP PROCEDURE SP_FD_DATA_RECONCILE_FIN;
GO
CREATE PROCEDURE SP_FD_DATA_RECONCILE_FIN(@INITIAL_DATE DATE,
                                          @FINAL_DATE DATE,
                                          @ACQCODE varchar(255))
AS
BEGIN
    DECLARE @INITIAL DATETIME2 = convert(datetime, @INITIAL_DATE, 103);
    DECLARE @FINAL DATETIME2 = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL_DATE)))

    select T.COD_TRAN
         , T.CODE                                                                                           as TRANSACTION_CODE
         , T.BRAZILIAN_DATE                                                                                 as TRANSACTION_DATE
         , T.AMOUNT                                                                                         as TRANSACTION_AMOUNT
         , T.PLOTS
         , T.BRAND
         , IIF(ASSIGN_DATA.NEW_PREVISION IS NOT NULL, ASSIGN_DATA.NEW_PREVISION, TT.PREVISION_RECEIVE_DATE) as PrevisionPayment
         , ([t].AMOUNT - ([t].AMOUNT * ISNULL(tr.TAX_VALUE, ASS_TR_TYPE_COMP.TAX_VALUE) / 100)) / [t].PLOTS AS NET_AMOUNT
         , TT.PLOT
         , [TRANSACTION_DATA_EXT].[NAME]                                                                    AS [TRAN_DATA_EXT]
         , [TRANSACTION_DATA_EXT].[VALUE]                                                                   AS [TRAN_DATA_EXT_VALUE]
         , (SELECT [TDE].[VALUE]
            FROM [TRANSACTION_DATA_EXT] TDE WITH (NOLOCK)
            WHERE [TDE].[COD_TRAN] = [T].[COD_TRAN]
              AND [TDE].[NAME] = 'AUTHCODE')                                                                AS AUTHCODE
         , T.COD_SITUATION
         , ACQUIRER.CODE                                                                                    AS ACQ_CODE
         , T.LOGICAL_NUMBER_ACQ
         , DATA_TID_AVAILABLE_EC.COD_AC
         , t.PAN
         , tt.COD_TITLE
         , tt.IS_FIN_REC
    from [TRANSACTION] (NOLOCK) T
             JOIN [TRANSACTION_TITLES] (NOLOCK) TT on TT.COD_TRAN = T.COD_TRAN
             JOIN DATA_TID_AVAILABLE_EC
                  ON DATA_TID_AVAILABLE_EC.TID = [T].LOGICAL_NUMBER_ACQ
                      AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
             JOIN ACQUIRER ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
             join ASS_TR_TYPE_COMP on [t].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
             left join ASS_TR_TYPE_COMP tr on tr.COD_AC = ACQUIRER.COD_AC and tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE and
                                              tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND and
                                              tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN and
                                              tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI and
                                              tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
             LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
                       ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [T].[COD_TRAN]
             LEFT JOIN ASSIGN_DATA ON ASSIGN_DATA.COD_TITLE = TT.COD_TITLE

    WHERE T.COD_SITUATION IN (3, 6, 22, 14)
      AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
      AND T.BRAZILIAN_DATE BETWEEN @INITIAL AND @FINAL
      AND ACQUIRER.CODE = @ACQCODE

    UNION ALL
    select T.COD_TRAN
         , T.CODE                                                                                           as TRANSACTION_CODE
         , T.BRAZILIAN_DATE                                                                                 as TRANSACTION_DATE
         , T.AMOUNT                                                                                         as TRANSACTION_AMOUNT
         , T.PLOTS
         , T.BRAND
         , IIF(ASSIGN_DATA.NEW_PREVISION IS NOT NULL, ASSIGN_DATA.NEW_PREVISION, TT.PREVISION_RECEIVE_DATE) as PrevisionPayment
         , ([t].AMOUNT - ([t].AMOUNT * ISNULL(tr.TAX_VALUE, ASS_TR_TYPE_COMP.TAX_VALUE) / 100)) / [t].PLOTS AS NET_AMOUNT
         , TT.PLOT
         , [TRANSACTION_DATA_EXT].[NAME]                                                                    AS [TRAN_DATA_EXT]
         , [TRANSACTION_DATA_EXT].[VALUE]                                                                   AS [TRAN_DATA_EXT_VALUE]
         , (SELECT [TDE].[VALUE]
            FROM [TRANSACTION_DATA_EXT] TDE WITH (NOLOCK)
            WHERE [TDE].[COD_TRAN] = [T].[COD_TRAN]
              AND [TDE].[NAME] = 'AUTHCODE')                                                                AS AUTHCODE
         , T.COD_SITUATION
         , ACQUIRER.CODE                                                                                    AS ACQ_CODE
         , T.LOGICAL_NUMBER_ACQ
         , ACQUIRER.COD_AC
         , t.PAN
         , tt.COD_TITLE
         , tt.IS_FIN_REC
    from [TRANSACTION] (NOLOCK) T
             JOIN [TRANSACTION_TITLES] (NOLOCK) TT on TT.COD_TRAN = T.COD_TRAN
             JOIN [ASS_TR_TYPE_COMP] ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [T].[COD_ASS_TR_COMP]
             JOIN [ACQUIRER] ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC] AND ACQUIRER.COD_AC = 25
             LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
                       ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [T].[COD_TRAN]
             left join ASS_TR_TYPE_COMP tr on tr.COD_AC = ACQUIRER.COD_AC and tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE and
                                              tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND and
                                              tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN and
                                              tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI and
                                              tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
             LEFT JOIN ASSIGN_DATA ON ASSIGN_DATA.COD_TITLE = TT.COD_TITLE
    WHERE T.COD_SITUATION IN (3, 6, 22, 14)
      AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
      AND T.BRAZILIAN_DATE BETWEEN @INITIAL AND @FINAL
      AND ACQUIRER.CODE = @ACQCODE

END
go





IF OBJECT_ID('RECONCILE_TYPE') IS NOT NULL DROP TABLE RECONCILE_TYPE;
GO
CREATE TABLE RECONCILE_TYPE
(
    COD_REC_TYPE INT PRIMARY KEY IDENTITY,
    CODE         VARCHAR(255),
    DESCRIPTION  VARCHAR(255)
)

GO


IF (SELECT COUNT(*)
    FROM RECONCILE_TYPE
    WHERE CODE = 'FINANCIAL')
    = 0
    INSERT INTO RECONCILE_TYPE (CODE, DESCRIPTION)
    VALUES ('FINANCIAL', 'CONCILIAÇÃO FINANCEIRA');

GO
IF (SELECT COUNT(*)
    FROM RECONCILE_TYPE
    WHERE CODE = 'TRANSACTIONAL')
    = 0
    INSERT INTO RECONCILE_TYPE (CODE, DESCRIPTION)
    VALUES ('TRANSACTIONAL', 'CONCILIAÇÃO TRANSACIONAL');

GO


IF NOT EXISTS
    (SELECT 1
     FROM [SYS].[COLUMNS]
     WHERE name = N'COD_REC_TYPE'
       AND object_id = OBJECT_ID(N'RECONCILE_RESUME'))
    BEGIN

        ALTER TABLE RECONCILE_RESUME
            ADD COD_REC_TYPE INT FOREIGN KEY REFERENCES RECONCILE_TYPE (COD_REC_TYPE)

    END;
GO

IF NOT EXISTS
    (SELECT 1
     FROM [SYS].[COLUMNS]
     WHERE name = N'COD_REC_TYPE'
       AND object_id = OBJECT_ID(N'RECONCILE_TRAN_INVALID'))
    BEGIN

        ALTER TABLE RECONCILE_TRAN_INVALID
            ADD COD_REC_TYPE INT FOREIGN KEY REFERENCES RECONCILE_TYPE (COD_REC_TYPE)

    END;
GO

IF NOT EXISTS
    (SELECT 1
     FROM [SYS].[COLUMNS]
     WHERE name = N'CREATEAD_AT'
       AND object_id = OBJECT_ID(N'RECONCILE_RESUME'))
    BEGIN

        ALTER TABLE RECONCILE_RESUME
            ADD CREATEAD_AT DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE())

    END;
GO

UPDATE RECONCILE_RESUME
SET COD_REC_TYPE = (SELECT COD_REC_TYPE FROM RECONCILE_TYPE WHERE CODE = 'TRANSACTIONAL')
WHERE COD_REC_TYPE IS NULL

GO

IF NOT EXISTS
    (SELECT 1
     FROM [SYS].[COLUMNS]
     WHERE name = N'FILE_NAME'
       AND object_id = OBJECT_ID(N'RECONCILE_RESUME'))
    BEGIN

        ALTER TABLE RECONCILE_RESUME
            ADD FILE_NAME varchar(255)

    END;
GO


IF OBJECT_ID('SP_LS_RECONCILE_RESUME') IS NOT NULL DROP PROCEDURE SP_LS_RECONCILE_RESUME;
GO
create procedure SP_LS_RECONCILE_RESUME(@INITIAL DATE = null,
                                        @FINAL DATE = null,
                                        @COD_AC INT = null,
                                        @COD_REC_TYPE INT = NULL,
                                        @CODE_ACQ VARCHAR(100) = NULL)
AS
BEGIN


    IF (@CODE_ACQ IS NOT NULL)
        SELECT @COD_AC = COD_AC FROM ACQUIRER WHERE CODE = @CODE_ACQ;


    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
    SET @QUERY_BASIS = '
select RECONCILE_DATE,
       QTY_TKPP,
       QTY_ACQ,
       AMOUNT_TKPP,
       AMOUNT_ACQ,
       ACQUIRER.NAME,
       RECONCILE_RESUME.FILE_NAME
from RECONCILE_RESUME
         join ACQUIRER on RECONCILE_RESUME.COD_AC = ACQUIRER.COD_AC
where RECONCILE_RESUME.ACTIVE = 1';

    IF @INITIAL IS NOT NULL OR @FINAL IS NOT NULL
        SET @QUERY_BASIS = @QUERY_BASIS + ' and RECONCILE_RESUME.RECONCILE_DATE between @INITIAL AND @FINAL ';

    IF @COD_AC IS NOT NULL
        SET @QUERY_BASIS = @QUERY_BASIS + ' and RECONCILE_RESUME.COD_AC  = @COD_AC';

    IF @COD_REC_TYPE IS NOT NULL
        SET @QUERY_BASIS = @QUERY_BASIS + ' and RECONCILE_RESUME.COD_REC_TYPE = @COD_REC_TYPE'

    EXEC [sp_executesql] @QUERY_BASIS
        , N'
           @INITIAL DATE,
           @FINAL DATE,
           @COD_AC INT,
           @COD_REC_TYPE INT
        '
        , @INITIAL = @INITIAL
        , @FINAL = @FINAL
        , @COD_AC = @COD_AC
        , @COD_REC_TYPE = @COD_REC_TYPE

END
go

IF OBJECT_ID('SP_REG_RECONCILE_RESUME') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_RESUME;
GO
CREATE PROCEDURE SP_REG_RECONCILE_RESUME(@RECONCILE_DATE DATE,
                                         @QTY_TKPP INT,
                                         @QTY_ACQ INT,
                                         @AMOUNT_TKPP DECIMAL(22, 6),
                                         @AMOUNT_ACQ DECIMAL(22, 6),
                                         @COD_AC INT,
                                         @COD_REC_TYPE INT = NULL,
                                         @FILE_NAME VARCHAR(255) = NULL)
AS
BEGIN

    UPDATE RECONCILE_RESUME
    SET ACTIVE = 0
    WHERE ACTIVE = 1
      AND RECONCILE_DATE = @RECONCILE_DATE
      AND COD_AC = @COD_AC
      AND COD_REC_TYPE = @COD_REC_TYPE
      AND (@FILE_NAME IS NOT NULL AND FILE_NAME = @FILE_NAME) OR @FILE_NAME IS NULL

    INSERT INTO RECONCILE_RESUME (RECONCILE_DATE, QTY_TKPP, QTY_ACQ, AMOUNT_TKPP, AMOUNT_ACQ, COD_AC, COD_REC_TYPE, FILE_NAME)
    VALUES (@RECONCILE_DATE, @QTY_TKPP, @QTY_ACQ, @AMOUNT_TKPP, @AMOUNT_ACQ, @COD_AC, @COD_REC_TYPE, @FILE_NAME);

END;
go

update RECONCILE_TRAN_INVALID
set COD_REC_TYPE = (select RECONCILE_TYPE.COD_REC_TYPE from RECONCILE_TYPE where CODE = 'TRANSACTIONAL')
where COD_REC_TYPE is null


GO

IF OBJECT_ID('DIVERGENCE_TYPE') IS NOT NULL DROP TABLE DIVERGENCE_TYPE;
GO
create table DIVERGENCE_TYPE(
    COD_DIV_TYPE INT PRIMARY KEY IDENTITY,
    CODE VARCHAR(100)
)

GO

IF (SELECT COUNT(*)
    FROM DIVERGENCE_TYPE
    WHERE CODE = 'AMOUNT')
    = 0
    INSERT INTO DIVERGENCE_TYPE (CODE, DESCRIPTION) VALUES ('AMOUNT', N'DIVERGÊNCIA ENTRE VALORES')
GO
IF (SELECT COUNT(*)
    FROM DIVERGENCE_TYPE
    WHERE CODE = 'DATE')
    = 0
    INSERT INTO DIVERGENCE_TYPE (CODE, DESCRIPTION) VALUES ('DATE', N'DIVERGÊNCIA ENTRE DATAS')
GO

IF OBJECT_ID('ASS_DIVERGENCE_TITLE') IS NOT NULL DROP TABLE ASS_DIVERGENCE_TITLE;
GO
CREATE TABLE ASS_DIVERGENCE_TITLE
(
    COD_ASS_DIV_TITLE INT PRIMARY KEY IDENTITY,
    CREATEAD_AT       DATETIME DEFAULT dbo.FN_FUS_UTF(GETDATE()),
    ACTIVE            BIT      DEFAULT 1,
    COD_TITLE         INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE),
    COD_DIV_TYPE      INT FOREIGN KEY REFERENCES DIVERGENCE_TYPE (COD_DIV_TYPE)
)

GO

IF TYPE_ID('TP_ASS_DIV_TITLE') IS NOT NULL
    DROP TYPE TP_ASS_DIV_TITLE
GO
CREATE TYPE TP_ASS_DIV_TITLE AS TABLE
(
    COD_TITLE    INT,
    COD_DIV_TYPE INT
)

GO


IF OBJECT_ID('SP_REG_RECONCILE_INVALID') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_INVALID;
GO


IF OBJECT_ID('SP_REG_DIVERGENCE_TITLE') IS NOT NULL DROP PROCEDURE SP_REG_DIVERGENCE_TITLE;
GO

IF OBJECT_ID('SP_REG_RECONCILE_INVALID_FIN') IS NOT NULL
    DROP PROCEDURE SP_REG_RECONCILE_INVALID_FIN;
GO

IF TYPE_ID('TP_INVALID_TRANSACTION') IS NOT NULL
    DROP TYPE TP_INVALID_TRANSACTION
GO
create type TP_INVALID_TRANSACTION as table
(
    FILE_NAME         varchar(255),
    COD_AC            int,
    NSU_EXT           varchar(255),
    AUTH_CODE         varchar(255),
    BRAND             varchar(255),
    AMOUNT            decimal(22, 6),
    NET_AMOUNT        decimal(22, 6),
    TRAN_DATE         datetime,
    PAN               varchar(255),
    RECONCILE_DATE    date,
    COD_TITLE         INT,
    COD_REC_TYPE      int,
    PREVISION_PAYMENT DATETIME
)
go

CREATE PROCEDURE SP_REG_RECONCILE_INVALID(@TP TP_INVALID_TRANSACTION READONLY)
AS
BEGIN

    UPDATE RECONCILE_TRAN_INVALID
    SET ACTIVE = 0
    FROM RECONCILE_TRAN_INVALID
             JOIN @TP TP
                  ON TP.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
                      AND TP.RECONCILE_DATE = RECONCILE_TRAN_INVALID.RECONCILE_DATE
                      AND TP.COD_REC_TYPE = RECONCILE_TRAN_INVALID.COD_REC_TYPE
    WHERE RECONCILE_TRAN_INVALID.ACTIVE = 1

    INSERT INTO RECONCILE_TRAN_INVALID (FILE_NAME, COD_AC, NSU_EXT, AUTH_CODE, BRAND, AMOUNT, TRANSACTION_DATE, PAN,
                                        NET_AMOUNT, COD_REC_TYPE, COD_TITLE, RECONCILE_DATE, PREVISION_PAYMENT)
    SELECT FILE_NAME
         , COD_AC
         , NSU_EXT
         , AUTH_CODE
         , BRAND
         , AMOUNT
         , TRAN_DATE
         , PAN
         , NET_AMOUNT
         , COD_REC_TYPE
         , COD_TITLE
         , RECONCILE_DATE
         , PREVISION_PAYMENT
    FROM @TP;
END
go


IF OBJECT_ID('SP_REG_RECONCILE_INVALID_FIN') IS NOT NULL
    DROP PROCEDURE SP_REG_RECONCILE_INVALID_FIN;
GO

CREATE PROCEDURE SP_REG_RECONCILE_INVALID_FIN(@TP TP_INVALID_TRANSACTION READONLY)
AS
BEGIN

    UPDATE RECONCILE_TRAN_INVALID
    SET ACTIVE = 0
    FROM RECONCILE_TRAN_INVALID
             JOIN @TP TP
                  ON TP.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
                      AND TP.RECONCILE_DATE = RECONCILE_TRAN_INVALID.RECONCILE_DATE
                      AND TP.COD_REC_TYPE = RECONCILE_TRAN_INVALID.COD_REC_TYPE
                      AND TP.NSU_EXT = RECONCILE_TRAN_INVALID.NSU_EXT
                      AND TP.AUTH_CODE = RECONCILE_TRAN_INVALID.AUTH_CODE
    WHERE RECONCILE_TRAN_INVALID.ACTIVE = 1
      and ((TP.COD_TITLE IS NULL and RECONCILE_TRAN_INVALID.COD_TITLE is null) OR (TP.COD_TITLE = RECONCILE_TRAN_INVALID.COD_TITLE))

    INSERT INTO RECONCILE_TRAN_INVALID (FILE_NAME, COD_AC, NSU_EXT, AUTH_CODE, BRAND, AMOUNT, TRANSACTION_DATE, PAN,
                                        NET_AMOUNT, COD_REC_TYPE, COD_TITLE, RECONCILE_DATE, PREVISION_PAYMENT)
    SELECT FILE_NAME
         , COD_AC
         , NSU_EXT
         , AUTH_CODE
         , BRAND
         , AMOUNT
         , TRAN_DATE
         , PAN
         , NET_AMOUNT
         , COD_REC_TYPE
         , COD_TITLE
         , RECONCILE_DATE
         , PREVISION_PAYMENT
    FROM @TP;
END
go


CREATE PROCEDURE SP_REG_DIVERGENCE_TITLE(
    @TP TP_ASS_DIV_TITLE READONLY,
    @TP_INVALID TP_INVALID_TRANSACTION READONLY
)
AS
BEGIN

    EXEC SP_REG_RECONCILE_INVALID_FIN @TP_INVALID;

    delete
    from ASS_DIVERGENCE_TITLE
    WHERE COD_TITLE IN (SELECT COD_TITLE FROM @TP)
      AND ACTIVE = 1

    INSERT INTO ASS_DIVERGENCE_TITLE (COD_TITLE, COD_DIV_TYPE)
    SELECT COD_TITLE, COD_DIV_TYPE
    FROM @TP
END
go



IF OBJECT_ID('SP_REPORT_RECONCILE_FIN') IS NOT NULL
    DROP PROCEDURE SP_REPORT_RECONCILE_FIN;
GO

CREATE PROCEDURE SP_REPORT_RECONCILE_FIN(@INITIAL DATE = NULL,
                                         @FINAL DATE = NULL,
                                         @NSU VARCHAR(255) = NULL,
                                         @NSU_EXT VARCHAR(255) = NULL,
                                         @COD_AC INT = NULL,
                                         @PAGE INT = 1,
                                         @PAGE_SIZE INT = 20,
                                         @EXPORT INT = 0,
                                         @TOTAL INT OUTPUT
)
AS
BEGIN

    DECLARE @SKIP INT= (@PAGE_SIZE * (@PAGE - 1));

    DECLARE @QUERY_PARAMS NVARCHAR(MAX)= '';

    DECLARE @QUERY_BASIS NVARCHAR(MAX)= N'
	 SELECT T.COD_TRAN,
	  T.CODE AS TRANSACTION_CODE,
	  T.BRAZILIAN_DATE AS TRANSACTION_DATE,
	  T.AMOUNT AS TRANSACTION_AMOUNT,
	  T.PLOTS,
	  T.BRAND,
	  TT.PREVISION_RECEIVE_DATE AS PREVISION_PAYMENT,
	  ([T].AMOUNT - ([T].AMOUNT * ISNULL(TR.TAX_VALUE, ASS_TR_TYPE_COMP.TAX_VALUE) / 100)) / [T].PLOTS AS NET_AMOUNT,
	  TT.PLOT,
	  [TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT],
	  [TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE],
	   (
		  SELECT [TDE].[VALUE]
			    FROM [TRANSACTION_DATA_EXT] TDE WITH(NOLOCK)
			    WHERE [TDE].[COD_TRAN] = [T].[COD_TRAN]
					AND [TDE].[NAME] = ''AUTHCODE''
	   ) AS AUTHCODE,
	  T.COD_SITUATION,
	  ACQ_SEG.CODE AS ACQ_CODE,
	  T.LOGICAL_NUMBER_ACQ,
	  COALESCE(DATA_TID_AVAILABLE_EC.COD_AC, ACQUIRER.COD_AC) AS COD_AC,
	  T.PAN,
	  TT.COD_TITLE,
	  TT.IS_FIN_REC,
	  COALESCE(ACQ_SEG.NAME, ACQUIRER.NAME) AS ACQ_NAME
	  FROM [TRANSACTION](NOLOCK) T
		  JOIN [TRANSACTION_TITLES](NOLOCK) TT ON TT.COD_TRAN = T.COD_TRAN
		  LEFT JOIN DATA_TID_AVAILABLE_EC ON DATA_TID_AVAILABLE_EC.TID = [T].LOGICAL_NUMBER_ACQ
									  AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
		  LEFT JOIN ACQUIRER ACQ_SEG ON DATA_TID_AVAILABLE_EC.COD_AC = ACQ_SEG.COD_AC and ACQ_SEG.COD_AC_GP in (8, 9)
		  JOIN ASS_TR_TYPE_COMP ON [T].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
		  JOIN ACQUIRER ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC and ACQUIRER.COD_AC_GP in (8, 9)
		  LEFT JOIN ASS_TR_TYPE_COMP TR ON TR.COD_AC = ACQ_SEG.COD_AC
									AND TR.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
									AND TR.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
									AND TR.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
									AND TR.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
									AND TR.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
		  LEFT JOIN [TRANSACTION_DATA_EXT] WITH(NOLOCK) ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [T].[COD_TRAN]
	  WHERE COALESCE([TRANSACTION_DATA_EXT].[NAME], ''0'') IN(''NSU'', ''RCPTTXID'', ''AUTO'', ''0'')
		  AND COALESCE(TT.IS_FIN_REC, 0) = 0
		  AND TT.COD_EC > 0
		  AND T.COD_SITUATION IN(3, 6, 22, 14)';

    IF @INITIAL IS NOT NULL
        OR @FINAL IS NOT NULL
        BEGIN
            DECLARE @I DATETIME2;
            DECLARE @F DATETIME2;

            SET @I = CONVERT(DATETIME, @INITIAL, 103);
            SET @F = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL)));

            SET @QUERY_PARAMS = @QUERY_PARAMS + N' AND T.BRAZILIAN_DATE between @I and @F ';
        END;

    IF @NSU IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + N' and T.CODE = @NSU';

    IF @NSU_EXT IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + N' and [TRANSACTION_DATA_EXT].[VALUE] = @NSU_EXT';

    IF @COD_AC IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + N' and ACQUIRER.COD_AC = @COD_AC ';

    IF @EXPORT <= 0
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, @QUERY_PARAMS, ' ORDER BY TRANSACTION_DATE OFFSET @SKIP ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY');
    else
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, @QUERY_PARAMS, ' ORDER BY TRANSACTION_DATE');

    EXEC [SP_EXECUTESQL]
         @QUERY_BASIS,
         N'
     @I DATETIME2,
     @F DATETIME2,
     @NSU varchar(255),
     @NSU_EXT varchar(255),
     @COD_AC INT,
     @PAGE INT,
     @PAGE_SIZE INT,
     @SKIP INT
  ',
         @I = @I,
         @F = @F,
         @NSU = @NSU,
         @NSU_EXT = @NSU_EXT,
         @COD_AC = @COD_AC,
         @PAGE = @PAGE,
         @PAGE_SIZE = @PAGE_SIZE,
         @SKIP = @SKIP;

    DECLARE @SQL_COUNT NVARCHAR(MAX)= N'
		SELECT @TOTAL =  COUNT(*)
		 FROM [TRANSACTION](NOLOCK) T
			 JOIN [TRANSACTION_TITLES](NOLOCK) TT ON TT.COD_TRAN = T.COD_TRAN
			 LEFT JOIN DATA_TID_AVAILABLE_EC ON DATA_TID_AVAILABLE_EC.TID = [T].LOGICAL_NUMBER_ACQ
										 AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
			 LEFT JOIN ACQUIRER ACQ_SEG ON DATA_TID_AVAILABLE_EC.COD_AC = ACQ_SEG.COD_AC
			 JOIN ASS_TR_TYPE_COMP ON [T].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
			 JOIN ACQUIRER ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
			 LEFT JOIN ASS_TR_TYPE_COMP TR ON TR.COD_AC = ACQ_SEG.COD_AC
									    AND TR.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
									    AND TR.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
									    AND TR.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
									    AND TR.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
									    AND TR.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
			 LEFT JOIN [TRANSACTION_DATA_EXT] WITH(NOLOCK) ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [T].[COD_TRAN]
		 WHERE COALESCE([TRANSACTION_DATA_EXT].[NAME], ''0'') IN(''NSU'', ''RCPTTXID'', ''AUTO'', ''0'')
			 AND COALESCE(TT.IS_FIN_REC, 0) = 0
			 AND TT.COD_EC > 0
			 AND T.COD_SITUATION IN(3, 6, 22, 14)';

    SET @SQL_COUNT = CONCAT(@SQL_COUNT, @QUERY_PARAMS);

    EXEC SP_EXECUTESQL
         @SQL_COUNT,
         N'
           @I DATETIME2,
           @F DATETIME2,
           @NSU varchar(255),
           @NSU_EXT varchar(255),
           @COD_AC INT,
           @TOTAL INT OUTPUT
           ',
         @I = @I,
         @F = @F,
         @NSU = @NSU,
         @NSU_EXT = @NSU_EXT,
         @COD_AC = @COD_AC,
         @TOTAL = @TOTAL OUTPUT;
END;
GO
IF OBJECT_ID('SP_LS_INVALID_TRANSACTION_RECONCILE') IS NOT NULL
    DROP PROCEDURE SP_LS_INVALID_TRANSACTION_RECONCILE;
GO
create procedure SP_LS_INVALID_TRANSACTION_RECONCILE(@INTIAL DATE = NULL,
                                                     @FINAL DATE = NULL,
                                                     @NSU varchar(255) = null,
                                                     @COD_AC INT = NULL)
AS
BEGIN

    DECLARE @I DATETIME2;
    DECLARE @F DATETIME2;


    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
    SET @QUERY_BASIS = '
    select FILE_NAME,
           ACQUIRER.NAME,
           NSU_EXT,
           AUTH_CODE,
           BRAND,
           AMOUNT,
           NET_AMOUNT,
           TRANSACTION_DATE,
           PAN,
           RECONCILE_TRAN_INVALID.COD_AC
    from RECONCILE_TRAN_INVALID
             join ACQUIRER on ACQUIRER.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
    where RECONCILE_TRAN_INVALID.ACTIVE = 1 AND RECONCILE_TRAN_INVALID.COD_REC_TYPE = 2';


    IF @INTIAL IS NOT NULL OR @FINAL IS NOT NULL
        begin
            SET @I = CONVERT(DATETIME, @INTIAL, 103);
            SET @F = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL)))

            SET @QUERY_BASIS = @QUERY_BASIS + ' AND RECONCILE_TRAN_INVALID.TRANSACTION_DATE between @I and @F ';
        end

    if @NSU is not null
        SET @QUERY_BASIS = @QUERY_BASIS + 'and RECONCILE_TRAN_INVALID.NSU_EXT = @NSU ';

    IF @COD_AC IS NOT NULL
        SET @QUERY_BASIS = @QUERY_BASIS + 'and RECONCILE_TRAN_INVALID.COD_AC = @COD_AC ';

    EXEC [sp_executesql] @QUERY_BASIS
        , N'
           @I DATETIME2,
           @F DATETIME2,
           @NSU varchar(255),
           @COD_AC INT
        '
        , @I = @I
        , @F = @F
        , @NSU = @NSU
        , @COD_AC = @COD_AC

END
go



IF OBJECT_ID('SP_LS_INVALID_FINANCE_RECONCILE') IS NOT NULL
    DROP PROCEDURE SP_LS_INVALID_FINANCE_RECONCILE;
GO
CREATE PROCEDURE SP_LS_INVALID_FINANCE_RECONCILE(@INTIAL DATE = NULL,
                                                 @FINAL DATE = NULL,
                                                 @NSU VARCHAR(255) = NULL,
                                                 @COD_AC INT = NULL,
                                                 @PAGE INT = 1,
                                                 @PAGE_SIZE INT = 20,
                                                 @EXPORT INT = 0,
                                                 @TOTAL INT OUTPUT
)
AS
BEGIN

    DECLARE @I DATETIME2;
    DECLARE @F DATETIME2;

    DECLARE @SKIP INT= (@PAGE_SIZE * (@PAGE - 1));

    DECLARE @QUERY_BASIS NVARCHAR(MAX)= '';
    DECLARE @QUERY_PARAMS NVARCHAR(MAX)= '';

    SET @QUERY_BASIS = '
    select FILE_NAME,
           ACQUIRER.NAME,
           NSU_EXT,
           AUTH_CODE,
           RECONCILE_TRAN_INVALID.BRAND,
           RECONCILE_TRAN_INVALID.AMOUNT,
           RECONCILE_TRAN_INVALID.NET_AMOUNT,
           TRANSACTION_DATE,
           RECONCILE_TRAN_INVALID.PAN,
           RECONCILE_TRAN_INVALID.COD_AC,
           RECONCILE_TRAN_INVALID.COD_TITLE,
           iif(ASS_DIVERGENCE_TITLE.COD_DIV_TYPE = 1, 1, 0) DIVERGENCE_AMOUNT,
           iif(ASS_DIVERGENCE_TITLE.COD_DIV_TYPE = 2, 1, 0) DIVERGENCE_DATE,
		 [TRANSACTION].CODE	as NSU,
		 [TRANSACTION].PLOTS,
		 TRANSACTION_TITLES.PLOT,
        RECONCILE_TRAN_INVALID.PREVISION_PAYMENT
    from RECONCILE_TRAN_INVALID
             join ACQUIRER on ACQUIRER.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
             left join ASS_DIVERGENCE_TITLE on ASS_DIVERGENCE_TITLE.COD_TITLE = RECONCILE_TRAN_INVALID.COD_TITLE
		   left join TRANSACTION_TITLES (NOLOCK) ON TRANSACTION_TITLES.COD_TITLE  = RECONCILE_TRAN_INVALID.COD_TITLE
		   left join [TRANSACTION] (NOLOCK) ON [TRANSACTION].COD_TRAN  = TRANSACTION_TITLES.COD_TRAN
    where RECONCILE_TRAN_INVALID.ACTIVE = 1
      AND RECONCILE_TRAN_INVALID.COD_REC_TYPE = 1';

    IF @INTIAL IS NOT NULL
        OR @FINAL IS NOT NULL
        BEGIN
            SET @I = CONVERT(DATETIME, @INTIAL, 103);
            SET @F = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @FINAL)));

            SET @QUERY_PARAMS = @QUERY_PARAMS + ' AND RECONCILE_TRAN_INVALID.TRANSACTION_DATE between @I and @F ';
        END;

    IF @NSU IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + ' and (RECONCILE_TRAN_INVALID.NSU_EXT = @NSU or [TRANSACTION].CODE = @NSU) ';

    IF @COD_AC IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + ' and RECONCILE_TRAN_INVALID.COD_AC = @COD_AC ';

    IF @EXPORT <= 0
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, @QUERY_PARAMS, ' ORDER BY TRANSACTION_DATE OFFSET @SKIP ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY');
    else
        SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, @QUERY_PARAMS, ' ORDER BY TRANSACTION_DATE');

    EXEC [SP_EXECUTESQL]
         @QUERY_BASIS,
         N'
         @I DATETIME2,
         @F DATETIME2,
         @NSU varchar(255),
         @COD_AC INT,
         @PAGE INT,
         @PAGE_SIZE INT,
         @SKIP INT
      ',
         @I = @I,
         @F = @F,
         @NSU = @NSU,
         @COD_AC = @COD_AC,
         @PAGE = @PAGE,
         @PAGE_SIZE = @PAGE_SIZE,
         @SKIP = @SKIP;

    DECLARE @SQL_COUNT NVARCHAR(MAX)= N'
	    select @TOTAL =  COUNT(*)
	      from RECONCILE_TRAN_INVALID
	   	  join ACQUIRER on ACQUIRER.COD_AC = RECONCILE_TRAN_INVALID.COD_AC
	   	  left join ASS_DIVERGENCE_TITLE on ASS_DIVERGENCE_TITLE.COD_TITLE = RECONCILE_TRAN_INVALID.COD_TITLE
		  left join TRANSACTION_TITLES (NOLOCK) ON TRANSACTION_TITLES.COD_TITLE  = RECONCILE_TRAN_INVALID.COD_TITLE
		  left join [TRANSACTION] (NOLOCK) ON [TRANSACTION].COD_TRAN  = TRANSACTION_TITLES.COD_TRAN
	     where RECONCILE_TRAN_INVALID.ACTIVE = 1
	   AND RECONCILE_TRAN_INVALID.COD_REC_TYPE = 1';

    SET @SQL_COUNT = concat(@SQL_COUNT, @QUERY_PARAMS);

    EXEC [SP_EXECUTESQL]
         @SQL_COUNT,
         N'
              @I DATETIME2,
              @F DATETIME2,
              @NSU varchar(255),
              @COD_AC INT,
              @PAGE INT,
              @PAGE_SIZE INT,
              @SKIP INT,
      @TOTAL INT OUTPUT
           ',
         @I = @I,
         @F = @F,
         @NSU = @NSU,
         @COD_AC = @COD_AC,
         @PAGE = @PAGE,
         @PAGE_SIZE = @PAGE_SIZE,
         @SKIP = @SKIP,
         @TOTAL = @TOTAL OUTPUT;
END;
go


IF OBJECT_ID('SP_LS_RECONCILE_RESUME_FINANCE') IS NOT NULL
    DROP PROCEDURE SP_LS_RECONCILE_RESUME_FINANCE;
GO
create procedure SP_LS_RECONCILE_RESUME_FINANCE(
    @INITIAL DATE = null,
    @FINAL DATE = null,
    @COD_AC INT = null,
    @COD_REC_TYPE INT = NULL,
    @PAGE INT = 1,
    @PAGE_SIZE INT = 20,
    @EXPORT INT = 0,
    @TOTAL INT OUTPUT
)
as
begin

    DECLARE @SKIP INT= (@PAGE_SIZE * (@PAGE - 1));
    DECLARE @QUERY_PARAMS NVARCHAR(MAX)= '';

    DECLARE @QUERY_BASIS NVARCHAR(MAX) = ';
    select RECONCILE_DATE,
           QTY_TKPP,
           sum(QTY_ACQ)    as QTY_ACQ,
           AMOUNT_TKPP,
           sum(AMOUNT_ACQ) as AMOUNT_ACQ,
           ACQUIRER.NAME
    from RECONCILE_RESUME
             join ACQUIRER on RECONCILE_RESUME.COD_AC = ACQUIRER.COD_AC
    where RECONCILE_RESUME.ACTIVE = 1
      and COD_REC_TYPE = 1'


    IF @INITIAL IS NOT NULL OR @FINAL IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + ' and RECONCILE_RESUME.RECONCILE_DATE between @INITIAL AND @FINAL ';

    IF @COD_AC IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + ' and RECONCILE_RESUME.COD_AC  = @COD_AC';

    IF @COD_REC_TYPE IS NOT NULL
        SET @QUERY_PARAMS = @QUERY_PARAMS + ' and RECONCILE_RESUME.COD_REC_TYPE = @COD_REC_TYPE'


    IF @EXPORT <= 0
        SET @QUERY_BASIS =
                CONCAT(@QUERY_BASIS, @QUERY_PARAMS,
                       ' group by ACQUIRER.NAME, AMOUNT_TKPP, QTY_TKPP, RECONCILE_DATE ORDER BY RECONCILE_DATE OFFSET @SKIP ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY');
    ELSE
        SET @QUERY_BASIS =
                CONCAT(@QUERY_BASIS, @QUERY_PARAMS, ' group by ACQUIRER.NAME, AMOUNT_TKPP, QTY_TKPP, RECONCILE_DATE ORDER BY RECONCILE_DATE');

    EXEC [sp_executesql] @QUERY_BASIS
        , N'
           @INITIAL DATE,
           @FINAL DATE,
           @COD_AC INT,
           @COD_REC_TYPE INT,
           @PAGE INT,
           @PAGE_SIZE INT,
           @SKIP INT
        '
        , @INITIAL = @INITIAL
        , @FINAL = @FINAL
        , @COD_AC = @COD_AC
        , @COD_REC_TYPE = @COD_REC_TYPE
        , @PAGE = @PAGE
        , @PAGE_SIZE = @PAGE_SIZE
        , @SKIP = @SKIP;


    DECLARE @SQL_COUNT NVARCHAR(MAX)= N'select RECONCILE_DATE,
           QTY_TKPP,
           sum(QTY_ACQ)    as QTY_ACQ,
           AMOUNT_TKPP,
           sum(AMOUNT_ACQ) as AMOUNT_ACQ,
           ACQUIRER.NAME
    from RECONCILE_RESUME
             join ACQUIRER on RECONCILE_RESUME.COD_AC = ACQUIRER.COD_AC
    where RECONCILE_RESUME.ACTIVE = 1
      and COD_REC_TYPE = 1'

    set @SQL_COUNT = concat(@SQL_COUNT, @QUERY_PARAMS);

    set @SQL_COUNT = concat('with cte as (', @SQL_COUNT, ' group by ACQUIRER.NAME, AMOUNT_TKPP, QTY_TKPP, RECONCILE_DATE ) select @TOTAL = count(*) from cte');

    EXEC [sp_executesql] @SQL_COUNT
        , N'
           @INITIAL DATE,
           @FINAL DATE,
           @COD_AC INT,
           @COD_REC_TYPE INT,
           @PAGE INT,
           @PAGE_SIZE INT,
           @SKIP INT,
           @TOTAL INT OUTPUT'
        , @INITIAL = @INITIAL
        , @FINAL = @FINAL
        , @COD_AC = @COD_AC
        , @COD_REC_TYPE = @COD_REC_TYPE
        , @PAGE = @PAGE
        , @PAGE_SIZE = @PAGE_SIZE
        , @SKIP = @SKIP
        , @TOTAL = @TOTAL OUTPUT;

end
go

