IF OBJECT_ID('SP_LS_EC_AFFILIATOR') IS NOT NULL
	DROP PROCEDURE SP_LS_EC_AFFILIATOR;
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_AFFILIATOR]
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_LS_EC_AFFILIATOR]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author VERSION Date Description    
------------------------------------------------------------------------------------------    
Gian Luca Dalle Cort V1 02/08/2018 CREATION    
LUCAS AGUIAR V2 08/04/2019 PEGAR O SERVIÇO CERTO E ADD GROUP BY    
Caike Uchôa V3 31/05/2019 Ajuste no Left join da service_avaliable    
Caike Uchôa V4 23/09/2019 pegar o COD_RISK_SITUATION    
---------------------------------------- --------------------------------------------------*/ (@COD_AFFILIATOR INT,
@HAS_SPOT INT = NULL,
@COD_SALES_REP INT = NULL)
AS
	DECLARE @QUERY_ VARCHAR(MAX)
	BEGIN
		SET @QUERY_ = '    
 SELECT    
 COMMERCIAL_ESTABLISHMENT.COD_EC,    
 COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,    
 COMMERCIAL_ESTABLISHMENT.NAME,    
 COMMERCIAL_ESTABLISHMENT.TRADING_NAME,    
 BRANCH_EC.COD_BRANCH,    
 AFFILIATOR.NAME AS ''AFL_NAME'',    
 AFFILIATOR.COD_AFFILIATOR,    
  ISNULL(SERVICES_AVAILABLE.ACTIVE, 0) AS HAS_SPOT    
 ,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC    
 ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION    
 ,RISK_SITUATION.SITUATION_EC  
  FROM COMMERCIAL_ESTABLISHMENT    
 INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC    
 LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR    
 LEFT JOIN SERVICES_AVAILABLE ON COMMERCIAL_ESTABLISHMENT.COD_EC = SERVICES_AVAILABLE.COD_EC AND SERVICES_AVAILABLE.COD_ITEM_SERVICE = 1 AND SERVICES_AVAILABLE.ACTIVE= 1    
 JOIN RISK_SITUATION ON RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION  
 WHERE    
 COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = ' + CAST(@COD_AFFILIATOR AS VARCHAR) + '    
 AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1    
 AND BRANCH_EC.TYPE_BRANCH = ''PRINCIPAL''';
		IF @HAS_SPOT IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND SERVICES_AVAILABLE.ACTIVE = ' + CAST(@HAS_SPOT AS VARCHAR)
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = ' + CAST(@COD_SALES_REP AS VARCHAR)
		SET @QUERY_ = @QUERY_ + 'GROUP BY COMMERCIAL_ESTABLISHMENT.COD_EC,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,COMMERCIAL_ESTABLISHMENT.NAME,COMMERCIAL_ESTABLISHMENT.TRADING_NAME,    
 BRANCH_EC.COD_BRANCH,AFFILIATOR.NAME,AFFILIATOR.COD_AFFILIATOR,SERVICES_AVAILABLE.ACTIVE,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION, RISK_SITUATION.SITUATION_EC'
		EXEC (@QUERY_);
	END;


	SELECT
		COMMERCIAL_ESTABLISHMENT.COD_EC
	   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
	   ,COMMERCIAL_ESTABLISHMENT.NAME
	   ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME
	   ,BRANCH_EC.COD_BRANCH
	   ,AFFILIATOR.NAME AS 'AFL_NAME'
	   ,AFFILIATOR.COD_AFFILIATOR
	   ,ISNULL(SERVICES_AVAILABLE.ACTIVE, 0) AS HAS_SPOT
	   ,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC
	   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
	   ,RISK_SITUATION.SITUATION_EC
	FROM COMMERCIAL_ESTABLISHMENT
	INNER JOIN BRANCH_EC
		ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	LEFT JOIN SERVICES_AVAILABLE
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = SERVICES_AVAILABLE.COD_EC
			AND SERVICES_AVAILABLE.COD_ITEM_SERVICE = 1
			AND SERVICES_AVAILABLE.ACTIVE = 1
	JOIN RISK_SITUATION
		ON RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
	WHERE COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = 304
	--AND COMMERCIAL_ESTABLISHMENT.NAME LIKE '%HOTEL DALE%'
	ORDER BY BRANCH_EC.COD_EC


GO


IF OBJECT_ID('SP_LS_EC_COMPANY') IS NOT NULL
	DROP PROCEDURE SP_LS_EC_COMPANY;
GO
CREATE  PROCEDURE [dbo].[SP_LS_EC_COMPANY]
/*----------------------------------------------------------------------------------------      
Procedure Name: [SP_LS_EC_COMPANY]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                          VERSION        Date                            Description      
------------------------------------------------------------------------------------------      
Kennedy Alef     V1    27/07/2018      Creation      
Elir Ribeiro     V2    05/08/2019     Changed Cod Risk Situation    
------------------------------------------------------------------------------------------*/ (@COD_COMP INT,
@Search VARCHAR(100) = NULL,
@CodesAff CODE_TYPE READONLY)
AS
BEGIN

	SELECT
		COMMERCIAL_ESTABLISHMENT.COD_EC
	   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
	   ,COMMERCIAL_ESTABLISHMENT.[NAME]
	   ,COMMERCIAL_ESTABLISHMENT.TRADING_NAME
	   ,BRANCH_EC.COD_BRANCH
	   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
	   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
	   ,AFFILIATOR.NAME AS [AFF_NAME]
	   ,rs.SITUATION_EC
	FROM COMMERCIAL_ESTABLISHMENT
	INNER JOIN COMPANY
		ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
	INNER JOIN BRANCH_EC
		ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	INNER JOIN RISK_SITUATION rs
		ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION
	WHERE COMPANY.COD_COMP = 8
	AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1
	AND BRANCH_EC.TYPE_BRANCH = 'PRINCIPAL'
	AND (@Search IS NULL
	OR (COMMERCIAL_ESTABLISHMENT.[NAME] LIKE ('%' + @Search + '%'))
	OR (COMMERCIAL_ESTABLISHMENT.CPF_CNPJ LIKE ('%' + @Search + '%')))
	AND ((SELECT
			COUNT(*)
		FROM @CodesAff)
	= 0
	OR COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR IN (SELECT
			[CODE]
		FROM @CodesAff)
	)
	ORDER BY 1 DESC
END;


GO

ALTER PROCEDURE SP_FD_DATA_EC
/*----------------------------------------------------------------------------------------      
Procedure Name: [SP_FD_DATA_EC]      
------------------------------------------------------------------------------------------      
Author        VERSION     Date      Description      
------------------------------------------------------------------------------------------      
Kennedy Alef  V1        2018-07-27  Creation      
Elir Ribeiro  V2        2018-11-07  Changed      
Lucas Aguiar  V3        2019-04-22  Add split      
Lucas Aguiar  V4        2019-07-01  rotina de travar agenda do ec      
Luiz Aquino   V5        2019-07-03  Is_Cerc      
Elir Ribeiro  V6        2019-10-01  changed Limit transaction monthy      
Caike Uchoa   V7        2019-10-03  add case split pelo afiliador      
Luiz Aquino   V8        2019-10-16  Add retencao de agenda      
Lucas Aguiar  V9        2019-10-28  Conta Cessao      
Marcus Gall   V10       2019-11-11  Add FK with BRANCH BUSINESS      
Marcus Gall   V11       2019-12-06  Add field HAS_CREDENTIALS      
Elir Ribeiro  V12       2020-01-08  trazendo dados meet consumer      
Elir Ribeiro  V13       2020-01-15  ajustando procedure      
Marcus Gall   V14       2020-01-22  Add Translate service      
Luiz Aquino   v15       2020-03-11  (ET-465) Add requested transaction type      
Elir Ribeiro  v16       2020-04-15  add serviço de boleto      
Elir Ribeiro  v17       2020-04-17  add split boleto      
Caike Uchôa   v18       2020-04-22  add Multi EC      
Luiz Aquino   v19       2020-05-18  ET--598 Termo de aceite      
Elir Ribeiro  v20       2020-07-18  ET- 932 Integracao Visa    
------------------------------------------------------------------------------------------*/ (@COD_EC INT)
AS
BEGIN

	DECLARE @CodSpotService INT

	DECLARE @COD_SPLIT_SERVICE INT;

	DECLARE @COD_BLOCK_SITUATION INT;

	DECLARE @COD_CUSTOMERINSTALLMENT INT;

	DECLARE @CodSchRetention INT;

	DECLARE @COD_TRANSLATE_SERVICE INT;
	DECLARE @CodBillet INT;
	DECLARE @CODSPLITBILLET INT;
	DECLARE @COD_MULTIEC_SERVICE INT;

	SELECT
		@CodSpotService = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE CODE = '1';

	SELECT
		@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE [NAME] = 'SPLIT';

	SELECT
		@CodBillet = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE [NAME] = 'BOLETO'
	AND ACTIVE = 1;

	SELECT
		@CODSPLITBILLET = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE [NAME] = 'SPLIT BOLETO ONLINE'
	AND ACTIVE = 1;

	SELECT
		@COD_BLOCK_SITUATION = COD_SITUATION
	FROM SITUATION
	WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';

	SELECT
		@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE NAME = 'PARCELADOCLIENTE';

	SELECT
		@CodSchRetention = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE [NAME] = 'SCHEDULEDRETENTION';

	SELECT
		@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE [NAME] = 'TRANSLATE';

	SELECT
		@COD_MULTIEC_SERVICE = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE [NAME] = 'MULTI EC';

	SELECT
		BRANCH_EC.[NAME]
	   ,BRANCH_EC.TRADING_NAME
	   ,COMMERCIAL_ESTABLISHMENT.CODE AS CODE_EC
	   ,BRANCH_EC.CPF_CNPJ
	   ,BRANCH_EC.DOCUMENT
	   ,BRANCH_EC.BIRTHDATE
	   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
	   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
	   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
	   ,BRANCH_EC.EMAIL
	   ,BRANCH_EC.STATE_REGISTRATION
	   ,BRANCH_EC.MUNICIPAL_REGISTRATION
	   ,BRANCH_EC.NOTE AS NOTE
	   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
	   ,SEGMENTS.COD_SEG AS SEGMENT
	   ,BRANCH_EC.ACTIVE
	   ,ADDRESS_BRANCH.[ADDRESS]
	   ,ADDRESS_BRANCH.NUMBER AS NUMBER_ADDRESS
	   ,ADDRESS_BRANCH.COMPLEMENT
	   ,ADDRESS_BRANCH.CEP
	   ,ADDRESS_BRANCH.REFERENCE_POINT
	   ,NEIGHBORHOOD.COD_NEIGH
	   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
	   ,CITY.COD_CITY
	   ,CITY.[NAME] AS CITY
	   ,[STATE].COD_STATE
	   ,[STATE].[NAME] AS [STATE]
	   ,COUNTRY.COD_COUNTRY
	   ,COUNTRY.[NAME] AS COUNTRY
	   ,BANKS.COD_BANK AS BANK_INSIDECODE
	   ,BANKS.[NAME] AS BANK
	   ,BANK_DETAILS_EC.DIGIT_AGENCY
	   ,BANK_DETAILS_EC.AGENCY
	   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
	   ,BANK_DETAILS_EC.ACCOUNT
	   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
	   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
	   ,SALES_REPRESENTATIVE.COD_SALES_REP
	   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
	   ,BRANCH_EC.COD_SEX
	   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
	   ,BANK_DETAILS_EC.AGENCY AS AGENCY
	   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
	   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
	   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
	   ,BANK_DETAILS_EC.COD_OPER_BANK
	   ,TYPE_RECEIPT.COD_TYPE_REC
	   ,TYPE_RECEIPT.CODE AS TYPE_RECEIPT
	   ,CARDS_TOBRANCH.CARDNUMBER
	   ,CARDS_TOBRANCH.ACCOUNTID AS 'ACCOUNTID'
	   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS 'COD_CARD_BRANCH'
	   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS 'TRANSACTION_ONLINE'
	   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
	   ,COMMERCIAL_ESTABLISHMENT.BILLET_TAX
		--  , COMMERCIAL_ESTABLISHMENT.BILLET_DEAD      
	   ,CASE
			WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
			ELSE 0
		END [FINANCE_BLOCK]
	   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_SPOT]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_BILLET]

	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CODSPLITBILLET
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_SPLIT_BILLET]

	   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
					AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
					AND SERVICES_AVAILABLE.ACTIVE = 1
					AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
					AND SERVICES_AVAILABLE.COD_EC IS NULL)
				> 0 THEN 1
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_SPLIT]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_CUSTOMERINSTALLMENT]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_SCHRETENTION]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_MULTIEC_SERVICE
					AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_MULTI_EC]

	   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
	   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
	   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
	   ,BANK_DETAILS_EC.IS_ASSIGNMENT
	   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
	   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
	   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
	   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
	   ,MEET_COSTUMER.CNPJ [ACCEPTANCE]
	   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) QTY_EMPLOYEES
	   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AVERAGE_BILLING
	   ,MEET_COSTUMER.URL_SITE
	   ,MEET_COSTUMER.FACEBOOK
	   ,MEET_COSTUMER.INSTAGRAM
	   ,MEET_COSTUMER.STREET
	   ,MEET_COSTUMER.COMPLEMENT [COMPLEMENTO]
	   ,MEET_COSTUMER.ANOTHER_INFO
	   ,MEET_COSTUMER.NUMBER
	   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
	   ,MEET_COSTUMER.CITY AS MEET_CITY
	   ,MEET_COSTUMER.STATES
	   ,MEET_COSTUMER.REFERENCEPOINT
	   ,MEET_COSTUMER.ZIPCODE
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
					AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
					AND SERVICES_AVAILABLE.ACTIVE = 1)
				> 0 THEN 1
			ELSE 0
		END [HAS_TRANSLATE]
	   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_PRESENTIAL_TRANSACTION]
	   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_ONLINE_TRANSACTION]
	   ,COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED
	   ,REQ_LANGUAGE_COMERCIAL.COD_COUNTRY
	   ,REQ_LANGUAGE_COMERCIAL.COD_CURRRENCY
	   ,REQ_LANGUAGE_COMERCIAL.COD_LANGUAGE
	   ,rs.SITUATION_EC
	FROM COMMERCIAL_ESTABLISHMENT
	INNER JOIN BRANCH_EC
		ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	INNER JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
	INNER JOIN ADDRESS_BRANCH
		ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
			AND ADDRESS_BRANCH.ACTIVE = 1
	INNER JOIN NEIGHBORHOOD
		ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
	INNER JOIN CITY
		ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
	INNER JOIN [STATE]
		ON [STATE].COD_STATE = CITY.COD_STATE
	INNER JOIN COUNTRY
		ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
	INNER JOIN TYPE_RECEIPT
		ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
	LEFT JOIN BANK_DETAILS_EC
		ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
			AND BANK_DETAILS_EC.ACTIVE = 1
			AND BANK_DETAILS_EC.IS_CERC = 0
	LEFT JOIN BANKS
		ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
	LEFT JOIN ACCOUNT_TYPE
		ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
	INNER JOIN SEGMENTS
		ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
	INNER JOIN SALES_REPRESENTATIVE
		ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
	LEFT JOIN CARDS_TOBRANCH
		ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
	INNER JOIN BRANCH_BUSINESS
		ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
	LEFT JOIN MEET_COSTUMER
		ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	LEFT JOIN REQ_LANGUAGE_COMERCIAL
		ON REQ_LANGUAGE_COMERCIAL.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
			AND REQ_LANGUAGE_COMERCIAL.ACTIVE = 1
	INNER JOIN RISK_SITUATION rs
		ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION
	WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
	AND (CARDS_TOBRANCH.COD_SITUATION = 15
	OR CARDS_TOBRANCH.COD_SITUATION IS NULL)


END;

GO

IF OBJECT_ID('SP_LS_EC_AFFILIATOR') IS NOT NULL
	DROP PROCEDURE SP_LS_EC_AFFILIATOR;
GO
CREATE PROCEDURE [dbo].[SP_LS_EC_AFFILIATOR]
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_LS_EC_AFFILIATOR]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author VERSION Date Description  
------------------------------------------------------------------------------------------  
Gian Luca Dalle Cort V1 02/08/2018 CREATION  
LUCAS AGUIAR V2 08/04/2019 PEGAR O SERVIÇO CERTO E ADD GROUP BY  
Caike Uchôa V3 31/05/2019 Ajuste no Left join da service_avaliable  
Caike Uchôa V4 23/09/2019 pegar o COD_RISK_SITUATION  
---------------------------------------- --------------------------------------------------*/ (@COD_AFFILIATOR INT,
@HAS_SPOT INT = NULL,
@COD_SALES_REP INT = NULL)
AS
	DECLARE @QUERY_ VARCHAR(MAX)
	BEGIN
		SET @QUERY_ = '  
 SELECT  
 COMMERCIAL_ESTABLISHMENT.COD_EC,  
 COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,  
 COMMERCIAL_ESTABLISHMENT.NAME,  
 COMMERCIAL_ESTABLISHMENT.TRADING_NAME,  
 BRANCH_EC.COD_BRANCH,  
 AFFILIATOR.NAME AS ''AFL_NAME'',  
 AFFILIATOR.COD_AFFILIATOR,  
  ISNULL(SERVICES_AVAILABLE.ACTIVE, 0) AS HAS_SPOT  
 ,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC  
 ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION  
 ,RISK_SITUATION.SITUATION_EC
  FROM COMMERCIAL_ESTABLISHMENT  
 INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC  
 LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR  
 LEFT JOIN SERVICES_AVAILABLE ON COMMERCIAL_ESTABLISHMENT.COD_EC = SERVICES_AVAILABLE.COD_EC AND SERVICES_AVAILABLE.COD_ITEM_SERVICE = 1 AND SERVICES_AVAILABLE.ACTIVE= 1  
 JOIN RISK_SITUATION ON RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
 WHERE  
 COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = ' + CAST(@COD_AFFILIATOR AS VARCHAR) + '  
 AND COMMERCIAL_ESTABLISHMENT.ACTIVE = 1  
 AND BRANCH_EC.TYPE_BRANCH = ''PRINCIPAL''';
		IF @HAS_SPOT IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND SERVICES_AVAILABLE.ACTIVE = ' + CAST(@HAS_SPOT AS VARCHAR)
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = ' + CAST(@COD_SALES_REP AS VARCHAR)
		SET @QUERY_ = @QUERY_ + 'GROUP BY COMMERCIAL_ESTABLISHMENT.COD_EC,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ,COMMERCIAL_ESTABLISHMENT.NAME,COMMERCIAL_ESTABLISHMENT.TRADING_NAME,  
 BRANCH_EC.COD_BRANCH,AFFILIATOR.NAME,AFFILIATOR.COD_AFFILIATOR,SERVICES_AVAILABLE.ACTIVE,COMMERCIAL_ESTABLISHMENT.DEFAULT_EC,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION, RISK_SITUATION.SITUATION_EC'
		EXEC (@QUERY_);
	END;

GO

IF OBJECT_ID('SP_VALIDATE_TRANSACTION') IS NOT NULL
	DROP PROCEDURE SP_VALIDATE_TRANSACTION;
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_TRANSACTION]

/***********************************************************************************************************************************************************************      
------------------------------------------------------------------------------------------------------------------------------------------------                            
Procedure Name: [SP_VALIDATE_TRANSACTION]                            
Project.......: TKPP                            
--------------------------------------------------------------------------------------------------------------------------------------------------                            
Author                          VERSION        Date                            Description                            
--------------------------------------------------------------------------------------------------------------------------------------------------                            
Kennedy Alef     V1   27/07/2018       Creation                            
Gian Luca Dalle Cort   V1   14/08/2018        Changed            
Lucas Aguiar     v3   17-04-2019    Passar parâmetro opcional (CODE_SPLIT) e fazer suas respectivas inserções              
Lucas Aguiar     v4   23-04-2019    Parametro opc cod ec        
Kennedy Alef  v5   12-11-2019    Card holder name, doc holder, logical number                         
--------------------------------------------------------------------------------------------------------------------------------------------------      
***********************************************************************************************************************************************************************/ (@TERMINALID INT,
@TYPETRANSACTION VARCHAR(100),
@AMOUNT DECIMAL(22, 6),
@QTY_PLOTS INT,
@PAN VARCHAR(100),
@BRAND VARCHAR(200),
@TRCODE VARCHAR(200),
@TERMINALDATE DATETIME,
@CODPROD_ACQ INT,
@TYPE VARCHAR(100),
@COD_BRANCH INT,
@CODE_SPLIT INT = NULL,
@COD_EC INT = NULL,
@HOLDER_NAME VARCHAR(100) = NULL,
@HOLDER_DOC VARCHAR(100) = NULL,
@LOGICAL_NUMBER VARCHAR(100) = NULL,
@COD_TRAN_PROD INT = NULL,
@COD_EC_PRD INT = NULL)
AS
BEGIN



	DECLARE @CODTX INT;



	DECLARE @CODPLAN INT;



	DECLARE @INTERVAL INT;



	DECLARE @TERMINALACTIVE INT;



	DECLARE @CODEC INT;



	DECLARE @CODASS INT;



	DECLARE @CODAC INT;



	DECLARE @COMPANY INT;



	DECLARE @BRANCH INT = 0;



	DECLARE @TYPETRAN INT;



	DECLARE @ACTIVE_EC INT;



	DECLARE @CONT INT;



	DECLARE @COD_COMP INT;



	DECLARE @LIMIT DECIMAL(22, 6);



	DECLARE @COD_AFFILIATOR INT;



	DECLARE @PLAN_AFF INT;



	DECLARE @CODTR_RETURN INT;



	DECLARE @EC_TRANS INT;



	DECLARE @GEN_TITLES INT;



	DECLARE @COD_ERROR INT;


	DECLARE @ERROR_DESCRIPTION VARCHAR(100)

	DECLARE @COD_RISK_SITUATION INT;


	BEGIN

		SELECT TOP 1
			@CODTX = [ASS_TAX_DEPART].[COD_ASS_TX_DEP]
		   ,@CODPLAN = [ASS_TAX_DEPART].[COD_ASS_TX_DEP]
		   ,@INTERVAL = [ASS_TAX_DEPART].[INTERVAL]
		   ,@TERMINALACTIVE = [EQUIPMENT].[ACTIVE]
		   ,@CODEC = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
		   ,@CODASS = [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL]
		   ,@COMPANY = [COMPANY].[COD_COMP]
		   ,@TYPETRAN = [TRANSACTION_TYPE].[COD_TTYPE]
		   ,@ACTIVE_EC = [COMMERCIAL_ESTABLISHMENT].[ACTIVE]
		   ,@BRANCH = [BRANCH_EC].[COD_BRANCH]
		   ,@COD_COMP = [COMPANY].[COD_COMP]
		   ,@LIMIT = [COMMERCIAL_ESTABLISHMENT].[TRANSACTION_LIMIT]
		   ,@COD_AFFILIATOR = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
		   ,@GEN_TITLES = [BRAND].[GEN_TITLES]
		   ,@COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
		FROM [ASS_DEPTO_EQUIP]
		LEFT JOIN [EQUIPMENT]
			ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
		LEFT JOIN [EQUIPMENT_MODEL]
			ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
		LEFT JOIN [DEPARTMENTS_BRANCH]
			ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
		LEFT JOIN [BRANCH_EC]
			ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
		LEFT JOIN [DEPARTMENTS]
			ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
		LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
			ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
		LEFT JOIN [COMPANY]
			ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
		LEFT JOIN [ASS_TAX_DEPART]
			ON [ASS_TAX_DEPART].[COD_DEPTO_BRANCH] = [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
		LEFT JOIN [TRANSACTION_TYPE]
			ON [TRANSACTION_TYPE].[COD_TTYPE] = [ASS_TAX_DEPART].[COD_TTYPE]
		LEFT JOIN [BRAND]
			ON [BRAND].[COD_BRAND] = [ASS_TAX_DEPART].[COD_BRAND]
				AND [BRAND].[COD_TTYPE] = [TRANSACTION_TYPE].[COD_TTYPE]
		WHERE [ASS_TAX_DEPART].[ACTIVE] = 1
		AND [ASS_DEPTO_EQUIP].[ACTIVE] = 1
		AND [ASS_TAX_DEPART].[COD_SOURCE_TRAN] = 2
		AND [EQUIPMENT].[COD_EQUIP] = @TERMINALID
		AND LOWER([TRANSACTION_TYPE].[NAME]) = @TYPETRANSACTION
		AND [ASS_TAX_DEPART].[QTY_INI_PLOTS] <=
		@QTY_PLOTS
		AND [ASS_TAX_DEPART].[QTY_FINAL_PLOTS] >= @QTY_PLOTS
		AND ([BRAND].[NAME] = @BRAND
		OR [BRAND].[COD_BRAND] IS NULL)
		AND ([ASS_TAX_DEPART].COD_MODEL = [EQUIPMENT_MODEL].COD_MODEL
		OR [ASS_TAX_DEPART].COD_MODEL IS NULL);


		IF (@COD_EC IS NOT NULL)
			SET @EC_TRANS = @COD_EC;
		ELSE
			SET @EC_TRANS = @CODEC;


		IF @AMOUNT > @LIMIT
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '402 - Transaction limit value exceeded"d'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
			THROW 60002, '402', 1;

		END;

		IF @CODTX IS NULL

		/*******************************************      
		 PROCEDURE DE REGISTRO DE TRANSAÇÕES NEGADAS      
		*******************************************/

		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '404 - PLAN/TAX NOT FOUND'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
			THROW 60002, '404', 1;
		END;

		IF @COD_AFFILIATOR IS NOT NULL
		BEGIN

			SELECT TOP 1
				@PLAN_AFF = [COD_PLAN_TAX_AFF]
			FROM [PLAN_TAX_AFFILIATOR]
			INNER JOIN [AFFILIATOR]
				ON [AFFILIATOR].[COD_AFFILIATOR] = [PLAN_TAX_AFFILIATOR].[COD_AFFILIATOR]
			WHERE [PLAN_TAX_AFFILIATOR].[COD_AFFILIATOR] = @COD_AFFILIATOR
			AND @QTY_PLOTS BETWEEN [QTY_INI_PLOTS] AND [QTY_FINAL_PLOTS]
			AND [COD_TTYPE] = @TYPETRAN
			AND [PLAN_TAX_AFFILIATOR].[ACTIVE] = 1;

			IF @PLAN_AFF IS NULL
			BEGIN

				EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
												,@PAN = @PAN
												,@BRAND = @BRAND
												,@CODASS_DEPTO_TERMINAL = @CODASS
												,@COD_TTYPE = @TYPETRAN
												,@PLOTS = @QTY_PLOTS
												,@CODTAX_ASS = @CODTX
												,@CODAC = NULL
												,@CODETR = @TRCODE
												,@COMMENT = '404 - PLAN/TAX NOT FOUND TO AFFILIATOR'
												,@TERMINALDATE = @TERMINALDATE
												,@TYPE = @TYPE
												,@COD_COMP = @COD_COMP
												,@COD_AFFILIATOR = @COD_AFFILIATOR
												,@SOURCE_TRAN = 2
												,@CODE_SPLIT = @CODE_SPLIT
												,@COD_EC = @EC_TRANS
												,@HOLDER_NAME = @HOLDER_NAME
												,@HOLDER_DOC = @HOLDER_DOC
												,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
				THROW 60002, '404', 1;

			END;

		END;


		IF @TERMINALACTIVE = 0

		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '003 - Blocked terminal'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
			THROW 60002, '003', 1;

		END;

		IF @COD_RISK_SITUATION <> 2

		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '009 - Blocked commercial establishment'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
			THROW 60002, '009', 1;

		END;

		EXEC [SP_VAL_LIMIT_EC] @CODEC
							  ,@AMOUNT
							  ,@PAN = @PAN
							  ,@BRAND = @BRAND
							  ,@CODASS_DEPTO_TERMINAL = @CODASS
							  ,@COD_TTYPE = @TYPETRAN
							  ,@PLOTS = @QTY_PLOTS
							  ,@CODTAX_ASS = @CODTX
							  ,@CODETR = @TRCODE
							  ,@TYPE = @TYPE
							  ,@TERMINALDATE = @TERMINALDATE
							  ,@COD_COMP = @COD_COMP
							  ,@COD_AFFILIATOR = @COD_AFFILIATOR
							  ,@CODE_SPLIT = @CODE_SPLIT
							  ,@EC_TRANS = @EC_TRANS
							  ,@HOLDER_NAME = @HOLDER_NAME
							  ,@HOLDER_DOC = @HOLDER_DOC
							  ,@LOGICAL_NUMBER = @LOGICAL_NUMBER
							  ,@SOURCE_TRAN = 2;



		EXEC @CODAC = [SP_DEFINE_ACQ] @TR_TYPE = @TYPETRAN
									 ,@COMPANY = @COMPANY
									 ,@QTY_PLOTS = @QTY_PLOTS
									 ,@BRAND = @BRAND
									 ,@COD_PR = @CODPROD_ACQ;

		IF @CODAC = 0

		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '004 - Acquirer key not found for terminal  '
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
			THROW 60002, '004', 1;

		END;

		IF @GEN_TITLES = 0
			AND @CODE_SPLIT IS NOT NULL
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '012 - PRIVATE LABELS ESTABLISHMENTS CAN NOT HAVE SPLIT'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
			THROW 60002, '012', 1;
		END;

		--IF @COD_RISK_SITUATION <> 2
		--BEGIN
		--	EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
		--									,@PAN = @PAN
		--									,@BRAND = @BRAND
		--									,@CODASS_DEPTO_TERMINAL = @CODASS
		--									,@COD_TTYPE = @TYPETRAN
		--									,@PLOTS = @QTY_PLOTS
		--									,@CODTAX_ASS = @CODTX
		--									,@CODAC = NULL
		--									,@CODETR = @TRCODE
		--									,@COMMENT = '020 - PENDING RISK RELEASE ESTABLISHMENT'
		--									,@TERMINALDATE = @TERMINALDATE
		--									,@TYPE = @TYPE
		--									,@COD_COMP = @COD_COMP
		--									,@COD_AFFILIATOR = @COD_AFFILIATOR
		--									,@SOURCE_TRAN = 2
		--									,@CODE_SPLIT = @CODE_SPLIT
		--									,@COD_EC = @EC_TRANS
		--									,@HOLDER_NAME = @HOLDER_NAME
		--									,@HOLDER_DOC = @HOLDER_DOC
		--									,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
		--	THROW 60002, '020', 1;

		--END


		IF @COD_TRAN_PROD IS NOT NULL
		BEGIN

			EXEC [SP_VAL_SPLIT_MULT_EC] @COD_TRAN_PROD = @COD_TRAN_PROD
									   ,@COD_EC = @EC_TRANS
									   ,@QTY_PLOTS = @QTY_PLOTS
									   ,@BRAND = @BRAND
									   ,@COD_ERROR = @COD_ERROR OUTPUT
									   ,@ERROR_DESCRIPTION = @ERROR_DESCRIPTION OUTPUT;

			IF @COD_ERROR IS NOT NULL
			BEGIN

				EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
												,@PAN = @PAN
												,@BRAND = @BRAND
												,@CODASS_DEPTO_TERMINAL = @CODASS
												,@COD_TTYPE = @TYPETRAN
												,@PLOTS = @QTY_PLOTS
												,@CODTAX_ASS = @CODTX
												,@CODAC = NULL
												,@CODETR = @TRCODE
												,@COMMENT = @ERROR_DESCRIPTION
												,@TERMINALDATE = @TERMINALDATE
												,@TYPE = @TYPE
												,@COD_COMP = @COD_COMP
												,@COD_AFFILIATOR = @COD_AFFILIATOR
												,@SOURCE_TRAN = 2
												,@CODE_SPLIT = @CODE_SPLIT
												,@COD_EC = @EC_TRANS
												,@HOLDER_NAME = @HOLDER_NAME
												,@HOLDER_DOC = @HOLDER_DOC
												,@LOGICAL_NUMBER = @LOGICAL_NUMBER;
				THROW 60002, @COD_ERROR, 1;



			END;


		END;



		EXECUTE [SP_REG_TRANSACTION] @AMOUNT
									,@PAN
									,@BRAND
									,@CODASS_DEPTO_TERMINAL = @CODASS
									,@COD_TTYPE = @TYPETRAN
									,@PLOTS = @QTY_PLOTS
									,@CODTAX_ASS = @CODTX
									,@CODAC = @CODAC
									,@CODETR = @TRCODE
									,@TERMINALDATE = @TERMINALDATE
									,@COD_ASS_TR_ACQ = @CODAC
									,@CODPROD_ACQ = @CODPROD_ACQ
									,@TYPE = @TYPE
									,@COD_COMP = @COD_COMP
									,@COD_AFFILIATOR = @COD_AFFILIATOR
									,@SOURCE_TRAN = 2
									,@CODE_SPLIT = @CODE_SPLIT
									,@EC_TRANS = @EC_TRANS
									,@RET_CODTRAN = @CODTR_RETURN OUTPUT
									,@HOLDER_NAME = @HOLDER_NAME
									,@HOLDER_DOC = @HOLDER_DOC
									,@LOGICAL_NUMBER = @LOGICAL_NUMBER
									,@COD_PRD = @COD_TRAN_PROD
									,@COD_EC_PRD = @COD_EC_PRD

		SELECT
			@CODAC AS [ACQUIRER]
		   ,@TRCODE AS [TRAN_CODE]
		   ,@CODTR_RETURN AS [COD_TRAN];


	END;
END;

GO
IF OBJECT_ID('SP_VALIDATE_TRANSACTION_ON') IS NOT NULL
	DROP PROCEDURE [SP_VALIDATE_TRANSACTION_ON]
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_TRANSACTION_ON]
/*------------------------------------------------------------------------------------------------------------------------------------------                                                
Procedure Name: [SP_VALIDATE_TRANSACTION]                                                
Project.......: TKPP                                                
------------------------------------------------------------------------------------------------------------------------------------------------                                                
Author                          VERSION        Date                            Description                                                
-------------------------------------------------------------------------------------------------------------------------------------------------                                                
Kennedy Alef     V1   20/08/2018    Creation                                                
Lucas Aguiar     v2   17-04-2019    Passar parâmetro opcional (CODE_SPLIT) e fazer suas respectivas inserções                                    
Lucas Aguiar     v4   23-04-2019    Parametro opc cod ec                                   
------------------------------------------------------------------------------------------------------------------------------------------------*/ (@TERMINALID VARCHAR(100)
, @TYPETRANSACTION VARCHAR(100)
, @AMOUNT DECIMAL(22, 6)
, @QTY_PLOTS INT
, @PAN VARCHAR(100)
, @BRAND VARCHAR(200)
, @TRCODE VARCHAR(200)
, @TERMINALDATE DATETIME = NULL
, @CODPROD_ACQ INT
, @TYPE VARCHAR(100)
, @COD_BRANCH INT = NULL
, @MID VARCHAR(100)
, @DESCRIPTION VARCHAR(300) = NULL
, @CODE_SPLIT INT = NULL
, @COD_EC INT = NULL
, @CREDITOR_DOC VARCHAR(100) = NULL
, @DESCRIPTION_TRAN VARCHAR(100) = NULL
, @TRACKING VARCHAR(100) = NULL
, @HOLDER_NAME VARCHAR(100) = NULL
, @HOLDER_DOC VARCHAR(100) = NULL
, @LOGICAL_NUMBER VARCHAR(100) = NULL
, @CUSTOMER_EMAIL VARCHAR(100) = NULL
, @LINK_MODE INT = NULL
, @CUSTOMER_IDENTIFICATION VARCHAR(100) = NULL
, @BILLCODE VARCHAR(64) = NULL
, @BILLEXPIREDATE DATETIME = NULL)
AS
	DECLARE @CODTX INT;





	DECLARE @CODPLAN INT;





	DECLARE @INTERVAL INT;





	DECLARE @TERMINALACTIVE INT;





	DECLARE @CODEC INT;





	DECLARE @CODASS INT;





	DECLARE @CODAC INT;





	DECLARE @COMPANY INT;





	DECLARE @BRANCH INT = 0;





	DECLARE @TYPETRAN INT;





	DECLARE @ACTIVE_EC INT;





	DECLARE @CONT INT;





	DECLARE @COD_COMP INT;





	DECLARE @LIMIT DECIMAL(22, 6);





	DECLARE @COD_AFFILIATOR INT;





	DECLARE @ONLINE INT = NULL;





	DECLARE @TYPE_CREDIT INT;





	DECLARE @EC_TRANS INT;





	DECLARE @GEN_TITLES INT;
	DECLARE @COD_RISK_SITUATION INT;




	--DECLARE @PRODUCT_ACQ INT;                                        
	BEGIN
		SELECT
			@CODTX = ASS_TAX_DEPART.COD_ASS_TX_DEP
		   ,@CODPLAN = ASS_TAX_DEPART.COD_ASS_TX_DEP
		   ,@INTERVAL = ASS_TAX_DEPART.INTERVAL
		   ,@TERMINALACTIVE = EQUIPMENT.ACTIVE
		   ,@CODEC = COMMERCIAL_ESTABLISHMENT.COD_EC
		   ,@CODASS = [ASS_DEPTO_EQUIP].COD_ASS_DEPTO_TERMINAL
		   ,@COMPANY = COMPANY.COD_COMP
		   ,@TYPETRAN = TRANSACTION_TYPE.COD_TTYPE
		   ,@ACTIVE_EC = COMMERCIAL_ESTABLISHMENT.ACTIVE
		   ,@BRANCH = BRANCH_EC.COD_BRANCH
		   ,@COD_COMP = COMPANY.COD_COMP
		   ,@LIMIT = COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
		   ,@COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
		   ,@ONLINE = COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE
		   ,@GEN_TITLES = BRAND.GEN_TITLES
		   ,@COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
		FROM [ASS_DEPTO_EQUIP]
		LEFT JOIN EQUIPMENT
			ON EQUIPMENT.COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
		LEFT JOIN EQUIPMENT_MODEL
			ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
		LEFT JOIN DEPARTMENTS_BRANCH
			ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = [ASS_DEPTO_EQUIP].COD_DEPTO_BRANCH
		LEFT JOIN BRANCH_EC
			ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
		LEFT JOIN DEPARTMENTS
			ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
		LEFT JOIN COMMERCIAL_ESTABLISHMENT
			ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
		LEFT JOIN COMPANY
			ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
		LEFT JOIN ASS_TAX_DEPART
			ON ASS_TAX_DEPART.COD_DEPTO_BRANCH = DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
		LEFT JOIN TRANSACTION_TYPE
			ON TRANSACTION_TYPE.COD_TTYPE = ASS_TAX_DEPART.COD_TTYPE
		LEFT JOIN BRAND
			ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
				AND BRAND.COD_TTYPE = TRANSACTION_TYPE.COD_TTYPE
		--LEFT JOIN EXTERNAL_DATA_EC_ACQ ON EXTERNAL_DATA_EC_ACQ.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC                                                
		WHERE ASS_TAX_DEPART.ACTIVE = 1
		AND ASS_TAX_DEPART.COD_SOURCE_TRAN = 1
		AND [ASS_DEPTO_EQUIP].ACTIVE = 1
		AND EQUIPMENT.SERIAL = @TERMINALID
		AND LOWER(TRANSACTION_TYPE.NAME) = @TYPETRANSACTION
		AND ASS_TAX_DEPART.QTY_INI_PLOTS <= @QTY_PLOTS
		AND ASS_TAX_DEPART.QTY_FINAL_PLOTS >= @QTY_PLOTS
		AND (BRAND.[NAME] = @BRAND
		OR BRAND.COD_BRAND IS NULL)


		IF (@CODE_SPLIT = 0
			OR @CODE_SPLIT IS NULL)
			SET @EC_TRANS = 3;
		ELSE
			SET @EC_TRANS = @CODEC;

		--AND (EXTERNAL_DATA_EC_ACQ.[NAME] = 'MID' OR EXTERNAL_DATA_EC_ACQ.[NAME] IS NULL)                                             
		IF @ONLINE = NULL
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '402 - TRANSACTION ONLINE NOT ENABLE'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 1
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;

			THROW 60002
			, '402'
			, 1;
		END;

		IF @AMOUNT > @LIMIT
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '402 - Transaction limit value exceeded'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 1
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;

			THROW 60002
			, '402'
			, 1;
		END;

		IF @CODTX IS NULL
		/* PROCEDURE DE REGISTRO DE TRANSAÇÕES NEGADAS*/
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '404 - PLAN/TAX NOT FOUND'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 1
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;

			THROW 60002
			, '404'
			, 1;
		END;

		IF @TERMINALACTIVE = 0
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '003 - Blocked terminal  '
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 1
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;

			THROW 60002
			, '003'
			, 1;
		END

		IF @COD_RISK_SITUATION <> 2
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '009 - Blocked commercial establishment'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 1
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;

			THROW 60002
			, '009'
			, 1;
		END

		EXEC SP_VAL_LIMIT_EC @CODEC
							,@AMOUNT
							,@PAN = @PAN
							,@BRAND = @BRAND
							,@CODASS_DEPTO_TERMINAL = @CODASS
							,@COD_TTYPE = @TYPETRAN
							,@PLOTS = @QTY_PLOTS
							,@CODTAX_ASS = @CODTX
							,@CODETR = @TRCODE
							,@TYPE = @TYPE
							,@TERMINALDATE = @TERMINALDATE
							,@COD_COMP = @COD_COMP
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@CODE_SPLIT = @CODE_SPLIT
							,@EC_TRANS = @EC_TRANS
							,@HOLDER_NAME = @HOLDER_NAME
							,@HOLDER_DOC = @HOLDER_DOC
							,@LOGICAL_NUMBER = @LOGICAL_NUMBER
							,@SOURCE_TRAN = 1
							,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
							,@LINK_MODE = @LINK_MODE
							,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION;


		EXEC @CODAC = SP_DEFINE_ACQ @TR_TYPE = @TYPETRAN
								   ,@COMPANY = @COMPANY
								   ,@QTY_PLOTS = @QTY_PLOTS
								   ,@BRAND = @BRAND
								   ,@DOC_CREDITOR = @CREDITOR_DOC

		-- DEFINIR SE PARCELA > 1 ENTAO , CREDITO PARCELADO                                      
		IF @QTY_PLOTS > 1
			SET @TYPE_CREDIT = 2;
		ELSE
			SET @TYPE_CREDIT = 1;

		IF (@CREDITOR_DOC IS NOT NULL)
		BEGIN
			SELECT
				@CODPROD_ACQ = [PRODUCTS_ACQUIRER].COD_PR_ACQ
			FROM [PRODUCTS_ACQUIRER]
			INNER JOIN BRAND
				ON BRAND.COD_BRAND = PRODUCTS_ACQUIRER.COD_BRAND
			INNER JOIN ASS_TR_TYPE_COMP
				ON ASS_TR_TYPE_COMP.COD_AC = PRODUCTS_ACQUIRER.COD_AC
					AND ASS_TR_TYPE_COMP.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
			WHERE ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = @CODAC
			AND [PRODUCTS_ACQUIRER].PLOT_VALUE = @TYPE_CREDIT
			AND BRAND.NAME = @BRAND
		END


		IF @CODAC = 0
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '004 - Acquirer key not found for terminal '
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 1
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;


			THROW 60002
			, '004'
			, 1;
		END;



		IF @GEN_TITLES = 0
			AND @CODE_SPLIT IS NOT NULL
		BEGIN
			EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
											,@PAN = @PAN
											,@BRAND = @BRAND
											,@CODASS_DEPTO_TERMINAL = @CODASS
											,@COD_TTYPE = @TYPETRAN
											,@PLOTS = @QTY_PLOTS
											,@CODTAX_ASS = @CODTX
											,@CODAC = NULL
											,@CODETR = @TRCODE
											,@COMMENT = '012 - PRIVATE LABELS ESTABLISHMENTS CAN NOT HAVE SPLIT'
											,@TERMINALDATE = @TERMINALDATE
											,@TYPE = @TYPE
											,@COD_COMP = @COD_COMP
											,@COD_AFFILIATOR = @COD_AFFILIATOR
											,@SOURCE_TRAN = 2
											,@CODE_SPLIT = @CODE_SPLIT
											,@COD_EC = @EC_TRANS
											,@CREDITOR_DOC = @CREDITOR_DOC
											,@HOLDER_NAME = @HOLDER_NAME
											,@HOLDER_DOC = @HOLDER_DOC
											,@LOGICAL_NUMBER = @LOGICAL_NUMBER
											,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
											,@LINK_MODE = @LINK_MODE
											,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
											,@BILLCODE = @BILLCODE
											,@BILLEXPIREDATE = @BILLEXPIREDATE;

			THROW 60002, '012', 1;
		END;

		EXECUTE [SP_REG_TRANSACTION] @AMOUNT
									,@PAN
									,@BRAND
									,@CODASS_DEPTO_TERMINAL = @CODASS
									,@COD_TTYPE = @TYPETRAN
									,@PLOTS = @QTY_PLOTS
									,@CODTAX_ASS = @CODTX
									,@CODAC = @CODAC
									,@CODETR = @TRCODE
									,@TERMINALDATE = @TERMINALDATE
									,@COD_ASS_TR_ACQ = @CODAC
									,@CODPROD_ACQ = @CODPROD_ACQ
									,@TYPE = @TYPE
									,@COD_COMP = @COD_COMP
									,@COD_AFFILIATOR = @COD_AFFILIATOR
									,@SOURCE_TRAN = 1
									,@POSWEB = 0
									,@CODE_SPLIT = @CODE_SPLIT
									,@EC_TRANS = @EC_TRANS
									,@CREDITOR_DOC = @CREDITOR_DOC
									,@TRACKING_DESCRIPTION = @TRACKING
									,@DESCRIPTION = @DESCRIPTION_TRAN
									,@HOLDER_NAME = @HOLDER_NAME
									,@HOLDER_DOC = @HOLDER_DOC
									,@LOGICAL_NUMBER = @LOGICAL_NUMBER
									,@CUSTOMER_EMAIL = @CUSTOMER_EMAIL
									,@LINK_MODE = @LINK_MODE
									,@CUSTOMER_IDENTIFICATION = @CUSTOMER_IDENTIFICATION
									,@BILLCODE = @BILLCODE
									,@BILLEXPIREDATE = @BILLEXPIREDATE;
		--SELECT                                                
		--  'ADQ'  AS ACQUIRER,                               
		--  '1234567489' AS TRAN_CODE,                                              
		--  'ESTABLISHMENT COMMERCIAL TEST' AS EC                                            
		SELECT
			EXTERNAL_DATA_EC_ACQ.[VALUE] AS EC
		   ,@TRCODE AS TRAN_CODE
		   ,ACQUIRER.NAME AS ACQUIRER
		--,@CODPROD_ACQ AS PRODUCT            
		FROM ASS_TR_TYPE_COMP
		INNER JOIN ACQUIRER
			ON ACQUIRER.COD_AC = ASS_TR_TYPE_COMP.COD_AC
		LEFT JOIN EXTERNAL_DATA_EC_ACQ
			ON EXTERNAL_DATA_EC_ACQ.COD_AC = ASS_TR_TYPE_COMP.COD_AC
		WHERE
		--ISNULL(EXTERNAL_DATA_EC_ACQ.[NAME],'MID') = 'MID' AND                                         
		ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = @CODAC
	END;

GO

IF OBJECT_ID('VW_COMPANY_EC_BR_DEP') IS NOT NULL
	DROP VIEW VW_COMPANY_EC_BR_DEP
GO
CREATE VIEW [dbo].[VW_COMPANY_EC_BR_DEP]
AS
SELECT
	ISNULL(AFFILIATOR.[NAME], COMPANY.NAME) AS COMPANY
   ,COMPANY.COD_COMP AS COD_COMP
   ,COMPANY.FIREBASE_NAME AS FIREBASE_NAME
   ,COMMERCIAL_ESTABLISHMENT.NAME AS EC
   ,COMMERCIAL_ESTABLISHMENT.COD_EC
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS CPF_CNPJ_EC
   ,COMMERCIAL_ESTABLISHMENT.ACTIVE AS SITUATION_EC
   ,BRANCH_EC.NAME AS BRANCH_NAME
   ,BRANCH_EC.TRADING_NAME AS TRADING_NAME_BR
   ,BRANCH_EC.COD_BRANCH
   ,BRANCH_EC.CPF_CNPJ AS CPF_CNPJ_BR
   ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH AS COD_DEPTO_BR
   ,DEPARTMENTS.NAME AS DEPARTMENT
   ,SEGMENTS.NAME AS SEGMENTS
   ,RIGHT('0' + CAST(SEGMENTS.CODE AS VARCHAR(4)), 4) AS MCC
   ,AFFILIATOR.COD_AFFILIATOR AS COD_AFFILIATOR
   ,AFFILIATOR.CPF_CNPJ AS DOC_AFFILIATOR
   ,COMMERCIAL_ESTABLISHMENT.CODE AS MERCHANT_CODE
   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
FROM BRANCH_EC
INNER JOIN COMMERCIAL_ESTABLISHMENT
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
INNER JOIN COMPANY
	ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
INNER JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN DEPARTMENTS
	ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
LEFT JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR

GO


IF OBJECT_ID('SP_VALIDATE_TERMINAL') IS NOT NULL
	DROP PROCEDURE SP_VALIDATE_TERMINAL
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_TERMINAL]
/*----------------------------------------------------------------------------------------     
Procedure Name: [SP_VALIDATE_TERMINAL]     
Project.......: TKPP     
------------------------------------------------------------------------------------------     
Author VERSION Date Description     
------------------------------------------------------------------------------------------     
Kennedy Alef V1 27/07/2018 Creation     
------------------------------------------------------------------------------------------*/ (@TERMINALID INT,
@COD_BRANCH INT,
@SERVICE INT = NULL)
AS
	DECLARE @TERMINALACTVE INT;
	DECLARE @DEPTO INT;
	DECLARE @ECACTIVE INT;
	DECLARE @BRANCH INT;
	DECLARE @COD_EC INT;
	DECLARE @DOC_EC_SOURCE VARCHAR(100);
	DECLARE @DOC_AFF_SOURCE VARCHAR(100);
	DECLARE @COD_EC_SOURCE INT;
	DECLARE @COD_RISK_SITUATION INT;

	BEGIN
		SELECT
			@TERMINALACTVE = EQUIPMENT.ACTIVE
		   ,@DEPTO = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
		   ,@ECACTIVE = VW_COMPANY_EC_BR_DEP.SITUATION_EC
		   ,@BRANCH = VW_COMPANY_EC_BR_DEP.COD_BRANCH
		   ,@DOC_EC_SOURCE = VW_COMPANY_EC_BR_DEP.CPF_CNPJ_EC
		   ,@DOC_AFF_SOURCE = VW_COMPANY_EC_BR_DEP.DOC_AFFILIATOR
		   ,@COD_EC_SOURCE = VW_COMPANY_EC_BR_DEP.MERCHANT_CODE
		   ,@COD_EC = VW_COMPANY_EC_BR_DEP.COD_EC
		   ,@COD_RISK_SITUATION = VW_COMPANY_EC_BR_DEP.COD_RISK_SITUATION
		FROM EQUIPMENT
		LEFT JOIN ASS_DEPTO_EQUIP
			ON ASS_DEPTO_EQUIP.COD_EQUIP = EQUIPMENT.COD_EQUIP
		LEFT JOIN VW_COMPANY_EC_BR_DEP
			ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP.COD_DEPTO_BR

		WHERE EQUIPMENT.COD_EQUIP = @TERMINALID

		IF @TERMINALACTVE IS NULL
			THROW 60002, '006', 1;

		IF @TERMINALACTVE = 0
			THROW 60002, '003', 1;

		IF @DEPTO IS NULL
			THROW 60002, '008', 1;
		IF @COD_RISK_SITUATION <> 2
			THROW 60002, '009', 1;
		--IF @COD_RISK_SITUATION <> 2
		--	THROW 60002, '020', 1;			
		IF @BRANCH != @COD_BRANCH
			THROW 60002, '010', 1;

		SELECT
			@DOC_EC_SOURCE AS DOC_MERCHANT
		   ,@COD_EC AS MERCHANT
		   ,@DOC_AFF_SOURCE AS DOC_AFFILIATOR
		   ,@COD_EC_SOURCE AS MID
	END;
	
	
	
GO



IF OBJECT_ID('VW_COMPANY_EC_BR_DEP_EQUIP_MODEL') IS NOT NULL
	DROP VIEW VW_COMPANY_EC_BR_DEP_EQUIP_MODEL
GO
CREATE VIEW [dbo].[VW_COMPANY_EC_BR_DEP_EQUIP_MODEL]
AS
SELECT
	ISNULL(ASS_DEPTO_EQUIP.DEFAULT_EQUIP, 0) AS DEFAULT_EQUIP
   ,VW_COMPANY_EC_BR_DEP.COMPANY
   ,VW_COMPANY_EC_BR_DEP.COD_COMP
   ,VW_COMPANY_EC_BR_DEP.FIREBASE_NAME
   ,VW_COMPANY_EC_BR_DEP.EC
   ,VW_COMPANY_EC_BR_DEP.COD_EC
   ,VW_COMPANY_EC_BR_DEP.CPF_CNPJ_EC
   ,VW_COMPANY_EC_BR_DEP.SITUATION_EC
   ,VW_COMPANY_EC_BR_DEP.BRANCH_NAME
   ,VW_COMPANY_EC_BR_DEP.TRADING_NAME_BR
   ,VW_COMPANY_EC_BR_DEP.COD_BRANCH
   ,VW_COMPANY_EC_BR_DEP.CPF_CNPJ_BR
   ,VW_COMPANY_EC_BR_DEP.COD_DEPTO_BR
   ,VW_COMPANY_EC_BR_DEP.DEPARTMENT
   ,VW_COMPANY_EC_BR_DEP.SEGMENTS
   ,VW_COMPANY_EC_BR_DEP.MCC
   ,VW_COMPANY_EC_BR_DEP.COD_AFFILIATOR
   ,VW_COMPANY_EC_BR_DEP.DOC_AFFILIATOR
   ,VW_COMPANY_EC_BR_DEP.MERCHANT_CODE
   ,VW_COMPANY_EC_BR_DEP.COD_RISK_SITUATION
   ,ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL
   ,EQUIPMENT.COD_EQUIP
   ,EQUIPMENT.SERIAL
   ,EQUIPMENT_MODEL.CODIGO AS MODEL
   ,MODEL_GROUP.CODE AS MODEL_GROUP
   ,EQUIPMENT.TID
   ,CELL_OPERATOR.NAME AS OPERATOR
   ,EQUIPMENT.PUK
   ,EQUIPMENT.CHIP
FROM VW_COMPANY_EC_BR_DEP
INNER JOIN ASS_DEPTO_EQUIP
	ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP.COD_DEPTO_BR
INNER JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
INNER JOIN EQUIPMENT_MODEL
	ON EQUIPMENT_MODEL.COD_MODEL = EQUIPMENT.COD_MODEL
INNER JOIN MODEL_GROUP
	ON MODEL_GROUP.COD_MODEL_GROUP = EQUIPMENT_MODEL.COD_MODEL_GROUP
LEFT JOIN CELL_OPERATOR
	ON CELL_OPERATOR.COD_OPER = EQUIPMENT.COD_OPER
WHERE ASS_DEPTO_EQUIP.ACTIVE = 1   
  