IF (SELECT
			COUNT(*)
		FROM ITEMS_SERVICES_AVAILABLE isa
		WHERE isa.NAME = 'PIX')
	= 0
BEGIN
	INSERT INTO ITEMS_SERVICES_AVAILABLE (NAME, DESCRIPTION, CODE, ACTIVE)
		VALUES ('PIX', 'PIX', 20, 1);
END

GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'PIX_ACCEPTED'
		AND object_id = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
BEGIN
	ALTER TABLE COMMERCIAL_ESTABLISHMENT ADD PIX_ACCEPTED INT DEFAULT 0
END

GO

IF OBJECT_ID('SP_CONTACT_DATA_EQUIP') IS NOT NULL
	DROP PROCEDURE SP_CONTACT_DATA_EQUIP
GO
CREATE PROCEDURE [dbo].[SP_CONTACT_DATA_EQUIP]
/*----------------------------------------------------------------------------------------            
Procedure Name: [SP_CONTACT_DATA_EQUIP]            
Project.......: TKPP            
------------------------------------------------------------------------------------------            
Author                          VERSION         Date                            Description            
------------------------------------------------------------------------------------------            
Kennedy Alef                      V1         27/07/2018                           Creation            
Fernando Henrique F. O            V2         03/04/2019                           Change              
Lucas Aguiar                      v3         22-04-2019                   Descer se é split ou não            
Caike Uchôa                       v4         15/01/2020                     descer MMC padrão para PF    
Caike Uchoa                       v5         22/09/2020                    Add formatacao de strings  
------------------------------------------------------------------------------------------*/ (@TERMINALID INT)
AS
BEGIN
	SELECT
	TOP 1
		VW_COMPANY_EC_BR_DEP_EQUIP.CPF_CNPJ_BR
	   ,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF
	   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.TRADING_NAME_BR) AS TRADING_NAME_BR
	   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.BRANCH_NAME) AS BRANCH_NAME
	   ,CASE
			WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'
			ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC
		END AS MCC
	   ,COMMERCIAL_ESTABLISHMENT.CODE AS MERCHANT_CODE
	   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.[ADDRESS]), 20) AS [ADDRESS]
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(ADDRESS_BRANCH.[NUMBER])) AS [NUMBER]
	   ,ADDRESS_BRANCH.CEP
	   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.COMPLEMENT), 0) AS COMPLEMENT
	   ,[dbo].[FNC_REMOV_CARAC_ESP](NEIGHBORHOOD.NAME) AS NEIGHBORDHOOD
	   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY.[NAME]) AS CITY
	   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE].UF) AS [STATE]
	   ,COUNTRY.INITIALS
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDI)) AS DDI
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDD)) AS DDD
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].[FNC_REMOV_CARAC_ESP](CONTACT_BRANCH.[NUMBER])) AS TEL_NUMBER
	   ,TYPE_CONTACT.NAME AS TYPE_CONTACT
	   ,EQUIPMENT.COD_EQUIP
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC IS NULL
					AND COD_OPT_SERV = 4)
				> 0 THEN 1
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC IS NULL
					AND COD_OPT_SERV = 2)
				> 0 THEN 0
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
				> 0 THEN 1
			ELSE 0
		END AS [SPLIT]
	   ,(
		CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 13
					AND ACTIVE = 1
					AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
				> 0 THEN 1
			ELSE 0
		END
		) AS MANY_MERCHANTS
	   ,(
		CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 19
					AND ACTIVE = 1
					AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
				> 0 THEN 1
			ELSE 0
		END
		) AS PIX
	   ,ISNULL(COMMERCIAL_ESTABLISHMENT.PIX_ACCEPTED, 0) PIX_ACCEPTED
	FROM VW_COMPANY_EC_BR_DEP_EQUIP
	JOIN ADDRESS_BRANCH
		ON ADDRESS_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
	JOIN NEIGHBORHOOD
		ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
	JOIN CITY
		ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
	JOIN STATE
		ON STATE.COD_STATE = CITY.COD_STATE
	JOIN COUNTRY
		ON COUNTRY.COD_COUNTRY = STATE.COD_COUNTRY
	JOIN CONTACT_BRANCH
		ON CONTACT_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
	JOIN TYPE_CONTACT
		ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT
	JOIN ASS_DEPTO_EQUIP
		ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_DEPTO_BR
	JOIN EQUIPMENT
		ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	INNER JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
	--LEFT JOIN SERVICES_AVAILABLE            
	-- ON SERVICES_AVAILABLE.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC            
	WHERE EQUIPMENT.COD_EQUIP = @TERMINALID
	AND ASS_DEPTO_EQUIP.ACTIVE = 1
	ORDER BY ADDRESS_BRANCH.COD_ADDRESS DESC

END

GO

IF COL_LENGTH('BRAND', 'VISIBLE') IS NULL
	ALTER TABLE BRAND ADD VISIBLE INT DEFAULT 1

UPDATE BRAND
SET VISIBLE = 1
WHERE [NAME] <> 'PIX'

IF (SELECT
			COUNT(*)
		FROM BRAND b
		WHERE b.NAME = 'PIX')
	= 0
	INSERT INTO BRAND (NAME, [GROUP], COD_TTYPE, COD_TYPE_BRAND, GEN_TITLES, AVAILABLE_ONLINE, VISIBLE)
		VALUES ('PIX', 'PIX', 2, 2, 0, 0, 0)

GO

IF OBJECT_ID('SP_LS_BRAND') IS NOT NULL
	DROP PROCEDURE SP_LS_BRAND
GO
CREATE PROCEDURE [dbo].[SP_LS_BRAND]
/*----------------------------------------------------------------------------------------    
Procedure Name: [SP_LS_BRAND]    
Project.......: TKPP    
------------------------------------------------------------------------------------------    
Author                          VERSION        Date                            Description    
------------------------------------------------------------------------------------------    
Kennedy Alef     V1    27/07/2018      Creation    
------------------------------------------------------------------------------------------*/ (@COD_COMP INT)
AS
BEGIN
	SELECT
		BRAND.[NAME] AS BRAND
	   ,COD_BRAND AS BRANDINSIDECODE
	   ,COD_TTYPE AS TRANSACTIONTYPEINSIDECODE
	   ,[GROUP] AS BRAND_GROUP
	   ,TYPE_BRAND.NAME AS 'TYPE_BRAND'
	   ,AVAILABLE_ONLINE [AvailableOnline]
	FROM BRAND
	INNER JOIN TYPE_BRAND
		ON TYPE_BRAND.COD_TYPE_BRAND = BRAND.COD_TYPE_BRAND
	WHERE BRAND.VISIBLE = 1;
END

GO

IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL
	DROP PROCEDURE SP_UPDATE_SERVICES_AFFILIATOR
GO
CREATE PROCEDURE [dbo].[SP_UPDATE_SERVICES_AFFILIATOR]
/*----------------------------------------------------------------------------------------    
    Project.......: TKPP    
------------------------------------------------------------------------------------------    
    Author          VERSION      Date              Description    
------------------------------------------------------------------------------------------    
    Caike Ucha     v1           2020-02-26        Creation    
    Elir Ribeiro    v2           2020-04-20         add service billet    
    Caike Ucha     v3           2020-04-20        add service MultiEC    
    Elir Ribeiro    v4           2020-04-22        alter proc    
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento    
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero    
 Caike Uchoa     v7           2020-09-16        add correcao billetTax na services  
------------------------------------------------------------------------------------------    
***************************************************************************************************/ (@CODAFFILIATED INT,
@COD_COMP INT,
@COD_USER_ALT INT,
@SPOT_TAX DECIMAL(6, 2) = 0,
@HAS_SPOT INT = 0,
@SPLIT_OPT INT = 0,
@HAS_SPLIT INT = 0,
@HAS_NOTIFICATION INT = 0,
@PASSWORD_NOTIFICATION VARCHAR(255) = NULL,
@CLIENTID_NOTIFICATION VARCHAR(255) = NULL,
@LEDGERRETENTION INT = 0,
@LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,
@HAS_TRANSLATION INT = 0,
@OPERATION_AFF INT = 0,
@HAS_BILLET INT = 0,
@BILLET_TAX DECIMAL(6, 2) = 0,
@HAS_SPLIT_BILLET INT = 0,
@MULTIEC_ACTIVE INT = 0,
@TCU_DETAILED INT = 0,
@PLANDZERO INT = 0,
@PlanDZeroJson VARCHAR(256) = NULL,
@PIX INT = 0,
@PIXJSON VARCHAR(256) = NULL)
AS
BEGIN
	DECLARE @CODSPOTSERVICE INT;
	DECLARE @COD_SPLIT_SERVICE INT;
	DECLARE @COD_GWNOTIFICATION INT;
	DECLARE @HAS_CREDENTIAL INT = 0;
	DECLARE @COD_AWAITSPLIT INT = 0;
	DECLARE @COD_TRANSLATE INT;
	DECLARE @CODBILLETSERVICE INT;
	DECLARE @CODSPLITBILLET INT;
	DECLARE @COD_MULTIEC_AFFILIATOR INT;
	DECLARE @COD_TCU_DETAILED INT;
	DECLARE @COD_PLANDZERO INT;
	DECLARE @COD_PIX INT;

	SELECT
		@CODSPOTSERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '1';
	SELECT
		@COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'SPLIT';
	SELECT
		@COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';
	SELECT
		@COD_AWAITSPLIT = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '8';
	SELECT
		@HAS_CREDENTIAL = COUNT(*)
	FROM [ACCESS_APPAPI]
	WHERE [COD_AFFILIATOR] = @CODAFFILIATED
	AND [ACTIVE] = 1;
	SELECT
		@COD_TRANSLATE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'TRANSLATE';
	SELECT
		@CODBILLETSERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '12';
	SELECT
		@CODSPLITBILLET = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '13';
	SELECT
		@COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '14';
	SELECT
		@COD_TCU_DETAILED = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '16';
	SELECT
		@COD_PLANDZERO = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'PlanDZero';
	SELECT
		@COD_PIX = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'PIX';


	IF (@HAS_SPOT = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

	IF (@HAS_SPLIT = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

	IF (@HAS_SPLIT = 1
		AND @SPLIT_OPT = 1
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

	IF (@MULTIEC_ACTIVE = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;

	/*******************************************    
    *********** UPDATE SPOT AFFILIATED *********    
    *******************************************/

	IF (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = 1
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
		> 0
	BEGIN
		IF @HAS_SPOT = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		ELSE
		BEGIN
			IF @SPOT_TAX > (SELECT
						MIN([SPOT_TAX])
					FROM [COMMERCIAL_ESTABLISHMENT]
					WHERE [COD_AFFILIATOR] = @CODAFFILIATED
					AND [SPOT_TAX] <> 0
					AND [ACTIVE] = 1)
				THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
		END;
	END;
	ELSE
	IF @HAS_SPOT = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
			VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
	END;

	UPDATE AFFILIATOR
	SET SPOT_TAX = @SPOT_TAX
	   ,OPERATION_AFF = @OPERATION_AFF
	WHERE COD_AFFILIATOR = @CODAFFILIATED;

	/********************************************    
    *********** UPDATE SPLIT AFFILIATED *********    
    ********************************************/

	IF (@HAS_SPLIT = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END;
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
	END;

	/**********************************************    
    *********** UPDATE LEDGER RETENTION ***********    
    **********************************************/

	IF (@LEDGERRETENTION = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END;
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LEDGERRETENTIONCONFIG);

		DECLARE @DT_FROM DATE;
		DECLARE @DT_UNTIL DATE;

		SELECT
			@DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
		SELECT
			@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

		UPDATE [LEDGER_RETENTION_CONTROL]
		SET [ACTIVE] = 0
		FROM [LEDGER_RETENTION_CONTROL]
		JOIN [COMMERCIAL_ESTABLISHMENT]
			ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
		WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
		AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
		AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
		OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
		OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
	END;

	/************************************************    
    *********** UPDATE TRANSLATE AFFILIATED *********    
    ************************************************/

	IF @HAS_TRANSLATION = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END;
	ELSE
	BEGIN
		IF (SELECT
					COUNT(*)
				FROM [SERVICES_AVAILABLE]
				WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
				AND [COD_COMP] = @COD_COMP
				AND [COD_AFFILIATOR] = @CODAFFILIATED
				AND [COD_EC] IS NULL
				AND [ACTIVE] = 1)
			= 0
		BEGIN
			INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
				VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
		END;
	END;

	/***************************************************    
    *********** UPDATE NOTIFICATION AFFILIATED *********    
    ***************************************************/

	IF @HAS_NOTIFICATION = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		UPDATE [ACCESS_APPAPI]
		SET [ACTIVE] = 0
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [ACTIVE] = 1;
	END;
	ELSE
	IF @HAS_CREDENTIAL = 0
		AND @HAS_NOTIFICATION = 1
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);

		EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
											 ,@PASSWORD_NOTIFICATION
											 ,@CLIENTID_NOTIFICATION;
	END

	/*******************************************    
    *********** UPDATE BILLET AFFILIATED *******    
    *******************************************/

	IF (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
		> 0
	BEGIN
		IF @HAS_BILLET = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		IF @HAS_SPLIT_BILLET = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		ELSE
		BEGIN
			IF @BILLET_TAX > (SELECT
						MIN([BILLET_TAX])
					FROM [COMMERCIAL_ESTABLISHMENT]
					WHERE [COD_AFFILIATOR] = @CODAFFILIATED
					AND [BILLET_TAX] <> 0
					AND [ACTIVE] = 1)
				THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
		END;
	END;
	ELSE
	IF @HAS_BILLET = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
			VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
	END;

	IF @HAS_SPLIT_BILLET = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
			VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
	END;

	UPDATE [SERVICES_AVAILABLE]
	SET SERVICE_AMOUNT = @BILLET_TAX
	WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
	AND [COD_AFFILIATOR] = @CODAFFILIATED
	AND [COD_EC] IS NULL
	AND [ACTIVE] = 1;

	/*******************************************    
    *********** UPDATE MULTIEC AFFILIATED *******    
    *******************************************/

	IF (@MULTIEC_ACTIVE = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
	END

	/*******************************************    
        *********** TCU DETAILED *******    
    *******************************************/

	IF (@TCU_DETAILED = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
	END

	/*******************************************    
        *********** Plano DZero *******    
    *******************************************/

	IF @PLANDZERO = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV], CONFIG_JSON)
			VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PlanDZeroJson);
	END
	ELSE
	BEGIN

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = @PlanDZeroJson
		   ,COD_USER = @COD_USER_ALT
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1

		DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
		DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
		DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

		IF @CELERONLY = 'true'
		BEGIN
			DECLARE @CODBKCELER INT
			SELECT
				@CODBKCELER = COD_BANK
			FROM BANKS
			WHERE NAME = 'CELER DIGITAL'

			UPDATE SA
			SET ACTIVE = 0
			   ,MODIFY_DATE = GETDATE()
			FROM [SERVICES_AVAILABLE] SA
			JOIN BANK_DETAILS_EC BDE
				ON SA.COD_EC = BDE.COD_EC
				AND BDE.ACTIVE = 1
				AND IS_CERC = 0
				AND COD_BANK != @CODBKCELER
			WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
			AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
			AND SA.[COD_EC] IS NOT NULL
			AND SA.[ACTIVE] = 1
		END
	END
	--PIX

	IF @PIX = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_PIX
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_PIX
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV], CONFIG_JSON)
			VALUES (current_timestamp, @COD_USER_ALT, @COD_PIX, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PIXJSON);
	END
	BEGIN

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = @PIXJSON
		   ,COD_USER = @COD_USER_ALT
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PIX
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1

		DECLARE @PIX_TAX DECIMAL(4, 2) = CAST(JSON_VALUE(@PIXJSON, '$.PixTax') AS DECIMAL(4, 2))
		DECLARE @PIX_CHARGE_OPTION VARCHAR(16) = JSON_VALUE(@PIXJSON, '$.PixChargeOption')

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.PixTax', @PIX_TAX)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PIX
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.PixTax') AS DECIMAL(4, 2)) < @PIX_TAX

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.PixChargeOption', @PIX_CHARGE_OPTION)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.PixChargeOption') AS VARCHAR(100)) <> @PIX_CHARGE_OPTION

	--IF @CELERONLY = 'true'
	--BEGIN
	--	DECLARE @CODBKCELER INT
	--	SELECT
	--		@CODBKCELER = COD_BANK
	--	FROM BANKS
	--	WHERE NAME = 'CELER DIGITAL'

	--	UPDATE SA
	--	SET ACTIVE = 0
	--	   ,MODIFY_DATE = GETDATE()
	--	FROM [SERVICES_AVAILABLE] SA
	--	JOIN BANK_DETAILS_EC BDE
	--		ON SA.COD_EC = BDE.COD_EC
	--		AND BDE.ACTIVE = 1
	--		AND IS_CERC = 0
	--		AND COD_BANK != @CODBKCELER
	--	WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
	--	AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
	--	AND SA.[COD_EC] IS NOT NULL
	--	AND SA.[ACTIVE] = 1
	--END
	END

END;

GO

IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
	DROP PROCEDURE SP_UP_SERVICES
GO
CREATE PROCEDURE [dbo].[SP_UP_SERVICES]
/*----------------------------------------------------------------------------------------            
    Procedure Name: [SP_UP_SERVICES]             
    Project.......: TKPP            
------------------------------------------------------------------------------------------            
    Author    VERSION   Date   Description             
------------------------------------------------------------------------------------------             
    Caike Ucha   V1    04/09/2019  Creation             
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split             
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda             
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online                   
    Elir Ribeiro  v6    2020-04-17  addd split boleto online    
    Caike Ucha   V7    2020-04-22  add multi ec  
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero  
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@COD_AFFILIATOR INT,
@COD_USER INT,
@SERVICE_NAME VARCHAR(100),
@VALUE DECIMAL(22, 6),
@ACTIVE INT,
@TAX_AFILIATOR DECIMAL(22, 6) = NULL,
@BILLET_TAX DECIMAL(22, 6) = NULL,
@VALUE_TAX_BILLET DECIMAL(22, 6) = 0,
@CONFIG_JSON VARCHAR(512) = NULL)
AS

	DECLARE @COD_ITEM_SERVICE INT;
	DECLARE @ONLINE_ACTIVE INT;
	DECLARE @CREDENCIAL INT;

	SELECT
		@CREDENCIAL = TRANSACTION_ONLINE
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC
	BEGIN
		SELECT
			@COD_ITEM_SERVICE = COD_ITEM_SERVICE
		FROM ITEMS_SERVICES_AVAILABLE
		WHERE [NAME] = @SERVICE_NAME

		IF @SERVICE_NAME = 'CREDENTIALS'
		BEGIN
			IF (@ACTIVE = 1)
			BEGIN
				IF ((SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						WHERE USER_ONLINE IS NULL
						AND COD_EC = @COD_EC)
					> 0)
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
					   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
					   ,HAS_CREDENTIALS = 1
					WHERE COD_EC = @COD_EC;
				ELSE
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET HAS_CREDENTIALS = 1
					WHERE COD_EC = @COD_EC;
			END
			ELSE
				UPDATE COMMERCIAL_ESTABLISHMENT
				SET HAS_CREDENTIALS = 0
				WHERE COD_EC = @COD_EC;
		END

		IF @SERVICE_NAME = 'SPOT'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET SPOT_TAX = 0
				WHERE COD_EC = @COD_EC
			END
			ELSE
			BEGIN
				IF (@COD_AFFILIATOR IS NULL
					AND @VALUE <= 0)
					THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET SPOT_TAX = @VALUE
				WHERE COD_EC = @COD_EC;
			END
		END

		IF @SERVICE_NAME = 'BOLETO'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET BILLET_TAX = 0
				WHERE COD_EC = @COD_EC
			END
			ELSE
			BEGIN
				IF (@COD_AFFILIATOR IS NULL
					AND @VALUE_TAX_BILLET <= 0)
					THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET BILLET_TAX = @VALUE_TAX_BILLET
				WHERE COD_EC = @COD_EC;
			END
		END

		IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
		END

		IF @SERVICE_NAME = 'SPLIT'
		BEGIN
			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END

		IF @SERVICE_NAME = 'PARCELADOCLIENTE'
		BEGIN
			SELECT TOP 1
				@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
			FROM SERVICES_AVAILABLE
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
			AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
			AND SERVICES_AVAILABLE.ACTIVE = 1

			IF @ACTIVE = 1
				AND (@ONLINE_ACTIVE = 0
				OR @ONLINE_ACTIVE IS NULL)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
			END
			ELSE
			BEGIN
				IF @ACTIVE = 0
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET ACTIVE = 0
					   ,COD_USER = @COD_USER
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND (@COD_AFFILIATOR IS NULL
					OR COD_AFFILIATOR = @COD_AFFILIATOR)
					AND COD_EC = @COD_EC
					AND ACTIVE = 1;
				END
			END;
		END

		IF @SERVICE_NAME = 'POSWEBDIRECT'
		BEGIN
			SELECT TOP 1
				@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
			FROM SERVICES_AVAILABLE
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
			AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
			AND SERVICES_AVAILABLE.ACTIVE = 1

			IF @ACTIVE = 1
				AND (@ONLINE_ACTIVE = 0
				OR @ONLINE_ACTIVE IS NULL)
			BEGIN
				IF (SELECT
							COUNT(COD_SOURCE_TRAN)
						FROM ASS_TAX_DEPART
						INNER JOIN DEPARTMENTS_BRANCH
							ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
						INNER JOIN BRANCH_EC
							ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
						INNER JOIN COMMERCIAL_ESTABLISHMENT
							ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
						WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
						AND ASS_TAX_DEPART.ACTIVE = 1
						AND COD_SOURCE_TRAN = 1)
					= 0
					THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

				IF (SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						LEFT JOIN AFFILIATOR
							ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
						LEFT JOIN PLAN_TAX_AFFILIATOR
							ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
						WHERE COD_EC = @COD_EC
						AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
						OR COD_SOURCE_TRAN IS NULL))
					= 0
					THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
			END
			IF @ACTIVE = 0
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;
			END;
		END

		IF @SERVICE_NAME = 'TRANSACTIONONLINE'
		BEGIN
			IF (@CREDENCIAL = 0
				AND @ACTIVE = 1)
			BEGIN
				IF (SELECT
							COUNT(COD_SOURCE_TRAN)
						FROM ASS_TAX_DEPART
						INNER JOIN DEPARTMENTS_BRANCH
							ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
						INNER JOIN BRANCH_EC
							ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
						INNER JOIN COMMERCIAL_ESTABLISHMENT
							ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
						WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
						AND ASS_TAX_DEPART.ACTIVE = 1
						AND COD_SOURCE_TRAN = 1)
					= 0
					THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

				IF (SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						LEFT JOIN AFFILIATOR
							ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
						LEFT JOIN PLAN_TAX_AFFILIATOR
							ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
						WHERE COD_EC = @COD_EC
						AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
						OR COD_SOURCE_TRAN IS NULL))
					= 0
					THROW 61056, 'Para habilitar o serviço de transações online, o Afiliador precisa de um plano compatível com o tipo de transação.', 1;

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET TRANSACTION_ONLINE = 1
				WHERE COD_EC = @COD_EC;
			END
			ELSE
			BEGIN
				IF (@CREDENCIAL = 1
					AND @ACTIVE = 0)
				BEGIN
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET TRANSACTION_ONLINE = 0
					WHERE COD_EC = @COD_EC;
				END
			END
		END

		IF @SERVICE_NAME = 'LEDGER_RETENTION'
		BEGIN
			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END;

		IF @SERVICE_NAME = 'MULTIEC'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END;

		DECLARE @AFFCONFIG NVARCHAR(512)

		IF @SERVICE_NAME = 'PlanDZero'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND NOT EXISTS (SELECT
						COD_ITEM_SERVICE
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				)
				THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;


			DECLARE @CODBKCELER INT

			SELECT
				@AFFCONFIG = CONFIG_JSON
			FROM SERVICES_AVAILABLE
			WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
			AND COD_AFFILIATOR = @COD_AFFILIATOR
			AND COD_EC IS NULL
			AND ACTIVE = 1
			SELECT
				@CODBKCELER = COD_BANK
			FROM BANKS
			WHERE NAME = 'CELER DIGITAL'

			IF EXISTS (SELECT
						COD_BANK
					FROM BANK_DETAILS_EC BDE
					JOIN BANK_DETAILS_CERC_INFO BDCI
						ON BDE.COD_BK_EC = BDCI.COD_BK_EC
					WHERE COD_EC = @COD_EC
					AND ACTIVE = 1
					AND IS_CERC = 1
					AND END_DATE > GETDATE()
					AND BDCI.COD_SITUATION = 3)
				THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

			IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
				AND NOT EXISTS (SELECT
						1
					FROM BANK_DETAILS_EC
					WHERE COD_EC = @COD_EC
					AND ACTIVE = 1
					AND COD_BANK = @CODBKCELER)
				THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) > CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit', CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
			END

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) > CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit', CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
			END

			IF @ACTIVE = 1
			BEGIN
				IF EXISTS (SELECT
							COD_ITEM_SERVICE
						FROM SERVICES_AVAILABLE
						WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
						AND COD_AFFILIATOR = @COD_AFFILIATOR
						AND COD_EC = @COD_EC
						AND ACTIVE = 1)
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET CONFIG_JSON = @CONFIG_JSON
					   ,COD_USER = @COD_EC
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC = @COD_EC
					AND ACTIVE = 1
				END
				ELSE
				BEGIN
					INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
						VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
				END
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
		END

		IF @SERVICE_NAME = 'Pix'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND NOT EXISTS (SELECT
						COD_ITEM_SERVICE
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				)
				THROW 61063, 'AFFILIATED DOES NOT HAVE Pix SERVICE', 1;

			--DECLARE @AFFCONFIG NVARCHAR(512)
			--DECLARE @CODBKCELER INT

			SELECT
				@AFFCONFIG = CONFIG_JSON
			FROM SERVICES_AVAILABLE
			WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
			AND COD_AFFILIATOR = @COD_AFFILIATOR
			AND COD_EC IS NULL
			AND ACTIVE = 1


			IF CAST(JSON_VALUE(@AFFCONFIG, '$.PixTax') AS DECIMAL(4, 2)) > CAST(JSON_VALUE(@CONFIG_JSON, '$.PixTax') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.PixTax', CAST(JSON_VALUE(@AFFCONFIG, '$.PixTax') AS DECIMAL(4, 2)))
			END

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.PixChargeOption') AS VARCHAR(16)) <> CAST(JSON_VALUE(@CONFIG_JSON, '$.PixChargeOption') AS VARCHAR(16))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.PixChargeOption', CAST(JSON_VALUE(@AFFCONFIG, '$.PixChargeOption') AS VARCHAR(16)))
			END

			IF @ACTIVE = 1
			BEGIN
				IF EXISTS (SELECT
							COD_ITEM_SERVICE
						FROM SERVICES_AVAILABLE
						WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
						AND COD_AFFILIATOR = @COD_AFFILIATOR
						AND COD_EC = @COD_EC
						AND ACTIVE = 1)
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET CONFIG_JSON = @CONFIG_JSON
					   ,COD_USER = @COD_EC
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC = @COD_EC
					AND ACTIVE = 1
				END
				ELSE
				BEGIN
					INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
						VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
				END
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
		END
	END;


GO

IF OBJECT_ID('SP_CONTACT_DATA_EQUIP') IS NOT NULL
	DROP PROCEDURE SP_CONTACT_DATA_EQUIP
GO
CREATE PROCEDURE [dbo].[SP_CONTACT_DATA_EQUIP]
/*----------------------------------------------------------------------------------------              
Procedure Name: [SP_CONTACT_DATA_EQUIP]              
Project.......: TKPP              
------------------------------------------------------------------------------------------              
Author                          VERSION         Date                            Description              
------------------------------------------------------------------------------------------              
Kennedy Alef                      V1         27/07/2018                           Creation              
Fernando Henrique F. O            V2         03/04/2019                           Change                
Lucas Aguiar                      v3         22-04-2019                   Descer se é split ou não              
Caike Uchôa                       v4         15/01/2020                     descer MMC padrão para PF      
Caike Uchoa                       v5         22/09/2020                    Add formatacao de strings    
------------------------------------------------------------------------------------------*/ (@TERMINALID INT)
AS
BEGIN
	SELECT
	TOP 1
		VW_COMPANY_EC_BR_DEP_EQUIP.CPF_CNPJ_BR
	   ,AFFILIATOR.CPF_CNPJ AS CPF_CNPJ_AFF
	   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.TRADING_NAME_BR) AS TRADING_NAME_BR
	   ,[dbo].[FNC_REMOV_CARAC_ESP](VW_COMPANY_EC_BR_DEP_EQUIP.BRANCH_NAME) AS BRANCH_NAME
	   ,CASE
			WHEN TYPE_ESTAB.CODE = 'PF' THEN '8999'
			ELSE VW_COMPANY_EC_BR_DEP_EQUIP.MCC
		END AS MCC
	   ,COMMERCIAL_ESTABLISHMENT.CODE AS MERCHANT_CODE
	   ,LEFT([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.[ADDRESS]), 20) AS [ADDRESS]
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(ADDRESS_BRANCH.[NUMBER])) AS [NUMBER]
	   ,ADDRESS_BRANCH.CEP
	   ,ISNULL([dbo].[FNC_REMOV_CARAC_ESP](ADDRESS_BRANCH.COMPLEMENT), 0) AS COMPLEMENT
	   ,[dbo].[FNC_REMOV_CARAC_ESP](NEIGHBORHOOD.NAME) AS NEIGHBORDHOOD
	   ,[dbo].[FNC_REMOV_CARAC_ESP](CITY.[NAME]) AS CITY
	   ,[dbo].[FNC_REMOV_CARAC_ESP]([STATE].UF) AS [STATE]
	   ,COUNTRY.INITIALS
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDI)) AS DDI
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].FNC_REMOV_CARAC_ESP(CONTACT_BRANCH.DDD)) AS DDD
	   ,[dbo].[FNC_REMOV_LETRAS]([dbo].[FNC_REMOV_CARAC_ESP](CONTACT_BRANCH.[NUMBER])) AS TEL_NUMBER
	   ,TYPE_CONTACT.NAME AS TYPE_CONTACT
	   ,EQUIPMENT.COD_EQUIP
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC IS NULL
					AND COD_OPT_SERV = 4)
				> 0 THEN 1
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC IS NULL
					AND COD_OPT_SERV = 2)
				> 0 THEN 0
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 4
					AND ACTIVE = 1
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
					AND COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC)
				> 0 THEN 1
			ELSE 0
		END AS [SPLIT]
	   ,(
		CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 13
					AND ACTIVE = 1
					AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
				> 0 THEN 1
			ELSE 0
		END
		) AS MANY_MERCHANTS
	   ,(
		CASE
			WHEN (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = 19
					AND ACTIVE = 1
					AND COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
					AND COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR)
				> 0 THEN 1
			ELSE 0
		END
		) AS PIX
	   ,ISNULL(COMMERCIAL_ESTABLISHMENT.PIX_ACCEPTED, 0) PIX_ACCEPTED
	FROM VW_COMPANY_EC_BR_DEP_EQUIP
	JOIN ADDRESS_BRANCH
		ON ADDRESS_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
	JOIN NEIGHBORHOOD
		ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
	JOIN CITY
		ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
	JOIN STATE
		ON STATE.COD_STATE = CITY.COD_STATE
	JOIN COUNTRY
		ON COUNTRY.COD_COUNTRY = STATE.COD_COUNTRY
	JOIN CONTACT_BRANCH
		ON CONTACT_BRANCH.COD_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_BRANCH
	JOIN TYPE_CONTACT
		ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT
	JOIN ASS_DEPTO_EQUIP
		ON ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH = VW_COMPANY_EC_BR_DEP_EQUIP.COD_DEPTO_BR
	JOIN EQUIPMENT
		ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	INNER JOIN TYPE_ESTAB
		ON TYPE_ESTAB.COD_TYPE_ESTAB = COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB
	--LEFT JOIN SERVICES_AVAILABLE              
	-- ON SERVICES_AVAILABLE.COD_EC = VW_COMPANY_EC_BR_DEP_EQUIP.COD_EC              
	WHERE EQUIPMENT.COD_EQUIP = @TERMINALID
	AND ASS_DEPTO_EQUIP.ACTIVE = 1
	ORDER BY ADDRESS_BRANCH.COD_ADDRESS DESC

END

GO

CREATE PROCEDURE SP_UP_PIX_ACCEPTED
(
	@TERMINALID INT
)
AS
BEGIN

UPDATE 

END;


UPDATE USERS SET EMAIL = CAST(NEWID() AS VARCHAR(100)) WHERE EMAIL = 'gian.lucca.17.dc@gmail.com'