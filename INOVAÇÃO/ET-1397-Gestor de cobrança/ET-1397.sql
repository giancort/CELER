
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_TYPE_REG_EC'
	AND object_id = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
BEGIN
IF OBJECT_ID('TYPE_REG_EC') IS NOT NULL
DROP TABLE TYPE_REG_EC
CREATE TABLE TYPE_REG_EC (
	COD_TYPE_REG_EC INT PRIMARY KEY IDENTITY (1, 1) NOT NULL
   ,TYPE_REG VARCHAR(255)
   ,ACTIVE INT DEFAULT 1
)
END
GO
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_TYPE_REG_EC'
	AND object_id = OBJECT_ID(N'COMMERCIAL_ESTABLISHMENT'))
ALTER TABLE COMMERCIAL_ESTABLISHMENT
ADD COD_TYPE_REG_EC INT FOREIGN KEY REFERENCES TYPE_REG_EC (COD_TYPE_REG_EC);

IF ( SELECT
		COUNT(*)
	FROM TYPE_REG_EC
	WHERE TYPE_REG = 'SUMMARY RECORD')
= 0
BEGIN
INSERT INTO TYPE_REG_EC (TYPE_REG, ACTIVE)
	VALUES ('SUMMARY RECORD', 1)
END

GO

IF ( SELECT
		COUNT(*)
	FROM RISK_SITUATION
	WHERE NAME = 'REGISTRATION NOT FINALIZED')
= 0
BEGIN
INSERT INTO RISK_SITUATION (NAME, VIEWER, TRANSACTION_VIEWER, SITUATION_EC)
	VALUES ('REGISTRATION NOT FINALIZED', 1, 0, 1);
END

GO

IF ( SELECT
		COUNT(*)
	FROM TRADUCTION_RISK_SITUATION
	WHERE RISK_SITUATION_TR = 'Cadastro n�o finalizado')
= 0
BEGIN
INSERT INTO TRADUCTION_RISK_SITUATION (COD_RISK_SITUATION, LANGUAGE, RISK_SITUATION_TR)
	VALUES ((SELECT COD_RISK_SITUATION FROM RISK_SITUATION WHERE NAME = 'REGISTRATION NOT FINALIZED'), 'PORTUGUES', 'Cadastro n�o finalizado');
END

GO
IF OBJECT_ID('SP_GW_REG_COMMERCIAL_ESTAB_SUMMARY') IS NOT NULL DROP PROCEDURE SP_GW_REG_COMMERCIAL_ESTAB_SUMMARY;
GO
CREATE PROCEDURE SP_GW_REG_COMMERCIAL_ESTAB_SUMMARY
(
	@NAME VARCHAR(200),    
    @TRADING_NAME VARCHAR(100),    
    @CPF_CNPJ VARCHAR(100),    
    @DOCUMENT VARCHAR(100) = null,    
    @COD_TYPE_ESTAB INT,   
    @EMAIL VARCHAR(100),    
	@CODSEG INT,    
	@COMPANY INT,    
	@CODSEX INT = NULL,
	@COD_AFFILIATOR INT,
	@COD_SALES_REP INT = NULL,
	@TP_CONTACT TP_CONTACT_LIST READONLY,        
	@TP_CONTACT_USER TP_CONTACT_LIST READONLY,        
	@COD_ACESS VARCHAR(100),        
	@CPF_CNPJ_USER VARCHAR(100),        
	@NAME_USER VARCHAR(200),        
	@EMAIL_USER VARCHAR(200),
	@PASSWORD VARCHAR(200)

)
AS
BEGIN

DECLARE @CONT INT = 0;
DECLARE @SEQ INT = 0;
DECLARE @TRANSACTION_ONLINE INT = 1;
DECLARE @USER_ONLINE INT = 0;
DECLARE @PWD_ONLINE VARCHAR(255);
DECLARE @HAS_CREDENTIALS INT = 1;
DECLARE @TRANSACTION_LIMIT DECIMAL(20,8) = NULL;
DECLARE @TRANSACTION_DAILY DECIMAL(20,8) = NULL;
DECLARE @TRANS_LIMIT_MONTHLY DECIMAL(20,8) = NULL;
DECLARE @COD_EC INT = NULL;
DECLARE @IDDEPART INT;
DECLARE @COD_BRANCH INT;

SELECT
	@CONT = COUNT(*)
FROM [COMMERCIAL_ESTABLISHMENT]
WHERE [COD_COMP] = @COMPANY
AND [CPF_CNPJ] = @CPF_CNPJ
AND ([COD_AFFILIATOR] = @COD_AFFILIATOR
OR @COD_AFFILIATOR IS NULL);
IF @CONT > 0
THROW 61002, 'COMMERCIAL ESTABLISHMENT ALREADY REGISTERED', 1;
DECLARE @CODSPOTSERVICE INT;
DECLARE @COD_SPLIT_SERVICE INT;

IF (@CONT > 0)
THROW 61002, 'COMMERCIAL ESTABLISHMENT ALREADY REGISTERED', 1;

SELECT
	@SEQ = NEXT VALUE FOR [SEQ_ECCODE];
IF (@TRANSACTION_ONLINE = 1)
BEGIN
SET @USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC];
SET @PWD_ONLINE = CONVERT(VARCHAR(255), NEWID());
SET @HAS_CREDENTIALS = 1;
END

SELECT
	@TRANSACTION_LIMIT = [TRANSACTION_LIMIT]
   ,@TRANSACTION_DAILY = [LIMIT_TRANSACTION_DIALY]
   ,@TRANS_LIMIT_MONTHLY = (SELECT
			[LIMIT_TRANSACTION_MONTHLY]
		FROM [SEGMENTS]
		WHERE [COD_SEG] = @CODSEG)
FROM [TRANSACTION_LIMIT]
WHERE [ACTIVE] = 1
AND [COD_TYPE_ESTAB] = @COD_TYPE_ESTAB
AND [COD_COMP] = @COMPANY;


INSERT INTO [COMMERCIAL_ESTABLISHMENT] ([CODE],
[NAME],
[TRADING_NAME],
[CPF_CNPJ],
[DOCUMENT_TYPE],
[EMAIL],
[COD_SEG],
[COD_BRANCH_BUSINESS],
[TRANSACTION_LIMIT],
[LIMIT_TRANSACTION_DIALY],
[LIMIT_TRANSACTION_MONTHLY],
[COD_COMP],
[COD_TYPE_ESTAB],
[COD_USER],
[COD_SEX],
[COD_SALES_REP],
[COD_AFFILIATOR],
[TRANSACTION_ONLINE],
[USER_ONLINE],
[PWD_ONLINE],
[HAS_CREDENTIALS],
[COD_RISK_SITUATION],
COD_TYPE_REG_EC,
COD_SITUATION,
NOTE_FINANCE_SCHEDULE
)
	SELECT
		@SEQ
	   ,@NAME
	   ,@TRADING_NAME
	   ,@CPF_CNPJ
	   ,IIF(COUNT(@CPF_CNPJ) = 11, 'PF', 'CNPJ')
	   ,@EMAIL
	   ,@CODSEG
	   ,(SELECT
				BRANCH_BUSINESS.COD_BRANCH_BUSINESS
			FROM BRANCH_BUSINESS
			JOIN SEGMENTS
				ON SEGMENTS.COD_BRANCH_BUSINESS = BRANCH_BUSINESS.COD_BRANCH_BUSINESS
			WHERE COD_SEG = @CODSEG)
	   ,@TRANSACTION_LIMIT
	   ,@TRANSACTION_DAILY
	   ,@TRANS_LIMIT_MONTHLY
	   ,@COMPANY
	   ,@COD_TYPE_ESTAB
	   ,(SELECT TOP 1
				COD_USER
			FROM USERS
			JOIN AFFILIATOR
				ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
			WHERE COD_ACCESS = 'INTEGRACAO_' + AFFILIATOR.CPF_CNPJ)
	   ,IIF(@CODSEX = NULL, 4, @CODSEX)
	   ,2
	   ,@COD_AFFILIATOR
	   ,ISNULL(@TRANSACTION_ONLINE, 0)
	   ,@USER_ONLINE
	   ,@PWD_ONLINE
	   ,ISNULL(@COD_SALES_REP, 2)
	   ,(SELECT
				COD_RISK_SITUATION
			FROM RISK_SITUATION
			WHERE NAME = 'REGISTRATION NOT FINALIZED')
	   ,1
	   ,24
	   ,'Cadastro sem domicílio bancário'

SET @COD_EC = @@identity;

SELECT
	@SEQ = NEXT VALUE FOR [SEQ_BRANCHCODE];
INSERT INTO [BRANCH_EC] ([CODE],
[NAME],
[TRADING_NAME],
[CPF_CNPJ],
[DOCUMENT_TYPE],
[EMAIL],
[TRANSACTION_LIMIT],
[LIMIT_TRANSACTION_DIALY],
[COD_EC],
[TYPE_BRANCH],
[COD_USER],
[COD_SEX],
[COD_SALES_REP],
[COD_TYPE_ESTAB])
	SELECT
		@SEQ
	   ,@NAME
	   ,@TRADING_NAME
	   ,@CPF_CNPJ
	   ,IIF(COUNT(@CPF_CNPJ) = 11, 'PF', 'CNPJ')
	   ,@EMAIL
	   ,@TRANSACTION_LIMIT
	   ,@TRANSACTION_DAILY
	   ,@COD_EC
	   ,'PRINCIPAL'
	   ,(SELECT TOP 1
				COD_USER
			FROM USERS
			JOIN AFFILIATOR
				ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR
			WHERE COD_ACCESS = 'INTEGRACAO_' + AFFILIATOR.CPF_CNPJ)
	   ,@CODSEX
	   ,ISNULL(@COD_SALES_REP, 2)
	   ,@COD_TYPE_ESTAB

SET @COD_BRANCH = @@identity

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER BRANCH_EC', 1;

INSERT INTO [DEPARTMENTS_BRANCH] ([COD_BRANCH],
[COD_DEPARTS],
[COD_USER])
	VALUES (@COD_BRANCH, 1, (SELECT TOP 1 COD_USER FROM USERS JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = USERS.COD_AFFILIATOR WHERE COD_ACCESS = 'INTEGRACAO_' + AFFILIATOR.CPF_CNPJ));

SET @IDDEPART = @@identity;

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER DEPARTMENTS_BRANCH', 1;

INSERT INTO CONTACT_BRANCH (NUMBER, COD_TP_CONT, COD_BRANCH, COD_OPER, DDD, DDI)
	SELECT
		NUMBER
	   ,CONTACT_TYPE
	   ,@COD_BRANCH
	   ,COD_OPER
	   ,DDD
	   ,DDI
	FROM @TP_CONTACT;

IF @@rowcount < 1
THROW 60000, 'COULD NOT REGISTER CONTACT_BRANCH', 1;

INSERT INTO USERS (COD_ACCESS,
CPF_CNPJ,
IDENTIFICATION,
EMAIL,
COD_COMP,
COD_MODULE,
COD_EC,
COD_PROFILE,
ALTERNATIVE_EMAIL,
COD_SEX,
ACCEPT,
COD_AFFILIATOR)
	VALUES (@COD_ACESS, @CPF_CNPJ_USER, @NAME_USER, @EMAIL_USER, @COMPANY, 2, @COD_EC, 11, @EMAIL, @CODSEX, 0, @COD_AFFILIATOR);

DECLARE @COD_USER INT = @@identity;

INSERT INTO CONTACT_USERS (NUMBER, COD_TP_CONT, COD_OPER, DDD, DDI, COD_USER, ACTIVE)
	SELECT
		NUMBER
	   ,CONTACT_TYPE
	   ,COD_OPER
	   ,DDD
	   ,DDI
	   ,@COD_USER
	   ,1
	FROM @TP_CONTACT_USER;

INSERT INTO PASS_HISTORY (CREATED_AT,
COD_USER,
PASS,
ACTUAL)
	VALUES (CURRENT_TIMESTAMP, @COD_USER, @PASSWORD, 1)



--SELECT
--@COD_EC AS [COD_EC]
--  ,@COD_BRANCH AS [COD_BR]
--  ,@IDDEPART AS [COD_DEPART];
SELECT
	@COD_USER AS CODUSER
   ,@COD_ACESS AS LOGIN
   ,@EMAIL AS EMAIL
   ,@NAME_USER AS NAME
   ,@COD_EC AS MERCHANT_ID;


END

GO

----TESTE

--DECLARE @TP_CONTACT TP_CONTACT_LIST;

--INSERT INTO @TP_CONTACT (NUMBER, CONTACT_TYPE, COD_OPER, DDD)
--	VALUES ('930413196', 1, 1, '11');

--EXEC SP_GW_REG_COMMERCIAL_ESTAB_SUMMARY @NAME = 'TESTE 001'
--									   ,@TRADING_NAME = 'TESTE 001'
--									   ,@CPF_CNPJ = '11029424055'
--									   ,@DOCUMENT = '370348588'
--									   ,@COD_TYPE_ESTAB = 3
--									   ,@EMAIL = 'gian.cort@paxbr.com.br'
--									   ,@CODSEG = 509
--									   ,@COMPANY = 8
--									   ,@CODSEX = 4
--									   ,@COD_AFFILIATOR = 240
--									   ,@COD_SALES_REP = 2
--									   ,@TP_CONTACT = @TP_CONTACT
--									   ,@COD_ACESS = 'teste004'
--									   ,@CPF_CNPJ_USER = '11029424055'
--									   ,@NAME_USER = 'TESTE 001'
--									   ,@EMAIL_USER = 'TESTE3@GMAIL.COM'
--									   ,@TP_CONTACT_USER = @TP_CONTACT
--									   ,@PASSWORD = 'emergencia17'

GO

IF OBJECT_ID('SP_FD_EC') IS NOT NULL DROP PROCEDURE SP_FD_EC
GO
CREATE PROCEDURE [dbo].[SP_FD_EC]      
      
/*----------------------------------------------------------------------------------------              
Project.......: TKPP              
------------------------------------------------------------------------------------------              
Author                          VERSION        Date                            Description              
------------------------------------------------------------------------------------------              
Kennedy Alef                V1   27/07/2018   Creation              
Gian Luca Dalle Cort        V2   04/10/2018   Changed              
Lucas Aguiar                V3   15/10/2018   Changed              
Elir Ribeiro                V4   14/11/2018   Changed              
Luiz Aquino                 V5   26/12/2018   Add Column Spot_tax              
Lucas Aguiar                V6   01/07/2019   Add Rotina de travar agenda              
Elir Ribeiro                V7   02/08/2019   Add Situa??o Risco              
Lucas Aguiar                V8   04-09-2019   IS_PROVIDER              
Marcus Gall Barreira        V9   11-11-2019   Add parameter Branch Business              
Marcus Gall Barreira        V10  19-11-2019   Add informa��es de endere�o do EC              
Marcus Gall                 v11  06-05-2020   Add ModifyDate              
Kennedy Alef                v12  05/08/2020   otimiza��o da consulta          
Elir Ribeiro                v13  23/09/2020   add address to affiliator         
Elir Ribeiro                v14  10/11/2020    add comment risk     
------------------------------------------------------------------------------------------*/ (@CPF_CNPJ VARCHAR(14),      
@COD_REP INT,      
@ID_EC INT,      
@SEGMENT INT,      
@COMP INT,      
@TYPE VARCHAR(100),      
@COD_PLAN INT = NULL,      
@COD_AFF INT = NULL,      
@Active BIT = NULL,      
@PersonType VARCHAR(100) = NULL,      
@CODSIT INT = NULL,      
@WAS_BLOCKED_FINANCE INT = NULL,      
@COD_SITUATION_RISK INT = NULL,      
@IS_PROVIDER INT = NULL,      
@BRANCH_BUSINESS INT = NULL,      
@RISK_SITUATION_LIST [CODE_TYPE] READONLY,      
@CREATED_FROM DATETIME = NULL,      
@CREATED_UNTIL DATETIME = NULL)      
AS      
 DECLARE @QUERY_ NVARCHAR(MAX);
      
 DECLARE @COD_BLOCKED_FINANCE INT;
      
 BEGIN

SET @QUERY_ = N'              
        SELECT         
          
    BRANCH_EC.COD_EC,              
    BRANCH_EC.CODE,              
    dbo.FN_FUS_UTF(BRANCH_EC.CREATED_AT) AS CREATED_AT,              
    BRANCH_EC.NAME,              
    COMMERCIAL_ESTABLISHMENT.TRADING_NAME,              
    BRANCH_EC.COD_BRANCH,              
    BRANCH_EC.CPF_CNPJ,              
    BRANCH_EC.DOCUMENT_TYPE,              
    BRANCH_EC.EMAIL,              
    BRANCH_EC.STATE_REGISTRATION,              
    BRANCH_EC.MUNICIPAL_REGISTRATION,              
    BRANCH_EC.TRANSACTION_LIMIT,              
    BRANCH_EC.LIMIT_TRANSACTION_DIALY,              
    ISNULL(BRANCH_EC.BIRTHDATE,DATEADD(YEAR, - 20, GETDATE())) AS BIRTHDATE,              
    TYPE_ESTAB.CODE AS TYPE_EC,              
    BRANCH_EC.TYPE_BRANCH AS TYPE_BR,              
    SEGMENTS.NAME AS SEGMENTS,              
    BRANCH_EC.ACTIVE,              
    USERS.IDENTIFICATION AS SALES_REP,              
    DEPARTMENTS_BRANCH.COD_PLAN,              
    TYPE_RECEIPT.[CODE] AS ACCOUNT_TYPE,              
    COUNT(*) AS QTY,              
    AFFILIATOR.COD_AFFILIATOR,              
    ISNULL(AFFILIATOR.NAME, ''CELER'')  AS NAME_AFFILIATOR,              
    SITUATION_REQUESTS.NAME AS SIT_REQUEST,              
    ISNULL(COMMERCIAL_ESTABLISHMENT.DEFAULT_EC, 0) AS DEFAULT_EC,              
    COMMERCIAL_ESTABLISHMENT.SPOT_TAX,              
    TRADUCTION_SITUATION.SITUATION_TR,              
    TRADUCTION_RISK_SITUATION.RISK_SITUATION_TR              
    , COMMERCIAL_ESTABLISHMENT.IS_PROVIDER              
    , BRANCH_BUSINESS.NAME AS BRANCH_BUSINESS              
    , NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD              
    , CITY.[NAME] AS CITY              
    , STATE.[NAME] AS STATE              
    , dbo.FN_FUS_UTF(COMMERCIAL_ESTABLISHMENT.MODIFY_DATE) AS MODIFY_DATE            
 , COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED        
 ,ADDRESS_BRANCH.ADDRESS AS [ADDRESS_AFFILIATOR]        
 ,ADDRESS_BRANCH.NUMBER AS [NUMBER_AFFILIATOR]        
 ,ADDRESS_BRANCH.COMPLEMENT AS [COMPLEMENT_AFFILIATOR]        
 ,ADDRESS_BRANCH.CEP AS [ZIPCODE_AFFILIATOR],    
 COMMERCIAL_ESTABLISHMENT.RISK_REASON    
 ,(SELECT top 1 CONCAT(C.DDD,C.NUMBER) FROM CONTACT_BRANCH C WHERE C.ACTIVE = 1 AND BRANCH_EC.COD_BRANCH = C.COD_BRANCH) AS [PHONE_AFFILIATOR]        
       FROM COMMERCIAL_ESTABLISHMENT              
   INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC AND BRANCH_EC.CPF_CNPJ = COMMERCIAL_ESTABLISHMENT.CPF_CNPJ               
   INNER JOIN SEGMENTS ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG              
   INNER JOIN TYPE_ESTAB ON COMMERCIAL_ESTABLISHMENT.COD_TYPE_ESTAB = TYPE_ESTAB.COD_TYPE_ESTAB              
   INNER JOIN SALES_REPRESENTATIVE ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP              
   INNER JOIN USERS ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER              
   INNER JOIN DEPARTMENTS_BRANCH ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH                
   LEFT JOIN TYPE_RECEIPT ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC              
   LEFT JOIN SITUATION_REQUESTS ON SITUATION_REQUESTS.COD_SIT_REQ = COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ              
   LEFT JOIN BRANCH_BUSINESS ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS              
   LEFT JOIN AFFILIATOR ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR              
   LEFT JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_SITUATION              
   LEFT JOIN TRADUCTION_RISK_SITUATION ON TRADUCTION_RISK_SITUATION.COD_RISK_SITUATION = COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION              
   LEFT JOIN ADDRESS_BRANCH  ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH AND ADDRESS_BRANCH.ACTIVE = 1 AND  COMMERCIAL_ESTABLISHMENT.COD_EC =  BRANCH_EC.COD_EC            
   LEFT JOIN NEIGHBORHOOD  ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH              
   LEFT JOIN CITY    ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY              
   LEFT JOIN STATE   ON STATE.COD_STATE = CITY.COD_STATE         
        
           
          
  WHERE              
   COMMERCIAL_ESTABLISHMENT.COD_COMP = @COMP ';
SELECT
	@COD_BLOCKED_FINANCE = COD_SITUATION
FROM SITUATION
WHERE NAME = 'LOCKED FINANCIAL SCHEDULE';
IF @ID_EC IS NOT NULL
BEGIN
IF @TYPE = 'BRANCH'
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.COD_BRANCH = @ID_EC ';
ELSE
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_EC = @ID_EC ';
END;
IF @SEGMENT IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SEG = @SEGMENT ';
IF @COD_REP IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SALES_REP = @COD_REP ';
IF @TYPE IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.TYPE_BRANCH = @TYPE ';
IF @CPF_CNPJ IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.CPF_CNPJ = @CPF_CNPJ ';
IF @COD_PLAN IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND  DEPARTMENTS_BRANCH.COD_PLAN = @COD_PLAN ';
IF @COD_AFF IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR = @COD_AFF';
IF @Active IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND BRANCH_EC.ACTIVE = @Active';
IF @IS_PROVIDER IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.IS_PROVIDER = @IS_PROVIDER';
IF @PersonType IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND TYPE_ESTAB.CODE = @PersonType';
IF @CODSIT IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ = @CODSIT';
IF @WAS_BLOCKED_FINANCE = 1
BEGIN
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCKED_FINANCE';
      
  END;
ELSE
IF @WAS_BLOCKED_FINANCE = 0
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION <> @COD_BLOCKED_FINANCE';
IF @COD_SITUATION_RISK IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = @COD_SITUATION_RISK';
IF @BRANCH_BUSINESS IS NOT NULL
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS = @BRANCH_BUSINESS';
IF EXISTS (SELECT TOP 1
			CODE
		FROM @RISK_SITUATION_LIST)
SET @QUERY_ = @QUERY_ + ' AND COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION IN (SELECT CODE FROM @RISK_SITUATION_LIST)';
SET @QUERY_ = CONCAT(@QUERY_, ' GROUP BY        
      BRANCH_EC.CREATED_AT,              
         BRANCH_EC.COD_EC,              
    COMMERCIAL_ESTABLISHMENT.TRADING_NAME,        
                                  
                              BRANCH_EC.CODE,              
                              BRANCH_EC.NAME,              
                              BRANCH_EC.TRADING_NAME,              
                              BRANCH_EC.COD_BRANCH,              
                              BRANCH_EC.CPF_CNPJ,              
                              BRANCH_EC.DOCUMENT_TYPE,              
                              BRANCH_EC.EMAIL,              
                              BRANCH_EC.STATE_REGISTRATION,              
                              BRANCH_EC.MUNICIPAL_REGISTRATION,              
                              BRANCH_EC.TRANSACTION_LIMIT,              
                              BRANCH_EC.LIMIT_TRANSACTION_DIALY,              
                              BRANCH_EC.BIRTHDATE,              
                              TYPE_ESTAB.CODE,              
                              BRANCH_EC.TYPE_BRANCH,              
                              SEGMENTS.NAME,              
                              BRANCH_BUSINESS.NAME,              
                              BRANCH_EC.ACTIVE,              
                              USERS.IDENTIFICATION,              
                              DEPARTMENTS_BRANCH.COD_PLAN,              
                              TYPE_RECEIPT.[CODE],              
                              AFFILIATOR.COD_AFFILIATOR,              
                              AFFILIATOR.NAME,              
                              SITUATION_REQUESTS.NAME,              
                              COMMERCIAL_ESTABLISHMENT.DEFAULT_EC,              
                              COMMERCIAL_ESTABLISHMENT.SPOT_TAX ,              
                              TRADUCTION_SITUATION.SITUATION_TR,              
                              TRADUCTION_RISK_SITUATION.RISK_SITUATION_TR,              
                              COMMERCIAL_ESTABLISHMENT.IS_PROVIDER              
                              , NEIGHBORHOOD.[NAME]              
                              , CITY.[NAME]              
                              , STATE.[NAME]              
         , COMMERCIAL_ESTABLISHMENT.MODIFY_DATE            
   , COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED         
   ,ADDRESS_BRANCH.ADDRESS        
   ,ADDRESS_BRANCH.CEP        
   ,ADDRESS_BRANCH.COMPLEMENT        
   ,ADDRESS_BRANCH.NUMBER    
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON    
   ORDER BY COMMERCIAL_ESTABLISHMENT.TRADING_NAME        
           
                              ');
EXEC sp_executesql @QUERY_
				  ,N'              
  @CPF_CNPJ VARCHAR(14),              
  @COD_REP INT,              
  @ID_EC INT,              
  @SEGMENT INT,              
  @COMP INT,              
  @TYPE VARCHAR(100),              
  @COD_PLAN INT,              
  @COD_AFF INT,              
  @Active BIT,              
  @PersonType VARCHAR(100),              
  @CODSIT INT,              
  @WAS_BLOCKED_FINANCE INT,              
  @COD_SITUATION_RISK INT,              
  @IS_PROVIDER INT,              
  @BRANCH_BUSINESS INT,              
  @RISK_SITUATION_LIST [CODE_TYPE] READONLY              
 '
				  ,@CPF_CNPJ = @CPF_CNPJ
				  ,@COD_REP = @COD_REP
				  ,@ID_EC = @ID_EC
				  ,@SEGMENT = @SEGMENT
				  ,@COMP = @COMP
				  ,@TYPE = @TYPE
				  ,@COD_PLAN = @COD_PLAN
				  ,@COD_AFF = @COD_AFF
				  ,@Active = @Active
				  ,@PersonType = @PersonType
				  ,@CODSIT = @CODSIT
				  ,@WAS_BLOCKED_FINANCE = @WAS_BLOCKED_FINANCE
				  ,@COD_SITUATION_RISK = @COD_SITUATION_RISK
				  ,@IS_PROVIDER = @IS_PROVIDER
				  ,@BRANCH_BUSINESS = @BRANCH_BUSINESS
				  ,@RISK_SITUATION_LIST = @RISK_SITUATION_LIST;
END;

--ST-1590

GO

IF OBJECT_ID('SP_FD_DATA_BR') IS NOT NULL DROP PROCEDURE SP_FD_DATA_BR
GO
CREATE PROCEDURE [dbo].[SP_FD_DATA_BR]  
/*----------------------------------------------------------------------------------------  
Procedure Name: [SP_FD_DATA_BR]  
Project.......: TKPP  
------------------------------------------------------------------------------------------  
Author                          VERSION        Date                            Description  
------------------------------------------------------------------------------------------  
Kennedy Alef     V1    27/07/2018      Creation  
Luiz Aquino                     V2              03/07/2019              Check if bank is_cerc  
------------------------------------------------------------------------------------------*/  
(  
    @COD_BR INT  
)  
AS  
BEGIN
SELECT
	BRANCH_EC.COD_BRANCH
   ,BRANCH_EC.NAME
   ,BRANCH_EC.TRADING_NAME
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,ISNULL(BRANCH_EC.BIRTHDATE, DATEADD(YEAR, -20, GETDATE())) AS BIRTHDATE
   ,BRANCH_EC.TRANSACTION_LIMIT
   ,BRANCH_EC.LIMIT_TRANSACTION_DIALY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.ACTIVE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,ADDRESS_BRANCH.ADDRESS
   ,ADDRESS_BRANCH.NUMBER AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.NAME AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.NAME AS CITY
   ,[STATE].COD_STATE
   ,[STATE].NAME AS STATE
   ,ISNULL(COUNTRY.COD_COUNTRY, 1) COD_COUNTRY
   ,COUNTRY.NAME AS COUNTRY
   ,BANKS.NAME AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.NAME AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,ISNULL(COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE, 0) AS SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,COMMERCIAL_ESTABLISHMENT.COD_SIT_REQ
   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,TYPE_REG
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
LEFT JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
LEFT JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
LEFT JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
LEFT JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
LEFT JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN TYPE_REG_EC
	ON TYPE_REG_EC.COD_TYPE_REG_EC = COMMERCIAL_ESTABLISHMENT.COD_TYPE_REG_EC
--INNER JOIN CONTACT_BRANCH ON CONTACT_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH  
--INNER JOIN TYPE_CONTACT ON TYPE_CONTACT.COD_TP_CONT = CONTACT_BRANCH.COD_TP_CONT  
WHERE BRANCH_EC.COD_BRANCH = @COD_BR

END

GO

  
IF OBJECT_ID('SP_FD_DATA_EC') IS NOT NULL DROP PROCEDURE SP_FD_DATA_EC
GO
CREATE PROCEDURE SP_FD_DATA_EC        
/*----------------------------------------------------------------------------------------        
Procedure Name: [SP_FD_DATA_EC]        
------------------------------------------------------------------------------------------        
Author        VERSION     Date      Description        
------------------------------------------------------------------------------------------        
Kennedy Alef  V1        2018-07-27  Creation        
Elir Ribeiro  V2        2018-11-07  Changed        
Lucas Aguiar  V3        2019-04-22  Add split        
Lucas Aguiar  V4        2019-07-01  rotina de travar agenda do ec        
Luiz Aquino   V5        2019-07-03  Is_Cerc        
Elir Ribeiro  V6        2019-10-01  changed Limit transaction monthy        
Caike Uchoa   V7        2019-10-03  add case split pelo afiliador        
Luiz Aquino   V8        2019-10-16  Add retencao de agenda        
Lucas Aguiar  V9        2019-10-28  Conta Cessao        
Marcus Gall   V10       2019-11-11  Add FK with BRANCH BUSINESS        
Marcus Gall   V11       2019-12-06  Add field HAS_CREDENTIALS        
Elir Ribeiro  V12       2020-01-08  trazendo dados meet consumer        
Elir Ribeiro  V13       2020-01-15  ajustando procedure        
Marcus Gall   V14       2020-01-22  Add Translate service        
Luiz Aquino   v15       2020-03-11  (ET-465) Add requested transaction type        
Elir Ribeiro  v16       2020-04-15  add servi?o de boleto        
Elir Ribeiro  v17       2020-04-17  add split boleto        
Caike Uch?a   v18       2020-04-22  add Multi EC        
Luiz Aquino   v19       2020-05-18  ET--598 Termo de aceite        
Elir Ribeiro  v20       2020-07-18  ET- 932 Integracao Visa        
Caike uchoa   v21       2020-10-28  Corre??o billettax        
Marcus Gall   v22  2021-01-11 Add PNCode SAP        
Marcus Gall   v23  2021-03-22 Add Validation PIX      
------------------------------------------------------------------------------------------*/        
(        
    @COD_EC INT        
)        
AS        
BEGIN
  
    
      
        
    DECLARE @CodSpotService INT
  
    
      
        
    DECLARE @COD_SPLIT_SERVICE INT;
  
    
      
        
    DECLARE @COD_BLOCK_SITUATION INT;
  
    
      
        
    DECLARE @COD_CUSTOMERINSTALLMENT INT;
  
    
      
        
    DECLARE @CodSchRetention INT;
  
    
      
        
    DECLARE @COD_TRANSLATE_SERVICE INT;
  
    
      
        
    DECLARE @CodBillet INT;
  
    
      
        
    DECLARE @CODSPLITBILLET INT;
  
    
      
        
    DECLARE @COD_MULTIEC_SERVICE INT;
  
    
      
        
    DECLARE @COD_THEME_EC INT;

-- GET COD_ITEM_SERVICES      
SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';
SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';
SELECT
	@CodBillet = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'BOLETO'
AND ACTIVE = 1;
SELECT
	@CODSPLITBILLET = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT BOLETO ONLINE'
AND ACTIVE = 1;
SELECT
	@COD_BLOCK_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';
SELECT
	@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'PARCELADOCLIENTE';
SELECT
	@CodSchRetention = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SCHEDULEDRETENTION';
SELECT
	@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';
SELECT
	@COD_MULTIEC_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'MULTI EC';
SELECT
	@COD_THEME_EC = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PaymentLinkEc'

SELECT
	CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN (SELECT
					SERVICES_AVAILABLE.SERVICE_AMOUNT
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
		ELSE 0
	END [BILLET_TAX]
   ,CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
		ELSE 0
	END [FINANCE_BLOCK]

   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPOT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodBillet
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_BILLET]

   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CODSPLITBILLET
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT_BILLET]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1
				AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
				AND SERVICES_AVAILABLE.COD_EC IS NULL)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_CUSTOMERINSTALLMENT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SCHRETENTION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_MULTIEC_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_MULTI_EC]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_THEME_EC
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_THEME_EC]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_TRANSLATE]
   ,BRANCH_EC.[NAME]
   ,BRANCH_EC.TRADING_NAME
   ,COMMERCIAL_ESTABLISHMENT.CODE AS CODE_EC
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,ISNULL(BRANCH_EC.BIRTHDATE, DATEADD(YEAR, -20, GETDATE())) AS BIRTHDATE
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,BRANCH_EC.NOTE AS NOTE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.ACTIVE
   ,ADDRESS_BRANCH.[ADDRESS]
   ,ADDRESS_BRANCH.number AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.[NAME] AS CITY
   ,[STATE].COD_STATE
   ,[STATE].[NAME] AS [STATE]
   ,ISNULL(COUNTRY.COD_COUNTRY, 1)
   ,COUNTRY.[NAME] AS COUNTRY
   ,BANKS.COD_BANK AS BANK_INSIDECODE
   ,BANKS.[NAME] AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,ISNULL(COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE, 0) AS SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
   ,BANK_DETAILS_EC.AGENCY AS AGENCY
   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,TYPE_RECEIPT.COD_TYPE_REC
   ,ISNULL(TYPE_RECEIPT.CODE, 'CONTA') AS TYPE_RECEIPT
   ,CARDS_TOBRANCH.CARDNUMBER
   ,CARDS_TOBRANCH.ACCOUNTID AS ACCOUNTID
   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS COD_CARD_BRANCH
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS TRANSACTION_ONLINE
   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
   ,MEET_COSTUMER.CNPJ AS [ACCEPTANCE]
   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) AS QTY_EMPLOYEES
   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AS AVERAGE_BILLING
   ,MEET_COSTUMER.URL_SITE
   ,MEET_COSTUMER.FACEBOOK
   ,MEET_COSTUMER.INSTAGRAM
   ,MEET_COSTUMER.STREET
   ,MEET_COSTUMER.COMPLEMENT AS [COMPLEMENTO]
   ,MEET_COSTUMER.ANOTHER_INFO
   ,MEET_COSTUMER.number
   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
   ,MEET_COSTUMER.CITY AS MEET_CITY
   ,MEET_COSTUMER.STATES
   ,MEET_COSTUMER.REFERENCEPOINT
   ,MEET_COSTUMER.ZIPCODE
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_PRESENTIAL_TRANSACTION]
   ,IIF(COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = 2, 1, 0) AS [REQUESTED_ONLINE_TRANSACTION]
   ,COMMERCIAL_ESTABLISHMENT.TCU_ACCEPTED
   ,ISNULL(REQ_LANGUAGE_COMERCIAL.COD_COUNTRY, 1) AS COD_COUNTRY
   ,ISNULL(REQ_LANGUAGE_COMERCIAL.COD_CURRRENCY, 1) AS COD_CURRRENCY
   ,ISNULL(REQ_LANGUAGE_COMERCIAL.COD_LANGUAGE, 1) AS COD_LANGUAGE
   ,rs.SITUATION_EC
   ,EXTERNAL_PARTN_UP.COD_EXTERNAL
   ,COMMERCIAL_ESTABLISHMENT.PIX_ACCEPTED
   ,USERS.IDENTIFICATION AS SALES_NAME
	--, BANK_DETAILS_EC.VALIDATION_PIX        
	--, BANK_DETAILS_EC.KEY_PIX      
   ,BANKS.CODE AS BANK_CODE
   ,TYPE_REG_EC.TYPE_REG
FROM COMMERCIAL_ESTABLISHMENT
LEFT JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
LEFT JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
LEFT JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
LEFT JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
LEFT JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
LEFT JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
LEFT JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
LEFT JOIN TYPE_RECEIPT
	ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN CARDS_TOBRANCH
	ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN BRANCH_BUSINESS
	ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
LEFT JOIN MEET_COSTUMER
	ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
LEFT JOIN REQ_LANGUAGE_COMERCIAL
	ON REQ_LANGUAGE_COMERCIAL.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
		AND REQ_LANGUAGE_COMERCIAL.ACTIVE = 1
INNER JOIN RISK_SITUATION rs
	ON COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION = rs.COD_RISK_SITUATION
LEFT JOIN EXTERNAL_PARTN_UP
	ON EXTERNAL_PARTN_UP.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
JOIN USERS
	ON USERS.COD_USER = SALES_REPRESENTATIVE.COD_USER
LEFT JOIN TYPE_REG_EC
	ON TYPE_REG_EC.COD_TYPE_REG_EC = COMMERCIAL_ESTABLISHMENT.COD_TYPE_REG_EC
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND (CARDS_TOBRANCH.COD_SITUATION = 15
OR CARDS_TOBRANCH.COD_SITUATION IS NULL)

END;

GO

