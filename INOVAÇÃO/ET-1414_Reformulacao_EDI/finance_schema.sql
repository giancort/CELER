GO
  IF EXISTS (SELECT
		*
	FROM sys.indexes
	WHERE name = 'IX_REPORT_TRANSACTIONS_EXP_INCLUDE_COD_TRAN_TRANSACTION_CODE_LOGICAL_NUMBER_ACQ'
	AND object_id = OBJECT_ID('[dbo].[REPORT_TRANSACTIONS_EXP]'))
BEGIN
	CREATE NONCLUSTERED INDEX [<IX_REPORT_TRANSACTIONS_EXP_INCLUDE_COD_TRAN_TRANSACTION_CODE_LOGICAL_NUMBER_ACQ>]
	ON [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_SITUATION])
	INCLUDE ([COD_TRAN], [TRANSACTION_CODE], [LOGICAL_NUMBER_ACQ])
END
GO

IF OBJECT_ID('EDI_FINANCE_CONCILIATION') IS NOT NULL DROP TABLE EDI_FINANCE_CONCILIATION
GO
IF OBJECT_ID('SP_REG_EDI_CONCILIATE_TITLES') IS NOT NULL DROP PROCEDURE SP_REG_EDI_CONCILIATE_TITLES
GO
-- IF TYPE_ID('TP_EDI_FINANCE_CONCILIATION') IS NOT NULL DROP TYPE TP_EDI_FINANCE_CONCILIATION
-- GO
-- CREATE TABLE EDI_FINANCE_CONCILIATION
-- (
-- 	COD_EDI_FIN_CONCILIATION INT NOT NULL PRIMARY KEY IDENTITY(1,1),
-- 	COD_TITLE INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE),
-- 	MOVEMENT_API_CODE VARCHAR(255),
-- 	INITIAL_TRAN_DATE  DATETIME,
-- 	ADJ_SALE_DATE DATETIME,
-- 	PAGSEGURO_CODE VARCHAR(255),
-- 	SALE_CODE VARCHAR(150),
-- 	PAYMENT_DEADLINE VARCHAR(255),
-- 	PLAN_DESC VARCHAR(255),
-- 	PLOT INT,
-- 	PLOTS INT,
-- 	MOVEMENT_DATE DATETIME,
-- 	TAX_PLOT_CUSTOMER DECIMAL (22,6),
-- 	RATE_BILLET_SHOP DECIMAL (22,6),
-- 	ORIGINAL_TRAN_VALUE DECIMAL (22,6),
-- 	TAX_PLOT_SELLER DECIMAL (22,6),
-- 	RATE_PLOT_SELLER DECIMAL (22,6),
-- 	INTERMEDIATION_TAX DECIMAL (22,6),
-- 	INTERMEDIATION_RATE DECIMAL (22,6),
-- 	TAX_REP_APLICATION DECIMAL (22,6),
-- 	LIQUID_TRAN_VALUE DECIMAL (22,6),
-- 	ANTECIP_TAX DECIMAL (22,6),
-- 	LIQUID_VALUE_ANTECIP DECIMAL (22,6),
-- 	PAYMENT_STATUS VARCHAR(255),
-- 	RESALE_IDENTIFY VARCHAR(255),
-- 	PAYMENT_FORM VARCHAR(255),
-- 	FIN_INSTITUTION VARCHAR(255),
-- 	ENTRY_CHANNEL VARCHAR(255),
-- 	READER VARCHAR(255),
-- 	CAPTURE_FORM VARCHAR(200),
-- 	BANK_CODE VARCHAR(200),
-- 	BANK_AGENCY VARCHAR(100),
-- 	BANK_ACCOUNT VARCHAR(100),
-- 	LOGICAL_NUMBER_ACQ VARCHAR(255),
-- 	BIN_CARD VARCHAR(200),
-- 	HOLDER_CARD VARCHAR(255),
-- 	AUTH_CODE VARCHAR(100),
-- 	CV_CODE VARCHAR(200),
-- 	SERIAL_EQUIP VARCHAR(255)
-- );

GO

IF OBJECT_ID('SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ') IS NOT NULL DROP PROCEDURE SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ
GO
CREATE PROCEDURE SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ
AS
SELECT
	COUNT(*) QTYTITLES
   ,ACQUIRER.[NAME] AS ACQUIRERNAME
   ,ACQUIRER.[CODE] AS ACQUIRERCODE
   ,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) AS PREVISIONPAYMENTDAY
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) <> 1
AND CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) > DATEADD(YEAR, -1, CAST(GETDATE() AS DATE))
GROUP BY ACQUIRER.[NAME]
		,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE)
		,ACQUIRER.[CODE]
ORDER BY CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE), ACQUIRER.[NAME]
, ACQUIRER.[CODE]

GO


-- CREATE TYPE TP_EDI_FINANCE_CONCILIATION AS TABLE
-- (
-- 	COD_TITLE INT,
-- 	MOVEMENT_API_CODE VARCHAR(255),
-- 	INITIAL_TRAN_DATE  DATETIME,
-- 	ADJ_SALE_DATE DATETIME,
-- 	PAGSEGURO_CODE VARCHAR(255),
-- 	SALE_CODE VARCHAR(150),
-- 	PAYMENT_DEADLINE VARCHAR(255),
-- 	PLAN_DESC VARCHAR(255),
-- 	PLOT INT,
-- 	PLOTS INT,
-- 	MOVEMENT_DATE DATETIME,
-- 	TAX_PLOT_CUSTOMER DECIMAL (22,6),
-- 	RATE_BILLET_SHOP DECIMAL (22,6),
-- 	ORIGINAL_TRAN_VALUE DECIMAL (22,6),
-- 	TAX_PLOT_SELLER DECIMAL (22,6),
-- 	RATE_PLOT_SELLER DECIMAL (22,6),
-- 	INTERMEDIATION_TAX DECIMAL (22,6),
-- 	INTERMEDIATION_RATE DECIMAL (22,6),
-- 	TAX_REP_APLICATION DECIMAL (22,6),
-- 	LIQUID_TRAN_VALUE DECIMAL (22,6),
-- 	ANTECIP_TAX DECIMAL (22,6),
-- 	LIQUID_VALUE_ANTECIP DECIMAL (22,6),
-- 	PAYMENT_STATUS VARCHAR(255),
-- 	RESALE_IDENTIFY VARCHAR(255),
-- 	PAYMENT_FORM VARCHAR(255),
-- 	FIN_INSTITUTION VARCHAR(255),
-- 	ENTRY_CHANNEL VARCHAR(255),
-- 	READER VARCHAR(255),
-- 	CAPTURE_FORM VARCHAR(200),
-- 	BANK_CODE VARCHAR(200),
-- 	BANK_AGENCY VARCHAR(100),
-- 	BANK_ACCOUNT VARCHAR(100),
-- 	LOGICAL_NUMBER_ACQ VARCHAR(255),
-- 	BIN_CARD VARCHAR(200),
-- 	HOLDER_CARD VARCHAR(255),
-- 	AUTH_CODE VARCHAR(100),
-- 	CV_CODE VARCHAR(200),
-- 	SERIAL_EQUIP VARCHAR(255)
-- );

-- GO

-- CREATE PROCEDURE SP_REG_EDI_CONCILIATE_TITLES
-- (
-- 	@TP_EDI_FINANCE_CONCILIATION TP_EDI_FINANCE_CONCILIATION READONLY
-- )
-- AS
-- BEGIN

-- INSERT INTO EDI_FINANCE_CONCILIATION (COD_TITLE, MOVEMENT_API_CODE, INITIAL_TRAN_DATE, ADJ_SALE_DATE, PAGSEGURO_CODE, SALE_CODE, PAYMENT_DEADLINE, PLAN_DESC, PLOT, PLOTS, MOVEMENT_DATE, TAX_PLOT_CUSTOMER, RATE_BILLET_SHOP, ORIGINAL_TRAN_VALUE, TAX_PLOT_SELLER, RATE_PLOT_SELLER, INTERMEDIATION_TAX, INTERMEDIATION_RATE, TAX_REP_APLICATION, LIQUID_TRAN_VALUE, ANTECIP_TAX, LIQUID_VALUE_ANTECIP, PAYMENT_STATUS, RESALE_IDENTIFY, PAYMENT_FORM, FIN_INSTITUTION, ENTRY_CHANNEL, READER, CAPTURE_FORM, BANK_CODE, BANK_AGENCY, BANK_ACCOUNT, LOGICAL_NUMBER_ACQ, BIN_CARD, HOLDER_CARD, AUTH_CODE, CV_CODE, SERIAL_EQUIP)
-- 	SELECT
-- 		COD_TITLE
-- 	   ,MOVEMENT_API_CODE
-- 	   ,INITIAL_TRAN_DATE
-- 	   ,ADJ_SALE_DATE
-- 	   ,PAGSEGURO_CODE
-- 	   ,SALE_CODE
-- 	   ,PAYMENT_DEADLINE
-- 	   ,PLAN_DESC
-- 	   ,PLOT
-- 	   ,PLOTS
-- 	   ,MOVEMENT_DATE
-- 	   ,TAX_PLOT_CUSTOMER
-- 	   ,RATE_BILLET_SHOP
-- 	   ,ORIGINAL_TRAN_VALUE
-- 	   ,TAX_PLOT_SELLER
-- 	   ,RATE_PLOT_SELLER
-- 	   ,INTERMEDIATION_TAX
-- 	   ,INTERMEDIATION_RATE
-- 	   ,TAX_REP_APLICATION
-- 	   ,LIQUID_TRAN_VALUE
-- 	   ,ANTECIP_TAX
-- 	   ,LIQUID_VALUE_ANTECIP
-- 	   ,PAYMENT_STATUS
-- 	   ,RESALE_IDENTIFY
-- 	   ,PAYMENT_FORM
-- 	   ,FIN_INSTITUTION
-- 	   ,ENTRY_CHANNEL
-- 	   ,READER
-- 	   ,CAPTURE_FORM
-- 	   ,BANK_CODE
-- 	   ,BANK_AGENCY
-- 	   ,BANK_ACCOUNT
-- 	   ,LOGICAL_NUMBER_ACQ
-- 	   ,BIN_CARD
-- 	   ,HOLDER_CARD
-- 	   ,AUTH_CODE
-- 	   ,CV_CODE
-- 	   ,SERIAL_EQUIP
-- 	FROM @TP_EDI_FINANCE_CONCILIATION

-- END

-- GO
-- IF OBJECT_ID('SP_FD_TITLES_TO_CONCILIATE') IS NOT NULL DROP PROCEDURE SP_FD_TITLES_TO_CONCILIATE
-- GO
-- CREATE PROCEDURE SP_FD_TITLES_TO_CONCILIATE (@PREVISION_RECEIVE_DATE DATETIME)
-- AS
-- BEGIN

-- SELECT
-- 	TRANSACTION_TITLES.COD_TRAN
--    ,TRANSACTION_TITLES.PLOT
--    ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE AS NSU
--    ,ACQUIRER.CODE AS ACQUIRER_CODE
--    ,ACQUIRER.NAME AS ACQUIRER
--    ,ASS_TR_TYPE_COMP.TAX_VALUE AS PLAN_ACQ_TAX
--    ,TRANSACTION_TITLES.ACQ_TAX AS ACQ_TAX_TITLES
--    ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_TO_RECEIVE
--    ,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) AS PREVISION_RECEIVE_DATE
--    ,CAST(TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE AS DATE) AS ORIGINAL_RECEIVE_DATE
--    ,TRANSACTION_TITLES.IS_ASSIGN
--    ,ASSIGN_DATA.PLOT AS ASSIGN_PLOT
--    ,ASSIGN_DATA.NEW_PREVISION
--    ,ASSIGN_DATA.NEW_ANTICIPATION
--    ,ASSIGN_DATA.ASSIGNMENT_RATE
--    ,ASSIGN_DATA.NET_VALUE
--    ,ASSIGN_DATA.DESCRIPTION AS ASSIGN_DESC
--    ,SITUATION.[NAME] AS SITUATION_TITLE
--    ,EDI_TRANSACTION.AUTH_CODE
--    ,EDI_TRANSACTION.CV_CODE
--    ,EDI_TRANSACTION.PAGSEGURO_CODE
--    ,EDI_TRANSACTION.PREVISION_PAY_DATE
-- FROM TRANSACTION_TITLES
-- LEFT JOIN EDI_TRANSACTION
-- 	ON EDI_TRANSACTION.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
-- JOIN REPORT_TRANSACTIONS_EXP
-- 	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
-- JOIN DATA_TID_AVAILABLE_EC
-- 	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
-- 		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
-- JOIN [TRANSACTION](NOLOCK)
-- 	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
-- JOIN ACQUIRER
-- 	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
-- JOIN ASS_TR_TYPE_COMP
-- 	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
-- LEFT JOIN ASS_TR_TYPE_COMP tr
-- 	ON tr.COD_AC = ACQUIRER.COD_AC
-- 		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
-- 		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
-- 		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
-- 		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
-- 		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
-- LEFT JOIN ASSIGN_DATA
-- 	ON ASSIGN_DATA.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
-- 		AND ASSIGN_DATA.ACTIVE = 1
-- JOIN SITUATION
-- 	ON SITUATION.COD_SITUATION = [TRANSACTION_TITLES].COD_SITUATION
-- WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
-- AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) = 0
-- AND TRANSACTION_TITLES.COD_SITUATION IN
-- (
-- 4, --> AGUARDANDO PAGAMENTO
-- 8, --> PAGO
-- 17,--> AGUARDANDO CONFIRMAÇÃO DE PAGAMENTO
-- 24,--> AGENDA FINANCEIRA BLOQUEADA
-- 25,--> LIBERADO
-- 30 --> AGUARDANDO SPLIT DA AGENDA
-- )
-- AND CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) = @PREVISION_RECEIVE_DATE

-- END

-- GO

-- IF OBJECT_ID('SP_FD_TITLES_TO_CONCILIATE') IS NOT NULL DROP PROCEDURE SP_FD_TITLES_TO_CONCILIATE
-- GO
-- CREATE PROCEDURE SP_FD_TITLES_TO_CONCILIATE (@PREVISION_RECEIVE_DATE DATETIME)
-- AS
-- BEGIN

-- SELECT
-- 	TRANSACTION_TITLES.COD_TRAN
--    ,TRANSACTION_TITLES.PLOT
--    ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE AS NSU
--    ,ACQUIRER.CODE AS ACQUIRER_CODE
--    ,ACQUIRER.NAME AS ACQUIRER
--    ,ASS_TR_TYPE_COMP.TAX_VALUE AS PLAN_ACQ_TAX
--    ,TRANSACTION_TITLES.ACQ_TAX AS ACQ_TAX_TITLES
--    ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_TO_RECEIVE
--    ,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) AS PREVISION_RECEIVE_DATE
--    ,CAST(TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE AS DATE) AS ORIGINAL_RECEIVE_DATE
--    ,TRANSACTION_TITLES.IS_ASSIGN
--    ,ASSIGN_DATA.PLOT AS ASSIGN_PLOT
--    ,ASSIGN_DATA.NEW_PREVISION
--    ,ASSIGN_DATA.NEW_ANTICIPATION
--    ,ASSIGN_DATA.ASSIGNMENT_RATE
--    ,ASSIGN_DATA.NET_VALUE
--    ,ASSIGN_DATA.DESCRIPTION AS ASSIGN_DESC
--    ,SITUATION.[NAME] AS SITUATION_TITLE
--    ,EDI_TRANSACTION.AUTH_CODE
--    ,EDI_TRANSACTION.CV_CODE
--    ,EDI_TRANSACTION.PAGSEGURO_CODE
--    ,EDI_TRANSACTION.PREVISION_PAY_DATE
-- FROM TRANSACTION_TITLES
-- LEFT JOIN EDI_TRANSACTION
-- 	ON EDI_TRANSACTION.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
-- JOIN REPORT_TRANSACTIONS_EXP
-- 	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
-- JOIN DATA_TID_AVAILABLE_EC
-- 	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
-- 		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
-- JOIN [TRANSACTION](NOLOCK)
-- 	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
-- JOIN ACQUIRER
-- 	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
-- JOIN ASS_TR_TYPE_COMP
-- 	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
-- LEFT JOIN ASS_TR_TYPE_COMP tr
-- 	ON tr.COD_AC = ACQUIRER.COD_AC
-- 		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
-- 		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
-- 		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
-- 		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
-- 		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
-- LEFT JOIN ASSIGN_DATA
-- 	ON ASSIGN_DATA.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
-- 		AND ASSIGN_DATA.ACTIVE = 1
-- JOIN SITUATION
-- 	ON SITUATION.COD_SITUATION = [TRANSACTION_TITLES].COD_SITUATION
-- WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
-- AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) = 0
-- AND TRANSACTION_TITLES.COD_SITUATION IN
-- (
-- 4, --> AGUARDANDO PAGAMENTO
-- 8, --> PAGO
-- 17,--> AGUARDANDO CONFIRMAÇÃO DE PAGAMENTO
-- 24,--> AGENDA FINANCEIRA BLOQUEADA
-- 25,--> LIBERADO
-- 30 --> AGUARDANDO SPLIT DA AGENDA
-- )
-- AND CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) = @PREVISION_RECEIVE_DATE

-- END
-- IF OBJECT_ID('CONCILIATE_DISAGREEMENT') IS NOT NULL DROP TABLE CONCILIATE_DISAGREEMENT
-- GO
-- GO
-- IF OBJECT_ID('DISAGREEMENT_REASON') IS NOT NULL DROP TABLE DISAGREEMENT_REASON
-- GO
-- CREATE TABLE DISAGREEMENT_REASON
-- (
-- 	COD_DIV_REASON INT PRIMARY KEY IDENTITY,

-- 	[DESCRIPTION] VARCHAR(255),
-- 	DETAIL VARCHAR(255),
-- 	ACTIVE INT DEFAULT 1
-- )
-- GO

-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Data da transação divergente', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Tipo da transação incorreta', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Valor da transação', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Valor da parcela', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Prazo de pagamento expirado', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Parcela', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Previsão de pagamento incorreta', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Taxa de intermediação', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Valor liquido da transação', 1);
-- INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE) VALUES ('Status de pagamento', 1);

-- GO

-- CREATE TABLE CONCILIATE_DISAGREEMENT
-- (
-- 	COD_CONC_DIVERGENCIES INT PRIMARY KEY IDENTITY,
-- 	COD_TITLE INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE),
-- 	COD_DIV_REASON INT FOREIGN KEY REFERENCES DISAGREEMENT_REASON (COD_DIV_REASON),
-- 	DETAIL VARCHAR(255),
-- 	ACTIVE INT
-- );

-- SELECT * FROM DISAGREEMENT_REASON