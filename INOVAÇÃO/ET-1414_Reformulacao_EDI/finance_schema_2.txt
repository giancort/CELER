
IF OBJECT_ID('CONCILIATE_DISAGREEMENT') IS NOT NULL DROP TABLE CONCILIATE_DISAGREEMENT
GO
GO
IF OBJECT_ID('DISAGREEMENT_REASON') IS NOT NULL DROP TABLE DISAGREEMENT_REASON
GO
CREATE TABLE DISAGREEMENT_REASON
(
	COD_DIV_REASON INT PRIMARY KEY IDENTITY,

	[DESCRIPTION] VARCHAR(255),
	DETAIL VARCHAR(255),
	ACTIVE INT DEFAULT 1
)
GO

INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Data da transação divergente', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Tipo da transação incorreta', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Valor da transação', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Valor da parcela', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Prazo de pagamento expirado', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Parcela', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Previsão de pagamento incorreta', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Taxa de intermediação', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Valor liquido da transação', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Status de pagamento', 1);

GO

CREATE TABLE CONCILIATE_DISAGREEMENT
(
	COD_CONC_DIVERGENCIES INT PRIMARY KEY IDENTITY,
	COD_TITLE INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE),
	COD_DIV_REASON INT FOREIGN KEY REFERENCES DISAGREEMENT_REASON (COD_DIV_REASON),
	DETAIL VARCHAR(255),
	ACTIVE INT
);

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILED'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD RECONCILED INT;
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILE_DATE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD RECONCILE_DATE DATETIME;
END

GO
IF OBJECT_ID('SP_FD_TITLES_TO_CONCILIATE') IS NOT NULL DROP PROCEDURE SP_FD_TITLES_TO_CONCILIATE
GO

IF TYPE_ID('TP_CONC_EDI_TITLES') IS NOT NULL DROP TYPE TP_CONC_EDI_TITLES
GO

CREATE TYPE TP_CONC_EDI_TITLES AS TABLE
(	
	COD_TITLE INT,
	MOVEMENT_API_CODE VARCHAR(255),
	INITIAL_TRAN_DATE  DATETIME,
	ADJ_SALE_DATE DATETIME,
	PAGSEGURO_CODE VARCHAR(255),
	SALE_CODE VARCHAR(150),
	PAYMENT_DEADLINE VARCHAR(255),
	PLAN_DESC VARCHAR(255),
	PLOT INT,
	PLOTS INT,
	MOVEMENT_DATE DATETIME,
	TAX_PLOT_CUSTOMER DECIMAL (22,6),
	RATE_BILLET_SHOP DECIMAL (22,6),
	ORIGINAL_TRAN_VALUE DECIMAL (22,6),
	TAX_PLOT_SELLER DECIMAL (22,6),
	RATE_PLOT_SELLER DECIMAL (22,6),
	INTERMEDIATION_TAX DECIMAL (22,6),
	INTERMEDIATION_RATE DECIMAL (22,6),
	TAX_REP_APLICATION DECIMAL (22,6),
	LIQUID_TRAN_VALUE DECIMAL (22,6),
	ANTECIP_TAX DECIMAL (22,6),
	LIQUID_VALUE_ANTECIP DECIMAL (22,6),
	PAYMENT_STATUS VARCHAR(255),
	RESALE_IDENTIFY VARCHAR(255),
	PAYMENT_FORM VARCHAR(255),
	FIN_INSTITUTION VARCHAR(255),
	ENTRY_CHANNEL VARCHAR(255),
	READER VARCHAR(255),
	CAPTURE_FORM VARCHAR(200),
	BANK_CODE VARCHAR(200),
	BANK_AGENCY VARCHAR(100),
	BANK_ACCOUNT VARCHAR(100),
	LOGICAL_NUMBER_ACQ VARCHAR(255),
	BIN_CARD VARCHAR(200),
	HOLDER_CARD VARCHAR(255),
	AUTH_CODE VARCHAR(100),
	CV_CODE VARCHAR(200),
	SERIAL_EQUIP VARCHAR(255)
);

GO

CREATE PROCEDURE SP_FD_TITLES_TO_CONCILIATE 
(
	@TP_CONC_EDI_TITLES TP_CONC_EDI_TITLES READONLY,
	@ACQUIRER VARCHAR(255)
)
AS
BEGIN
SELECT
	TRANSACTION_TITLES.COD_TITLE
   ,REPORT_TRANSACTIONS_EXP.COD_TRAN
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE
   ,REPORT_TRANSACTIONS_EXP.AMOUNT
   ,REPORT_TRANSACTIONS_EXP.PLOTS
   ,TRANSACTION_TITLES.PLOT
   ,TRANSACTION_TITLES.PREVISION_RECEIVE_DATE
   ,TRADUCTION_SITUATION.SITUATION_TR AS SITUATION
   ,TRANSACTION_TITLES.IS_ASSIGN
   ,TRANSACTION_TITLES.ACQ_TAX
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN @TP_CONC_EDI_TITLES TP
	ON (REPORT_TRANSACTIONS_EXP.TRAN_CODE_EXT = REPORT_TRANSACTIONS_EXP.TRAN_CODE_EXT)
		OR (REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE = '000' + TP.CV_CODE
			AND REPORT_TRANSACTIONS_EXP.AUTH_CODE = TP.AUTH_CODE)
JOIN SITUATION
	ON TRANSACTION_TITLES.COD_SITUATION = SITUATION.COD_SITUATION
JOIN TRADUCTION_SITUATION
	ON TRADUCTION_SITUATION.COD_SITUATION = SITUATION.COD_SITUATION
JOIN ACQUIRER
	ON ACQUIRER.COD_AC = REPORT_TRANSACTIONS_EXP.COD_AC
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) = 0
AND TRANSACTION_TITLES.COD_SITUATION IN
(
4, --> AGUARDANDO PAGAMENTO
8, --> PAGO
17,--> AGUARDANDO CONFIRMAÇÃO DE PAGAMENTO
24,--> AGENDA FINANCEIRA BLOQUEADA
25,--> LIBERADO
30 --> AGUARDANDO SPLIT DA AGENDA
)
AND ACQUIRER.[CODE] = @ACQUIRER
END

GO

GO

IF OBJECT_ID('SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ') IS NOT NULL DROP PROCEDURE SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ
GO
CREATE PROCEDURE SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ
AS
SELECT
	COUNT(*) QTYTITLES
   ,ACQUIRER.[NAME] AS ACQUIRERNAME
   ,ACQUIRER.[CODE] AS ACQUIRERCODE
   ,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) AS PREVISIONPAYMENTDAY
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) <> 1
AND CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) > DATEADD(YEAR, -1, CAST(GETDATE() AS DATE))
GROUP BY ACQUIRER.[NAME]
		,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE)
		,ACQUIRER.[CODE]
ORDER BY CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE), ACQUIRER.[NAME]
, ACQUIRER.[CODE]

