IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'TRAN_CODE_EXT'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD TRAN_CODE_EXT VARCHAR(255);
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'API_CODE_MOVEMENT'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD API_CODE_MOVEMENT VARCHAR(255);
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILE_DATE'
	AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
BEGIN
ALTER TABLE REPORT_TRANSACTIONS_EXP
ADD RECONCILE_DATE DATETIME;
END

GO
IF OBJECT_ID('SP_LS_TRANSACTIONS_TO_RECONCILE') IS NOT NULL DROP PROCEDURE SP_LS_TRANSACTIONS_TO_RECONCILE
GO
CREATE PROCEDURE SP_LS_TRANSACTIONS_TO_RECONCILE
(
	@TRAN_DATE DATETIME = NULL,
	@ACQ_CODE VARCHAR(100)
)
AS
BEGIN
SET @TRAN_DATE = ISNULL(@TRAN_DATE, DATEADD(DAY, -1, GETDATE()))
	DECLARE @INITIAL DATETIME2 = convert(datetime, @TRAN_DATE, 103);
    DECLARE @FINAL DATETIME2 = DATEADD(MS, -1, DATEADD(D, 1, CONVERT(DATETIME2, @TRAN_DATE)))


SELECT
	REPORT_TRANSACTIONS_EXP.COD_TRAN
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE
   ,REPORT_TRANSACTIONS_EXP.AMOUNT
   ,REPORT_TRANSACTIONS_EXP.PLOTS
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_TYPE
   ,REPORT_TRANSACTIONS_EXP.CPF_CNPJ
   ,REPORT_TRANSACTIONS_EXP.NAME AS EC
   ,REPORT_TRANSACTIONS_EXP.TID
   ,REPORT_TRANSACTIONS_EXP.SITUATION
   ,REPORT_TRANSACTIONS_EXP.BRAND
   ,REPORT_TRANSACTIONS_EXP.PAN
   ,REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT
   ,REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE
   ,REPORT_TRANSACTIONS_EXP.AUTH_CODE
   ,REPORT_TRANSACTIONS_EXP.RECONCILED
   ,REPORT_TRANSACTIONS_EXP.TRAN_CODE_EXT
   ,REPORT_TRANSACTIONS_EXP.API_CODE_MOVEMENT
FROM REPORT_TRANSACTIONS_EXP
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
	ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION IN (3, 6, 22, 14)
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
AND [TRANSACTION].BRAZILIAN_DATE BETWEEN @INITIAL AND @FINAL
AND ACQUIRER.CODE = @ACQ_CODE
AND RECONCILED <> 1

END

GO

IF OBJECT_ID('SP_LS_NOT_CONCILIATION_OPENED_BY_ACQ') IS NOT NULL DROP PROCEDURE SP_LS_NOT_CONCILIATION_OPENED_BY_ACQ
GO
CREATE PROCEDURE SP_LS_NOT_CONCILIATION_OPENED_BY_ACQ
AS
BEGIN
SELECT
	COUNT(*) AS QTY_TO_CONCILIATE
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE
   ,ACQUIRER.CODE AS ACQUIRER_CODE
   ,ACQUIRER.NAME AS ACQUIRER_NAME
FROM REPORT_TRANSACTIONS_EXP
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
-- AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
	ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION IN (1, 3, 6, 22, 14)
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
AND RECONCILED <> 1
AND MONTH(TRANSACTION_DATE) = 5
--AND DAY(TRANSACTION_DATE) IN (7)
AND YEAR(TRANSACTION_DATE) = 2021
AND ACQUIRER.CODE = '115122641'
GROUP BY CAST(TRANSACTION_DATE AS DATE)
		,ACQUIRER.CODE
		,ACQUIRER.[NAME]
END

GO
IF OBJECT_ID('SP_CONCILIATE_EDI_TRANSACTIONS') IS NOT NULL DROP PROCEDURE SP_CONCILIATE_EDI_TRANSACTIONS
GO
IF TYPE_ID('TP_EDI_TRANSACTION') IS NOT NULL DROP TYPE TP_EDI_TRANSACTION
GO
CREATE TYPE TP_EDI_TRANSACTION AS TABLE
(
	API_CODE_MOVEMENT VARCHAR(255),
	REGISTER_TYPE VARCHAR(40),
	ESTABLISHMENT VARCHAR(100),
	TRANSACTION_DATE DATETIME,
	TRANSACTION_TYPE VARCHAR(100),
	TRANSACTION_CODE VARCHAR(255),
	AUTH_CODE VARCHAR(100),
	CV_CODE VARCHAR(250)
);

GO

CREATE PROCEDURE SP_CONCILIATE_EDI_TRANSACTIONS
(
	@ACQ_CODE VARCHAR(200),
	@TP_EDI_TRANSACTION TP_EDI_TRANSACTION READONLY
)
AS
BEGIN

SELECT
	REPORT_TRANSACTIONS_EXP.COD_TRAN
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE AS NSU
   ,ACQUIRER.NAME AS ACQUIRER
   ,ACQUIRER.COD_AC
   ,REPORT_TRANSACTIONS_EXP.RECONCILE_ID
   ,TP_EDI_TRANSACTION.API_CODE_MOVEMENT
   ,TP_EDI_TRANSACTION.TRANSACTION_CODE
FROM REPORT_TRANSACTIONS_EXP
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
	ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
JOIN @TP_EDI_TRANSACTION TP_EDI_TRANSACTION
	ON dbo.LPAD(TP_EDI_TRANSACTION.CV_CODE, 12, '0') = REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE
		AND TP_EDI_TRANSACTION.AUTH_CODE = REPORT_TRANSACTIONS_EXP.AUTH_CODE
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION IN (3, 6, 22, 14)
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
AND RECONCILED <> 1
AND ACQUIRER.CODE = @ACQ_CODE

END
GO
IF OBJECT_ID('SP_REG_CONCILIATE_EDI_TRANSACTION') IS NOT NULL DROP PROCEDURE SP_REG_CONCILIATE_EDI_TRANSACTION
GO
IF OBJECT_ID('SP_UP_CONCILIATED_TRANSACTION') IS NOT NULL DROP PROCEDURE SP_UP_CONCILIATED_TRANSACTION
GO
IF TYPE_ID('TP_CONC_TRANSACTION') IS NOT NULL DROP TYPE TP_CONC_TRANSACTION
GO
CREATE TYPE TP_CONC_TRANSACTION AS TABLE
(
	COD_TRAN INT,
	NSU VARCHAR(200),
	AMOUNT DECIMAL(22,6),
	PLOTS INT,
	TRANSACTION_TYPE VARCHAR(150),
	CPFCNPJ_EC VARCHAR(200),
	EC_NAME VARCHAR(200),
	TID VARCHAR(200),
	SITUATION VARCHAR(200),
	BRAND VARCHAR (200),
	PAN VARCHAR (200),
	TRAN_DATA_EXT VARCHAR (200),
	TRAN_DATA_EXT_VALUE VARCHAR (200),
	AUTH_CODE VARCHAR (200),
	RECONCILED INT,
	TRAN_CODE_EXT VARCHAR (200),
	ACQUIRER VARCHAR (200),
	ENTRY_CHANNEL VARCHAR (200),
	CV_CODE VARCHAR (200),
	SALE_CODE VARCHAR (200),
	PREVISION_PAY_DATE DATETIME,
	ADJUSTMENT_SALE_DATE DATETIME,
	ADJ_SALE_HOUR DATETIME,
	PAGSEGURO_CODE VARCHAR (200),
	FIN_INSTITUTION VARCHAR (200),
	READER VARCHAR (200),
	PAYMENT_METHOD VARCHAR (200),
	API_CODE_MOVEMENT VARCHAR (200),
	EXT_NSU VARCHAR (200)
);

GO
IF OBJECT_ID('SP_REG_CONCILIATE_EDI_TRANSACTION') IS NOT NULL DROP PROCEDURE SP_REG_CONCILIATE_EDI_TRANSACTION
GO
CREATE PROCEDURE SP_REG_CONCILIATE_EDI_TRANSACTION
(
	@TP_CONC_TRANSACTION TP_CONC_TRANSACTION READONLY
)
AS
BEGIN
--UPDATE REPORT_TRANSACTIONS
--SET COD_AC = ACQUIRER.COD_AC
--FROM REPORT_TRANSACTIONS
--JOIN @TP_CONC_TRANSACTION TP_CONC_TRANSACTION
--	ON TP_CONC_TRANSACTION.COD_TRAN = REPORT_TRANSACTIONS.COD_TRAN
--JOIN ACQUIRER
--	ON ACQUIRER.CODE = TP_CONC_TRANSACTION.ACQUIRER
--WHERE TP_CONC_TRANSACTION.RECONCILED = 1

--IF (@@rowcount < (SELECT
--			COUNT(*)
--		FROM @TP_CONC_TRANSACTION
--		WHERE RECONCILED = 1)
--	)
--THROW 61009, 'ACQUIRER NOT UPDATED ON REPORT_TRANSACTIONS', 1;

UPDATE REPORT_TRANSACTIONS_EXP
SET COD_AC = ACQUIRER.COD_AC
   ,NAME_ACQUIRER = ACQUIRER.[NAME]
   ,REPORT_TRANSACTIONS_EXP.TRAN_CODE_EXT = TP_CONC_TRANSACTION.PAGSEGURO_CODE
   ,REPORT_TRANSACTIONS_EXP.API_CODE_MOVEMENT = TP_CONC_TRANSACTION.API_CODE_MOVEMENT
   ,LOGICAL_NUMBER_ACQ = ISNULL(TP_CONC_TRANSACTION.TID, REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ)
   ,RECONCILED = 1
   ,RECONCILE_DATE = GETDATE()
FROM REPORT_TRANSACTIONS_EXP
JOIN @TP_CONC_TRANSACTION TP_CONC_TRANSACTION
	ON TP_CONC_TRANSACTION.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON ACQUIRER.CODE = TP_CONC_TRANSACTION.ACQUIRER
WHERE TP_CONC_TRANSACTION.RECONCILED = 1

IF (@@rowcount < (SELECT
			COUNT(*)
		FROM @TP_CONC_TRANSACTION
		WHERE RECONCILED = 1)
	)
THROW 61009, 'ACQUIRER NOT UPDATED ON REPORT_TRANSACTIONS_EXP', 1;

UPDATE REPORT_CONSOLIDATED_TRANS_SUB
SET ACQUIRER = ACQUIRER.[NAME]
FROM REPORT_CONSOLIDATED_TRANS_SUB
JOIN @TP_CONC_TRANSACTION TP_CONC_TRANSACTION
	ON TP_CONC_TRANSACTION.COD_TRAN = REPORT_CONSOLIDATED_TRANS_SUB.COD_TRAN
JOIN ACQUIRER
	ON ACQUIRER.CODE = TP_CONC_TRANSACTION.ACQUIRER
WHERE TP_CONC_TRANSACTION.RECONCILED = 1

IF (@@rowcount < (SELECT
			COUNT(*)
		FROM @TP_CONC_TRANSACTION
		WHERE RECONCILED = 1)
	)
THROW 61009, 'ACQUIRER NOT UPDATED ON REPORT_TRANSACTIONS_EXP', 1;

END

GO


--UPDATE REPORT_TRANSACTIONS_EXP
--SET RECONCILED = 0
--WHERE RECONCILED = 1
--AND MONTH(TRANSACTION_DATE) = 5
--AND DAY(TRANSACTION_DATE) IN (3, 4, 5, 6, 7)
--AND YEAR(TRANSACTION_DATE) = 2021
GO


CREATE NONCLUSTERED INDEX [<IX_REPORT_TRANSACTIONS_EXP_RECONCILED>]
ON [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_SITUATION],[RECONCILED])
INCLUDE ([COD_TRAN],[TRANSACTION_DATE],[LOGICAL_NUMBER_ACQ])

UPDATE REPORT_TRANSACTIONS_EXP
SET LOGICAL_NUMBER_ACQ = [TRANSACTION].LOGICAL_NUMBER_ACQ
FROM REPORT_TRANSACTIONS_EXP
JOIN ACQUIRER
	ON ACQUIRER.COD_AC = REPORT_TRANSACTIONS_EXP.COD_AC
JOIN [TRANSACTION]
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = [TRANSACTION].COD_TRAN
WHERE REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ IS NULL
AND [TRANSACTION].LOGICAL_NUMBER_ACQ IS NOT NULL
AND REPORT_TRANSACTIONS_EXP.COD_SITUATION IN (1, 3, 6, 22, 14)
AND (YEAR(REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE) = 2020
OR YEAR(REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE) = 2021)

UPDATE DATA_TID_AVAILABLE_EC
SET ACTIVE = 1
FROM DATA_TID_AVAILABLE_EC
WHERE TID IN (SELECT DISTINCT
		LOGICAL_NUMBER_ACQ
	FROM REPORT_TRANSACTIONS_EXP
	WHERE NAME_ACQUIRER LIKE '%PAGSEGURO%')