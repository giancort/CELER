IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'TAX_PLANDZERO_EC'
		AND object_id = OBJECT_ID(N'TRANSACTION_SERVICES'))

	ALTER TABLE TRANSACTION_SERVICES ADD TAX_PLANDZERO_EC DECIMAL(22, 6)

GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'COD_EC'
		AND object_id = OBJECT_ID(N'TRANSACTION_SERVICES'))

	ALTER TABLE TRANSACTION_SERVICES ADD COD_EC INT FOREIGN KEY REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC)

GO

GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'SALES_REPRESENTANTE'
		AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
	ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
	ADD SALES_REPRESENTANTE VARCHAR(200)
END



GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'CPF_CNPJ_REPRESENTANTE'
		AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
	ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
	ADD CPF_CNPJ_REPRESENTANTE VARCHAR(14)
END

GO


GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'EMAIL_REPRESENTANTE'
		AND object_id = OBJECT_ID(N'REPORT_CONSOLIDATED_TRANS_SUB'))
BEGIN
	ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
	ADD EMAIL_REPRESENTANTE VARCHAR(100)
END

GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'TAX_PLANDZERO_AFF'
		AND object_id = OBJECT_ID(N'TRANSACTION_SERVICES'))

	ALTER TABLE TRANSACTION_SERVICES ADD TAX_PLANDZERO_AFF DECIMAL(22, 6)

GO

IF OBJECT_ID('[FNC_DZERO_ANT_VALUE]') IS NOT NULL
	DROP FUNCTION DBO.[FNC_DZERO_ANT_VALUE]
GO
CREATE FUNCTION [DBO].[FNC_DZERO_ANT_VALUE] (@TAX_ANTECIP DECIMAL(22, 6),
@PLOT INT)
RETURNS DECIMAL(22, 6)
AS
BEGIN
	DECLARE @VALUE DECIMAL(22, 6);

	SET @VALUE = ((@TAX_ANTECIP / 30) * ((@PLOT * 30)));
	RETURN @VALUE


END;

GO

SELECT TOP 10
	*
FROM REPORT_TRANSACTIONS_EXP rte
WHERE rte.SPLIT = 1
ORDER BY 1 DESC

IF OBJECT_ID('[FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED]') IS NOT NULL
	DROP FUNCTION DBO.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED
GO
CREATE FUNCTION DBO.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED (@AMOUNT DECIMAL(22, 6),
@PLOT INT,
@MDR DECIMAL(22, 6) = 0,
@ANTECIP_VALUE DECIMAL(22, 6),
@DZERO_TAX DECIMAL(22, 6) = 0,
@COD_TTYPE INT)
RETURNS DECIMAL(22, 6)
AS
BEGIN

	DECLARE @VALUE DECIMAL(22, 6) = 0;
	DECLARE @ANTECIP_PERCENT DECIMAL(22, 6) = 0;
	DECLARE @PLOT_VALUE DECIMAL(22, 6);

	IF @COD_TTYPE = 2
		SET @VALUE = DBO.FNC_CALC_LIQUID(@AMOUNT, @MDR + @DZERO_TAX);
	ELSE
		SET @VALUE = DBO.FNC_CALC_LIQUID(@AMOUNT, @MDR);
	IF (@ANTECIP_VALUE IS NOT NULL
		AND @ANTECIP_VALUE > 0)
	BEGIN
		IF (@COD_TTYPE = 1)
			SET @ANTECIP_PERCENT = DBO.[FNC_DZERO_ANT_VALUE](@ANTECIP_VALUE + @DZERO_TAX, @PLOT)
		RETURN DBO.FNC_CALC_LIQUID(@VALUE, ISNULL(@ANTECIP_PERCENT, 0));

	END;
	RETURN @VALUE
END;




GO
IF OBJECT_ID('FNC_CALC_DZERO_NET_VALUE') IS NOT NULL
	DROP FUNCTION DBO.FNC_CALC_DZERO_NET_VALUE
GO
CREATE FUNCTION FNC_CALC_DZERO_NET_VALUE (@AMOUNT DECIMAL(22, 6),
@PLOTS INT,
@MDR DECIMAL(22, 6) = 0,
@ANTECIP_VALUE DECIMAL(22, 6),
@DZERO_TAX DECIMAL(22, 6) = 0,
@COD_TTYPE INT)
RETURNS DECIMAL(22, 6)
AS
BEGIN

	DECLARE @VALUE DECIMAL(22, 6) = 0;
	DECLARE @ANTECIP_PERCENT DECIMAL(22, 6) = 0;
	DECLARE @CONT INT = 0;
	DECLARE @VALUE_TOTAL DECIMAL(22, 6) = 0;
	DECLARE @PLOT_VALUE DECIMAL(22, 6);

	SET @PLOT_VALUE = (@AMOUNT / @PLOTS)


	WHILE @CONT < @PLOTS
	BEGIN

	IF @COD_TTYPE = 2
		SET @VALUE = DBO.FNC_CALC_LIQUID(@PLOT_VALUE, @MDR + @DZERO_TAX);
	ELSE
		SET @VALUE = DBO.FNC_CALC_LIQUID(@PLOT_VALUE, @MDR);

	IF (@ANTECIP_VALUE IS NOT NULL)
	BEGIN
		IF (@COD_TTYPE = 1)
			SET @ANTECIP_PERCENT = DBO.[FNC_DZERO_ANT_VALUE](@ANTECIP_VALUE + @DZERO_TAX, (@CONT + 1))
		SET @VALUE = DBO.FNC_CALC_LIQUID(@VALUE, ISNULL(@ANTECIP_PERCENT, 0));
		SET @VALUE_TOTAL += @VALUE;

	END;
	SET @CONT = @CONT + 1;
	END;
	RETURN @VALUE_TOTAL

END

GO

IF EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'CONFIG_JSON'
		AND object_id = OBJECT_ID(N'SERVICES_AVAILABLE'))
	ALTER TABLE SERVICES_AVAILABLE ALTER COLUMN CONFIG_JSON NVARCHAR(512) NULL
GO

IF NOT EXISTS (SELECT
			1
		FROM sys.check_constraints
		WHERE parent_object_id = OBJECT_ID('SERVICES_AVAILABLE')
		AND NAME = N'CONFIG_JSON_IS_VALID')
BEGIN
	ALTER TABLE SERVICES_AVAILABLE ADD CONSTRAINT CONFIG_JSON_IS_VALID CHECK (CONFIG_JSON IS NULL OR ISJSON(CONFIG_JSON) = 1)
END
GO

IF OBJECT_ID('SP_UPDATE_SERVICES_AFFILIATOR') IS NOT NULL
	DROP PROCEDURE SP_UPDATE_SERVICES_AFFILIATOR
GO
CREATE PROCEDURE [DBO].[SP_UPDATE_SERVICES_AFFILIATOR]
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author          VERSION      Date              Description
------------------------------------------------------------------------------------------
    Caike Ucha     v1           2020-02-26        Creation
    Elir Ribeiro    v2           2020-04-20         add service billet
    Caike Ucha     v3           2020-04-20        add service MultiEC
    Elir Ribeiro    v4           2020-04-22        alter proc
    Luiz Aquino     v5           2020-05-18        et 859 tcu estabelecimento
    Luiz Aquino     V6           2020-06-23        ET-895 PlanDZero
------------------------------------------------------------------------------------------
***************************************************************************************************/ (@CODAFFILIATED INT,
@COD_COMP INT,
@COD_USER_ALT INT,
@SPOT_TAX DECIMAL(6, 2) = 0,
@HAS_SPOT INT = 0,
@SPLIT_OPT INT = 0,
@HAS_SPLIT INT = 0,
@HAS_NOTIFICATION INT = 0,
@PASSWORD_NOTIFICATION VARCHAR(255) = NULL,
@CLIENTID_NOTIFICATION VARCHAR(255) = NULL,
@LEDGERRETENTION INT = 0,
@LEDGERRETENTIONCONFIG VARCHAR(512) = NULL,
@HAS_TRANSLATION INT = 0,
@OPERATION_AFF INT = 0,
@HAS_BILLET INT = 0,
@BILLET_TAX DECIMAL(6, 2) = 0,
@HAS_SPLIT_BILLET INT = 0,
@MULTIEC_ACTIVE INT = 0,
@TCU_DETAILED INT = 0,
@PLANDZERO INT = 0,
@PlanDZeroJson VARCHAR(256) = NULL)
AS
BEGIN
	DECLARE @CODSPOTSERVICE INT;
	DECLARE @COD_SPLIT_SERVICE INT;
	DECLARE @COD_GWNOTIFICATION INT;
	DECLARE @HAS_CREDENTIAL INT = 0;
	DECLARE @COD_AWAITSPLIT INT = 0;
	DECLARE @COD_TRANSLATE INT;
	DECLARE @CODBILLETSERVICE INT;
	DECLARE @CODSPLITBILLET INT;
	DECLARE @COD_MULTIEC_AFFILIATOR INT;
	DECLARE @COD_TCU_DETAILED INT;
	DECLARE @COD_PLANDZERO INT;

	SELECT
		@CODSPOTSERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '1';
	SELECT
		@COD_SPLIT_SERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'SPLIT';
	SELECT
		@COD_GWNOTIFICATION = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'GWNOTIFICATIONAFFILIATOR';
	SELECT
		@COD_AWAITSPLIT = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '8';
	SELECT
		@HAS_CREDENTIAL = COUNT(*)
	FROM [ACCESS_APPAPI]
	WHERE [COD_AFFILIATOR] = @CODAFFILIATED
	AND [ACTIVE] = 1;
	SELECT
		@COD_TRANSLATE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'TRANSLATE';
	SELECT
		@CODBILLETSERVICE = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '12';
	SELECT
		@CODSPLITBILLET = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '13';
	SELECT
		@COD_MULTIEC_AFFILIATOR = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '14';
	SELECT
		@COD_TCU_DETAILED = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [CODE] = '16';
	SELECT
		@COD_PLANDZERO = [COD_ITEM_SERVICE]
	FROM [ITEMS_SERVICES_AVAILABLE]
	WHERE [NAME] = 'PlanDZero';

	IF (@HAS_SPOT = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61046, 'Conflict Affiliated has establishments with Spot Active', 1;

	IF (@HAS_SPLIT = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

	IF (@HAS_SPLIT = 1
		AND @SPLIT_OPT = 1
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61049, 'AFFILIATE CONFLICT HAS ALREADY ESTABLISHMENTS WITH SPLIT ENABLE', 1;

	IF (@MULTIEC_ACTIVE = 0
		AND (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NOT NULL
			AND [ACTIVE] = 1)
		> 0)
		THROW 61059, 'AFFILIATE CONFLICT HAS ESTABLISHMENTS WITH MULTIEC ACTIVE', 1;

	/*******************************************
	*********** UPDATE SPOT AFFILIATED *********
	*******************************************/

	IF (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = 1
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
		> 0
	BEGIN
		IF @HAS_SPOT = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODSPOTSERVICE
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		ELSE
		BEGIN
			IF @SPOT_TAX > (SELECT
						MIN([SPOT_TAX])
					FROM [COMMERCIAL_ESTABLISHMENT]
					WHERE [COD_AFFILIATOR] = @CODAFFILIATED
					AND [SPOT_TAX] <> 0
					AND [ACTIVE] = 1)
				THROW 61047, 'AFFILIATED NEW SPOT TAX IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
		END;
	END;
	ELSE
	IF @HAS_SPOT = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
			VALUES (current_timestamp, @COD_USER_ALT, @CODSPOTSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
	END;

	UPDATE AFFILIATOR
	SET SPOT_TAX = @SPOT_TAX
	   ,OPERATION_AFF = @OPERATION_AFF
	WHERE COD_AFFILIATOR = @CODAFFILIATED;

	/********************************************
	*********** UPDATE SPLIT AFFILIATED *********
	********************************************/

	IF (@HAS_SPLIT = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END;
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_SPLIT_SERVICE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_SPLIT_SERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, (SELECT [COD_OPT_SERV] FROM [OPTIONS_SERVICES] WHERE [CODE] = @SPLIT_OPT));
	END;

	/**********************************************
	*********** UPDATE LEDGER RETENTION ***********
	**********************************************/

	IF (@LEDGERRETENTION = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END;
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_AWAITSPLIT
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [CONFIG_JSON])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_AWAITSPLIT, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @LEDGERRETENTIONCONFIG);

		DECLARE @DT_FROM DATE;
		DECLARE @DT_UNTIL DATE;

		SELECT
			@DT_FROM = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.from'), 103);
		SELECT
			@DT_UNTIL = CONVERT(DATE, JSON_VALUE(@LEDGERRETENTIONCONFIG, '$.until'), 103);

		UPDATE [LEDGER_RETENTION_CONTROL]
		SET [ACTIVE] = 0
		FROM [LEDGER_RETENTION_CONTROL]
		JOIN [COMMERCIAL_ESTABLISHMENT]
			ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [LEDGER_RETENTION_CONTROL].[COD_EC]
		WHERE [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR] = 1
		AND [LEDGER_RETENTION_CONTROL].[ACTIVE] = 1
		AND ([LEDGER_RETENTION_CONTROL].[FROM_DATE] < @DT_FROM
		OR [LEDGER_RETENTION_CONTROL].[FROM_DATE] > @DT_UNTIL
		OR [LEDGER_RETENTION_CONTROL].[UNTIL_DATE] > @DT_UNTIL);
	END;

	/************************************************
	*********** UPDATE TRANSLATE AFFILIATED *********
	************************************************/

	IF @HAS_TRANSLATION = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END;
	ELSE
	BEGIN
		IF (SELECT
					COUNT(*)
				FROM [SERVICES_AVAILABLE]
				WHERE [COD_ITEM_SERVICE] = @COD_TRANSLATE
				AND [COD_COMP] = @COD_COMP
				AND [COD_AFFILIATOR] = @CODAFFILIATED
				AND [COD_EC] IS NULL
				AND [ACTIVE] = 1)
			= 0
		BEGIN
			INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
				VALUES (current_timestamp, @COD_USER_ALT, @COD_TRANSLATE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);
		END;
	END;

	/***************************************************
	*********** UPDATE NOTIFICATION AFFILIATED *********
	***************************************************/

	IF @HAS_NOTIFICATION = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		UPDATE [ACCESS_APPAPI]
		SET [ACTIVE] = 0
		WHERE [COD_AFFILIATOR] = @CODAFFILIATED
		AND [ACTIVE] = 1;
	END;
	ELSE
	IF @HAS_CREDENTIAL = 0
		AND @HAS_NOTIFICATION = 1
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_GWNOTIFICATION
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_GWNOTIFICATION, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp);

		EXEC [SP_REG_ACCESS_NOTIFICATION_AFF] @CODAFFILIATED
											 ,@PASSWORD_NOTIFICATION
											 ,@CLIENTID_NOTIFICATION;
	END

	/*******************************************
	*********** UPDATE BILLET AFFILIATED *******
	*******************************************/

	IF (SELECT
				COUNT(*)
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
		> 0
	BEGIN
		IF @HAS_BILLET = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODBILLETSERVICE
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		IF @HAS_SPLIT_BILLET = 0
		BEGIN
			UPDATE [SERVICES_AVAILABLE]
			SET [ACTIVE] = 0
			   ,[COD_USER] = @COD_USER_ALT
			   ,[MODIFY_DATE] = current_timestamp
			WHERE [COD_ITEM_SERVICE] = @CODSPLITBILLET
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL;
		END;
		ELSE
		BEGIN
			IF @BILLET_TAX > (SELECT
						MIN([BILLET_TAX])
					FROM [COMMERCIAL_ESTABLISHMENT]
					WHERE [COD_AFFILIATOR] = @CODAFFILIATED
					AND [BILLET_TAX] <> 0
					AND [ACTIVE] = 1)
				THROW 61047, 'AFFILIATED NEW BILLET VALUE IS HIGHER THAN ONE OF ITS ESTABLISHMENTS', 1;
		END;
	END;
	ELSE
	IF @HAS_BILLET = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
			VALUES (current_timestamp, @COD_USER_ALT, @CODBILLETSERVICE, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
	END;

	IF @HAS_SPLIT_BILLET = 1
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], SERVICE_AMOUNT)
			VALUES (current_timestamp, @COD_USER_ALT, @CODSPLITBILLET, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, @BILLET_TAX);
	END;

	UPDATE AFFILIATOR
	SET BILLET_TAX = @BILLET_TAX
	WHERE COD_AFFILIATOR = @CODAFFILIATED;

	/*******************************************
	*********** UPDATE MULTIEC AFFILIATED *******
	*******************************************/

	IF (@MULTIEC_ACTIVE = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END
	ELSE
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_MULTIEC_AFFILIATOR
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;

		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_MULTIEC_AFFILIATOR, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
	END

	/*******************************************
	    *********** TCU DETAILED *******
	*******************************************/

	IF (@TCU_DETAILED = 0)
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_TCU_DETAILED
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV])
			VALUES (current_timestamp, @COD_USER_ALT, @COD_TCU_DETAILED, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1);
	END

	/*******************************************
	    *********** Plano DZero *******
	*******************************************/

	IF @PLANDZERO = 0
	BEGIN
		UPDATE [SERVICES_AVAILABLE]
		SET [ACTIVE] = 0
		   ,[COD_USER] = @COD_USER_ALT
		   ,[MODIFY_DATE] = current_timestamp
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED;
	END
	ELSE
	IF NOT EXISTS (SELECT
				COD_ITEM_SERVICE
			FROM [SERVICES_AVAILABLE]
			WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
			AND [COD_COMP] = @COD_COMP
			AND [COD_AFFILIATOR] = @CODAFFILIATED
			AND [COD_EC] IS NULL
			AND [ACTIVE] = 1)
	BEGIN
		INSERT INTO [SERVICES_AVAILABLE] ([CREATED_AT], [COD_USER], [COD_ITEM_SERVICE], [COD_COMP], [COD_AFFILIATOR], [COD_EC], [ACTIVE], [MODIFY_DATE], [COD_OPT_SERV], CONFIG_JSON)
			VALUES (current_timestamp, @COD_USER_ALT, @COD_PLANDZERO, @COD_COMP, @CODAFFILIATED, NULL, 1, current_timestamp, 1, @PlanDZeroJson);
	END
	ELSE
	BEGIN

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = @PlanDZeroJson
		   ,COD_USER = @COD_USER_ALT
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_COMP] = @COD_COMP
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NULL
		AND [ACTIVE] = 1

		DECLARE @CREDIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.credit') AS DECIMAL(4, 2))
		DECLARE @DEBIT DECIMAL(4, 2) = CAST(JSON_VALUE(@PlanDZeroJson, '$.debit') AS DECIMAL(4, 2))
		DECLARE @CELERONLY VARCHAR(16) = JSON_VALUE(@PlanDZeroJson, '$.celerOnly')

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.debit', @DEBIT)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.debit') AS DECIMAL(4, 2)) < @DEBIT

		UPDATE [SERVICES_AVAILABLE]
		SET CONFIG_JSON = JSON_MODIFY(CONFIG_JSON, '$.credit', @CREDIT)
		   ,MODIFY_DATE = GETDATE()
		WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
		AND [COD_AFFILIATOR] = @CODAFFILIATED
		AND [COD_EC] IS NOT NULL
		AND [ACTIVE] = 1
		AND CAST(JSON_VALUE(CONFIG_JSON, '$.credit') AS DECIMAL(4, 2)) < @CREDIT

		IF @CELERONLY = 'true'
		BEGIN
			DECLARE @CODBKCELER INT
			SELECT
				@CODBKCELER = COD_BANK
			FROM BANKS
			WHERE NAME = 'CELER DIGITAL'

			UPDATE SA
			SET ACTIVE = 0
			   ,MODIFY_DATE = GETDATE()
			FROM [SERVICES_AVAILABLE] SA
			JOIN BANK_DETAILS_EC BDE
				ON SA.COD_EC = BDE.COD_EC
				AND BDE.ACTIVE = 1
				AND IS_CERC = 0
				AND COD_BANK != @CODBKCELER
			WHERE [COD_ITEM_SERVICE] = @COD_PLANDZERO
			AND SA.[COD_AFFILIATOR] = @CODAFFILIATED
			AND SA.[COD_EC] IS NOT NULL
			AND SA.[ACTIVE] = 1
		END
	END
END;
GO


IF OBJECT_ID('SP_UP_SERVICES') IS NOT NULL
	DROP PROCEDURE SP_UP_SERVICES
GO
CREATE PROCEDURE [DBO].[SP_UP_SERVICES]
/*----------------------------------------------------------------------------------------          
    Procedure Name: [SP_UP_SERVICES]           
    Project.......: TKPP          
------------------------------------------------------------------------------------------          
    Author    VERSION   Date   Description           
------------------------------------------------------------------------------------------           
    Caike Ucha   V1    04/09/2019  Creation           
    Lucas Aguiar  v2    2019-09-30  add servio de aguardando split           
    Luiz Aquino   v3    2019-10-18  Servio de reteno de agenda           
    Marcus Gall   v4    2019-12-05  Reaproveitamento de usuarios para transao online                 
    Elir Ribeiro  v6    2020-04-17  addd split boleto online  
    Caike Ucha   V7    2020-04-22  add multi ec
    Luiz Aquino   V8    2020-06-23  ET-895 PlanDZero
------------------------------------------------------------------------------------------*/ (@COD_EC INT,
@COD_AFFILIATOR INT,
@COD_USER INT,
@SERVICE_NAME VARCHAR(100),
@VALUE DECIMAL(22, 6),
@ACTIVE INT,
@TAX_AFILIATOR DECIMAL(22, 6) = NULL,
@BILLET_TAX DECIMAL(22, 6) = NULL,
@VALUE_TAX_BILLET DECIMAL(22, 6) = 0,
@CONFIG_JSON VARCHAR(512) = NULL)
AS

	DECLARE @COD_ITEM_SERVICE INT;
	DECLARE @ONLINE_ACTIVE INT;
	DECLARE @CREDENCIAL INT;

	SELECT
		@CREDENCIAL = TRANSACTION_ONLINE
	FROM COMMERCIAL_ESTABLISHMENT
	WHERE COD_EC = @COD_EC
	BEGIN
		SELECT
			@COD_ITEM_SERVICE = COD_ITEM_SERVICE
		FROM ITEMS_SERVICES_AVAILABLE
		WHERE [NAME] = @SERVICE_NAME

		IF @SERVICE_NAME = 'CREDENTIALS'
		BEGIN
			IF (@ACTIVE = 1)
			BEGIN
				IF ((SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						WHERE USER_ONLINE IS NULL
						AND COD_EC = @COD_EC)
					> 0)
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET USER_ONLINE = NEXT VALUE FOR [SEQ_TR_ON_EC]
					   ,PWD_ONLINE = CONVERT(VARCHAR(255), NEWID())
					   ,HAS_CREDENTIALS = 1
					WHERE COD_EC = @COD_EC;
				ELSE
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET HAS_CREDENTIALS = 1
					WHERE COD_EC = @COD_EC;
			END
			ELSE
				UPDATE COMMERCIAL_ESTABLISHMENT
				SET HAS_CREDENTIALS = 0
				WHERE COD_EC = @COD_EC;
		END

		IF @SERVICE_NAME = 'SPOT'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (SPOT)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET SPOT_TAX = 0
				WHERE COD_EC = @COD_EC
			END
			ELSE
			BEGIN
				IF (@COD_AFFILIATOR IS NULL
					AND @VALUE <= 0)
					THROW 61054, 'A taxa Spot no pode ser menor ou igual a Zero ', 1;

				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET SPOT_TAX = @VALUE
				WHERE COD_EC = @COD_EC;
			END
		END

		IF @SERVICE_NAME = 'BOLETO'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (BILLET)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET BILLET_TAX = 0
				WHERE COD_EC = @COD_EC
			END
			ELSE
			BEGIN
				IF (@COD_AFFILIATOR IS NULL
					AND @VALUE_TAX_BILLET <= 0)
					THROW 61054, 'A taxa boleto no pode ser menor ou igual a Zero ', 1;

				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, SERVICE_AMOUNT)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @VALUE_TAX_BILLET)

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET BILLET_TAX = @VALUE_TAX_BILLET
				WHERE COD_EC = @COD_EC;
			END
		END

		IF @SERVICE_NAME = 'SPLIT BOLETO ONLINE'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61044, 'Affiliated is not allowed to give advance (SPLIT BILLET ONLINE)', 1;

			IF (@ACTIVE = 0)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
		END

		IF @SERVICE_NAME = 'SPLIT'
		BEGIN
			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, COD_OPT_SERV)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, (SELECT COD_OPT_SERV FROM OPTIONS_SERVICES WHERE [DESCRIPTION] = 'ALGUNS'))
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END

		IF @SERVICE_NAME = 'PARCELADOCLIENTE'
		BEGIN
			SELECT TOP 1
				@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
			FROM SERVICES_AVAILABLE
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
			AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
			AND SERVICES_AVAILABLE.ACTIVE = 1

			IF @ACTIVE = 1
				AND (@ONLINE_ACTIVE = 0
				OR @ONLINE_ACTIVE IS NULL)
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
			END
			ELSE
			BEGIN
				IF @ACTIVE = 0
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET ACTIVE = 0
					   ,COD_USER = @COD_USER
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND (@COD_AFFILIATOR IS NULL
					OR COD_AFFILIATOR = @COD_AFFILIATOR)
					AND COD_EC = @COD_EC
					AND ACTIVE = 1;
				END
			END;
		END

		IF @SERVICE_NAME = 'POSWEBDIRECT'
		BEGIN
			SELECT TOP 1
				@ONLINE_ACTIVE = SERVICES_AVAILABLE.ACTIVE
			FROM SERVICES_AVAILABLE
			INNER JOIN ITEMS_SERVICES_AVAILABLE
				ON ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE = SERVICES_AVAILABLE.COD_ITEM_SERVICE
			WHERE SERVICES_AVAILABLE.COD_EC = @COD_EC
			AND ITEMS_SERVICES_AVAILABLE.NAME = @SERVICE_NAME
			AND SERVICES_AVAILABLE.ACTIVE = 1

			IF @ACTIVE = 1
				AND (@ONLINE_ACTIVE = 0
				OR @ONLINE_ACTIVE IS NULL)
			BEGIN
				IF (SELECT
							COUNT(COD_SOURCE_TRAN)
						FROM ASS_TAX_DEPART
						INNER JOIN DEPARTMENTS_BRANCH
							ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
						INNER JOIN BRANCH_EC
							ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
						INNER JOIN COMMERCIAL_ESTABLISHMENT
							ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
						WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
						AND ASS_TAX_DEPART.ACTIVE = 1
						AND COD_SOURCE_TRAN = 1)
					= 0
					THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

				IF (SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						LEFT JOIN AFFILIATOR
							ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
						LEFT JOIN PLAN_TAX_AFFILIATOR
							ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
						WHERE COD_EC = @COD_EC
						AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
						OR COD_SOURCE_TRAN IS NULL))
					= 0
					THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL);
			END
			IF @ACTIVE = 0
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;
			END;
		END

		IF @SERVICE_NAME = 'TRANSACTIONONLINE'
		BEGIN
			IF (@CREDENCIAL = 0
				AND @ACTIVE = 1)
			BEGIN
				IF (SELECT
							COUNT(COD_SOURCE_TRAN)
						FROM ASS_TAX_DEPART
						INNER JOIN DEPARTMENTS_BRANCH
							ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
						INNER JOIN BRANCH_EC
							ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
						INNER JOIN COMMERCIAL_ESTABLISHMENT
							ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
						WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
						AND ASS_TAX_DEPART.ACTIVE = 1
						AND COD_SOURCE_TRAN = 1)
					= 0
					THROW 61055, 'Para habilitar o servio de transaes online, o EC precisa de um plano compatvel com o tipo de transao.', 1;

				IF (SELECT
							COUNT(*)
						FROM COMMERCIAL_ESTABLISHMENT
						LEFT JOIN AFFILIATOR
							ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
						LEFT JOIN PLAN_TAX_AFFILIATOR
							ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
						WHERE COD_EC = @COD_EC
						AND (PLAN_TAX_AFFILIATOR.COD_SOURCE_TRAN = 1
						OR COD_SOURCE_TRAN IS NULL))
					= 0
					THROW 61056, 'Para habilitar o servio de transaes online, o Afiliador precisa de um plano compatvel com o tipo de transao.', 1;

				UPDATE COMMERCIAL_ESTABLISHMENT
				SET TRANSACTION_ONLINE = 1
				WHERE COD_EC = @COD_EC;
			END
			ELSE
			BEGIN
				IF (@CREDENCIAL = 1
					AND @ACTIVE = 0)
				BEGIN
					UPDATE COMMERCIAL_ESTABLISHMENT
					SET TRANSACTION_ONLINE = 0
					WHERE COD_EC = @COD_EC;
				END
			END
		END

		IF @SERVICE_NAME = 'LEDGER_RETENTION'
		BEGIN
			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END;

		IF @SERVICE_NAME = 'MULTIEC'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND (SELECT
						COUNT(*)
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				<= 0)
				THROW 61060, 'AFFILIATED IS NOT ALLOWED TO GIVE MULTI ESTABLISHMENT', 1;

			IF @ACTIVE = 1
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1;

				INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE)
					VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL)
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END;
		END;

		IF @SERVICE_NAME = 'PlanDZero'
		BEGIN
			IF (@ACTIVE = 1
				AND @COD_AFFILIATOR IS NOT NULL
				AND NOT EXISTS (SELECT
						COD_ITEM_SERVICE
					FROM SERVICES_AVAILABLE
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC IS NULL
					AND ACTIVE = 1)
				)
				THROW 61063, 'AFFILIATED DOES NOT HAVE PlanDZero SERVICE', 1;

			DECLARE @AFFCONFIG NVARCHAR(512)
			DECLARE @CODBKCELER INT

			SELECT
				@AFFCONFIG = CONFIG_JSON
			FROM SERVICES_AVAILABLE
			WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
			AND COD_AFFILIATOR = @COD_AFFILIATOR
			AND COD_EC IS NULL
			AND ACTIVE = 1
			SELECT
				@CODBKCELER = COD_BANK
			FROM BANKS
			WHERE NAME = 'CELER DIGITAL'

			IF EXISTS (SELECT
						COD_BANK
					FROM BANK_DETAILS_EC BDE
					JOIN BANK_DETAILS_CERC_INFO BDCI
						ON BDE.COD_BK_EC = BDCI.COD_BK_EC
					WHERE COD_EC = @COD_EC
					AND ACTIVE = 1
					AND IS_CERC = 1
					AND END_DATE > GETDATE()
					AND BDCI.COD_SITUATION = 3)
				THROW 61064, 'EC CAN NOT HAVE BANK LOCK (PlanDZero)', 1;

			IF JSON_VALUE(@AFFCONFIG, '$.celerOnly') = 'true'
				AND NOT EXISTS (SELECT
						1
					FROM BANK_DETAILS_EC
					WHERE COD_EC = @COD_EC
					AND ACTIVE = 1
					AND COD_BANK = @CODBKCELER)
				THROW 61065, 'EC BANK IS NOT CELER (PlanDZero)', 1;

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)) > CAST(JSON_VALUE(@CONFIG_JSON, '$.debit') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.debit', CAST(JSON_VALUE(@AFFCONFIG, '$.debit') AS DECIMAL(4, 2)))
			END

			IF CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)) > CAST(JSON_VALUE(@CONFIG_JSON, '$.credit') AS DECIMAL(4, 2))
			BEGIN
				SET @CONFIG_JSON = JSON_MODIFY(@CONFIG_JSON, '$.credit', CAST(JSON_VALUE(@AFFCONFIG, '$.credit') AS DECIMAL(4, 2)))
			END

			IF @ACTIVE = 1
			BEGIN
				IF EXISTS (SELECT
							COD_ITEM_SERVICE
						FROM SERVICES_AVAILABLE
						WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
						AND COD_AFFILIATOR = @COD_AFFILIATOR
						AND COD_EC = @COD_EC
						AND ACTIVE = 1)
				BEGIN
					UPDATE SERVICES_AVAILABLE
					SET CONFIG_JSON = @CONFIG_JSON
					   ,COD_USER = @COD_EC
					   ,MODIFY_DATE = GETDATE()
					WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
					AND COD_AFFILIATOR = @COD_AFFILIATOR
					AND COD_EC = @COD_EC
					AND ACTIVE = 1
				END
				ELSE
				BEGIN
					INSERT INTO SERVICES_AVAILABLE (CREATED_AT, COD_USER, COD_ITEM_SERVICE, COD_COMP, COD_AFFILIATOR, COD_EC, ACTIVE, MODIFY_DATE, CONFIG_JSON)
						VALUES (GETDATE(), @COD_USER, @COD_ITEM_SERVICE, NULL, @COD_AFFILIATOR, @COD_EC, 1, NULL, @CONFIG_JSON)
				END
			END
			ELSE
			BEGIN
				UPDATE SERVICES_AVAILABLE
				SET ACTIVE = 0
				   ,COD_USER = @COD_USER
				   ,MODIFY_DATE = GETDATE()
				WHERE COD_ITEM_SERVICE = @COD_ITEM_SERVICE
				AND (@COD_AFFILIATOR IS NULL
				OR COD_AFFILIATOR = @COD_AFFILIATOR)
				AND COD_EC = @COD_EC
				AND ACTIVE = 1
			END
		END
	END;
GO

IF OBJECT_ID('SP_LS_ESTABLISHMENT_SERVICES') IS NOT NULL
	DROP PROCEDURE SP_LS_ESTABLISHMENT_SERVICES
GO
CREATE PROCEDURE [DBO].[SP_LS_ESTABLISHMENT_SERVICES]
/*----------------------------------------------------------------------------------------        
    Procedure Name: [SP_LS_ESTABLISHMENT_SERVICES]        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author                   VERSION	Date            Description        
------------------------------------------------------------------------------------------
    Luiz Aquino					v1		18/12/2018	    CREATE
    Ams Corcino dos Santos		V2		27/12/2018	 	ALTER
    Lucas Aguiar				v3		18-04-2019		ADD PARMETRO ALL_SERVICE
    Luiz Aquino                 v4      24-06-2020      Add ConfigJson (ET-895 PlanDZero)
------------------------------------------------------------------------------------------*/ (@EstablishmentCode INT)
AS
BEGIN
	SELECT
		Item.CODE
	   ,Item.[NAME]
	   ,available.COD_AFFILIATOR
	   ,available.COD_EC
	   ,available.CREATED_AT
	   ,Item.COD_ITEM_SERVICE AS ITEM_PK
	   ,Item.[DESCRIPTION] AS ITEM_DESCRIPTION
	   ,OPT.CODE AS CODE_OPTION
	   ,OPT.DESCRIPTION
	   ,available.CONFIG_JSON
	FROM SERVICES_AVAILABLE available
	JOIN ITEMS_SERVICES_AVAILABLE Item
		ON Item.COD_ITEM_SERVICE = available.COD_ITEM_SERVICE
	JOIN OPTIONS_SERVICES OPT
		ON OPT.COD_OPT_SERV = available.COD_OPT_SERV
	WHERE available.COD_EC = @EstablishmentCode
	AND available.ACTIVE = 1
END;
GO
IF OBJECT_ID('CHECK_EC_SERVICES') IS NOT NULL
	DROP PROCEDURE CHECK_EC_SERVICES
GO
CREATE PROCEDURE [DBO].[CHECK_EC_SERVICES]
/*----------------------------------------------------------------------------------------        
    Project.......: TKPP        
------------------------------------------------------------------------------------------        
    Author           VERSION	Date          Description        
------------------------------------------------------------------------------------------
    Luiz Aquino      v1        25-06-2020     CREATE (ET-895 PlanDZero)
------------------------------------------------------------------------------------------*/ (@Ecs CODE_TYPE READONLY)
AS
BEGIN

	SELECT
		BDE.COD_EC INTO #EcsLegerLock
	FROM BANK_DETAILS_EC BDE
	JOIN BANK_DETAILS_CERC_INFO BDCI
		ON BDE.COD_BK_EC = BDCI.COD_BK_EC
			AND COD_SITUATION = 3
			AND END_DATE > GETDATE()
	WHERE BDE.ACTIVE = 1
	AND BDE.IS_CERC = 1
	AND COD_EC IN (SELECT
			CODE
		FROM @Ecs)

	DECLARE @CODPLADZERO INT
	SELECT
		@CODPLADZERO = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE NAME = 'PlanDZero'

	--Desativa PlanDZero dos ecs com trava
	UPDATE SERVICES_AVAILABLE
	SET ACTIVE = 0
	   ,MODIFY_DATE = GETDATE()
	WHERE COD_ITEM_SERVICE = @CODPLADZERO
	AND ACTIVE = 1
	AND COD_EC IN (SELECT
			COD_EC
		FROM #EcsLegerLock)
END
GO

IF OBJECT_ID('SP_REG_BANK_CERC_EC') IS NOT NULL
	DROP PROCEDURE SP_REG_BANK_CERC_EC
GO
CREATE PROCEDURE [DBO].[SP_REG_BANK_CERC_EC]
/***********************************************************************************************************    
----------------------------------------------------------------------------------------                  
    Procedure Name: [SP_REG_BANK_CERC_EC]                  
    Project.......: TKPP                  
------------------------------------------------------------------------------------------                  
    Author         VERSION      Date           Description                  
------------------------------------------------------------------------------------------                  
    Luiz Aquino    v1           2019-07-10     Created                  
    Lucas Aguiar   v2           2019-07-16     add table type 
    Luiz Aquino    V3           2020-06-25     PlanDZero ET-895
------------------------------------------------------------------------------------------          
***********************************************************************************************************/ (@BANK_TYPE [BANK_CERC] READONLY)
AS
BEGIN

	DECLARE @AGENCY VARCHAR(100);
	DECLARE @DIGIT VARCHAR(100);
	DECLARE @ACCOUNT VARCHAR(100);
	DECLARE @DIGIT_ACCOUNT VARCHAR(100);
	DECLARE @CPF_CNPJ VARCHAR(14);
	DECLARE @BANK INT;
	DECLARE @ACCOUNT_TYPE INT;
	DECLARE @COD_BRAND INT;
	DECLARE @PERCENTAGE DECIMAL(22, 6);
	DECLARE @START_DATE DATETIME;
	DECLARE @END_DATE DATETIME;
	DECLARE @COD_SITUATION INT;
	DECLARE @REG_IDENTIFIER NVARCHAR(100);
	DECLARE @TABLE_ID TABLE (
		[ID] INT
	);
	DECLARE @COUNT INT = 0;
	DECLARE @COD_CERC_INFO INT;
	DECLARE @COD_TRAN_TYPE INT;

	DECLARE DB_CURSOR CURSOR FOR SELECT
		[BK_TP].[AGENCY]
	   ,[BK_TP].[DIGIT]
	   ,[BK_TP].[ACCOUNT]
	   ,[BK_TP].[DIGIT_ACCOUNT]
	   ,[BK_TP].[CPF_CNPJ]
	   ,[BK_TP].[COD_BANK]
	   ,[BK_TP].[ACCOUNT_TYPE]
	   ,[BK_TP].[COD_BRAND]
	   ,[BK_TP].[PERCENTAGE]
	   ,[BK_TP].[START_DATE]
	   ,[BK_TP].[END_DATE]
	   ,[BK_TP].[COD_SITUATION]
	   ,[BK_TP].[REG_IDENTIFIER]
	   ,[BK_TP].[TRANSACTION_TYPE]
	FROM @BANK_TYPE AS [BK_TP];
	OPEN DB_CURSOR;

	FETCH NEXT FROM DB_CURSOR INTO
	@AGENCY,
	@DIGIT,
	@ACCOUNT,
	@DIGIT_ACCOUNT,
	@CPF_CNPJ,
	@BANK,
	@ACCOUNT_TYPE,
	@COD_BRAND,
	@PERCENTAGE,
	@START_DATE,
	@END_DATE,
	@COD_SITUATION,
	@REG_IDENTIFIER,
	@COD_TRAN_TYPE;

	WHILE @@fetch_status = 0
	BEGIN
	SET @COUNT = 0;
	SET @COD_CERC_INFO = NULL;

	SELECT
		@COUNT = COUNT(*)
	   ,@COD_CERC_INFO = [BANK_DETAILS_CERC_INFO].[COD_BK_EC]
	FROM [BANK_DETAILS_CERC_INFO]
	JOIN [BRAND]
		ON [BRAND].[COD_BRAND] = [BANK_DETAILS_CERC_INFO].[COD_BRAND]
	WHERE [COD_SITUATION] = 3
	AND [REG_IDENTIFIER] = @REG_IDENTIFIER
	AND [BRAND].[COD_TTYPE] = @COD_TRAN_TYPE
	GROUP BY [BANK_DETAILS_CERC_INFO].[COD_BK_EC];

	IF @COUNT > 0
	BEGIN
		UPDATE [BANK_DETAILS_CERC_INFO]
		SET [COD_SITUATION] = 16
		WHERE [COD_BK_EC] = @COD_CERC_INFO;

		UPDATE [BANK_DETAILS_EC]
		SET [ACTIVE] = 0
		WHERE [COD_BK_EC] = @COD_CERC_INFO;

		DELETE FROM @TABLE_ID;
	END;

	INSERT INTO [BANK_DETAILS_EC] ([AGENCY],
	[DIGIT_AGENCY],
	[COD_TYPE_ACCOUNT],
	[COD_EC],
	[COD_BANK],
	[ACCOUNT],
	[DIGIT_ACCOUNT],
	[COD_USER],
	[IS_CERC])
	OUTPUT [INSERTED].[COD_BK_EC]
	INTO @TABLE_ID
		SELECT
			@AGENCY
		   ,@DIGIT
		   ,@ACCOUNT_TYPE
		   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
		   ,@BANK
		   ,@ACCOUNT
		   ,@DIGIT_ACCOUNT
		   ,NULL
		   ,1
		FROM [COMMERCIAL_ESTABLISHMENT]
		WHERE [CPF_CNPJ] = @CPF_CNPJ
		AND [ACTIVE] = 1;

	INSERT INTO [BANK_DETAILS_CERC_INFO] ([COD_BK_EC],
	[COD_BRAND],
	[PERCENTAGE],
	[START_DATE],
	[END_DATE],
	[COD_SITUATION],
	[REG_IDENTIFIER])
		SELECT
			[TB_ID].[ID]
		   ,@COD_BRAND
		   ,@PERCENTAGE
		   ,@START_DATE
		   ,@END_DATE
		   ,@COD_SITUATION
		   ,@REG_IDENTIFIER
		FROM @TABLE_ID AS [TB_ID];

	DELETE FROM @TABLE_ID;

	FETCH NEXT FROM DB_CURSOR INTO
	@AGENCY,
	@DIGIT,
	@ACCOUNT,
	@DIGIT_ACCOUNT,
	@CPF_CNPJ,
	@BANK,
	@ACCOUNT_TYPE,
	@COD_BRAND,
	@PERCENTAGE,
	@START_DATE,
	@END_DATE,
	@COD_SITUATION,
	@REG_IDENTIFIER,
	@COD_TRAN_TYPE;
	END;

	CLOSE DB_CURSOR;
	DEALLOCATE DB_CURSOR;

	DECLARE @CODECS CODE_TYPE

	INSERT INTO @CODECS (CODE)
		SELECT
			COD_EC
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE CPF_CNPJ IN (SELECT
				CPF_CNPJ
			FROM @BANK_TYPE)

	EXEC [CHECK_EC_SERVICES] @CODECS
END;
GO

IF OBJECT_ID('SP_UP_CERC_INFO') IS NOT NULL
	DROP PROCEDURE SP_UP_CERC_INFO
GO
CREATE PROCEDURE [SP_UP_CERC_INFO]
/**********************************************************************************
-----------------------------------------------------------------------------------
    Project.......: TKPP                  
--------------------------------------------------------------------------------
    Author        VERSION   Date          Description                  
--------------------------------------------------------------------------------
    Luiz Aquino   v1        2020-06-25    ET-895 PlanDZero                         
--------------------------------------------------------------------------------
*************************************************************************************/ (@BANK_TYPE [BANK_CERC] READONLY)
AS
BEGIN

	DECLARE @AGENCY VARCHAR(100);
	DECLARE @DIGIT VARCHAR(100);
	DECLARE @ACCOUNT VARCHAR(100);
	DECLARE @DIGIT_ACCOUNT VARCHAR(100);
	DECLARE @CPF_CNPJ VARCHAR(14);
	DECLARE @BANK INT;
	DECLARE @ACCOUNT_TYPE INT;
	DECLARE @COD_BRAND INT;
	DECLARE @PERCENTAGE DECIMAL(22, 6);
	DECLARE @START_DATE DATETIME;
	DECLARE @END_DATE DATETIME;
	DECLARE @COD_SITUATION INT;
	DECLARE @REG_IDENTIFIER NVARCHAR(100);
	DECLARE @COD_TRAN_TYPE INT;

	DECLARE DB_CURSOR CURSOR FOR SELECT
		[BK_TP].[AGENCY]
	   ,[BK_TP].[DIGIT]
	   ,[BK_TP].[ACCOUNT]
	   ,[BK_TP].[DIGIT_ACCOUNT]
	   ,[BK_TP].[CPF_CNPJ]
	   ,[BK_TP].[COD_BANK]
	   ,[BK_TP].[ACCOUNT_TYPE]
	   ,[BK_TP].[COD_BRAND]
	   ,[BK_TP].[PERCENTAGE]
	   ,[BK_TP].[START_DATE]
	   ,[BK_TP].[END_DATE]
	   ,[BK_TP].[COD_SITUATION]
	   ,[BK_TP].[REG_IDENTIFIER]
	   ,[BK_TP].[TRANSACTION_TYPE]
	FROM @BANK_TYPE AS [BK_TP];
	OPEN DB_CURSOR;

	FETCH NEXT FROM DB_CURSOR INTO @AGENCY,
	@DIGIT,
	@ACCOUNT,
	@DIGIT_ACCOUNT,
	@CPF_CNPJ,
	@BANK,
	@ACCOUNT_TYPE,
	@COD_BRAND,
	@PERCENTAGE,
	@START_DATE,
	@END_DATE,
	@COD_SITUATION,
	@REG_IDENTIFIER,
	@COD_TRAN_TYPE;

	WHILE @@fetch_status = 0
	BEGIN
	IF OBJECT_ID('tempdb..#BK') IS NOT NULL
		DROP TABLE [#BK];

	SELECT
		[BANK_DETAILS_CERC_INFO].[COD_BK_EC] INTO [#BK]
	FROM [BANK_DETAILS_CERC_INFO]
	WHERE [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
	AND [REG_IDENTIFIER] = @REG_IDENTIFIER;

	UPDATE [BANK_DETAILS_EC]
	SET [AGENCY] = ISNULL(@AGENCY, [BANK_DETAILS_EC].[AGENCY])
	   ,[DIGIT_AGENCY] = ISNULL(@DIGIT, [BANK_DETAILS_EC].[DIGIT_AGENCY])
	   ,[COD_TYPE_ACCOUNT] = ISNULL(@ACCOUNT_TYPE, [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT])
	   ,[COD_BANK] = ISNULL(@BANK, [BANK_DETAILS_EC].[COD_BANK])
	   ,[ACCOUNT] = ISNULL(@ACCOUNT, [BANK_DETAILS_EC].[ACCOUNT])
	   ,[DIGIT_ACCOUNT] = ISNULL(@DIGIT_ACCOUNT, [BANK_DETAILS_EC].[DIGIT_ACCOUNT])
	FROM [BANK_DETAILS_EC]
	WHERE [BANK_DETAILS_EC].[COD_BK_EC] IN (SELECT
			*
		FROM [#BK])
	AND [BANK_DETAILS_EC].[ACTIVE] = 1;

	UPDATE [BANK_DETAILS_CERC_INFO]
	SET [COD_BRAND] = ISNULL(@COD_BRAND, [BANK_DETAILS_CERC_INFO].[COD_BRAND])
	   ,[PERCENTAGE] = ISNULL(@PERCENTAGE, [BANK_DETAILS_CERC_INFO].[PERCENTAGE])
	   ,[START_DATE] = ISNULL(@START_DATE, [BANK_DETAILS_CERC_INFO].[START_DATE])
	   ,[END_DATE] = ISNULL(@START_DATE, [BANK_DETAILS_CERC_INFO].[END_DATE])
	   ,CREATED_AT = current_timestamp
	FROM [BANK_DETAILS_CERC_INFO]
	WHERE [COD_BK_EC] IN (SELECT
			*
		FROM [#BK])
	AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3;

	FETCH NEXT FROM DB_CURSOR INTO @AGENCY,
	@DIGIT,
	@ACCOUNT,
	@DIGIT_ACCOUNT,
	@CPF_CNPJ,
	@BANK,
	@ACCOUNT_TYPE,
	@COD_BRAND,
	@PERCENTAGE,
	@START_DATE,
	@END_DATE,
	@COD_SITUATION,
	@REG_IDENTIFIER,
	@COD_TRAN_TYPE;
	END;
	CLOSE DB_CURSOR;
	DEALLOCATE DB_CURSOR;

	DECLARE @CODECS CODE_TYPE

	INSERT INTO @CODECS (CODE)
		SELECT
			COD_EC
		FROM COMMERCIAL_ESTABLISHMENT
		WHERE CPF_CNPJ IN (SELECT
				CPF_CNPJ
			FROM @BANK_TYPE)

	EXEC [CHECK_EC_SERVICES] @CODECS
END;
GO
IF OBJECT_ID('PlanDZeroSchedule') IS NULL
BEGIN
	CREATE TABLE PlanDZeroSchedule (
		[COD_SCH_PLANDZERO] INT NOT NULL PRIMARY KEY IDENTITY
	   ,[ProcessAtHour] INT NOT NULL
	   ,[WindowMaxHour] INT NOT NULL
	)
END
GO

IF NOT EXISTS (SELECT
			c.column_id
		FROM sys.columns c
		WHERE c.object_id = OBJECT_ID('TRANSACTION_TITLES')
		AND c.NAME = 'TAX_PLANDZERO')
BEGIN
	ALTER TABLE TRANSACTION_TITLES
	ADD TAX_PLANDZERO DECIMAL(22, 6) NULL
END
GO

IF NOT EXISTS (SELECT
			c.column_id
		FROM sys.columns c
		WHERE c.object_id = OBJECT_ID('TRANSACTION_TITLES_COST')
		AND c.NAME = 'TAX_PLANDZERO')
BEGIN
	ALTER TABLE TRANSACTION_TITLES_COST
	ADD TAX_PLANDZERO DECIMAL(22, 6) NULL
END

GO


IF OBJECT_ID('[SP_GEN_TITLES_TRANS]') IS NOT NULL
	DROP PROCEDURE [SP_GEN_TITLES_TRANS]
GO

CREATE PROCEDURE [dbo].[SP_GEN_TITLES_TRANS]
/*----------------------------------------------------------------------------------------                    
    PROJECT.......: TKPP                    
------------------------------------------------------------------------------------------                     
    AUTHOR                      VERSION     DATE            DESCRIPTION                    
------------------------------------------------------------------------------------------                    
    KENNEDY ALEF                V1          27/07/2018      CREATION                    
    KENNEDY ALEF                V2          27/08/2018      MODIFY                    
    FERNANDO HENRIQUE OLIVEIRA  V3          06/03/2019      MODIFY                    
    LUCAS AGUIAR                V4          2019-09-11      MODIFY                    
    LUCAS AGUIAR                V5          2019-09-30      WAITINGSPLIT                    
    LUIZ AQUINO                 V6          2019-11-01      Reteno de agenda                    
    Luiz Aquino                 V7          2020-06-26      ADD DZERO TAX (ET-895 PLANDZERO)              
------------------------------------------------------------------------------------------*/ (@COD_TRAN VARCHAR(200),
@TRAN_ID INT = NULL)
AS
	DECLARE @CONT INT;
	DECLARE @VALUE DECIMAL(22, 6);
	DECLARE @CODE BIGINT;
	DECLARE @PAYDAY DATETIME;
	DECLARE @PREVISION_PAY_DATE DATETIME
	DECLARE @PLOTS INT;
	DECLARE @AMOUNT DECIMAL(22, 6);
	DECLARE @CODASS_EQUIP INT;
	DECLARE @TAXINI DECIMAL(22, 6);
	DECLARE @TAXEFFETIVE DECIMAL(22, 6);
	DECLARE @RATE DECIMAL(22, 6);
	DECLARE @INTERVAL INT;
	DECLARE @TR_ID INT;
	DECLARE @TAX_ACQ DECIMAL(22, 6)
	DECLARE @TYPEPLAN INT
	DECLARE @INTERVALRECEIVE INT;
	DECLARE @RECEIVEDATE DATETIME;
	DECLARE @ANTICIPATION DECIMAL(22, 6);
	DECLARE @COD_AFFILIATOR INT;
	DECLARE @QTY_PLOTS INT;
	DECLARE @ANT_PERCENT DECIMAL(22, 6);
	DECLARE @COD_OPER_COST INT;
	DECLARE @OPER_VALUE DECIMAL(22, 6);
	DECLARE @PLAN INT;
	DECLARE @PERCENT DECIMAL(22, 6);
	DECLARE @COD_TTYPE INT;
	DECLARE @GEN_TITLES INT;
	DECLARE @RATE_PLAN_AFF DECIMAL(22, 6);
	DECLARE @ANTECIP_VALUE_AFF DECIMAL(22, 6);
	DECLARE @TITLE_SIT INT
	DECLARE @TEMP_TITLE_SIT INT
	DECLARE @SOURCE_TRAN INT
	DECLARE @BRAND_TRAN INT;
	DECLARE @COD_EC INT;
	DECLARE @COD_TX_EC INT;
	DECLARE @ANTECIP_PERCENT_EC DECIMAL(22, 6);
	DECLARE @TRANDATE DATETIME;
	DECLARE @LEDGER_RETENTION INT = 0;
	DECLARE @COD_CTRL INT = NULL;
	DECLARE @COD_AWAIT_SPLIT INT = NULL
	DECLARE @COD_AWAIT_PAY INT = NULL
	DECLARE @COD_EXTERNAL_PROCESSING INT = NULL
	DECLARE @HASPLANDZERO BIT = 0;
	DECLARE @PLANDZEROTAX DECIMAL(22, 6) = NULL
	DECLARE @PLANDZEROTAX_AFF DECIMAL(22, 6) = NULL
	DECLARE @PLANDZEROTODAY BIT = 0;
	DECLARE @CURRENTHOUR INT
	DECLARE @PlanDZeroHour INT = 0;

	BEGIN

		IF @TRAN_ID IS NULL
		BEGIN
			SELECT
				@PLOTS = [TRANSACTION].PLOTS
			   ,@AMOUNT = [TRANSACTION].AMOUNT
			   ,@CODASS_EQUIP = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
			   ,@TAXEFFETIVE = ASS_TAX_DEPART.EFFECTIVE_PERCENTAGE
			   ,@TAXINI = ASS_TAX_DEPART.PARCENTAGE
			   ,@RATE = ASS_TAX_DEPART.RATE
			   ,@INTERVAL = ASS_TAX_DEPART.INTERVAL
			   ,@TR_ID = [TRANSACTION].COD_TRAN
			   ,@TAX_ACQ = ASS_TR_TYPE_COMP.TAX_VALUE
			   ,@TYPEPLAN = DEPARTMENTS_BRANCH.COD_T_PLAN
			   ,@INTERVALRECEIVE = ASS_TR_TYPE_COMP.INTERVAL
			   ,@ANTICIPATION = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE
			   ,@COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
			   ,@QTY_PLOTS = [TRANSACTION].PLOTS
			   ,@COD_TTYPE = [TRANSACTION].COD_TTYPE
			   ,@GEN_TITLES = [BRAND].[GEN_TITLES]
			   ,@ANT_PERCENT = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE
			   ,@SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
			   ,@BRAND_TRAN = [BRAND].COD_BRAND
			   ,@COD_EC = BRANCH_EC.COD_EC
			   ,@COD_TX_EC = [TRANSACTION].COD_ASS_TX_DEP
			   ,@TRANDATE = [TRANSACTION].BRAZILIAN_DATE
			FROM [TRANSACTION] WITH (NOLOCK)
			JOIN ASS_TAX_DEPART
				ON ASS_TAX_DEPART.COD_ASS_TX_DEP = [TRANSACTION].COD_ASS_TX_DEP
			JOIN DEPARTMENTS_BRANCH
				ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
			JOIN BRANCH_EC
				ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
			JOIN ASS_TR_TYPE_COMP
				ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = [TRANSACTION].COD_ASS_TR_COMP
			JOIN [PLAN]
				ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN
			JOIN [BRAND]
				ON BRAND.[NAME] = [TRANSACTION].BRAND
					AND [BRAND].COD_TTYPE = [TRANSACTION].COD_TTYPE
			WHERE [TRANSACTION].CODE = @COD_TRAN;
		END;
		ELSE
		BEGIN
			SELECT
				@PLOTS = [TRANSACTION].PLOTS
			   ,@AMOUNT = [TRANSACTION].AMOUNT
			   ,@CODASS_EQUIP = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
			   ,@TAXEFFETIVE = ASS_TAX_DEPART.EFFECTIVE_PERCENTAGE
			   ,@TAXINI = ASS_TAX_DEPART.PARCENTAGE
			   ,@RATE = ASS_TAX_DEPART.RATE
			   ,@INTERVAL = ASS_TAX_DEPART.INTERVAL
			   ,@TR_ID = [TRANSACTION].COD_TRAN
			   ,@TAX_ACQ = ASS_TR_TYPE_COMP.TAX_VALUE
			   ,@TYPEPLAN = [PLAN].COD_T_PLAN
			   ,@INTERVALRECEIVE = ASS_TR_TYPE_COMP.INTERVAL
			   ,@ANTICIPATION = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE
			   ,@COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
			   ,@QTY_PLOTS = [TRANSACTION].PLOTS
			   ,@COD_TTYPE = [TRANSACTION].COD_TTYPE
			   ,@GEN_TITLES = [BRAND].[GEN_TITLES]
			   ,@ANT_PERCENT = ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE
			   ,@SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
			   ,@BRAND_TRAN = [BRAND].COD_BRAND
			   ,@COD_EC = BRANCH_EC.COD_EC
			   ,@COD_TX_EC = [TRANSACTION].COD_ASS_TX_DEP
			   ,@TRANDATE = [TRANSACTION].BRAZILIAN_DATE
			FROM [TRANSACTION] WITH (NOLOCK)
			INNER JOIN ASS_TAX_DEPART
				ON ASS_TAX_DEPART.COD_ASS_TX_DEP = [TRANSACTION].COD_ASS_TX_DEP
			INNER JOIN DEPARTMENTS_BRANCH
				ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
			INNER JOIN BRANCH_EC
				ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
			INNER JOIN ASS_TR_TYPE_COMP
				ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = [TRANSACTION].COD_ASS_TR_COMP
			INNER JOIN [PLAN]
				ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN
			INNER JOIN [BRAND]
				ON BRAND.[NAME] = [TRANSACTION].BRAND
					AND [BRAND].COD_TTYPE = [TRANSACTION].COD_TTYPE
			WHERE [TRANSACTION].COD_TRAN = @TRAN_ID;
		END;

		SELECT
			@COD_AWAIT_SPLIT = COD_SITUATION
		FROM SITUATION
		WHERE [NAME] = 'WAITING FOR SPLIT OF FINANCE SCHEDULE'
		SELECT
			@COD_AWAIT_PAY = COD_SITUATION
		FROM SITUATION
		WHERE [NAME] = 'AWAITING PAYMENT'
		SELECT
			@COD_EXTERNAL_PROCESSING = COD_SITUATION
		FROM SITUATION
		WHERE [NAME] = 'LIQUIDACAO PROCESSADORA'

		SELECT
			@LEDGER_RETENTION = COUNT(*)
		FROM SERVICES_AVAILABLE s
		JOIN ITEMS_SERVICES_AVAILABLE item
			ON item.COD_ITEM_SERVICE = s.COD_ITEM_SERVICE
		WHERE s.COD_EC = @COD_EC
		AND item.CODE = '8'
		AND s.ACTIVE = 1

		SELECT
			@HASPLANDZERO = 1
		   ,@PLANDZEROTAX = CAST(JSON_VALUE(CONFIG_JSON, IIF(@COD_TTYPE = 1, '$.credit', '$.debit')) AS DECIMAL(22, 6))
		FROM SERVICES_AVAILABLE SA
		JOIN ITEMS_SERVICES_AVAILABLE item
			ON item.NAME = 'PlanDZero'
				AND item.COD_ITEM_SERVICE = SA.COD_ITEM_SERVICE
		WHERE SA.COD_EC = @COD_EC
		AND SA.ACTIVE = 1

		IF @HASPLANDZERO = 1
			AND @COD_AFFILIATOR IS NOT NULL
		BEGIN
			SELECT
				@PLANDZEROTAX_AFF = CAST(JSON_VALUE(CONFIG_JSON, IIF(@COD_TTYPE = 1, '$.credit', '$.debit')) AS DECIMAL(22, 6))
			FROM SERVICES_AVAILABLE SA
			JOIN ITEMS_SERVICES_AVAILABLE item
				ON item.NAME = 'PlanDZero'
					AND item.COD_ITEM_SERVICE = SA.COD_ITEM_SERVICE
			WHERE SA.COD_AFFILIATOR = @COD_AFFILIATOR
			AND SA.COD_EC IS NULL
			AND SA.ACTIVE = 1
		END

		SET @CURRENTHOUR = DATEPART(HOUR, @TRANDATE)
		IF @HASPLANDZERO = 1
			AND EXISTS (SELECT
					COD_SCH_PLANDZERO
				FROM PlanDZeroSchedule
				WHERE WindowMaxHour > @CURRENTHOUR)
		BEGIN
			SET @PLANDZEROTODAY = 1;
			SET @PlanDZeroHour = (SELECT TOP 1
					WindowMaxHour
				FROM PlanDZeroSchedule
				WHERE WindowMaxHour > @CURRENTHOUR
				ORDER BY WindowMaxHour);
		END

		IF (@HASPLANDZERO = 1
			AND @PLANDZEROTODAY = 0
			AND @INTERVAL = 1)
			OR @TYPEPLAN = 1
		BEGIN
			SET @HASPLANDZERO = 0;
			SET @PLANDZEROTAX = NULL;
			SET @PLANDZEROTAX_AFF = NULL;
		END

		IF @GEN_TITLES = 1
			AND @LEDGER_RETENTION = 0
			SET @TITLE_SIT = @COD_AWAIT_PAY;
		ELSE
		IF @GEN_TITLES <> 1
			AND @LEDGER_RETENTION = 0
			SET @TITLE_SIT = @COD_EXTERNAL_PROCESSING;
		ELSE
			SET @TITLE_SIT = @COD_AWAIT_SPLIT;

		SET @TEMP_TITLE_SIT = @TITLE_SIT

		CREATE TABLE #retentionRules (
			COD_RET_CTRL INT NOT NULL
		   ,FROM_DATE DATETIME NOT NULL
		   ,UNTIL_DATE DATETIME NOT NULL
		)

		IF @TITLE_SIT = @COD_AWAIT_SPLIT
		BEGIN
			INSERT INTO #retentionRules (COD_RET_CTRL, FROM_DATE, UNTIL_DATE)
				SELECT
					ctrl.COD_RET_CTRL
				   ,ctrl.FROM_DATE
				   ,ctrl.UNTIL_DATE
				FROM LEDGER_RETENTION_CONTROL ctrl
				WHERE ctrl.COD_EC = @COD_EC
				AND (ctrl.UNTIL_DATE IS NULL
				OR ctrl.UNTIL_DATE >= CAST(GETDATE() AS DATE))
		END

		SET @ANTECIP_PERCENT_EC = @ANT_PERCENT

		IF @COD_AFFILIATOR IS NOT NULL
		BEGIN
			SELECT
				@COD_OPER_COST = OP_COST.COD_OPER_COST_AFF
			   ,@OPER_VALUE = OP_COST.PERCENTAGE_COST
			   ,@PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN_TAX_AFF
			   ,@PERCENT = PLAN_TAX_AFFILIATOR.[PERCENTAGE]
			   ,@RATE_PLAN_AFF = PLAN_TAX_AFFILIATOR.RATE
			   ,@ANTECIP_VALUE_AFF = PLAN_TAX_AFFILIATOR.ANTICIPATION_PERCENTAGE
			FROM AFFILIATOR
			INNER JOIN OPERATION_COST_AFFILIATOR OP_COST
				ON OP_COST.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			INNER JOIN PROGRESSIVE_COST_AFFILIATOR PROG_COST
				ON PROG_COST.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			INNER JOIN PLAN_TAX_AFFILIATOR
				ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			INNER JOIN [PLAN]
				ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN
					AND [PLAN].COD_PLAN_CATEGORY <> 3
			WHERE [PLAN_TAX_AFFILIATOR].COD_TTYPE = @COD_TTYPE
			AND [PLAN_TAX_AFFILIATOR].QTY_INI_PLOTS <= @QTY_PLOTS
			AND [PLAN_TAX_AFFILIATOR].QTY_FINAL_PLOTS >= @QTY_PLOTS
			AND [PLAN_TAX_AFFILIATOR].ACTIVE = 1
			AND [OP_COST].ACTIVE = 1
			AND PROG_COST.ACTIVE = 1
			AND AFFILIATOR.COD_AFFILIATOR = @COD_AFFILIATOR
			AND AFFILIATOR.ACTIVE = 1
			AND ([PLAN_TAX_AFFILIATOR].COD_BRAND = @BRAND_TRAN
			OR PLAN_TAX_AFFILIATOR.COD_BRAND IS NULL)
			AND [PLAN_TAX_AFFILIATOR].COD_SOURCE_TRAN = @SOURCE_TRAN
		END;

		IF @TYPEPLAN = 1
		BEGIN
			SET @CONT = 0;
			SET @VALUE = (@AMOUNT / @PLOTS);

			SET @PAYDAY = CAST(@TRANDATE AS DATETIME);
			SET @RECEIVEDATE = CAST(@TRANDATE AS DATETIME);

			SET @INTERVAL = IIF(@HASPLANDZERO = 0, @INTERVAL, IIF(@PLANDZEROTODAY = 1, 0, 1))

			IF @HASPLANDZERO = 1
				SET @PAYDAY = IIF(@PLANDZEROTODAY = 1, @PAYDAY, DATEADD(DAY, 1, @PAYDAY))

			WHILE @CONT < @PLOTS
			BEGIN
			SELECT
				@CODE = NEXT VALUE FOR SEQ_TRANSACTION_TITLE;

			SET @PAYDAY = IIF(@HASPLANDZERO = 0, DATEADD(DAY, @INTERVAL, @PAYDAY), @PAYDAY);
			SET @PREVISION_PAY_DATE = [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY)
			SET @RECEIVEDATE = DATEADD(DAY, @INTERVALRECEIVE, @RECEIVEDATE);

			IF @TITLE_SIT != @TEMP_TITLE_SIT
				SET @TITLE_SIT = @TEMP_TITLE_SIT;

			SET @COD_CTRL = NULL

			IF @TITLE_SIT = @COD_AWAIT_SPLIT
			BEGIN
				SELECT
					@COD_CTRL = COD_RET_CTRL
				FROM #retentionRules r
				WHERE @PREVISION_PAY_DATE BETWEEN r.FROM_DATE AND r.UNTIL_DATE
				IF @COD_CTRL IS NULL
					SET @TITLE_SIT = @COD_AWAIT_PAY
			END

			IF @RECEIVEDATE <= @PAYDAY
				SET @ANTICIPATION = 0;

			IF @HASPLANDZERO = 1
				AND @COD_TTYPE != 1
				SET @ANTICIPATION = 0

			IF @HASPLANDZERO = 1
				AND @PLANDZEROTODAY = 1
				SET @PREVISION_PAY_DATE = DATEADD(HOUR, @PlanDZeroHour, @PREVISION_PAY_DATE)

			INSERT INTO [TRANSACTION_TITLES] (CODE,
			COD_TRAN,
			PLOT,
			AMOUNT,
			COD_ASS_DEPTO_TERMINAL,
			TAX_INITIAL,
			ANTICIP_PERCENT,
			RATE,
			PREVISION_PAY_DATE,
			COD_SITUATION,
			ACQ_TAX,
			INTERVAL_INITIAL,
			PREVISION_RECEIVE_DATE,
			COD_SITUATION_RECEIVE,
			COD_TYPE_TRAN_TITLE,
			COD_EC,
			COD_ASS_TX_DEP,
			QTY_DAYS_ANTECIP,
			QTY_BUSINESS_DAY,
			COD_RET_CTRL,
			TAX_PLANDZERO)
				VALUES (CONCAT(@CODE, @COD_EC), @TR_ID, (@CONT + 1), @VALUE, @CODASS_EQUIP, @TAXINI, @ANTICIPATION, @RATE, @PREVISION_PAY_DATE, @TITLE_SIT, @TAX_ACQ, @INTERVAL, [dbo].[FN_NEXT_BUSINESS_DAY](@RECEIVEDATE), @TITLE_SIT, 1, @COD_EC, @COD_TX_EC, (((@CONT + 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), @PAYDAY)), (((@CONT + 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY))), @COD_CTRL, @PLANDZEROTAX);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT REGISTER [TRANSACTION_TITLES] ', 1;

			--  AFFILIATOR INSERT COST (RECEIVE)                    
			IF @COD_AFFILIATOR IS NOT NULL
			BEGIN
				IF @RECEIVEDATE <= @PAYDAY
					SET @ANTECIP_VALUE_AFF = 0;

				IF @HASPLANDZERO = 1
					SET @ANTECIP_VALUE_AFF = 0

				INSERT INTO TRANSACTION_TITLES_COST (COD_AFFILIATOR,
				COD_TITLE,
				COD_OPER_COST_AFF,
				OPER_VALUE,
				COD_PLAN_TAX_AFF,
				[PERCENTAGE],
				PREVISION_PAY_DATE,
				COD_SITUATION,
				RATE_PLAN,
				ANTICIP_PERCENT,
				TAX_PLANDZERO)
					VALUES (@COD_AFFILIATOR, SCOPE_IDENTITY(), @COD_OPER_COST, @OPER_VALUE, @PLAN, @PERCENT, [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY), @COD_AWAIT_PAY, @RATE_PLAN_AFF, @ANTECIP_VALUE_AFF, @PLANDZEROTAX_AFF)
			END;

			SET @CONT = @CONT + 1;
			END;
			IF (@PLANDZEROTAX IS NOT NULL)
				INSERT INTO TRANSACTION_SERVICES (CREATED_AT, COD_ITEM_SERVICE, COD_TRAN, TAX_PLANDZERO_EC, TAX_PLANDZERO_AFF, COD_EC)
					VALUES (current_timestamp, (SELECT isa.COD_ITEM_SERVICE FROM ITEMS_SERVICES_AVAILABLE isa WHERE isa.NAME = 'PlanDZero'), @TR_ID, @PLANDZEROTAX, @PLANDZEROTAX_AFF, @COD_EC)
		END;
		ELSE
		BEGIN
			SET @CONT = 0;
			SET @VALUE = (@AMOUNT / @PLOTS);
			SET @PAYDAY = CAST(@TRANDATE AS DATETIME);
			SET @RECEIVEDATE = CAST(@TRANDATE AS DATETIME);
			SET @PAYDAY = IIF(@HASPLANDZERO = 0, DATEADD(DAY, @INTERVAL, @PAYDAY), IIF(@PLANDZEROTODAY = 1, @PAYDAY, DATEADD(DAY, 1, @PAYDAY)));

			SET @INTERVAL = IIF(@HASPLANDZERO = 0, @INTERVAL, IIF(@PLANDZEROTODAY = 1, 0, 1))

			IF @HASPLANDZERO = 1
				AND @COD_TTYPE != 1
				SET @ANTECIP_PERCENT_EC = 0

			SET @PREVISION_PAY_DATE = [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY)

			IF @HASPLANDZERO = 1
				AND @PLANDZEROTODAY = 1
				SET @PREVISION_PAY_DATE = DATEADD(HOUR, @PlanDZeroHour, @PREVISION_PAY_DATE)

			IF @TITLE_SIT != @TEMP_TITLE_SIT
				SET @TITLE_SIT = @TEMP_TITLE_SIT;

			SET @COD_CTRL = NULL

			IF @TITLE_SIT = @COD_AWAIT_SPLIT
			BEGIN
				SELECT
					@COD_CTRL = COD_RET_CTRL
				FROM #retentionRules r
				WHERE @PREVISION_PAY_DATE BETWEEN r.FROM_DATE AND r.UNTIL_DATE

				IF @COD_CTRL IS NULL
					SET @TITLE_SIT = @COD_AWAIT_PAY
			END

			WHILE @CONT < @PLOTS
			BEGIN
			SELECT
				@CODE = NEXT VALUE FOR SEQ_TRANSACTION_TITLE;

			SET @RECEIVEDATE = DATEADD(DAY, @INTERVALRECEIVE, @RECEIVEDATE);

			IF @RECEIVEDATE <= @PAYDAY
				SET @ANT_PERCENT = 0;
			ELSE
				SET @ANT_PERCENT = @ANTECIP_PERCENT_EC;

			INSERT INTO [TRANSACTION_TITLES] (CODE,
			COD_TRAN,
			PLOT,
			AMOUNT,
			COD_ASS_DEPTO_TERMINAL,
			TAX_INITIAL,
			RATE,
			PREVISION_PAY_DATE,
			COD_SITUATION,
			ACQ_TAX,
			INTERVAL_INITIAL,
			PREVISION_RECEIVE_DATE,
			COD_SITUATION_RECEIVE,
			COD_TYPE_TRAN_TITLE,
			ANTICIP_PERCENT,
			COD_EC,
			COD_ASS_TX_DEP,
			QTY_DAYS_ANTECIP,
			QTY_BUSINESS_DAY,
			COD_RET_CTRL,
			TAX_PLANDZERO)
				VALUES (CONCAT(@CODE, @COD_EC), @TR_ID, (@CONT + 1), @VALUE, @CODASS_EQUIP, @TAXINI, @RATE, @PREVISION_PAY_DATE, @TITLE_SIT, @TAX_ACQ, @INTERVAL, [dbo].[FN_NEXT_BUSINESS_DAY](@RECEIVEDATE), @TITLE_SIT, 1, @ANT_PERCENT, @COD_EC, @COD_TX_EC, (((@CONT + 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), @PAYDAY)), (((@CONT + 1) * 30) - DATEDIFF(DAY, (CAST(@TRANDATE AS DATE)), [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY))), @COD_CTRL, @PLANDZEROTAX);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT REGISTER [TRANSACTION_TITLES] ', 1;

			IF @COD_AFFILIATOR IS NOT NULL
			BEGIN
				IF @RECEIVEDATE <= @PAYDAY
					SET @ANTECIP_VALUE_AFF = 0;

				IF @HASPLANDZERO = 1
					AND @COD_TTYPE != 1
					SET @ANTECIP_VALUE_AFF = 0

				INSERT INTO TRANSACTION_TITLES_COST (COD_AFFILIATOR,
				COD_TITLE,
				COD_OPER_COST_AFF,
				OPER_VALUE,
				COD_PLAN_TAX_AFF,
				[PERCENTAGE],
				PREVISION_PAY_DATE,
				COD_SITUATION,
				RATE_PLAN,
				ANTICIP_PERCENT,
				TAX_PLANDZERO)
					VALUES (@COD_AFFILIATOR, SCOPE_IDENTITY(), @COD_OPER_COST, @OPER_VALUE, @PLAN, @PERCENT, [dbo].[FN_NEXT_BUSINESS_DAY](@PAYDAY), @COD_AWAIT_PAY, @RATE_PLAN_AFF, @ANTECIP_VALUE_AFF, @PLANDZEROTAX_AFF)
			END;

			SET @CONT = @CONT + 1;
			END;
			IF (@PLANDZEROTAX IS NOT NULL)
				INSERT INTO TRANSACTION_SERVICES (CREATED_AT, COD_ITEM_SERVICE, COD_TRAN, TAX_PLANDZERO_EC, TAX_PLANDZERO_AFF, COD_EC)
					VALUES (current_timestamp, (SELECT isa.COD_ITEM_SERVICE FROM ITEMS_SERVICES_AVAILABLE isa WHERE isa.NAME = 'PlanDZero'), @TR_ID, @PLANDZEROTAX, @PLANDZEROTAX_AFF, @COD_EC)
		END;
	END;
GO

IF OBJECT_ID('SP_GEN_SPLIT_TRANSACTION') IS NOT NULL
	DROP PROCEDURE SP_GEN_SPLIT_TRANSACTION
GO



CREATE PROCEDURE SP_GEN_SPLIT_TRANSACTION
/**************************************************************************************************************                    
------------------------------------------------------------------------------------------------------------                     
    Project.......: TKPP                                          
------------------------------------------------------------------------------------------------------------                       
    Author                 VERSION        Date                  Description                                      
------------------------------------------------------------------------------------------------------------                       
    Kennedy Alef             V1       27/07/2018                Creation                                         
    Caike Ucha              V2       06/05/2020                Add Cod_split_tran na titles                     
    Luiz Aquino              V3       29/06/2020                ET-895 PlanDZero            
**************************************************************************************************************/ (@ITEM ITEM_SPLIT READONLY,
@NSU VARCHAR(100),
@MERCHANT VARCHAR(100))
AS
BEGIN

	DECLARE @EC_SOURCE_COD INT
	DECLARE @AFF_SOURCE_COD INT;
	DECLARE @EC_SOURCE VARCHAR(100);
	DECLARE @BRAND VARCHAR(100);
	DECLARE @COD_BRAND INT;
	DECLARE @QTY_PLOT INT;
	DECLARE @SOURCE_TRAN INT;
	DECLARE @TYPE_TRAN INT;
	DECLARE @AFFILIATOR VARCHAR(100);
	DECLARE @AMOUNT_TR DECIMAL(22, 6);
	DECLARE @AMOUNT_SPLIT DECIMAL(22, 6);
	DECLARE @AFF_DATA TR_AFF_COST_DATA;
	DECLARE @QTY INT = 0;
	DECLARE @COD_TRAN INT;
	DECLARE @COD_SITUATION INT;
	DECLARE @CODASS_EQUIP INT
	DECLARE @TRAN_DATE DATETIME
	DECLARE @TX_ACQ DECIMAL(22, 6);
	DECLARE @INTERVAL_ACQ INT;
	DECLARE @CONT INT = 1;
	DECLARE @CODE_EC VARCHAR(100);
	DECLARE @COD_PLANDZERO_SERVICE INT = NULL
	DECLARE @PLANDZEROTODAY BIT = 0;
	DECLARE @CURRENTHOUR INT;
	DECLARE @PREVISION_RECEIVEDATE DATETIME;
	DECLARE @TOMORROW_MORNING DATETIME;
	DECLARE @PlanDZeroHour INT = 0;
	DECLARE @PAYDAY DATETIME

	SELECT
		@COD_TRAN = [TRANSACTION].COD_TRAN
	   ,@EC_SOURCE_COD = COMMERCIAL_ESTABLISHMENT.COD_EC
	   ,@EC_SOURCE = COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
	   ,@BRAND = [TRANSACTION].BRAND
	   ,@QTY_PLOT = [TRANSACTION].PLOTS
	   ,@SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
	   ,@TYPE_TRAN = [TRANSACTION].COD_TTYPE
	   ,@AFFILIATOR = AFFILIATOR.CPF_CNPJ
	   ,@AMOUNT_TR = [TRANSACTION].AMOUNT
	   ,@AFF_SOURCE_COD = AFFILIATOR.COD_AFFILIATOR
	   ,@COD_BRAND = BRAND.COD_BRAND
	   ,@COD_SITUATION = [TRANSACTION].COD_SITUATION
	   ,@TRAN_DATE = dbo.FN_FUS_UTF([TRANSACTION].CREATED_AT)
	   ,@CODASS_EQUIP = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
	   ,@TX_ACQ = ASS_TR_TYPE_COMP.TAX_VALUE
	   ,@INTERVAL_ACQ = ASS_TR_TYPE_COMP.INTERVAL
	   ,@CODE_EC = COMMERCIAL_ESTABLISHMENT.CODE
	FROM [TRANSACTION] WITH (NOLOCK)
	JOIN ASS_DEPTO_EQUIP
		ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	INNER JOIN ASS_TR_TYPE_COMP
		ON ASS_TR_TYPE_COMP.COD_ASS_TR_COMP = [TRANSACTION].COD_ASS_TR_COMP
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
	JOIN BRAND
		ON BRAND.NAME = [TRANSACTION].BRAND
			AND BRAND.COD_TTYPE = [TRANSACTION].COD_TTYPE
	WHERE [TRANSACTION].CODE = @NSU

	IF @COD_SITUATION <> 22
		THROW 60000, '300 - Invalid situation for transaction', 1;

	IF @CODE_EC <> @MERCHANT
		THROW 60000, '301 - Invalid Merchant source', 1

	SELECT
		@AMOUNT_SPLIT = SUM(AMOUNT)
	FROM @ITEM

	IF @AMOUNT_TR <> @AMOUNT_SPLIT
		THROW 60000, '303 - Invalid amount for split ', 1;

	SELECT
		@QTY = COUNT(*)
	FROM @ITEM
	WHERE [DOC_AFFILIATOR] <> @AFFILIATOR
	IF @QTY > 0
		THROW 60000, '304 -Invalid Affiliator between Merchant and transaction', 1;

	SELECT
		@COD_PLANDZERO_SERVICE = COD_ITEM_SERVICE
	FROM ITEMS_SERVICES_AVAILABLE
	WHERE NAME = 'PlanDZero'

	SET @CURRENTHOUR = DATEPART(HOUR, @TRAN_DATE);
	IF EXISTS (SELECT
				COD_SCH_PLANDZERO
			FROM PlanDZeroSchedule
			WHERE WindowMaxHour > @CURRENTHOUR)
	BEGIN
		SET @PLANDZEROTODAY = 1
		SET @PlanDZeroHour = (SELECT TOP 1
				WindowMaxHour
			FROM PlanDZeroSchedule
			WHERE WindowMaxHour > @CURRENTHOUR
			ORDER BY WindowMaxHour)
	END

	SET @TOMORROW_MORNING = CAST(DATEADD(DAY, 1, @TRAN_DATE) AS DATE)

	SELECT
		ASS_TAX_DEPART.COD_ASS_TX_DEP AS COD_TX_MERCHANT
	   ,COMMERCIAL_ESTABLISHMENT.ACTIVE AS ACTIVE_MERCHANT
	   ,COMMERCIAL_ESTABLISHMENT.COD_EC MERCHANT
	   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS DOC_MERCHANT
	   ,AFFILIATOR.COD_AFFILIATOR AS AFFILIATOR
	   ,AFFILIATOR.CPF_CNPJ AS DOC_AFFILIATOR
	   ,ASS_TAX_DEPART.PARCENTAGE AS MDR
	   ,ASS_TAX_DEPART.ANTICIPATION_PERCENTAGE AS ANTICIP
	   ,ASS_TAX_DEPART.INTERVAL
	   ,ASS_TAX_DEPART.RATE
	   ,[PLAN].COD_T_PLAN
	   ,ITEM.AMOUNT
	   ,NULL AS COD_SPLIT_PROD
	   ,IIF(SA.COD_SERVICE IS NULL OR @PLANDZEROTODAY = 0 OR (SELECT
				COD_T_PLAN
			FROM DEPARTMENTS_BRANCH db
			WHERE db.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH)
		= 1, NULL, CAST(JSON_VALUE(SA.CONFIG_JSON, IIF(@TYPE_TRAN = 1, '$.credit', '$.debit')) AS DECIMAL(22, 6))) [PLANDZERO_MDR] INTO #EC
	FROM @ITEM ITEM
	JOIN COMMERCIAL_ESTABLISHMENT
		ON COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = REPLACE(REPLACE(REPLACE(ITEM.[DOC_MERCHANT], '/', ''), '-', ''), '.', '')
	LEFT JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
	JOIN ASS_TAX_DEPART
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
	JOIN [PLAN]
		ON [PLAN].COD_PLAN = ASS_TAX_DEPART.COD_PLAN
	LEFT JOIN BRAND
		ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
	LEFT JOIN SERVICES_AVAILABLE SA
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = SA.COD_EC
			AND [SA].ACTIVE = 1
			AND SA.COD_ITEM_SERVICE = @COD_PLANDZERO_SERVICE
	WHERE ASS_TAX_DEPART.ACTIVE = 1
	AND ASS_TAX_DEPART.COD_TTYPE = @TYPE_TRAN
	AND @QTY_PLOT BETWEEN ASS_TAX_DEPART.QTY_INI_PLOTS AND ASS_TAX_DEPART.QTY_FINAL_PLOTS
	AND ASS_TAX_DEPART.COD_SOURCE_TRAN = @SOURCE_TRAN
	AND (BRAND.COD_BRAND = @COD_BRAND
	OR BRAND.COD_BRAND IS NULL)
	AND AFFILIATOR.CPF_CNPJ = ITEM.DOC_AFFILIATOR

	IF (SELECT
				COUNT(*)
			FROM #EC
			WHERE ACTIVE_MERCHANT = 0)
		> 0
		THROW 60000, '305 - One or More Merchants are inactive', 1;

	IF (SELECT
				COUNT(*)
			FROM #EC)
		<> (SELECT
				COUNT(*)
			FROM @ITEM)
		THROW 60000, '306 - One or More Merchants don''t have plan available to receive this transaction', 1;

	INSERT INTO [TRANSACTION_HISTORY] (COD_TRAN, CODE, COD_SITUATION, COMMENT)
		SELECT
			@COD_TRAN
		   ,@NSU
		   ,3
		   ,''

	UPDATE [TRANSACTION]
	SET COD_SITUATION = 3
	   ,MODIFY_DATE = GETDATE()
	   ,COMMENT = ''
	   ,CODE_ERROR = 200
	FROM [TRANSACTION] WITH (NOLOCK)
	WHERE [TRANSACTION].COD_TRAN = @COD_TRAN;

	IF @@rowcount < 1
		THROW 60001, 'COULD NOT UPDATE [TRANSACTION] ', 1;

	UPDATE PROCESS_BG_STATUS
	SET STATUS_PROCESSED = 0
	WHERE CODE = @COD_TRAN

	IF @AFFILIATOR IS NOT NULL
	BEGIN
		INSERT INTO @AFF_DATA (COD_TRAN,
		[COD_AFFILIATOR],
		[NSU],
		[COD_OPER_COST_AFF],
		[PERCENTAGE_COST],
		[COD_PLAN_TAX_AFF],
		[PERCENTAGE],
		[RATE],
		[ANTICIPATION_PERCENTAGE])
			SELECT
				@COD_TRAN
			   ,@AFF_SOURCE_COD
			   ,@NSU
			   ,OP_COST.COD_OPER_COST_AFF
			   ,OP_COST.PERCENTAGE_COST
			   ,PLAN_TAX_AFFILIATOR.COD_PLAN_TAX_AFF
			   ,PLAN_TAX_AFFILIATOR.[PERCENTAGE]
			   ,PLAN_TAX_AFFILIATOR.RATE
			   ,PLAN_TAX_AFFILIATOR.ANTICIPATION_PERCENTAGE
			FROM AFFILIATOR
			INNER JOIN OPERATION_COST_AFFILIATOR OP_COST
				ON OP_COST.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			INNER JOIN PROGRESSIVE_COST_AFFILIATOR PROG_COST
				ON PROG_COST.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			INNER JOIN PLAN_TAX_AFFILIATOR
				ON PLAN_TAX_AFFILIATOR.COD_AFFILIATOR = AFFILIATOR.COD_AFFILIATOR
			INNER JOIN [PLAN]
				ON [PLAN].COD_PLAN = PLAN_TAX_AFFILIATOR.COD_PLAN
					AND [PLAN].COD_PLAN_CATEGORY <> 3
			WHERE [PLAN_TAX_AFFILIATOR].COD_TTYPE = @TYPE_TRAN
			AND [PLAN_TAX_AFFILIATOR].QTY_INI_PLOTS <= @QTY_PLOT
			AND [PLAN_TAX_AFFILIATOR].QTY_FINAL_PLOTS >= @QTY_PLOT
			AND [PLAN_TAX_AFFILIATOR].ACTIVE = 1
			AND [OP_COST].ACTIVE = 1
			AND PROG_COST.ACTIVE = 1
			AND AFFILIATOR.COD_AFFILIATOR = @AFF_SOURCE_COD
			AND AFFILIATOR.ACTIVE = 1
			AND ([PLAN_TAX_AFFILIATOR].COD_BRAND = @COD_BRAND
			OR PLAN_TAX_AFFILIATOR.COD_BRAND IS NULL)
			AND [PLAN_TAX_AFFILIATOR].COD_SOURCE_TRAN = @SOURCE_TRAN
	END;

	-- TITTLE            

	SET @PAYDAY = CAST(@TRAN_DATE AS DATE)

	WHILE @CONT <= @QTY_PLOT
	BEGIN
	-- PLAN WITHOUT ANTICIPATION            
	SET @PREVISION_RECEIVEDATE = DATEADD(DAY, (@INTERVAL_ACQ * @CONT), @TRAN_DATE)

	INSERT INTO [TRANSACTION_TITLES] (CODE,
	COD_TRAN,
	PLOT,
	AMOUNT,
	COD_ASS_DEPTO_TERMINAL,
	TAX_INITIAL,
	RATE,
	PREVISION_PAY_DATE,
	COD_SITUATION,
	ACQ_TAX,
	INTERVAL_INITIAL,
	PREVISION_RECEIVE_DATE,
	COD_SITUATION_RECEIVE,
	COD_TYPE_TRAN_TITLE,
	ANTICIP_PERCENT,
	COD_EC,
	COD_ASS_TX_DEP,
	QTY_DAYS_ANTECIP,
	COD_SPLIT_PROD,
	TAX_PLANDZERO)
		SELECT
			CONCAT(NEXT VALUE FOR SEQ_TRANSACTION_TITLE, MERCHANT)
		   ,@COD_TRAN
		   ,@CONT
		   ,(AMOUNT / @QTY_PLOT)
		   ,@CODASS_EQUIP
		   ,MDR
		   ,RATE
		   ,IIF(PLANDZERO_MDR IS NULL, DATEADD(DAY, (INTERVAL * @CONT), @PAYDAY), IIF(@PLANDZEROTODAY = 1, DATEADD(HOUR, @PlanDZeroHour, @PAYDAY), @TOMORROW_MORNING))
		   ,4
		   ,@TX_ACQ
		   ,INTERVAL
		   ,@PREVISION_RECEIVEDATE
		   ,4
		   ,1
		   ,IIF((PLANDZERO_MDR IS NOT NULL AND @TYPE_TRAN != 1) OR CAST(@PREVISION_RECEIVEDATE AS DATE) <= DATEADD(DAY, (INTERVAL * @CONT), @PAYDAY), 0, ANTICIP)
		   ,MERCHANT
		   ,COD_TX_MERCHANT
		   ,((@CONT * 30) - DATEDIFF(DAY, CAST([dbo].[FN_FUS_UTF](GETDATE()) AS DATE), IIF(PLANDZERO_MDR IS NULL, DATEADD(DAY, (INTERVAL * @CONT), @PAYDAY), IIF(@PLANDZEROTODAY = 1, @PAYDAY, @TOMORROW_MORNING))))
		   ,COD_SPLIT_PROD
		   ,PLANDZERO_MDR
		FROM #EC
		WHERE COD_T_PLAN = 1

	IF @@rowcount < (SELECT
				COUNT(*)
			FROM #EC
			WHERE COD_T_PLAN = 1)
		THROW 60001, 'COULD NOT REGISTER [TRANSACTION_TITLES] ', 1;

	-- PLAN WITH ANTICIPATION                       

	INSERT INTO [TRANSACTION_TITLES] (CODE,
	COD_TRAN,
	PLOT,
	AMOUNT,
	COD_ASS_DEPTO_TERMINAL,
	TAX_INITIAL,
	RATE,
	PREVISION_PAY_DATE,
	COD_SITUATION,
	ACQ_TAX,
	INTERVAL_INITIAL,
	PREVISION_RECEIVE_DATE,
	COD_SITUATION_RECEIVE,
	COD_TYPE_TRAN_TITLE,
	ANTICIP_PERCENT,
	COD_EC,
	COD_ASS_TX_DEP,
	QTY_DAYS_ANTECIP,
	COD_SPLIT_PROD,
	TAX_PLANDZERO)
		SELECT
			CONCAT(NEXT VALUE FOR SEQ_TRANSACTION_TITLE, MERCHANT)
		   ,@COD_TRAN
		   ,@CONT
		   ,(AMOUNT / @QTY_PLOT)
		   ,@CODASS_EQUIP
		   ,MDR
		   ,RATE
		   ,IIF(PLANDZERO_MDR IS NULL, DATEADD(DAY, INTERVAL, @PAYDAY), IIF(@PLANDZEROTODAY = 1, DATEADD(HOUR, @PlanDZeroHour, @PAYDAY), @TOMORROW_MORNING))
		   ,4
		   ,@TX_ACQ
		   ,INTERVAL
		   ,@PREVISION_RECEIVEDATE
		   ,4
		   ,1
		   ,IIF((PLANDZERO_MDR IS NOT NULL AND @TYPE_TRAN != 1) OR CAST(@PREVISION_RECEIVEDATE AS DATE) <= IIF(PLANDZERO_MDR IS NULL, DATEADD(DAY, INTERVAL, @PAYDAY), @TRAN_DATE), 0, ANTICIP)
		   ,MERCHANT
		   ,COD_TX_MERCHANT
		   ,((@CONT * 30) - DATEDIFF(DAY, CAST([dbo].[FN_FUS_UTF](GETDATE()) AS DATE), IIF(PLANDZERO_MDR IS NULL, DATEADD(DAY, INTERVAL, @PAYDAY), IIF(@PLANDZEROTODAY = 1, @PAYDAY, @TOMORROW_MORNING))))
		   ,COD_SPLIT_PROD
		   ,PLANDZERO_MDR
		FROM #EC
		WHERE COD_T_PLAN = 2

	IF @@rowcount < (SELECT
				COUNT(*)
			FROM #EC
			WHERE COD_T_PLAN = 2)
		THROW 60001, 'COULD NOT REGISTER [TRANSACTION_TITLES] ', 1;

	SET @CONT = @CONT + 1;
	END;

	IF @AFF_SOURCE_COD IS NOT NULL
	BEGIN
		SELECT
			AFF.[COD_AFFILIATOR]
		   ,AFF.COD_TRAN
		   ,COD_TITLE
		   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE
		   ,AFF.[COD_OPER_COST_AFF]
		   ,AFF.[PERCENTAGE_COST]
		   ,AFF.[COD_PLAN_TAX_AFF]
		   ,AFF.[PERCENTAGE]
		   ,AFF.[RATE]
		   ,IIF(SA.COD_ITEM_SERVICE IS NOT NULL OR [TRANSACTION_TITLES].ANTICIP_PERCENT = 0, 0, AFF.[ANTICIPATION_PERCENTAGE]) AS ANTICIP_PERCENT
		   ,IIF(SA.COD_SERVICE IS NULL, NULL, CAST(JSON_VALUE(SA.CONFIG_JSON, IIF(@TYPE_TRAN = 1, '$.credit', '$.debit')) AS DECIMAL(22, 6))) [PLANDZERO_MDR] INTO #COST
		FROM [TRANSACTION_TITLES]
		JOIN @AFF_DATA AFF
			ON AFF.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
		LEFT JOIN SERVICES_AVAILABLE SA
			ON SA.COD_AFFILIATOR = AFF.COD_AFFILIATOR
				AND SA.ACTIVE = 1
				AND SA.COD_ITEM_SERVICE = @COD_PLANDZERO_SERVICE
				AND SA.COD_EC IS NULL
		WHERE [TRANSACTION_TITLES].COD_TRAN = @COD_TRAN

		INSERT INTO TRANSACTION_TITLES_COST (COD_AFFILIATOR,
		COD_TITLE,
		COD_OPER_COST_AFF,
		OPER_VALUE,
		[PERCENTAGE],
		PREVISION_PAY_DATE,
		COD_SITUATION,
		RATE_PLAN,
		ANTICIP_PERCENT,
		TAX_PLANDZERO)
			SELECT
				COD_AFFILIATOR
			   ,COD_TITLE
			   ,[COD_OPER_COST_AFF]
			   ,[PERCENTAGE_COST]
			   ,[PERCENTAGE]
			   ,PREVISION_PAY_DATE
			   ,4
			   ,[RATE]
			   ,ANTICIP_PERCENT
			   ,PLANDZERO_MDR
			FROM #COST
	END;

	IF (SELECT
				COUNT(*)
			FROM #EC
			WHERE COD_T_PLAN = 2
			AND PLANDZERO_MDR IS NOT NULL)
		> 0
	BEGIN

		INSERT INTO TRANSACTION_SERVICES (CREATED_AT, COD_ITEM_SERVICE, COD_TRAN, TAX_PLANDZERO_EC, TAX_PLANDZERO_AFF, COD_EC)
			SELECT DISTINCT
				current_timestamp
			   ,@COD_PLANDZERO_SERVICE
			   ,@COD_TRAN
			   ,e.PLANDZERO_MDR
			   ,IIF(e.PLANDZERO_MDR = 0 OR e.PLANDZERO_MDR IS NULL, NULL, (SELECT TOP 1
						c.PLANDZERO_MDR
					FROM #COST c
					WHERE c.COD_AFFILIATOR = e.AFFILIATOR)
				)
			   ,e.MERCHANT
			FROM #EC e
			WHERE COD_T_PLAN = 2
			AND e.PLANDZERO_MDR IS NOT NULL
	END;
END;
GO

IF OBJECT_ID('VW_TITLES') IS NOT NULL
	DROP VIEW VW_TITLES
GO
CREATE VIEW [VW_TITLES]
AS
WITH CTE_TITLES_CERC
AS
(SELECT
		CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
		IIF([TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL, 1,
		1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(IIF([TRANSACTION_TITLES].[IS_SPOT] = 1,
		DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE]), [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]),
		([TRANSACTION_TITLES].[PLOT] * 30) - 1)) /
		100))) - (IIF([TRANSACTION_TITLES].[PLOT] = 1, [TRANSACTION_TITLES].[RATE], 0))) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[TRANSACTION_TITLES].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[TRANSACTION_TITLES].[COD_TITLE]
	   ,[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION_TITLES].[PREVISION_PAY_DATE]
	   ,[TRANSACTION_TITLES].[COD_SITUATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,CASE
			WHEN [AFFILIATOR].[COD_SITUATION] = 24 THEN 1
			WHEN [COMMERCIAL_ESTABLISHMENT].[COD_SITUATION] = 24 THEN 1
			ELSE 0
		END AS [BLOCKED_FINANCE]
	   ,1 AS [IS_LOCKED]
	   ,'TITLE' AS [TYPE]
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]
	JOIN [BRAND](NOLOCK)
		ON [TRANSACTION].[BRAND] = [BRAND].[NAME]
		AND [TRANSACTION].[COD_TTYPE] = [BRAND].[COD_TTYPE]
	JOIN [BANK_DETAILS_EC](NOLOCK)
		ON [BANK_DETAILS_EC].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [IS_CERC] = 1
	JOIN [BANK_DETAILS_CERC_INFO](NOLOCK)
		ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
		AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
		AND [BANK_DETAILS_CERC_INFO].[COD_BRAND] = [BRAND].[COD_BRAND]
	JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK)
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
	LEFT JOIN [AFFILIATOR](NOLOCK)
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [TRANSACTION_TITLES].[COD_SITUATION] = 4),
CTE_TITLES_EC
AS
(SELECT
		CAST(((([TRANSACTION_TITLES].[AMOUNT] * (1 - (([TRANSACTION_TITLES].[TAX_INITIAL] + IIF(TRANSACTION_TITLES.TAX_PLANDZERO IS NULL OR [TRANSACTION].COD_TTYPE = 1, 0, TRANSACTION_TITLES.TAX_PLANDZERO)) / 100))) *
		IIF([TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL, 1,
		1 - (((([TRANSACTION_TITLES].[ANTICIP_PERCENT] + IIF(TRANSACTION_TITLES.TAX_PLANDZERO IS NULL OR [TRANSACTION].COD_TTYPE != 1, 0, TRANSACTION_TITLES.TAX_PLANDZERO)) / 30) * COALESCE(IIF([TRANSACTION_TITLES].[IS_SPOT] = 1,
		DATEDIFF(DAY,
		[TRANSACTION_TITLES].[PREVISION_PAY_DATE],
		[TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE]),
		[TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]),
		([TRANSACTION_TITLES].[PLOT] * 30) - 1)) /
		100))) - (IIF([TRANSACTION_TITLES].[PLOT] = 1, [TRANSACTION_TITLES].[RATE], 0))) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[TRANSACTION_TITLES].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[BANK_DETAILS_EC].[COD_BK_EC]
	   ,[TRANSACTION_TITLES].[COD_TITLE]
	   ,[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION_TITLES].[PREVISION_PAY_DATE]
	   ,[TRANSACTION_TITLES].[COD_SITUATION]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,CASE
			WHEN [AFFILIATOR].[COD_SITUATION] = 24 THEN 1
			WHEN [COMMERCIAL_ESTABLISHMENT].[COD_SITUATION] = 24 THEN 1
			ELSE 0
		END AS [BLOCKED_FINANCE]
	   ,0 AS [IS_LOCKED]
	   ,'TITLE' AS [TYPE]
	FROM [TRANSACTION_TITLES](NOLOCK)
	JOIN [TRANSACTION](NOLOCK)
		ON [TRANSACTION].[COD_TRAN] = [TRANSACTION_TITLES].[COD_TRAN]
	JOIN [BANK_DETAILS_EC](NOLOCK)
		ON [BANK_DETAILS_EC].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
		AND [BANK_DETAILS_EC].[ACTIVE] = 1
		AND [IS_CERC] = 0
	JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK)
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TRANSACTION_TITLES].[COD_EC]
	JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
	LEFT JOIN [AFFILIATOR](NOLOCK)
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [CTE_TITLES_CERC] AS [LOCK]
		ON [LOCK].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
	WHERE [TRANSACTION_TITLES].[COD_SITUATION] = 4
	AND [LOCK].[COD_TITLE] IS NULL)
SELECT
	[COD_EC]
   ,[COD_BRANCH]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE]
   ,[COD_TRAN]
   ,[COD_SITUATION]
   ,[COD_AFFILIATOR]
   ,[BLOCKED_FINANCE]
   ,[IS_LOCKED]
   ,[TYPE]
FROM [CTE_TITLES_CERC]

UNION ALL

SELECT
	[COD_EC]
   ,[COD_BRANCH]
   ,[COD_BK_EC]
   ,[PLOT_VALUE_PAYMENT]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE]
   ,[COD_TRAN]
   ,[COD_SITUATION]
   ,[COD_AFFILIATOR]
   ,[BLOCKED_FINANCE]
   ,[IS_LOCKED]
   ,[TYPE]
FROM [CTE_TITLES_EC]
GO

IF OBJECT_ID('SP_GEN_FINANCE_CALENDAR') IS NOT NULL
	DROP PROCEDURE SP_GEN_FINANCE_CALENDAR
GO
CREATE PROCEDURE [SP_GEN_FINANCE_CALENDAR]
/**************************************************************************************************************      
    Project.......: TKPP                              
------------------------------------------------------------------------------------------------------------           
    Author                 VERSION        Date                  Description                          
------------------------------------------------------------------------------------------------------------
    Luiz Aquino              V2       30/06/2020                ET-895 PlanDZero
**************************************************************************************************************/ (@TP [CODE_TYPE] READONLY, @DateFilter DATETIME = NULL)
AS
BEGIN
	-- param procedure
	DECLARE @PREVISION_PAY_DATE DATE;
	DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);
	DECLARE @COD_SITUATION INT;
	DECLARE @COD_BK_EC INT;
	DECLARE @BANK VARCHAR(255);
	DECLARE @PRIORITY INT;
	DECLARE @COD_BANK INT;
	DECLARE @CODE_BANK VARCHAR(255);
	DECLARE @AGENCY VARCHAR(255);
	DECLARE @DIGIT_AGENCY VARCHAR(255);
	DECLARE @ACCOUNT VARCHAR(255);
	DECLARE @DIGIT_ACCOUNT VARCHAR(255);
	DECLARE @COD_TYPE_ACCOUNT INT;
	DECLARE @ACCOUNT_TYPE VARCHAR(255);
	DECLARE @COD_OPER_BANK INT;
	DECLARE @OPERATION_CODE VARCHAR(255);
	DECLARE @OPERATION_DESC VARCHAR(255);
	DECLARE @IS_LOCK INT;
	DECLARE @IS_ASSIGNMENT INT;
	DECLARE @ASSIGNMENT_NAME VARCHAR(255);
	DECLARE @ASSIGNMENT_IDENTIFICATION VARCHAR(255);
	DECLARE @COD_EC INT;
	DECLARE @COMMERCIAL_CODE VARCHAR(255);
	DECLARE @EC_CPF_CNPJ VARCHAR(14);
	DECLARE @EC_NAME VARCHAR(255);
	DECLARE @TYPE_ESTAB VARCHAR(255);
	DECLARE @TRADING_NAME VARCHAR(255);
	DECLARE @COD_AFFILIATOR INT;
	DECLARE @AFFILIATOR_NAME VARCHAR(255);
	DECLARE @AFFILIATOR_CPF_CNPJ VARCHAR(14);
	DECLARE @COD_FINANCE_CALENDAR INT;
	DECLARE @COD_COMP INT;

	SELECT
		[VW_RELEASES_FINANCE].[COD_EC]
	   ,SUM([TITLE]) AS [TITLE]
	   ,SUM([ADJ]) AS [ADJ]
	   ,SUM([TARIFF]) AS [TARIFF]
	   ,CAST([PREVISION_PAY_DATE] AS DATE) PREVISION_PAY_DATE
	   ,[COD_BK_EC]
	   ,[IS_LOCKED]
	   ,[COD_SITUATION]
	   ,CAST(0 AS DECIMAL(22, 6)) AS [TOTAL]
	   ,0 AS [EXCLUDE] INTO [#RELEASES_FIN]
	FROM [VW_RELEASES_FINANCE]
	JOIN @TP AS [TP]
		ON [TP].[CODE] = [VW_RELEASES_FINANCE].[COD_EC]
	WHERE (@DateFilter IS NULL
	OR PREVISION_PAY_DATE <= @DateFilter)
	GROUP BY [VW_RELEASES_FINANCE].[COD_EC]
			,CAST([VW_RELEASES_FINANCE].[PREVISION_PAY_DATE] AS DATE)
			,[VW_RELEASES_FINANCE].[COD_BK_EC]
			,[VW_RELEASES_FINANCE].[IS_LOCKED]
			,[COD_SITUATION];

	SELECT
		COD_EC
	   ,COD_BRANCH
	   ,COD_BK_EC
	   ,PLOT_VALUE_PAYMENT
	   ,CAST(PREVISION_PAY_DATE AS DATE) PREVISION_PAY_DATE
	   ,COD_TITLE
	   ,COD_TRAN
	   ,COD_SITUATION
	   ,COD_AFFILIATOR
	   ,BLOCKED_FINANCE
	   ,IS_LOCKED
	   ,TYPE INTO [#ALL_TITLES]
	FROM [VW_TITLES] AS [VW]
	JOIN @TP AS [TP]
		ON [TP].[CODE] = [VW].[COD_EC]
	WHERE (@DateFilter IS NULL
	OR PREVISION_PAY_DATE <= @DateFilter);

	SELECT
		PK
	   ,TYPE
	   ,COD_EC
	   ,COD_BRANCH
	   ,PLOT_VALUE_PAYMENT
	   ,CAST(PREVISION_PAY_DATE AS DATE) PREVISION_PAY_DATE
	   ,COD_SITUATION
	   ,COD_AFFILIATOR
	   ,COD_BK_EC INTO [#ALL_ADJ_TARIFF]
	FROM [VW_ADJ_TFF] AS [VW]
	JOIN @TP AS [TP]
		ON [TP].[CODE] = [VW].[COD_EC]
	WHERE (@DateFilter IS NULL
	OR PREVISION_PAY_DATE <= @DateFilter);


	SELECT
		[VW].* INTO [#ALL_BILLET]
	FROM VW_BILLET AS [VW]
	JOIN @TP AS [TP]
		ON [TP].[CODE] = [VW].[COD_EC]
	WHERE (@DateFilter IS NULL
	OR PREVISION_PAYMENT <= @DateFilter);
	-- delete [FINANCE_CALENDAR] quando ec j exitir para a data de previso e estiver com a situao 4

	SELECT
		[COD_FIN_CALENDAR] INTO [#FINANCE_CALENDAR_EXISTS]
	FROM [FINANCE_CALENDAR]
	JOIN @TP AS [TP]
		ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_EC]
	WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
	AND [FINANCE_CALENDAR].[COD_SITUATION] = 4
	AND (@DateFilter IS NULL
	OR PREVISION_PAY_DATE < @DateFilter);

	UPDATE [FINANCE_RESUME]
	SET [ACTIVE] = 0
	FROM [FINANCE_RESUME]
	WHERE [FINANCE_RESUME].[COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#FINANCE_CALENDAR_EXISTS]);

	UPDATE [FINANCE_CALENDAR]
	SET [ACTIVE] = 0
	FROM [FINANCE_CALENDAR]
	WHERE [FINANCE_CALENDAR].[COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#FINANCE_CALENDAR_EXISTS]);

	-- Buscar maior valor cerc

	SELECT
		MAX([TITLE]) AS [MAX_VALUE]
	   ,[COD_EC]
	   ,[PREVISION_PAY_DATE] INTO [#MAX_VALUE_LOCK]
	FROM [#RELEASES_FIN]
	WHERE [IS_LOCKED] = 1
	GROUP BY [COD_EC]
			,[PREVISION_PAY_DATE];

	SELECT
		SUM([ADJ]) AS [ADJ]
	   ,SUM([TARIFF]) AS [TARIFF]
	   ,[#RELEASES_FIN].[COD_EC]
	   ,[#RELEASES_FIN].[PREVISION_PAY_DATE] INTO [#DISCOUNTS_CERC]
	FROM [#RELEASES_FIN]
	LEFT JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
		ON [MAX_VALUE].[COD_EC] = [#RELEASES_FIN].[COD_EC]
			AND [MAX_VALUE].[PREVISION_PAY_DATE] = [#RELEASES_FIN].[PREVISION_PAY_DATE] -- essa $@##! aqui
	WHERE (CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) < 0
	AND [MAX_VALUE].[COD_EC] IS NOT NULL
	GROUP BY [#RELEASES_FIN].[COD_EC]
			,[#RELEASES_FIN].[PREVISION_PAY_DATE];

	--atribuio de valores das tarifas

	UPDATE [T]
	SET [T].[TARIFF] = [#DISCOUNTS_CERC].[TARIFF]
	   ,[T].[ADJ] = [#DISCOUNTS_CERC].[ADJ]
	FROM [#RELEASES_FIN] AS [T]
	JOIN [#MAX_VALUE_LOCK] [MAX_VALUE]
		ON [MAX_VALUE].[COD_EC] = [T].[COD_EC]
		AND [T].[TITLE] = [MAX_VALUE].[MAX_VALUE]
		AND [T].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE]
	JOIN [#DISCOUNTS_CERC]
		ON [#DISCOUNTS_CERC].[COD_EC] = [T].[COD_EC]
		AND [T].[PREVISION_PAY_DATE] = [#DISCOUNTS_CERC].[PREVISION_PAY_DATE];

	UPDATE [RELEASE]
	SET [RELEASE].[TARIFF] = 0.0
	   ,[RELEASE].[ADJ] = 0.0
	FROM [#RELEASES_FIN] AS [RELEASE]
	JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
		ON [MAX_VALUE].[COD_EC] = [RELEASE].[COD_EC]
	WHERE ((CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) <= 0
	AND [RELEASE].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE])
	AND [RELEASE].[IS_LOCKED] = 0;

	UPDATE [#RELEASES_FIN]
	SET [TOTAL] = ([#RELEASES_FIN].[TITLE] + [#RELEASES_FIN].[ADJ] + [#RELEASES_FIN].[TARIFF]);

	UPDATE [#RELEASES_FIN]
	SET [EXCLUDE] = 1
	FROM [#RELEASES_FIN] [RF]
	WHERE ([RF].[TARIFF] < 0.001
	AND [RF].[TARIFF] > -0.001)
	AND ([RF].[TITLE] < 0.001
	AND [RF].[TITLE] > -0.001)
	AND ([RF].[ADJ] < 0.001
	AND [RF].[ADJ] > -0.001);

	-- cursor para insero da finance_calendar

	DECLARE FINANCE_CURSOR CURSOR FOR SELECT
		[FINANCE].[PREVISION_PAY_DATE]
	   ,[FINANCE].[TOTAL]
	   ,[FINANCE].[COD_SITUATION]
	   ,[FINANCE].[COD_BK_EC]
	   ,[BANK_DETAILS_EC].[COD_BANK]
	   ,[BANKS].[NAME] AS [NAME_BANK]
	   ,[BANKS].[PRIORITY]
	   ,[BANKS].[CODE] AS [CODE_BANK]
	   ,[BANK_DETAILS_EC].[AGENCY]
	   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
	   ,[BANK_DETAILS_EC].[ACCOUNT]
	   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
	   ,[BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	   ,[ACCOUNT_TYPE].[NAME] AS [ACCOUNT_TYPE]
	   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
	   ,[OPERATION].[CODE] AS [OPERATION]
	   ,[OPERATION].[DESCRIPTION]
	   ,[FINANCE].[IS_LOCKED]
	   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
	   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
	   ,[FINANCE].[COD_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[CODE] AS [EC_CODE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ] AS [EC_CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME] AS [EC_NAME]
	   ,[TYPE_ESTAB].[CODE] AS [TYPE_EC]
	   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME] AS [AFF_NAME]
	   ,[AFFILIATOR].[CPF_CNPJ] AS [AFF_CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	FROM [#RELEASES_FIN] AS [FINANCE]
	JOIN [BANK_DETAILS_EC]
		ON [BANK_DETAILS_EC].[COD_BK_EC] = [FINANCE].[COD_BK_EC]
	JOIN [BANKS]
		ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
	JOIN [ACCOUNT_TYPE]
		ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
	LEFT JOIN [OPERATION_BANK]
		ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
	LEFT JOIN [OPERATION]
		ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
	JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [FINANCE].[COD_EC]
	JOIN [TYPE_ESTAB]
		ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	WHERE [FINANCE].[EXCLUDE] = 0
	ORDER BY [FINANCE].[COD_BK_EC],
	[FINANCE].[TOTAL],
	[FINANCE].[PREVISION_PAY_DATE];

	OPEN FINANCE_CURSOR;

	FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

	WHILE @@fetch_status = 0
	BEGIN
	-- insero da finance_calendar

	SET @COD_FINANCE_CALENDAR = NULL;

	INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
	[PLOT_VALUE_PAYMENT],
	[COD_SITUATION],
	[COD_BK_EC],
	[BANK],
	[PRIORITY],
	[COD_BANK],
	[CODE_BANK],
	[AGENCY],
	[DIGIT_AGENCY],
	[ACCOUNT],
	[DIGIT_ACCOUNT],
	[COD_TYPE_ACCOUNT],
	[ACCOUNT_TYPE],
	[COD_OPER_BANK],
	[OPERATION_CODE],
	[OPERATION_DESC],
	[IS_LOCK],
	[IS_ASSIGNMENT],
	[ASSIGNMENT_NAME],
	[ASSIGNMENT_IDENTIFICATION],
	[COD_EC],
	[COMMERCIAL_CODE],
	[EC_CPF_CNPJ],
	[EC_NAME],
	[TYPE_ESTAB],
	[TRADING_NAME],
	[COD_AFFILIATOR],
	[AFFILIATOR_NAME],
	[AFFILIATOR_CPF_CNPJ],
	[COD_COMP])
		VALUES (@PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @BANK, @PRIORITY, @COD_BANK, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP);

	-- atualizao da pk nos ttulos, ajustes e tarifas
	SET @COD_FINANCE_CALENDAR = @@identity;

	UPDATE [TRANSACTION_TITLES]
	SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
	FROM [TRANSACTION_TITLES]
	JOIN [#ALL_TITLES] [TITLE]
		ON [TITLE].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
		AND [TITLE].[COD_BK_EC] = @COD_BK_EC
		AND CAST([TITLE].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE
	JOIN @TP [TP]
		ON [TP].[CODE] = [TITLE].[COD_EC];

	UPDATE [RELEASE_ADJUSTMENTS]
	SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
	FROM [RELEASE_ADJUSTMENTS]
	JOIN [#ALL_ADJ_TARIFF] [ADJ]
		ON [ADJ].[PK] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
		AND [TYPE] = 'AJUSTE'
		AND [ADJ].[COD_BK_EC] = @COD_BK_EC
		AND CAST([ADJ].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE;

	UPDATE FINANCIAL_BILLET
	SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
	FROM FINANCIAL_BILLET
	JOIN [#ALL_BILLET] [BL]
		ON [BL].COD_BILLET = [FINANCIAL_BILLET].COD_BILLET
		AND [BL].COD_BK_EC = @COD_BK_EC
		AND CAST([BL].PREVISION_PAYMENT AS DATE) = @PREVISION_PAY_DATE;

	INSERT INTO [FINANCE_RESUME] ([TITLES_VALUE],
	[ADJUSTMENTS_VALUE],
	[TARIFF_VALUE],
	[COD_FIN_CALENDAR])
		SELECT
			[TITLE]
		   ,[ADJ]
		   ,[TARIFF]
		   ,@COD_FINANCE_CALENDAR
		FROM [#RELEASES_FIN]
		WHERE [COD_EC] = @COD_EC
		AND [COD_BK_EC] = @COD_BK_EC
		AND [PREVISION_PAY_DATE] = @PREVISION_PAY_DATE;

	FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;
	END;
	CLOSE FINANCE_CURSOR;
	DEALLOCATE FINANCE_CURSOR;
END;
GO


IF OBJECT_ID('SP_FINANCE_RATE_EC') IS NOT NULL
	DROP PROCEDURE SP_FINANCE_RATE_EC
GO
CREATE PROCEDURE [SP_FINANCE_RATE_EC] (@COD_EC INT, @DateFilter DATETIME = NULL)
AS
BEGIN

	DECLARE @COD_FIN_CALENDAR INT = NULL;
	DECLARE @COD_REL_ADJ INT;
	DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);
	DECLARE @PREVISION_PAY_DATE DATETIME;
	DECLARE @CURRENT_DATE DATETIME = current_timestamp;
	DECLARE @COD_TARIFF_EC INT;

	DECLARE @EXIST_BK_LOCK INT = 0;
	DECLARE @EXIST_ADJ INT = 0;
	DECLARE @EXIST_CALENDAR INT = 0;
	DECLARE @EXIST_TFF INT = 0;

	DECLARE @TP [CODE_TYPE];

	SELECT
		@EXIST_BK_LOCK = COUNT(*)
	FROM [BANK_DETAILS_EC]
	JOIN [BANK_DETAILS_CERC_INFO]
		ON [BANK_DETAILS_CERC_INFO].[COD_BK_EC] = [BANK_DETAILS_EC].[COD_BK_EC]
			AND [BANK_DETAILS_CERC_INFO].[COD_SITUATION] = 3
	WHERE [BANK_DETAILS_EC].[ACTIVE] = 1
	AND [BANK_DETAILS_EC].[COD_EC] = @COD_EC;

	IF @EXIST_BK_LOCK >= 1
		RETURN;

	EXEC [SP_RECONCILE_FIN_CALENDAR_BY_EC] @COD_EC;

	INSERT INTO @TP ([CODE])
		VALUES (@COD_EC)

	EXEC [SP_GEN_FINANCE_CALENDAR] @TP
								  ,@DateFilter;

	SELECT
		[COD_FIN_CALENDAR]
	   ,[COD_EC]
	   ,[COD_BK_EC]
	   ,[PLOT_VALUE_PAYMENT]
	   ,[FINANCE_CALENDAR].[IS_LOCK]
	   ,[FINANCE_CALENDAR].[PREVISION_PAY_DATE] INTO [#FINANCE_CALENDAR]
	FROM [FINANCE_CALENDAR]
	WHERE [COD_EC] = @COD_EC
	AND [ACTIVE] = 1
	AND [COD_SITUATION] = 4
	AND [IS_LOCK] = 0
	AND (@DateFilter IS NULL
	OR PREVISION_PAY_DATE <= @DateFilter);

	SELECT
		[COD_REL_ADJ]
	   ,VALUE
	   ,[RELEASE_ADJUSTMENTS].[PREVISION_PAY_DATE]
	   ,[RELEASE_ADJUSTMENTS].[COD_EC]
	   ,0 AS [UPDATED] INTO [#ADJ]
	FROM [RELEASE_ADJUSTMENTS]
	WHERE [RELEASE_ADJUSTMENTS].[COD_EC] = @COD_EC
	AND [RELEASE_ADJUSTMENTS].[COD_SITUATION] = 4
	AND VALUE < 0
	AND (@DateFilter IS NULL
	OR PREVISION_PAY_DATE <= @DateFilter);

	SELECT
		[COD_TARIFF_EC]
	   ,VALUE
	   ,[TARIFF_EC].[PAYMENT_DAY]
	   ,[TARIFF_EC].[COD_EC]
	   ,0 AS [UPDATED] INTO [#TFF]
	FROM [TARIFF_EC]
	WHERE [TARIFF_EC].[COD_EC] = @COD_EC
	AND [TARIFF_EC].[COD_SITUATION] = 4
	AND CAST(CONVERT(CHAR(6), [TARIFF_EC].[PAYMENT_DAY], 112) AS INT) <= CAST(CONVERT(CHAR(6), @CURRENT_DATE, 112) AS INT)
	AND (@DateFilter IS NULL
	OR PAYMENT_DAY <= @DateFilter);

	SELECT
		@EXIST_CALENDAR = COUNT(*)
	FROM [#FINANCE_CALENDAR];

	SELECT
		@EXIST_ADJ = COUNT(*)
	FROM [#ADJ];

	SELECT
		@EXIST_TFF = COUNT(*)
	FROM [#TFF];

	IF (@EXIST_CALENDAR <= 0
		AND @EXIST_ADJ <= 0
		AND @EXIST_TFF <= 0)
		OR (@EXIST_CALENDAR > 0
		AND @EXIST_ADJ <= 0
		AND @EXIST_TFF <= 0)
		RETURN;

	-- cursor para ajustes  
	DECLARE CURSOR_FINANCE CURSOR FOR SELECT
		[COD_REL_ADJ]
	   ,VALUE
	   ,[PREVISION_PAY_DATE]
	   ,[COD_EC]
	FROM [#ADJ]
	ORDER BY [PREVISION_PAY_DATE];

	OPEN CURSOR_FINANCE;

	FETCH NEXT FROM CURSOR_FINANCE INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;

	WHILE @@fetch_status = 0
	BEGIN

	SET @COD_FIN_CALENDAR = NULL;

	SELECT
		@COD_FIN_CALENDAR = [FIN].[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR] AS [FIN]
	WHERE CAST([PREVISION_PAY_DATE] AS DATE) = CAST(@PREVISION_PAY_DATE AS DATE);

	IF @COD_FIN_CALENDAR IS NOT NULL
	BEGIN

		UPDATE [FINANCE_CALENDAR]
		SET [PLOT_VALUE_PAYMENT] = ([PLOT_VALUE_PAYMENT] + @PLOT_VALUE_PAYMENT)
		WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

		UPDATE [FINANCE_RESUME]
		SET [ADJUSTMENTS_VALUE] = ([ADJUSTMENTS_VALUE] + @PLOT_VALUE_PAYMENT)
		WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

		UPDATE [RELEASE_ADJUSTMENTS]
		SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
		WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

		UPDATE [#ADJ]
		SET [UPDATED] = 1
		WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

	END;
	ELSE
	BEGIN
		SET @COD_FIN_CALENDAR = NULL;

		INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
		[PLOT_VALUE_PAYMENT],
		[COD_SITUATION],
		[COD_BK_EC],
		[BANK],
		[PRIORITY],
		[COD_BANK],
		[CODE_BANK],
		[AGENCY],
		[DIGIT_AGENCY],
		[ACCOUNT],
		[DIGIT_ACCOUNT],
		[COD_TYPE_ACCOUNT],
		[ACCOUNT_TYPE],
		[COD_OPER_BANK],
		[OPERATION_CODE],
		[OPERATION_DESC],
		[IS_LOCK],
		[IS_ASSIGNMENT],
		[ASSIGNMENT_NAME],
		[ASSIGNMENT_IDENTIFICATION],
		[COD_EC],
		[COMMERCIAL_CODE],
		[EC_CPF_CNPJ],
		[EC_NAME],
		[TYPE_ESTAB],
		[TRADING_NAME],
		[COD_AFFILIATOR],
		[AFFILIATOR_NAME],
		[AFFILIATOR_CPF_CNPJ],
		[COD_COMP])
			SELECT
				@PREVISION_PAY_DATE
			   ,@PLOT_VALUE_PAYMENT
			   ,4
			   ,[BANK_DETAILS_EC].[COD_BK_EC]
			   ,[BANKS].[NAME]
			   ,[BANKS].[PRIORITY]
			   ,[BANKS].[COD_BANK]
			   ,[BANKS].[CODE]
			   ,[BANK_DETAILS_EC].[AGENCY]
			   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
			   ,[BANK_DETAILS_EC].[ACCOUNT]
			   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
			   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
			   ,[ACCOUNT_TYPE].[NAME]
			   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
			   ,[OPERATION].[CODE]
			   ,[OPERATION].[DESCRIPTION]
			   ,0
			   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
			   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
			   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
			   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
			   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
			   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
			   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
			   ,[TYPE_ESTAB].[CODE]
			   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
			   ,[AFFILIATOR].[COD_AFFILIATOR]
			   ,[AFFILIATOR].[NAME]
			   ,[AFFILIATOR].[CPF_CNPJ]
			   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
			FROM [#ADJ] AS [ADJ]
			JOIN [COMMERCIAL_ESTABLISHMENT]
				ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [ADJ].[COD_EC]
			JOIN [BANK_DETAILS_EC]
				ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
					AND [BANK_DETAILS_EC].[ACTIVE] = 1
					AND [BANK_DETAILS_EC].[IS_CERC] = 0
			JOIN [BANKS]
				ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
			JOIN [ACCOUNT_TYPE]
				ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
			LEFT JOIN [OPERATION_BANK]
				ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
			LEFT JOIN [OPERATION]
				ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
			JOIN [TYPE_ESTAB]
				ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
			LEFT JOIN [AFFILIATOR]
				ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
			WHERE [ADJ].[UPDATED] = 0
			AND [ADJ].[COD_REL_ADJ] = @COD_REL_ADJ;

		SET @COD_FIN_CALENDAR = @@identity;

		UPDATE [RELEASE_ADJUSTMENTS]
		SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
		WHERE [COD_REL_ADJ] = @COD_REL_ADJ;

		INSERT INTO [FINANCE_RESUME] ([ADJUSTMENTS_VALUE], [COD_FIN_CALENDAR])
			VALUES (@PLOT_VALUE_PAYMENT, @COD_FIN_CALENDAR);

	END;
	FETCH NEXT FROM CURSOR_FINANCE INTO @COD_REL_ADJ, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;
	END;

	CLOSE CURSOR_FINANCE;
	DEALLOCATE CURSOR_FINANCE;

	-- cursor para tarifas  
	DECLARE CURSOR_FINANCE CURSOR FOR SELECT
		[COD_TARIFF_EC]
	   ,VALUE
	   ,[PAYMENT_DAY]
	   ,[COD_EC]
	FROM [#TFF]
	ORDER BY [PAYMENT_DAY];

	OPEN CURSOR_FINANCE;
	FETCH NEXT FROM CURSOR_FINANCE INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;

	WHILE @@fetch_status = 0
	BEGIN

	SET @COD_FIN_CALENDAR = NULL;

	SELECT
		@COD_FIN_CALENDAR = [FIN].[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR] AS [FIN]
	WHERE CAST([PREVISION_PAY_DATE] AS DATE) = CAST(@PREVISION_PAY_DATE AS DATE);

	IF @COD_FIN_CALENDAR IS NOT NULL
	BEGIN
		UPDATE [FINANCE_CALENDAR]
		SET [PLOT_VALUE_PAYMENT] = ([PLOT_VALUE_PAYMENT] + @PLOT_VALUE_PAYMENT)
		WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

		UPDATE [FINANCE_RESUME]
		SET [TARIFF_VALUE] = ([TARIFF_VALUE] + @PLOT_VALUE_PAYMENT)
		WHERE [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR;

		UPDATE [TARIFF_EC]
		SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
		WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

		UPDATE [#TFF]
		SET [UPDATED] = 1
		WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;
	END;
	ELSE
	BEGIN
		SET @COD_FIN_CALENDAR = NULL;

		INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
		[PLOT_VALUE_PAYMENT],
		[COD_SITUATION],
		[COD_BK_EC],
		[BANK],
		[PRIORITY],
		[COD_BANK],
		[CODE_BANK],
		[AGENCY],
		[DIGIT_AGENCY],
		[ACCOUNT],
		[DIGIT_ACCOUNT],
		[COD_TYPE_ACCOUNT],
		[ACCOUNT_TYPE],
		[COD_OPER_BANK],
		[OPERATION_CODE],
		[OPERATION_DESC],
		[IS_LOCK],
		[IS_ASSIGNMENT],
		[ASSIGNMENT_NAME],
		[ASSIGNMENT_IDENTIFICATION],
		[COD_EC],
		[COMMERCIAL_CODE],
		[EC_CPF_CNPJ],
		[EC_NAME],
		[TYPE_ESTAB],
		[TRADING_NAME],
		[COD_AFFILIATOR],
		[AFFILIATOR_NAME],
		[AFFILIATOR_CPF_CNPJ],
		[COD_COMP])
			SELECT
				@PREVISION_PAY_DATE
			   ,@PLOT_VALUE_PAYMENT
			   ,4
			   ,[BANK_DETAILS_EC].[COD_BK_EC]
			   ,[BANKS].[NAME]
			   ,[BANKS].[PRIORITY]
			   ,[BANKS].[COD_BANK]
			   ,[BANKS].[CODE]
			   ,[BANK_DETAILS_EC].[AGENCY]
			   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
			   ,[BANK_DETAILS_EC].[ACCOUNT]
			   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
			   ,[ACCOUNT_TYPE].[COD_TYPE_ACCOUNT]
			   ,[ACCOUNT_TYPE].[NAME]
			   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
			   ,[OPERATION].[CODE]
			   ,[OPERATION].[DESCRIPTION]
			   ,0
			   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
			   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
			   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
			   ,[COMMERCIAL_ESTABLISHMENT].[COD_EC]
			   ,[COMMERCIAL_ESTABLISHMENT].[CODE]
			   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
			   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
			   ,[TYPE_ESTAB].[CODE]
			   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
			   ,[AFFILIATOR].[COD_AFFILIATOR]
			   ,[AFFILIATOR].[NAME]
			   ,[AFFILIATOR].[CPF_CNPJ]
			   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
			FROM [#TFF] AS [TFF]
			JOIN [COMMERCIAL_ESTABLISHMENT]
				ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [TFF].[COD_EC]
			JOIN [BANK_DETAILS_EC]
				ON [BANK_DETAILS_EC].[COD_EC] = [COMMERCIAL_ESTABLISHMENT].[COD_EC]
					AND [BANK_DETAILS_EC].[ACTIVE] = 1
					AND [BANK_DETAILS_EC].[IS_CERC] = 0
			JOIN [BANKS]
				ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
			JOIN [ACCOUNT_TYPE]
				ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] = [BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
			LEFT JOIN [OPERATION_BANK]
				ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
			LEFT JOIN [OPERATION]
				ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
			JOIN [TYPE_ESTAB]
				ON [TYPE_ESTAB].[COD_TYPE_ESTAB] = [COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
			LEFT JOIN [AFFILIATOR]
				ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
			WHERE [TFF].[UPDATED] = 0
			AND [TFF].[COD_TARIFF_EC] = @COD_TARIFF_EC;

		SET @COD_FIN_CALENDAR = @@identity;

		UPDATE [TARIFF_EC]
		SET [COD_FIN_CALENDAR] = @COD_FIN_CALENDAR
		WHERE [COD_TARIFF_EC] = @COD_TARIFF_EC;

		INSERT INTO [FINANCE_RESUME] ([TARIFF_VALUE], [COD_FIN_CALENDAR])
			VALUES (@PLOT_VALUE_PAYMENT, @COD_FIN_CALENDAR);

	END;

	FETCH NEXT FROM CURSOR_FINANCE INTO @COD_TARIFF_EC, @PLOT_VALUE_PAYMENT, @PREVISION_PAY_DATE, @COD_EC;
	END;

	CLOSE CURSOR_FINANCE;
	DEALLOCATE CURSOR_FINANCE;
END;
GO

IF OBJECT_ID('SP_GEN_ALL_CALENDAR_BY_EC') IS NOT NULL
	DROP PROCEDURE SP_GEN_ALL_CALENDAR_BY_EC
GO
CREATE PROCEDURE [SP_GEN_ALL_CALENDAR_BY_EC] (@TP [CODE_TYPE] READONLY, @DateFilter DATETIME = NULL)
AS
BEGIN
	DECLARE @COD_EC INT;

	DECLARE CURSOR_FIN CURSOR FOR SELECT
		[CODE]
	FROM @TP;

	OPEN CURSOR_FIN;
	FETCH NEXT FROM CURSOR_FIN INTO @COD_EC;

	WHILE @@fetch_status = 0
	BEGIN
	EXEC [SP_FINANCE_RATE_EC] @COD_EC
							 ,@DateFilter;

	EXEC [SP_FINANCE_RATE_LOCK] @COD_EC;

	FETCH NEXT FROM CURSOR_FIN INTO @COD_EC;
	END;

	CLOSE CURSOR_FIN;
	DEALLOCATE CURSOR_FIN;
END;
GO

IF OBJECT_ID('SP_LS_EC_PLAN_D_ZERO') IS NOT NULL
	DROP PROCEDURE SP_LS_EC_PLAN_D_ZERO
GO
CREATE PROCEDURE [SP_LS_EC_PLAN_D_ZERO]
/**************************************************************************************************************      
    Project.......: TKPP                              
------------------------------------------------------------------------------------------------------------           
    Author                 VERSION        Date                  Description                          
------------------------------------------------------------------------------------------------------------
    Luiz Aquino              V1       2020-07-01                ET-895 PlanDZero
**************************************************************************************************************/
AS
BEGIN
	SELECT
		COD_EC
	FROM SERVICES_AVAILABLE SA
	JOIN ITEMS_SERVICES_AVAILABLE ISA
		ON SA.COD_ITEM_SERVICE = ISA.COD_ITEM_SERVICE
			AND ISA.NAME = 'PlanDZero'
	WHERE SA.ACTIVE = 1
	AND SA.COD_EC IS NOT NULL
END;
GO

IF OBJECT_ID('SP_LS_PLAN_D_ZERO_WINDOW') IS NOT NULL
	DROP PROCEDURE SP_LS_PLAN_D_ZERO_WINDOW
GO
CREATE PROCEDURE [SP_LS_PLAN_D_ZERO_WINDOW]
/**************************************************************************************************************      
    Project.......: TKPP                              
------------------------------------------------------------------------------------------------------------           
    Author                 VERSION        Date                  Description                          
------------------------------------------------------------------------------------------------------------
    Luiz Aquino              V1       2020-07-01                ET-895 PlanDZero
**************************************************************************************************************/
AS
BEGIN
	SELECT
		WindowMaxHour
	   ,ProcessAtHour
	FROM PlanDZeroSchedule
END;
GO
IF OBJECT_ID('VW_REPORT_FULL_CASH_FLOW') IS NOT NULL
	DROP VIEW VW_REPORT_FULL_CASH_FLOW
GO
CREATE VIEW [dbo].[VW_REPORT_FULL_CASH_FLOW]
/*----------------------------------------------------------------------------------------                                            
View Name: [VW_REPORT_FULL_CASH_FLOW]                                            
Project.......: TKPP                                            
----------------------------------------------------------------------------------------                                            
Author                          VERSION        Date                        Description                                            
---------------------------------------------------------------------------------------                                             
Caike Uch?a                       V1         30/03/2020            mdr afiliador-pela parcela                             
Caike Uch?a                       V2         30/04/2020               add colunas produto ec                      
Caike Uch?a                       V3         03/08/2020                   add QTY_DAYS_ANTECIP                    
Caike Uch?a                       V4         20/08/2020                Corre??o val liquid afiliador                  
---------------------------------------------------------------------------------------*/
AS
WITH CTE
AS
(SELECT --TOP(1000)                                                         
		TRANSACTION_TITLES.TAX_INITIAL
	   ,TRANSACTION_TITLES.ANTICIP_PERCENT AS ANTECIP_EC
	   ,COALESCE(AFFILIATOR.[NAME], 'CELER') AS AFFILIATOR
	   ,[TRANSACTION_TYPE].CODE AS TRAN_TYPE
	   ,TRANSACTION_TITLES.PLOT
	   ,CAST([dbo].[FN_FUS_UTF]([TRANSACTION].CREATED_AT) AS DATETIME) AS TRANSACTION_DATE
	   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS MERSHANT
	   ,[TRANSACTION_TITLES].ACQ_TAX
	   ,[TRANSACTION_TITLES].PREVISION_PAY_DATE
	   ,[TRANSACTION_TITLES].PREVISION_RECEIVE_DATE
	   ,[TRANSACTION_TITLES].AMOUNT
	   ,[TRANSACTION].AMOUNT AS TRANSACTION_AMOUNT
	   ,[TRANSACTION].CODE AS NSU
	   ,[TRANSACTION].BRAND AS BRAND
	   ,ACQUIRER.[NAME] AS ACQUIRER
	   ,(CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END) AS RATE
	   ,dbo.FNC_CALC_LIQUID(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.ACQ_TAX) AS LIQUID_SUB
	   ,COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, 0) AS ANTECIP_AFF
	   ,COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], 0) AS MDR_AFF
	   ,(CASE
			WHEN (SELECT

						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				> 0 THEN dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT

						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, [TRANSACTION].COD_TTYPE)
			ELSE dbo.[FNC_ANT_VALUE_LIQ_DAYS](
				TRANSACTION_TITLES.AMOUNT,
				TRANSACTION_TITLES.TAX_INITIAL,
				TRANSACTION_TITLES.PLOT,
				TRANSACTION_TITLES.ANTICIP_PERCENT,
				(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)

					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END))
		END) AS EC
	   ,0 AS '0'
	   ,(CASE
			WHEN (SELECT

						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				> 0 THEN dbo.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(TRANSACTION_TITLES.AMOUNT, TRANSACTION_TITLES.PLOT, TRANSACTION_TITLES.TAX_INITIAL, TRANSACTION_TITLES.ANTICIP_PERCENT, (SELECT

						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, [TRANSACTION].COD_TTYPE)
			ELSE (dbo.[FNC_ANT_VALUE_LIQ_DAYS](
				TRANSACTION_TITLES.AMOUNT,
				TRANSACTION_TITLES.TAX_INITIAL,
				TRANSACTION_TITLES.PLOT,
				TRANSACTION_TITLES.ANTICIP_PERCENT,
				(CASE
					WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
					ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
				END)
				) - (CASE
					WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
					ELSE 0
				END))
		END) AS EC_TARIFF
	   ,[TRANSACTION].PLOTS AS TOTAL_PLOTS
	   ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL),
		TRANSACTION_TITLES.PLOT,
		COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT),
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)

			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END)) AS AFF_DISCOUNT
	   ,dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		(TRANSACTION_TITLES.AMOUNT),
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
		TRANSACTION_TITLES.TAX_INITIAL),
		TRANSACTION_TITLES.PLOT,
		COALESCE([TRANSACTION_TITLES_COST].ANTICIP_PERCENT,
		TRANSACTION_TITLES.ANTICIP_PERCENT)
		, (CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)

			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END
		)) AS AFF_DISCOUNT_TARIFF
	   ,(
		dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		(
		TRANSACTION_TITLES.AMOUNT,
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE],
		TRANSACTION_TITLES.TAX_INITIAL) +
		(CASE
			WHEN [TRANSACTION].COD_TTYPE = 2 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END),
		TRANSACTION_TITLES.PLOT,
		[TRANSACTION_TITLES_COST].ANTICIP_PERCENT +
		(CASE
			WHEN [TRANSACTION].COD_TTYPE = 1 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END),
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)

			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END)
		)
		-
		dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		TRANSACTION_TITLES.AMOUNT,
		TRANSACTION_TITLES.TAX_INITIAL + (CASE
			WHEN [TRANSACTION].COD_TTYPE = 2 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END),
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT + (CASE
			WHEN [TRANSACTION].COD_TTYPE = 1 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END),
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)

			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END))
		) AS AFF
	   ,((
		dbo.[FNC_ANT_VALUE_LIQ_DAYS]
		((TRANSACTION_TITLES.AMOUNT),
		COALESCE([TRANSACTION_TITLES_COST].[PERCENTAGE], TRANSACTION_TITLES.TAX_INITIAL)
		+
		(CASE
			WHEN [TRANSACTION].COD_TTYPE = 2 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END)
		,
		TRANSACTION_TITLES.PLOT,
		COALESCE(
		[TRANSACTION_TITLES_COST].ANTICIP_PERCENT, TRANSACTION_TITLES.ANTICIP_PERCENT)
		+
		(CASE
			WHEN [TRANSACTION].COD_TTYPE = 1 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END)
		,
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END
		))
		-
		dbo.[FNC_ANT_VALUE_LIQ_DAYS](
		(TRANSACTION_TITLES.AMOUNT),
		TRANSACTION_TITLES.TAX_INITIAL
		+ (CASE
			WHEN [TRANSACTION].COD_TTYPE = 2 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END)
		,
		TRANSACTION_TITLES.PLOT,
		TRANSACTION_TITLES.ANTICIP_PERCENT
		+ (CASE
			WHEN [TRANSACTION].COD_TTYPE = 1 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = TRANSACTION_TITLES.COD_EC)
				, 0)
			ELSE 0
		END)
		,
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END))
		)
		+ (CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN TRANSACTION_TITLES.RATE
			ELSE 0
		END)
		-
		(CASE
			WHEN TRANSACTION_TITLES.PLOT = 1 THEN ISNULL([TRANSACTION_TITLES_COST].RATE_PLAN, 0)
			ELSE 0
		END)
		)
		AS AFF_TARIFF
	   ,[TRANSACTION].COD_ASS_TR_COMP
	   ,TRANSACTION_TITLES.COD_TITLE
	   ,CE_DESTINY.COD_EC
	   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
	   ,BRANCH_EC.COD_BRANCH
	   ,DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH
	   ,[TRANSACTION].PAN
	   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS 'CPF_CNPJ_ORIGINATOR'
	   ,CE_DESTINY.[NAME] AS 'EC_NAME_DESTINY'
	   ,CE_DESTINY.CPF_CNPJ AS 'CPF_CNPJ_DESTINY'
	   ,AFFILIATOR.CPF_CNPJ AS 'CPF_AFF'
	   ,(SELECT
				EQUIPMENT.SERIAL
			FROM ASS_DEPTO_EQUIP
			INNER JOIN EQUIPMENT
				ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
			WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL)
		AS SERIAL
	   ,[TRANSACTION_DATA_EXT].[VALUE] AS 'EXTERNAL_NSU'
	   ,[TRANSACTION].CODE
	   ,[TRANSACTION].COD_TRAN
	   ,[COMPANY].COD_COMP
	   ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN AS REP_COD_TRAN
	   ,[TRANSACTION].COD_SITUATION
	   ,dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES.TAX_INITIAL +
		(CASE
			WHEN [TRANSACTION].COD_TTYPE = 2 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
				, 0)
			ELSE 0
		END)

		, [TRANSACTION_TITLES].AMOUNT) AS LIQUID_MDR_EC
	   ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS
		(
		COALESCE(TRANSACTION_TITLES.ANTICIP_PERCENT +
		(CASE
			WHEN [TRANSACTION].COD_TTYPE = 1 THEN ISNULL((SELECT
						TRANSACTION_SERVICES.TAX_PLANDZERO_EC
					FROM TRANSACTION_SERVICES
					INNER JOIN ITEMS_SERVICES_AVAILABLE
						ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = ITEMS_SERVICES_AVAILABLE.COD_ITEM_SERVICE
					WHERE ITEMS_SERVICES_AVAILABLE.NAME = 'PlanDZero'
					AND TRANSACTION_SERVICES.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
					AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION_TITLES].COD_EC)
				, 0)
			ELSE 0
		END), 0),
		[TRANSACTION_TITLES].PLOT,
		dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT, [TRANSACTION_TITLES].TAX_INITIAL),
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)
			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END)
		) AS ANTECIP_DISCOUNT_EC
	   ,CASE
			WHEN [TRANSACTION].PLOTS = 1 THEN dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE] + IIF([TRANSACTION].COD_TTYPE = 2, TRANSACTION_TITLES_COST.TAX_PLANDZERO, 0), TRANSACTION_TITLES.AMOUNT)
			ELSE dbo.FNC_CALC_LIQ_MDR(TRANSACTION_TITLES_COST.[PERCENTAGE], TRANSACTION_TITLES.AMOUNT)
		END AS LIQUID_MDR_AFF
	   ,dbo.FNC_CALC_LIQ_ANTICIP_DAYS
		(
		COALESCE(TRANSACTION_TITLES_COST.ANTICIP_PERCENT, 0) + IIF([TRANSACTION].COD_TTYPE = 1, TRANSACTION_TITLES_COST.TAX_PLANDZERO, 0),
		[TRANSACTION_TITLES].PLOT,
		dbo.FNC_CALC_LIQUID([TRANSACTION_TITLES].AMOUNT,
		[TRANSACTION_TITLES_COST].[PERCENTAGE]),
		(CASE
			WHEN TRANSACTION_TITLES.IS_SPOT = 1 THEN DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE)

			ELSE TRANSACTION_TITLES.QTY_DAYS_ANTECIP
		END)
		) AS ANTECIP_DISCOUNT_AFF
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM TRANSACTION_SERVICES WITH (NOLOCK)
					WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
					AND TRANSACTION_SERVICES.COD_ITEM_SERVICE = 4)
				> 0 THEN 1
			ELSE 0
		END AS SPLIT
	   ,EC_TRAN.COD_EC AS COD_EC_TRANS
	   ,EC_TRAN.NAME AS TRANS_EC_NAME
	   ,EC_TRAN.CPF_CNPJ AS TRANS_EC_CPF_CNPJ
	   ,[TRANSACTION_TITLES].[ASSIGNED]
	   ,[ASSIGN_FILE_TITLE].RETAINED_AMOUNT
	   ,[ASSIGN_FILE_TITLE].[ORIGINAL_DATE]
	   ,CAST([TRANSACTION_TITLES].CREATED_AT AS DATE) TRAN_TITTLE_DATE
	   ,CAST([TRANSACTION_TITLES].CREATED_AT AS TIME) TRAN_TITTLE_TIME
	   ,(SELECT TOP 1
				[NAME]
			FROM ACQUIRER(NOLOCK)
			JOIN ASSIGN_FILE_ACQUIRE(NOLOCK) fType
				ON fType.COD_AC = ACQUIRER.COD_AC
				AND fType.COD_ASSIGN_FILE_MODEL = assignModel.COD_ASSIGN_FILE_MODEL)
		[ASSIGNEE]
	   ,(SELECT
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_DATA_EXT.[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[TRANSACTION].CREDITOR_DOCUMENT
	   ,(SELECT
				TRANSACTION_DATA_EXT.[VALUE]
			FROM TRANSACTION_DATA_EXT WITH (NOLOCK)
			WHERE TRANSACTION_DATA_EXT.COD_TRAN = [TRANSACTION_TITLES].COD_TRAN
			AND TRANSACTION_DATA_EXT.[NAME] = 'COUNT')
		AS ORDER_CODE
	   ,TRANSACTION_TITLES.COD_SITUATION [COD_SITUATION_TITLE]
	   ,[EQUIPMENT_MODEL].CODIGO AS MODEL_POS
	   ,[SEGMENTS].[NAME] AS SEGMENT_EC
	   ,[State].UF AS STATE_EC
	   ,[CITY].[NAME] AS CITY_EC
	   ,[NEIGHBORHOOD].[NAME] AS NEIGHBORHOOD_EC
	   ,[ADDRESS_BRANCH].COD_ADDRESS
	   ,SOURCE_TRANSACTION.DESCRIPTION AS TYPE_TRAN
	   ,EC_PROD.[NAME] AS [EC_PROD]
	   ,EC_PROD.CPF_CNPJ AS [EC_PROD_CPF_CNPJ]
	   ,TRAN_PROD.[NAME] AS [NAME_PROD]
	   ,SPLIT_PROD.[PERCENTAGE] AS [PERCENT_PARTICIP_SPLIT]
	   ,[TRANSACTION_TITLES_COST].RATE_PLAN
	   ,[TRANSACTION_TITLES].QTY_DAYS_ANTECIP
	   ,IIF([TRANSACTION_TITLES].TAX_PLANDZERO IS NULL, 0, 1) AS IS_PLANDZERO
	   ,COALESCE([TRANSACTION_TITLES].TAX_PLANDZERO, 0) TAX_PLANDZERO
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = [TRANSACTION].COD_EC
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS TAX_PLANDZEROAFF
	   ,USER_REPRESENTANTE.IDENTIFICATION AS SALES_REPRESENTANTE
	   ,USER_REPRESENTANTE.CPF_CNPJ AS CPF_CNPJ_REPRESENTANTE
	   ,USER_REPRESENTANTE.EMAIL AS EMAIL_REPRESENTANTE
	FROM [TRANSACTION_TITLES] WITH (NOLOCK)
	INNER JOIN [TRANSACTION] WITH (NOLOCK)
		ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN
	LEFT JOIN [TRANSACTION_TITLES_COST] WITH (NOLOCK)
		ON [TRANSACTION_TITLES].COD_TITLE = TRANSACTION_TITLES_COST.COD_TITLE
	INNER JOIN [TRANSACTION_TYPE] WITH (NOLOCK)
		ON TRANSACTION_TYPE.COD_TTYPE = [TRANSACTION].COD_TTYPE
	LEFT JOIN AFFILIATOR WITH (NOLOCK)
		ON AFFILIATOR.COD_AFFILIATOR = [TRANSACTION].COD_AFFILIATOR
	INNER JOIN ASS_DEPTO_EQUIP WITH (NOLOCK)
		ON ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = [TRANSACTION].COD_ASS_DEPTO_TERMINAL
	INNER JOIN DEPARTMENTS_BRANCH WITH (NOLOCK)
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	INNER JOIN DEPARTMENTS WITH (NOLOCK)
		ON DEPARTMENTS.COD_DEPARTS = DEPARTMENTS_BRANCH.COD_DEPARTS
	INNER JOIN BRANCH_EC WITH (NOLOCK)
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	INNER JOIN COMMERCIAL_ESTABLISHMENT WITH (NOLOCK)
		ON COMMERCIAL_ESTABLISHMENT.COD_EC = BRANCH_EC.COD_EC
	INNER JOIN COMMERCIAL_ESTABLISHMENT CE_DESTINY WITH (NOLOCK)
		ON CE_DESTINY.COD_EC = TRANSACTION_TITLES.COD_EC
	INNER JOIN PRODUCTS_ACQUIRER WITH (NOLOCK)
		ON PRODUCTS_ACQUIRER.COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	INNER JOIN ACQUIRER WITH (NOLOCK)
		ON ACQUIRER.COD_AC = PRODUCTS_ACQUIRER.COD_AC
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].COD_TRAN = [TRANSACTION].COD_TRAN
	INNER JOIN [dbo].[PROCESS_BG_STATUS] WITH (NOLOCK)
		ON ([PROCESS_BG_STATUS].CODE = [TRANSACTION].COD_TRAN)
	LEFT JOIN COMPANY WITH (NOLOCK)
		ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP
	LEFT JOIN [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] WITH (NOLOCK)
		ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = [TRANSACTION].COD_TRAN)
	LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_TRAN WITH (NOLOCK)
		ON EC_TRAN.COD_EC = [TRANSACTION].COD_EC
	LEFT JOIN [ASSIGN_FILE_TITLE](NOLOCK)
		ON [ASSIGN_FILE_TITLE].COD_TITLE = [TRANSACTION_TITLES].COD_TITLE
		AND [ASSIGN_FILE_TITLE].ACTIVE = 1
	LEFT JOIN ASSIGN_FILE(NOLOCK)
		ON ASSIGN_FILE.COD_ASSIGN_FILE = [ASSIGN_FILE_TITLE].COD_ASSIGN_FILE
	LEFT JOIN ASSIGN_FILE_MODEL assignModel (NOLOCK)
		ON assignModel.COD_ASSIGN_FILE_MODEL = ASSIGN_FILE.COD_ASSIGN_FILE_MODEL
	INNER JOIN [EQUIPMENT] WITH (NOLOCK)
		ON [EQUIPMENT].COD_EQUIP = [ASS_DEPTO_EQUIP].COD_EQUIP
	INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].COD_MODEL = [EQUIPMENT].COD_MODEL
	INNER JOIN [SEGMENTS] WITH (NOLOCK)
		ON [SEGMENTS].COD_SEG = [COMMERCIAL_ESTABLISHMENT].COD_SEG
	INNER JOIN [ADDRESS_BRANCH] WITH (NOLOCK)
		ON [ADDRESS_BRANCH].COD_BRANCH = [BRANCH_EC].COD_BRANCH
		AND [ADDRESS_BRANCH].ACTIVE = 1
	INNER JOIN [NEIGHBORHOOD] WITH (NOLOCK)
		ON [NEIGHBORHOOD].COD_NEIGH = [ADDRESS_BRANCH].COD_NEIGH
	INNER JOIN [CITY] WITH (NOLOCK)
		ON [CITY].COD_CITY = [NEIGHBORHOOD].COD_CITY
	INNER JOIN [State] WITH (NOLOCK)
		ON [State].COD_STATE = [CITY].COD_STATE
	INNER JOIN SOURCE_TRANSACTION WITH (NOLOCK)
		ON SOURCE_TRANSACTION.COD_SOURCE_TRAN = [TRANSACTION].COD_SOURCE_TRAN
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
		AND [TRAN_PROD].ACTIVE = 1
	LEFT JOIN SPLIT_PRODUCTS SPLIT_PROD WITH (NOLOCK)
		ON SPLIT_PROD.COD_SPLIT_PROD = TRANSACTION_TITLES.COD_SPLIT_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT EC_PROD WITH (NOLOCK)
		ON EC_PROD.COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN SALES_REPRESENTATIVE
		ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
	LEFT JOIN USERS USER_REPRESENTANTE
		ON USER_REPRESENTANTE.COD_USER = SALES_REPRESENTATIVE.COD_USER
	WHERE
	--[TRANSACTION].COD_SITUATION IN (3, 6, 10)                              
	[TRANSACTION].COD_SITUATION = 3
	AND [TRANSACTION_TITLES].COD_SITUATION != 26
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND PROCESS_BG_STATUS.STATUS_PROCESSED = 0
	AND PROCESS_BG_STATUS.COD_SOURCE_PROCESS = 3
	--AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].CREATED_AT        
	--AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION_TITLES].CREATED_AT        
	--AND DATEPART(YEAR, [TRANSACTION].CREATED_AT) = DATEPART(YEAR, GETDATE())        
	AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN IS NULL)
SELECT
	AFFILIATOR
   ,MERSHANT
   ,SERIAL
   ,CAST(TRANSACTION_DATE AS DATE) AS TRANSACTION_DATE
   ,CAST(TRANSACTION_DATE AS TIME) AS TRANSACTION_TIME
   ,NSU
   ,EXTERNAL_NSU
   ,TRAN_TYPE
   ,TRANSACTION_AMOUNT
   ,TOTAL_PLOTS AS QUOTA_TOTAL
   ,AMOUNT AS 'QUOTA_AMOUNT'
   ,PLOT AS QUOTA
   ,ACQUIRER
   ,ACQ_TAX AS 'MDR_ACQ'
   ,BRAND
   ,CTE.TAX_INITIAL AS 'MDR_EC'
   ,ANTECIP_EC AS 'ANTICIP_EC'
   ,MDR_AFF AS 'MDR_AFF'
   ,ANTECIP_AFF AS 'ANTICIP_AFF'
   ,LIQUID_SUB AS 'TO_RECEIVE_ACQ'
   ,CAST(PREVISION_RECEIVE_DATE AS DATE) AS 'PREDICTION_RECEIVE_DATE'
   ,(LIQUID_SUB - AFF_DISCOUNT) AS 'NET_WITHOUT_FEE_SUB'
   ,RATE_PLAN AS 'FEE_AFFILIATOR'
   ,(LIQUID_SUB - AFF_DISCOUNT_TARIFF) AS 'NET_SUB'
   ,AFF AS 'NET_WITHOUT_FEE_AFF'
   ,AFF_TARIFF AS 'NET_AFF'
   ,EC AS 'MERCHANT_WITHOUT_FEE'
   ,CTE.RATE AS 'FEE_MERCHANT'
   ,EC_TARIFF AS 'MERCHANT_NET'
   ,CAST(PREVISION_PAY_DATE AS DATE) AS 'PREDICTION_PAY_DATE'
   ,CASE
		WHEN TRAN_TYPE = 'CREDITO' AND
			(CAST(PREVISION_RECEIVE_DATE AS DATE) != CAST(PREVISION_PAY_DATE AS DATE)) THEN 1
		ELSE 0
	END AS ANTECIPATED
   ,COD_EC
   ,CTE.COD_AFFILIATOR
   ,COD_BRANCH
   ,CTE.COD_DEPTO_BRANCH
   ,PAN
   ,CPF_CNPJ_ORIGINATOR
   ,EC_NAME_DESTINY
   ,CPF_CNPJ_DESTINY
   ,CPF_AFF
   ,CTE.CODE
   ,CTE.COD_TRAN
   ,CTE.COD_COMP
   ,CTE.REP_COD_TRAN
   ,CTE.COD_SITUATION
   ,CTE.LIQUID_MDR_EC
   ,CTE.ANTECIP_DISCOUNT_EC
   ,CTE.LIQUID_MDR_AFF
   ,CTE.ANTECIP_DISCOUNT_AFF
   ,CTE.SPLIT
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.[ASSIGNED]
   ,CTE.RETAINED_AMOUNT
   ,CTE.[ORIGINAL_DATE]
   ,CTE.[ASSIGNEE]
   ,CTE.TRAN_TITTLE_DATE
   ,CTE.TRAN_TITTLE_TIME
   ,CTE.AUTH_CODE
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.ORDER_CODE
   ,CTE.COD_TITLE
   ,CTE.[COD_SITUATION_TITLE]
   ,CTE.MODEL_POS
   ,CTE.SEGMENT_EC
   ,CTE.STATE_EC
   ,CTE.CITY_EC
   ,CTE.NEIGHBORHOOD_EC
   ,CTE.COD_ADDRESS
   ,CTE.TYPE_TRAN
   ,CTE.NAME_PROD
   ,CTE.EC_PROD
   ,CTE.EC_PROD_CPF_CNPJ
   ,CTE.PERCENT_PARTICIP_SPLIT
   ,CTE.QTY_DAYS_ANTECIP
   ,CTE.IS_PLANDZERO
   ,CTE.TAX_PLANDZERO
   ,CTE.EC_TARIFF
   ,CTE.AFF_TARIFF
   ,AFF
   ,CTE.TAX_PLANDZEROAFF
   ,CTE.SALES_REPRESENTANTE
   ,CTE.CPF_CNPJ_REPRESENTANTE
   ,CTE.EMAIL_REPRESENTANTE
FROM CTE 



GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE object_id = OBJECT_ID('REPORT_CONSOLIDATED_TRANS_SUB')
		AND NAME = 'IS_PLANDZERO')
BEGIN
	ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
	ADD IS_PLANDZERO INT NOT NULL DEFAULT (0);
END


IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE object_id = OBJECT_ID('REPORT_CONSOLIDATED_TRANS_SUB')
		AND NAME = 'TAX_PLANDZERO')
BEGIN
	ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
	ADD TAX_PLANDZERO DECIMAL(22, 6) NOT NULL DEFAULT (0);
END

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE object_id = OBJECT_ID('REPORT_CONSOLIDATED_TRANS_SUB')
		AND NAME = 'TAX_PLANDZERO_AFF')
BEGIN
	ALTER TABLE REPORT_CONSOLIDATED_TRANS_SUB
	ADD TAX_PLANDZERO_AFF DECIMAL(22, 6) NOT NULL DEFAULT (0);
END

GO

IF OBJECT_ID('SP_REG_REPORT_CONSOLIDATED_TRANS_SUB') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REG_REPORT_CONSOLIDATED_TRANS_SUB
END
GO
CREATE PROCEDURE [dbo].[SP_REG_REPORT_CONSOLIDATED_TRANS_SUB] WITH RECOMPILE
/*----------------------------------------------------------------------------------------                            
    Project.......: TKPP                            
------------------------------------------------------------------------------------------                            
    Author                          VERSION        Date             Description                            
------------------------------------------------------------------------------------------                            
    Fernando Henrique F. de O       V1              28/12/2018      Creation                          
    Fernando Henrique F. de O       V2              07/02/2019      Changed                      
    Luiz Aquino                     V3              22/02/2019      Remove Incomplete Installments                         
    Lucas Aguiar                    V4              22-04-2019      add originador e destino                     
    Caike Ucha                     V5              16/08/2019      add columns AUTH_CODE e CREDITOR_DOCUMENT                 
    Caike Ucha                     V6              11/09/2019      add column ORDER_CODE                  
    Marcus Gall                     V7              27/11/2019      Add Model_POS, Segment, Location_EC          
    Ana Paula Liick                 V8              31/01/2020      Add Origem_Trans        
    Caike Ucha                     V9              30/04/2020      add produto ec    
    Luiz Aquino                     V10             02/07/2020      PlanDZero (ET-895)    
------------------------------------------------------------------------------------------*/
AS
	DECLARE @COUNT INT = 0;
	BEGIN

		---------------------------------------------                          
		--------------RECORDS INSERT-----------------                          
		---------------------------------------------                            
		SELECT
			--TOP (1000)              
			[VW_REPORT_FULL_CASH_FLOW].COD_TRAN
		   ,[VW_REPORT_FULL_CASH_FLOW].AFFILIATOR
		   ,[VW_REPORT_FULL_CASH_FLOW].MERSHANT
		   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_DATE
		   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_TIME
		   ,[VW_REPORT_FULL_CASH_FLOW].NSU
		   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_TOTAL
		   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TYPE
		   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA
		   ,[VW_REPORT_FULL_CASH_FLOW].QUOTA_AMOUNT AMOUNT
		   ,[VW_REPORT_FULL_CASH_FLOW].TRANSACTION_AMOUNT
		   ,[VW_REPORT_FULL_CASH_FLOW].ACQUIRER
		   ,[VW_REPORT_FULL_CASH_FLOW].MDR_ACQ
		   ,[VW_REPORT_FULL_CASH_FLOW].BRAND
		   ,[VW_REPORT_FULL_CASH_FLOW].MDR_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].ANTICIP_AFF
		   ,[VW_REPORT_FULL_CASH_FLOW].MDR_AFF
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_RATE
		   ,[VW_REPORT_FULL_CASH_FLOW].ANTECIPATED
		   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_PAY_DATE
		   ,[VW_REPORT_FULL_CASH_FLOW].TO_RECEIVE_ACQ
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_AFF
			--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_EC                                     
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF AS NET_WITHOUT_FEE_AFF_RATE
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB AS NET_SUB_ACQ
		   ,[VW_REPORT_FULL_CASH_FLOW].PREDICTION_RECEIVE_DATE
		   ,[VW_REPORT_FULL_CASH_FLOW].FEE_MERCHANT AS RATE
		   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_AFF, 0) AS ANTECIP_DISCOUNT_AFF
		   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].ANTECIP_DISCOUNT_EC, 0) AS ANTECIP_DISCOUNT_EC
			--,COALESCE([VW_REPORT_FULL_CASH_FLOW].MDR_CURRENT_ACQ, 0) AS MDR_CURRENT_ACQ                                
		   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_AFF, 0) AS LIQUID_MDR_AFF
			--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_AFF, 0) AS RATE_CURRENT_AFF                           
			--,COALESCE([VW_REPORT_FULL_CASH_FLOW].RATE_CURRENT_EC, 0) AS RATE_CURRENT_EC                            
		   ,COALESCE([VW_REPORT_FULL_CASH_FLOW].LIQUID_MDR_EC, 0) AS LIQUID_MDR_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_WITHOUT_FEE
		   ,[VW_REPORT_FULL_CASH_FLOW].FEE_AFFILIATOR
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_SUB
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_SUB
		   ,[VW_REPORT_FULL_CASH_FLOW].NET_WITHOUT_FEE_AFF
		   ,[VW_REPORT_FULL_CASH_FLOW].MERCHANT_NET
		   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_ORIGINATOR AS 'CPF_EC'
		   ,[VW_REPORT_FULL_CASH_FLOW].EC_NAME_DESTINY AS 'ECNAME_DESTINY'
		   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_DESTINY AS 'DESTINY'
		   ,[VW_REPORT_FULL_CASH_FLOW].CPF_AFF AS CPF_AFF
		   ,[VW_REPORT_FULL_CASH_FLOW].SERIAL
		   ,[VW_REPORT_FULL_CASH_FLOW].EXTERNAL_NSU
		   ,[VW_REPORT_FULL_CASH_FLOW].PAN
		   ,[VW_REPORT_FULL_CASH_FLOW].CODE
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_COMP
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_BRANCH
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_DEPTO_BRANCH
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_AFFILIATOR
		   ,[VW_REPORT_FULL_CASH_FLOW].SPLIT
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_EC_TRANS
		   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_NAME
		   ,[VW_REPORT_FULL_CASH_FLOW].TRANS_EC_CPF_CNPJ
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION
		   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNED]
		   ,[VW_REPORT_FULL_CASH_FLOW].[RETAINED_AMOUNT]
		   ,[VW_REPORT_FULL_CASH_FLOW].[ORIGINAL_DATE]
		   ,[VW_REPORT_FULL_CASH_FLOW].[ASSIGNEE]
		   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_TIME
		   ,[VW_REPORT_FULL_CASH_FLOW].TRAN_TITTLE_DATE
		   ,[VW_REPORT_FULL_CASH_FLOW].AUTH_CODE
		   ,[VW_REPORT_FULL_CASH_FLOW].CREDITOR_DOCUMENT
		   ,[VW_REPORT_FULL_CASH_FLOW].ORDER_CODE
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_TITLE
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_SITUATION_TITLE
		   ,[VW_REPORT_FULL_CASH_FLOW].MODEL_POS
		   ,[VW_REPORT_FULL_CASH_FLOW].SEGMENT_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].STATE_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].CITY_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].NEIGHBORHOOD_EC
		   ,[VW_REPORT_FULL_CASH_FLOW].COD_ADDRESS
		   ,[VW_REPORT_FULL_CASH_FLOW].TYPE_TRAN
		   ,[VW_REPORT_FULL_CASH_FLOW].NAME_PROD
		   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD
		   ,[VW_REPORT_FULL_CASH_FLOW].EC_PROD_CPF_CNPJ
		   ,[VW_REPORT_FULL_CASH_FLOW].PERCENT_PARTICIP_SPLIT
		   ,[VW_REPORT_FULL_CASH_FLOW].IS_PLANDZERO
		   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZERO
		   ,[VW_REPORT_FULL_CASH_FLOW].TAX_PLANDZEROAFF
		   ,dbo.VW_REPORT_FULL_CASH_FLOW.QTY_DAYS_ANTECIP
		   ,[VW_REPORT_FULL_CASH_FLOW].SALES_REPRESENTANTE
		   ,[VW_REPORT_FULL_CASH_FLOW].CPF_CNPJ_REPRESENTANTE
		   ,[VW_REPORT_FULL_CASH_FLOW].EMAIL_REPRESENTANTE INTO #TB_REPORT_FULL_CASH_FLOW_INSERT
		FROM [dbo].[VW_REPORT_FULL_CASH_FLOW]
		ORDER BY COD_TRAN, QUOTA
		OFFSET 0 ROWS FETCH FIRST 200 ROWS ONLY;

		WITH TRANINFO
		AS
		(SELECT
				COUNT(COD_TRAN) AVAILABLE_INSTALLMENTS
			   ,COD_TRAN
			   ,QUOTA_TOTAL
			FROM #TB_REPORT_FULL_CASH_FLOW_INSERT installments
			GROUP BY COD_TRAN
					,QUOTA_TOTAL)
		DELETE INSTALLMENT
			FROM #TB_REPORT_FULL_CASH_FLOW_INSERT INSTALLMENT
			JOIN TRANINFO
				ON TRANINFO.COD_TRAN = INSTALLMENT.COD_TRAN
		WHERE TRANINFO.QUOTA_TOTAL > TRANINFO.AVAILABLE_INSTALLMENTS

		SELECT
			@COUNT = COUNT(*)
		FROM #TB_REPORT_FULL_CASH_FLOW_INSERT;

		IF @COUNT > 0
		BEGIN
			INSERT INTO [dbo].[REPORT_CONSOLIDATED_TRANS_SUB] ([COD_TRAN],
			[AFFILIATOR],
			[COMMERCIALESTABLISHMENT],
			[TRANSACTION_DATE],
			[TRANSACTION_TIME],
			[NSU],
			[QUOTA_TOTAL],
			[TRANSACTION_TYPE],
			[PLOT],
			[AMOUNT],
			[TRANSACTION_AMOUNT],
			[ACQUIRER],
			[MDR_ACQUIRER],
			[BRAND],
			[MDR_EC],
			[ANTECIP_PERCENT],
			[ANTECIP_AFFILIATOR],
			[MDR_AFFILIATOR],
			[LIQUID_VALUE_SUB],
			[ANTECIPATED],
			[PREVISION_PAY_DATE],
			[TO_RECEIVE_ACQ],
			[LIQUID_VALUE_AFFILIATOR],
			[LIQUID_AFF_RATE],
			[LIQUID_SUB_RATE],
			[PREVISION_RECEIVE_DATE],
			[RATE],
			[ANTECIP_CURRENT_AFF],
			[ANTECIP_CURRENT_EC],
			[MDR_CURRENT_AFF],
			[MDR_CURRENT_EC],
			[LIQUID_VALUE_EC],
			[FEE_AFFILIATOR],
			[NET_SUB_AQUIRER],
			[NET_WITHOUT_FEE_SUB],
			[NET_WITHOUT_FEE_AFF], [MERCHANT_NET],
			[CPF_EC],
			[DESTINY],
			[CPF_AFF],
			[SERIAL],
			[EXTERNALNSU],
			[PAN],
			[CODE],
			[COD_COMP],
			[COD_EC],
			[COD_BRANCH],
			[COD_DEPTO_BRANCH],
			[COD_AFFILIATOR],
			[COD_SITUATION],
			[SPLIT],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ]
			, [ASSIGNED]
			, [RETAINED_AMOUNT]
			, [ORIGINAL_DATE]
			, [ASSIGNEE]
			, [MODIFY_DATE]
			, EC_NAME_DESTINY
			, TRANSACTION_TITTLE_DATE
			, TRANSACTION_TITTLE_TIME
			, AUTH_CODE
			, CREDITOR_DOCUMENT
			, ORDER_CODE
			, COD_TITLE
			, COD_SITUATION_TITLE
			, MODEL_POS
			, SEGMENT_EC
			, STATE_EC
			, CITY_EC
			, NEIGHBORHOOD_EC
			, COD_ADDRESS
			, TYPE_TRAN
			, NAME_PROD
			, EC_PROD
			, EC_PROD_CPF_CNPJ
			, PERCENT_PARTICIP_SPLIT
			, IS_PLANDZERO
			, TAX_PLANDZERO
			, QTY_DAYS_ANTECIP
			, TAX_PLANDZERO_AFF
			, SALES_REPRESENTANTE
			, CPF_CNPJ_REPRESENTANTE
			, EMAIL_REPRESENTANTE)
				(SELECT
					TEMP.[COD_TRAN]
				   ,TEMP.[AFFILIATOR]
				   ,TEMP.[MERSHANT]
				   ,TEMP.[TRANSACTION_DATE]
				   ,TEMP.[TRANSACTION_TIME]
				   ,TEMP.[NSU]
				   ,TEMP.[QUOTA_TOTAL]
				   ,TEMP.[TRAN_TYPE]
				   ,TEMP.[QUOTA]
				   ,TEMP.[AMOUNT]
				   ,TEMP.[TRANSACTION_AMOUNT]
				   ,TEMP.[ACQUIRER]
				   ,TEMP.[MDR_ACQ]
				   ,TEMP.[BRAND]
				   ,TEMP.[MDR_EC]
				   ,TEMP.[ANTICIP_EC]
				   ,TEMP.[ANTICIP_AFF]
				   ,TEMP.[MDR_AFF]
				   ,TEMP.[NET_SUB_RATE]
				   ,TEMP.[ANTECIPATED]
				   ,TEMP.[PREDICTION_PAY_DATE]
				   ,TEMP.[TO_RECEIVE_ACQ]
				   ,TEMP.[NET_AFF]
				   ,TEMP.[NET_WITHOUT_FEE_AFF_RATE]
				   ,TEMP.[NET_SUB_ACQ]
				   ,TEMP.[PREDICTION_RECEIVE_DATE]
				   ,TEMP.[RATE]
				   ,TEMP.[ANTECIP_DISCOUNT_AFF]
				   ,TEMP.[ANTECIP_DISCOUNT_EC]
				   ,TEMP.[LIQUID_MDR_AFF]
				   ,TEMP.[LIQUID_MDR_EC]
				   ,TEMP.[MERCHANT_WITHOUT_FEE]
				   ,TEMP.[FEE_AFFILIATOR]
				   ,TEMP.[NET_SUB]
				   ,TEMP.[NET_WITHOUT_FEE_SUB]
				   ,TEMP.[NET_WITHOUT_FEE_AFF]
				   ,TEMP.[MERCHANT_NET]
				   ,TEMP.[CPF_AFF]
				   ,TEMP.[DESTINY]
				   ,TEMP.[CPF_EC]
				   ,TEMP.[SERIAL]
				   ,TEMP.[EXTERNAL_NSU]
				   ,TEMP.[PAN]
				   ,TEMP.[CODE]
				   ,TEMP.[COD_COMP]
				   ,TEMP.[COD_EC]
				   ,TEMP.[COD_BRANCH]
				   ,TEMP.[COD_DEPTO_BRANCH]
				   ,TEMP.[COD_AFFILIATOR]
				   ,TEMP.[COD_SITUATION]
				   ,TEMP.[SPLIT]
				   ,TEMP.[COD_EC_TRANS]
				   ,TEMP.[TRANS_EC_NAME]
				   ,TEMP.[TRANS_EC_CPF_CNPJ]
				   ,TEMP.[ASSIGNED]
				   ,TEMP.[RETAINED_AMOUNT]
				   ,TEMP.[ORIGINAL_DATE]
				   ,TEMP.[ASSIGNEE]
				   ,GETDATE()
				   ,TEMP.ECNAME_DESTINY
				   ,TRAN_TITTLE_DATE
				   ,TRAN_TITTLE_TIME
				   ,TEMP.AUTH_CODE
				   ,TEMP.CREDITOR_DOCUMENT
				   ,TEMP.ORDER_CODE
				   ,TEMP.COD_TITLE
				   ,TEMP.COD_SITUATION_TITLE
				   ,TEMP.MODEL_POS
				   ,TEMP.SEGMENT_EC
				   ,TEMP.STATE_EC
				   ,TEMP.CITY_EC
				   ,TEMP.NEIGHBORHOOD_EC
				   ,TEMP.COD_ADDRESS
				   ,TEMP.TYPE_TRAN
				   ,TEMP.NAME_PROD
				   ,TEMP.EC_PROD
				   ,TEMP.EC_PROD_CPF_CNPJ
				   ,TEMP.PERCENT_PARTICIP_SPLIT
				   ,TEMP.IS_PLANDZERO
				   ,TEMP.TAX_PLANDZERO
				   ,TEMP.QTY_DAYS_ANTECIP
				   ,TEMP.TAX_PLANDZEROAFF
				   ,TEMP.SALES_REPRESENTANTE
				   ,TEMP.CPF_CNPJ_REPRESENTANTE
				   ,TEMP.EMAIL_REPRESENTANTE
				FROM #TB_REPORT_FULL_CASH_FLOW_INSERT TEMP
				)

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_CONSOLIDATED_TRANS_SUB] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET STATUS_PROCESSED = 1
			   ,MODIFY_DATE = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN #TB_REPORT_FULL_CASH_FLOW_INSERT
				ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_INSERT.COD_TRAN)
			WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;

		---------------------------------------------                            
		--------------RECORDS UPDATE-----------------                            
		---------------------------------------------                              
		SELECT
			[VW_REPORT_FULL_CASH_FLOW_UP].COD_TRAN
		   ,[VW_REPORT_FULL_CASH_FLOW_UP].COD_SITUATION INTO #TB_REPORT_FULL_CASH_FLOW_UPDATE
		FROM [dbo].[VW_REPORT_FULL_CASH_FLOW_UP]


		SELECT
			@COUNT = COUNT(*)
		FROM #TB_REPORT_FULL_CASH_FLOW_UPDATE;

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]
			SET [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_SITUATION
			   ,[REPORT_CONSOLIDATED_TRANS_SUB].MODIFY_DATE = GETDATE()
			FROM [REPORT_CONSOLIDATED_TRANS_SUB]
			INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE
				ON ([REPORT_CONSOLIDATED_TRANS_SUB].COD_TRAN = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_CONSOLIDATED_TRANS_SUB]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET STATUS_PROCESSED = 1
			   ,MODIFY_DATE = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN #TB_REPORT_FULL_CASH_FLOW_UPDATE
				ON (PROCESS_BG_STATUS.CODE = #TB_REPORT_FULL_CASH_FLOW_UPDATE.COD_TRAN)
			WHERE [PROCESS_BG_STATUS].COD_SOURCE_PROCESS = 3;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;
	END;
GO

IF OBJECT_ID('SP_REPORT_CONSOLIDATED_TRANSACTION_SUB') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_REPORT_CONSOLIDATED_TRANSACTION_SUB
END
GO
CREATE PROCEDURE [dbo].[SP_REPORT_CONSOLIDATED_TRANSACTION_SUB]

/**************************************************************************************************************            
    Project.......: TKPP                                
 ------------------------------------------------------------------------------------------                                
     Author                          VERSION        Date                            Description                                
 ------------------------------------------------------------------------------------------                                
    Fernando Henrique F. de O       V1         28/12/2018                          Creation                              
    Fernando Henrique F. de O       V2         07/02/2019                          Changed                                  
    Elir Ribeiro                    V3         29/07/2019                          Changed date                        
    Caike Ucha Almeida             V4         16/08/2019                        Inserting columns                       
    Caike Ucha Almeida             V5         11/09/2019                        Inserting column                      
    Marcus Gall                     V6         27/11/2019               Add Model_POS, Segment, Location_EC              
    Ana Paula Liick                 V8         31/01/2020                       Add Origem_Trans              
    Caike Ucha                     V9         30/04/2020                       add produto ec          
    Luiz Aquino                     V10        02/07/2020                   PlanoDZero (ET-895)        
**************************************************************************************************************/ (@CODCOMP VARCHAR(10),
@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@EC VARCHAR(10),
@BRANCH VARCHAR(10),
@DEPART VARCHAR(10),
@TERMINAL VARCHAR(100),
@STATE VARCHAR(100),
@CITY VARCHAR(100),
@TYPE_TRAN VARCHAR(10),
@SITUATION VARCHAR(10),
@NSU VARCHAR(100) = NULL,
@NSU_EXT VARCHAR(100) = NULL,
@BRAND VARCHAR(50) = NULL,
@PAN VARCHAR(50) = NULL,
@CODAFF INT = NULL,
@SPLIT INT = NULL,
@CODACQUIRER INT = NULL,
@ISPlanDZero INT = NULL)
AS
BEGIN

	DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';

	DECLARE @AWAITINGSPLIT INT = NULL;
	SET NOCOUNT ON;
	SET ARITHABORT ON;

	SELECT TOP 1
		@AWAITINGSPLIT = [COD_SITUATION]
	FROM [SITUATION]
	WHERE [NAME] = 'WAITING FOR SPLIT OF FINANCE SCHEDULE';

	SET @QUERY_BASIS = 'SELECT                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].AFFILIATOR AS AFFILIATOR,                   
        [REPORT_CONSOLIDATED_TRANS_SUB].COMMERCIALESTABLISHMENT AS MERCHANT,                                        
        [REPORT_CONSOLIDATED_TRANS_SUB].SERIAL  AS SERIAL,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE  AS TRANSACTION_DATE,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TIME  AS TRANSACTION_TIME,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].NSU  AS NSU ,                
        [REPORT_CONSOLIDATED_TRANS_SUB].EXTERNALNSU  AS EXTERNAL_NSU,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TYPE  AS TRAN_TYPE,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_AMOUNT  AS TRANSACTION_AMOUNT,                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].QUOTA_TOTAL  AS QUOTA_TOTAL,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].AMOUNT  AS  AMOUNT,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].PLOT  AS QUOTA,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].ACQUIRER  AS ACQUIRER,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_ACQUIRER  AS MDR_ACQ,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].BRAND  AS BRAND,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_EC  AS MDR_EC,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_PERCENT  AS ANTICIP_EC,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_AFFILIATOR  AS MDR_AFF,                 
      [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_AFFILIATOR  AS ANTICIP_AFF,                
        [REPORT_CONSOLIDATED_TRANS_SUB].TO_RECEIVE_ACQ  AS TO_RECEIVE_ACQ,                          
        [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_RECEIVE_DATE  AS PREDICTION_RECEIVE_DATE,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_SUB  AS NET_WITHOUT_FEE_SUB,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].FEE_AFFILIATOR  AS FEE_AFFILIATOR,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_SUB_AQUIRER  AS NET_SUB,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].NET_WITHOUT_FEE_AFF  AS NET_WITHOUT_FEE_AFF,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_AFFILIATOR  AS NET_AFF,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].LIQUID_VALUE_EC  AS MERCHANT_WITHOUT_FEE,                
        [REPORT_CONSOLIDATED_TRANS_SUB].MERCHANT_NET  AS MERCHANT_NET,                 
        IIF([REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED] = 1, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ,[REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE )  AS PREDICTION_PAY_DATE,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIPATED  AS ANTECIPATED,                              
        [REPORT_CONSOLIDATED_TRANS_SUB].RATE,                              
        --[REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_ACQ  AS MDR_CURRENT_ACQ,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_EC  AS MDR_CURRENT_EC,                
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_EC  AS ANTICIP_CURRENT_EC,                                      
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_EC  AS RATE_CURRENT_EC,                                    
        [REPORT_CONSOLIDATED_TRANS_SUB].MDR_CURRENT_AFF  AS MDR_CURRENT_AFF,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].ANTECIP_CURRENT_AFF  AS ANTICIP_CURRENT_AFF,                                 
        --[REPORT_CONSOLIDATED_TRANS_SUB].RATE_CURRENT_AFF  AS RATE_CURRENT_AFF,                
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_EC  AS CPF_AFF,                            
        [REPORT_CONSOLIDATED_TRANS_SUB].DESTINY  AS DESTINY,                 
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_AFFILIATOR  AS COD_AFFILIATOR,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_BRANCH  AS COD_BRANCH,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].COD_DEPTO_BRANCH  AS COD_DEPTO_BRANCH,                                      
        [REPORT_CONSOLIDATED_TRANS_SUB].PAN  AS PAN,                                  
        [REPORT_CONSOLIDATED_TRANS_SUB].CPF_AFF AS ORIGINATOR,                              
        [REPORT_CONSOLIDATED_TRANS_SUB].CODE  AS CODE,                                 
        [REPORT_CONSOLIDATED_TRANS_SUB].SPLIT,                            
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_NAME,                            
        [REPORT_CONSOLIDATED_TRANS_SUB].TRANS_EC_CPF_CNPJ                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED]                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[RETAINED_AMOUNT]                               
        --, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE]                
        ,IIF( [REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNED] = 1, [REPORT_CONSOLIDATED_TRANS_SUB].PREVISION_PAY_DATE, [REPORT_CONSOLIDATED_TRANS_SUB].[ORIGINAL_DATE] ) [ORIGINAL_DATE]            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].[ASSIGNEE]                            
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_NAME_DESTINY                          
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_DATE                          
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_TITTLE_TIME                       
        ,[REPORT_CONSOLIDATED_TRANS_SUB].AUTH_CODE                      
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CREDITOR_DOCUMENT                      
       ,[REPORT_CONSOLIDATED_TRANS_SUB].ORDER_CODE                    
        ,CASE WHEN [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION_TITLE = @AwaitingSplit THEN 1 ELSE 0 END [AWAITINGSPLIT]                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].MODEL_POS                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].SEGMENT_EC                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].STATE_EC                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].CITY_EC                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NEIGHBORHOOD_EC                
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].COD_ADDRESS              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TYPE_TRAN              
        ,[REPORT_CONSOLIDATED_TRANS_SUB].NAME_PROD          
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD          
        ,[REPORT_CONSOLIDATED_TRANS_SUB].EC_PROD_CPF_CNPJ          
        ,ISNULL([REPORT_CONSOLIDATED_TRANS_SUB].PERCENT_PARTICIP_SPLIT,0) PERCENT_PARTICIP_SPLIT         
        ,[REPORT_CONSOLIDATED_TRANS_SUB].IS_PLANDZERO        
        ,[REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO          
  ,[REPORT_CONSOLIDATED_TRANS_SUB].QTY_DAYS_ANTECIP        
  ,isnull([REPORT_CONSOLIDATED_TRANS_SUB].TAX_PLANDZERO_AFF, 0) TAX_PLANDZERO_AFF      
  ,[REPORT_CONSOLIDATED_TRANS_SUB].SALES_REPRESENTANTE    
  ,[REPORT_CONSOLIDATED_TRANS_SUB].CPF_CNPJ_REPRESENTANTE    
  ,[REPORT_CONSOLIDATED_TRANS_SUB].EMAIL_REPRESENTANTE    
  FROM [REPORT_CONSOLIDATED_TRANS_SUB]                                       
   WHERE REPORT_CONSOLIDATED_TRANS_SUB.COD_COMP = @CODCOMP                                                            
   AND [REPORT_CONSOLIDATED_TRANS_SUB].COD_SITUATION = 3                                
';

	IF @INITIAL_DATE IS NOT NULL
		AND @FINAL_DATE IS NOT NULL
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,
		' AND [REPORT_CONSOLIDATED_TRANS_SUB].TRANSACTION_DATE BETWEEN @INITIAL_DATE AND @FINAL_DATE  ');

	IF @EC IS NOT NULL
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_EC = @EC ');
	IF @BRANCH IS NOT NULL
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, '  AND COD_BRANCH =  @BRANCH ');
	IF @DEPART IS NOT NULL
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_DEPTO_BRANCH =  @DEPART ');
	IF (@CODAFF IS NOT NULL)
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND COD_AFFILIATOR = @CodAff ');
	IF LEN(@BRAND) > 0
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND BRAND = @BRAND ');
	IF LEN(@NSU) > 0
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CODE = @NSU ');
	IF @PAN IS NOT NULL
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND PAN = @PAN ');
	IF (@SPLIT = 1)
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SPLIT = 1');

	IF (@ISPlanDZero = 1)
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND IS_PLANDZERO = 1');

	IF @CODACQUIRER IS NOT NULL
		SET @QUERY_BASIS =
		CONCAT(@QUERY_BASIS, ' AND ACQUIRER = (SELECT [NAME] FROM ACQUIRER WHERE COD_AC = @CODACQUIRER ) ');

	EXEC [sp_executesql] @QUERY_BASIS
						,N'                               
           @CODCOMP VARCHAR(10),                       
           @INITIAL_DATE DATE,                       
           @FINAL_DATE DATE,                      
           @EC int,                       
           @BRANCH int,                       
           @DEPART int,                     
           @TERMINAL varchar(100),                       
           @STATE varchar(25),                       
           @CITY varchar(40),                       
           @TYPE_TRAN int,                       
           @SITUATION int,                       
           @NSU varchar(100),                       
           @NSU_EXT varchar(100),                                    
		   @BRAND varchar(50) ,                     
           @PAN VARCHAR(50),                       
           @CodAff INT,                  
           @CODACQUIRER INT,                
           @AwaitingSplit INT = NULL        
           '
						,@CODCOMP = @CODCOMP
						,@INITIAL_DATE = @INITIAL_DATE
						,@FINAL_DATE = @FINAL_DATE
						,@EC = @EC
						,@BRANCH = @BRANCH
						,@DEPART = @DEPART
						,@TERMINAL = @TERMINAL
						,@STATE = @STATE
						,@CITY = @CITY
						,@TYPE_TRAN = @TYPE_TRAN
						,@SITUATION = @SITUATION
						,@NSU = @NSU
						,@NSU_EXT = @NSU_EXT
						,@BRAND = @BRAND
						,@PAN = @PAN
						,@CODAFF = @CODAFF
						,@CODACQUIRER = @CODACQUIRER
						,@AWAITINGSPLIT = @AWAITINGSPLIT;

END;
GO
IF OBJECT_ID('SP_FIN_CALENDAR_TITLES_PRC') IS NOT NULL
BEGIN
	DROP PROCEDURE SP_FIN_CALENDAR_TITLES_PRC
END
GO
CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_TITLES_PRC] (@COD_BK_EC INT, @DATE DATE, @COD_SITUATION INT = NULL)
AS
BEGIN
	DECLARE @DateFilter DATETIME = DATEADD(SECOND, 59, DATEADD(MINUTE, 59, DATEADD(HOUR, 23, CAST(@DATE AS DATETIME))))
	SET @COD_SITUATION = COALESCE(@COD_SITUATION, 4)

	SELECT
		[T].[CODE]
	   ,CONCAT(CONCAT([TT].[PLOT], '/'), [T].[PLOTS]) AS [PLOT]
	   ,[DBO].[FN_FUS_UTF]([T].[CREATED_AT]) AS [TRANSACTION_DATE]
	   ,[T].[AMOUNT] AS [TRANSACTION_AMOUNT]
	   ,[F].[COD_EC]
	   ,[F].[EC_NAME] AS [EC]
	   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
	   ,CAST((([TT].[AMOUNT] * (1 - (([TT].[TAX_INITIAL] + IIF(T.COD_TTYPE != 1, COALESCE(TT.TAX_PLANDZERO, 0), 0)) / 100)) *
		IIF([TT].[ANTICIP_PERCENT] IS NULL, 1, 1 - (((([TT].[ANTICIP_PERCENT] + IIF(T.COD_TTYPE = 1, COALESCE(TT.TAX_PLANDZERO, 0), 0)) / 30) * COALESCE(IIF([TT].[IS_SPOT] = 1, DATEDIFF(DAY, [TT].[PREVISION_PAY_DATE], [TT].[ORIGINAL_RECEIVE_DATE]), [TT].[QTY_DAYS_ANTECIP]), ([TT].[PLOT] * 30) - 1)) / 100)))
		- (IIF([TT].[PLOT] = 1, [TT].[RATE], 0))) AS DECIMAL(22, 6)) AS [PLOT_VALUE_PAYMENT]
	   ,[F].[PREVISION_PAY_DATE]
	   ,[F].[COD_BANK]
	   ,ISNULL([F].[CODE_BANK], 'NO CADASTRADO') AS [CODE_BANK]
	   ,ISNULL([F].[BANK], 'NO CADASTRADO') AS [BANK]
	   ,[F].[AGENCY]
	   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
	   ,[S].[NAME] AS [SITUATION]
	   ,[F].[COD_SITUATION]
	   ,'TITLE' AS [TYPE_RELEASE]
	   ,[F].[COD_FIN_SCH_FILE]
	   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
	   ,[FINANCE_SCHEDULE_FILE].FILE_NAME
	   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
	   ,[F].[IS_LOCK]
	   ,[TT].[IS_SPOT]
	FROM [FINANCE_CALENDAR] AS [F]
	JOIN [TRANSACTION_TITLES] AS [TT] WITH (NOLOCK)
		ON [TT].[COD_FIN_CALENDAR] = [F].[COD_FIN_CALENDAR]
	JOIN [TRANSACTION] AS [T] WITH (NOLOCK)
		ON [T].[COD_TRAN] = [TT].[COD_TRAN]
	JOIN [SITUATION] AS [S]
		ON [S].[COD_SITUATION] = [F].[COD_SITUATION]
	LEFT JOIN [FINANCE_SCHEDULE_FILE]
		ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
	WHERE [F].[COD_SITUATION] = @COD_SITUATION
	AND [F].[ACTIVE] = 1
	AND [F].[PREVISION_PAY_DATE] < @DateFilter
	AND [F].COD_BK_EC = @COD_BK_EC;

END;
GO
IF OBJECT_ID('SP_DATA_TRAN_TITLE') IS NOT NULL
	DROP PROCEDURE SP_DATA_TRAN_TITLE
GO
CREATE PROCEDURE [DBO].[SP_DATA_TRAN_TITLE]

/********************************************************************************************  
----------------------------------------------------------------------------------------     
    Procedure Name: [SP_DATA_TRAN_TITLE]  Project.......: TKPP     
------------------------------------------------------------------------------------------     
    Author              VERSION     Date         Description     
------------------------------------------------------------------------------------------     
     Kennedy Alef        V1      27/07/2018      Creation     
     Luiz Aquino         V2      08/07/2019      bank is_cerc    
     Marcus Gall         V3      03/01/2020      Add AmountNoRate and RatePlot    
     Marcus Gall         V4      07/02/2020      Alter UNION RELEASE_ADJUSTMENTS     
     Lucas Aguiar        v5      25/03/2020      add cod ec
    Luiz Aquino          V6      20/08/2020      PlanDZero (ET-795)
------------------------------------------------------------------------------------------  
********************************************************************************************/ (@CODE_TRAN VARCHAR(100),
@SHOW_ADJUSTMENTS INT = 0,
@COD_EC INT = NULL)
AS
BEGIN
	DECLARE @QUERY_ NVARCHAR(MAX) = '';

	SET @QUERY_ = CONCAT(@QUERY_, '     
    SELECT * FROM (    
        SELECT    
             TRANSACTION_TITLES.COD_TITLE AS CODE    
             ,CAST(TRANSACTION_TITLES.AMOUNT AS DECIMAL(22, 6)) AS AMOUNT    
             ,TRANSACTION_TITLES.PLOT    
             ,CAST((dbo.[FNC_ANT_VALUE_LIQ_DAYS]    
              (    
                TRANSACTION_TITLES.AMOUNT,
                (TRANSACTION_TITLES.TAX_INITIAL + IIF([TRANSACTION].COD_TTYPE != 1, COALESCE(TRANSACTION_TITLES.TAX_PLANDZERO, 0), 0) ),
                TRANSACTION_TITLES.PLOT,
                (TRANSACTION_TITLES.ANTICIP_PERCENT + IIF([TRANSACTION].COD_TTYPE = 1, COALESCE(TRANSACTION_TITLES.TAX_PLANDZERO, 0), 0)),
                IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE), TRANSACTION_TITLES.QTY_DAYS_ANTECIP)                      
              ) - (IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0))) AS DECIMAL(22, 6))  AS [PLOT_VALUE_PAYMENT]    
             ,CAST(TRANSACTION_TITLES.PREVISION_PAY_DATE AS DATE) AS [PREVISION_PAY_DATE]    
             ,ISNULL(TR_FINANCE.SITUATION_TR , TRADUCTION_SITUATION.SITUATION_TR) AS SITUATION    
             ,TRANSACTION_TITLES.ANTICIPATED    
             ,TYPE_TRANSACTION_TITTLE.CODE AS TITTLE_TYPE    
             ,COMMERCIAL_ESTABLISHMENT.NAME AS MERCHANT    
             ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS DOC_MERCHANT    
             ,ISNULL(TR_FINANCE.SITUATION_TR, TR_TITTLE.SITUATION_TR) AS SITUATION_TITTLE    
             ,ISNULL(PROTOCOLS.PROTOCOL, '''') AS PROTOCOL    
             , dbo.[FNC_ANT_VALUE_LIQ_DAYS](    
              TRANSACTION_TITLES.AMOUNT,
              (TRANSACTION_TITLES.TAX_INITIAL + IIF([TRANSACTION].COD_TTYPE != 1, COALESCE(TRANSACTION_TITLES.TAX_PLANDZERO, 0), 0) ),
              TRANSACTION_TITLES.PLOT,
              (TRANSACTION_TITLES.ANTICIP_PERCENT + IIF([TRANSACTION].COD_TTYPE = 1, COALESCE(TRANSACTION_TITLES.TAX_PLANDZERO, 0), 0)),
              IIF(TRANSACTION_TITLES.IS_SPOT = 1, DATEDIFF(DAY, TRANSACTION_TITLES.PREVISION_PAY_DATE, TRANSACTION_TITLES.ORIGINAL_RECEIVE_DATE), TRANSACTION_TITLES.QTY_DAYS_ANTECIP)
             ) AS [PLOT_VALUE_NO_RATE]    
             , IIF(TRANSACTION_TITLES.PLOT = 1, TRANSACTION_TITLES.RATE, 0) AS [PLOT_RATE]    
        FROM TRANSACTION_TITLES    
            INNER JOIN [TRANSACTION] WITH (NOLOCK) ON [TRANSACTION].COD_TRAN = TRANSACTION_TITLES.COD_TRAN  
            LEFT JOIN FINANCE_CALENDAR ON FINANCE_CALENDAR.COD_FIN_CALENDAR = [TRANSACTION_TITLES].COD_FIN_CALENDAR
                    AND FINANCE_CALENDAR.ACTIVE = 1
            LEFT JOIN SITUATION SITUATION_FIN ON SITUATION_FIN.COD_SITUATION = FINANCE_CALENDAR.COD_SITUATION
            LEFT JOIN TRADUCTION_SITUATION TR_FINANCE ON TR_FINANCE.COD_SITUATION = SITUATION_FIN.COD_SITUATION
            INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = TRANSACTION_TITLES.COD_EC    
            INNER JOIN BRANCH_EC ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC    
            INNER JOIN COMPANY   ON COMPANY.COD_COMP = COMMERCIAL_ESTABLISHMENT.COD_COMP    
            INNER JOIN SITUATION ON SITUATION.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION    
            INNER JOIN BANK_DETAILS_EC ON BANK_DETAILS_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC    
                AND BANK_DETAILS_EC.ACTIVE = 1    
                AND BANK_DETAILS_EC.IS_CERC = 0    
            LEFT JOIN BANKS ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK    
            LEFT JOIN TYPE_TRANSACTION_TITTLE ON TYPE_TRANSACTION_TITTLE.COD_TYPE_TRAN_TITLE = TRANSACTION_TITLES.COD_TYPE_TRAN_TITLE    
            INNER JOIN TRADUCTION_SITUATION   ON TRADUCTION_SITUATION.COD_SITUATION = SITUATION.COD_SITUATION    
            LEFT JOIN SITUATION ST_TITTLE ON ST_TITTLE.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION    
            LEFT JOIN TRADUCTION_SITUATION TR_TITTLE ON TR_TITTLE.COD_SITUATION = ST_TITTLE.COD_SITUATION    
            LEFT JOIN PROTOCOLS  ON PROTOCOLS.COD_PAY_PROT = TRANSACTION_TITLES.COD_PAY_PROT    
            WHERE [TRANSACTION].CODE = @CODE_TRAN  ');

	IF @COD_EC IS NOT NULL
		SET @QUERY_ = CONCAT(@QUERY_, '  and TRANSACTION_TITLES.COD_EC = @COD_EC');

	IF @SHOW_ADJUSTMENTS = 1
	BEGIN
		SET @QUERY_ = CONCAT(@QUERY_, '    
        UNION    
          
        SELECT    
             RELEASE_ADJUSTMENTS.COD_REL_ADJ AS CODE    
           , CAST(TRANSACTION_TITLES.AMOUNT AS DECIMAL(22, 6)) AS AMOUNT    
           , ROW_NUMBER() OVER (ORDER BY RELEASE_ADJUSTMENTS.COD_REL_ADJ ASC) AS PLOT    
           , RELEASE_ADJUSTMENTS.[VALUE] AS [PLOT_VALUE_PAYMENT]    
           , RELEASE_ADJUSTMENTS.PREVISION_PAY_DATE    
           , TRADUCTION_SITUATION.SITUATION_TR AS SITUATION    
           , TRANSACTION_TITLES.ANTICIPATED    
           , ''TRANSACTION'' AS TITTLE_TYPE    
           , COMMERCIAL_ESTABLISHMENT.[NAME] AS EC    
           , COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS DOC_MERCHANT    
           , TR_TITTLE.SITUATION_TR AS SITUATION_TITTLE    
           , ISNULL(PROTOCOLS.PROTOCOL, '''') AS PROTOCOL    
           , 0      
           , 0     
        FROM [TRANSACTION] WITH (NOLOCK)    
            INNER JOIN RELEASE_ADJUSTMENTS ON RELEASE_ADJUSTMENTS.COD_TRAN = [TRANSACTION].COD_TRAN    
            INNER JOIN [TRANSACTION_TITLES] ON [TRANSACTION_TITLES].COD_TITLE = RELEASE_ADJUSTMENTS.COD_TITLE_REF    
            INNER JOIN COMMERCIAL_ESTABLISHMENT ON COMMERCIAL_ESTABLISHMENT.COD_EC = RELEASE_ADJUSTMENTS.COD_EC    
            LEFT JOIN PROTOCOLS ON PROTOCOLS.COD_PAY_PROT = RELEASE_ADJUSTMENTS.COD_PAY_PROT    
            INNER JOIN SITUATION ON SITUATION.COD_SITUATION = RELEASE_ADJUSTMENTS.COD_SITUATION    
            INNER JOIN TRADUCTION_SITUATION ON TRADUCTION_SITUATION.COD_SITUATION = SITUATION.COD_SITUATION    
            INNER JOIN SITUATION ST_TITTLE ON ST_TITTLE.COD_SITUATION = RELEASE_ADJUSTMENTS.COD_SITUATION    
            INNER JOIN TRADUCTION_SITUATION TR_TITTLE ON TR_TITTLE.COD_SITUATION = ST_TITTLE.COD_SITUATION    
        WHERE [TRANSACTION].CODE = @CODE_TRAN ');

		IF @COD_EC IS NOT NULL
			SET @QUERY_ = CONCAT(@QUERY_, '  and TRANSACTION_TITLES.COD_EC = @COD_EC');

	END;

	SET @QUERY_ = CONCAT(@QUERY_, ' ) AS RESULTADO ORDER BY RESULTADO.PLOT, RESULTADO.[PLOT_VALUE_PAYMENT] DESC');
	--SELECT @QUERY_;    

	EXEC [sp_executesql] @QUERY_
						,N'     
            @CODE_TRAN VARCHAR(100),  
            @SHOW_ADJUSTMENTS INT,  
            @COD_EC INT = NULL'
						,@CODE_TRAN = @CODE_TRAN
						,@SHOW_ADJUSTMENTS = @SHOW_ADJUSTMENTS
						,@COD_EC = @COD_EC;
END;
GO
CREATE PROCEDURE SP_FD_APPLIED_TAX_TRAN_DETAILS (@NSU VARCHAR(200))
AS
BEGIN

	SELECT
		t.CODE AS NSU_TRANSACAO
	   ,t.CREATED_AT AS DATA_TRANSACAO
	   ,t.MODIFY_DATE AS MODIFICACAO_TRANSACAO
	   ,tt1.CODE AS TIPO_TRANSACAO
	   ,p.CODE AS NOME_PLANO
	   ,tp1.CODE AS TIPO_PLANO
	   ,atd.PARCENTAGE AS MDR_PLANO
	   ,atd.ANTICIPATION_PERCENTAGE AS ANTECIPACAO_PLANO
	   ,atd.RATE AS TARIFA_PLANO
	   ,atd.ACTIVE AS PLANO_ATIVO
	   ,USERS.COD_ACCESS AS USUARIO_CAD_PLANO
	   ,tt.PREVISION_PAY_DATE AS PREVISAO_PAGAMENTO
	   ,tt.PREVISION_RECEIVE_DATE AS PREVISAO_RECEBIMENTO
		--,tt.ANTICIP_PERCENT          
	   ,tt.TAX_INITIAL AS MDR_APLICADO
	   ,tt.ANTICIP_PERCENT AS ANTECIPACAO_APLICADA
	   ,tt.IS_SPOT AS INDICADOR_SPOT
	   ,ce.SPOT_TAX AS TAXA_SPOT_EC
	   ,ts.SITUATION_TR
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = t.COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = t.COD_EC
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS PLAN_DZEROEC
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = t.COD_TRAN
			AND TRANSACTION_SERVICES.COD_EC = t.COD_EC
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS PLAN_DZEROAFF
	FROM [TRANSACTION] t WITH (NOLOCK)
	INNER JOIN TRANSACTION_TITLES tt
		ON t.COD_TRAN = tt.COD_TRAN
	INNER JOIN ASS_TAX_DEPART atd WITH (NOLOCK)
		ON tt.COD_ASS_TX_DEP = atd.COD_ASS_TX_DEP
	INNER JOIN [PLAN] p WITH (NOLOCK)
		ON atd.COD_PLAN = p.COD_PLAN
	INNER JOIN TYPE_PLAN tp1 WITH (NOLOCK)
		ON p.COD_T_PLAN = tp1.COD_T_PLAN
	INNER JOIN USERS WITH (NOLOCK)
		ON atd.COD_USER = USERS.COD_USER
	--INNER JOIN ASS_DEPTO_EQUIP ade WITH (NOLOCK)          
	-- ON t.COD_ASS_DEPTO_TERMINAL = ade.COD_ASS_DEPTO_TERMINAL          
	--INNER JOIN DEPARTMENTS_BRANCH db WITH (NOLOCK)          
	-- ON ade.COD_DEPTO_BRANCH = db.COD_DEPTO_BRANCH          
	--INNER JOIN BRANCH_EC be WITH (NOLOCK)          
	-- ON db.COD_BRANCH = be.COD_BRANCH          
	INNER JOIN COMMERCIAL_ESTABLISHMENT ce WITH (NOLOCK)
		ON tt.COD_EC = ce.COD_EC
	INNER JOIN TRANSACTION_TYPE tt1 WITH (NOLOCK)
		ON atd.COD_TTYPE = tt1.COD_TTYPE
	INNER JOIN SITUATION s
		ON t.COD_SITUATION = s.COD_SITUATION
	INNER JOIN TRADUCTION_SITUATION ts
		ON s.COD_SITUATION = ts.COD_SITUATION
	WHERE t.CODE = @NSU
	ORDER BY 1 DESC

END;

GO

IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'DZERO_EC_TAX'
		AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
	ALTER TABLE REPORT_TRANSACTIONS_EXP
	ADD DZERO_EC_TAX DECIMAL(22, 6) DEFAULT NULL;

GO
IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'DZERO_AFF_TAX'
		AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
	ALTER TABLE REPORT_TRANSACTIONS_EXP
	ADD DZERO_AFF_TAX DECIMAL(22, 6) DEFAULT NULL

GO


IF OBJECT_ID('[VW_REPORT_TRANSACTIONS_EXP]') IS NOT NULL
	DROP VIEW [VW_REPORT_TRANSACTIONS_EXP]
GO
CREATE VIEW [DBO].[VW_REPORT_TRANSACTIONS_EXP]
/*----------------------------------------------------------------------------------------                                    
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                                    
Project.......: TKPP                                    
------------------------------------------------------------------------------------------                                    
Author                          VERSION        Date                            Description                                    
------------------------------------------------------------------------------------------                                    
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                          
Caike Uch�a                        v2       10/01/2020                         add CNAE                
Kennedy Alef                       v3       08/04/2020                      add link de pagamento          
Caike Uch�a                        v4       30/04/2020                        insert ec prod          
Caike Uch�a                        v5       17/08/2020                        Add SALES_TYPE        
Kennedy Alef                       v6       02/09/2020                        Add change calculations      
------------------------------------------------------------------------------------------*/
AS
WITH CTE
AS
(SELECT TOP (1000)
		[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
	   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
	   ,[TRANSACTION].[PLOTS] AS [PLOTS]
	   ,CAST([DBO].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
	   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
	   ,[EQUIPMENT].[TID] AS [TID]
	   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
	   ,[TRANSACTION].[BRAND]
	   ,[TRANSACTION].[PAN]
	   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
	   , --TRANSACTION_DATA_EXT.NAME                                        
		[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
	   , --TRANSACTION_DATA_EXT.VALUE                                       
		(SELECT
				[TRANSACTION_DATA_EXT].[VALUE]
			FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
			WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[ACQUIRER].[COD_AC]
	   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
	   ,[TRANSACTION].[COMMENT] AS [COMMENT]
	   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
	   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
	   ,
		--  (CASE      
		-- WHEN [SITUATION].[COD_SITUATION] = 3 AND      
		--  [PLAN].[COD_T_PLAN] = 2 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], [ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE]) - [ASS_TAX_DEPART].[RATE])      
		-- WHEN [SITUATION].[COD_SITUATION] = 3 AND      
		--  [PLAN].[COD_T_PLAN] = 1 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], 0) - [ASS_TAX_DEPART].[RATE])      
		-- ELSE 0      
		--END) AS [NET_VALUE]      
		--  ,      
		--------------******------------                                        
		[TRANSACTION].[COD_TTYPE]
	   ,[COMPANY].[COD_COMP]
	   ,[BRANCH_EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[STATE].[NAME] AS [STATE_NAME]
	   ,[CITY].[NAME] AS [CITY_NAME]
	   ,[SITUATION].[COD_SITUATION]
	   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
	   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
	   ,COALESCE([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]


	   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
	   ,[TRANSACTION].[COD_SOURCE_TRAN]
	   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
	   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
	   ,[TRANSACTION].[CREATED_AT]
	   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
	   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
	   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
	   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)
				> 0 THEN 1
			ELSE 0
		END AS [SPLIT]
	   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
	   ,[USERS].[COD_USER] AS [COD_USER_REP]
	   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
	   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
	   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
	   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
	   ,[SEGMENTS].[CNAE]
	   ,[TRANSACTION].[COD_USER]
	   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
				> 0 THEN 1
			ELSE 0
		END AS [LINK_PAYMENT]
	   ,[TRANSACTION].[CUSTOMER_EMAIL]
	   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
				> 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]
			ELSE NULL
		END AS [PAYMENT_LINK_TRACKING]
	   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
	   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
	   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
	   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROEC
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROAFF
	FROM [TRANSACTION] WITH (NOLOCK)
	LEFT JOIN [DBO].[PROCESS_BG_STATUS]
		ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [ASS_DEPTO_EQUIP]
		ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
	LEFT JOIN [EQUIPMENT]
		ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
	LEFT JOIN [DEPARTMENTS_BRANCH]
		ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
	LEFT JOIN [DEPARTMENTS]
		ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
	LEFT JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
	LEFT JOIN [ADDRESS_BRANCH]
		ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
	LEFT JOIN [NEIGHBORHOOD]
		ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
	LEFT JOIN [ASS_TAX_DEPART]
		ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
	LEFT JOIN [PLAN]
		ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
	LEFT JOIN [CITY]
		ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
	LEFT JOIN [STATE]
		ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
	LEFT JOIN [COMPANY]
		ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	LEFT JOIN [TRANSACTION_TYPE]
		ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
	LEFT JOIN [SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
	LEFT JOIN [TRADUCTION_SITUATION]
		ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
	LEFT JOIN [SEGMENTS]
		ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
	LEFT JOIN [DBO].[REPORT_TRANSACTIONS_EXP]
		ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [POSWEB_DATA_TRANSACTION]
		ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [DBO].[SOURCE_TRANSACTION] WITH (NOLOCK)
		ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
		ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
	LEFT JOIN [SALES_REPRESENTATIVE]
		ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
	LEFT JOIN [USERS]
		ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
	LEFT JOIN [USERS] AS [USER_TRAN]
		ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
	LEFT JOIN [ASS_TR_TYPE_COMP]
		ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
	LEFT JOIN [ACQUIRER]
		ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
	INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
		ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
		ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
	AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
	AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT])
SELECT
	CTE.COD_TRAN
   ,CTE.TRANSACTION_CODE
   ,CTE.AMOUNT
   ,CTE.PLOTS
   ,CTE.TRANSACTION_DATE
   ,CTE.TRANSACTION_TYPE
   ,CTE.CPF_CNPJ
   ,CTE.[NAME]
   ,CTE.SERIAL_EQUIP
   ,CTE.TID
   ,CTE.SITUATION
   ,CTE.BRAND
   ,CTE.PAN
   ,CTE.TRAN_DATA_EXT
   ,CTE.TRAN_DATA_EXT_VALUE
   ,CTE.AUTH_CODE
   ,CTE.COD_AC
   ,CTE.NAME_ACQUIRER
   ,CTE.COMMENT
   ,CTE.TAX
   ,CTE.ANTICIPATION
   ,CTE.COD_AFFILIATOR
   ,CTE.NAME_AFFILIATOR
   ,CTE.COD_TTYPE
   ,CTE.COD_COMP
   ,CTE.COD_EC
   ,CTE.COD_BRANCH
   ,CTE.STATE_NAME
   ,CTE.CITY_NAME
   ,CTE.COD_SITUATION
   ,CTE.COD_DEPTO_BRANCH
   ,CTE.GROSS_VALUE_AGENCY
   ,CTE.NET_VALUE_AGENCY
   ,CTE.TYPE_TRAN
   ,CTE.COD_SOURCE_TRAN
   ,CTE.POSWEB
   ,CTE.SEGMENTS_NAME
   ,CTE.CREATED_AT
   ,CTE.REP_COD_TRAN
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.SPLIT
   ,CTE.SALES_REP
   ,CTE.COD_USER_REP
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.COD_SALES_REP
   ,CTE.MODEL_POS
   ,CTE.CARD_NAME
   ,CTE.CNAE
   ,CTE.COD_USER
   ,CTE.NAME_USER
   ,CTE.LINK_PAYMENT
   ,CTE.CUSTOMER_EMAIL
   ,CTE.CUSTOMER_IDENTIFICATION
   ,CTE.PAYMENT_LINK_TRACKING
   ,CTE.NAME_PRODUCT_EC
   ,CTE.EC_PRODUCT
   ,CTE.EC_PRODUCT_CPF_CNPJ
   ,CTE.SALES_TYPE
   ,CTE.PLAN_DZEROEC
   ,CTE.PLAN_DZEROAFF
   ,SUM(
	IIF
	(
	ISNULL(CTE.PLAN_DZEROEC, 0) > 0,
	DBO.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(
	IIF([TRANSACTION_TITLES].COD_EC = CTE.COD_EC, [TRANSACTION_TITLES].[AMOUNT], 0),
	[TRANSACTION_TITLES].PLOT,
	[TRANSACTION_TITLES].TAX_INITIAL,
	[TRANSACTION_TITLES].ANTICIP_PERCENT,
	[TRANSACTION_TITLES].TAX_PLANDZERO,
	CTE.COD_TTYPE
	),
	CAST((((IIF([TRANSACTION_TITLES].COD_EC = CTE.COD_EC, [TRANSACTION_TITLES].[AMOUNT], 0) * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
	CASE
		WHEN [TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TRANSACTION_TITLES].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE])
				ELSE [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]
			END, ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TRANSACTION_TITLES].[PLOT] = 1 THEN [TRANSACTION_TITLES].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)))) AS NET_VALUE

FROM [TRANSACTION_TITLES]
JOIN CTE
	ON [TRANSACTION_TITLES].COD_TRAN = CTE.COD_TRAN
GROUP BY CTE.COD_TRAN
		,CTE.TRANSACTION_CODE
		,CTE.AMOUNT
		,CTE.PLOTS
		,CTE.TRANSACTION_DATE
		,CTE.TRANSACTION_TYPE
		,CTE.CPF_CNPJ
		,CTE.[NAME]
		,CTE.SERIAL_EQUIP
		,CTE.TID
		,CTE.SITUATION
		,CTE.BRAND
		,CTE.PAN
		,CTE.TRAN_DATA_EXT
		,CTE.TRAN_DATA_EXT_VALUE
		,CTE.AUTH_CODE
		,CTE.COD_AC
		,CTE.NAME_ACQUIRER
		,CTE.COMMENT
		,CTE.TAX
		,CTE.ANTICIPATION
		,CTE.COD_AFFILIATOR
		,CTE.NAME_AFFILIATOR
		,CTE.COD_TTYPE
		,CTE.COD_COMP
		,CTE.COD_EC
		,CTE.COD_BRANCH
		,CTE.STATE_NAME
		,CTE.CITY_NAME
		,CTE.COD_SITUATION
		,CTE.COD_DEPTO_BRANCH
		,CTE.GROSS_VALUE_AGENCY
		,CTE.NET_VALUE_AGENCY
		,CTE.TYPE_TRAN
		,CTE.COD_SOURCE_TRAN
		,CTE.POSWEB
		,CTE.SEGMENTS_NAME
		,CTE.CREATED_AT
		,CTE.REP_COD_TRAN
		,CTE.COD_EC_TRANS
		,CTE.TRANS_EC_NAME
		,CTE.TRANS_EC_CPF_CNPJ
		,CTE.SPLIT
		,CTE.SALES_REP
		,CTE.COD_USER_REP
		,CTE.CREDITOR_DOCUMENT
		,CTE.COD_SALES_REP
		,CTE.MODEL_POS
		,CTE.CARD_NAME
		,CTE.CNAE
		,CTE.COD_USER
		,CTE.NAME_USER
		,CTE.LINK_PAYMENT
		,CTE.CUSTOMER_EMAIL
		,CTE.CUSTOMER_IDENTIFICATION
		,CTE.PAYMENT_LINK_TRACKING
		,CTE.NAME_PRODUCT_EC
		,CTE.EC_PRODUCT
		,CTE.EC_PRODUCT_CPF_CNPJ
		,CTE.SALES_TYPE
		,CTE.PLAN_DZEROEC
		,CTE.PLAN_DZEROAFF    
    
    
GO
IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP]
GO
CREATE PROCEDURE [dbo].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************            
----------------------------------------------------------------------------------------                                  
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                                  
 Project.......: TKPP                                  
 ------------------------------------------------------------------------------------------                                  
 Author                          VERSION        Date                            Description                                  
 ------------------------------------------------------------------------------------------                                  
 Fernando Henrique F.             V1       13/12/2018                          Creation                                   
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                            
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                          
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                        
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE            
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento          
 Caike Uch�a                      v7       30/04/2020                        insert ec prod          
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess        
 Caike Uch�a                      V9       17/08/2020                        Add SALES_TYPE        
 ------------------------------------------------------------------------------------------            
*****************************************************************************************************************/

AS
BEGIN

	DECLARE @COUNT INT = 0;





	BEGIN

		---------------------------------------------                                
		--------------RECORDS INSERT-----------------                                
		---------------------------------------------                                  
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROEC
		   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROAFF INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
		FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

		IF @COUNT > 0
		BEGIN
			INSERT INTO [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
			[TRANSACTION_CODE],
			[AMOUNT],
			[PLOTS],
			[TRANSACTION_DATE],
			[TRANSACTION_TYPE],
			[CPF_CNPJ],
			[NAME],
			[SERIAL_EQUIP],
			[TID],
			[SITUATION],
			[BRAND],
			[PAN],
			[TRAN_DATA_EXT],
			[TRAN_DATA_EXT_VALUE],
			[AUTH_CODE],
			[COD_AC],
			[NAME_ACQUIRER],
			[COMMENT],
			[TAX],
			[ANTICIPATION],
			[COD_AFFILIATOR],
			[NAME_AFFILIATOR],
			[NET_VALUE],
			[COD_COMP],
			[COD_EC],
			[COD_BRANCH],
			[STATE_NAME],
			[CITY_NAME],
			[COD_SITUATION],
			[COD_DEPTO_BRANCH],
			[GROSS_VALUE_AGENCY],
			[NET_VALUE_AGENCY],
			[TYPE_TRAN],
			[COD_SOURCE_TRAN],
			[POSWEB],
			[SEGMENTS_NAME],
			[CREATED_TRANSACTION_DATE],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ],
			[SPLIT],
			[SALES_REP],
			[COD_USER_REP],
			[MODIFY_DATE],
			[CREDITOR_DOCUMENT],
			[COD_SALES_REP],
			[MODEL_POS],
			[CARD_NAME],
			[CNAE],
			[COD_USER],
			[NAME_USER],
			[LINK_PAYMENT_SERVICE],
			[CUSTOMER_EMAIL],
			[CUSTOMER_IDENTIFICATION],
			[PAYMENT_LINK_TRACKING],
			[NAME_PRODUCT_EC],
			[EC_PRODUCT],
			[EC_PRODUCT_CPF_CNPJ],
			[SALES_TYPE],
			DZERO_EC_TAX,
			DZERO_AFF_TAX)
				(SELECT
					[TEMP].[COD_TRAN]
				   ,[TEMP].[TRANSACTION_CODE]
				   ,[TEMP].[AMOUNT]
				   ,[TEMP].[PLOTS]
				   ,[TEMP].[TRANSACTION_DATE]
				   ,[TEMP].[TRANSACTION_TYPE]
				   ,[TEMP].[CPF_CNPJ]
				   ,[TEMP].[NAME]
				   ,[TEMP].[SERIAL_EQUIP]
				   ,[TEMP].[TID]
				   ,[TEMP].[SITUATION]
				   ,[TEMP].[BRAND]
				   ,[TEMP].[PAN]
				   ,[TEMP].[TRAN_DATA_EXT]
				   ,[TEMP].[TRAN_DATA_EXT_VALUE]
				   ,[TEMP].[AUTH_CODE]
				   ,[TEMP].[COD_AC]
				   ,[TEMP].[NAME_ACQUIRER]
				   ,[TEMP].[COMMENT]
				   ,[TEMP].[TAX]
				   ,[TEMP].[ANTICIPATION]
				   ,[TEMP].[COD_AFFILIATOR]
				   ,[TEMP].[NAME_AFFILIATOR]
				   ,[TEMP].[NET_VALUE]
				   ,[TEMP].[COD_COMP]
				   ,[TEMP].[COD_EC]
				   ,[TEMP].[COD_BRANCH]
				   ,[TEMP].[STATE_NAME]
				   ,[TEMP].[CITY_NAME]
				   ,[TEMP].[COD_SITUATION]
				   ,[TEMP].[COD_DEPTO_BRANCH]
				   ,[TEMP].[GROSS_VALUE_AGENCY]
				   ,[TEMP].[NET_VALUE_AGENCY]
				   ,[TEMP].[TYPE_TRAN]
				   ,[TEMP].[COD_SOURCE_TRAN]
				   ,[TEMP].[POSWEB]
				   ,[TEMP].[SEGMENTS_NAME]
				   ,[TEMP].[CREATED_AT]
				   ,[TEMP].[COD_EC_TRANS]
				   ,[TEMP].[TRANS_EC_NAME]
				   ,[TEMP].[TRANS_EC_CPF_CNPJ]
				   ,[TEMP].[SPLIT]
				   ,[SALES_REP]
				   ,[COD_USER_REP]
				   ,GETDATE()
				   ,[CREDITOR_DOCUMENT]
				   ,[COD_SALES_REP]
				   ,[TEMP].[MODEL_POS]
				   ,[CARD_NAME]
				   ,[CNAE]
				   ,[COD_USER]
				   ,[NAME_USER]
				   ,[LINK_PAYMENT]
				   ,[CUSTOMER_EMAIL]
				   ,[CUSTOMER_IDENTIFICATION]
				   ,[TEMP].[PAYMENT_LINK_TRACKING]
				   ,[TEMP].[NAME_PRODUCT_EC]
				   ,[TEMP].[EC_PRODUCT]
				   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
				   ,[TEMP].[SALES_TYPE]
				   ,[TEMP].PLAN_DZEROEC
				   ,[TEMP].PLAN_DZEROAFF
				FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;


		---------------------------------------------                                
		--------------RECORDS UPDATE-----------------                                
		---------------------------------------------                                  
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
		FROM [dbo].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_TRANSACTIONS_EXP]
			SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
			   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
			   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
			FROM [REPORT_TRANSACTIONS_EXP]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;
	END;
END;


GO

IF OBJECT_ID('[SP_REPORT_TRANSACTIONS_EXP]') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP]
GO
CREATE PROCEDURE [DBO].[SP_REPORT_TRANSACTIONS_EXP]
/***************************************************************************************            
----------------------------------------------------------------------------------------            
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]            
Project.......: TKPP            
------------------------------------------------------------------------------------------            
Author               VERSION         Date                     Description            
------------------------------------------------------------------------------------------            
Fernando Henrique F.   V1         13/12/2018               Creation            
Kennedy Alef           V2         16/01/2018               Modify            
Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT            
Caike Uch�a            V3         15/08/2019               inserting coluns            
Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC            
Caike Uch�a            V5         20/01/2020               ADD CNAE            
Kennedy Alef           v3         08/04/2020               add link de pagamento            
Caike Uch�a            v4         30/04/2020               insert ec prod            
Caike Uch�a            v5         17/08/2020               Add SALES_TYPE          
---------------------------------------------           ---------------------------------------------            
********************************************************************************************/ (@CODCOMP VARCHAR(10),
@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@EC VARCHAR(10),
@BRANCH VARCHAR(10),
@DEPART VARCHAR(10),
@TERMINAL VARCHAR(100),
@STATE VARCHAR(100),
@CITY VARCHAR(100),
@TYPE_TRAN VARCHAR(10),
@SITUATION VARCHAR(10),
@NSU VARCHAR(100) = NULL,
@NSU_EXT VARCHAR(100) = NULL,
@BRAND VARCHAR(50) = NULL,
@PAN VARCHAR(50) = NULL,
@COD_AFFILIATOR INT = NULL,
@TRACKING_TRANSACTION VARCHAR(100) = NULL,
@DESCRIPTION VARCHAR(100) = NULL,
@SPOT_ELEGIBLE INT = 0,
@COD_ACQ INT = NULL,
@SOURCE_TRAN INT = NULL,
@POSWEB INT = 0,
@SPLIT INT = NULL,
@INITIAL_VALUE DECIMAL(22, 6) = NULL,
@FINAL_VALUE DECIMAL(22, 6) = NULL,
@COD_SALES_REP INT = NULL)
AS
BEGIN
	DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
	DECLARE @TIME_FINAL_DATE TIME;
	SET NOCOUNT ON;
	SET ARITHABORT ON;
	BEGIN
		SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');
		--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));            
		--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )            
		SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);
		IF (@TIME_FINAL_DATE = '00:00:00')
			SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));
		SET @QUERY_BASIS = '            
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE            
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT            
      ,[REPORT_TRANSACTIONS_EXP].PLOTS            
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE            
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE            
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ            
      ,[REPORT_TRANSACTIONS_EXP].NAME            
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP            
      ,[REPORT_TRANSACTIONS_EXP].TID            
      ,[REPORT_TRANSACTIONS_EXP].SITUATION            
      ,[REPORT_TRANSACTIONS_EXP].BRAND            
      ,[REPORT_TRANSACTIONS_EXP].PAN            
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE            
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT            
   ,(            
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT            
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN            
      ) AS [AUTH_CODE]            
     ,[REPORT_TRANSACTIONS_EXP].COD_AC            
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER            
      ,[REPORT_TRANSACTIONS_EXP].COMMENT            
  ,[REPORT_TRANSACTIONS_EXP].TAX            
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION            
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR            
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR            
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE            
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY            
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY            
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN            
      ,[REPORT_TRANSACTIONS_EXP].POSWEB            
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME            
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME            
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME            
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS            
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME            
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ            
      ,[REPORT_TRANSACTIONS_EXP].SPLIT            
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]            
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT            
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP            
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS            
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME            
      ,[REPORT_TRANSACTIONS_EXP].CNAE            
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE            
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL            
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION            
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING            
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]            
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]            
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]            
   ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]          
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_EC_TAX , 0) AS DZERO_EC_TAX         
   ,ISNULL([REPORT_TRANSACTIONS_EXP].DZERO_AFF_TAX, 0) AS DZERO_AFF_TAX        
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]            
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP            
    ';
		IF @INITIAL_DATE IS NOT NULL
			AND @FINAL_DATE IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');
		IF @EC IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');
		IF @BRANCH IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');
		IF @DEPART IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');
		IF LEN(@TERMINAL) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');
		IF LEN(@STATE) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');
		IF LEN(@CITY) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');
		IF LEN(@TYPE_TRAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');
		IF LEN(@SITUATION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');
		IF LEN(@BRAND) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');
		IF LEN(@PAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');
		IF LEN(@NSU) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');
		IF LEN(@NSU_EXT) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');
		--ELSE            
		-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL            
		-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');            
		IF @COD_AFFILIATOR IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');
		IF LEN(@TRACKING_TRANSACTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');
		IF LEN(@DESCRIPTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');
		IF @SPOT_ELEGIBLE = 1
		BEGIN
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE 
   
    
      
        
          
        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');
		END;
		IF @COD_ACQ IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');
		IF @SOURCE_TRAN IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');
		IF @POSWEB = 1
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');
		IF (@INITIAL_VALUE > 0)
			AND (@FINAL_VALUE >= @INITIAL_VALUE)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');
		IF (@SPLIT = 1)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');
		--SELECT @QUERY_BASIS            
		EXEC [sp_executesql] @QUERY_BASIS
							,N'            
   @CODCOMP VARCHAR(10),            
   @INITIAL_DATE DATETIME,            
   @FINAL_DATE DATETIME,            
   @EC int,            
   @BRANCH int,            
   @DEPART int,            
   @TERMINAL varchar(14),            
   @STATE varchar(25),            
   @CITY varchar(40),            
   @TYPE_TRAN VARCHAR(10),            
   @SITUATION VARCHAR(10),            
   @NSU varchar(100),            
   @NSU_EXT varchar(100),            
   @BRAND varchar(50),            
   @COD_AFFILIATOR INT,            
   @PAN VARCHAR(50),            
   @SOURCE_TRAN INT,            
   @POSWEB INT,            
   @INITIAL_VALUE DECIMAL(22,6),            
   @FINAL_VALUE DECIMAL(22,6),            
   @COD_SALES_REP INT,            
   @COD_ACQ INT            
   '
							,@CODCOMP = @CODCOMP
							,@INITIAL_DATE = @INITIAL_DATE
							,@FINAL_DATE = @FINAL_DATE
							,@EC = @EC
							,@BRANCH = @BRANCH
							,@DEPART = @DEPART
							,@TERMINAL = @TERMINAL
							,@STATE = @STATE
							,@CITY = @CITY
							,@TYPE_TRAN = @TYPE_TRAN
							,@SITUATION = @SITUATION
							,@NSU = @NSU
							,@NSU_EXT = @NSU_EXT
							,@BRAND = @BRAND
							,@PAN = @PAN
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = @SOURCE_TRAN
							,@POSWEB = @POSWEB
							,@INITIAL_VALUE = @INITIAL_VALUE
							,@FINAL_VALUE = @FINAL_VALUE
							,@COD_SALES_REP = @COD_SALES_REP
							,@COD_ACQ = @COD_ACQ;
	END;
END;
	IF NOT EXISTS (SELECT
				1
			FROM sys.columns
			WHERE NAME = N'DZERO_EC_TAX'
			AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
		ALTER TABLE REPORT_TRANSACTIONS_EXP
		ADD DZERO_EC_TAX DECIMAL(22, 6) DEFAULT NULL;

GO
IF NOT EXISTS (SELECT
			1
		FROM sys.columns
		WHERE NAME = N'DZERO_AFF_TAX'
		AND object_id = OBJECT_ID(N'REPORT_TRANSACTIONS_EXP'))
	ALTER TABLE REPORT_TRANSACTIONS_EXP
	ADD DZERO_AFF_TAX DECIMAL(22, 6) DEFAULT NULL

GO


IF OBJECT_ID('[VW_REPORT_TRANSACTIONS_EXP]') IS NOT NULL
	DROP VIEW [VW_REPORT_TRANSACTIONS_EXP]
GO
CREATE VIEW [DBO].[VW_REPORT_TRANSACTIONS_EXP]
/*----------------------------------------------------------------------------------------                              
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                              
Project.......: TKPP                              
------------------------------------------------------------------------------------------                              
Author                          VERSION        Date                            Description                              
------------------------------------------------------------------------------------------                              
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                    
Caike Uch�a                        v2       10/01/2020                         add CNAE          
Kennedy Alef                       v3       08/04/2020                      add link de pagamento    
Caike Uch�a                        v4       30/04/2020                        insert ec prod    
Caike Uch�a                        v5       17/08/2020                        Add SALES_TYPE  
------------------------------------------------------------------------------------------*/
AS
SELECT TOP (1000)
	[TRANSACTION].[COD_TRAN]
   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
   ,[TRANSACTION].[PLOTS] AS [PLOTS]
   ,CAST([DBO].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
   ,[EQUIPMENT].[TID] AS [TID]
   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
   ,[TRANSACTION].[BRAND]
   ,[TRANSACTION].[PAN]
   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
   , --TRANSACTION_DATA_EXT.NAME                                  
	[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
   , --TRANSACTION_DATA_EXT.VALUE                                 
	(SELECT
			[TRANSACTION_DATA_EXT].[VALUE]
		FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
		AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
	AS [AUTH_CODE]
   ,[ACQUIRER].[COD_AC]
   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
   ,[TRANSACTION].[COMMENT] AS [COMMENT]
   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
   ,[AFFILIATOR].[COD_AFFILIATOR]
   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
   ,(CASE
		WHEN [SITUATION].[COD_SITUATION] = 3 AND
			[PLAN].[COD_T_PLAN] = 2 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], [ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE]) - [ASS_TAX_DEPART].[RATE])
		WHEN [SITUATION].[COD_SITUATION] = 3 AND
			[PLAN].[COD_T_PLAN] = 1 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], 0) - [ASS_TAX_DEPART].[RATE])
		ELSE 0
	END) AS [NET_VALUE]
   ,
	--------------******------------                                  
	[TRANSACTION].[COD_TTYPE]
   ,[COMPANY].[COD_COMP]
   ,[BRANCH_EC].[COD_EC]
   ,[BRANCH_EC].[COD_BRANCH]
   ,[STATE].[NAME] AS [STATE_NAME]
   ,[CITY].[NAME] AS [CITY_NAME]
   ,[SITUATION].[COD_SITUATION]
   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
   ,COALESCE([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]

   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
   ,[TRANSACTION].[COD_SOURCE_TRAN]
   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
   ,[TRANSACTION].[CREATED_AT]
   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)
			> 0 THEN 1
		ELSE 0
	END AS [SPLIT]
   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
   ,[USERS].[COD_USER] AS [COD_USER_REP]
   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
   ,[SEGMENTS].[CNAE]
   ,[TRANSACTION].[COD_USER]
   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
			> 0 THEN 1
		ELSE 0
	END AS [LINK_PAYMENT]
   ,[TRANSACTION].[CUSTOMER_EMAIL]
   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM [TRANSACTION_SERVICES]
				WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
				AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
			> 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]
		ELSE NULL
	END AS [PAYMENT_LINK_TRACKING]
   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
   ,(SELECT
			TRANSACTION_SERVICES.TAX_PLANDZERO_EC
		FROM TRANSACTION_SERVICES WITH (NOLOCK)
		INNER JOIN ITEMS_SERVICES_AVAILABLE isa
			ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
		WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
		AND isa.NAME = 'PlanDZero')
	AS PLAN_DZEROEC
   ,(SELECT
			TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
		FROM TRANSACTION_SERVICES WITH (NOLOCK)
		INNER JOIN ITEMS_SERVICES_AVAILABLE isa
			ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
		WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
		AND isa.NAME = 'PlanDZero')
	AS PLAN_DZEROAFF
FROM [TRANSACTION] WITH (NOLOCK)
LEFT JOIN [DBO].[PROCESS_BG_STATUS]
	ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
LEFT JOIN [ASS_DEPTO_EQUIP]
	ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
LEFT JOIN [EQUIPMENT]
	ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
LEFT JOIN [DEPARTMENTS_BRANCH]
	ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
LEFT JOIN [DEPARTMENTS]
	ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
LEFT JOIN [BRANCH_EC]
	ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
LEFT JOIN [ADDRESS_BRANCH]
	ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
LEFT JOIN [NEIGHBORHOOD]
	ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
LEFT JOIN [ASS_TAX_DEPART]
	ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
LEFT JOIN [PLAN]
	ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
LEFT JOIN [CITY]
	ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
LEFT JOIN [STATE]
	ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
LEFT JOIN [COMPANY]
	ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
LEFT JOIN [TRANSACTION_TYPE]
	ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
LEFT JOIN [SITUATION]
	ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
LEFT JOIN [TRADUCTION_SITUATION]
	ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
LEFT JOIN [SEGMENTS]
	ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
LEFT JOIN [DBO].[REPORT_TRANSACTIONS_EXP]
	ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
	ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
LEFT JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
LEFT JOIN [POSWEB_DATA_TRANSACTION]
	ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
LEFT JOIN [DBO].[SOURCE_TRANSACTION] WITH (NOLOCK)
	ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
	ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
LEFT JOIN [SALES_REPRESENTATIVE]
	ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
LEFT JOIN [USERS]
	ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
LEFT JOIN [USERS] AS [USER_TRAN]
	ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
LEFT JOIN [ASS_TR_TYPE_COMP]
	ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
LEFT JOIN [ACQUIRER]
	ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
	ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
	ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
	ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
	ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT];

GO
IF OBJECT_ID('SP_REG_REPORT_TRANSACTIONS_EXP') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_EXP]
GO
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_EXP]

/*****************************************************************************************************************          
----------------------------------------------------------------------------------------                                
 Procedure Name: [SP_REG_REPORT_TRANSACTIONS_EXP]                                
 Project.......: TKPP                                
 ------------------------------------------------------------------------------------------                                
 Author                          VERSION        Date                            Description                                
 ------------------------------------------------------------------------------------------                                
 Fernando Henrique F.             V1       13/12/2018                          Creation                                 
 Lucas Aguiar                     V2       23-04-2019                      ROTINA DE SPLIT                          
 Caike Uch�a                      V3       15/08/2019                       inserting coluns                        
 Marcus Gall                      V4       28/11/2019              Add Model_POS, Segment, Location EC                      
 Caike Uch�a                      V5       20/01/2020                            ADD CNAE          
 Kennedy Alef                     v6       08/04/2020                      add link de pagamento        
 Caike Uch�a                      v7       30/04/2020                        insert ec prod        
 Caike Uch�a                      V8       06/08/2020                    Add [AMOUNT] to reprocess      
 Caike Uch�a                      V9       17/08/2020                        Add SALES_TYPE      
 ------------------------------------------------------------------------------------------          
*****************************************************************************************************************/  
  
AS
BEGIN

	DECLARE @COUNT INT = 0;





	BEGIN

		---------------------------------------------                              
		--------------RECORDS INSERT-----------------                              
		---------------------------------------------                                
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PLOTS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_DATE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANSACTION_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SERIAL_EQUIP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TID]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[BRAND]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRAN_DATA_EXT_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AUTH_CODE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_ACQUIRER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TAX]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[ANTICIPATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_COMP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[STATE_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CITY_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_DEPTO_BRANCH]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[GROSS_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NET_VALUE_AGENCY]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TYPE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SOURCE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[POSWEB]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SEGMENTS_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_EC_TRANS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[TRANS_EC_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SPLIT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREATED_AT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CREDITOR_DOCUMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[MODEL_POS]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CARD_NAME]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CNAE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[LINK_PAYMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_EMAIL]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[CUSTOMER_IDENTIFICATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[PAYMENT_LINK_TRACKING]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SALES_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROEC
		   ,[VW_REPORT_TRANSACTIONS_EXP].PLAN_DZEROAFF INTO [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT];

		IF @COUNT > 0
		BEGIN
			INSERT INTO [DBO].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN],
			[TRANSACTION_CODE],
			[AMOUNT],
			[PLOTS],
			[TRANSACTION_DATE],
			[TRANSACTION_TYPE],
			[CPF_CNPJ],
			[NAME],
			[SERIAL_EQUIP],
			[TID],
			[SITUATION],
			[BRAND],
			[PAN],
			[TRAN_DATA_EXT],
			[TRAN_DATA_EXT_VALUE],
			[AUTH_CODE],
			[COD_AC],
			[NAME_ACQUIRER],
			[COMMENT],
			[TAX],
			[ANTICIPATION],
			[COD_AFFILIATOR],
			[NAME_AFFILIATOR],
			[NET_VALUE],
			[COD_COMP],
			[COD_EC],
			[COD_BRANCH],
			[STATE_NAME],
			[CITY_NAME],
			[COD_SITUATION],
			[COD_DEPTO_BRANCH],
			[GROSS_VALUE_AGENCY],
			[NET_VALUE_AGENCY],
			[TYPE_TRAN],
			[COD_SOURCE_TRAN],
			[POSWEB],
			[SEGMENTS_NAME],
			[CREATED_TRANSACTION_DATE],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ],
			[SPLIT],
			[SALES_REP],
			[COD_USER_REP],
			[MODIFY_DATE],
			[CREDITOR_DOCUMENT],
			[COD_SALES_REP],
			[MODEL_POS],
			[CARD_NAME],
			[CNAE],
			[COD_USER],
			[NAME_USER],
			[LINK_PAYMENT_SERVICE],
			[CUSTOMER_EMAIL],
			[CUSTOMER_IDENTIFICATION],
			[PAYMENT_LINK_TRACKING],
			[NAME_PRODUCT_EC],
			[EC_PRODUCT],
			[EC_PRODUCT_CPF_CNPJ],
			[SALES_TYPE],
			DZERO_EC_TAX,
			DZERO_AFF_TAX)
				(SELECT
					[TEMP].[COD_TRAN]
				   ,[TEMP].[TRANSACTION_CODE]
				   ,[TEMP].[AMOUNT]
				   ,[TEMP].[PLOTS]
				   ,[TEMP].[TRANSACTION_DATE]
				   ,[TEMP].[TRANSACTION_TYPE]
				   ,[TEMP].[CPF_CNPJ]
				   ,[TEMP].[NAME]
				   ,[TEMP].[SERIAL_EQUIP]
				   ,[TEMP].[TID]
				   ,[TEMP].[SITUATION]
				   ,[TEMP].[BRAND]
				   ,[TEMP].[PAN]
				   ,[TEMP].[TRAN_DATA_EXT]
				   ,[TEMP].[TRAN_DATA_EXT_VALUE]
				   ,[TEMP].[AUTH_CODE]
				   ,[TEMP].[COD_AC]
				   ,[TEMP].[NAME_ACQUIRER]
				   ,[TEMP].[COMMENT]
				   ,[TEMP].[TAX]
				   ,[TEMP].[ANTICIPATION]
				   ,[TEMP].[COD_AFFILIATOR]
				   ,[TEMP].[NAME_AFFILIATOR]
				   ,[TEMP].[NET_VALUE]
				   ,[TEMP].[COD_COMP]
				   ,[TEMP].[COD_EC]
				   ,[TEMP].[COD_BRANCH]
				   ,[TEMP].[STATE_NAME]
				   ,[TEMP].[CITY_NAME]
				   ,[TEMP].[COD_SITUATION]
				   ,[TEMP].[COD_DEPTO_BRANCH]
				   ,[TEMP].[GROSS_VALUE_AGENCY]
				   ,[TEMP].[NET_VALUE_AGENCY]
				   ,[TEMP].[TYPE_TRAN]
				   ,[TEMP].[COD_SOURCE_TRAN]
				   ,[TEMP].[POSWEB]
				   ,[TEMP].[SEGMENTS_NAME]
				   ,[TEMP].[CREATED_AT]
				   ,[TEMP].[COD_EC_TRANS]
				   ,[TEMP].[TRANS_EC_NAME]
				   ,[TEMP].[TRANS_EC_CPF_CNPJ]
				   ,[TEMP].[SPLIT]
				   ,[SALES_REP]
				   ,[COD_USER_REP]
				   ,GETDATE()
				   ,[CREDITOR_DOCUMENT]
				   ,[COD_SALES_REP]
				   ,[TEMP].[MODEL_POS]
				   ,[CARD_NAME]
				   ,[CNAE]
				   ,[COD_USER]
				   ,[NAME_USER]
				   ,[LINK_PAYMENT]
				   ,[CUSTOMER_EMAIL]
				   ,[CUSTOMER_IDENTIFICATION]
				   ,[TEMP].[PAYMENT_LINK_TRACKING]
				   ,[TEMP].[NAME_PRODUCT_EC]
				   ,[TEMP].[EC_PRODUCT]
				   ,[TEMP].[EC_PRODUCT_CPF_CNPJ]
				   ,[TEMP].[SALES_TYPE]
				   ,[TEMP].PLAN_DZEROEC
				   ,[TEMP].PLAN_DZEROAFF
				FROM [#TB_REPORT_TRANSACTIONS_EXP_INSERT] AS [TEMP]);

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_INSERT]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_INSERT].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;


		---------------------------------------------                              
		--------------RECORDS UPDATE-----------------                              
		---------------------------------------------                                
		SELECT
			[VW_REPORT_TRANSACTIONS_EXP].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COMMENT]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[COD_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[NAME_USER]
		   ,[VW_REPORT_TRANSACTIONS_EXP].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_EXP]
		WHERE [VW_REPORT_TRANSACTIONS_EXP].[REP_COD_TRAN] IS NOT NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_EXP_UPDATE];

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_TRANSACTIONS_EXP]
			SET [REPORT_TRANSACTIONS_EXP].[SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_SITUATION]
			   ,[REPORT_TRANSACTIONS_EXP].[COMMENT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COMMENT]
			   ,[REPORT_TRANSACTIONS_EXP].[MODIFY_DATE] = GETDATE()
			   ,[REPORT_TRANSACTIONS_EXP].[COD_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[NAME_USER] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[NAME_USER]
			   ,[REPORT_TRANSACTIONS_EXP].[AMOUNT] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[AMOUNT]
			FROM [REPORT_TRANSACTIONS_EXP]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN]);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_EXP_UPDATE]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_EXP_UPDATE].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;
	END;
END;


GO

IF OBJECT_ID('[SP_REPORT_TRANSACTIONS_EXP]') IS NOT NULL
	DROP PROCEDURE [SP_REPORT_TRANSACTIONS_EXP]
GO
CREATE PROCEDURE [DBO].[SP_REPORT_TRANSACTIONS_EXP]
/***************************************************************************************        
----------------------------------------------------------------------------------------        
Procedure Name: [SP_REPORT_TRANSACTIONS_EXP]        
Project.......: TKPP        
------------------------------------------------------------------------------------------        
Author               VERSION         Date                     Description        
------------------------------------------------------------------------------------------        
Fernando Henrique F.   V1         13/12/2018               Creation        
Kennedy Alef           V2         16/01/2018               Modify        
Lucas Aguiar           V2         23/04/2019               ROTINA DE SPLIT        
Caike Uch�a            V3         15/08/2019               inserting coluns        
Marcus Gall            V4         28/11/2019               Add Model_POS, Segment, Location EC        
Caike Uch�a            V5         20/01/2020               ADD CNAE        
Kennedy Alef           v3         08/04/2020               add link de pagamento        
Caike Uch�a            v4         30/04/2020               insert ec prod        
Caike Uch�a            v5         17/08/2020               Add SALES_TYPE      
---------------------------------------------           ---------------------------------------------        
********************************************************************************************/ (@CODCOMP VARCHAR(10),
@INITIAL_DATE DATETIME,
@FINAL_DATE DATETIME,
@EC VARCHAR(10),
@BRANCH VARCHAR(10),
@DEPART VARCHAR(10),
@TERMINAL VARCHAR(100),
@STATE VARCHAR(100),
@CITY VARCHAR(100),
@TYPE_TRAN VARCHAR(10),
@SITUATION VARCHAR(10),
@NSU VARCHAR(100) = NULL,
@NSU_EXT VARCHAR(100) = NULL,
@BRAND VARCHAR(50) = NULL,
@PAN VARCHAR(50) = NULL,
@COD_AFFILIATOR INT = NULL,
@TRACKING_TRANSACTION VARCHAR(100) = NULL,
@DESCRIPTION VARCHAR(100) = NULL,
@SPOT_ELEGIBLE INT = 0,
@COD_ACQ INT = NULL,
@SOURCE_TRAN INT = NULL,
@POSWEB INT = 0,
@SPLIT INT = NULL,
@INITIAL_VALUE DECIMAL(22, 6) = NULL,
@FINAL_VALUE DECIMAL(22, 6) = NULL,
@COD_SALES_REP INT = NULL)
AS
BEGIN
	DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
	DECLARE @TIME_FINAL_DATE TIME;
	SET NOCOUNT ON;
	SET ARITHABORT ON;
	BEGIN
		SET @TIME_FINAL_DATE = FORMAT(CAST(@FINAL_DATE AS TIME), N'hh\:mm\:ss');
		--SET @INITIAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0));        
		--SET @FINAL_DATE = CAST(@INITIAL_DATE AS DATETIME2(0)); )        
		SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);
		IF (@TIME_FINAL_DATE = '00:00:00')
			SET @FINAL_DATE = CONCAT(CAST(@FINAL_DATE AS DATE), ' ', FORMAT(CAST('23:59:59' AS TIME), N'hh\:mm\:ss'));
		SET @QUERY_BASIS = '        
   SELECT [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE        
      ,[REPORT_TRANSACTIONS_EXP].AMOUNT        
      ,[REPORT_TRANSACTIONS_EXP].PLOTS        
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE        
      ,[REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE        
      ,[REPORT_TRANSACTIONS_EXP].CPF_CNPJ        
      ,[REPORT_TRANSACTIONS_EXP].NAME        
      ,[REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP        
      ,[REPORT_TRANSACTIONS_EXP].TID        
      ,[REPORT_TRANSACTIONS_EXP].SITUATION        
      ,[REPORT_TRANSACTIONS_EXP].BRAND        
      ,[REPORT_TRANSACTIONS_EXP].PAN        
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE, '''') AS TRAN_DATA_EXT_VALUE        
      ,COALESCE([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT, '''') AS TRAN_DATA_EXT        
   ,(        
      SELECT TRANSACTION_DATA_EXT.[VALUE] FROM TRANSACTION_DATA_EXT        
   WHERE TRANSACTION_DATA_EXT.[NAME]= ''AUTHCODE'' AND TRANSACTION_DATA_EXT.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN        
      ) AS [AUTH_CODE]        
      ,[REPORT_TRANSACTIONS_EXP].COD_AC        
      ,[REPORT_TRANSACTIONS_EXP].NAME_ACQUIRER        
      ,[REPORT_TRANSACTIONS_EXP].COMMENT        
  ,[REPORT_TRANSACTIONS_EXP].TAX        
      ,[REPORT_TRANSACTIONS_EXP].ANTICIPATION        
      ,[REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR        
      ,[REPORT_TRANSACTIONS_EXP].NAME_AFFILIATOR        
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE        
      ,[REPORT_TRANSACTIONS_EXP].GROSS_VALUE_AGENCY        
      ,[REPORT_TRANSACTIONS_EXP].NET_VALUE_AGENCY        
      ,[REPORT_TRANSACTIONS_EXP].TYPE_TRAN        
      ,[REPORT_TRANSACTIONS_EXP].POSWEB        
      ,[REPORT_TRANSACTIONS_EXP].CITY_NAME        
      ,[REPORT_TRANSACTIONS_EXP].STATE_NAME        
      ,[REPORT_TRANSACTIONS_EXP].SEGMENTS_NAME        
      ,[REPORT_TRANSACTIONS_EXP].COD_EC_TRANS        
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_NAME        
      ,[REPORT_TRANSACTIONS_EXP].TRANS_EC_CPF_CNPJ        
      ,[REPORT_TRANSACTIONS_EXP].SPLIT        
      ,[REPORT_TRANSACTIONS_EXP].[SALES_REP]        
      ,[REPORT_TRANSACTIONS_EXP].CREDITOR_DOCUMENT        
      ,REPORT_TRANSACTIONS_EXP.COD_SALES_REP        
      ,[REPORT_TRANSACTIONS_EXP].MODEL_POS        
      ,[REPORT_TRANSACTIONS_EXP].CARD_NAME        
      ,[REPORT_TRANSACTIONS_EXP].CNAE        
      ,[REPORT_TRANSACTIONS_EXP].LINK_PAYMENT_SERVICE        
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_EMAIL        
      ,[REPORT_TRANSACTIONS_EXP].CUSTOMER_IDENTIFICATION        
      ,[REPORT_TRANSACTIONS_EXP].PAYMENT_LINK_TRACKING        
      ,[REPORT_TRANSACTIONS_EXP].[NAME_PRODUCT_EC]        
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT]        
      ,[REPORT_TRANSACTIONS_EXP].[EC_PRODUCT_CPF_CNPJ]        
   ,[REPORT_TRANSACTIONS_EXP].[SALES_TYPE]      
   ,[REPORT_TRANSACTIONS_EXP].DZERO_EC_TAX    
   ,[REPORT_TRANSACTIONS_EXP].DZERO_AFF_TAX    
   FROM [dbo].[REPORT_TRANSACTIONS_EXP]        
   WHERE [REPORT_TRANSACTIONS_EXP].COD_COMP = @CODCOMP        
    ';
		IF @INITIAL_DATE IS NOT NULL
			AND @FINAL_DATE IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST([REPORT_TRANSACTIONS_EXP].TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME)');
		IF @EC IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_EC = @EC ');
		IF @BRANCH IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND[REPORT_TRANSACTIONS_EXP].COD_BRANCH = @BRANCH ');
		IF @DEPART IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_DEPTO_BRANCH = @DEPART ');
		IF LEN(@TERMINAL) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].SERIAL_EQUIP = @TERMINAL');
		IF LEN(@STATE) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].STATE_NAME = @STATE ');
		IF LEN(@CITY) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].CITY_NAME = @CITY ');
		IF LEN(@TYPE_TRAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.CODE FROM TRANSACTION_TYPE tt WHERE tt.COD_TTYPE = @TYPE_TRAN AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_TYPE = tt.CODE )');
		IF LEN(@SITUATION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND EXISTS( SELECT tt.SITUATION_TR FROM [TRADUCTION_SITUATION] tt WHERE tt.COD_SITUATION = @SITUATION AND [REPORT_TRANSACTIONS_EXP].SITUATION = tt.SITUATION_TR )');
		IF LEN(@BRAND) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].BRAND = @BRAND ');
		IF LEN(@PAN) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PAN = @PAN ');
		IF LEN(@NSU) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRANSACTION_CODE = @NSU ');
		IF LEN(@NSU_EXT) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT_VALUE = @NSU_EXT ');
		--ELSE        
		-- SET @QUERY_BASIS = CONCAT(@QUERY_BASIS,' AND ([REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''RCPTTXID'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT IS NULL        
		-- OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''AUTO'' OR [REPORT_TRANSACTIONS_EXP].TRAN_DATA_EXT = ''NSU'' ) ');        
		IF @COD_AFFILIATOR IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AFFILIATOR = @COD_AFFILIATOR ');
		IF LEN(@TRACKING_TRANSACTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].TRACKING_TRANSACTION = @TRACKING_TRANSACTION ');
		IF LEN(@DESCRIPTION) > 0
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].DESCRIPTION LIKE %@DESCRIPTION%');
		IF @SPOT_ELEGIBLE = 1
		BEGIN
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].PLOTS > 1 AND (SELECT COUNT(*) FROM TRANSACTION_TITLES title JOIN [TRANSACTION] title_tran ON title_tran.COD_TRAN = title.COD_TRAN WHERE [VW_REPORT_TRANSACTIONS].TRANSACTION_CODE  
  
    
      
        = title_tran.CODE AND title.PREVISION_PAY_DATE > @FINAL_DATE ) > 0 AND TRANSACTION_TITLES.COD_SITUATION = 4 ');
		END;
		IF @COD_ACQ IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_AC = @COD_ACQ');
		IF @SOURCE_TRAN IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SOURCE_TRAN = @SOURCE_TRAN');
		IF @POSWEB = 1
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].POSWEB = @POSWEB');
		IF (@INITIAL_VALUE > 0)
			AND (@FINAL_VALUE >= @INITIAL_VALUE)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].AMOUNT BETWEEN @INITIAL_VALUE AND @FINAL_VALUE');
		IF (@SPLIT = 1)
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, 'AND [REPORT_TRANSACTIONS_EXP].SPLIT = 1');
		IF @COD_SALES_REP IS NOT NULL
			SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND [REPORT_TRANSACTIONS_EXP].COD_SALES_REP = @COD_SALES_REP');
		SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY [REPORT_TRANSACTIONS_EXP].CREATED_AT DESC');
		--SELECT @QUERY_BASIS        
		EXEC [sp_executesql] @QUERY_BASIS
							,N'        
   @CODCOMP VARCHAR(10),        
   @INITIAL_DATE DATETIME,        
   @FINAL_DATE DATETIME,        
   @EC int,        
   @BRANCH int,        
   @DEPART int,        
   @TERMINAL varchar(14),        
   @STATE varchar(25),        
   @CITY varchar(40),        
   @TYPE_TRAN VARCHAR(10),        
   @SITUATION VARCHAR(10),        
   @NSU varchar(100),        
   @NSU_EXT varchar(100),        
   @BRAND varchar(50),        
   @COD_AFFILIATOR INT,        
   @PAN VARCHAR(50),        
   @SOURCE_TRAN INT,        
   @POSWEB INT,        
   @INITIAL_VALUE DECIMAL(22,6),        
   @FINAL_VALUE DECIMAL(22,6),        
   @COD_SALES_REP INT,        
   @COD_ACQ INT        
   '
							,@CODCOMP = @CODCOMP
							,@INITIAL_DATE = @INITIAL_DATE
							,@FINAL_DATE = @FINAL_DATE
							,@EC = @EC
							,@BRANCH = @BRANCH
							,@DEPART = @DEPART
							,@TERMINAL = @TERMINAL
							,@STATE = @STATE
							,@CITY = @CITY
							,@TYPE_TRAN = @TYPE_TRAN
							,@SITUATION = @SITUATION
							,@NSU = @NSU
							,@NSU_EXT = @NSU_EXT
							,@BRAND = @BRAND
							,@PAN = @PAN
							,@COD_AFFILIATOR = @COD_AFFILIATOR
							,@SOURCE_TRAN = @SOURCE_TRAN
							,@POSWEB = @POSWEB
							,@INITIAL_VALUE = @INITIAL_VALUE
							,@FINAL_VALUE = @FINAL_VALUE
							,@COD_SALES_REP = @COD_SALES_REP
							,@COD_ACQ = @COD_ACQ;
	END;
END;


GO

INSERT INTO PlanDZeroSchedule (ProcessAtHour, WindowMaxHour)
	VALUES (14, 11);

GO



IF OBJECT_ID('[SP_REG_REPORT_TRANSACTIONS_PRCS]') IS NOT NULL
	DROP PROCEDURE [SP_REG_REPORT_TRANSACTIONS_PRCS]
GO
CREATE PROCEDURE [DBO].[SP_REG_REPORT_TRANSACTIONS_PRCS]

/*****************************************************************************************************************    
----------------------------------------------------------------------------------------                            
Procedure Name: [SP_REG_REPORT_TRANSACTIONS_PRCS]                            
Project.......: TKPP                            
------------------------------------------------------------------------------------------                            
Author                          VERSION        Date                            Description                            
------------------------------------------------------------------------------------------                            
LUCAS AGUIAR                      V1        16/01/2019                          Creation                    
LUCAS AGUIAR                      V2        23-04-2019                         ROTINA SPLIT       
Caike Uchôa                       V3        12-08-2020                         ADD AMOUNT_NEW  
Caike Uchôa                       V4        31-08-2020                         Add EC_PROD, CPF_CNPJ...  
------------------------------------------------------------------------------------------    
*****************************************************************************************************************/

AS
BEGIN
	DECLARE @COUNT INT = 0;




	BEGIN

		---------------------------------------------                          
		--------------RECORDS INSERT-----------------                          
		---------------------------------------------                         

		SELECT
			[VW_REPORT_TRANSACTIONS_PRCS].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_AC]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_COMP]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SOURCE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[POSWEB]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_CODE]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[AMOUNT]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[PLOTS]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_DATE]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANSACTION_TYPE]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TYPE_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_EC]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[SERIAL_EQUIP]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TID]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[BRAND]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[NSU_EXT]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[PAN]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME_AFFILIATOR]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRACKING_TRANSACTION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[DESCRIPTION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_EC_TRANS]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANS_EC_NAME]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[TRANS_EC_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SALES_REP]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[CREATED_AT]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[SALES_REP_NAME]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[LINK_PAYMENT_SERVICE]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[CUSTOMER_EMAIL]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[CUSTOMER_IDENTIFICATION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[PAYMENT_LINK_TRACKING]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[NAME_PROD]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].EC_PRODUTO
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[EC_PROD_CPF_CNPJ]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].COD_EC_PROD INTO [#TB_REPORT_TRANSACTIONS_PRCS_INSERT]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_PRCS]
		WHERE [VW_REPORT_TRANSACTIONS_PRCS].[REP_COD_TRAN] IS NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_PRCS_INSERT];

		IF @COUNT > 0
		BEGIN
			INSERT INTO [DBO].[REPORT_TRANSACTIONS] ([COD_TRAN],
			[COD_AC],
			[COD_COMP],
			[COD_SOURCE_TRAN],
			[POSWEB],
			[TRANSACTION_CODE],
			[TYPE_TRAN],
			[AMOUNT],
			[PLOTS],
			[TRANSACTION_DATE],
			[TRANSACTION_TYPE],
			[CPF_CNPJ],
			[NAME],
			[COD_EC],
			[SERIAL_EQUIP],
			[TID],
			[SITUATION],
			[COD_SITUATION],
			[BRAND],
			[NSU_EXT],
			[PAN],
			[COD_AFFILIATOR],
			[NAME_AFFILIATOR],
			[TRACKING_TRANSACTION],
			[DESCRIPTION],
			[COD_EC_TRANS],
			[TRANS_EC_NAME],
			[TRANS_EC_CPF_CNPJ],
			[CREATED_AT],
			[MODIFY_DATE],
			[COD_SALE_REP],
			[SALES_REPRESENTATIVE],
			[LINK_PAYMENT_SERVICE],
			[CUSTOMER_EMAIL], [CUSTOMER_IDENTIFICATION],
			[PAYMENT_LINK_TRACKING],
			[NAME_PROD],
			[EC_PROD],
			[EC_PROD_CPF_CNPJ],
			[COD_EC_PROD])
				SELECT
					[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_TRAN]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_AC]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_COMP]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SOURCE_TRAN]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[POSWEB]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_CODE]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TYPE_TRAN]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[AMOUNT]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PLOTS]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_DATE]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANSACTION_TYPE]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CPF_CNPJ]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SERIAL_EQUIP]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TID]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SITUATION]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SITUATION]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[BRAND]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NSU_EXT]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PAN]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_AFFILIATOR]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME_AFFILIATOR]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRACKING_TRANSACTION]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[DESCRIPTION]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC_TRANS]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANS_EC_NAME]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[TRANS_EC_CPF_CNPJ]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CREATED_AT]
				   ,GETDATE()
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_SALES_REP]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[SALES_REP_NAME]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[LINK_PAYMENT_SERVICE]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CUSTOMER_EMAIL]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[CUSTOMER_IDENTIFICATION]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[PAYMENT_LINK_TRACKING]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[NAME_PROD]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[EC_PRODUTO]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[EC_PROD_CPF_CNPJ]
				   ,[#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_EC_PROD]
				FROM [#TB_REPORT_TRANSACTIONS_PRCS_INSERT];

			IF @@rowcount < 1
				THROW 60000, 'COULD NOT REGISTER [REPORT_TRANSACTIONS_EXP] ', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_INSERT]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_PRCS_INSERT].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 4;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](INSERT)', 1;
		END;


		---------------------------------------------                          
		--------------RECORDS UPDATE-----------------                          
		---------------------------------------------                            
		SELECT
			[VW_REPORT_TRANSACTIONS_PRCS].[COD_TRAN]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[COD_SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[SITUATION]
		   ,[VW_REPORT_TRANSACTIONS_PRCS].[AMOUNT] INTO [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]
		FROM [DBO].[VW_REPORT_TRANSACTIONS_PRCS]
		WHERE [VW_REPORT_TRANSACTIONS_PRCS].[REP_COD_TRAN] IS NOT NULL;

		SELECT
			@COUNT = COUNT(*)
		FROM [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE];

		IF @COUNT > 0
		BEGIN
			UPDATE [REPORT_TRANSACTIONS]
			SET [REPORT_TRANSACTIONS].[SITUATION] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[SITUATION]
			   ,[REPORT_TRANSACTIONS].[COD_SITUATION] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_SITUATION]
			   ,[REPORT_TRANSACTIONS].[MODIFY_DATE] = GETDATE()
			   ,[REPORT_TRANSACTIONS].AMOUNT = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[AMOUNT]
			FROM [REPORT_TRANSACTIONS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]
				ON ([REPORT_TRANSACTIONS].[COD_TRAN] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_TRAN]);

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [REPORT_TRANSACTIONS_EX]', 1;

			UPDATE [PROCESS_BG_STATUS]
			SET [STATUS_PROCESSED] = 1
			   ,[MODIFY_DATE] = GETDATE()
			FROM [PROCESS_BG_STATUS]
			INNER JOIN [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE]
				ON ([PROCESS_BG_STATUS].[CODE] = [#TB_REPORT_TRANSACTIONS_PRCS_UPDATE].[COD_TRAN])
			WHERE [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 4;

			IF @@rowcount < 1
				THROW 60001, 'COULD NOT UPDATE [PROCESS_BG_STATUS](UPDATE)', 1;
		END;


	END;
END;

GO

IF OBJECT_ID('[SP_FD_APPLIED_TAX_TRAN_DETAILS]') IS NOT NULL
	DROP PROCEDURE SP_FD_APPLIED_TAX_TRAN_DETAILS
GO
CREATE PROCEDURE SP_FD_APPLIED_TAX_TRAN_DETAILS (@NSU VARCHAR(200))
AS
BEGIN

	SELECT
		t.CODE AS NSU_TRANSACAO
	   ,t.CREATED_AT AS DATA_TRANSACAO
	   ,t.MODIFY_DATE AS MODIFICACAO_TRANSACAO
	   ,tt1.CODE AS TIPO_TRANSACAO
	   ,p.CODE AS NOME_PLANO
	   ,tp1.CODE AS TIPO_PLANO
	   ,atd.PARCENTAGE AS MDR_PLANO
	   ,atd.ANTICIPATION_PERCENTAGE AS ANTECIPACAO_PLANO
	   ,atd.RATE AS TARIFA_PLANO
	   ,atd.ACTIVE AS PLANO_ATIVO
	   ,USERS.COD_ACCESS AS USUARIO_CAD_PLANO
	   ,tt.PREVISION_PAY_DATE AS PREVISAO_PAGAMENTO
	   ,tt.PREVISION_RECEIVE_DATE AS PREVISAO_RECEBIMENTO
		--,tt.ANTICIP_PERCENT        
	   ,tt.TAX_INITIAL AS MDR_APLICADO
	   ,tt.ANTICIP_PERCENT AS ANTECIPACAO_APLICADA
	   ,tt.IS_SPOT AS INDICADOR_SPOT
	   ,ce.SPOT_TAX AS TAXA_SPOT_EC
	   ,ts.SITUATION_TR
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = t.COD_TRAN
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS PLAN_DZEROEC
	   ,ISNULL((SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = t.COD_TRAN
			AND isa.NAME = 'PlanDZero')
		, 0)
		AS PLAN_DZEROAFF
	FROM [TRANSACTION] t WITH (NOLOCK)
	INNER JOIN TRANSACTION_TITLES tt
		ON t.COD_TRAN = tt.COD_TRAN
	INNER JOIN ASS_TAX_DEPART atd WITH (NOLOCK)
		ON tt.COD_ASS_TX_DEP = atd.COD_ASS_TX_DEP
	INNER JOIN [PLAN] p WITH (NOLOCK)
		ON atd.COD_PLAN = p.COD_PLAN
	INNER JOIN TYPE_PLAN tp1 WITH (NOLOCK)
		ON p.COD_T_PLAN = tp1.COD_T_PLAN
	INNER JOIN USERS WITH (NOLOCK)
		ON atd.COD_USER = USERS.COD_USER
	--INNER JOIN ASS_DEPTO_EQUIP ade WITH (NOLOCK)        
	-- ON t.COD_ASS_DEPTO_TERMINAL = ade.COD_ASS_DEPTO_TERMINAL        
	--INNER JOIN DEPARTMENTS_BRANCH db WITH (NOLOCK)        
	-- ON ade.COD_DEPTO_BRANCH = db.COD_DEPTO_BRANCH        
	--INNER JOIN BRANCH_EC be WITH (NOLOCK)        
	-- ON db.COD_BRANCH = be.COD_BRANCH        
	INNER JOIN COMMERCIAL_ESTABLISHMENT ce WITH (NOLOCK)
		ON tt.COD_EC = ce.COD_EC
	INNER JOIN TRANSACTION_TYPE tt1 WITH (NOLOCK)
		ON atd.COD_TTYPE = tt1.COD_TTYPE
	INNER JOIN SITUATION s
		ON t.COD_SITUATION = s.COD_SITUATION
	INNER JOIN TRADUCTION_SITUATION ts
		ON s.COD_SITUATION = ts.COD_SITUATION
	WHERE t.CODE = @NSU
	ORDER BY 1 DESC

END;

GO
IF OBJECT_ID('VW_REPORT_TRANSACTIONS_EXP') IS NOT NULL
BEGIN
	DROP VIEW [dbo].[VW_REPORT_TRANSACTIONS_EXP]
END
GO

CREATE VIEW [dbo].[VW_REPORT_TRANSACTIONS_EXP]
AS
ALTER VIEW [DBO].[VW_REPORT_TRANSACTIONS_EXP]
/*----------------------------------------------------------------------------------------                                  
Procedure Name: [VW_REPORT_TRANSACTIONS_EXP]                                  
Project.......: TKPP                                  
------------------------------------------------------------------------------------------                                  
Author                          VERSION        Date                            Description                                  
------------------------------------------------------------------------------------------                                  
Marcus Gall                        V1       28/11/2019             Add Model_POS, Segment, Location EC                        
Caike Uch�a                        v2       10/01/2020                         add CNAE              
Kennedy Alef                       v3       08/04/2020                      add link de pagamento        
Caike Uch�a                        v4       30/04/2020                        insert ec prod        
Caike Uch�a                        v5       17/08/2020                        Add SALES_TYPE      
Kennedy Alef                       v6       02/09/2020                        Add change calculations    
------------------------------------------------------------------------------------------*/
AS
WITH CTE
AS
(SELECT TOP (1000)
		[TRANSACTION].[COD_TRAN]
	   ,[TRANSACTION].[CODE] AS [TRANSACTION_CODE]
	   ,[TRANSACTION].[AMOUNT] AS [AMOUNT]
	   ,[TRANSACTION].[PLOTS] AS [PLOTS]
	   ,CAST([DBO].[FN_FUS_UTF]([TRANSACTION].[CREATED_AT]) AS DATETIME) AS [TRANSACTION_DATE]
	   ,[TRANSACTION_TYPE].[CODE] AS [TRANSACTION_TYPE]
	   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ]
	   ,[COMMERCIAL_ESTABLISHMENT].[NAME]
	   ,[EQUIPMENT].[SERIAL] AS [SERIAL_EQUIP]
	   ,[EQUIPMENT].[TID] AS [TID]
	   ,[TRADUCTION_SITUATION].[SITUATION_TR] AS [SITUATION]
	   ,[TRANSACTION].[BRAND]
	   ,[TRANSACTION].[PAN]
	   ,[TRANSACTION_DATA_EXT].[NAME] AS [TRAN_DATA_EXT]
	   , --TRANSACTION_DATA_EXT.NAME                                      
		[TRANSACTION_DATA_EXT].[VALUE] AS [TRAN_DATA_EXT_VALUE]
	   , --TRANSACTION_DATA_EXT.VALUE                                     
		(SELECT
				[TRANSACTION_DATA_EXT].[VALUE]
			FROM [TRANSACTION_DATA_EXT] WITH (NOLOCK)
			WHERE [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
			AND [TRANSACTION_DATA_EXT].[NAME] = 'AUTHCODE')
		AS [AUTH_CODE]
	   ,[ACQUIRER].[COD_AC]
	   ,[ACQUIRER].[NAME] AS [NAME_ACQUIRER]
	   ,[TRANSACTION].[COMMENT] AS [COMMENT]
	   ,[ASS_TAX_DEPART].[PARCENTAGE] AS [TAX]
	   ,COALESCE([ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE], 0) AS [ANTICIPATION]
	   ,[AFFILIATOR].[COD_AFFILIATOR]
	   ,[AFFILIATOR].[NAME] AS [NAME_AFFILIATOR]
	   ,
		--  (CASE    
		-- WHEN [SITUATION].[COD_SITUATION] = 3 AND    
		--  [PLAN].[COD_T_PLAN] = 2 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], [ASS_TAX_DEPART].[ANTICIPATION_PERCENTAGE]) - [ASS_TAX_DEPART].[RATE])    
		-- WHEN [SITUATION].[COD_SITUATION] = 3 AND    
		--  [PLAN].[COD_T_PLAN] = 1 THEN ([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([TRANSACTION].[AMOUNT], [ASS_TAX_DEPART].[PARCENTAGE], [TRANSACTION].[PLOTS], 0) - [ASS_TAX_DEPART].[RATE])    
		-- ELSE 0    
		--END) AS [NET_VALUE]    
		--  ,    
		--------------******------------                                      
		[TRANSACTION].[COD_TTYPE]
	   ,[COMPANY].[COD_COMP]
	   ,[BRANCH_EC].[COD_EC]
	   ,[BRANCH_EC].[COD_BRANCH]
	   ,[STATE].[NAME] AS [STATE_NAME]
	   ,[CITY].[NAME] AS [CITY_NAME]
	   ,[SITUATION].[COD_SITUATION]
	   ,[DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH]
	   ,COALESCE([POSWEB_DATA_TRANSACTION].[AMOUNT], 0) AS [GROSS_VALUE_AGENCY]
	   ,COALESCE([DBO].[FNC_ANT_VALUE_LIQ_TRAN]([POSWEB_DATA_TRANSACTION].[AMOUNT], [POSWEB_DATA_TRANSACTION].[MDR], [POSWEB_DATA_TRANSACTION].[PLOTS], [POSWEB_DATA_TRANSACTION].[ANTICIPATION]) - [POSWEB_DATA_TRANSACTION].[TARIFF], 0) AS [NET_VALUE_AGENCY]


	   ,[SOURCE_TRANSACTION].[DESCRIPTION] AS [TYPE_TRAN]
	   ,[TRANSACTION].[COD_SOURCE_TRAN]
	   ,COALESCE([TRANSACTION].[POSWEB], 0) AS [POSWEB]
	   ,[SEGMENTS].[NAME] AS [SEGMENTS_NAME]
	   ,[TRANSACTION].[CREATED_AT]
	   ,[REPORT_TRANSACTIONS_EXP].[COD_TRAN] AS [REP_COD_TRAN]
	   ,[EC_TRAN].[COD_EC] AS [COD_EC_TRANS]
	   ,[EC_TRAN].[NAME] AS [TRANS_EC_NAME]
	   ,[EC_TRAN].[CPF_CNPJ] AS [TRANS_EC_CPF_CNPJ]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 4)
				> 0 THEN 1
			ELSE 0
		END AS [SPLIT]
	   ,[USERS].[IDENTIFICATION] AS [SALES_REP]
	   ,[USERS].[COD_USER] AS [COD_USER_REP]
	   ,COALESCE([TRANSACTION].[CREDITOR_DOCUMENT], 'NOT CREDITOR_DOCUMENT') AS [CREDITOR_DOCUMENT]
	   ,[SALES_REPRESENTATIVE].[COD_SALES_REP]
	   ,[EQUIPMENT_MODEL].[CODIGO] AS [MODEL_POS]
	   ,[TRANSACTION].[CARD_HOLDER_NAME] AS [CARD_NAME]
	   ,[SEGMENTS].[CNAE]
	   ,[TRANSACTION].[COD_USER]
	   ,[USER_TRAN].[IDENTIFICATION] AS [NAME_USER]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
				> 0 THEN 1
			ELSE 0
		END AS [LINK_PAYMENT]
	   ,[TRANSACTION].[CUSTOMER_EMAIL]
	   ,[TRANSACTION].[CUSTOMER_IDENTIFICATION]
	   ,CASE
			WHEN (SELECT
						COUNT(*)
					FROM [TRANSACTION_SERVICES]
					WHERE [TRANSACTION_SERVICES].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
					AND [TRANSACTION_SERVICES].[COD_ITEM_SERVICE] = 10)
				> 0 THEN [TRANSACTION].[TRACKING_TRANSACTION]
			ELSE NULL
		END AS [PAYMENT_LINK_TRACKING]
	   ,[TRAN_PROD].[NAME] AS [NAME_PRODUCT_EC]
	   ,[EC_PROD].[NAME] AS [EC_PRODUCT]
	   ,[EC_PROD].CPF_CNPJ AS [EC_PRODUCT_CPF_CNPJ]
	   ,[PROD_ACQ].[NAME] AS [SALES_TYPE]
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_EC
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROEC
	   ,(SELECT
				TRANSACTION_SERVICES.TAX_PLANDZERO_AFF
			FROM TRANSACTION_SERVICES WITH (NOLOCK)
			INNER JOIN ITEMS_SERVICES_AVAILABLE isa
				ON TRANSACTION_SERVICES.COD_ITEM_SERVICE = isa.COD_ITEM_SERVICE
			WHERE TRANSACTION_SERVICES.COD_TRAN = [TRANSACTION].COD_TRAN
			AND isa.NAME = 'PlanDZero')
		AS PLAN_DZEROAFF
	FROM [TRANSACTION] WITH (NOLOCK)
	LEFT JOIN [DBO].[PROCESS_BG_STATUS]
		ON ([PROCESS_BG_STATUS].[CODE] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [ASS_DEPTO_EQUIP]
		ON [ASS_DEPTO_EQUIP].[COD_ASS_DEPTO_TERMINAL] = [TRANSACTION].[COD_ASS_DEPTO_TERMINAL]
	LEFT JOIN [EQUIPMENT]
		ON [EQUIPMENT].[COD_EQUIP] = [ASS_DEPTO_EQUIP].[COD_EQUIP]
	LEFT JOIN [DEPARTMENTS_BRANCH]
		ON [DEPARTMENTS_BRANCH].[COD_DEPTO_BRANCH] = [ASS_DEPTO_EQUIP].[COD_DEPTO_BRANCH]
	LEFT JOIN [DEPARTMENTS]
		ON [DEPARTMENTS].[COD_DEPARTS] = [DEPARTMENTS_BRANCH].[COD_DEPARTS]
	LEFT JOIN [BRANCH_EC]
		ON [BRANCH_EC].[COD_BRANCH] = [DEPARTMENTS_BRANCH].[COD_BRANCH]
	LEFT JOIN [ADDRESS_BRANCH]
		ON [ADDRESS_BRANCH].[COD_BRANCH] = [BRANCH_EC].[COD_BRANCH]
	LEFT JOIN [NEIGHBORHOOD]
		ON [NEIGHBORHOOD].[COD_NEIGH] = [ADDRESS_BRANCH].[COD_NEIGH]
	LEFT JOIN [ASS_TAX_DEPART]
		ON [ASS_TAX_DEPART].[COD_ASS_TX_DEP] = [TRANSACTION].[COD_ASS_TX_DEP]
	LEFT JOIN [PLAN]
		ON [PLAN].[COD_PLAN] = [ASS_TAX_DEPART].[COD_PLAN]
	LEFT JOIN [CITY]
		ON [CITY].[COD_CITY] = [NEIGHBORHOOD].[COD_CITY]
	LEFT JOIN [STATE]
		ON [STATE].[COD_STATE] = [CITY].[COD_STATE]
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT]
		ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [BRANCH_EC].[COD_EC]
	LEFT JOIN [COMPANY]
		ON [COMPANY].[COD_COMP] = [COMMERCIAL_ESTABLISHMENT].[COD_COMP]
	LEFT JOIN [TRANSACTION_TYPE]
		ON [TRANSACTION_TYPE].[COD_TTYPE] = [TRANSACTION].[COD_TTYPE]
	LEFT JOIN [SITUATION]
		ON [SITUATION].[COD_SITUATION] = [TRANSACTION].[COD_SITUATION]
	LEFT JOIN [TRADUCTION_SITUATION]
		ON [TRADUCTION_SITUATION].[COD_SITUATION] = [SITUATION].[COD_SITUATION]
	LEFT JOIN [SEGMENTS]
		ON [SEGMENTS].[COD_SEG] = [COMMERCIAL_ESTABLISHMENT].[COD_SEG]
	LEFT JOIN [DBO].[REPORT_TRANSACTIONS_EXP]
		ON ([REPORT_TRANSACTIONS_EXP].[COD_TRAN] = [TRANSACTION].[COD_TRAN])
	LEFT JOIN [TRANSACTION_DATA_EXT] WITH (NOLOCK)
		ON [TRANSACTION_DATA_EXT].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [AFFILIATOR]
		ON [AFFILIATOR].[COD_AFFILIATOR] = [COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
	LEFT JOIN [POSWEB_DATA_TRANSACTION]
		ON [POSWEB_DATA_TRANSACTION].[COD_TRAN] = [TRANSACTION].[COD_TRAN]
	LEFT JOIN [DBO].[SOURCE_TRANSACTION] WITH (NOLOCK)
		ON ([SOURCE_TRANSACTION].[COD_SOURCE_TRAN] = [TRANSACTION].[COD_SOURCE_TRAN])
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT] AS [EC_TRAN] WITH (NOLOCK)
		ON [EC_TRAN].[COD_EC] = [TRANSACTION].[COD_EC]
	LEFT JOIN [SALES_REPRESENTATIVE]
		ON [SALES_REPRESENTATIVE].[COD_SALES_REP] = [COMMERCIAL_ESTABLISHMENT].[COD_SALES_REP]
	LEFT JOIN [USERS]
		ON [USERS].[COD_USER] = [SALES_REPRESENTATIVE].[COD_USER]
	LEFT JOIN [USERS] AS [USER_TRAN]
		ON [USER_TRAN].[COD_USER] = [TRANSACTION].[COD_USER]
	LEFT JOIN [ASS_TR_TYPE_COMP]
		ON [ASS_TR_TYPE_COMP].[COD_ASS_TR_COMP] = [TRANSACTION].[COD_ASS_TR_COMP]
	LEFT JOIN [ACQUIRER]
		ON [ACQUIRER].[COD_AC] = [ASS_TR_TYPE_COMP].[COD_AC]
	INNER JOIN [EQUIPMENT_MODEL] WITH (NOLOCK)
		ON [EQUIPMENT_MODEL].[COD_MODEL] = [EQUIPMENT].[COD_MODEL]
	LEFT JOIN TRANSACTION_PRODUCTS AS [TRAN_PROD] WITH (NOLOCK)
		ON [TRAN_PROD].COD_TRAN_PROD = [TRANSACTION].COD_TRAN_PROD
	LEFT JOIN COMMERCIAL_ESTABLISHMENT AS [EC_PROD] WITH (NOLOCK)
		ON [EC_PROD].COD_EC = [TRAN_PROD].COD_EC
	LEFT JOIN PRODUCTS_ACQUIRER AS [PROD_ACQ] WITH (NOLOCK)
		ON [PROD_ACQ].COD_PR_ACQ = [TRANSACTION].COD_PR_ACQ
	WHERE [ADDRESS_BRANCH].[ACTIVE] = 1
	AND [PROCESS_BG_STATUS].[STATUS_PROCESSED] = 0
	AND [PROCESS_BG_STATUS].[COD_SOURCE_PROCESS] = 1
	AND COALESCE([TRANSACTION_DATA_EXT].[NAME], '0') IN ('NSU', 'RCPTTXID', 'AUTO', '0')
	AND DATEADD(MINUTE, -5, GETDATE()) > [TRANSACTION].[CREATED_AT])
SELECT
	CTE.COD_TRAN
   ,CTE.TRANSACTION_CODE
   ,CTE.AMOUNT
   ,CTE.PLOTS
   ,CTE.TRANSACTION_DATE
   ,CTE.TRANSACTION_TYPE
   ,CTE.CPF_CNPJ
   ,CTE.[NAME]
   ,CTE.SERIAL_EQUIP
   ,CTE.TID
   ,CTE.SITUATION
   ,CTE.BRAND
   ,CTE.PAN
   ,CTE.TRAN_DATA_EXT
   ,CTE.TRAN_DATA_EXT_VALUE
   ,CTE.AUTH_CODE
   ,CTE.COD_AC
   ,CTE.NAME_ACQUIRER
   ,CTE.COMMENT
   ,CTE.TAX
   ,CTE.ANTICIPATION
   ,CTE.COD_AFFILIATOR
   ,CTE.NAME_AFFILIATOR
   ,CTE.COD_TTYPE
   ,CTE.COD_COMP
   ,CTE.COD_EC
   ,CTE.COD_BRANCH
   ,CTE.STATE_NAME
   ,CTE.CITY_NAME
   ,CTE.COD_SITUATION
   ,CTE.COD_DEPTO_BRANCH
   ,CTE.GROSS_VALUE_AGENCY
   ,CTE.NET_VALUE_AGENCY
   ,CTE.TYPE_TRAN
   ,CTE.COD_SOURCE_TRAN
   ,CTE.POSWEB
   ,CTE.SEGMENTS_NAME
   ,CTE.CREATED_AT
   ,CTE.REP_COD_TRAN
   ,CTE.COD_EC_TRANS
   ,CTE.TRANS_EC_NAME
   ,CTE.TRANS_EC_CPF_CNPJ
   ,CTE.SPLIT
   ,CTE.SALES_REP
   ,CTE.COD_USER_REP
   ,CTE.CREDITOR_DOCUMENT
   ,CTE.COD_SALES_REP
   ,CTE.MODEL_POS
   ,CTE.CARD_NAME
   ,CTE.CNAE
   ,CTE.COD_USER
   ,CTE.NAME_USER
   ,CTE.LINK_PAYMENT
   ,CTE.CUSTOMER_EMAIL
   ,CTE.CUSTOMER_IDENTIFICATION
   ,CTE.PAYMENT_LINK_TRACKING
   ,CTE.NAME_PRODUCT_EC
   ,CTE.EC_PRODUCT
   ,CTE.EC_PRODUCT_CPF_CNPJ
   ,CTE.SALES_TYPE
   ,CTE.PLAN_DZEROEC
   ,CTE.PLAN_DZEROAFF
   ,SUM(
	IIF
	(
	ISNULL(CTE.PLAN_DZEROEC, 0) > 0,
	DBO.FNC_CALC_DZERO_NET_VALUE_CONSOLIDATED(
	IIF([TRANSACTION_TITLES].COD_EC = CTE.COD_EC, [TRANSACTION_TITLES].[AMOUNT], 0),
	[TRANSACTION_TITLES].PLOT,
	[TRANSACTION_TITLES].TAX_INITIAL,
	[TRANSACTION_TITLES].ANTICIP_PERCENT,
	[TRANSACTION_TITLES].TAX_PLANDZERO,
	CTE.COD_TTYPE
	),
	CAST((((IIF([TRANSACTION_TITLES].COD_EC = CTE.COD_EC, [TRANSACTION_TITLES].[AMOUNT], 0) * (1 - ([TRANSACTION_TITLES].[TAX_INITIAL] / 100))) *
	CASE
		WHEN [TRANSACTION_TITLES].[ANTICIP_PERCENT] IS NULL THEN 1
		ELSE 1 - ((([TRANSACTION_TITLES].[ANTICIP_PERCENT] / 30) * COALESCE(CASE
				WHEN [TRANSACTION_TITLES].[IS_SPOT] = 1 THEN DATEDIFF(DAY, [TRANSACTION_TITLES].[PREVISION_PAY_DATE], [TRANSACTION_TITLES].[ORIGINAL_RECEIVE_DATE])
				ELSE [TRANSACTION_TITLES].[QTY_DAYS_ANTECIP]
			END, ([TRANSACTION_TITLES].[PLOT] * 30) - 1)) / 100)
	END) - (CASE
		WHEN [TRANSACTION_TITLES].[PLOT] = 1 THEN [TRANSACTION_TITLES].[RATE]
		ELSE 0
	END)) AS DECIMAL(22, 6)))) AS NET_VALUE

FROM [TRANSACTION_TITLES]
JOIN CTE
	ON [TRANSACTION_TITLES].COD_TRAN = CTE.COD_TRAN
GROUP BY CTE.COD_TRAN
		,CTE.TRANSACTION_CODE
		,CTE.AMOUNT
		,CTE.PLOTS
		,CTE.TRANSACTION_DATE
		,CTE.TRANSACTION_TYPE
		,CTE.CPF_CNPJ
		,CTE.[NAME]
		,CTE.SERIAL_EQUIP
		,CTE.TID
		,CTE.SITUATION
		,CTE.BRAND
		,CTE.PAN
		,CTE.TRAN_DATA_EXT
		,CTE.TRAN_DATA_EXT_VALUE
		,CTE.AUTH_CODE
		,CTE.COD_AC
		,CTE.NAME_ACQUIRER
		,CTE.COMMENT
		,CTE.TAX
		,CTE.ANTICIPATION
		,CTE.COD_AFFILIATOR
		,CTE.NAME_AFFILIATOR
		,CTE.COD_TTYPE
		,CTE.COD_COMP
		,CTE.COD_EC
		,CTE.COD_BRANCH
		,CTE.STATE_NAME
		,CTE.CITY_NAME
		,CTE.COD_SITUATION
		,CTE.COD_DEPTO_BRANCH
		,CTE.GROSS_VALUE_AGENCY
		,CTE.NET_VALUE_AGENCY
		,CTE.TYPE_TRAN
		,CTE.COD_SOURCE_TRAN
		,CTE.POSWEB
		,CTE.SEGMENTS_NAME
		,CTE.CREATED_AT
		,CTE.REP_COD_TRAN
		,CTE.COD_EC_TRANS
		,CTE.TRANS_EC_NAME
		,CTE.TRANS_EC_CPF_CNPJ
		,CTE.SPLIT
		,CTE.SALES_REP
		,CTE.COD_USER_REP
		,CTE.CREDITOR_DOCUMENT
		,CTE.COD_SALES_REP
		,CTE.MODEL_POS
		,CTE.CARD_NAME
		,CTE.CNAE
		,CTE.COD_USER
		,CTE.NAME_USER
		,CTE.LINK_PAYMENT
		,CTE.CUSTOMER_EMAIL
		,CTE.CUSTOMER_IDENTIFICATION
		,CTE.PAYMENT_LINK_TRACKING
		,CTE.NAME_PRODUCT_EC
		,CTE.EC_PRODUCT
		,CTE.EC_PRODUCT_CPF_CNPJ
		,CTE.SALES_TYPE
		,CTE.PLAN_DZEROEC
		,CTE.PLAN_DZEROAFF  
  
  
 GO
 
 