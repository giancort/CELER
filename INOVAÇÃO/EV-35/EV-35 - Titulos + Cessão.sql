IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_PAGSEGURO_CODE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD ASSIGN_PAGSEGURO_CODE VARCHAR(255);
END

GO


IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_MOVEMENT_CODE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD ASSIGN_MOVEMENT_CODE VARCHAR(255);
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_RECEIVE_DATE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD ASSIGN_RECEIVE_DATE DATETIME;
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_ANTECIPATION_VALUE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD ASSIGN_ANTECIPATION_VALUE DECIMAL(22, 6);
END


GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'ASSIGN_ANTECIPATION_TAX'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD ASSIGN_ANTECIPATION_TAX DECIMAL(22, 6);
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'INTERMEDIATION_TAX'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD INTERMEDIATION_TAX DECIMAL(22, 6);
END
GO
  

IF ( SELECT
		COUNT(*)
	FROM sys.indexes
	WHERE name = 'IX_TRANSACTION_TITLES_ASSIGNED'
	AND object_id = OBJECT_ID('TRANSACTION_TITLES'))
= 0
BEGIN
CREATE NONCLUSTERED INDEX [IX_TRANSACTION_TITLES_ASSIGNED]
ON [dbo].[TRANSACTION_TITLES] ([PLOT])
INCLUDE ([COD_TRAN], [COD_SITUATION], [ACQ_TAX], [PREVISION_RECEIVE_DATE], [IS_ASSIGN], [RECONCILED])
END
GO
IF ( SELECT
		COUNT(*)
	FROM sys.indexes
	WHERE name = 'IX_REPORT_TRANSACTIONS_EXP_ASSINGED'
	AND object_id = OBJECT_ID('[REPORT_TRANSACTIONS_EXP]'))
= 0
BEGIN
CREATE NONCLUSTERED INDEX [IX_REPORT_TRANSACTIONS_EXP_ASSINGED]
ON [dbo].[REPORT_TRANSACTIONS_EXP] ([TRAN_DATA_EXT_VALUE], [AUTH_CODE])
INCLUDE ([COD_TRAN], [AMOUNT], [PLOTS], [TRANSACTION_DATE], [SITUATION], [LOGICAL_NUMBER_ACQ])
END
GO
IF ( SELECT
		COUNT(*)
	FROM sys.indexes
	WHERE name = 'IX_DATA_TID_AVAILABLE_EC_ASSIGNED'
	AND object_id = OBJECT_ID('[DATA_TID_AVAILABLE_EC]'))
= 0
BEGIN
CREATE NONCLUSTERED INDEX [IX_DATA_TID_AVAILABLE_EC_ASSIGNED]
ON [dbo].[DATA_TID_AVAILABLE_EC] ([TID], [ACTIVE])
INCLUDE ([COD_AC])
END
GO
IF ( SELECT
		COUNT(*)
	FROM sys.indexes
	WHERE name = '<IX_DATA_TID_AVAILABLE_EC_CONCILIATE>'
	AND object_id = OBJECT_ID('[DATA_TID_AVAILABLE_EC]'))
= 0
BEGIN
CREATE NONCLUSTERED INDEX [<IX_DATA_TID_AVAILABLE_EC_CONCILIATE>]
ON [dbo].[DATA_TID_AVAILABLE_EC] ([TID], [ACTIVE])
INCLUDE ([COD_AC])
END
GO
IF ( SELECT
		COUNT(*)
	FROM sys.indexes
	WHERE name = 'IX_TRANSACTION_TITLES_TO_CONCILIATE'
	AND object_id = OBJECT_ID('[TRANSACTION_TITLES]'))
= 0
BEGIN
CREATE NONCLUSTERED INDEX [IX_TRANSACTION_TITLES_TO_CONCILIATE]
ON [dbo].[TRANSACTION_TITLES] ([IS_ASSIGN], [COD_SITUATION], [PREVISION_RECEIVE_DATE])
INCLUDE ([COD_TRAN], [PLOT], [ACQ_TAX], [RECONCILED])
END
GO
UPDATE [TRANSACTION_TITLES]
SET RECONCILED = NULL
   ,RECONCILE_DATE = NULL
WHERE RECONCILED = 1
GO

IF OBJECT_ID('SP_REG_TITLES_EDI_CONCILIATE') IS NOT NULL DROP PROCEDURE SP_REG_TITLES_EDI_CONCILIATE
GO
IF TYPE_ID('TP_TITLES_EDI_CONCILIATE') IS NOT NULL DROP TYPE TP_TITLES_EDI_CONCILIATE
GO
IF OBJECT_ID('TITLES_EDI_CONCILIATE') IS NOT NULL DROP TABLE TITLES_EDI_CONCILIATE
GO
IF OBJECT_ID('CONCILIATE_DISAGREEMENT') IS NOT NULL DROP TABLE CONCILIATE_DISAGREEMENT
GO
IF OBJECT_ID('FINANCE_RECONCILE_RESUME') IS NULL

CREATE TABLE [dbo].[FINANCE_RECONCILE_RESUME]
(
	[COD_FIN_REC_RESUME] [int] IDENTITY(1,1) NOT NULL,
	[COD_AC] [int] NULL,
	[ACQUIRER] [varchar](255) NULL,
	[PREVISION_RECEIVE_DATE] [datetime] NULL,
	[QTY_TITLES] [int] NULL,
	[QTY_ACQ] [int] NULL,
	[QTY_TITLES_NOT_FOUND] [int] NULL,
	[QTY_ACQ_NOT_FOUND] [int] NULL,
	[QTY_RECONCILED] [int] NULL,
	[QTY_ASSIGN] INT NULL,
	[AMOUNT_TKPP] [decimal](22, 6) NULL,
	[AMOUNT_ACQ] [decimal](22, 6) NULL,
	[ACTIVE] [int] NULL,
	[RECONCILE_DATE] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[COD_FIN_REC_RESUME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

--ALTER TABLE [dbo].[FINANCE_RECONCILE_RESUME] ADD  DEFAULT ((1)) FOR [ACTIVE]
--GO
alter table TRANSACTION_TITLES drop constraint FK__TRANSACTI__COD_A__69B26EB3
GO
ALTER TABLE TRANSACTION_TITLES DROP COLUMN COD_ASS_CONC_RESUME;
GO
alter table TRANSACTION_TITLES drop constraint FK__TRANSACTI__COD_F__65E1DDCF
GO
ALTER TABLE TRANSACTION_TITLES DROP COLUMN COD_FIN_REC_RESUME;
GO
ALTER TABLE [dbo].[FINANCE_RECONCILE_RESUME]  WITH NOCHECK ADD FOREIGN KEY([COD_AC])
REFERENCES [dbo].[ACQUIRER] ([COD_AC])
GO
IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'COD_ASS_CONC_RESUME'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD COD_ASS_CONC_RESUME INT FOREIGN KEY REFERENCES ASSIGNED_CONCILIATE_RESUME (COD_ASS_CONC_RESUME);
END
GO

IF OBJECT_ID('DISAGREEMENT_REASON') IS NOT NULL DROP TABLE DISAGREEMENT_REASON
GO
CREATE TABLE DISAGREEMENT_REASON
(
	COD_DIV_REASON INT PRIMARY KEY IDENTITY,
	[DESCRIPTION] VARCHAR(255),
	DETAIL VARCHAR(255),
	ACTIVE INT DEFAULT 1
)
GO

INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Data da transação divergente', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Tipo da transação incorreta', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Valor da transação', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Valor da parcela', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Prazo de pagamento expirado', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Parcela', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Previsão de pagamento incorreta', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Taxa de intermediação', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Valor liquido da transação', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Status de pagamento', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('OK', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('EDI não encontrado', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Título não encontrado', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Transação desfeita', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Transação cancelada', 1);
INSERT INTO DISAGREEMENT_REASON ([DESCRIPTION], ACTIVE)
	VALUES ('Motivo não encontrado', 1);
GO

CREATE TABLE CONCILIATE_DISAGREEMENT
(
	COD_CONC_DIVERGENCIES INT PRIMARY KEY IDENTITY,
	COD_TITLE INT FOREIGN KEY REFERENCES TRANSACTION_TITLES (COD_TITLE),
	COD_DIV_REASON INT FOREIGN KEY REFERENCES DISAGREEMENT_REASON (COD_DIV_REASON),
	DETAIL VARCHAR(255),
	ACTIVE INT
);

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILED'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD RECONCILED INT;
END

GO
IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'COD_FIN_REC_RESUME'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD COD_FIN_REC_RESUME INT FOREIGN KEY REFERENCES FINANCE_RECONCILE_RESUME (COD_FIN_REC_RESUME);
END
GO
IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECONCILE_DATE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD RECONCILE_DATE DATETIME;
END
GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'API_CODE_MOVEMENT'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD API_CODE_MOVEMENT VARCHAR(255);
END

GO

IF NOT EXISTS (SELECT
		1
	FROM SYS.COLUMNS
	WHERE NAME = N'RECEIVE_DATE'
	AND object_id = OBJECT_ID(N'TRANSACTION_TITLES'))
BEGIN
ALTER TABLE TRANSACTION_TITLES
ADD RECEIVE_DATE DATETIME;
END

GO
IF OBJECT_ID('SP_FD_TITLES_TO_CONCILIATE') IS NOT NULL DROP PROCEDURE SP_FD_TITLES_TO_CONCILIATE
GO

IF TYPE_ID('TP_CONC_EDI_TITLES') IS NOT NULL DROP TYPE TP_CONC_EDI_TITLES
GO
GO

/****** Object:  UserDefinedTableType [dbo].[TP_CONC_EDI_TITLES]    Script Date: 07/07/2021 14:20:47 ******/
CREATE TYPE [dbo].[TP_CONC_EDI_TITLES] AS TABLE(
	[COD_TITLE] [int] NULL,
	[MOVEMENT_API_CODE] [varchar](255) NULL,
	[INITIAL_TRAN_DATE] [datetime] NULL,
	[ADJ_SALE_DATE] [datetime] NULL,
	[PAGSEGURO_CODE] [varchar](255) NULL,
	[SALE_CODE] [varchar](150) NULL,
	[PAYMENT_DEADLINE] [varchar](255) NULL,
	[PLAN_DESC] [varchar](255) NULL,
	[PLOT] [int] NULL,
	[PLOTS] [int] NULL,
	[MOVEMENT_DATE] [datetime] NULL,
	[TAX_PLOT_CUSTOMER] [decimal](22, 6) NULL,
	[RATE_BILLET_SHOP] [decimal](22, 6) NULL,
	[ORIGINAL_TRAN_VALUE] [decimal](22, 6) NULL,
	[TAX_PLOT_SELLER] [decimal](22, 6) NULL,
	[RATE_PLOT_SELLER] [decimal](22, 6) NULL,
	[INTERMEDIATION_TAX] [decimal](22, 6) NULL,
	[INTERMEDIATION_RATE] [decimal](22, 6) NULL,
	[TAX_REP_APLICATION] [decimal](22, 6) NULL,
	[LIQUID_TRAN_VALUE] [decimal](22, 6) NULL,
	[ANTECIP_TAX] [decimal](22, 6) NULL,
	[LIQUID_VALUE_ANTECIP] [decimal](22, 6) NULL,
	[PAYMENT_STATUS] [varchar](255) NULL,
	[RESALE_IDENTIFY] [varchar](255) NULL,
	[PAYMENT_FORM] [varchar](255) NULL,
	[FIN_INSTITUTION] [varchar](255) NULL,
	[ENTRY_CHANNEL] [varchar](255) NULL,
	[READER] [varchar](255) NULL,
	[CAPTURE_FORM] [varchar](200) NULL,
	[BANK_CODE] [varchar](200) NULL,
	[BANK_AGENCY] [varchar](100) NULL,
	[BANK_ACCOUNT] [varchar](100) NULL,
	[LOGICAL_NUMBER_ACQ] [varchar](255) NULL,
	[BIN_CARD] [varchar](200) NULL,
	[HOLDER_CARD] [varchar](255) NULL,
	[AUTH_CODE] [varchar](100) NULL,
	[CV_CODE] [varchar](200) NULL,
	[SERIAL_EQUIP] [varchar](255) NULL
)
GO
GO
IF OBJECT_ID('SP_LS_TITLES_TO_CONCILIATE') IS NOT NULL DROP PROCEDURE SP_LS_TITLES_TO_CONCILIATE
GO
CREATE PROCEDURE SP_LS_TITLES_TO_CONCILIATE  
(  
 @PREVISION_RECEIVE_DATE DATETIME,  
 @ACQ_CODE VARCHAR(255)  
)  
AS  
BEGIN

SELECT
	TRANSACTION_TITLES.COD_TITLE
   ,TRANSACTION_TITLES.COD_TRAN
   ,REPORT_TRANSACTIONS_EXP.AMOUNT
   ,REPORT_TRANSACTIONS_EXP.PLOTS
   ,PLOT
   ,TRADUCTION_SITUATION.SITUATION_TR AS SITUATION
   ,TRAN_DATA_EXT_VALUE AS CV_CODE
   ,AUTH_CODE
   ,PREVISION_RECEIVE_DATE
   ,ACQ_TAX
   ,IIF(TRANSACTION_TITLES.IS_ASSIGN = 1, TRANSACTION_TITLES.IS_ASSIGN, (SELECT
			IIF(COUNT(*) > 0, 1, 0)
		FROM TRANSACTION_TITLES TT
		JOIN [TRANSACTION] T
			ON T.COD_TRAN = TT.COD_TRAN
		JOIN TRANSACTION_SERVICES TS
			ON T.COD_TRAN = TS.COD_TRAN
		WHERE T.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
		AND TT.IS_ASSIGN = 1)
	) AS IS_ASSIGN
   ,REPORT_TRANSACTIONS_EXP.SITUATION AS TRAN_SITUATION
   ,ACQUIRER.CODE AS ACQUIRER
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN TRADUCTION_SITUATION
	ON TRADUCTION_SITUATION.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
WHERE CAST(PREVISION_RECEIVE_DATE AS DATE) = @PREVISION_RECEIVE_DATE
AND ACQUIRER.CODE = @ACQ_CODE
AND TRANSACTION_TITLES.COD_SITUATION IN
(
4, --> AGUARDANDO PAGAMENTO  
8, --> PAGO  
17,--> AGUARDANDO CONFIRMAÇÃO DE PAGAMENTO  
24,--> AGENDA FINANCEIRA BLOQUEADA  
25,--> LIBERADO  
30 --> AGUARDANDO SPLIT DA AGENDA  
)
AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) <> 1
AND REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
AND ISNULL(TRANSACTION_TITLES.IS_ASSIGN, 0) = 0
END

GO

GO

GO
IF OBJECT_ID('SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ') IS NOT NULL DROP PROCEDURE SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ
GO
    
CREATE PROCEDURE SP_LS_TITLES_NOT_CONCILIATION_OPENED_BY_ACQ              
AS
SELECT
	COUNT(*) QTYTITLES
   ,ACQUIRER.[NAME] AS ACQUIRERNAME
   ,ACQUIRER.[CODE] AS ACQUIRERCODE
   ,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) AS PREVISIONPAYMENTDAY
   ,TRANSACTION_TITLES.IS_ASSIGN
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
LEFT JOIN FINANCE_RECONCILE_RESUME
	ON FINANCE_RECONCILE_RESUME.COD_FIN_REC_RESUME = TRANSACTION_TITLES.COD_FIN_REC_RESUME
		AND FINANCE_RECONCILE_RESUME.ACTIVE = 1
LEFT JOIN TITLES_EDI_CONCILIATE
	ON TITLES_EDI_CONCILIATE.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
WHERE REPORT_TRANSACTIONS_EXP.COD_SITUATION = 3
AND ISNULL(TRANSACTION_TITLES.RECONCILED, 0) <> 1
AND CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) > DATEADD(YEAR, -1, CAST(GETDATE() AS DATE))
AND CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE) = '2021-07-02'
AND ACQUIRER.CODE = '129827136'
AND TRANSACTION_TITLES.COD_SITUATION IN
(
4, --> AGUARDANDO PAGAMENTO                  
8, --> PAGO                  
17,--> AGUARDANDO CONFIRMA��O DE PAGAMENTO                  
24,--> AGENDA FINANCEIRA BLOQUEADA                  
25,--> LIBERADO                  
30 --> AGUARDANDO SPLIT DA AGENDA                  
)
AND FINANCE_RECONCILE_RESUME.COD_FIN_REC_RESUME IS NULL
AND ISNULL(TRANSACTION_TITLES.IS_ASSIGN, 0) = 0
AND TITLES_EDI_CONCILIATE.COD_TITLE IS NULL
GROUP BY ACQUIRER.[NAME]
		,CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE)
		,ACQUIRER.[CODE]
		,TRANSACTION_TITLES.IS_ASSIGN
ORDER BY CAST(TRANSACTION_TITLES.PREVISION_RECEIVE_DATE AS DATE), ACQUIRER.[NAME]
, ACQUIRER.[CODE]

GO
IF OBJECT_ID('SP_FD_EDI_TITLE') IS NOT NULL DROP PROCEDURE SP_FD_EDI_TITLE
GO
IF OBJECT_ID('SP_FD_TITLES_TO_ASSIGN') IS NOT NULL DROP PROCEDURE SP_FD_TITLES_TO_ASSIGN
GO
IF TYPE_ID('TP_FD_EDI_TITLE') IS NOT NULL DROP TYPE TP_FD_EDI_TITLE
GO
CREATE TYPE [dbo].[TP_FD_EDI_TITLE] AS TABLE(
	[AUTH_CODE] [varchar](100) NULL,
	[CV_CODE] [varchar](255) NULL,
	[ACQUIRER] [varchar](255) NULL,
	[PLOT] [int] NULL,
	[TRAN_PS_DATE] [datetime] NULL
)
GO

  
CREATE PROCEDURE SP_FD_EDI_TITLE      
(      
 @TP_FD_EDI_TITLE TP_FD_EDI_TITLE READONLY      
)      
AS      
BEGIN

SELECT
	REPORT_TRANSACTIONS_EXP.AUTH_CODE
   ,TRAN_DATA_EXT_VALUE AS CV_CODE
   ,ACQUIRER.CODE AS ACQUIRER
   ,TRANSACTION_TITLES.PREVISION_RECEIVE_DATE
   ,NULL RECEIVE_DATE
   ,REPORT_TRANSACTIONS_EXP.SITUATION AS TRAN_SITUATION
   ,TRADUCTION_SITUATION.SITUATION_TR AS SITUATION
   ,3 PAYMENT_STATUS
   ,TRANSACTION_TITLES.COD_TITLE
   ,REPORT_TRANSACTIONS_EXP.COD_TRAN
   ,IIF(TRANSACTION_TITLES.IS_ASSIGN = 1, TRANSACTION_TITLES.IS_ASSIGN, (SELECT
			IIF(COUNT(*) > 0, 1, 0)
		FROM TRANSACTION_TITLES TT
		JOIN [TRANSACTION] T
			ON T.COD_TRAN = TT.COD_TRAN
		JOIN TRANSACTION_SERVICES TS
			ON T.COD_TRAN = TS.COD_TRAN
		WHERE T.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
		AND TT.IS_ASSIGN = 1)
	) AS IS_ASSIGN
   ,0 AS INTERMEDIATION_TAX
   ,ACQ_TAX
   ,NULL AS PAGSEGURO_CODE
   ,NULL AS API_MOVEMENT_CODE
   ,ISNULL(TRANSACTION_TITLES.PLOT, 0) PLOT
   ,0 CONCILIATED
   ,REPORT_TRANSACTIONS_EXP.AMOUNT
   ,REPORT_TRANSACTIONS_EXP.PLOTS
   ,PREVISION_RECEIVE_DATE
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE
   ,CASE
		WHEN TRANSACTION_TITLES.COD_TITLE IS NULL THEN (SELECT
					COD_DIV_REASON
				FROM DISAGREEMENT_REASON
				WHERE DISAGREEMENT_REASON.[DESCRIPTION] = 'T�tulo n�o encontrado')

		WHEN REPORT_TRANSACTIONS_EXP.SITUATION = 'DESFEITA' THEN (SELECT
					COD_DIV_REASON
				FROM DISAGREEMENT_REASON
				WHERE DISAGREEMENT_REASON.[DESCRIPTION] = 'transação desfeita')
		WHEN CAST(REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE AS DATE) <> CAST(TP.TRAN_PS_DATE AS DATE) THEN (SELECT
					COD_DIV_REASON
				FROM DISAGREEMENT_REASON
				WHERE DISAGREEMENT_REASON.[DESCRIPTION] = 'Data da transação divergente')
		ELSE 16
	END AS COD_DIV_REASON
   ,REPORT_TRANSACTIONS_EXP.PAGSEGURO_CODE
FROM REPORT_TRANSACTIONS_EXP
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
JOIN @TP_FD_EDI_TITLE TP
	ON TP.AUTH_CODE = REPORT_TRANSACTIONS_EXP.AUTH_CODE
		AND TP.CV_CODE = REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE
		AND ACQUIRER.CODE = TP.ACQUIRER
LEFT JOIN TRANSACTION_TITLES
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
		AND TP.PLOT = TRANSACTION_TITLES.PLOT
LEFT JOIN TRADUCTION_SITUATION
	ON TRADUCTION_SITUATION.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION

END

GO

CREATE TYPE [dbo].[TP_TITLES_EDI_CONCILIATE] AS TABLE(
	[COD_TITLE] [int] NULL,
	[COD_TRAN] [int] NULL,
	[PREVISION_RECEIVE_DATE] [datetime] NULL,
	[RECEIVE_DATE] [datetime] NULL,
	[ACQUIRER] [varchar](200) NULL,
	[PAGSEGURO_CODE] [varchar](255) NULL,
	[API_CODE_MOVEMENT] [varchar](255) NULL,
	[PAYMENT_STATUS] [varchar](200) NULL,
	[CONCILIATED] [int] NULL,
	[COD_DIV_REASON] [int] NULL,
	[IS_ASSIGN] [int] NULL,
	[PLOT] INT NULL
)
GO

CREATE TABLE [dbo].[TITLES_EDI_CONCILIATE](
	[COD_TITLE_EDI_CONC] [int] IDENTITY(1,1) NOT NULL,
	[COD_FIN_REC_RESUME] [int] NULL,
	[COD_TRAN] [int] NULL,
	[COD_TITLE] [int] NULL,
	[PREVISION_RECEIVE_DATE] [datetime] NULL,
	[RECEIVE_DATE] [datetime] NULL,
	[COD_AC] [int] NULL,
	[ACQUIRER] [varchar](200) NULL,
	[COD_DIV_REASON] [int] NULL,
	[PAYMENT_STATUS] [varchar](255) NULL,
	[CONCILIATED] [int] NULL,
	[API_CODE_MOVEMENT] [varchar](255) NULL,
	[TRY_CONCILIATE_DATE] [datetime] NULL,
	[ACTIVE] [int] NULL,
	[PLOT] INT NULL,
	PAGSEGURO_CODE VARCHAR(255)
PRIMARY KEY CLUSTERED 
(
	[COD_TITLE_EDI_CONC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[TITLES_EDI_CONCILIATE] ADD  DEFAULT ((1)) FOR [ACTIVE]
GO

ALTER TABLE [dbo].[TITLES_EDI_CONCILIATE]  WITH CHECK ADD FOREIGN KEY([COD_AC])
REFERENCES [dbo].[ACQUIRER] ([COD_AC])
GO

ALTER TABLE [dbo].[TITLES_EDI_CONCILIATE]  WITH CHECK ADD FOREIGN KEY([COD_DIV_REASON])
REFERENCES [dbo].[DISAGREEMENT_REASON] ([COD_DIV_REASON])
GO

ALTER TABLE [dbo].[TITLES_EDI_CONCILIATE]  WITH CHECK ADD FOREIGN KEY([COD_FIN_REC_RESUME])
REFERENCES [dbo].[FINANCE_RECONCILE_RESUME] ([COD_FIN_REC_RESUME])
GO

ALTER TABLE [dbo].[TITLES_EDI_CONCILIATE]  WITH CHECK ADD FOREIGN KEY([COD_TRAN])
REFERENCES [dbo].[TRANSACTION] ([COD_TRAN])
GO

ALTER TABLE [dbo].[TITLES_EDI_CONCILIATE]  WITH CHECK ADD FOREIGN KEY([COD_TITLE])
REFERENCES [dbo].[TRANSACTION_TITLES] ([COD_TITLE])
GO

GO
    
CREATE PROCEDURE SP_REG_TITLES_EDI_CONCILIATE  
(  
 @TP_TITLES_EDI_CONCILIATE TP_TITLES_EDI_CONCILIATE READONLY,  
 @PREVISION_RECEIVE_DATE DATETIME,  
 @QTY_TITLES INT,  
 @QTY_ACQ INT,  
 @QTY_TITLES_NOT_FOUND INT,  
 @QTY_ACQ_NOT_FOUND INT,  
 @QTY_RECONCILED INT,  
 @AMOUNT_TKPP DECIMAL(22,6),  
 @AMOUNT_ACQ DECIMAL(22,6),  
 @ACQUIRER_CODE VARCHAR(100)  
)  
AS  
BEGIN
  
  
DECLARE @COD_AC INT = ( SELECT
		COD_AC
	FROM ACQUIRER
	WHERE CODE = @ACQUIRER_CODE);

INSERT INTO FINANCE_RECONCILE_RESUME (PREVISION_RECEIVE_DATE,
QTY_TITLES,
QTY_ACQ,
QTY_TITLES_NOT_FOUND,
QTY_ACQ_NOT_FOUND,
QTY_RECONCILED,
AMOUNT_TKPP,
AMOUNT_ACQ,
COD_AC,
RECONCILE_DATE)
	VALUES (@PREVISION_RECEIVE_DATE, @QTY_TITLES, @QTY_ACQ, @QTY_TITLES_NOT_FOUND, @QTY_ACQ_NOT_FOUND, @QTY_RECONCILED, @AMOUNT_TKPP, @AMOUNT_ACQ, @COD_AC, GETDATE())
IF (@@rowcount < 1)
THROW 60000, 'COULD NOT REGISTER PROVISORY_PASS_USER', 1;

DECLARE @COD_FIN_REC_RESUME INT = @@identity


INSERT INTO TITLES_EDI_CONCILIATE (COD_FIN_REC_RESUME,
COD_TRAN,
COD_TITLE,
PREVISION_RECEIVE_DATE,
RECEIVE_DATE,
COD_AC,
ACQUIRER,
COD_DIV_REASON,
PAYMENT_STATUS,
CONCILIATED,
API_CODE_MOVEMENT,
TRY_CONCILIATE_DATE,
PLOT,
PAGSEGURO_CODE)
	SELECT
		@COD_FIN_REC_RESUME
	   ,TP.COD_TRAN
	   ,TP.COD_TITLE
	   ,TP.PREVISION_RECEIVE_DATE
	   ,TP.RECEIVE_DATE
	   ,ACQUIRER.COD_AC
	   ,TP.ACQUIRER
	   ,TP.COD_DIV_REASON
	   ,TP.PAYMENT_STATUS
	   ,TP.CONCILIATED
	   ,TP.API_CODE_MOVEMENT
	   ,GETDATE()
		,TP.PLOT
	   ,TP.PAGSEGURO_CODE

	FROM @TP_TITLES_EDI_CONCILIATE TP
	LEFT JOIN TITLES_EDI_CONCILIATE
		ON TP.COD_TITLE = TITLES_EDI_CONCILIATE.COD_TITLE
	JOIN ACQUIRER
		ON ACQUIRER.CODE = TP.ACQUIRER
	WHERE TP.CONCILIATED = 0
	AND TITLES_EDI_CONCILIATE.COD_TITLE IS NULL

IF (@@rowcount < 1)
	AND (SELECT
			COUNT(*)
		FROM @TP_TITLES_EDI_CONCILIATE TP
		LEFT JOIN TITLES_EDI_CONCILIATE
			ON TP.COD_TITLE = TITLES_EDI_CONCILIATE.COD_TITLE
		JOIN ACQUIRER
			ON ACQUIRER.CODE = TP.ACQUIRER
		WHERE TP.CONCILIATED = 0
		AND TITLES_EDI_CONCILIATE.COD_TITLE IS NULL)
	> 0
THROW 60000, 'COULD NOT REGISTER PROVISORY_PASS_USER', 1



UPDATE TRANSACTION_TITLES
SET RECONCILED = 1
   ,RECONCILE_DATE = GETDATE()
   ,API_CODE_MOVEMENT = TP.API_CODE_MOVEMENT
	--    ,RECEIVE_DATE = TP.RECEIVE_DATE  
   ,COD_FIN_REC_RESUME = @COD_FIN_REC_RESUME
FROM TRANSACTION_TITLES
JOIN @TP_TITLES_EDI_CONCILIATE TP
	ON TP.COD_TITLE = TRANSACTION_TITLES.COD_TITLE
WHERE TP.CONCILIATED = 1


END;


GO

GO
    
CREATE PROCEDURE SP_FD_TITLES_TO_ASSIGN      
(      
 @TP_FD_EDI_TITLE TP_FD_EDI_TITLE READONLY      
)      
AS      
BEGIN
SELECT
	REPORT_TRANSACTIONS_EXP.AUTH_CODE
   ,TRAN_DATA_EXT_VALUE AS CV_CODE
   ,ACQUIRER.CODE AS ACQUIRER
   ,TRANSACTION_TITLES.PREVISION_RECEIVE_DATE
   ,NULL RECEIVE_DATE
   ,REPORT_TRANSACTIONS_EXP.SITUATION AS TRAN_SITUATION
   ,3 PAYMENT_STATUS
   ,TRANSACTION_TITLES.COD_TITLE
   ,REPORT_TRANSACTIONS_EXP.COD_TRAN
   ,IIF(TRANSACTION_TITLES.IS_ASSIGN = 1, TRANSACTION_TITLES.IS_ASSIGN, (SELECT
			IIF(COUNT(*) > 0, 1, 0)
		FROM TRANSACTION_TITLES TT
		JOIN [TRANSACTION] T
			ON T.COD_TRAN = TT.COD_TRAN
		JOIN TRANSACTION_SERVICES TS
			ON T.COD_TRAN = TS.COD_TRAN
		WHERE T.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
		AND TT.IS_ASSIGN = 1)
	) AS IS_ASSIGN
   ,0 AS INTERMEDIATION_TAX
   ,ACQ_TAX
   ,NULL AS PAGSEGURO_CODE
   ,NULL AS API_MOVEMENT_CODE
   ,ISNULL(TRANSACTION_TITLES.PLOT, 0) PLOT
   ,0 CONCILIATED
   ,REPORT_TRANSACTIONS_EXP.AMOUNT
   ,REPORT_TRANSACTIONS_EXP.PLOTS
   ,PREVISION_RECEIVE_DATE
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE
   ,SITUATION.NAME AS SITUATION
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
JOIN @TP_FD_EDI_TITLE TP
	ON TP.AUTH_CODE = REPORT_TRANSACTIONS_EXP.AUTH_CODE
		AND TP.CV_CODE = REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE
		AND ACQUIRER.CODE = TP.ACQUIRER
		AND TP.PLOT = TRANSACTION_TITLES.PLOT
JOIN SITUATION
	ON SITUATION.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION
WHERE ISNULL(TRANSACTION_TITLES.RECONCILED, 0) <> 1
--JOIN @TP_FD_EDI_TITLE TP ON      
-- TP.CV_cODE      
END

GO

IF OBJECT_ID('RECONCILE_ASSIGN_DETAIL') IS NOT NULL DROP TABLE RECONCILE_ASSIGN_DETAIL
GO
--GO
IF OBJECT_ID('SP_REG_RECONCILE_ASSIGN_RESUME') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_ASSIGN_RESUME
GO
IF OBJECT_ID('SP_REG_RECONCILE_ASSIGN_DETAIL') IS NOT NULL DROP PROCEDURE SP_REG_RECONCILE_ASSIGN_DETAIL
GO
IF TYPE_ID('TP_FD_EDI_TITLE_NOT_FOUND') IS NOT NULL DROP TYPE TP_FD_EDI_TITLE_NOT_FOUND
GO
IF OBJECT_ID('SP_FD_TITLES_TO_ASSIGN') IS NOT NULL DROP PROCEDURE SP_FD_TITLES_TO_ASSIGN
GO

CREATE PROCEDURE SP_FD_TITLES_TO_ASSIGN    
(    
 @TP_FD_EDI_TITLE TP_FD_EDI_TITLE READONLY    
)    
AS    
BEGIN
SELECT
	REPORT_TRANSACTIONS_EXP.AUTH_CODE
   ,TRAN_DATA_EXT_VALUE AS CV_CODE
   ,ACQUIRER.CODE AS ACQUIRER
   ,TRANSACTION_TITLES.PREVISION_RECEIVE_DATE
   ,NULL RECEIVE_DATE
   ,REPORT_TRANSACTIONS_EXP.SITUATION AS TRAN_SITUATION
   ,3 PAYMENT_STATUS
   ,TRANSACTION_TITLES.COD_TITLE
   ,REPORT_TRANSACTIONS_EXP.COD_TRAN
   ,IIF(TRANSACTION_TITLES.IS_ASSIGN = 1, TRANSACTION_TITLES.IS_ASSIGN, (SELECT
			IIF(COUNT(*) > 0, 1, 0)
		FROM TRANSACTION_TITLES TT
		JOIN [TRANSACTION] T
			ON T.COD_TRAN = TT.COD_TRAN
		JOIN TRANSACTION_SERVICES TS
			ON T.COD_TRAN = TS.COD_TRAN
		WHERE T.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
		AND TT.IS_ASSIGN = 1)
	) AS IS_ASSIGN
   ,0 AS INTERMEDIATION_TAX
   ,ACQ_TAX
   ,NULL AS PAGSEGURO_CODE
   ,NULL AS API_MOVEMENT_CODE
   ,ISNULL(TRANSACTION_TITLES.PLOT, 0) PLOT
   ,0 CONCILIATED
   ,REPORT_TRANSACTIONS_EXP.AMOUNT
   ,REPORT_TRANSACTIONS_EXP.PLOTS
   ,PREVISION_RECEIVE_DATE
   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE
   ,SITUATION.NAME AS SITUATION
FROM TRANSACTION_TITLES
JOIN REPORT_TRANSACTIONS_EXP
	ON REPORT_TRANSACTIONS_EXP.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
JOIN DATA_TID_AVAILABLE_EC
	ON DATA_TID_AVAILABLE_EC.TID = REPORT_TRANSACTIONS_EXP.LOGICAL_NUMBER_ACQ
		AND DATA_TID_AVAILABLE_EC.ACTIVE = 1
JOIN [TRANSACTION](NOLOCK)
	ON [TRANSACTION].COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
JOIN ACQUIRER
	ON DATA_TID_AVAILABLE_EC.COD_AC = ACQUIRER.COD_AC
JOIN ASS_TR_TYPE_COMP
	ON [TRANSACTION].COD_ASS_TR_COMP = ASS_TR_TYPE_COMP.COD_ASS_TR_COMP
LEFT JOIN ASS_TR_TYPE_COMP tr
	ON tr.COD_AC = ACQUIRER.COD_AC
		AND tr.COD_TTYPE = ASS_TR_TYPE_COMP.COD_TTYPE
		AND tr.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND tr.COD_SOURCE_TRAN = ASS_TR_TYPE_COMP.COD_SOURCE_TRAN
		AND tr.PLOT_INI = ASS_TR_TYPE_COMP.PLOT_INI
		AND tr.PLOT_END = ASS_TR_TYPE_COMP.PLOT_END
JOIN @TP_FD_EDI_TITLE TP
	ON TP.AUTH_CODE = REPORT_TRANSACTIONS_EXP.AUTH_CODE
		AND TP.CV_CODE = REPORT_TRANSACTIONS_EXP.TRAN_DATA_EXT_VALUE
		AND ACQUIRER.CODE = TP.ACQUIRER
		AND TP.PLOT = TRANSACTION_TITLES.PLOT
JOIN SITUATION
	ON SITUATION.COD_SITUATION = TRANSACTION_TITLES.COD_SITUATION
WHERE ISNULL(TRANSACTION_TITLES.RECONCILED, 0) <> 1
--JOIN @TP_FD_EDI_TITLE TP ON    
-- TP.CV_cODE    
END

GO
IF OBJECT_ID('ASSIGNED_CONCILIATE_RESUME') IS NULL --DROP TABLE ASSIGNED_CONCILIATE_RESUME
CREATE TABLE ASSIGNED_CONCILIATE_RESUME
(
	COD_ASS_CONC_RESUME INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	COD_AC INT FOREIGN KEY REFERENCES ACQUIRER (COD_AC),
	ACQUIRER VARCHAR(255),
	DATE_CONCILIATED DATETIME,
	PS_QTY_TITLES INT,
	QTY_FOUNDED INT,
	NOT_FOUNDED INT,
	SUM_TRAN_FOUNDED DECIMAL(22,6),
	SUM_CALCULATED_FOUNDED DECIMAL(22,6),
	SUM_TRAN_NOT_FOUND DECIMAL(22,6),
	SUM_CALCULATED_NOT_FOUNDED DECIMAL(22,6)
);

GO

CREATE PROCEDURE SP_REG_RECONCILE_ASSIGN_RESUME  
(  
 @DATE_CONCILIATED    DATETIME,  
 @PS_QTY_TITLES     INT,  
 @QTY_FOUNDED     INT,  
 @NOT_FOUNDED     INT,  
 @SUM_TRAN_FOUNDED    DECIMAL(22,6),  
 @SUM_CALCULATED_FOUNDED   DECIMAL(22,6),  
 @SUM_TRAN_NOT_FOUND    DECIMAL(22,6),  
 @SUM_CALCULATED_NOT_FOUNDED  DECIMAL(22,6),  
 @ACQUIRER_CODE     VARCHAR(255)  
)  
AS  
BEGIN
  
  
DECLARE @COD_AC INT,  
  @ACQUIRER VARCHAR(255);

SELECT
	@COD_AC = COD_AC
   ,@ACQUIRER = ACQUIRER.[NAME]
FROM ACQUIRER
WHERE CODE = @ACQUIRER_CODE

INSERT INTO ASSIGNED_CONCILIATE_RESUME (DATE_CONCILIATED
, PS_QTY_TITLES
, QTY_FOUNDED
, NOT_FOUNDED
, SUM_TRAN_FOUNDED
, SUM_CALCULATED_FOUNDED
, SUM_TRAN_NOT_FOUND
, SUM_CALCULATED_NOT_FOUNDED
, COD_AC
, ACQUIRER)
	VALUES (@DATE_CONCILIATED, @PS_QTY_TITLES, @QTY_FOUNDED, @NOT_FOUNDED, @SUM_TRAN_FOUNDED, @SUM_CALCULATED_FOUNDED, @SUM_TRAN_NOT_FOUND, @SUM_CALCULATED_NOT_FOUNDED, @COD_AC, @ACQUIRER);

SELECT
	@@identity AS RESULT

END;
GO


CREATE TYPE TP_FD_EDI_TITLE_NOT_FOUND AS TABLE
(
	COD_ASS_CONC_RESUME INT,
	ACQUIRER VARCHAR(255),
	COD_TITLE INT,
	COD_TRAN INT,
	AUTH_CODE VARCHAR(255),
	CV_CODE VARCHAR(255),
	API_MOVEMENT_CODE VARCHAR(255),
	ANTECIPATION_TAX DECIMAL(22,6),
	INTERMEDIATION_TAX DECIMAL(22,6),
	IS_SPLIT INT,
	LIQUID_VALUE DECIMAL(22,6),
	PAGSEGURO_CODE VARCHAR(255),
	PLOT INT,
	PREVISION_RECEIVE_DATE DATETIME,
	RECEIVE_DATE DATETIME,
	SITUATION VARCHAR(255),
	TRAN_SITUATION VARCHAR(255),
	CONCILIATED INT,
	TRAN_VALUE DECIMAL(22,6),
	LIQUID_TRAN_VALUE DECIMAL(22,6),
	PLOT_VALUE DECIMAL(22,6),
	LIQUID_ANTECIPATION_VALUE DECIMAL(22,6)	
);

GO


CREATE TABLE [dbo].[RECONCILE_ASSIGN_DETAIL](
	[COD_REC_ASSIGN_DETAIL] [int] IDENTITY(1,1) NOT NULL,
	[COD_ASS_CONC_RESUME] [int] NOT NULL,
	[COD_TITLE] [int] NULL,
	[COD_TRAN] [int] NULL,
	[ACQUIRER] [varchar](255) NULL,
	[AUTH_CODE] [varchar](255) NULL,
	[CV_CODE] [varchar](255) NULL,
	[API_MOVEMENT_CODE] [varchar](255) NULL,
	[ANTECIPATION_TAX] [decimal](22, 6) NULL,
	[INTERMEDIATION_TAX] [decimal](22, 6) NULL,
	[IS_SPLIT] [int] NULL,
	[LIQUID_VALUE] [decimal](22, 6) NULL,
	[PAGSEGURO_CODE] [varchar](255) NULL,
	[PLOT] [int] NULL,
	[PREVISION_RECEIVE_DATE] [datetime] NULL,
	[RECEIVE_DATE] [datetime] NULL,
	[SITUATION] [varchar](255) NULL,
	[TRAN_SITUATION] [varchar](255) NULL,
	[CONCILIATED] [int] NULL,
	[TRAN_VALUE] [decimal](22, 6) NULL,
	[LIQUID_TRAN_VALUE] [decimal](22, 6) NULL,
	[PLOT_VALUE] [decimal](22, 6) NULL,
	[LIQUID_ANTECIPATION_VALUE] [decimal](22, 6) NULL,
PRIMARY KEY CLUSTERED 
(
	[COD_REC_ASSIGN_DETAIL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RECONCILE_ASSIGN_DETAIL]  WITH NOCHECK ADD FOREIGN KEY([COD_ASS_CONC_RESUME])
REFERENCES [dbo].[ASSIGNED_CONCILIATE_RESUME] ([COD_ASS_CONC_RESUME])
GO

ALTER TABLE [dbo].[RECONCILE_ASSIGN_DETAIL]  WITH NOCHECK ADD FOREIGN KEY([COD_TRAN])
REFERENCES [dbo].[TRANSACTION] ([COD_TRAN])
GO

ALTER TABLE [dbo].[RECONCILE_ASSIGN_DETAIL]  WITH NOCHECK ADD FOREIGN KEY([COD_TITLE])
REFERENCES [dbo].[TRANSACTION_TITLES] ([COD_TITLE])
GO


GO
  
CREATE PROCEDURE SP_REG_RECONCILE_ASSIGN_DETAIL    
(    
 @TP_FD_EDI_TITLE_NOT_FOUND TP_FD_EDI_TITLE_NOT_FOUND READONLY    
)    
AS    
BEGIN

INSERT INTO RECONCILE_ASSIGN_DETAIL (COD_ASS_CONC_RESUME,
COD_TITLE,
COD_TRAN,
ACQUIRER,
AUTH_CODE,
CV_CODE,
API_MOVEMENT_CODE,
ANTECIPATION_TAX,
INTERMEDIATION_TAX,
IS_SPLIT,
LIQUID_VALUE,
PAGSEGURO_CODE,
PLOT,
PREVISION_RECEIVE_DATE,
RECEIVE_DATE,
SITUATION,
TRAN_SITUATION,
CONCILIATED,
TRAN_VALUE,
LIQUID_TRAN_VALUE,
PLOT_VALUE,
LIQUID_ANTECIPATION_VALUE)
	SELECT
		TP.COD_ASS_CONC_RESUME
	   ,TP.COD_TITLE
	   ,TP.COD_TRAN
	   ,TP.ACQUIRER
	   ,TP.AUTH_CODE
	   ,TP.CV_CODE
	   ,TP.API_MOVEMENT_CODE
	   ,TP.ANTECIPATION_TAX
	   ,TP.INTERMEDIATION_TAX
	   ,TP.IS_SPLIT
	   ,TP.LIQUID_VALUE
	   ,TP.PAGSEGURO_CODE
	   ,TP.PLOT
	   ,TP.PREVISION_RECEIVE_DATE
	   ,TP.RECEIVE_DATE
	   ,TP.SITUATION
	   ,TP.TRAN_SITUATION
	   ,TP.CONCILIATED
CREATE PROCEDURE SP_REG_RECONCILE_ASSIGN_DETAIL      
(      
 @TP_FD_EDI_TITLE_NOT_FOUND TP_FD_EDI_TITLE_NOT_FOUND READONLY      
)      
AS      
BEGIN  
  
INSERT INTO RECONCILE_ASSIGN_DETAIL (COD_ASS_CONC_RESUME,  
COD_TITLE,  
COD_TRAN,  
ACQUIRER,  
AUTH_CODE,  
CV_CODE,  
API_MOVEMENT_CODE,  
ANTECIPATION_TAX,  
INTERMEDIATION_TAX,  
IS_SPLIT,  
LIQUID_VALUE,  
PAGSEGURO_CODE,  
PLOT,  
PREVISION_RECEIVE_DATE,  
RECEIVE_DATE,  
SITUATION,  
TRAN_SITUATION,  
CONCILIATED,  
TRAN_VALUE,  
LIQUID_TRAN_VALUE,  
PLOT_VALUE,  
LIQUID_ANTECIPATION_VALUE)  
 SELECT  
  TP.COD_ASS_CONC_RESUME  
    ,TP.COD_TITLE  
    ,TP.COD_TRAN  
    ,TP.ACQUIRER  
    ,TP.AUTH_CODE  
    ,TP.CV_CODE  
    ,TP.API_MOVEMENT_CODE  
    ,TP.ANTECIPATION_TAX  
    ,TP.INTERMEDIATION_TAX  
    ,TP.IS_SPLIT  
    ,TP.LIQUID_VALUE  
    ,TP.PAGSEGURO_CODE  
    ,TP.PLOT  
    ,TP.PREVISION_RECEIVE_DATE  
    ,TP.RECEIVE_DATE  
    ,TP.SITUATION  
    ,TP.TRAN_SITUATION  
    ,TP.CONCILIATED  
    ,TP.TRAN_VALUE  
    ,TP.LIQUID_TRAN_VALUE  
    ,TP.PLOT_VALUE  
    ,TP.LIQUID_ANTECIPATION_VALUE  
 FROM @TP_FD_EDI_TITLE_NOT_FOUND TP  
 LEFT JOIN RECONCILE_ASSIGN_DETAIL  
  ON RECONCILE_ASSIGN_DETAIL.COD_TITLE = TP.COD_TITLE  
 WHERE TP.CONCILIATED = 0  
 AND RECONCILE_ASSIGN_DETAIL.COD_ASS_CONC_RESUME IS NULL  
  
UPDATE TRANSACTION_TITLES  
SET COD_ASS_CONC_RESUME = TP.COD_ASS_CONC_RESUME  
   ,RECONCILED = 0  
   ,RECONCILE_DATE = GETDATE()  
   ,IS_ASSIGN = 1  
   ,ASSIGN_RECEIVE_DATE = TP.RECEIVE_DATE  
FROM TRANSACTION_TITLES  
JOIN @TP_FD_EDI_TITLE_NOT_FOUND TP  
 ON TP.COD_TITLE = TRANSACTION_TITLES.COD_TITLE  
WHERE TP.CONCILIATED = 0  
  
UPDATE TRANSACTION_TITLES  
SET ASSIGN_MOVEMENT_CODE = TP.API_MOVEMENT_CODE  
   ,ASSIGN_RECEIVE_DATE = TP.RECEIVE_DATE  
   ,ASSIGN_ANTECIPATION_VALUE = TP.LIQUID_ANTECIPATION_VALUE  
   ,ASSIGN_ANTECIPATION_TAX = TP.ANTECIPATION_TAX  
   ,INTERMEDIATION_TAX = TP.INTERMEDIATION_TAX  
   ,COD_ASS_CONC_RESUME = TP.COD_ASS_CONC_RESUME  
   ,ASSIGN_PAGSEGURO_CODE = TP.PAGSEGURO_CODE
   ,RECONCILED = 1  
   ,RECONCILE_DATE = GETDATE()  
   ,IS_ASSIGN = 1  
FROM TRANSACTION_TITLES  
JOIN @TP_FD_EDI_TITLE_NOT_FOUND TP  
 ON TP.COD_TITLE = TRANSACTION_TITLES.COD_TITLE  
WHERE TP.CONCILIATED = 1  
  
END  
GO

IF OBJECT_ID('DATES_TO_CONCILIATE_ASSIGN') IS NOT NULL DROP TABLE DATES_TO_CONCILIATE_ASSIGN
GO
CREATE TABLE DATES_TO_CONCILIATE_ASSIGN
(
	COD_DATE_CONC_ASSIGN	int
	,CONCILIATE_DATE	datetime
	,ACQUIRER	varchar(255)
)

GO
IF OBJECT_ID('SP_LS_DATES_TO_ASSIGNED') IS NOT NULL DROP PROCEDURE SP_LS_DATES_TO_ASSIGNED
GO
CREATE PROCEDURE SP_LS_DATES_TO_ASSIGNED  
AS
SELECT TOP 100
	COD_DATE_CONC_ASSIGN Cod
   ,CONCILIATE_DATE TransactionDate
   ,ACQUIRER AcquirerCode
FROM DATES_TO_CONCILIATE_ASSIGN
ORDER BY CONCILIATE_DATE DESC

GO
