
IF OBJECT_ID('SEQ_RPS_NUMBER') IS NOT NULL
DROP SEQUENCE [SEQ_RPS_NUMBER];
GO

CREATE SEQUENCE [SEQ_RPS_NUMBER]
 AS [bigint]
 START WITH 36125
 INCREMENT BY 1
 MINVALUE -9223372036854775808
 MAXVALUE 9223372036854775807
 CACHE


GO

IF OBJECT_ID('TP_DATA_EC_NF') IS NOT NULL
DROP TYPE [TP_DATA_EC_NF];
GO

CREATE TYPE [TP_DATA_EC_NF] AS TABLE(
[CNPJ_CPF] VARCHAR(14) NOT NULL,
[VALUE] VARCHAR(100) NOT NULL
)



GO

IF OBJECT_ID('SP_LS_DATA_EC_NF') IS NOT NULL
DROP PROCEDURE [SP_LS_DATA_EC_NF];

GO
       
            
CREATE PROCEDURE [dbo].[SP_LS_DATA_EC_NF]                                      
/*----------------------------------------------------------------------------------------------------------------------                                      
Procedure Name: [SP_LS_DATA_EC_NF]                                      
Project.......: TKPP                                      
------------------------------------------------------------------------------------------------------------------------                                      
Author                          VERSION        Date                            Description                                      
------------------------------------------------------------------------------------------------------------------------                                      
Caike Uchôa                       V1        11/05/2020                          Creation                                           
Elir Ribeiro                      v2        19/06/2020                        alter state to uf                     
Elir Ribeiro                      v3        19/06/2020                        add cep                  
Elir Ribeiro                      v4        27/06/2020                        alter month and year SERVICE INTERMEDIATE                
------------------------------------------------------------------------------------------------------------------------*/                                      
(                      
 @TP_DATA_EC_NF [TP_DATA_EC_NF] READONLY                      
)                      
AS                      
                      
--DECLARANDO VARIAVEIS                      
DECLARE @CPF_CNPJ VARCHAR(14);
                      
DECLARE @VALUE VARCHAR(100);
                      
DECLARE @COD_EC INT;
                      
DECLARE @CONSOLID_FILE_NF AS CURSOR;
                      
DECLARE @TABLE TABLE (COD_EC INT,[VALUE] VARCHAR(100));

--CRIANDO UM CURSOR                      

SET @CONSOLID_FILE_NF = CURSOR FOR SELECT
	ITEM.[CNPJ_CPF]
   ,ITEM.[VALUE]
FROM @TP_DATA_EC_NF ITEM
                      
-- ABRINDO UM CURSOR                      
                      
OPEN @CONSOLID_FILE_NF
                      
                      
--SELECIONAR OS DADOS( busca o próximo dado do cursor)                      
                      
FETCH NEXT FROM @CONSOLID_FILE_NF                       
INTO @CPF_CNPJ, @VALUE;
                      
-- iteração entre os dados retornados pelo Cursor ( Enquanto tiver retornando dados, ele vai inserir as linhas)                      
                      
WHILE @@FETCH_STATUS = 0                      
BEGIN

--INSERT INTO @TABLE (CNPJ,[VALUE]) VALUES (@CPF_CNPJ,@VALUE)                      
SELECT TOP 1
	@COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
FROM COMMERCIAL_ESTABLISHMENT
WHERE COMMERCIAL_ESTABLISHMENT.CPF_CNPJ = @CPF_CNPJ

IF @@rowcount > 0
INSERT INTO @TABLE (COD_EC, [VALUE])
	VALUES (@COD_EC, @VALUE)

----Pegar os próximos dados                      

FETCH NEXT FROM @CONSOLID_FILE_NF
INTO @CPF_CNPJ, @VALUE;
--SELECT * FROM DATA_EQUIPMENT_AC WHERE CODE= @CODE AND ACTIVE= 1 AND COD_AC = 10                      

END
-- FECHANDO E DESALOCANDO O CURSOR DA MEMÓRIA                       

CLOSE @CONSOLID_FILE_NF
DEALLOCATE @CONSOLID_FILE_NF

SELECT
	'2' AS [REGISTER_TYPE]
   ,'RPS' AS [RPS_TYPE]
   ,dbo.LPAD(NEXT VALUE FOR SEQ_RPS_NUMBER, 12, '0') AS [RPS_NUMBER]
   ,CASE
		WHEN CAST(dbo.LPAD(MONTH(GETDATE()), 2, '0') AS VARCHAR(50)) = '01' THEN CAST(YEAR(GETDATE()) - 1 AS VARCHAR(50)) + '-' + CAST(MONTH(DATEADD(MONTH, -1, GETDATE())) AS VARCHAR(50)) + '-' + dbo.LPAD(CAST(DAY(DATEADD(DAY, -1, GETDATE())) AS VARCHAR(50)), 2, '0')
		ELSE CAST(YEAR(GETDATE()) AS VARCHAR(50)) + '-' + dbo.LPAD(CAST(MONTH(DATEADD(MONTH, -1, GETDATE())) AS VARCHAR(50)), 2, '0') + '-' + dbo.LPAD(CAST(DAY(DATEADD(DAY, -1, GETDATE())) AS VARCHAR(50)), 2, '0')
	END AS [EMISSION_DATA]
   ,'T' AS [RPS_SITUATION]
   ,TB.[VALUE]
   ,'000000000000000' AS [VALUE_DEDUCTIONS]
   ,'05895' AS [SERVICE_CODE]
   ,'0200' AS [ALIQUOT]
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ AS CPF_CNPJ
   ,CASE
		WHEN LEN(COMMERCIAL_ESTABLISHMENT.CPF_CNPJ) = 11 THEN '1'
		ELSE '2'
	END [INDICATOR]
   ,COMMERCIAL_ESTABLISHMENT.CPF_CNPJ
   ,COMMERCIAL_ESTABLISHMENT.[NAME] AS [EC_NAME]
   ,'R' AS [ADDRESS_TYPE]
   ,ADDRESS_BRANCH.[ADDRESS] AS STREET
   ,CITY.[NAME] AS [CITY]
   ,[STATE].[UF] AS [STATE]
   ,ADDRESS_BRANCH.CEP AS CEP
   ,CASE
		WHEN CAST(dbo.LPAD(MONTH(GETDATE()), 2, '0') AS VARCHAR(50)) = '01' THEN 'SERVIÇO INTERMEDIAÇÃO ' + CAST(MONTH(DATEADD(MONTH, -1, GETDATE())) AS VARCHAR(50)) + '/' + CAST(YEAR(GETDATE()) - 1 AS VARCHAR(50))
		ELSE 'SERVIÇO INTERMEDIAÇÃO ' + dbo.LPAD(MONTH(GETDATE()) - 1, 2, '0') + '/' + CAST(YEAR(GETDATE()) AS VARCHAR(50))

	END AS [SERVICES_DISCRIMINATION]

FROM COMMERCIAL_ESTABLISHMENT
JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
JOIN @TABLE TB
	ON TB.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC

GO

IF ( SELECT
		COUNT(*)
	FROM SOURCE_PROCESS
	WHERE CODE = '10')
= 0
INSERT SOURCE_PROCESS (CREATED_AT, [DESCRIPTION], CODE)
	VALUES (GETDATE(), 'TXT_EXPORTNF', 'GERAÇÃO DE ARQUIVO NF')

GO

IF OBJECT_ID('SP_REPORT_CASHIN_CELER') IS NOT NULL
DROP PROCEDURE SP_REPORT_CASHIN_CELER
GO
CREATE PROCEDURE [DBO].[SP_REPORT_CASHIN_CELER]
/*----------------------------------------------------------------------------------------
    Project.......: TKPP
------------------------------------------------------------------------------------------
    Author          VERSION      Date              Description
------------------------------------------------------------------------------------------
    Luiz Aquino     v1           2020-05-28        CREATED
------------------------------------------------------------------------------------------*/
(
    @DATE_FROM DATETIME = NULL,
    @DATE_UNTIL DATETIME = NULL,
    @TRANSACTION_ID VARCHAR(64) = NULL,
    @STATUS INT = 4,
    @PAGE_NUMBER INT = NULL,
    @PAGE_SIZE INT = NULL,
    @AMOUNT DECIMAL = NULL,
    @EC CODE_TYPE READONLY,
    @AF CODE_TYPE READONLY,
    @TOTAL INT OUTPUT
)
AS
    
BEGIN
    
    DECLARE @SQL NVARCHAR(MAX) = '';
    DECLARE @WHERE_STMT NVARCHAR(MAX) = ''

SET @SQL = 'SELECT 
                       CPH.COD_PAY_HIST, 
                       A.NAME [AFFILIATED], 
                       CE.TRADING_NAME [ECNAME], 
                       BDE.ACCOUNT, 
                       FSF.AMOUNT, 
                       (CASE    WHEN CPH.PROCESSED = 0 THEN ''PROCESSANDO'' 
                                WHEN CPH.SUCCESS = 1 THEN ''SUCESSO'' 
                                ELSE ''ERRO'' 
                        END) [STATUS], 
                       CPH.ERROR_MESSAGE,
                       (CASE WHEN JSON_RESPONSE IS NULL THEN dbo.FN_FUS_UTF(CPH.CREATED_AT) ELSE CONVERT(DATETIME, CONVERT(DATETIMEOFFSET,JSON_VALUE(JSON_RESPONSE ,''$.dataInicio''))) END) CREATED_AT,
                       CPH.END_DATE,
                       CPH.MODIFIED_AT,
                       CPH.TRACE_ID,
                       CPH.TRANSACTION_ID,
                       CE.CPF_CNPJ
                FROM CELER_PAY_REQUEST_HISTORY CPH (NOLOCK)
                JOIN FINANCE_SCHEDULE_FILE FSF (NOLOCK) on CPH.COD_FIN_SCH_FILE = FSF.COD_FIN_SCH_FILE
                JOIN BANK_DETAILS_EC BDE (NOLOCK) on FSF.COD_BK_EC = BDE.COD_BK_EC
                JOIN COMMERCIAL_ESTABLISHMENT CE (NOLOCK) on BDE.COD_EC = CE.COD_EC
                JOIN AFFILIATOR A (NOLOCK) on CE.COD_AFFILIATOR = A.COD_AFFILIATOR 
                WHERE ';
    
    IF @STATUS = 4
SET @WHERE_STMT += ' (CPH.PROCESSED = 0 OR CPH.PROCESSED = 1 ) ';
ELSE
IF @STATUS = 1
SET @WHERE_STMT += ' CPH.PROCESSED = 0 ';
ELSE
IF @STATUS = 2
SET @WHERE_STMT += ' CPH.PROCESSED = 1 AND CPH.SUCCESS = 1 ';
ELSE
IF @STATUS = 3
SET @WHERE_STMT += ' CPH.PROCESSED = 1 AND CPH.SUCCESS = 0 ';

IF @DATE_FROM IS NOT NULL
SET @WHERE_STMT += ' AND CPH.CREATED_AT >= @DATE_FROM ';

IF @DATE_UNTIL IS NOT NULL
SET @WHERE_STMT += ' AND CPH.CREATED_AT <= @DATE_UNTIL ';

IF @TRANSACTION_ID IS NOT NULL
SET @WHERE_STMT += ' AND (CPH.TRACE_ID = @TRANSACTION_ID OR CPH.TRANSACTION_ID = @TRANSACTION_ID ) ';

IF @AMOUNT IS NOT NULL
SET @WHERE_STMT += ' AND  FSF.AMOUNT >= @AMOUNT '
        
    IF EXISTS (SELECT
		CODE
	FROM @EC)
SET @WHERE_STMT += ' AND BDE.COD_EC IN (SELECT CODE FROM @EC) ';

IF EXISTS (SELECT
			CODE
		FROM @AF)
SET @WHERE_STMT += ' AND CE.COD_AFFILIATOR IN (SELECT CODE FROM @AF) ';

SET @SQL += @WHERE_STMT;
SET @SQL += ' ORDER BY CPH.CREATED_AT DESC ';

    DECLARE @PAGE_OFFSET INT = ( (@PAGE_NUMBER - 1) * @PAGE_SIZE )

    IF @PAGE_NUMBER IS NOT NULL
        BEGIN
            DECLARE @TOTALSQL NVARCHAR(MAX);

SET @SQL += ' OFFSET @PAGE_OFFSET ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY ';

SET @TOTALSQL = 'SELECT @TOTAL = COUNT(*)
                FROM CELER_PAY_REQUEST_HISTORY CPH (NOLOCK)
                JOIN FINANCE_SCHEDULE_FILE FSF (NOLOCK) on CPH.COD_FIN_SCH_FILE = FSF.COD_FIN_SCH_FILE
                JOIN BANK_DETAILS_EC BDE (NOLOCK) on FSF.COD_BK_EC = BDE.COD_BK_EC
                JOIN COMMERCIAL_ESTABLISHMENT CE (NOLOCK) on BDE.COD_EC = CE.COD_EC
                JOIN AFFILIATOR A (NOLOCK) on CE.COD_AFFILIATOR = A.COD_AFFILIATOR 
                WHERE ' + @WHERE_STMT;

EXEC sp_executesql @TOTALSQL
				  ,N'                                                          
                    @DATE_FROM DATETIME,
                    @DATE_UNTIL DATETIME,
                    @TRANSACTION_ID VARCHAR(64),
                    @STATUS INT = 4,
                    @EC CODE_TYPE READONLY,
                    @AF CODE_TYPE READONLY,
                    @AMOUNT DECIMAL,
                    @TOTAL INT OUTPUT
                   '
				  ,@DATE_FROM = @DATE_FROM
				  ,@DATE_UNTIL = @DATE_UNTIL
				  ,@TRANSACTION_ID = @TRANSACTION_ID
				  ,@STATUS = @STATUS
				  ,@EC = @EC
				  ,@AF = @AF
				  ,@AMOUNT = @AMOUNT
				  ,@TOTAL = @TOTAL OUTPUT
END
ELSE
SET @TOTAL = -1;

EXEC sp_executesql @SQL
				  ,N'                                                          
        @DATE_FROM DATETIME,
        @DATE_UNTIL DATETIME,
        @TRANSACTION_ID VARCHAR(64),
        @STATUS INT = 4,
        @PAGE_OFFSET INT,
        @PAGE_SIZE INT,
        @EC CODE_TYPE READONLY,
        @AF CODE_TYPE READONLY,
        @AMOUNT DECIMAL
        '
				  ,@DATE_FROM = @DATE_FROM
				  ,@DATE_UNTIL = @DATE_UNTIL
				  ,@TRANSACTION_ID = @TRANSACTION_ID
				  ,@STATUS = @STATUS
				  ,@PAGE_OFFSET = @PAGE_OFFSET
				  ,@PAGE_SIZE = @PAGE_SIZE
				  ,@EC = @EC
				  ,@AF = @AF
				  ,@AMOUNT = @AMOUNT

END
GO


IF OBJECT_ID('VW_BILLET') IS NOT NULL
DROP VIEW VW_BILLET
GO
CREATE VIEW [VW_BILLET]
AS
SELECT
	[FB].[COD_EC]
   ,[FB].NET_AMOUNT
   ,BDE.COD_BK_EC
   ,FB.PREVISION_PAYMENT
   ,FB.COD_BILLET
   ,FB.COD_SITUATION
FROM FINANCIAL_BILLET FB
JOIN BANK_DETAILS_EC BDE
	ON FB.COD_EC = BDE.COD_EC
		AND ACTIVE = 1
		AND IS_CERC = 0
WHERE FB.COD_SITUATION = 4
GO

IF OBJECT_ID('VW_RELEASES_FINANCE') IS NOT NULL
DROP VIEW VW_RELEASES_FINANCE
GO
CREATE VIEW [VW_RELEASES_FINANCE]
AS
SELECT
	[COD_EC]
   ,[PLOT_VALUE_PAYMENT] AS [TITLE]
   ,0 AS [ADJ]
   ,0 AS [TARIFF]
   ,[COD_BK_EC]
   ,[PREVISION_PAY_DATE]
   ,[COD_TITLE] AS [PK]
   ,[IS_LOCKED]
   ,[COD_SITUATION]
FROM [VW_TITLES]
UNION ALL
SELECT
	[COD_EC]
   ,0 AS [TITLE]
   ,[PLOT_VALUE_PAYMENT] AS [ADJ]
   ,0 AS [TARIFF]
   ,[COD_BK_EC]
   ,[PREVISION_PAY_DATE]
   ,[PK]
   ,0
   ,[COD_SITUATION]
FROM [VW_ADJ_TFF]
WHERE [TYPE] = 'AJUSTE'
AND [PLOT_VALUE_PAYMENT] > 0
UNION ALL
SELECT
	[FB].[COD_EC]
   ,[FB].NET_AMOUNT AS [TITLE]
   ,0 AS [ADJ]
   ,0 AS [TARIFF]
   ,FB.COD_BK_EC AS [COD_BK_EC]
   ,FB.PREVISION_PAYMENT AS [PREVISION_PAY_DATE]
   ,FB.COD_BILLET AS [PK]
   ,0 AS [IS_LOCKED]
   ,FB.COD_SITUATION AS [COD_SITUATION]
FROM VW_BILLET FB;
GO
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'COD_FIN_CALENDAR'
	AND object_id = OBJECT_ID(N'dbo.FINANCIAL_BILLET'))
BEGIN
ALTER TABLE FINANCIAL_BILLET
ADD COD_FIN_CALENDAR INT REFERENCES FINANCE_CALENDAR (COD_FIN_CALENDAR)
END

IF OBJECT_ID('SP_GEN_FINANCE_CALENDAR') IS NOT NULL
DROP PROCEDURE SP_GEN_FINANCE_CALENDAR
GO
CREATE PROCEDURE [SP_GEN_FINANCE_CALENDAR](
    @TP [CODE_TYPE] READONLY)
AS
BEGIN
    -- param procedure
    DECLARE @PREVISION_PAY_DATE DATE;
    DECLARE @PLOT_VALUE_PAYMENT DECIMAL(22, 6);
    DECLARE @COD_SITUATION INT;
    DECLARE @COD_BK_EC INT;
    DECLARE @BANK VARCHAR(255);
    DECLARE @PRIORITY INT;
    DECLARE @COD_BANK INT;
    DECLARE @CODE_BANK VARCHAR(255);
    DECLARE @AGENCY VARCHAR(255);
    DECLARE @DIGIT_AGENCY VARCHAR(255);
    DECLARE @ACCOUNT VARCHAR(255);
    DECLARE @DIGIT_ACCOUNT VARCHAR(255);
    DECLARE @COD_TYPE_ACCOUNT INT;
    DECLARE @ACCOUNT_TYPE VARCHAR(255);
    DECLARE @COD_OPER_BANK INT;
    DECLARE @OPERATION_CODE VARCHAR(255);
    DECLARE @OPERATION_DESC VARCHAR(255);
    DECLARE @IS_LOCK INT;
    DECLARE @IS_ASSIGNMENT INT;
    DECLARE @ASSIGNMENT_NAME VARCHAR(255);
    DECLARE @ASSIGNMENT_IDENTIFICATION VARCHAR(255);
    DECLARE @COD_EC INT;
    DECLARE @COMMERCIAL_CODE VARCHAR(255);
    DECLARE @EC_CPF_CNPJ VARCHAR(14);
    DECLARE @EC_NAME VARCHAR(255);
    DECLARE @TYPE_ESTAB VARCHAR(255);
    DECLARE @TRADING_NAME VARCHAR(255);
    DECLARE @COD_AFFILIATOR INT;
    DECLARE @AFFILIATOR_NAME VARCHAR(255);
    DECLARE @AFFILIATOR_CPF_CNPJ VARCHAR(14);
    DECLARE @COD_FINANCE_CALENDAR INT;
    DECLARE @COD_COMP INT;

SELECT
	[VW_RELEASES_FINANCE].[COD_EC]
   ,SUM([TITLE]) AS [TITLE]
   ,SUM([ADJ]) AS [ADJ]
   ,SUM([TARIFF]) AS [TARIFF]
   ,[PREVISION_PAY_DATE]
   ,[COD_BK_EC]
   ,[IS_LOCKED]
   ,[COD_SITUATION]
   ,CAST(0 AS DECIMAL(22, 6)) AS [TOTAL]
   ,0 AS [EXCLUDE] INTO [#RELEASES_FIN]
FROM [VW_RELEASES_FINANCE]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW_RELEASES_FINANCE].[COD_EC]
GROUP BY [VW_RELEASES_FINANCE].[COD_EC]
		,[VW_RELEASES_FINANCE].[PREVISION_PAY_DATE]
		,[VW_RELEASES_FINANCE].[COD_BK_EC]
		,[VW_RELEASES_FINANCE].[IS_LOCKED]
		,[COD_SITUATION];

SELECT
	[VW].* INTO [#ALL_TITLES]
FROM [VW_TITLES] AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC];

SELECT
	[VW].* INTO [#ALL_ADJ_TARIFF]
FROM [VW_ADJ_TFF] AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC];

SELECT
	[VW].* INTO [#ALL_BILLET]
FROM VW_BILLET AS [VW]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [VW].[COD_EC]

-- delete [FINANCE_CALENDAR] quando ec já exitir para a data de previsão e estiver com a situação 4

SELECT
	[COD_FIN_CALENDAR] INTO [#FINANCE_CALENDAR_EXISTS]
FROM [FINANCE_CALENDAR]
JOIN @TP AS [TP]
	ON [TP].[CODE] = [FINANCE_CALENDAR].[COD_EC]
WHERE [FINANCE_CALENDAR].[ACTIVE] = 1
AND [FINANCE_CALENDAR].[COD_SITUATION] = 4;

UPDATE [FINANCE_RESUME]
SET [ACTIVE] = 0
FROM [FINANCE_RESUME]
WHERE [FINANCE_RESUME].[COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR_EXISTS]);

UPDATE [FINANCE_CALENDAR]
SET [ACTIVE] = 0
FROM [FINANCE_CALENDAR]
WHERE [FINANCE_CALENDAR].[COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#FINANCE_CALENDAR_EXISTS]);

-- Buscar maior valor cerc

SELECT
	MAX([TITLE]) AS [MAX_VALUE]
   ,[COD_EC]
   ,[PREVISION_PAY_DATE] INTO [#MAX_VALUE_LOCK]
FROM [#RELEASES_FIN]
WHERE [IS_LOCKED] = 1
GROUP BY [COD_EC]
		,[PREVISION_PAY_DATE];

SELECT
	SUM([ADJ]) AS [ADJ]
   ,SUM([TARIFF]) AS [TARIFF]
   ,[#RELEASES_FIN].[COD_EC]
   ,[#RELEASES_FIN].[PREVISION_PAY_DATE] INTO [#DISCOUNTS_CERC]
FROM [#RELEASES_FIN]
LEFT JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [#RELEASES_FIN].[COD_EC]
		AND [MAX_VALUE].[PREVISION_PAY_DATE] = [#RELEASES_FIN].[PREVISION_PAY_DATE] -- essa porra aqui
WHERE (CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) < 0
AND [MAX_VALUE].[COD_EC] IS NOT NULL
GROUP BY [#RELEASES_FIN].[COD_EC]
		,[#RELEASES_FIN].[PREVISION_PAY_DATE];

--atribuição de valores das tarifas

UPDATE [T]
SET [T].[TARIFF] = [#DISCOUNTS_CERC].[TARIFF]
   ,[T].[ADJ] = [#DISCOUNTS_CERC].[ADJ]
FROM [#RELEASES_FIN] AS [T]
JOIN [#MAX_VALUE_LOCK] [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [T].[COD_EC]
	AND [T].[TITLE] = [MAX_VALUE].[MAX_VALUE]
	AND [T].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE]
JOIN [#DISCOUNTS_CERC]
	ON [#DISCOUNTS_CERC].[COD_EC] = [T].[COD_EC]
	AND [T].[PREVISION_PAY_DATE] = [#DISCOUNTS_CERC].[PREVISION_PAY_DATE];

UPDATE [RELEASE]
SET [RELEASE].[TARIFF] = 0.0
   ,[RELEASE].[ADJ] = 0.0
FROM [#RELEASES_FIN] AS [RELEASE]
JOIN [#MAX_VALUE_LOCK] AS [MAX_VALUE]
	ON [MAX_VALUE].[COD_EC] = [RELEASE].[COD_EC]
WHERE ((CAST([TITLE] AS DECIMAL(22, 2)) + [ADJ] + [TARIFF]) <= 0
AND [RELEASE].[PREVISION_PAY_DATE] = [MAX_VALUE].[PREVISION_PAY_DATE])
AND [RELEASE].[IS_LOCKED] = 0;

UPDATE [#RELEASES_FIN]
SET [TOTAL] = ([#RELEASES_FIN].[TITLE] + [#RELEASES_FIN].[ADJ] + [#RELEASES_FIN].[TARIFF]);

UPDATE [#RELEASES_FIN]
SET [EXCLUDE] = 1
FROM [#RELEASES_FIN] [RF]
WHERE ([RF].[TARIFF] < 0.001
AND [RF].[TARIFF] > -0.001)
AND ([RF].[TITLE] < 0.001
AND [RF].[TITLE] > -0.001)
AND ([RF].[ADJ] < 0.001
AND [RF].[ADJ] > -0.001);

-- cursor para inserção da finance_calendar

DECLARE FINANCE_CURSOR CURSOR FOR SELECT
	[FINANCE].[PREVISION_PAY_DATE]
   ,[FINANCE].[TOTAL]
   ,[FINANCE].[COD_SITUATION]
   ,[FINANCE].[COD_BK_EC]
   ,[BANK_DETAILS_EC].[COD_BANK]
   ,[BANKS].[NAME] AS [NAME_BANK]
   ,[BANKS].[PRIORITY]
   ,[BANKS].[CODE] AS [CODE_BANK]
   ,[BANK_DETAILS_EC].[AGENCY]
   ,[BANK_DETAILS_EC].[DIGIT_AGENCY]
   ,[BANK_DETAILS_EC].[ACCOUNT]
   ,[BANK_DETAILS_EC].[DIGIT_ACCOUNT]
   ,[BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
   ,[ACCOUNT_TYPE].[NAME] AS [ACCOUNT_TYPE]
   ,[BANK_DETAILS_EC].[COD_OPER_BANK]
   ,[OPERATION].[CODE] AS [OPERATION]
   ,[OPERATION].[DESCRIPTION]
   ,[FINANCE].[IS_LOCKED]
   ,[BANK_DETAILS_EC].[IS_ASSIGNMENT]
   ,[BANK_DETAILS_EC].[ASSIGNMENT_NAME]
   ,[BANK_DETAILS_EC].[ASSIGNMENT_IDENTIFICATION]
   ,[FINANCE].[COD_EC]
   ,[COMMERCIAL_ESTABLISHMENT].[CODE] AS [EC_CODE]
   ,[COMMERCIAL_ESTABLISHMENT].[CPF_CNPJ] AS [EC_CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[NAME] AS [EC_NAME]
   ,[TYPE_ESTAB].[CODE] AS [TYPE_EC]
   ,[COMMERCIAL_ESTABLISHMENT].[TRADING_NAME]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
   ,[AFFILIATOR].[NAME] AS [AFF_NAME]
   ,[AFFILIATOR].[CPF_CNPJ] AS [AFF_CPF_CNPJ]
   ,[COMMERCIAL_ESTABLISHMENT].[COD_COMP]
FROM [#RELEASES_FIN] AS [FINANCE]
JOIN [BANK_DETAILS_EC]
	ON [BANK_DETAILS_EC].[COD_BK_EC] = [FINANCE].[COD_BK_EC]
JOIN [BANKS]
	ON [BANKS].[COD_BANK] = [BANK_DETAILS_EC].[COD_BANK]
JOIN [ACCOUNT_TYPE]
	ON [ACCOUNT_TYPE].[COD_TYPE_ACCOUNT] =
	[BANK_DETAILS_EC].[COD_TYPE_ACCOUNT]
LEFT JOIN [OPERATION_BANK]
	ON [OPERATION_BANK].[COD_OPER_BANK] = [BANK_DETAILS_EC].[COD_OPER_BANK]
LEFT JOIN [OPERATION]
	ON [OPERATION].[COD_OPER] = [OPERATION_BANK].[COD_OPER]
JOIN [COMMERCIAL_ESTABLISHMENT]
	ON [COMMERCIAL_ESTABLISHMENT].[COD_EC] = [FINANCE].[COD_EC]
JOIN [TYPE_ESTAB]
	ON [TYPE_ESTAB].[COD_TYPE_ESTAB] =
	[COMMERCIAL_ESTABLISHMENT].[COD_TYPE_ESTAB]
LEFT JOIN [AFFILIATOR]
	ON [AFFILIATOR].[COD_AFFILIATOR] =
	[COMMERCIAL_ESTABLISHMENT].[COD_AFFILIATOR]
WHERE [FINANCE].[EXCLUDE] = 0
ORDER BY [FINANCE].[COD_BK_EC],
[FINANCE].[TOTAL],
[FINANCE].[PREVISION_PAY_DATE];

OPEN FINANCE_CURSOR;

FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

WHILE @@fetch_status = 0
BEGIN

-- inserção da finance_calendar

SET @COD_FINANCE_CALENDAR = NULL;

INSERT INTO [FINANCE_CALENDAR] ([PREVISION_PAY_DATE],
[PLOT_VALUE_PAYMENT],
[COD_SITUATION],
[COD_BK_EC],
[BANK],
[PRIORITY],
[COD_BANK],
[CODE_BANK],
[AGENCY],
[DIGIT_AGENCY],
[ACCOUNT],
[DIGIT_ACCOUNT],
[COD_TYPE_ACCOUNT],
[ACCOUNT_TYPE],
[COD_OPER_BANK],
[OPERATION_CODE],
[OPERATION_DESC],
[IS_LOCK],
[IS_ASSIGNMENT],
[ASSIGNMENT_NAME],
[ASSIGNMENT_IDENTIFICATION],
[COD_EC],
[COMMERCIAL_CODE],
[EC_CPF_CNPJ],
[EC_NAME],
[TYPE_ESTAB],
[TRADING_NAME],
[COD_AFFILIATOR],
[AFFILIATOR_NAME],
[AFFILIATOR_CPF_CNPJ],
[COD_COMP])
	VALUES (@PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @BANK, @PRIORITY, @COD_BANK, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP);

-- atualização da pk nos títulos, ajustes e tarifas
SET @COD_FINANCE_CALENDAR = @@identity;

UPDATE [TRANSACTION_TITLES]
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM [TRANSACTION_TITLES]
JOIN [#ALL_TITLES] [TITLE]
	ON [TITLE].[COD_TITLE] = [TRANSACTION_TITLES].[COD_TITLE]
	AND [TITLE].[COD_BK_EC] = @COD_BK_EC
	AND CAST([TITLE].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE
JOIN @TP [TP]
	ON [TP].[CODE] = [TITLE].[COD_EC];

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM [RELEASE_ADJUSTMENTS]
JOIN [#ALL_ADJ_TARIFF] [ADJ]
	ON [ADJ].[PK] = [RELEASE_ADJUSTMENTS].[COD_REL_ADJ]
	AND [TYPE] = 'AJUSTE'
	AND [ADJ].[COD_BK_EC] = @COD_BK_EC
	AND CAST([ADJ].[PREVISION_PAY_DATE] AS DATE) = @PREVISION_PAY_DATE;

UPDATE FINANCIAL_BILLET
SET [COD_FIN_CALENDAR] = @COD_FINANCE_CALENDAR
FROM FINANCIAL_BILLET
JOIN [#ALL_BILLET] [BL]
	ON [BL].COD_BILLET = [FINANCIAL_BILLET].COD_BILLET
	AND [BL].COD_BK_EC = @COD_BK_EC
	AND CAST([BL].PREVISION_PAYMENT AS DATE) = @PREVISION_PAY_DATE;

INSERT INTO [FINANCE_RESUME] ([TITLES_VALUE],
[ADJUSTMENTS_VALUE],
[TARIFF_VALUE],
[COD_FIN_CALENDAR])
	SELECT
		[TITLE]
	   ,[ADJ]
	   ,[TARIFF]
	   ,@COD_FINANCE_CALENDAR
	FROM [#RELEASES_FIN]
	WHERE [COD_EC] = @COD_EC
	AND [COD_BK_EC] = @COD_BK_EC
	AND [PREVISION_PAY_DATE] = @PREVISION_PAY_DATE;
FETCH NEXT FROM FINANCE_CURSOR INTO @PREVISION_PAY_DATE, @PLOT_VALUE_PAYMENT, @COD_SITUATION, @COD_BK_EC, @COD_BANK, @BANK, @PRIORITY, @CODE_BANK, @AGENCY, @DIGIT_AGENCY, @ACCOUNT, @DIGIT_ACCOUNT, @COD_TYPE_ACCOUNT, @ACCOUNT_TYPE, @COD_OPER_BANK, @OPERATION_CODE, @OPERATION_DESC, @IS_LOCK, @IS_ASSIGNMENT, @ASSIGNMENT_NAME, @ASSIGNMENT_IDENTIFICATION, @COD_EC, @COMMERCIAL_CODE, @EC_CPF_CNPJ, @EC_NAME, @TYPE_ESTAB, @TRADING_NAME, @COD_AFFILIATOR, @AFFILIATOR_NAME, @AFFILIATOR_CPF_CNPJ, @COD_COMP;

END;

CLOSE FINANCE_CURSOR;

DEALLOCATE FINANCE_CURSOR;

END;
GO

IF OBJECT_ID('SP_RECONCILE_FIN_CALENDAR') IS NOT NULL
DROP PROCEDURE SP_RECONCILE_FIN_CALENDAR
GO
CREATE PROCEDURE [SP_RECONCILE_FIN_CALENDAR]
AS
BEGIN

UPDATE [TRANSACTION_TITLES]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TRANSACTION_TITLES]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TRANSACTION_TITLES].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([TRANSACTION_TITLES].[COD_PAY_PROT] <> ISNULL([TRANSACTION_TITLES].[COD_PAY_PROT], 0));

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [RELEASE_ADJUSTMENTS]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([RELEASE_ADJUSTMENTS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([RELEASE_ADJUSTMENTS].[COD_PAY_PROT] <> ISNULL([RELEASE_ADJUSTMENTS].[COD_PAY_PROT], 0));

UPDATE [TARIFF_EC]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TARIFF_EC]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TARIFF_EC].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TARIFF_EC].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
OR ([TARIFF_EC].[COD_PAY_PROT] <> ISNULL([TARIFF_EC].[COD_PAY_PROT], 0));

UPDATE [TITLE_LOCK_PAYMENT_DETAILS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS]
JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].[COD_TITLE] = [TITLE_LOCK_PAYMENT_DETAILS].[COD_TITLE]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TITLE_LOCK_PAYMENT_DETAILS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION]);

UPDATE FINANCIAL_BILLET
SET [COD_SITUATION] = FC.COD_SITUATION
   ,[COD_PAY_PROT] = FC.COD_PAY_PROT
FROM FINANCIAL_BILLET
JOIN FINANCE_CALENDAR FC
	ON FINANCIAL_BILLET.COD_FIN_CALENDAR = FC.COD_FIN_CALENDAR
	AND FC.ACTIVE = 1
WHERE (FINANCIAL_BILLET.COD_SITUATION <> [FC].COD_SITUATION);

END;
GO

IF OBJECT_ID('SP_REMOVE_FINANCE_UNUSED') IS NOT NULL
DROP PROCEDURE SP_REMOVE_FINANCE_UNUSED
GO
CREATE PROCEDURE [SP_REMOVE_FINANCE_UNUSED]
AS
BEGIN

SELECT TOP 1000
	[COD_FIN_CALENDAR] INTO [#TMP_DELETE]
FROM [FINANCE_CALENDAR]
WHERE [ACTIVE] = 0;

UPDATE [TRANSACTION_TITLES]
SET [COD_FIN_CALENDAR] = NULL
FROM [TRANSACTION_TITLES]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_FIN_CALENDAR] = NULL
FROM [RELEASE_ADJUSTMENTS]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);

UPDATE [TARIFF_EC]
SET [COD_FIN_CALENDAR] = NULL
FROM [TARIFF_EC]
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);

UPDATE FINANCIAL_BILLET
SET [COD_FIN_CALENDAR] = NULL
FROM FINANCIAL_BILLET
WHERE [COD_FIN_CALENDAR] IN (SELECT
		[COD_FIN_CALENDAR]
	FROM [#TMP_DELETE]);

DELETE FROM [FINANCE_RESUME]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);

DELETE FROM [FINANCE_SCHEDULE_HISTORY]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);

DELETE [FINANCE_CALENDAR]
	FROM [FINANCE_CALENDAR]
WHERE [COD_FIN_CALENDAR] IN (SELECT
			[COD_FIN_CALENDAR]
		FROM [#TMP_DELETE]);

END;
GO

IF OBJECT_ID('SP_FIN_CALENDAR_BILLET') IS NOT NULL
DROP PROCEDURE SP_FIN_CALENDAR_BILLET
GO
CREATE PROCEDURE [DBO].[SP_FIN_CALENDAR_BILLET](@COD_BK_EC INT, @DATE DATE, @COD_SITUATION INT = NULL)
AS
BEGIN

SET @DATE = DATEADD(DAY, 1, @DATE)

SELECT
	[BT].[TRANSACTION_CODE]
   ,1 AS [PLOT]
   ,[dbo].[FN_FUS_UTF](BT.CREATED_AT) AS [TRANSACTION_DATE]
   ,[BT].BILLET_AMOUNT AS [TRANSACTION_AMOUNT]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,BT.NET_AMOUNT AS [PLOT_VALUE_PAYMENT]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], N'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], N'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,(CASE
		WHEN [F].COD_SITUATION = 4 THEN 'PAGAMENTO'
		WHEN [F].COD_SITUATION = 17 THEN 'CONFIRMACAO'
		WHEN [F].COD_SITUATION = 8 THEN 'PAGO'
		WHEN [F].COD_SITUATION = 33 THEN 'COMPENSAR'
	END) AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'BILLET' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FINANCE_SCHEDULE_FILE].[CREATED_AT] AS [FILE_DATE]
   ,[FINANCE_SCHEDULE_FILE].FILE_NAME
   ,[FINANCE_SCHEDULE_FILE].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,0 [IS_SPOT]
FROM [FINANCE_CALENDAR] AS [F]
JOIN FINANCIAL_BILLET FB
	ON F.COD_FIN_CALENDAR = FB.COD_FIN_CALENDAR
JOIN BILLET_TRANSACTION BT
	ON FB.COD_BILLET = BT.COD_BILLET
LEFT JOIN [FINANCE_SCHEDULE_FILE]
	ON [FINANCE_SCHEDULE_FILE].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[COD_BK_EC] = @COD_BK_EC
AND [F].[COD_SITUATION] = ISNULL(@COD_SITUATION, 4)
AND [F].[ACTIVE] = 1
AND [F].[PREVISION_PAY_DATE] < @DATE;
END;
GO

IF OBJECT_ID('SP_PAYMENT_PROTOCOL_BILLET') IS NOT NULL
DROP PROCEDURE SP_PAYMENT_PROTOCOL_BILLET
GO
CREATE PROCEDURE [DBO].[SP_PAYMENT_PROTOCOL_BILLET](@PROTOCOL VARCHAR(100))
AS
BEGIN

SELECT
	[BT].[TRANSACTION_CODE] AS [TRANSACTION_CODE]
   ,[BT].[BILLET_AMOUNT] AS [TRANSACTION_AMOUNT]
   ,'1/1' AS [PLOT]
   ,[dbo].[FN_FUS_UTF]([BT].[CREATED_AT]) AS [TRANSACTION_DATE]
   ,[F].[COD_EC]
   ,[F].[EC_NAME] AS [EC]
   ,[F].[EC_CPF_CNPJ] AS [CPF_CNPJ_EC]
   ,[FB].NET_AMOUNT AS [PLOT_VALUE]
   ,[F].[PREVISION_PAY_DATE]
   ,[F].[COD_BANK]
   ,ISNULL([F].[CODE_BANK], N'NÃO CADASTRADO') AS [CODE_BANK]
   ,ISNULL([F].[BANK], N'NÃO CADASTRADO') AS [BANK]
   ,[F].[AGENCY]
   ,CONCAT([F].[ACCOUNT], [F].[DIGIT_ACCOUNT]) AS [ACCOUNT]
   ,(CASE
		WHEN [F].COD_SITUATION = 4 THEN 'PAGAMENTO'
		WHEN [F].COD_SITUATION = 17 THEN 'CONFIRMACAO'
		WHEN [F].COD_SITUATION = 8 THEN 'PAGO'
		WHEN [F].COD_SITUATION = 33 THEN 'COMPENSAR'
	END) AS [SITUATION]
   ,[F].[COD_SITUATION]
   ,'BILLET' AS [TYPE_RELEASE]
   ,[F].[COD_FIN_SCH_FILE]
   ,[FSF].[CREATED_AT] AS [FILE_DATE]
   ,[FSF].FILE_NAME
   ,[FSF].[FILE_SEQUENCE]
   ,[F].[IS_LOCK]
   ,0 AS [IS_SPOT]
   ,[P].[PROTOCOL]
FROM [FINANCE_CALENDAR] AS [F]
JOIN FINANCIAL_BILLET FB
	ON F.COD_FIN_CALENDAR = FB.COD_FIN_CALENDAR
JOIN BILLET_TRANSACTION BT
	ON FB.COD_BILLET = BT.COD_BILLET
JOIN [PROTOCOLS] AS [P]
	ON [P].[COD_PAY_PROT] = [F].[COD_PAY_PROT]
LEFT JOIN [FINANCE_SCHEDULE_FILE] [FSF]
	ON [FSF].[COD_FIN_SCH_FILE] = [F].[COD_FIN_SCH_FILE]
WHERE [F].[ACTIVE] = 1
AND [F].[COD_SITUATION] = 8
AND [P].[PROTOCOL] = @PROTOCOL;
END;
GO

IF OBJECT_ID('SP_FINANCE_CALENDAR_BILLET') IS NOT NULL
DROP PROCEDURE SP_FINANCE_CALENDAR_BILLET
GO
CREATE PROCEDURE [dbo].[SP_FINANCE_CALENDAR_BILLET]
(
    @UntilDate [DATETIME],
    @Ec [CODE_TYPE] READONLY,
    @Bank [CODE_TYPE] READONLY,
    @CodAf [CODE_TYPE] READONLY,
    @AccountType [CODE_TYPE] READONLY,
    @CodSituation [CODE_TYPE] READONLY,
    @ONLY_ASSIGNMENT INT = NULL,
    @MIN_VALUE DECIMAL(16,2) = NULL
) AS BEGIN
    DECLARE @CodLockedFinance INT;
    DECLARE @CodAwaitConfirm INT;
    DECLARE @CodPayment INT;
    DECLARE @CodAwaitCompensate INT;

SELECT
	@CodLockedFinance = COD_SITUATION
FROM SITUATION
WHERE NAME = 'LOCKED FINANCIAL SCHEDULE';
SELECT
	@CodAwaitConfirm = COD_SITUATION
FROM SITUATION
WHERE NAME = 'AWAITING CONFIRMATION PAYMENT';
SELECT
	@CodPayment = COD_SITUATION
FROM SITUATION
WHERE NAME = 'AWAITING PAYMENT';
SELECT
	@CodAwaitCompensate = COD_SITUATION
FROM SITUATION
WHERE NAME = 'AWAITING COMPENSATION';

DECLARE @SQL NVARCHAR(MAX)

SET @SQL = 'SELECT
                    SUM(FINANCIAL_BILLET.NET_AMOUNT) PLOT_VALUE_PAYMENT,
                    CE.COD_EC,
                    CE.NAME [NAME_EC],
                    CE.CPF_CNPJ,
                    BDE.COD_BANK,
                    B.CODE [CODE_BANK],
                    B.NAME [BANK],
                    BDE.ACCOUNT,
                    BDE.AGENCY,
                    T.NAME [ACCOUNT_TYPE],
                    OB.COD_OPER [OPERATION_BANK],
                    O.CODE [OPERATION_CODE],
                    A.COD_AFFILIATOR,
                    A.NAME [NAME_AFILIATED],
                    (CASE   WHEN CE.COD_SITUATION = @CodLockedFinance THEN ''AGENDA SUSPENSA''
                            WHEN FINANCIAL_BILLET.COD_SITUATION = @CodAwaitConfirm THEN ''CONFIRMACAO''
                            WHEN FINANCIAL_BILLET.COD_SITUATION = @CodPayment THEN ''PAGAMENTO''
                            WHEN FINANCIAL_BILLET.COD_SITUATION = @CodAwaitCompensate THEN ''AGUARDANDO COMPENSAR''
                    END) [SITUATION_BILL],
                    BT.SPLIT_MODE [IS_SPLIT],
                    BDE.IS_ASSIGNMENT,
                    BDE.ASSIGNMENT_IDENTIFICATION,
                    (CASE WHEN CE.COD_SITUATION = @CodLockedFinance THEN CE.COD_SITUATION ELSE FINANCIAL_BILLET.COD_SITUATION END) [COD_SITUATION]
               FROM FINANCIAL_BILLET (NOLOCK)
                    JOIN COMMERCIAL_ESTABLISHMENT CE (NOLOCK) ON FINANCIAL_BILLET.COD_EC = CE.COD_EC
                    JOIN AFFILIATOR A (NOLOCK) on CE.COD_AFFILIATOR = A.COD_AFFILIATOR
                    LEFT JOIN BANK_DETAILS_EC BDE (NOLOCK) on CE.COD_EC = BDE.COD_EC AND BDE.ACTIVE = 1 AND BDE.IS_CERC = 0
                    LEFT JOIN BANKS B (NOLOCK) on BDE.COD_BANK = B.COD_BANK
                    LEFT JOIN OPERATION_BANK OB (NOLOCK) on BDE.COD_OPER_BANK = OB.COD_OPER_BANK
                    LEFT JOIN OPERATION O (NOLOCK) on O.COD_OPER = OB.COD_OPER
                    JOIN ACCOUNT_TYPE T (NOLOCK) on BDE.COD_TYPE_ACCOUNT = T.COD_TYPE_ACCOUNT
                    JOIN BILLET_TRANSACTION BT (NOLOCK) on FINANCIAL_BILLET.COD_BILLET = BT.COD_BILLET AND BT.COD_SITUATION IN (@CodAwaitConfirm, @CodPayment, @CodAwaitCompensate) 
                WHERE '

    IF EXISTS (SELECT TOP 1
		CODE
	FROM @CodSituation)
SET @SQL += ' (FINANCIAL_BILLET.COD_SITUATION IN (SELECT CODE FROM @CodSituation) OR CE.COD_SITUATION IN (SELECT CODE FROM @CodSituation) ) '
    ELSE
SET @SQL += ' FINANCIAL_BILLET.COD_SITUATION IN (@CodAwaitConfirm, @CodPayment, @CodAwaitCompensate) '

SET @SQL += ' AND ( FINANCIAL_BILLET.PREVISION_PAYMENT <= @UntilDate OR FINANCIAL_BILLET.PREVISION_PAYMENT IS NULL ) '

    IF EXISTS (SELECT TOP 1
		CODE
	FROM @Ec)
SET @SQL += ' AND FINANCIAL_BILLET.COD_EC IN (SELECT CODE FROM @Ec) '

    IF EXISTS (SELECT TOP 1
		CODE
	FROM @Bank)
SET @SQL += ' AND BDE.COD_BANK IN (SELECT CODE FROM @Bank) '

    IF EXISTS (SELECT TOP 1
		CODE
	FROM @CodAf)
SET @SQL += ' AND CE.COD_AFFILIATOR IN (SELECT CODE FROM @CodAf) '

    IF EXISTS (SELECT TOP 1
		CODE
	FROM @AccountType)
SET @SQL += ' AND BDE.COD_TYPE_ACCOUNT IN (SELECT CODE FROM @AccountType) '

    IF @ONLY_ASSIGNMENT = 1
SET @SQL += ' AND BDE.IS_ASSIGNMENT = 1 '

    IF @MIN_VALUE IS NOT NULL
SET @SQL += ' AND FINANCIAL_BILLET.NET_AMOUNT > @MIN_VALUE '

SET @SQL += ' GROUP BY
                    CE.COD_EC,
                    CE.NAME,
                    CE.CPF_CNPJ,
                    BDE.COD_BANK,
                    B.CODE,
                    B.NAME,
                    BDE.ACCOUNT,
                    BDE.AGENCY,
                    T.NAME,
                    OB.COD_OPER,
                    O.CODE,
                    A.COD_AFFILIATOR,
                    A.NAME,
                    (CASE   WHEN CE.COD_SITUATION = @CodLockedFinance THEN ''AGENDA SUSPENSA''
                            WHEN FINANCIAL_BILLET.COD_SITUATION = @CodAwaitConfirm THEN ''CONFIRMACAO''
                            WHEN FINANCIAL_BILLET.COD_SITUATION = @CodPayment THEN ''PAGAMENTO''
                            WHEN FINANCIAL_BILLET.COD_SITUATION = @CodAwaitCompensate THEN ''AGUARDANDO COMPENSAR''
                    END),
                    BT.SPLIT_MODE,
                    BDE.IS_ASSIGNMENT,
                    BDE.ASSIGNMENT_IDENTIFICATION,
                    (CASE WHEN CE.COD_SITUATION = @CodLockedFinance THEN CE.COD_SITUATION ELSE FINANCIAL_BILLET.COD_SITUATION END) '


EXEC sp_executesql @SQL
				  ,N'  @CodLockedFinance INT,
         @CodAwaitConfirm INT,
         @CodPayment INT,
         @Ec [CODE_TYPE] READONLY,
         @Bank [CODE_TYPE] READONLY,
         @CodAf [CODE_TYPE] READONLY,
         @AccountType [CODE_TYPE] READONLY,
         @CodSituation [CODE_TYPE] READONLY,
         @UntilDate [DATETIME],
         @CodAwaitCompensate INT,
         @MIN_VALUE DECIMAL(16, 2)'
				  ,@CodLockedFinance = @CodLockedFinance
				  ,@CodAwaitConfirm = @CodAwaitConfirm
				  ,@CodPayment = @CodPayment
				  ,@Ec = @Ec
				  ,@Bank = @Bank
				  ,@CodAf = @CodAf
				  ,@AccountType = @AccountType
				  ,@CodSituation = @CodSituation
				  ,@UntilDate = @UntilDate
				  ,@CodAwaitCompensate = @CodAwaitCompensate
				  ,@MIN_VALUE = @MIN_VALUE
END
GO

IF OBJECT_ID('SP_RECONCILE_FIN_CALENDAR_BY_EC') IS NOT NULL
DROP PROCEDURE SP_RECONCILE_FIN_CALENDAR_BY_EC
GO
CREATE PROCEDURE [SP_RECONCILE_FIN_CALENDAR_BY_EC](
    @COD_EC INT)
AS
BEGIN

UPDATE [TRANSACTION_TITLES]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TRANSACTION_TITLES]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TRANSACTION_TITLES].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

UPDATE [RELEASE_ADJUSTMENTS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [RELEASE_ADJUSTMENTS]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [RELEASE_ADJUSTMENTS].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([RELEASE_ADJUSTMENTS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;


UPDATE [TARIFF_EC]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
   ,[COD_PAY_PROT] = [FINANCE_CALENDAR].[COD_PAY_PROT]
FROM [TARIFF_EC]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TARIFF_EC].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TARIFF_EC].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;


UPDATE [TITLE_LOCK_PAYMENT_DETAILS]
SET [COD_SITUATION] = [FINANCE_CALENDAR].[COD_SITUATION]
FROM [TITLE_LOCK_PAYMENT_DETAILS]
JOIN [TRANSACTION_TITLES]
	ON [TRANSACTION_TITLES].[COD_TITLE] = [TITLE_LOCK_PAYMENT_DETAILS].[COD_TITLE]
JOIN [FINANCE_CALENDAR]
	ON [FINANCE_CALENDAR].[COD_FIN_CALENDAR] = [TRANSACTION_TITLES].[COD_FIN_CALENDAR]
	AND [FINANCE_CALENDAR].[ACTIVE] = 1
WHERE ([TITLE_LOCK_PAYMENT_DETAILS].[COD_SITUATION] <> [FINANCE_CALENDAR].[COD_SITUATION])
AND [FINANCE_CALENDAR].[COD_EC] = @COD_EC;

UPDATE FINANCIAL_BILLET
SET [COD_SITUATION] = FC.COD_SITUATION
   ,[COD_PAY_PROT] = FC.COD_PAY_PROT
FROM FINANCIAL_BILLET
JOIN FINANCE_CALENDAR FC
	ON FINANCIAL_BILLET.COD_FIN_CALENDAR = FC.COD_FIN_CALENDAR
	AND FC.ACTIVE = 1
WHERE (FINANCIAL_BILLET.COD_SITUATION <> [FC].COD_SITUATION)
AND [FINANCIAL_BILLET].[COD_EC] = @COD_EC;

END;
GO

ALTER PROCEDURE [dbo].[SP_REPORT_TRANSACTIONS_CONSOLIDATED]  
    /*----------------------------------------------------------------------------------------                                                                        
     Procedure Name: [SP_REPORT_TRANSACTIONS_CONSOLIDATED]                                                                        
     Project.......: TKPP                                                                        
     ------------------------------------------------------------------------------------------                                                                        
     Author                       VERSION            Date             Description                                                                        
     ------------------------------------------------------------------------------------------                                                                        
     Elir Ribeiro       v1                2020-03-20      add new procedure                      
     Elir Ribeiro       v2                2020-03-27      ajustando o cod_situation              
     Elir Ribeiro      V3                2020-04-02      ajustando a procedure         
     ------------------------------------------------------------------------------------------*/  
    AS
SET
NOCOUNT ON
SET
ARITHABORT ON
 BEGIN
SELECT
	REP.COD_REP_TRANS_EXP
   ,TRANS.COD_REP_TRANS_EXP TRANSCOD
   ,REP.PAN [PAN]
   ,REP.TRAN_DATA_EXT_VALUE [NSU EXTERNO]
   ,REP.SITUATION [SITUATION]
   ,REP.TRANSACTION_CODE [NSU]
   ,REP.TRANSACTION_DATE [DATA VENDA]
   ,REP.PLOTS [QTD PARCELA]
   ,REP.BRAND [BANDEIRA]
   ,CAST(REP.AMOUNT AS DECIMAL(22,2)) AS [VALOR TOTAL]
   ,REP.COD_SITUATION
   ,CASE
		WHEN REP.COD_SITUATION = 6 THEN REP.MODIFY_DATE
		WHEN REP.COD_SITUATION <> 6 THEN NULL
		ELSE ''
	END AS [DATA CANCELAMENTO]
   ,REP.NAME_ACQUIRER [ADQUIRENTE]
   ,REP.TRANSACTION_TYPE [FORMA PAGTO]
   ,REP.AUTH_CODE [COD.AUTORIZACAO]
FROM REPORT_TRANSACTIONS_EXP REP
LEFT JOIN TRANSACTION_CONCILIATION TRANS
	ON REP.COD_REP_TRANS_EXP = TRANS.COD_REP_TRANS_EXP
WHERE REP.COD_COMP = 8
AND TRANS.COD_REP_TRANS_EXP IS NULL
AND REP.COD_SITUATION IN (3, 6)
AND CAST(REP.TRANSACTION_DATE AS DATE) = CAST(DATEADD(DAY, -1, GETDATE()) AS DATE)
ORDER BY REP.CREATED_AT DESC
END;