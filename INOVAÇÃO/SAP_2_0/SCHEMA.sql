
IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE Name = N'CREATED_AT'
	AND Object_ID = OBJECT_ID(N'OPEN_LEDGER_ESTABLISHMENT'))
BEGIN

ALTER TABLE OPEN_LEDGER_ESTABLISHMENT ADD CREATED_AT DATETIME;

END

GO


IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE Name = N'ALTER_DATE'
	AND Object_ID = OBJECT_ID(N'OPEN_LEDGER_ESTABLISHMENT'))
BEGIN

ALTER TABLE OPEN_LEDGER_ESTABLISHMENT ADD ALTER_DATE DATETIME;

END

GO


IF OBJECT_ID('VW_LIST_OPEN_LEDGER_EC') IS NOT NULL
DROP VIEW VW_LIST_OPEN_LEDGER_EC
GO
CREATE VIEW VW_LIST_OPEN_LEDGER_EC AS
/*  
EM CASO DE PAGAMENTOS EM D0, PODE ACONTECER DE TEREM PAGAMENTOS COMO CONFIRMAÇÃO  OU PAGOS NO DIA, DEPENDENDO DO HORÁRIO.  
  
DENTRO DA SITUAÇÃO DO TÍTULO, EXISTEM DOIS IFF'S QUE VALIDAM ISSO  
*/
SELECT
	title.COD_EC
   ,(YEAR([T].BRAZILIAN_DATE) * 10000 + MONTH([T].BRAZILIAN_DATE) * 100 + DAY([T].BRAZILIAN_DATE)) AS CREATED_AT
   ,(YEAR(title.PREVISION_PAY_DATE) * 10000 + MONTH(title.PREVISION_PAY_DATE) * 100 + DAY(title.PREVISION_PAY_DATE)) AS PREVISION_PAY_DATE
   ,title.[AMOUNT] AS PLOT_VALUE_PAYMENT
   ,'TITLE' AS TYPE_RELEASE
   ,CAST(((title.AMOUNT * ([title].[TAX_INITIAL] + IIF(title.TAX_PLANDZERO IS NULL, 0, title.TAX_PLANDZERO)) / 100) + IIF(title.PLOT = 1, title.RATE, 0)) AS DECIMAL(22, 6)) [MDR]
   ,IIF(title.ANTICIP_PERCENT IS NULL, 0,
	title.[AMOUNT] * (1 - (([title].[TAX_INITIAL] + IIF(title.TAX_PLANDZERO IS NULL, 0, title.TAX_PLANDZERO)) / 100)) *
	((([title].[ANTICIP_PERCENT] / 30) * IIF([title].[IS_SPOT] = 0, IIF([title].[QTY_DAYS_ANTECIP] IS NULL, ([title].[PLOT] * 30) - 1, [title].[QTY_DAYS_ANTECIP]), DATEDIFF(DAY, [title].[PREVISION_PAY_DATE], [title].[ORIGINAL_RECEIVE_DATE]))) / 100)
	) ANTICIPATION
   ,title.COD_TITLE [COD_RELEASE]
   ,title.COD_LEDGER_ESTAB
FROM dbo.TRANSACTION_TITLES title WITH (NOLOCK)
INNER JOIN [TRANSACTION] T (NOLOCK)
	ON [T].COD_TRAN = title.COD_TRAN
INNER JOIN dbo.COMMERCIAL_ESTABLISHMENT(NOLOCK)
	ON COMMERCIAL_ESTABLISHMENT.COD_EC = title.COD_EC
		AND COMMERCIAL_ESTABLISHMENT.COD_SITUATION != 24
LEFT JOIN AFFILIATOR(NOLOCK)
	ON AFFILIATOR.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
WHERE title.COD_SITUATION IN (4, IIF(ISNULL(title.TAX_PLANDZERO, 0) > 0, 8, 0), IIF(ISNULL(title.TAX_PLANDZERO, 0) > 0, 17, 0))
AND (AFFILIATOR.COD_SITUATION IS NULL
OR AFFILIATOR.COD_SITUATION != 24)
AND title.COD_EC = 2022

UNION ALL

SELECT
	RA.COD_EC
   ,(YEAR(RA.CREATED_AT) * 10000 + MONTH(RA.CREATED_AT) * 100 + DAY(RA.CREATED_AT)) AS CREATED_AT
   ,(YEAR(RA.PREVISION_PAY_DATE) * 10000 + MONTH(RA.PREVISION_PAY_DATE) * 100 + DAY(RA.PREVISION_PAY_DATE)) AS PREVISION_PAY_DATE
   ,RA.[VALUE] AS PLOT_VALUE_PAYMENT
   ,'AJUSTE' AS TYPE_RELEASE
   ,0 AS [MDR]
   ,0 AS [ANTICIPATION]
   ,RA.COD_REL_ADJ AS [COD_RELEASE]
   ,RA.COD_LEDGER_ESTAB
FROM dbo.RELEASE_ADJUSTMENTS RA (NOLOCK)
INNER JOIN COMMERCIAL_ESTABLISHMENT(NOLOCK) EC
	ON EC.COD_EC = RA.COD_EC
		AND EC.COD_SITUATION != 24
LEFT JOIN AFFILIATOR(NOLOCK)
	ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
WHERE (RA.COD_SITUATION = 4)
AND (AFFILIATOR.COD_SITUATION IS NULL
OR AFFILIATOR.COD_SITUATION != 24)
AND RA.COD_EC = 2022
UNION ALL

SELECT
	t.COD_EC
   ,CASE
		WHEN t.CREATED_AT < '2020-10-01' THEN 20201001
		ELSE (YEAR(t.CREATED_AT) * 10000 + MONTH(t.CREATED_AT) * 100 + DAY(t.CREATED_AT))
	END AS CREATED_AT
   ,(YEAR(t.PAYMENT_DAY) * 10000 + MONTH(t.PAYMENT_DAY) * 100 + DAY(t.PAYMENT_DAY)) AS PREVISION_PAY_DATE
   ,t.[VALUE] AS PLOT_VALUE_PAYMENT
   ,'TARIFA' AS TYPE_RELEASE
   ,0 AS [MDR]
   ,0 AS [ANTICIPATION]
   ,t.COD_TARIFF_EC AS [COD_RELEASE]
   ,t.COD_LEDGER_ESTAB
FROM dbo.TARIFF_EC t (NOLOCK)
INNER JOIN dbo.COMMERCIAL_ESTABLISHMENT(NOLOCK) AS EC
	ON EC.COD_EC = t.COD_EC
		AND EC.COD_SITUATION != 24
LEFT JOIN AFFILIATOR(NOLOCK)
	ON AFFILIATOR.COD_AFFILIATOR = EC.COD_AFFILIATOR
WHERE (t.COD_SITUATION = 4)
AND (AFFILIATOR.COD_SITUATION IS NULL
OR AFFILIATOR.COD_SITUATION != 24)
AND T.COD_EC = 2022

GO
IF OBJECT_ID('SP_SET_OPEN_LEDGER_UPDATE') IS NOT NULL
DROP PROCEDURE SP_SET_OPEN_LEDGER_UPDATE
GO
CREATE PROCEDURE SP_SET_OPEN_LEDGER_UPDATE  
/*---------------------------------r-------------------------------------------------------      
    Project.......: TKPP      
------------------------------------------------------------------------------------------      
    Author              VERSION     Date            Description      
------------------------------------------------------------------------------------------      
    Luiz Aquino            V1        23/09/2019      CREATED  
------------------------------------------------------------------------------------------*/ 
(
	@REF_SMARTDATE INT,  
	@COD_EXT INT = 1 -- EXT 1 = SAP  
)  
AS  
BEGIN
  
  
 DECLARE @TODAY INT = (YEAR(GETDATE()) * 10000 + MONTH(GETDATE()) * 100)
  
  
 CREATE TABLE #Temp_Open_Ledger (  
  COD_EC INT NOT NULL  
    ,CREATED_AT INT NOT NULL  
    ,PREVISION_PAY_DATE INT NOT NULL  
    ,PLOT_VALUE_PAYMENT DECIMAL(22, 6) NOT NULL  
    ,TYPE_RELEASE VARCHAR(16)  
    ,TRAN_TYPE INT NOT NULL  
    ,MDR DECIMAL(22, 6) NOT NULL  
    ,[ANTICIPATION] DECIMAL(22, 6) NOT NULL  
    ,[COD_RELEASE] INT NOT NULL  
    ,COD_OPEN_LEDGER BIGINT NULL  
 )
  
  
 CREATE CLUSTERED INDEX IDX_TEMP_LEDGER ON #Temp_Open_Ledger (COD_EC, CREATED_AT, PREVISION_PAY_DATE)
  
  
 CREATE NONCLUSTERED INDEX IDX_TEMP_LEDGER_COD ON #Temp_Open_Ledger (TYPE_RELEASE) INCLUDE ([COD_RELEASE], COD_OPEN_LEDGER)

INSERT INTO #Temp_Open_Ledger (COD_EC, CREATED_AT, PREVISION_PAY_DATE, PLOT_VALUE_PAYMENT, TYPE_RELEASE, TRAN_TYPE, [MDR], [ANTICIPATION], [COD_RELEASE], COD_OPEN_LEDGER)
	SELECT
		COD_EC
	   ,CREATED_AT
	   ,PREVISION_PAY_DATE
	   ,PLOT_VALUE_PAYMENT
	   ,TYPE_RELEASE
	   ,IIF((PREVISION_PAY_DATE - @TODAY) < 100, 1, 2) [TRAN_TYPE]
	   ,[MDR]
	   ,[ANTICIPATION]
	   ,[COD_RELEASE]
	   ,COD_LEDGER_ESTAB
	FROM VW_LIST_OPEN_LEDGER_EC
	WHERE PREVISION_PAY_DATE BETWEEN 20201117 AND (20201117 + 10000)
	OR (TYPE_RELEASE = 'TARIFA'
	AND PREVISION_PAY_DATE BETWEEN 20180609 AND (20201117 + 10000))

SELECT
	1 [COD_EXT_CLI]
   ,ldg.COD_EC
   ,ldg.CREATED_AT
   ,ldg.PREVISION_PAY_DATE
   ,ldg.TRAN_TYPE
   ,SUM(ldg.ANTICIPATION) [ANTICIPATION]
   ,SUM(ldg.MDR) [MDR]
   ,SUM(IIF(ldg.PLOT_VALUE_PAYMENT > 0, ldg.PLOT_VALUE_PAYMENT, 0)) [TPV]
   ,SUM(IIF(ldg.PLOT_VALUE_PAYMENT < 0, (ldg.PLOT_VALUE_PAYMENT * -1), 0)) [TARIFF] INTO #temp_grouped
FROM #Temp_Open_Ledger ldg
GROUP BY ldg.COD_EC
		,ldg.CREATED_AT
		,ldg.PREVISION_PAY_DATE
		,ldg.TRAN_TYPE

-------------------------------UPDATE ---------------------------------------------------------  

UPDATE OPEN_LEDGER_ESTABLISHMENT
SET TPV = grpd.[TPV]
   ,MDR = grpd.[MDR]
   ,ANTECIPATION = grpd.[ANTICIPATION]
   ,PAY_TYPE = grpd.TRAN_TYPE
   ,TARIFF = grpd.TARIFF
   ,UPDATED = 1
   ,ALTER_DATE = CURRENT_TIMESTAMP
FROM #temp_grouped grpd
JOIN OPEN_LEDGER_ESTABLISHMENT ldger
	ON grpd.COD_EC = ldger.COD_EC
	AND grpd.CREATED_AT = ldger.DATE_TRANSACTION
	AND grpd.PREVISION_PAY_DATE = ldger.PAY_DATE
	AND grpd.[COD_EXT_CLI] = ldger.[COD_EXT_CLI]
WHERE grpd.[ANTICIPATION] != ldger.ANTECIPATION
OR grpd.[MDR] != ldger.[MDR]
OR grpd.TPV != ldger.[TPV]
OR grpd.TRAN_TYPE != ldger.PAY_TYPE
OR ldger.TARIFF != grpd.TARIFF

UPDATE OPEN_LEDGER_ESTABLISHMENT
SET TPV = 0
   ,MDR = 0
   ,ANTECIPATION = 0
   ,TARIFF = 0
   ,UPDATED = 1
   ,ALTER_DATE = CURRENT_TIMESTAMP
FROM OPEN_LEDGER_ESTABLISHMENT ldger
LEFT JOIN #temp_grouped grpd
	ON grpd.COD_EC = ldger.COD_EC
	AND grpd.CREATED_AT = ldger.DATE_TRANSACTION
	AND grpd.PREVISION_PAY_DATE = ldger.PAY_DATE
	AND grpd.[COD_EXT_CLI] = ldger.[COD_EXT_CLI]
WHERE ldger.PAY_DATE > @REF_SMARTDATE
AND (ldger.TPV > 0
OR ldger.TARIFF > 0)
AND grpd.COD_EC IS NULL

-----------------------------INSERT-------------------------------------------------------------  

INSERT INTO OPEN_LEDGER_ESTABLISHMENT (COD_EXT_CLI, COD_EC, DATE_TRANSACTION, PAY_DATE, PAY_TYPE, ANTECIPATION, MDR, TPV, TARIFF, CREATED_AT)
	SELECT
		grpd.[COD_EXT_CLI]
	   ,grpd.COD_EC
	   ,grpd.CREATED_AT
	   ,grpd.PREVISION_PAY_DATE
	   ,grpd.TRAN_TYPE
	   ,grpd.[ANTICIPATION]
	   ,grpd.[MDR]
	   ,grpd.[TPV]
	   ,grpd.TARIFF
	   ,CURRENT_TIMESTAMP
	FROM #temp_grouped grpd
	LEFT JOIN OPEN_LEDGER_ESTABLISHMENT ldger
		ON grpd.COD_EC = ldger.COD_EC
			AND grpd.CREATED_AT = ldger.DATE_TRANSACTION
			AND grpd.PREVISION_PAY_DATE = ldger.PAY_DATE
			AND grpd.TRAN_TYPE = ldger.PAY_TYPE
			AND grpd.[COD_EXT_CLI] = ldger.[COD_EXT_CLI]
	WHERE ldger.COD_LEDGER_ESTAB IS NULL

--------------------------------UPDATE Entities-----------------------------------------------------------  
UPDATE RELEASE_ADJUSTMENTS
SET COD_LEDGER_ESTAB = ldger.COD_LEDGER_ESTAB
FROM #Temp_Open_Ledger temp_ldg
JOIN OPEN_LEDGER_ESTABLISHMENT ldger
	ON temp_ldg.COD_EC = ldger.COD_EC
	AND temp_ldg.CREATED_AT = ldger.DATE_TRANSACTION
	AND temp_ldg.PREVISION_PAY_DATE = ldger.PAY_DATE
	AND temp_ldg.TRAN_TYPE = ldger.PAY_TYPE
	AND ldger.[COD_EXT_CLI] = @COD_EXT
	AND UPDATED = 1
JOIN RELEASE_ADJUSTMENTS
	ON RELEASE_ADJUSTMENTS.COD_REL_ADJ = temp_ldg.COD_RELEASE
WHERE temp_ldg.TYPE_RELEASE = 'AJUSTE'

UPDATE TRANSACTION_TITLES
SET COD_LEDGER_ESTAB = ldger.COD_LEDGER_ESTAB
FROM #Temp_Open_Ledger temp_ldg
JOIN OPEN_LEDGER_ESTABLISHMENT ldger
	ON temp_ldg.COD_EC = ldger.COD_EC
	AND temp_ldg.CREATED_AT = ldger.DATE_TRANSACTION
	AND temp_ldg.PREVISION_PAY_DATE = ldger.PAY_DATE
	AND temp_ldg.TRAN_TYPE = ldger.PAY_TYPE
	AND ldger.[COD_EXT_CLI] = @COD_EXT
	AND UPDATED = 1
JOIN [TRANSACTION_TITLES]
	ON TRANSACTION_TITLES.COD_TITLE = temp_ldg.COD_RELEASE
WHERE temp_ldg.TYPE_RELEASE = 'TITLE'

UPDATE TARIFF_EC
SET COD_LEDGER_ESTAB = ldger.COD_LEDGER_ESTAB
FROM #Temp_Open_Ledger temp_ldg
JOIN OPEN_LEDGER_ESTABLISHMENT ldger
	ON temp_ldg.COD_EC = ldger.COD_EC
	AND temp_ldg.CREATED_AT = ldger.DATE_TRANSACTION
	AND temp_ldg.PREVISION_PAY_DATE = ldger.PAY_DATE
	AND temp_ldg.TRAN_TYPE = ldger.PAY_TYPE
	AND ldger.[COD_EXT_CLI] = @COD_EXT
	AND UPDATED = 1
JOIN TARIFF_EC
	ON TARIFF_EC.COD_TARIFF_EC = temp_ldg.COD_RELEASE
WHERE temp_ldg.TYPE_RELEASE = 'TARIFA'

END

GO

IF OBJECT_ID('SP_LIST_OPEN_LEDGER_EC') IS NOT NULL
DROP PROCEDURE SP_LIST_OPEN_LEDGER_EC
GO
CREATE PROCEDURE SP_LIST_OPEN_LEDGER_EC  
/*---------------------------------r-------------------------------------------------------      
    Project.......: TKPP      
------------------------------------------------------------------------------------------      
    Author              VERSION     Date            Description      
------------------------------------------------------------------------------------------      
    Luiz Aquino            V1        23/09/2019      CREATED  
------------------------------------------------------------------------------------------*/ (@REF_SMARTDATE INT,  
@COD_EXT INT = 1 -- EXT 1 = SAP  
)  
AS  
BEGIN
SELECT
	OPEN_LEDGER_ESTABLISHMENT.COD_LEDGER_ESTAB
   ,DATE_TRANSACTION
   ,PAY_DATE
   ,PAY_TYPE
   ,ANTECIPATION
   ,LCM
   ,CASE
		WHEN OPEN_LEDGER_ESTABLISHMENT.PAY_TYPE = 1 THEN 0
		ELSE OPEN_LEDGER_ESTABLISHMENT.MDR
	END AS MDR
   ,TPV
   ,EXTERNAL_PARTN_UP.COD_EXTERNAL
   ,TARIFF
FROM OPEN_LEDGER_ESTABLISHMENT
JOIN EXTERNAL_PARTN_UP
	ON EXTERNAL_PARTN_UP.COD_EC = OPEN_LEDGER_ESTABLISHMENT.COD_EC
		AND EXTERNAL_PARTN_UP.COD_EXT_CLI = @COD_EXT
WHERE OPEN_LEDGER_ESTABLISHMENT.PAY_DATE >= @REF_SMARTDATE
AND OPEN_LEDGER_ESTABLISHMENT.UPDATED = 1
AND OPEN_LEDGER_ESTABLISHMENT.COD_EXT_CLI = @COD_EXT
END