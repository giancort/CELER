IF NOT EXISTS (SELECT
		1
	FROM sys.columns
	WHERE NAME = N'CODE_EC'
	AND object_id = OBJECT_ID(N'ACQUIRER_KEYS_CREDENTIALS'))
BEGIN

ALTER TABLE ACQUIRER_KEYS_CREDENTIALS
ADD CODE_EC INT;
END

GO
IF ( SELECT
		COUNT(COD_AC)
	FROM ACQUIRER
	WHERE CODE = 'PAGONLINE')
= 0
INSERT INTO dbo.[ACQUIRER] (CREATED_AT, CODE, NAME, COD_USER, ALIAS, SUBTITLE, INTEGRATION, ACTIVE, [GROUP], LOGICAL_NUMBER, COD_SEG_GROUP)
	VALUES (GETDATE(), 'PAGONLINE', 'PagSeguro Online', NULL, NULL, NULL, 0, 1, 'PagSeguro', 1, NULL);
GO
	IF ( SELECT
		COUNT(COD_AC)
	FROM PRODUCTS_ACQUIRER
	WHERE COD_AC = (SELECT
			COD_AC
		FROM ACQUIRER
		WHERE CODE = 'PAGONLINE'))
= 0

INSERT INTO PRODUCTS_ACQUIRER (COD_TTYPE, COD_AC, NAME, EXTERNALCODE, COD_BRAND, PLOT_VALUE, IS_SIMULATED, COD_SOURCE_TRAN, VISIBLE)
	SELECT
		COD_TTYPE
	   ,(SELECT
				COD_AC
			FROM ACQUIRER
			WHERE CODE = 'PAGONLINE')
	   ,NAME
	   ,EXTERNALCODE
	   ,COD_BRAND
	   ,PLOT_VALUE
	   ,IS_SIMULATED
	   ,COD_SOURCE_TRAN
	   ,VISIBLE
	FROM PRODUCTS_ACQUIRER
	WHERE COD_AC = 18

GO
IF OBJECT_ID('SP_LS_ONLINE_CREDENTIALS') IS NOT NULL DROP PROCEDURE SP_LS_ONLINE_CREDENTIALS
GO
CREATE PROCEDURE SP_LS_ONLINE_CREDENTIALS          
(        
 @BRAND VARCHAR(20),        
 @TYPETRAN VARCHAR(30),      
 @PLOT INT,
 @CODE_EC INT = NULL    
)        
AS          
BEGIN

SELECT DISTINCT
	ACQUIRER_KEYS_CREDENTIALS.COD_AC
   ,PRODUCTS_ACQUIRER.COD_PR_ACQ
   ,ACQUIRER_KEYS_CREDENTIALS.[value] AS PRIORITY
   ,(SELECT TOP 1
			CODE_EC
		FROM ACQUIRER_KEYS_CREDENTIALS
		WHERE CODE_EC = @CODE_EC)
	AS CODE_EC
FROM ACQUIRER_KEYS_CREDENTIALS
INNER JOIN PROVIDER_BRANDS_AC_TRAN
	ON ACQUIRER_KEYS_CREDENTIALS.COD_AC = PROVIDER_BRANDS_AC_TRAN.COD_AC
INNER JOIN TRANSACTION_TYPE
	ON TRANSACTION_TYPE.NAME = @TYPETRAN
INNER JOIN BRAND
	ON BRAND.COD_BRAND = PROVIDER_BRANDS_AC_TRAN.COD_BRAND
		AND BRAND.NAME = @BRAND
		AND BRAND.COD_TTYPE = TRANSACTION_TYPE.COD_TTYPE
		AND COD_SOURCE_TRAN = 1
		AND PROVIDER_BRANDS_AC_TRAN.ACTIVE = 1
INNER JOIN PRODUCTS_ACQUIRER
	ON PRODUCTS_ACQUIRER.COD_TTYPE = BRAND.COD_TTYPE
		AND PRODUCTS_ACQUIRER.COD_AC = ACQUIRER_KEYS_CREDENTIALS.COD_AC
		AND PRODUCTS_ACQUIRER.COD_BRAND = BRAND.COD_BRAND
		AND PRODUCTS_ACQUIRER.COD_TTYPE = TRANSACTION_TYPE.COD_TTYPE
		AND PRODUCTS_ACQUIRER.PLOT_VALUE =
		CASE
			WHEN @PLOT = 1 THEN 1
			ELSE 2
		END
		AND PRODUCTS_ACQUIRER.COD_SOURCE_TRAN = 1
WHERE ACQUIRER_KEYS_CREDENTIALS.NAME = 'PRIORITY'
ORDER BY ACQUIRER_KEYS_CREDENTIALS.[value] DESC
END;

GO

--EXEC SP_LS_ONLINE_CREDENTIALS @BRAND = 'MASTERCARD', @TYPETRAN = 'CREDIT', @PLOT = 1, @CODE_EC = 680547
IF OBJECT_ID('SP_GET_CREDENTIALS_ONLINE') IS NOT NULL DROP PROCEDURE SP_GET_CREDENTIALS_ONLINE;
GO
CREATE PROCEDURE SP_GET_CREDENTIALS_ONLINE  
(  
 @COD_AC INT,
 @CODE_EC INT = NULL
)  
AS  
BEGIN
SELECT
	ACQUIRER_KEYS_CREDENTIALS.NAME
   ,ACQUIRER_KEYS_CREDENTIALS.value
FROM ACQUIRER_KEYS_CREDENTIALS
INNER JOIN ACQUIRER
	ON ACQUIRER.COD_AC = ACQUIRER_KEYS_CREDENTIALS.COD_AC
WHERE ACQUIRER_KEYS_CREDENTIALS.COD_AC = @COD_AC
AND (ACQUIRER_KEYS_CREDENTIALS.CODE_EC = @CODE_EC
OR ACQUIRER_KEYS_CREDENTIALS.CODE_EC IS NULL)
END;
GO

EXEC SP_GET_CREDENTIALS_ONLINE 25
							  ,680547

GO
UPDATE SECOND_FACTOR_PASS
SET CREATED_AT = current_timestamp
WHERE COD_USER = 173
AND ACTIVE = 1
IF TYPE_ID('TP_ONLINE_CREDENTIALS') IS NOT NULL DROP TYPE TP_ONLINE_CREDENTIALS;
GO
CREATE TYPE TP_ONLINE_CREDENTIALS AS TABLE
(
	COD_AC INT,
	CODE_EC INT DEFAULT NULL,
	[NAME] VARCHAR(200),
	[VALUE] VARCHAR(255)
)
GO
IF OBJECT_ID('SP_REG_ONLINE_CREDENTIALS') IS NOT NULL DROP PROCEDURE SP_REG_ONLINE_CREDENTIALS;
GO
CREATE PROCEDURE SP_REG_ONLINE_CREDENTIALS
(
	@TP_ONLINE_CREDENTIALS TP_ONLINE_CREDENTIALS,
	@CODE_EC INT
)
AS
BEGIN

IF ( SELECT
		COUNT(*)
	FROM ACQUIRER_KEYS_CREDENTIALS
	WHERE CODE_EC = @CODE_EC)
> 0
DELETE FROM ACQUIRER_KEYS_CREDENTIALS
WHERE CODE_EC = @CODE_EC


INSERT INTO ACQUIRER_KEYS_CREDENTIALS (NAME, value, COD_AC, CODE_EC)
	SELECT
		[NAME]
	   ,[value]
	   ,COD_AC
	   ,CODE_EC
	FROM @TP_ONLINE_CREDENTIALS;


END;

GO

IF OBJECT_ID('SP_LS_ACQUIRER_BY_SEGMENT') IS NOT NULL DROP PROCEDURE SP_LS_ACQUIRER_BY_SEGMENT;
GO
CREATE PROCEDURE SP_LS_ACQUIRER_BY_SEGMENT
(
	@COD_SEG INT
)
AS
BEGIN
SELECT
	ACQUIRER.COD_AC
   ,ACQUIRER.[NAME] AS ACQUIRER_NAME
   ,ACQUIRER.[CODE] AS ACQUIRER_CODE
   ,ACQUIRER.[GROUP] AS ACQ_GROUP
   ,SEGMENTS.[NAME]
   ,SEGMENTS.[DESCRIPTION]
   ,SEGMENTS_GROUP.[GROUP]
   ,SEGMENTS.[COD_SEG]
   ,SEGMENTS_GROUP.[COD_SEG_GROUP]
FROM SEGMENTS
INNER JOIN SEGMENTS_GROUP
	ON SEGMENTS.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP
INNER JOIN ACQUIRER
	ON ACQUIRER.COD_SEG_GROUP = SEGMENTS_GROUP.COD_SEG_GROUP
WHERE COD_SEG = @COD_SEG
END

GO

IF OBJECT_ID('SP_FD_DATA_EC') IS NOT NULL DROP PROCEDURE SP_FD_DATA_EC
GO  
CREATE PROCEDURE SP_FD_DATA_EC      
/*----------------------------------------------------------------------------------------                
Project.......: TKPP                
Procedure Name: [SP_FD_DATA_EC]      
------------------------------------------------------------------------------------------                
Author              VERSION        Date   Description                
------------------------------------------------------------------------------------------                
Kennedy Alef  V1   2018-07-27  Creation                
Elir Ribeiro  V2   2018-11-07  Changed                    
Lucas Aguiar  V3   2019-04-22  Add split                
Lucas Aguiar  V4   2019-07-01  rotina de travar agenda do ec                
Luiz Aquino   V5   2019-07-03  Is_Cerc                
Elir Ribeiro  V6   2019-10-01  changed Limit transaction monthy                  
Caike Uchoa   V7   2019-10-03  add case split pelo afiliador                
Luiz Aquino   V8   2019-10-16  Add reten��o de agenda                
Lucas Aguiar  V9   2019-10-28  Conta Cess�o                
Marcus Gall   V10   2019-11-11  Add FK with BRANCH BUSINESS                
Marcus Gall   V11   2019-12-06  Add field HAS_CREDENTIALS                
Elir Ribeiro  V12   2020-01-08  trazendo dados meet consumer                
Elir Ribeiro  V13   2020-01-15  ajustando procedure       
Marcus Gall   V14   2020-01-22  Add Translate service      
------------------------------------------------------------------------------------------*/                
(                
    @COD_EC INT                
)                
AS BEGIN
    
      
 DECLARE @CodSpotService INT
    
      
 DECLARE @COD_SPLIT_SERVICE INT;
    
      
 DECLARE @COD_BLOCK_SITUATION INT;
    
      
 DECLARE @COD_CUSTOMERINSTALLMENT INT;
    
      
 DECLARE @CodSchRetention INT;
    
      
 DECLARE @COD_TRANSLATE_SERVICE INT;

SELECT
	@CodSpotService = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE CODE = '1';

SELECT
	@COD_SPLIT_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SPLIT';

SELECT
	@COD_BLOCK_SITUATION = COD_SITUATION
FROM SITUATION
WHERE [NAME] = 'LOCKED FINANCIAL SCHEDULE';

SELECT
	@COD_CUSTOMERINSTALLMENT = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE NAME = 'PARCELADOCLIENTE';

SELECT
	@CodSchRetention = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'SCHEDULEDRETENTION';

SELECT
	@COD_TRANSLATE_SERVICE = COD_ITEM_SERVICE
FROM ITEMS_SERVICES_AVAILABLE
WHERE [NAME] = 'TRANSLATE';

SELECT
	BRANCH_EC.[NAME]
   ,BRANCH_EC.TRADING_NAME
   ,BRANCH_EC.CPF_CNPJ
   ,BRANCH_EC.DOCUMENT
   ,BRANCH_EC.BIRTHDATE
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_LIMIT
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_DIALY
   ,COMMERCIAL_ESTABLISHMENT.LIMIT_TRANSACTION_MONTHLY
   ,BRANCH_EC.EMAIL
   ,BRANCH_EC.STATE_REGISTRATION
   ,BRANCH_EC.MUNICIPAL_REGISTRATION
   ,BRANCH_EC.NOTE AS NOTE
   ,TYPE_ESTAB.CODE AS TYPE_ESTAB_CODE
   ,SEGMENTS.COD_SEG AS SEGMENT
   ,BRANCH_EC.ACTIVE
   ,ADDRESS_BRANCH.[ADDRESS]
   ,ADDRESS_BRANCH.number AS NUMBER_ADDRESS
   ,ADDRESS_BRANCH.COMPLEMENT
   ,ADDRESS_BRANCH.CEP
   ,ADDRESS_BRANCH.REFERENCE_POINT
   ,NEIGHBORHOOD.COD_NEIGH
   ,NEIGHBORHOOD.[NAME] AS NEIGHBORHOOD
   ,CITY.COD_CITY
   ,CITY.[NAME] AS CITY
   ,[STATE].COD_STATE
   ,[STATE].[NAME] AS [STATE]
   ,COUNTRY.COD_COUNTRY
   ,COUNTRY.[NAME] AS COUNTRY
   ,BANKS.COD_BANK AS BANK_INSIDECODE
   ,BANKS.[NAME] AS BANK
   ,BANK_DETAILS_EC.DIGIT_AGENCY
   ,BANK_DETAILS_EC.AGENCY
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.ACCOUNT
   ,ACCOUNT_TYPE.COD_TYPE_ACCOUNT AS ACCOUNT_TYPE_INSIDECODE
   ,ACCOUNT_TYPE.[NAME] AS ACCOUNT_TYPE
   ,SALES_REPRESENTATIVE.COD_SALES_REP
   ,COMMERCIAL_ESTABLISHMENT.SEC_FACTOR_AUTH_ACTIVE
   ,BRANCH_EC.COD_SEX
   ,BRANCH_EC.COD_BRANCH AS COD_BRANCH
   ,BANK_DETAILS_EC.AGENCY AS AGENCY
   ,BANK_DETAILS_EC.DIGIT_AGENCY AS AGENCY_DIGIT
   ,BANK_DETAILS_EC.ACCOUNT AS ACCOUNT
   ,BANK_DETAILS_EC.DIGIT_ACCOUNT AS DIGIT_ACCOUNT
   ,BANK_DETAILS_EC.COD_OPER_BANK
   ,TYPE_RECEIPT.COD_TYPE_REC
   ,TYPE_RECEIPT.CODE AS TYPE_RECEIPT
   ,CARDS_TOBRANCH.CARDNUMBER
   ,CARDS_TOBRANCH.ACCOUNTID AS 'ACCOUNTID'
   ,CARDS_TOBRANCH.COD_CARD_BRANCH AS 'COD_CARD_BRANCH'
   ,COMMERCIAL_ESTABLISHMENT.TRANSACTION_ONLINE AS 'TRANSACTION_ONLINE'
   ,COMMERCIAL_ESTABLISHMENT.SPOT_TAX
   ,CASE
		WHEN COMMERCIAL_ESTABLISHMENT.COD_SITUATION = @COD_BLOCK_SITUATION THEN 1
		ELSE 0
	END [FINANCE_BLOCK]
   ,COMMERCIAL_ESTABLISHMENT.NOTE_FINANCE_SCHEDULE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSpotService
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPOT]
   ,COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1
				AND SERVICES_AVAILABLE.COD_OPT_SERV = 4
				AND SERVICES_AVAILABLE.COD_EC IS NULL)
			> 0 THEN 1
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_SPLIT_SERVICE
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SPLIT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_CUSTOMERINSTALLMENT
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_CUSTOMERINSTALLMENT]
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @CodSchRetention
				AND SERVICES_AVAILABLE.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_SCHRETENTION]
   ,COMMERCIAL_ESTABLISHMENT.COD_RISK_SITUATION
   ,COMMERCIAL_ESTABLISHMENT.RISK_REASON
   ,COMMERCIAL_ESTABLISHMENT.IS_PROVIDER
   ,BANK_DETAILS_EC.IS_ASSIGNMENT
   ,BANK_DETAILS_EC.ASSIGNMENT_NAME
   ,BANK_DETAILS_EC.ASSIGNMENT_IDENTIFICATION
   ,BRANCH_BUSINESS.COD_BRANCH_BUSINESS AS BRANCH_BUSINESS
   ,COMMERCIAL_ESTABLISHMENT.HAS_CREDENTIALS
   ,MEET_COSTUMER.CNPJ [ACCEPTANCE]
   ,ISNULL(MEET_COSTUMER.QTY_EMPLOYEES, 0) QTY_EMPLOYEES
   ,ISNULL(MEET_COSTUMER.AVERAGE_BILLING, 0) AVERAGE_BILLING
   ,MEET_COSTUMER.URL_SITE
   ,MEET_COSTUMER.FACEBOOK
   ,MEET_COSTUMER.INSTAGRAM
   ,MEET_COSTUMER.STREET
   ,MEET_COSTUMER.COMPLEMENT [COMPLEMENTO]
   ,MEET_COSTUMER.ANOTHER_INFO
   ,MEET_COSTUMER.number
   ,MEET_COSTUMER.NEIGHBORHOOD AS MEET_NEIGH
   ,MEET_COSTUMER.CITY AS MEET_CITY
   ,MEET_COSTUMER.STATES
   ,MEET_COSTUMER.REFERENCEPOINT
   ,MEET_COSTUMER.ZIPCODE
   ,CASE
		WHEN (SELECT
					COUNT(*)
				FROM SERVICES_AVAILABLE
				WHERE SERVICES_AVAILABLE.COD_ITEM_SERVICE = @COD_TRANSLATE_SERVICE
				AND SERVICES_AVAILABLE.COD_AFFILIATOR = COMMERCIAL_ESTABLISHMENT.COD_AFFILIATOR
				AND SERVICES_AVAILABLE.ACTIVE = 1)
			> 0 THEN 1
		ELSE 0
	END [HAS_TRANSLATE]
   ,COMMERCIAL_ESTABLISHMENT.CODE AS CODE_EC
FROM COMMERCIAL_ESTABLISHMENT
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
INNER JOIN TYPE_ESTAB
	ON TYPE_ESTAB.COD_TYPE_ESTAB = BRANCH_EC.COD_TYPE_ESTAB
INNER JOIN ADDRESS_BRANCH
	ON ADDRESS_BRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND ADDRESS_BRANCH.ACTIVE = 1
INNER JOIN NEIGHBORHOOD
	ON NEIGHBORHOOD.COD_NEIGH = ADDRESS_BRANCH.COD_NEIGH
INNER JOIN CITY
	ON CITY.COD_CITY = NEIGHBORHOOD.COD_CITY
INNER JOIN [STATE]
	ON [STATE].COD_STATE = CITY.COD_STATE
INNER JOIN COUNTRY
	ON [STATE].COD_COUNTRY = COUNTRY.COD_COUNTRY
INNER JOIN TYPE_RECEIPT
	ON TYPE_RECEIPT.COD_TYPE_REC = BRANCH_EC.COD_TYPE_REC
LEFT JOIN BANK_DETAILS_EC
	ON BANK_DETAILS_EC.COD_BRANCH = BRANCH_EC.COD_BRANCH
		AND BANK_DETAILS_EC.ACTIVE = 1
		AND BANK_DETAILS_EC.IS_CERC = 0
LEFT JOIN BANKS
	ON BANKS.COD_BANK = BANK_DETAILS_EC.COD_BANK
LEFT JOIN ACCOUNT_TYPE
	ON ACCOUNT_TYPE.COD_TYPE_ACCOUNT = BANK_DETAILS_EC.COD_TYPE_ACCOUNT
INNER JOIN SEGMENTS
	ON SEGMENTS.COD_SEG = COMMERCIAL_ESTABLISHMENT.COD_SEG
INNER JOIN SALES_REPRESENTATIVE
	ON SALES_REPRESENTATIVE.COD_SALES_REP = COMMERCIAL_ESTABLISHMENT.COD_SALES_REP
LEFT JOIN CARDS_TOBRANCH
	ON CARDS_TOBRANCH.COD_BRANCH = BRANCH_EC.COD_BRANCH
INNER JOIN BRANCH_BUSINESS
	ON BRANCH_BUSINESS.COD_BRANCH_BUSINESS = COMMERCIAL_ESTABLISHMENT.COD_BRANCH_BUSINESS
LEFT JOIN MEET_COSTUMER
	ON MEET_COSTUMER.COD_EC = COMMERCIAL_ESTABLISHMENT.COD_EC
WHERE COMMERCIAL_ESTABLISHMENT.COD_EC = @COD_EC
AND (CARDS_TOBRANCH.COD_SITUATION = 15
OR CARDS_TOBRANCH.COD_SITUATION IS NULL)

END;