  IF NOT EXISTS (SELECT
		*
	FROM sys.indexes
	WHERE name = '<IX_TRANSACTION_TITLES_RISK_ALERT>'
	AND object_id = OBJECT_ID('[dbo].[TRANSACTION_TITLES]'))
BEGIN
CREATE NONCLUSTERED INDEX [<IX_TRANSACTION_TITLES_RISK_ALERT>] ON [dbo].[TRANSACTION_TITLES] ([COD_TRAN], [PLOT], [COD_EC], [COD_SITUATION])
END


GO

  IF NOT EXISTS (SELECT
		*
	FROM sys.indexes
	WHERE name = '<IX_REPORT_TRANSACTIONS_EXP_COD_TRAN_RISK_ALERT>'
	AND object_id = OBJECT_ID('[dbo].[REPORT_TRANSACTIONS_EXP]'))
BEGIN
CREATE NONCLUSTERED INDEX [<IX_REPORT_TRANSACTIONS_EXP_COD_TRAN_RISK_ALERT>]
ON [dbo].[REPORT_TRANSACTIONS_EXP] ([COD_TRAN])
INCLUDE ([TRANSACTION_CODE], [PLOTS], [BRAND], [TRAN_DATA_EXT_VALUE], [COMMENT], [NAME_ACQUIRER], [CARD_NAME], [LINK_PAYMENT_SERVICE], [CUSTOMER_EMAIL], [CUSTOMER_IDENTIFICATION], [LOGICAL_NUMBER_ACQ], [TERMINAL_VERSION], [CARD_HOLDER_DOC])
END
GO

IF OBJECT_ID('RISK_FRAUD_RULE') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_RULE
    (
        COD_RULE INT NOT NULL PRIMARY KEY IDENTITY,
        CREATED_AT DATETIME DEFAULT (GETDATE()),
        DESCRIPTION VARCHAR(128) NOT NULL,
        ACTIVE INT NOT NULL DEFAULT(1)
    )
END

IF OBJECT_ID('RISK_FRAUD_FIELD') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_FIELD
    (
        COD_RISK_FIELD INT NOT NULL PRIMARY KEY IDENTITY,
        NAME VARCHAR(32) NOT NULL,
        DESCRIPTION VARCHAR(64) NOT NULL,
        TYPE VARCHAR(32),
        PARTIAL INT NOT NULL DEFAULT(0),
        SYSTEM_VALUE INT NOT NULL default (0)
    )
END

IF OBJECT_ID('RISK_FRAUD_RULE_DETAIL') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_RULE_DETAIL
    (
        COD_RULE_DETAIL INT NOT NULL PRIMARY KEY IDENTITY,
        COD_RULE INT NOT NULL REFERENCES RISK_FRAUD_RULE(COD_RULE),
        COD_FIELD INT NOT NULL REFERENCES RISK_FRAUD_FIELD(COD_RISK_FIELD),
        COMPARISON VARCHAR(32) NOT NULL,
        FIELD_ORDER INT NOT NULL DEFAULT (0),
        AMOUNT DECIMAL(22, 6) NULL,
        AMOUNT_UNTIL DECIMAL(22, 6) NULL,
        COD_SITUATION INT NULL REFERENCES SITUATION(COD_SITUATION),
        COD_FIELD_COMPARE INT NULL REFERENCES RISK_FRAUD_FIELD(COD_RISK_FIELD),
        PERCENTAGE DECIMAL(22, 6) NULL
    )
END

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_FIELD)
= 0
BEGIN

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_TIME', 'Hora transação', 'TIME', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_VALUE', 'Valor transação', 'DECIMAL', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_PAN', 'PAN/CARTAO', 'GROUPING', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_POS', 'POS', 'GROUPING', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_EC', 'Estabelecimento', 'GROUPING', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRANSACTION_SITUATION', 'Situação', 'GROUPING', 0, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('AVG_TICKET', 'Ticket Medio', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('TRAN_LIMIT', 'Limite transação', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('DAY_LIMIT', 'Limite Di�rio', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('MONTH_LIMIT', 'Limite Mensal', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('DAY_TRANSACTED', 'Transacionado Dia', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('MONTH_TRANSACTED', 'Transacionado Mês', 'DECIMAL', 1, 1)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('LAST_HOUR', 'Ultima x Horas', 'FILTER', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('LAST_DAY', 'Ultimos x dias', 'FILTER', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('SAME_DAY', 'Mesmo dia', 'FILTER', 0, 0)

INSERT INTO RISK_FRAUD_FIELD (NAME, DESCRIPTION, TYPE, PARTIAL, SYSTEM_VALUE)
	VALUES ('SAME_MONTH', 'Mesmo Mês', 'FILTER', 0, 0)
END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '1')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('1')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 0.01, 1, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_POS'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 3);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 5, NULL, NULL, NULL, NULL, 4);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_HOUR'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'FILTER', 1, NULL, NULL, NULL, NULL, 5);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '2')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('2')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 1000, NULL, NULL, NULL, NULL, 2);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '3')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('3')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_POS'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 3);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '4')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('4')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_TIME'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'BETWEEN', 22, 6, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'AVG_TICKET'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', NULL, NULL, NULL, @Field2, 30, 2);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '5')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('5')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'DAY_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', NULL, NULL, NULL, @Field2, 50, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 1);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '6')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('6')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_VALUE'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'MONTH_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', NULL, NULL, NULL, @Field2, 100, 1);

END
GO

IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '7')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@COD_SIT INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('7')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_SITUATION'
SELECT
	@COD_SIT = COD_SITUATION
FROM SITUATION
WHERE NAME = 'CANCELED'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '=', NULL, NULL, @COD_SIT, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'SAME_MONTH'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'FILTER', NULL, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '8')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('8')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 2, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_HOUR'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '<', 1, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '9')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('9')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 3, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_DAY'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '<', 1, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '10')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('10')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_PAN'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, 'GROUP', NULL, NULL, NULL, NULL, NULL, 1);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_EC'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>=', 4, NULL, NULL, NULL, NULL, 2);

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'LAST_DAY'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '<', 7, NULL, NULL, NULL, NULL, 3);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '13')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@COD_SIT INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('13')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'TRANSACTION_SITUATION'
SELECT
	@COD_SIT = COD_SITUATION
FROM SITUATION
WHERE NAME = 'DENIED ACQUIRER'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '=', NULL, NULL, @COD_SIT, NULL, NULL, 1);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '14-1')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('14-1')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'DAY_TRANSACTED'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'DAY_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>', NULL, NULL, NULL, @Field2, 100, 1);

END
GO
IF ( SELECT
		COUNT(*)
	FROM RISK_FRAUD_RULE
	WHERE DESCRIPTION = '14-2')
= 0
BEGIN
DECLARE @ID INT = NULL
	   ,@Field INT = NULL
	   ,@Field2 INT = NULL

INSERT INTO RISK_FRAUD_RULE (DESCRIPTION)
	VALUES ('14-2')

SET @ID = SCOPE_IDENTITY()

SELECT
	@Field = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'MONTH_TRANSACTED'
SELECT
	@Field2 = COD_RISK_FIELD
FROM RISK_FRAUD_FIELD
WHERE NAME = 'MONTH_LIMIT'
INSERT INTO RISK_FRAUD_RULE_DETAIL (COD_RULE, COD_FIELD, COMPARISON, AMOUNT, AMOUNT_UNTIL, COD_SITUATION, COD_FIELD_COMPARE, PERCENTAGE, FIELD_ORDER)
	VALUES (@ID, @Field, '>', NULL, NULL, NULL, @Field2, 100, 1);

END
GO


IF OBJECT_ID('RISK_ANALYSIS_DATA') IS NOT NULL
DROP TABLE RISK_ANALYSIS_DATA
GO
BEGIN
    CREATE TABLE RISK_ANALYSIS_DATA
    (
        COD_EC INT NOT NULL PRIMARY KEY REFERENCES COMMERCIAL_ESTABLISHMENT (COD_EC),
        AVG_THIRTY_DAYS DECIMAL(22, 6) NOT NULL DEFAULT (0),
        AVG_SEVEN_DAYS DECIMAL (22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_MONTH DECIMAL(22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_WEEK DECIMAL (22, 6) NOT NULL DEFAULT (0),
        AVG_TICKET_DAY DECIMAL (22, 6) NOT NULL DEFAULT (0),
        MONTH_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        DAY_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        WEEK_TRANSACTED DECIMAL(22, 6) NOT NULL DEFAULT (0),
        LAST_UPDATE DATETIME NOT NULL DEFAULT (GETDATE())
    )
END
GO

IF OBJECT_ID('SP_UP_RISK_DATA') IS NOT NULL
DROP PROCEDURE SP_UP_RISK_DATA;
GO
CREATE PROCEDURE [dbo].[SP_UP_RISK_DATA]
/*----------------------------------------------------------------------------------------                                  
   Project.......: TKPP                                  
 ------------------------------------------------------------------------------------------                                  
   Author                   VERSION        Date             Description                                  
------------------------------------------------------------------------------------------                                  
   Luiz Aquino              V1             2021-04-13       CREATED   
------------------------------------------------------------------------------------------*/
AS BEGIN

    DECLARE @TODAY DATETIME = dbo.FN_FUS_UTF(GETDATE());

    --MONTH
    DECLARE @THIRTY_DAYS_AGO DATE = DATEADD(DAY, -30, @TODAY), @ECS CODE_TYPE

INSERT INTO @ECS (CODE)
	SELECT DISTINCT
		COD_EC
	FROM REPORT_TRANSACTIONS_EXP
	WHERE TRANSACTION_DATE BETWEEN @THIRTY_DAYS_AGO AND @TODAY

INSERT INTO RISK_ANALYSIS_DATA (COD_EC)
	SELECT
		CODE
	FROM @ECS e
	LEFT JOIN RISK_ANALYSIS_DATA [RAD]
		ON [RAD].COD_EC = e.CODE
	WHERE RAD.COD_EC IS NULL

UPDATE RISK_ANALYSIS_DATA
SET AVG_THIRTY_DAYS = i.AVG_MONTH
   ,LAST_UPDATE = GETDATE()
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @THIRTY_DAYS_AGO AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

DECLARE @START_MONTH DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @TODAY), 0)

UPDATE RISK_ANALYSIS_DATA
SET MONTH_TRANSACTED = i.TOTAL_MONTH
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,SUM(AMOUNT) [TOTAL_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_MONTH AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

UPDATE RISK_ANALYSIS_DATA
SET AVG_TICKET_MONTH = i.AVG_MONTH
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_MONTH AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

-- WEEK

DECLARE @SEVEN_DAYS_AGO DATE = DATEADD(DAY, -7, @TODAY)

UPDATE RISK_ANALYSIS_DATA
SET AVG_SEVEN_DAYS = i.AVG_WEEK
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_WEEK]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @SEVEN_DAYS_AGO AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

DECLARE @START_OF_WEEK DATE = DATEADD(DAY, (DATEPART(WEEKDAY, @TODAY) - 1) * -1, @TODAY)

UPDATE RISK_ANALYSIS_DATA
SET WEEK_TRANSACTED = i.TOTAL_MONTH
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,SUM(AMOUNT) [TOTAL_MONTH]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_OF_WEEK AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

UPDATE RISK_ANALYSIS_DATA
SET AVG_TICKET_WEEK = i.AVG_WEEK
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_WEEK]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @START_OF_WEEK AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

-- DAY 

DECLARE @TODAY_START DATE = @TODAY

UPDATE RISK_ANALYSIS_DATA
SET AVG_TICKET_DAY = i.AVG_DAY
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,(SUM(AMOUNT) / COUNT(*)) [AVG_DAY]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @TODAY_START AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

UPDATE RISK_ANALYSIS_DATA
SET DAY_TRANSACTED = i.TOTAL_DAY
FROM RISK_ANALYSIS_DATA
JOIN (SELECT
		COD_EC
	   ,SUM(AMOUNT) [TOTAL_DAY]
	FROM REPORT_TRANSACTIONS_EXP RTE
	WHERE COD_SITUATION IN (3, 22)
	AND TRANSACTION_DATE BETWEEN @TODAY_START AND @TODAY
	GROUP BY COD_EC) i
	ON i.COD_EC = RISK_ANALYSIS_DATA.COD_EC

END
GO

IF OBJECT_ID('RISK_ANALYSIS_QUEUE') IS NOT NULL DROP TABLE RISK_ANALYSIS_QUEUE
GO
BEGIN
    CREATE TABLE RISK_ANALYSIS_QUEUE
    (
        COD_TRAN INT NOT NULL PRIMARY KEY REFERENCES [TRANSACTION](COD_TRAN),
        TRANSACTION_DATE DATETIME NOT NULL,
        AMOUNT DECIMAL(22, 6) NOT NULL,
        COD_SITUATION INT NOT NULL,
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP (COD_ASS_DEPTO_TERMINAL),
        COD_EC INT NOT NULL,
        PAN VARCHAR(100) NULL,
        CODE VARCHAR(100) NULL
    )
END



IF OBJECT_ID('SP_RISK_RULE_APPLY') IS NOT NULL
DROP PROCEDURE SP_RISK_RULE_APPLY
GO
CREATE PROCEDURE SP_RISK_RULE_APPLY
(
    @COD_RULE INT
) AS BEGIN

    DECLARE @COD_DETAIL INT
        , @COD_FIELD INT
        , @F1_NAME VARCHAR(32)
        , @F1_TYPE VARCHAR(32)
        , @F1_PARTIAL INT
        , @F1_IS_SYSTEM INT
        , @COMPARISON VARCHAR(32)
        , @AMOUNT DECIMAL(22, 6)
        , @AMOUNT_UNTIL DECIMAL(22, 6)
        , @COD_SIT INT
        , @COD_FIELD2 INT
        , @F2_NAME VARCHAR(32)
        , @F2_TYPE VARCHAR(32)
        , @F2_PARTIAL INT
        , @F2_SYSTEM INT
        , @PERCENT INT

    DECLARE DETAIL_CURSOR CURSOR FOR
SELECT
	COD_RULE_DETAIL
   ,COD_FIELD
   ,F1.NAME [F1_NAME]
   ,F1.TYPE [F1_TYPE]
   ,F1.PARTIAL [F1_IS_PARTIAL]
   ,F1.SYSTEM_VALUE [F1_IS_SYTEM]
   ,COMPARISON
   ,AMOUNT
   ,AMOUNT_UNTIL
   ,COD_SITUATION
   ,COD_FIELD_COMPARE
   ,F2.NAME [F2_NAME]
   ,F2.TYPE [F2_TYPE]
   ,F2.PARTIAL [F2_IS_PARTIAL]
   ,F2.SYSTEM_VALUE [F2_IS_SYTEM]
   ,PERCENTAGE
FROM RISK_FRAUD_RULE_DETAIL D
LEFT JOIN RISK_FRAUD_FIELD F1
	ON F1.COD_RISK_FIELD = D.COD_FIELD
LEFT JOIN RISK_FRAUD_FIELD F2
	ON F2.COD_RISK_FIELD = D.COD_FIELD_COMPARE
WHERE COD_RULE = @COD_RULE

OPEN DETAIL_CURSOR
FETCH NEXT FROM DETAIL_CURSOR
INTO @COD_DETAIL
, @COD_FIELD
, @F1_NAME
, @F1_TYPE
, @F1_PARTIAL
, @F1_IS_SYSTEM
, @COMPARISON
, @AMOUNT
, @AMOUNT_UNTIL
, @COD_SIT
, @COD_FIELD2
, @F2_NAME
, @F2_TYPE
, @F2_PARTIAL
, @F2_SYSTEM
, @PERCENT


DECLARE @QUERY NVARCHAR(MAX) = ''
	   ,@HAS_GROUP BIT = 0
	   ,@QUERY_GROUP NVARCHAR(MAX) = ''
	   ,@Group_Filter NVARCHAR(MAX) = '';
DECLARE @EC_FILTER_TYPE INT = 1
	   ,@IS_EC_FILTER INT = 0;

WHILE @@fetch_status = 0
BEGIN

DECLARE @TO_COMPARE VARCHAR(128) = ' ' + CAST(@AMOUNT AS VARCHAR) + ' '

IF @F2_NAME IS NOT NULL
BEGIN

IF @F2_NAME = 'TRANSACTION_TIME'
BEGIN
SET @TO_COMPARE = ' DATEPART(HOUR, [RAQ].TRANSACTION_DATE) ';
            END ELSE IF @F2_NAME = 'TRANSACTION_VALUE' BEGIN
SET @TO_COMPARE = ' [RAQ].AMOUNT ';
            END ELSE IF @F2_NAME = 'AVG_TICKET' BEGIN
SET @TO_COMPARE = ' ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'TRAN_LIMIT' BEGIN
SET @TO_COMPARE = ' (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'DAY_LIMIT' BEGIN
SET @TO_COMPARE = ' (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'MONTH_LIMIT' BEGIN
SET @TO_COMPARE = ' (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) ';
            END ELSE IF @F2_NAME = 'DAY_TRANSACTED' BEGIN
SET @TO_COMPARE = ' [RD].DAY_TRANSACTED ';
            END ELSE IF @F2_NAME = 'MONTH_TRANSACTED' BEGIN
SET @TO_COMPARE = ' [RD].MONTH_TRANSACTED ';
            END

        END

        IF @F1_NAME = 'TRANSACTION_TIME' BEGIN

            IF @COMPARISON = '<'
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
BEGIN
IF @AMOUNT < @AMOUNT_UNTIL
SET @QUERY += ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';
ELSE
SET @QUERY += ' AND (DATEPART(HOUR, [RAQ].TRANSACTION_DATE) >= ' + CAST(@AMOUNT AS VARCHAR) + ' OR DATEPART(HOUR, [RAQ].TRANSACTION_DATE) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ') ';
END
END
ELSE
IF @F1_NAME = 'TRANSACTION_VALUE'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND [RAQ].AMOUNT < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND [RAQ].AMOUNT <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND [RAQ].AMOUNT = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND [RAQ].AMOUNT > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND [RAQ].AMOUNT >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND [RAQ].AMOUNT >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RAQ].AMOUNT <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRANSACTION_PAN'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].PAN', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].PAN '

SET @QUERY += ' AND [RAQ].PAN IS NOT NULL '

            IF @COMPARISON = '<'
SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '<='
SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '='
SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>'
SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>='
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = 'BETWEEN'
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRANSACTION_POS'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_ASS_DEPTO_TERMINAL', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_ASS_DEPTO_TERMINAL '

            IF @COMPARISON = '<'
SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '<='
SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '='
SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>'
SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>='
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = 'BETWEEN'
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRANSACTION_SITUATION'
BEGIN

SET @QUERY += ' AND [RAQ].COD_SITUATION = ' + CAST(@COD_SIT AS VARCHAR) + ' '

        END
        ELSE IF @F1_NAME = 'TRANSACTION_EC' BEGIN

            IF @HAS_GROUP = 0 BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_EC '

            IF @COMPARISON = '<'
SET @Group_Filter += ' AND COUNT(*) < ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '<='
SET @Group_Filter += ' AND COUNT(*) <= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '='
SET @Group_Filter += ' AND COUNT(*) = ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>'
SET @Group_Filter += ' AND COUNT(*) > ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = '>='
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' ';

IF @COMPARISON = 'BETWEEN'
SET @Group_Filter += ' AND COUNT(*) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND COUNT(*) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'AVG_TICKET'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND ([RD].AVG_THIRTY_DAYS * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND ([RD].AVG_THIRTY_DAYS * ( @PERCENT / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'TRAN_LIMIT'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND (CE.TRANSACTION_LIMIT * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.TRANSACTION_LIMIT * ( @PERCENT / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'DAY_LIMIT'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 1000. )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.LIMIT_TRANSACTION_DIALY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'MONTH_LIMIT'
BEGIN

IF @COMPARISON = '<'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND (CE.LIMIT_TRANSACTION_MONTHLY * ( ' + CAST(@PERCENT AS VARCHAR) + ' / 100.0 )) <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'DAY_TRANSACTED'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_EC '

SET @IS_EC_FILTER = 1;
SET @EC_FILTER_TYPE = 1;


            IF @COMPARISON = '<'
SET @QUERY += ' AND [RD].DAY_TRANSACTED < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND [RD].DAY_TRANSACTED <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND [RD].DAY_TRANSACTED = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND [RD].DAY_TRANSACTED > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND [RD].DAY_TRANSACTED >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND [RD].DAY_TRANSACTED >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RD].DAY_TRANSACTED <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
ELSE
IF @F1_NAME = 'MONTH_TRANSACTED'
BEGIN

IF @HAS_GROUP = 0
BEGIN
SET @HAS_GROUP = 1
            END ELSE BEGIN
SET @QUERY_GROUP += ','
            END

            IF CHARINDEX('[RAQ].COD_EC', @QUERY_GROUP) = '0'
SET @QUERY_GROUP += ' [RAQ].COD_EC '

SET @IS_EC_FILTER = 1;
SET @EC_FILTER_TYPE = 2;

            IF @COMPARISON = '<'
SET @QUERY += ' AND [RD].MONTH_TRANSACTED < ' + @TO_COMPARE;

IF @COMPARISON = '<='
SET @QUERY += ' AND [RD].MONTH_TRANSACTED <= ' + @TO_COMPARE;

IF @COMPARISON = '='
SET @QUERY += ' AND [RD].MONTH_TRANSACTED = ' + @TO_COMPARE;

IF @COMPARISON = '>'
SET @QUERY += ' AND [RD].MONTH_TRANSACTED > ' + @TO_COMPARE;

IF @COMPARISON = '>='
SET @QUERY += ' AND [RD].MONTH_TRANSACTED >= ' + @TO_COMPARE;

IF @COMPARISON = 'BETWEEN'
SET @QUERY += ' AND [RD].MONTH_TRANSACTED >= ' + CAST(@AMOUNT AS VARCHAR) + ' AND [RD].MONTH_TRANSACTED <= ' + CAST(@AMOUNT_UNTIL AS VARCHAR) + ' ';

END
--     ELSE IF @F1_NAME = 'LAST_HOUR' BEGIN
--     
--     END
--     ELSE IF @F1_NAME = 'LAST_DAY' BEGIN
--     
--     END
--     ELSE IF @F1_NAME = 'SAME_DAY' BEGIN
--     
--     END
--     ELSE IF @F1_NAME = 'SAME_MONTH' BEGIN
--     
--     END

FETCH NEXT FROM DETAIL_CURSOR
INTO @COD_DETAIL
, @COD_FIELD
, @F1_NAME
, @F1_TYPE
, @F1_PARTIAL
, @F1_IS_SYSTEM
, @COMPARISON
, @AMOUNT
, @AMOUNT_UNTIL
, @COD_SIT
, @COD_FIELD2
, @F2_NAME
, @F2_TYPE
, @F2_PARTIAL
, @F2_SYSTEM
, @PERCENT

END

CLOSE DETAIL_CURSOR
DEALLOCATE DETAIL_CURSOR

SET @QUERY = SUBSTRING(@QUERY, 5, LEN(@QUERY))
    DECLARE @JClause NVARCHAR(MAX)

    IF @IS_EC_FILTER = 1 BEGIN

SELECT
	@JClause = SUBSTRING((SELECT
			' AND ' + s.value + ' = ' + REPLACE(REPLACE(REPLACE(s.value, '[RAQ]', '[tgr]'), 'CE', '[tgr]'), '[RD]', '[tgr]') AS [text()]
		FROM STRING_SPLIT(@QUERY_GROUP, ',') s
		FOR XML PATH (''))
	, 5, 1000)

SET @Group_Filter = SUBSTRING(@Group_Filter, 5, LEN(@Group_Filter))

        IF LEN(@Group_Filter) > 0 BEGIN
SET @Group_Filter = ' HAVING ' + @Group_Filter
        END

SET @QUERY = 'SELECT ' + @QUERY_GROUP + '
            INTO #tmpGrp
        FROM RISK_ANALYSIS_QUEUE [RAQ]
            JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
            JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC 
        WHERE ' + @QUERY + '
        GROUP BY ' + @QUERY_GROUP + '
         ' + @Group_Filter + '; 

        DECLARE @ECS CODE_TYPE
        
        INSERT INTO @ECS (CODE)
        SELECT COD_EC FROM #tmpGrp;
        
        exec SP_RISK_FRAUD_LIMIT_CHK @ECS, ' + CAST(@EC_FILTER_TYPE AS VARCHAR) + ', @COD_RULE;
        '

-- SELECT @QUERY

EXEC sp_executesql @QUERY
				  ,N' @COD_RULE INT '
				  ,@COD_RULE = @COD_RULE;

END
ELSE
IF @QUERY_GROUP = ''
BEGIN

SET @QUERY = '
            SELECT RAQ.COD_TRAN
              , RAQ.TRANSACTION_DATE
              , RAQ.AMOUNT
              , RAQ.COD_SITUATION
              , RAQ.COD_ASS_DEPTO_TERMINAL
              , RAQ.COD_EC
              , RAQ.PAN
              , @COD_RULE [COD_RULE]
              , RAQ.CODE
            FROM RISK_ANALYSIS_QUEUE [RAQ]
                  JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
                  JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
            WHERE ' + @QUERY;

-- SELECT @QUERY

EXEC sp_executesql @QUERY
				  ,N' @COD_RULE INT '
				  ,@COD_RULE = @COD_RULE;

END
ELSE
BEGIN

SELECT
	@JClause = SUBSTRING((SELECT
			' AND ' + s.value + ' = ' + REPLACE(REPLACE(REPLACE(s.value, '[RAQ]', '[tgr]'), 'CE', '[tgr]'), '[RD]', '[tgr]') AS [text()]
		FROM STRING_SPLIT(@QUERY_GROUP, ',') s
		FOR XML PATH (''))
	, 5, 1000)

SET @Group_Filter = SUBSTRING(@Group_Filter, 5, LEN(@Group_Filter))

        IF LEN(@Group_Filter) > 0 BEGIN
SET @Group_Filter = ' HAVING ' + @Group_Filter
        END

SET @QUERY = 'SELECT ' + @QUERY_GROUP + '
            INTO #tmpGrp
        FROM RISK_ANALYSIS_QUEUE [RAQ]
            JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
            JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC 
        WHERE ' + @QUERY + '
        GROUP BY ' + @QUERY_GROUP + '
         ' + @Group_Filter + ';
                
        SELECT RAQ.COD_TRAN
              , RAQ.TRANSACTION_DATE
              , RAQ.AMOUNT
              , RAQ.COD_SITUATION
              , RAQ.COD_ASS_DEPTO_TERMINAL
              , RAQ.COD_EC
              , RAQ.PAN
              , @COD_RULE [COD_RULE]
              , RAQ.CODE
            FROM RISK_ANALYSIS_QUEUE [RAQ]
                JOIN RISK_ANALYSIS_DATA RD on RAQ.COD_EC = RD.COD_EC
                JOIN COMMERCIAL_ESTABLISHMENT CE on RD.COD_EC = CE.COD_EC
                JOIN #tmpGrp tgr ON ' + @JClause + '
            WHERE ' + @QUERY

-- SELECT @QUERY

EXEC sp_executesql @QUERY
				  ,N' @COD_RULE INT '
				  ,@COD_RULE = @COD_RULE;

END
END
GO

IF OBJECT_ID('SP_LS_RISK_FRAUD_RULE') IS NOT NULL
DROP PROCEDURE SP_LS_RISK_FRAUD_RULE
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_RULE
(
    @ACTIVE INT = 1
)
AS BEGIN

SELECT
	COD_RULE
   ,CREATED_AT
   ,DESCRIPTION
   ,ACTIVE
   ,IIF(EXISTS (SELECT
			COD_RULE_DETAIL
		FROM RISK_FRAUD_RULE_DETAIL RFD
		WHERE RFD.COD_RULE = RFR.COD_RULE
		AND RFD.COMPARISON = 'FILTER')
	, 1, 0) HAS_FILTER
FROM RISK_FRAUD_RULE RFR
WHERE ACTIVE = @ACTIVE

END

GO

IF OBJECT_ID('SP_LS_RISK_RULE_DETAIL') IS NOT NULL
DROP PROCEDURE SP_LS_RISK_RULE_DETAIL
GO
CREATE PROCEDURE SP_LS_RISK_RULE_DETAIL
(
    @COD_RULE INT
) AS BEGIN

SELECT
	COD_RULE_DETAIL
   ,COD_FIELD
   ,F1.NAME [F1_NAME]
   ,F1.TYPE [F1_TYPE]
   ,F1.PARTIAL [F1_IS_PARTIAL]
   ,F1.SYSTEM_VALUE [F1_IS_SYTEM]
   ,COMPARISON
   ,AMOUNT
   ,AMOUNT_UNTIL
   ,COD_SITUATION
   ,COD_FIELD_COMPARE
   ,F2.NAME [F2_NAME]
   ,F2.TYPE [F2_TYPE]
   ,F2.PARTIAL [F2_IS_PARTIAL]
   ,F2.SYSTEM_VALUE [F2_IS_SYTEM]
   ,PERCENTAGE
FROM RISK_FRAUD_RULE_DETAIL D
LEFT JOIN RISK_FRAUD_FIELD F1
	ON F1.COD_RISK_FIELD = D.COD_FIELD
LEFT JOIN RISK_FRAUD_FIELD F2
	ON F2.COD_RISK_FIELD = D.COD_FIELD_COMPARE
WHERE COD_RULE = @COD_RULE
ORDER BY D.FIELD_ORDER

END
GO

IF OBJECT_ID('RISK_FRAUD_ALERT') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_ALERT
    (
        COD_FRAUD_ALERT INT NOT NULL PRIMARY KEY IDENTITY,
        COD_TRAN INT NOT NULL  REFERENCES [TRANSACTION](COD_TRAN),
        TRANSACTION_DATE DATETIME NOT NULL,
        AMOUNT DECIMAL(22, 6) NOT NULL,
        COD_SITUATION INT NOT NULL,
        COD_ASS_DEPTO_TERMINAL INT NULL REFERENCES ASS_DEPTO_EQUIP (COD_ASS_DEPTO_TERMINAL),
        COD_EC INT NOT NULL,
        ACTIVE INT NOT NULL DEFAULT (1),
        PAN VARCHAR(100) NULL,
        CODE VARCHAR(100) NULL,
        COD_USER INT REFERENCES USERS(COD_USER),
        COMMENT VARCHAR(256) NULL,
        [ACTION] VARCHAR(64)
    )
END
GO



IF OBJECT_ID('RISK_FRAUD_ALERT_RULE') IS NULL BEGIN
    CREATE TABLE RISK_FRAUD_ALERT_RULE
    (
        COD_FRAUD_ALERT INT NOT NULL REFERENCES RISK_FRAUD_ALERT(COD_FRAUD_ALERT),
        COD_RULE INT NOT NULL REFERENCES RISK_FRAUD_RULE (COD_RULE),
        PRIMARY KEY (COD_FRAUD_ALERT, COD_RULE),
        GROUP_CODE VARCHAR(64) NULL
    )
END
GO
   

IF OBJECT_ID('SP_REG_ALERT_RISK_FRAUD') IS NOT NULL
DROP PROCEDURE SP_REG_ALERT_RISK_FRAUD
GO
IF TYPE_ID('RISK_ALERT_TP') IS NOT NULL
DROP TYPE RISK_ALERT_TP
GO
CREATE TYPE RISK_ALERT_TP AS TABLE
(
    COD_TRAN INT NOT NULL,
    TRANSACTION_DATE DATETIME NOT NULL,
    AMOUNT DECIMAL(22, 6) NOT NULL,
    COD_SITUATION INT NOT NULL,
    COD_ASS_DEPTO_TERMINAL INT NULL,
    COD_EC INT NOT NULL,
    PAN VARCHAR(100) NULL,
    COD_RULE INT NOT NULL,
    GROUP_CODE VARCHAR(64) NULL,
    CODE VARCHAR(100) NULL
)
GO
CREATE PROCEDURE SP_REG_ALERT_RISK_FRAUD
(
    @ALERTS RISK_ALERT_TP READONLY
) AS BEGIN

INSERT INTO RISK_FRAUD_ALERT (COD_TRAN, TRANSACTION_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE)
	SELECT
		A.COD_TRAN
	   ,A.TRANSACTION_DATE
	   ,A.AMOUNT
	   ,A.COD_SITUATION
	   ,A.COD_ASS_DEPTO_TERMINAL
	   ,A.COD_EC
	   ,A.PAN
	   ,CODE
	FROM @ALERTS A
	WHERE (SELECT
			COUNT(*)
		FROM RISK_FRAUD_ALERT RFA1
		WHERE RFA1.COD_TRAN = A.COD_TRAN)
	= 0

INSERT INTO RISK_FRAUD_ALERT_RULE (COD_FRAUD_ALERT, COD_RULE, GROUP_CODE)
	SELECT
		RFA.COD_FRAUD_ALERT
	   ,A.COD_RULE
	   ,A.GROUP_CODE
	FROM @ALERTS A
	JOIN RISK_FRAUD_ALERT RFA
		ON RFA.COD_TRAN = A.COD_TRAN
	WHERE (SELECT
			COUNT(*)
		FROM RISK_FRAUD_ALERT_RULE RFAR
		WHERE RFAR.COD_RULE = A.COD_RULE
		AND RFA.COD_FRAUD_ALERT = RFAR.COD_FRAUD_ALERT)
	= 0

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_LIMIT_CHK') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_LIMIT_CHK
GO
CREATE PROCEDURE SP_RISK_FRAUD_LIMIT_CHK
(
    @ECS CODE_TYPE READONLY,
    @TYPE INT = 1,
    @COD_RULE INT = 1
) AS BEGIN

    DECLARE @COD_EC INT, @TRANS CODE_TYPE;

    DECLARE EC_CURSOR CURSOR FOR SELECT
	CODE
FROM @ECS;

OPEN EC_CURSOR
FETCH NEXT FROM EC_CURSOR INTO @COD_EC;

WHILE @@fetch_status = 0
BEGIN

DECLARE @COD_TRAN INT
	   ,@AMOUNT DECIMAL(22, 6)
	   ,@CUR_TOTAL DECIMAL(22, 6)
	   ,@LIMIT DECIMAL(22, 6)
	   ,@CONTINUE_FETCH INT = 1
	   ,@UP_DATE DATETIME;
DECLARE @START_DATE DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @UP_DATE), 0)

IF @TYPE = 1
BEGIN

SELECT
	@CUR_TOTAL = DAY_TRANSACTED
   ,@LIMIT = CE.LIMIT_TRANSACTION_DIALY
   ,@UP_DATE = LAST_UPDATE
FROM RISK_ANALYSIS_DATA RAD
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RAD.COD_EC = CE.COD_EC
WHERE RAD.COD_EC = @COD_EC

SET @START_DATE = CAST(@UP_DATE AS DATE)
            
        END ELSE BEGIN

SELECT
	@CUR_TOTAL = MONTH_TRANSACTED
   ,@LIMIT = CE.LIMIT_TRANSACTION_MONTHLY
   ,@UP_DATE = LAST_UPDATE
FROM RISK_ANALYSIS_DATA RAD
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RAD.COD_EC = CE.COD_EC
WHERE RAD.COD_EC = @COD_EC

SET @START_DATE = DATEADD(MONTH, DATEDIFF(MONTH, 0, @UP_DATE), 0)
            
        END

        DECLARE EC_TRANS CURSOR FOR
SELECT
	COD_TRAN
   ,AMOUNT
FROM RISK_ANALYSIS_QUEUE
WHERE COD_EC = @COD_EC
AND COD_SITUATION IN (3, 22)
AND TRANSACTION_DATE BETWEEN @START_DATE AND @UP_DATE
ORDER BY COD_TRAN DESC;

OPEN EC_TRANS
FETCH NEXT FROM EC_TRANS INTO @COD_TRAN, @AMOUNT;

WHILE @@fetch_status = 0
AND @CONTINUE_FETCH = 1
BEGIN

INSERT INTO @TRANS (CODE)
	VALUES (@COD_TRAN)

SET @CUR_TOTAL -= @AMOUNT;

            IF @CUR_TOTAL < @LIMIT SET @CONTINUE_FETCH = 0

            FETCH NEXT FROM EC_TRANS INTO @COD_TRAN, @AMOUNT;

        END
        CLOSE EC_TRANS;
        DEALLOCATE EC_TRANS;

        FETCH NEXT FROM EC_CURSOR INTO @COD_EC;

    END

    CLOSE EC_CURSOR;
    DEALLOCATE EC_CURSOR;

SELECT
	RAQ.COD_TRAN
   ,RAQ.TRANSACTION_DATE
   ,RAQ.AMOUNT
   ,RAQ.COD_SITUATION
   ,RAQ.COD_ASS_DEPTO_TERMINAL
   ,RAQ.COD_EC
   ,RAQ.PAN
   ,@COD_RULE [COD_RULE]
   ,RAQ.CODE
FROM RISK_ANALYSIS_QUEUE [RAQ]
JOIN RISK_ANALYSIS_DATA RD
	ON RAQ.COD_EC = RD.COD_EC
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RD.COD_EC = CE.COD_EC
WHERE RAQ.COD_TRAN IN (SELECT
		CODE
	FROM @TRANS)

END
GO


IF OBJECT_ID('SP_REG_RISK_FRAUD_QUEUE') IS NOT NULL
DROP PROCEDURE SP_REG_RISK_FRAUD_QUEUE
GO
CREATE PROCEDURE SP_REG_RISK_FRAUD_QUEUE
AS BEGIN

    DECLARE @COD_TRAN INT;
    DECLARE @MAX_WINDOW_DAYS INT = 7

    IF ( SELECT
		COUNT(*)
	FROM RISK_ANALYSIS_QUEUE)
= 0
BEGIN

DECLARE @FROM_DATE DATE = DATEADD(DAY, -@MAX_WINDOW_DAYS, GETDATE())
SELECT TOP 1
	@COD_TRAN = (REPORT_TRANSACTIONS_EXP.COD_TRAN - 1)
FROM REPORT_TRANSACTIONS_EXP WITH (NOLOCK)
WHERE TRANSACTION_DATE >= @FROM_DATE

END
ELSE
BEGIN

SELECT TOP 1
	@COD_TRAN = COD_TRAN
FROM RISK_ANALYSIS_QUEUE
ORDER BY COD_TRAN DESC

END

INSERT INTO RISK_ANALYSIS_QUEUE (COD_TRAN, TRANSACTION_DATE, AMOUNT, COD_SITUATION, COD_ASS_DEPTO_TERMINAL, COD_EC, PAN, CODE)
	SELECT
		REPORT_TRANSACTIONS_EXP.COD_TRAN
	   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_DATE
	   ,REPORT_TRANSACTIONS_EXP.AMOUNT
	   ,REPORT_TRANSACTIONS_EXP.COD_SITUATION
	   ,[TRANSACTION].COD_ASS_DEPTO_TERMINAL
	   ,REPORT_TRANSACTIONS_EXP.COD_EC
	   ,REPORT_TRANSACTIONS_EXP.PAN
	   ,REPORT_TRANSACTIONS_EXP.TRANSACTION_CODE
	FROM REPORT_TRANSACTIONS_EXP
	JOIN [TRANSACTION] WITH (NOLOCK)
		ON REPORT_TRANSACTIONS_EXP.COD_TRAN = [TRANSACTION].COD_TRAN
	LEFT JOIN RISK_ANALYSIS_QUEUE
		ON RISK_ANALYSIS_QUEUE.COD_TRAN = REPORT_TRANSACTIONS_EXP.COD_TRAN
	WHERE REPORT_TRANSACTIONS_EXP.COD_TRAN > @COD_TRAN
	AND RISK_ANALYSIS_QUEUE.COD_TRAN IS NULL
--SELECT
--	COD_TRAN
--   ,BRAZILIAN_DATE
--   ,AMOUNT
--   ,COD_SITUATION
--   ,COD_ASS_DEPTO_TERMINAL
--   ,COD_EC
--   ,PAN
--   ,CODE
--FROM [TRANSACTION] WITH (NOLOCK)
--WHERE COD_TRAN > @COD_TRAN

END
GO


IF OBJECT_ID('SP_CLEAN_RISK_FRAUD_QUEUE') IS NOT NULL
DROP PROCEDURE SP_CLEAN_RISK_FRAUD_QUEUE
GO
CREATE PROCEDURE SP_CLEAN_RISK_FRAUD_QUEUE
AS BEGIN
   
    DECLARE @MAX_QUEUE_DAYS INT = 35
    DECLARE @MAX_OLDER_DATE DATE = dbo.FN_FUS_UTF( CAST( DATEADD( DAY, -@MAX_QUEUE_DAYS, GETDATE() ) AS DATE ) )

DELETE FROM RISK_ANALYSIS_QUEUE
WHERE TRANSACTION_DATE < @MAX_OLDER_DATE

END
GO

IF OBJECT_ID('SP_LS_RISK_FRAUD_NOTIFY') IS NOT NULL BEGIN
DROP PROCEDURE SP_LS_RISK_FRAUD_NOTIFY;
END
GO
  
CREATE PROCEDURE SP_LS_RISK_FRAUD_NOTIFY        
(        
    @PAGE INT = 1,        
    @PAGE_SIZE INT = 10,        
    @ACTIVE INT = 1,        
 @INITIAL_DATE DATETIME = NULL,                    
 @FINAL_DATE DATETIME = NULL,      
 @COD_AFF INT = NULL,                    
 @COD_EC INT = NULL,                    
 @NSU VARCHAR(100) = NULL,                    
 @BIN VARCHAR(20) = NULL,            
    @TOTAL INT OUTPUT        
)        
AS BEGIN
  
    
      
        
    DECLARE @OFF_SIZE INT = (@PAGE -1) * @PAGE_SIZE
  
    
      
        
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);

SET @QUERY_BASIS = '       
SELECT   
 COUNT(RFA.COD_FRAUD_ALERT)   
FROM RISK_FRAUD_ALERT RFA       
JOIN COMMERCIAL_ESTABLISHMENT CE   
 on CE.COD_EC = RFA.COD_EC      
JOIN REPORT_TRANSACTIONS_EXP   
 ON REPORT_TRANSACTIONS_EXP.COD_TRAN = RFA.COD_tRAN    
WHERE RFA.ACTIVE = @ACTIVE   
AND REPORT_TRANSACTIONS_EXP.COD_SITUATION IN    
(    
 3,    
 14    
)'
  
    
      
       
      
 IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.CODE = @NSU ');
ELSE
BEGIN

IF (@COD_AFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CE.COD_AFFILIATOR = @COD_AFF ');

IF (@COD_EC IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

IF LEN(@BIN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

IF @INITIAL_DATE IS NOT NULL
	AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');
END

DECLARE @rowcount TABLE (
	[VALUE] INT
);
INSERT INTO @rowcount
EXEC [sp_executesql] @QUERY_BASIS
					,N'                                                         
        @ACTIVE INT,                                                 
        @INITIAL_DATE DATETIME,                                                 
        @FINAL_DATE DATETIME,      
  @COD_AFF INT,                    
  @COD_EC INT,                    
  @NSU VARCHAR(100),                    
  @BIN VARCHAR(20)      
        '
					,@ACTIVE = @ACTIVE
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@COD_AFF = @COD_AFF
					,@COD_EC = @COD_EC
					,@NSU = @NSU
					,@BIN = @BIN

SELECT
	@TOTAL = [VALUE]
FROM @rowcount;

SET @QUERY_BASIS = '       
    SELECT RFA.COD_FRAUD_ALERT,        
           RFA.COD_TRAN,        
           RFA.TRANSACTION_DATE,        
           RFA.AMOUNT,        
           COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME],        
           E.SERIAL,        
           CE.TRADING_NAME [EC_NAME],        
           CE.CPF_CNPJ,        
           RFA.PAN,        
           SUBSTRING((        
                         SELECT (''; '' + RFAR.GROUP_CODE) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) AS [GROUP_CODE],        
           SUBSTRING((        
                         SELECT ('', '' + RFR.DESCRIPTION) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) [Rules],        
           A.NAME [Affiliated],        
           RFA.CODE [NSU]        
    FROM RISK_FRAUD_ALERT RFA        
   JOIN REPORT_TRANSACTIONS_EXP ON REPORT_TRANSACTIONS_EXP.COD_TRAN = RFA.COD_tRAN    
             JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION        
             LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION        
             LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL        
             LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP        
             LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC        
             LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = CE.COD_AFFILIATOR        
  
      
    WHERE RFA.ACTIVE = @ACTIVE    
 AND REPORT_TRANSACTIONS_EXP.COD_SITUATION IN    
 (    
 3,    
 14    
 )    
 '
  
    
      
      
 IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.CODE = @NSU ');
ELSE
BEGIN

IF (@COD_EC IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

IF (@COD_AFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND A.COD_AFFILIATOR = @COD_AFF ');

IF LEN(@BIN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

IF @INITIAL_DATE IS NOT NULL
	AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');

END

SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' ORDER BY COD_TRAN DESC       
 OFFSET @OFF_SIZE ROWS FETCH NEXT @PAGE_SIZE ROWS ONLY ');

EXEC [sp_executesql] @QUERY_BASIS
					,N'                                                         
  @PAGE INT,        
  @PAGE_SIZE INT,       
        @ACTIVE INT,                                                 
        @INITIAL_DATE DATETIME,                                                 
        @FINAL_DATE DATETIME,      
  @COD_AFF INT,                    
  @COD_EC INT,                    
  @NSU VARCHAR(100),                    
  @BIN VARCHAR(20),      
  @OFF_SIZE INT      
        '
					,@PAGE = @PAGE
					,@PAGE_SIZE = @PAGE_SIZE
					,@ACTIVE = @ACTIVE
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@COD_AFF = @COD_AFF
					,@COD_EC = @COD_EC
					,@NSU = @NSU
					,@BIN = @BIN
					,@OFF_SIZE = @OFF_SIZE

END
GO


IF OBJECT_ID('SP_RISK_FRAUD_ALERT_INFO') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_ALERT_INFO
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_INFO --3915     
(        
    @COD_FRAUD_ALERT INT        
) AS BEGIN

SELECT
	COD_FRAUD_ALERT
   ,RFA.COD_TRAN
   ,RFA.TRANSACTION_DATE
   ,RFA.AMOUNT
   ,COALESCE(TS.SITUATION_TR, S.NAME) [SIT_NAME]
   ,E.SERIAL
   ,CE.NAME [EC_NAME]
   ,CE.CPF_CNPJ AS CPF_CNPJ
   ,RFA.PAN
   ,SUBSTRING((SELECT
			('; ' + RFAR.GROUP_CODE) AS [text()]
		FROM RISK_FRAUD_ALERT_RULE RFAR
		WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
		FOR XML PATH (''))
	, 3, 1000) AS [GROUP_CODE]
   ,RTE.TRANSACTION_CODE [TRAN_CODE]
   ,RTE.PLOTS
   ,RTE.TRANSACTION_TYPE AS TTYPE
   ,RTE.BRAND
   ,A.NAME [Afiliator]
   ,A.CPF_CNPJ [AFF_DOC]
   ,ST.DESCRIPTION [SOURCE]
   ,RTE.COMMENT
   ,RTE.CARD_NAME
   ,RTE.CARD_HOLDER_DOC
   ,RTE.CUSTOMER_EMAIL
   ,RTE.CUSTOMER_IDENTIFICATION
   ,RTE.NAME_ACQUIRER [ACQ_NAME]
   ,RTE.TRANSACTION_CODE [NSU]
   ,RTE.TRAN_DATA_EXT_VALUE
   ,RTE.LINK_PAYMENT_SERVICE
   ,RTE.TERMINAL_VERSION
   ,RTE.LOGICAL_NUMBER_ACQ
   ,RFA.COD_EC
   ,IIF(RFA.COD_SITUATION = 3, IIF((SELECT
			COUNT(*)
		FROM TRANSACTION_TITLES TT WITH (NOLOCK)
		--COD_TRAN, COD_EC, PLOT, COD_SITUATION  
		WHERE TT.COD_TRAN = RFA.COD_TRAN
		AND TT.COD_EC = RFA.COD_EC
		AND TT.PLOT = RTE.PLOTS
		AND TT.COD_SITUATION = 17)
	>= 1, 0, 1), 0) [CANCELABLE]
   ,IIF(RFA.COD_SITUATION = 3, IIF((SELECT
			COUNT(*)
		FROM TRANSACTION_TITLES TT WITH (NOLOCK)
		WHERE TT.COD_TRAN = RFA.COD_TRAN
		AND TT.COD_EC = RFA.COD_EC
		AND TT.PLOT = RTE.PLOTS
		AND TT.COD_SITUATION != 4)
	>= 1, 0, 1), 0) [BLOCKABLE]
   ,SEG.NAME [SEGMENT]
   ,RFA.ACTION
FROM RISK_FRAUD_ALERT RFA WITH (NOLOCK)
JOIN REPORT_TRANSACTIONS_EXP RTE WITH (NOLOCK)
	ON RTE.COD_TRAN = RFA.COD_TRAN
LEFT JOIN TRADUCTION_SITUATION TS WITH (NOLOCK)
	ON RFA.COD_SITUATION = TS.COD_SITUATION
LEFT JOIN SITUATION S WITH (NOLOCK)
	ON S.COD_SITUATION = RFA.COD_SITUATION
LEFT JOIN ASS_DEPTO_EQUIP ADE WITH (NOLOCK)
	ON RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
LEFT JOIN EQUIPMENT E WITH (NOLOCK)
	ON ADE.COD_EQUIP = E.COD_EQUIP
LEFT JOIN COMMERCIAL_ESTABLISHMENT CE WITH (NOLOCK)
	ON CE.COD_EC = RTE.COD_EC
LEFT JOIN AFFILIATOR A WITH (NOLOCK)
	ON RTE.COD_AFFILIATOR = A.COD_AFFILIATOR
LEFT JOIN SOURCE_TRANSACTION ST WITH (NOLOCK)
	ON ST.COD_SOURCE_TRAN = RTE.COD_SOURCE_TRAN
LEFT JOIN SEGMENTS SEG WITH (NOLOCK)
	ON SEG.COD_SEG = CE.COD_SEG
WHERE RFA.COD_FRAUD_ALERT = @COD_FRAUD_ALERT
AND RTE.COD_SITUATION IN
(
3,
14
)
END
GO


IF OBJECT_ID('SP_RISK_FRAUD_ALERT_RULES') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_ALERT_RULES
GO
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_RULES
(
    @COD_FRAUD_ALERT INT
) AS BEGIN
SELECT
	RFR.DESCRIPTION
   ,'Transa�ao onde ' + SUBSTRING((SELECT
			(
			' e ' +
			IIF(RFD.COMPARISON = 'GROUP', 'Agrupar por ', IIF(F1.TYPE = 'GROUPING', 'Quantidade por ', '')) +
			IIF(F1.TYPE != 'FILTER', F1.DESCRIPTION, REPLACE(F1.DESCRIPTION, 'x', IIF(RFD.AMOUNT IS NOT NULL, IIF(F1.TYPE = 'DECIMAL', CAST(RFD.AMOUNT AS VARCHAR), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)), ''))) +
			IIF(RFD.COMPARISON = 'BETWEEN', ' ENTRE ' + IIF(F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)) + ' E ' + IIF(F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT_UNTIL, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT_UNTIL AS INT) AS VARCHAR)), '') +
			IIF(RFD.COMPARISON != 'BETWEEN' AND RFD.COMPARISON != 'GROUP' AND RFD.COD_FIELD_COMPARE IS NULL AND F1.TYPE != 'FILTER' AND RFD.AMOUNT IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF(F1.TYPE = 'DECIMAL', FORMAT(RFD.AMOUNT, 'N', 'pt-BR'), CAST(CAST(RFD.AMOUNT AS INT) AS VARCHAR)), '') +
			IIF(RFD.COD_SITUATION IS NOT NULL, ' ' + COALESCE(TS.SITUATION_TR, S.NAME), '') +
			IIF(RFD.COD_FIELD_COMPARE IS NOT NULL, ' ' + RFD.COMPARISON + ' ' + IIF(RFD.PERCENTAGE IS NOT NULL, CAST(CAST(RFD.PERCENTAGE AS INT) AS VARCHAR) + '% do ', '') + F2.DESCRIPTION, '')
			) AS [text()]
		FROM RISK_FRAUD_RULE_DETAIL RFD
		JOIN RISK_FRAUD_FIELD F1
			ON RFD.COD_FIELD = F1.COD_RISK_FIELD
		LEFT JOIN RISK_FRAUD_FIELD F2
			ON F2.COD_RISK_FIELD = RFD.COD_FIELD_COMPARE
		LEFT JOIN SITUATION S
			ON RFD.COD_SITUATION = S.COD_SITUATION
		LEFT JOIN TRADUCTION_SITUATION TS
			ON RFD.COD_SITUATION = TS.COD_SITUATION
		WHERE COD_RULE = RFAR.COD_RULE
		FOR XML PATH (''))
	, 4, 1000) [DETAIL]
FROM RISK_FRAUD_ALERT_RULE RFAR
JOIN RISK_FRAUD_RULE RFR
	ON RFAR.COD_RULE = RFR.COD_RULE
WHERE RFAR.COD_FRAUD_ALERT = @COD_FRAUD_ALERT
END
GO



IF OBJECT_ID('SP_LS_RISK_FRAUD_GROUP_DETAIL') IS NOT NULL
DROP PROCEDURE SP_LS_RISK_FRAUD_GROUP_DETAIL
GO
CREATE PROCEDURE SP_LS_RISK_FRAUD_GROUP_DETAIL
(
    @GROUP_CODE VARCHAR(64)
)
AS BEGIN

SELECT
	COD_FRAUD_ALERT
   ,COD_TRAN
   ,TRANSACTION_DATE
   ,AMOUNT
   ,S.NAME [SIT_NAME]
   ,E.SERIAL
   ,CE.NAME [EC_NAME]
   ,CE.CPF_CNPJ
   ,PAN
   ,@GROUP_CODE [GROUP_CODE]
   ,SUBSTRING((SELECT
			(', ' + RFR.DESCRIPTION) AS [text()]
		FROM RISK_FRAUD_ALERT_RULE RFAR
		JOIN RISK_FRAUD_RULE RFR
			ON RFR.COD_RULE = RFAR.COD_RULE
		WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
		FOR XML PATH (''))
	, 3, 1000) [Rules]
FROM RISK_FRAUD_ALERT RFA
JOIN SITUATION S
	ON RFA.COD_SITUATION = S.COD_SITUATION
LEFT JOIN ASS_DEPTO_EQUIP ADE
	ON RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL
LEFT JOIN EQUIPMENT E
	ON ADE.COD_EQUIP = E.COD_EQUIP
LEFT JOIN COMMERCIAL_ESTABLISHMENT CE
	ON CE.COD_EC = RFA.COD_EC
WHERE (SELECT
		COUNT(*)
	FROM RISK_FRAUD_ALERT_RULE RFAR
	WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT
	AND RFAR.GROUP_CODE = @GROUP_CODE)
> 0
ORDER BY COD_TRAN DESC
END
GO

IF OBJECT_ID('SP_CLEAN_RISK_ALERT_HIST') IS NOT NULL
DROP PROCEDURE SP_CLEAN_RISK_ALERT_HIST
GO
CREATE PROCEDURE SP_CLEAN_RISK_ALERT_HIST
AS BEGIN

DELETE FROM RISK_FRAUD_ALERT
WHERE ACTIVE = 0
	AND DATEDIFF(MONTH, TRANSACTION_DATE, GETDATE()) > 6

END
GO

IF OBJECT_ID('RISK_ANALYSIS_DATA_EC') IS NOT NULL
DROP PROCEDURE RISK_ANALYSIS_DATA_EC
GO
CREATE PROCEDURE RISK_ANALYSIS_DATA_EC
(
    @COD_EC INT
) AS BEGIN

SELECT
	RAD.COD_EC
   ,RAD.AVG_THIRTY_DAYS
   ,RAD.AVG_SEVEN_DAYS
   ,RAD.AVG_TICKET_MONTH
   ,RAD.AVG_TICKET_WEEK
   ,RAD.AVG_TICKET_DAY
   ,RAD.MONTH_TRANSACTED
   ,RAD.DAY_TRANSACTED
   ,RAD.WEEK_TRANSACTED
   ,RAD.LAST_UPDATE
   ,CE.LIMIT_TRANSACTION_MONTHLY
   ,CE.LIMIT_TRANSACTION_DIALY
FROM RISK_ANALYSIS_DATA RAD
JOIN COMMERCIAL_ESTABLISHMENT CE
	ON RAD.COD_EC = CE.COD_EC
WHERE RAD.COD_EC = @COD_EC

END
GO

IF OBJECT_ID('SP_DISMISS_RISK_FRAUD_ALERT') IS NOT NULL
DROP PROCEDURE SP_DISMISS_RISK_FRAUD_ALERT
GO
CREATE PROCEDURE SP_DISMISS_RISK_FRAUD_ALERT
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256)
) AS BEGIN

UPDATE RISK_FRAUD_ALERT
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,COMMENT = @COMMENT
   ,[ACTION] = 'CLEARED'
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_CANCEL_TRAN') IS NOT NULL
DROP PROCEDURE SP_RISK_FRAUD_CANCEL_TRAN
GO
CREATE PROCEDURE SP_RISK_FRAUD_CANCEL_TRAN
(
    @COD_FRAUD_ALERT INT,
    @COD_USER INT,
    @COMMENT VARCHAR(256)
) AS BEGIN

    DECLARE @SITUATIONS TABLE ( SITNAME VARCHAR(100) NULL, COD_SIT INT NULL );
    DECLARE @COD_TRAN INT, @CODE_TRAN VARCHAR(200), @CANCELED VARCHAR(100);

SELECT
	@COD_TRAN = RFA.COD_TRAN
   ,@CODE_TRAN = RFA.CODE
FROM RISK_FRAUD_ALERT RFA
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT;

INSERT INTO @SITUATIONS (SITNAME, COD_SIT)
	SELECT DISTINCT
		S.NAME
	   ,S.COD_SITUATION
	FROM TRANSACTION_TITLES TT WITH (NOLOCK)
	JOIN SITUATION S
		ON TT.COD_SITUATION = S.COD_SITUATION
	WHERE TT.COD_SITUATION = @COD_TRAN;



IF (SELECT
			COUNT(*)
		FROM @SITUATIONS S
		WHERE S.SITNAME = 'PAID')
	>= 0
BEGIN

SET @CANCELED = 'CANCELED PARTIAL'

    END ELSE IF ( SELECT
		COUNT(*)
	FROM @SITUATIONS S
	WHERE S.SITNAME = 'AWAITING PAYMENT')
>= 0
BEGIN

SET @CANCELED = 'CANCELED'

    END

    IF @CANCELED IS NOT NULL BEGIN

EXEC SP_UP_TRANSACTION @CODE_TRAN = @CODE_TRAN
					  ,@SITUATION = @CANCELED
					  ,@DESCRIPTION = @COMMENT
					  ,@CURRENCY = '786'
					  ,@COD_USER = @COD_USER

UPDATE RISK_FRAUD_ALERT
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,COMMENT = @COMMENT
   ,[ACTION] = @CANCELED
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END

END
GO

IF OBJECT_ID('SP_RISK_FRAUD_ALERT_EXPORT') IS NOT NULL BEGIN
DROP PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT;
END
GO
  
CREATE PROCEDURE SP_RISK_FRAUD_ALERT_EXPORT        
(        
    @ACTIVE INT = 1,      
 @INITIAL_DATE DATETIME = NULL,                    
 @FINAL_DATE DATETIME = NULL,      
 @COD_AFF INT = NULL,                    
 @COD_EC INT = NULL,                    
 @NSU VARCHAR(100) = NULL,                    
 @BIN VARCHAR(20) = NULL            
      
) AS BEGIN
  
    
      
        
        
    DECLARE @QUERY_BASIS NVARCHAR(MAX) = '';
SET NOCOUNT ON;
SET ARITHABORT ON;
SET @FINAL_DATE = DATEADD([MILLISECOND], 999, @FINAL_DATE);

SET @QUERY_BASIS = '       
 SELECT COD_FRAUD_ALERT,        
           RFA.COD_TRAN,        
           RFA.TRANSACTION_DATE,        
           RFA.AMOUNT,        
           COALESCE(RTE.SITUATION, S.NAME) [SIT_NAME],        
           RTE.SERIAL_EQUIP AS [SERIAL],        
           CE.NAME [EC_NAME],        
           CE.CPF_CNPJ,        
           RFA.PAN,        
           SUBSTRING((        
                         SELECT (''; '' + RFAR.GROUP_CODE) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) AS [GROUP_CODE],        
           RTE.TRANSACTION_CODE [TRAN_CODE],        
           RTE.PLOTS,        
           RTE.TRANSACTION_TYPE [TTYPE],        
           RTE.BRAND,        
           A.NAME [Afiliator],        
           A.CPF_CNPJ [AFF_DOC],        
           ST.DESCRIPTION [SOURCE],        
           RTE.COMMENT,        
           RTE.CARD_NAME,        
           RTE.CARD_HOLDER_DOC,        
           RTE.CUSTOMER_EMAIL,        
           RTE.CUSTOMER_IDENTIFICATION,        
           RTE.NAME_ACQUIRER [ACQ_NAME],        
           RTE.TRANSACTION_CODE [NSU],        
           RTE.TRAN_DATA_EXT_VALUE,        
           RTE.LINK_PAYMENT_SERVICE,        
           RTE.TERMINAL_VERSION,        
           RTe.LOGICAL_NUMBER_ACQ,        
           RFA.COD_EC,        
           SEG.NAME [SEGMENT],        
           RFA.ACTION,        
           RAD.AVG_THIRTY_DAYS,        
           RAD.AVG_SEVEN_DAYS,        
           RAD.AVG_TICKET_MONTH,        
           RAD.AVG_TICKET_WEEK,        
           RAD.MONTH_TRANSACTED,        
           RAD.DAY_TRANSACTED,        
           CE.LIMIT_TRANSACTION_MONTHLY,        
           CE.LIMIT_TRANSACTION_DIALY,        
           SUBSTRING((        
                         SELECT ('', '' + RFR.DESCRIPTION) AS [text()]        
                         FROM RISK_FRAUD_ALERT_RULE RFAR        
                                  JOIN RISK_FRAUD_RULE RFR ON RFR.COD_RULE = RFAR.COD_RULE        
                         WHERE RFAR.COD_FRAUD_ALERT = RFA.COD_FRAUD_ALERT        
                         FOR XML PATH('''')        
                     ), 3, 1000) [Rules]        
    FROM RISK_FRAUD_ALERT RFA        
   JOIN REPORT_TRANSACTIONS_EXP RTE ON RFA.COD_TRAN = RTE.COD_TRAN      
            JOIN SITUATION S on RFA.COD_SITUATION = S.COD_SITUATION        
            LEFT JOIN TRADUCTION_SITUATION TS on RFA.COD_SITUATION = TS.COD_SITUATION        
            LEFT JOIN ASS_DEPTO_EQUIP ADE on RFA.COD_ASS_DEPTO_TERMINAL = ADE.COD_ASS_DEPTO_TERMINAL        
            LEFT JOIN EQUIPMENT E on ADE.COD_EQUIP = E.COD_EQUIP        
            LEFT JOIN COMMERCIAL_ESTABLISHMENT CE on CE.COD_EC = RFA.COD_EC        
            LEFT JOIN AFFILIATOR A ON A.COD_AFFILIATOR = CE.COD_AFFILIATOR                           
            LEFT JOIN SOURCE_TRANSACTION ST ON ST.COD_SOURCE_TRAN = RTE.COD_SOURCE_TRAN        
            LEFT JOIN SEGMENTS SEG ON SEG.COD_SEG = CE.COD_SEG        
            LEFT JOIN RISK_ANALYSIS_DATA RAD ON RAD.COD_EC = RFA.COD_EC       
    WHERE RFA.ACTIVE = @ACTIVE  
 AND RTE.COD_SITUATION IN (3, 14)'
  
    
      
      
 IF LEN(@NSU) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RTE.TRANSACTION_CODE = @NSU ');
ELSE
BEGIN

IF (@COD_EC IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND RFA.COD_EC = @COD_EC ');

IF (@COD_AFF IS NOT NULL)
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND A.COD_AFFILIATOR = @COD_AFF ');

IF LEN(@BIN) > 0
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND SUBSTRING(RFA.PAN, 1, 6) = @BIN ');

IF @INITIAL_DATE IS NOT NULL
	AND @FINAL_DATE IS NOT NULL
SET @QUERY_BASIS = CONCAT(@QUERY_BASIS, ' AND CAST(RFA.TRANSACTION_DATE AS DATETIME) BETWEEN CAST(@INITIAL_DATE AS DATETIME) AND CAST(@FINAL_DATE AS DATETIME) ');

END

EXEC [sp_executesql] @QUERY_BASIS
					,N'                                                         
        @ACTIVE INT,                                      
        @INITIAL_DATE DATETIME,                                                 
        @FINAL_DATE DATETIME,      
  @COD_AFF INT,                    
  @COD_EC INT,                    
  @NSU VARCHAR(100),                    
  @BIN VARCHAR(20)          
        '
					,@ACTIVE = @ACTIVE
					,@INITIAL_DATE = @INITIAL_DATE
					,@FINAL_DATE = @FINAL_DATE
					,@COD_AFF = @COD_AFF
					,@COD_EC = @COD_EC
					,@NSU = @NSU
					,@BIN = @BIN
END

GO

IF OBJECT_ID('SP_RISK_FRAUD_UPDATE_TRAN') IS NOT NULL DROP PROCEDURE SP_RISK_FRAUD_UPDATE_TRAN
GO
CREATE PROCEDURE SP_RISK_FRAUD_UPDATE_TRAN  
(  
    @COD_FRAUD_ALERT INT,  
    @COD_USER INT,  
    @COMMENT VARCHAR(256),  
 @ACTION VARCHAR(50) -- ACTIONS: BLOCK, CANCEL  
) AS BEGIN
  
  
    DECLARE @SITUATIONS TABLE ( SITNAME VARCHAR(100) NULL, COD_SIT INT NULL );
  
    DECLARE @COD_TRAN INT, @CODE_TRAN VARCHAR(200), @NEW_SITUATION VARCHAR(100);

SELECT
	@COD_TRAN = RFA.COD_TRAN
   ,@CODE_TRAN = RFA.CODE
FROM RISK_FRAUD_ALERT RFA
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT;

INSERT INTO @SITUATIONS (SITNAME, COD_SIT)
	SELECT DISTINCT
		S.[NAME]
	   ,S.COD_SITUATION
	FROM TRANSACTION_TITLES TT
	JOIN SITUATION S
		ON TT.COD_SITUATION = S.COD_SITUATION
	WHERE TT.COD_TRAN = @COD_TRAN;

IF (@ACTION = 'CANCEL'
	AND (SELECT
			COUNT(*)
		FROM @SITUATIONS S
		WHERE S.SITNAME = 'PAID')
	> 0)
BEGIN
SET @NEW_SITUATION = 'CANCELED PARTIAL'
  
    END   
 ELSE   
 IF (@ACTION = 'CANCEL' AND ( SELECT
		COUNT(*)
	FROM @SITUATIONS S
	WHERE S.SITNAME = 'AWAITING PAYMENT')
> 0)
BEGIN
SET @NEW_SITUATION = 'CANCELED'
  
    END  
 ELSE  
 IF (@ACTION = 'BLOCK' AND ( SELECT
		COUNT(*)
	FROM @SITUATIONS S
	WHERE S.SITNAME != 'AWAITING PAYMENT')
= 0)
BEGIN
SET @NEW_SITUATION = 'BLOCKED'
  
 END
  
  
    IF @NEW_SITUATION IS NOT NULL BEGIN

EXEC SP_UP_TRANSACTION @CODE_TRAN = @CODE_TRAN
					  ,@SITUATION = @NEW_SITUATION
					  ,@DESCRIPTION = @COMMENT
					  ,@CURRENCY = '786'
					  ,@COD_USER = @COD_USER

UPDATE RISK_FRAUD_ALERT
SET ACTIVE = 0
   ,COD_USER = @COD_USER
   ,COMMENT = @COMMENT
   ,[ACTION] = @NEW_SITUATION
WHERE COD_FRAUD_ALERT = @COD_FRAUD_ALERT

END

END