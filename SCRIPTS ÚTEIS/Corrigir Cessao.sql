DECLARE @QTD INT;
DECLARE @CODE INT;
DECLARE @STATUS_PROCESSED INT;

DECLARE @DUPLICATED_TIDS AS CURSOR;

SET @DUPLICATED_TIDS = CURSOR FOR SELECT
	COUNT(*)
   ,CODE
   ,STATUS_PROCESSED
FROM PROCESS_BG_STATUS
WHERE COD_SOURCE_PROCESS = 3
AND STATUS_PROCESSED = 0
GROUP BY CODE
		,STATUS_PROCESSED
HAVING COUNT(*) > 1;

OPEN @DUPLICATED_TIDS;

FETCH NEXT FROM @DUPLICATED_TIDS INTO @QTD, @CODE, @STATUS_PROCESSED;

WHILE @@fetch_status = 0
BEGIN
UPDATE TOP (@QTD - 1) PROCESS_BG_STATUS
SET STATUS_PROCESSED = 1
WHERE CODE = @CODE
AND STATUS_PROCESSED = @STATUS_PROCESSED;
FETCH NEXT FROM @DUPLICATED_TIDS INTO @QTD, @CODE, @STATUS_PROCESSED;
END;

GO

ALTER PROCEDURE SP_VAL_POSWEB_TRANSACTION       
(      
 @COD_EC_ORIGIN INT,          
 @VALUE_EC_ORIGIN DECIMAL(22,8),          
 @COD_EC_DESTINY INT,          
 @VALUE_EC_DESTINY DECIMAL(22,8),          
 @BRAND VARCHAR(100),    
 @PLOT INT,    
 @AMOUNT_TRAN DECIMAL(22,8)    
)      
AS      
BEGIN
  
    
DECLARE @EC INT;
  
      
        
DECLARE @EC_SOURCE_COD INT
  
    
DECLARE @AFF_SOURCE_COD INT;
  
    
       
DECLARE @EC_SOURCE VARCHAR(100);
  
    
DECLARE @COD_BRAND INT;
  
    
DECLARE @QTY_PLOT INT;
  
    
DECLARE @SOURCE_TRAN INT;
  
    
DECLARE @TYPE_TRAN INT;
  
    
DECLARE @AFFILIATOR VARCHAR(100);
  
    
DECLARE @AMOUNT_TR DECIMAL(22,6);
  
    
DECLARE @AMOUNT_SPLIT DECIMAL(22,6);
  
    
       
--DECLARE @RET TRANSACTION_DATA;      
DECLARE @AFF_DATA TR_AFF_COST_DATA;
  
    
DECLARE @QTY INT=0;
  
    
DECLARE @COD_TRAN INT;
  
    
       
DECLARE @COD_SITUATION INT;
  
    
DECLARE @CODASS_EQUIP INT
  
    
       
DECLARE @TRAN_DATE DATETIME
  
    
       
DECLARE @TX_ACQ DECIMAL(22,6);
  
    
      
DECLARE @INTERVAL_ACQ INT;
  
    
       
DECLARE @CONT INT = 0;
  
    
       
DECLARE @CODE_EC VARCHAR(100);
  
DECLARE @QTY_ECS INT;
SELECT
	@EC = COD_EC
FROM ASS_DEPTO_EQUIP
INNER JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
INNER JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
INNER JOIN EQUIPMENT
	ON EQUIPMENT.COD_EQUIP = ASS_DEPTO_EQUIP.COD_EQUIP
WHERE ASS_DEPTO_EQUIP.COD_EQUIP = @COD_EC_ORIGIN
AND ASS_DEPTO_EQUIP.ACTIVE = 1;

IF @EC = @COD_EC_DESTINY
SET @QTY_ECS = 1  
ELSE
SET @QTY_ECS = 2

SELECT
	@EC_SOURCE_COD = EC_ORIGIN.COD_EC
   ,@EC_SOURCE = EC_ORIGIN.CPF_CNPJ
   ,@AFFILIATOR = AFFILIATOR.CPF_CNPJ
   ,@AFF_SOURCE_COD = AFFILIATOR.COD_AFFILIATOR
   ,@COD_BRAND = BRAND.COD_BRAND
   ,@TX_ACQ = ASS_TR_TYPE_COMP.TAX_VALUE
   ,@INTERVAL_ACQ = ASS_TR_TYPE_COMP.INTERVAL
   ,@CODE_EC = EC_ORIGIN.CODE
FROM ASS_DEPTO_EQUIP WITH (NOLOCK)
JOIN DEPARTMENTS_BRANCH
	ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
JOIN BRANCH_EC
	ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
JOIN COMMERCIAL_ESTABLISHMENT EC_ORIGIN
	ON EC_ORIGIN.COD_EC = BRANCH_EC.COD_EC
JOIN BRAND
	ON BRAND.NAME = @BRAND
INNER JOIN ASS_TR_TYPE_COMP
	ON BRAND.COD_BRAND = ASS_TR_TYPE_COMP.COD_BRAND
		AND COD_SOURCE_TRAN = 1
		AND @PLOT BETWEEN PLOT_INI AND PLOT_END
JOIN AFFILIATOR
	ON AFFILIATOR.COD_AFFILIATOR = EC_ORIGIN.COD_AFFILIATOR
WHERE ASS_DEPTO_EQUIP.COD_ASS_DEPTO_TERMINAL = @COD_EC_ORIGIN
AND ASS_DEPTO_EQUIP.ACTIVE = 1;

WITH CTE
AS
(SELECT
		EC_ORIGIN.COD_EC
	   ,EC_ORIGIN.CPF_CNPJ AS CPF_ORIGIN
	   ,AFFILIATOR.CPF_CNPJ
	   ,AFFILIATOR.COD_AFFILIATOR
	   ,BRAND.COD_BRAND
	   ,ASS_TAX_DEPART.PARCENTAGE
	   ,ASS_TAX_DEPART.INTERVAL
	   ,EC_ORIGIN.CODE
	   ,EC_ORIGIN.ACTIVE
	FROM ASS_DEPTO_EQUIP WITH (NOLOCK)
	JOIN DEPARTMENTS_BRANCH
		ON DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_DEPTO_EQUIP.COD_DEPTO_BRANCH
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT EC_ORIGIN
		ON EC_ORIGIN.COD_EC = BRANCH_EC.COD_EC
	JOIN BRAND
		ON BRAND.NAME = @BRAND
	INNER JOIN ASS_TAX_DEPART
		ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
		AND COD_SOURCE_TRAN = 1
		AND @PLOT BETWEEN QTY_INI_PLOTS AND QTY_FINAL_PLOTS
		AND DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		AND ASS_TAX_DEPART.ACTIVE = 1
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EC_ORIGIN.COD_AFFILIATOR
	WHERE ASS_DEPTO_EQUIP.COD_EQUIP = @COD_EC_ORIGIN
	AND ASS_DEPTO_EQUIP.ACTIVE = 1
	UNION
	SELECT
		EC_DESTINY.COD_EC
	   ,EC_DESTINY.CPF_CNPJ AS CPF_DESTINY
	   ,AFFILIATOR.CPF_CNPJ
	   ,AFFILIATOR.COD_AFFILIATOR
	   ,BRAND.COD_BRAND
	   ,ASS_TAX_DEPART.PARCENTAGE
	   ,ASS_TAX_DEPART.INTERVAL
	   ,EC_DESTINY.CODE
	   ,EC_DESTINY.ACTIVE
	FROM DEPARTMENTS_BRANCH WITH (NOLOCK)
	JOIN BRANCH_EC
		ON BRANCH_EC.COD_BRANCH = DEPARTMENTS_BRANCH.COD_BRANCH
	JOIN COMMERCIAL_ESTABLISHMENT EC_DESTINY
		ON EC_DESTINY.COD_EC = BRANCH_EC.COD_EC
	JOIN BRAND
		ON BRAND.NAME = @BRAND
	INNER JOIN ASS_TAX_DEPART
		ON BRAND.COD_BRAND = ASS_TAX_DEPART.COD_BRAND
		AND COD_SOURCE_TRAN = 1
		AND @PLOT BETWEEN QTY_INI_PLOTS AND QTY_FINAL_PLOTS
		AND DEPARTMENTS_BRANCH.COD_DEPTO_BRANCH = ASS_TAX_DEPART.COD_DEPTO_BRANCH
		AND ASS_TAX_DEPART.ACTIVE = 1
	JOIN AFFILIATOR
		ON AFFILIATOR.COD_AFFILIATOR = EC_DESTINY.COD_AFFILIATOR
	WHERE EC_DESTINY.COD_EC = @COD_EC_DESTINY)
SELECT
	* INTO #ECS_VALIDATION
FROM CTE;

IF ((@VALUE_EC_ORIGIN + @VALUE_EC_DESTINY) <> @AMOUNT_TRAN)
BEGIN
SELECT
	0 AS 'IS_VALID'
   ,'Valor Total Inválido para Split' AS MESSAGE
   ,'303' AS CODE_ERROR;
END
ELSE
IF (SELECT
			COUNT(*)
		FROM #ECS_VALIDATION
		WHERE ISNULL(ACTIVE, 0) = 0)
	> 0
BEGIN
SELECT
	0 AS 'IS_VALID'
   ,'Um ou mais estabelecimentos estão inativos' AS 'MESSAGE'
   ,'305' AS CODE_ERROR;
END
ELSE
IF (SELECT
			COUNT(DISTINCT COD_EC)
		FROM #ECS_VALIDATION)
	< @QTY_ECS
BEGIN
SELECT
	0 AS 'IS_VALID'
   ,'Um ou mais estabelecimentos não possuem plano para concluir a transação.' AS 'MESSAGE'
   ,'306' AS CODE_ERROR;
END
ELSE
BEGIN
SELECT
	1 AS 'IS_VALID'
   ,'' AS 'MESSAGE'
   ,'' AS CODE_ERROR;

END

END;

GO

ALTER PROCEDURE [dbo].[SP_REG_ASSIGN_FILE]      
/*----------------------------------------------------------------------------------------      
Procedure Name: [SP_REG_ASSIGN_FILE]      
Project.......: TKPP      
------------------------------------------------------------------------------------------      
Author                  VERSION        Date               Description      
------------------------------------------------------------------------------------------      
Luiz Aquino              V1          24/04/2019            CREATED     
Caike Uchôa Almeida      V2          13/09/2019            UPDATE  
------------------------------------------------------------------------------------------*/      
(      
 @ASSIGNMENTS TP_FIN_ASSINGN_DATA READONLY,      
 @COD_USER INT,      
 @FILE_PATH VARCHAR(256),      
 @FILE_NAME VARCHAR(64),      
 @FILE_TYPE INT      
)      
AS      
BEGIN
  
      
    
 BEGIN
  
      
  DECLARE @MODEL_ID INT
SELECT TOP 1
	@MODEL_ID = MODEL.COD_ASSIGN_FILE_MODEL
FROM ASSIGN_FILE_MODEL MODEL
WHERE CODE = @FILE_TYPE

SELECT DISTINCT
	a.EXTERNAL_NSU
   ,a.INSTALLMENT
   ,a.RETAINED_AMOUNT
   ,a.GROSS_AMOUNT
   ,a.NET_AMOUNT
   ,a.ADVANCED_NET_AMOUNT
   ,a.ANTECIPATED_TO
   ,report.PREVISION_RECEIVE_DATE
   ,report.COD_TRAN INTO #Titles
FROM @ASSIGNMENTS a
JOIN REPORT_CONSOLIDATED_TRANS_SUB report
	ON report.EXTERNALNSU = dbo.LPAD(a.EXTERNAL_NSU, 12, 0)
		AND report.ORDER_CODE = a.ORDER_CODE
		AND report.PLOT = a.[INSTALLMENT]

--DECLARE @COD_TITLE INT  

--SELECT  
-- @COD_TITLE = TRANSACTION_TITLES.COD_TITLE  
--FROM TRANSACTION_TITLES WITH (NOLOCK)  
--JOIN #Titles report  
-- ON report.COD_TRAN = TRANSACTION_TITLES.COD_TRAN  
--  AND report.INSTALLMENT = TRANSACTION_TITLES.PLOT

--Atribue arquivo  
INSERT INTO ASSIGN_FILE ([COD_ASSIGN_FILE_MODEL], [FILENAME], [PATH], [COD_USER])
	VALUES (@MODEL_ID, @FILE_NAME, @FILE_PATH, @COD_USER)

DECLARE @FILE_ID INT = @@identity

-- Atribue título do arquivo  
INSERT INTO ASSIGN_FILE_TITLE ([COD_ASSIGN_FILE], COD_TITLE, ADVANCED_NET_AMOUNT, RETAINED_AMOUNT, NET_AMOUNT, GROSS_AMOUNT, ADVANCE_DATE, COD_USER, [ORIGINAL_DATE])
	SELECT
		@FILE_ID
	   ,TRANSACTION_TITLES.COD_TITLE
	   ,title.ADVANCED_NET_AMOUNT
	   ,title.RETAINED_AMOUNT
	   ,title.NET_AMOUNT
	   ,title.GROSS_AMOUNT
	   ,title.ANTECIPATED_TO
	   ,@COD_USER
	   ,title.PREVISION_RECEIVE_DATE
	FROM #Titles title
	JOIN TRANSACTION_TITLES WITH (NOLOCK)
		ON TRANSACTION_TITLES.COD_TRAN = title.COD_TRAN
			AND TRANSACTION_TITLES.PLOT = title.INSTALLMENT

--Altera os títulos do arquivo para cedido  
UPDATE TRANSACTION_TITLES
SET [ASSIGNED] = 1
   ,[PREVISION_RECEIVE_DATE] = line.ANTECIPATED_TO
FROM TRANSACTION_TITLES
JOIN #Titles line
	ON line.COD_TRAN = TRANSACTION_TITLES.COD_TRAN
	AND line.INSTALLMENT = TRANSACTION_TITLES.PLOT

-- Busca o Cod_tran  
SELECT
	COD_TRAN INTO #TranCodes
FROM #Titles line

--deleta todos os títulos da report que estão como cedidos  
DELETE [REPORT_CONSOLIDATED_TRANS_SUB]
	FROM #Titles line
	JOIN [REPORT_CONSOLIDATED_TRANS_SUB]
		ON REPORT_CONSOLIDATED_TRANS_SUB.COD_TRAN = line.COD_TRAN

--deleta atualiza status = 0 na BG_STATUS   
DELETE FROM [PROCESS_BG_STATUS]
WHERE STATUS_PROCESSED = 0
	AND PROCESS_BG_STATUS.CODE IN (SELECT
			line.COD_TRAN
		FROM #TranCodes line)

INSERT INTO [PROCESS_BG_STATUS] (CODE, COD_TYPE_PROCESS_BG, COD_SOURCE_PROCESS)

	SELECT
		line.COD_TRAN
	   ,1
	   ,3
	FROM #TranCodes line

END

END;

GO

