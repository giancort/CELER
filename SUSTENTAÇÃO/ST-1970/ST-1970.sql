IF OBJECT_ID('SP_VALIDATE_PIX_TRANSACTION') IS NOT NULL
	DROP PROCEDURE SP_VALIDATE_PIX_TRANSACTION
GO
CREATE PROCEDURE [dbo].[SP_VALIDATE_PIX_TRANSACTION]
/*----------------------------------------------------------------------------------------              
  Author        VERSION     Date      Description              
------------------------------------------------------------------------------------------              
  Luiz Aquino   V1        2020-10-14   Created           
------------------------------------------------------------------------------------------*/ (@TERMINALID INT,
@AMOUNT DECIMAL(22, 6),
@PAN VARCHAR(100),/*-- ENVIAR ENDTOENDID --*/
@TRCODE VARCHAR(200),
@TERMINALDATE DATETIME,
@HOLDER_NAME VARCHAR(100) = NULL,
@HOLDER_DOC VARCHAR(100) = NULL)
AS

BEGIN




	DECLARE @CODTX INT;



	DECLARE @CODPLAN INT;



	DECLARE @INTERVAL INT;



	DECLARE @TERMINALACTIVE INT;



	DECLARE @CODEC INT;



	DECLARE @CODASS INT;



	DECLARE @COD_ASS_TR_COMP INT;



	DECLARE @COMPANY INT;



	DECLARE @BRANCH INT = 0;



	DECLARE @TYPETRAN INT;



	DECLARE @ACTIVE_EC INT;



	DECLARE @COD_COMP INT;



	DECLARE @LIMIT DECIMAL(22, 6);



	DECLARE @COD_AFFILIATOR INT;



	DECLARE @PLAN_AFF INT;



	DECLARE @CODTR_RETURN INT;



	DECLARE @EC_TRANS INT;



	DECLARE @GEN_TITLES INT;



	DECLARE @COD_RISK_SITUATION INT;



	DECLARE @COD_BRAND INT;



	DECLARE @COD_TTYPE INT;



	DECLARE @QTY_PLOTS INT = 1;



	DECLARE @BRAND VARCHAR(65)



	DECLARE @TYPE VARCHAR(100)



	DECLARE @COD_AC INT;



	DECLARE @CODPROD_ACQ INT;

	SELECT
		@COD_BRAND = COD_BRAND
	   ,@COD_TTYPE = B.COD_TTYPE
	   ,@BRAND = B.NAME
	   ,@TYPE = TT.NAME
	FROM BRAND B (NOLOCK)
	JOIN TRANSACTION_TYPE(NOLOCK) TT
		ON B.COD_TTYPE = TT.COD_TTYPE
	WHERE B.NAME = 'PIX'

	SELECT
		@COD_AC = COD_AC
	FROM ACQUIRER
	WHERE CODE = 'PIX'

	SELECT TOP 1
		@CODTX = [ATD].[COD_ASS_TX_DEP]
	   ,@CODPLAN = [ATD].[COD_ASS_TX_DEP]
	   ,@INTERVAL = [ATD].[INTERVAL]
	   ,@TERMINALACTIVE = [E].[ACTIVE]
	   ,@CODEC = [CE].[COD_EC]
	   ,@CODASS = [ADE].[COD_ASS_DEPTO_TERMINAL]
	   ,@COMPANY = [CE].[COD_COMP]
	   ,@TYPETRAN = [ATD].[COD_TTYPE]
	   ,@ACTIVE_EC = [CE].[ACTIVE]
	   ,@BRANCH = [BE].[COD_BRANCH]
	   ,@COD_COMP = [CE].[COD_COMP]
	   ,@LIMIT = [CE].[TRANSACTION_LIMIT]
	   ,@COD_AFFILIATOR = [CE].[COD_AFFILIATOR]
	   ,@GEN_TITLES = [B].[GEN_TITLES]
	   ,@COD_RISK_SITUATION = CE.COD_RISK_SITUATION
	FROM [ASS_DEPTO_EQUIP] ADE
	LEFT JOIN [EQUIPMENT](NOLOCK) E
		ON [E].[COD_EQUIP] = [ADE].[COD_EQUIP]
	LEFT JOIN [DEPARTMENTS_BRANCH](NOLOCK) DB
		ON [DB].[COD_DEPTO_BRANCH] = [ADE].[COD_DEPTO_BRANCH]
	LEFT JOIN [BRANCH_EC](NOLOCK) BE
		ON [BE].[COD_BRANCH] = [DB].[COD_BRANCH]
	LEFT JOIN [COMMERCIAL_ESTABLISHMENT](NOLOCK) CE
		ON [CE].[COD_EC] = [BE].[COD_EC]
	LEFT JOIN [ASS_TAX_DEPART](NOLOCK) ATD
		ON [ATD].[ACTIVE] = 1
			AND [ATD].[COD_DEPTO_BRANCH] = [DB].[COD_DEPTO_BRANCH]
			AND [ATD].[COD_SOURCE_TRAN] = 2
			AND [ATD].[QTY_INI_PLOTS] <= @QTY_PLOTS
			AND [ATD].[QTY_FINAL_PLOTS] >= @QTY_PLOTS
			AND [ATD].COD_TTYPE = @COD_TTYPE
			AND [ATD].COD_BRAND = @COD_BRAND
			AND ([ATD].COD_MODEL IS NULL
				OR [ATD].COD_MODEL = [E].COD_MODEL)
	LEFT JOIN [BRAND](NOLOCK) B
		ON [B].[COD_BRAND] = [ATD].[COD_BRAND]
			AND [B].[COD_TTYPE] = [ATD].[COD_TTYPE]
			AND B.COD_BRAND = @COD_BRAND
	WHERE [ADE].[COD_EQUIP] = @TERMINALID
	AND [ADE].[ACTIVE] = 1;

	SELECT
		@TYPETRAN
	   ,@COMPANY
	   ,@QTY_PLOTS
	   ,@BRAND;

	SET @EC_TRANS = @CODEC




	DECLARE @ERROR_MSG VARCHAR(100) = NULL
		   ,@ERROR_CODE VARCHAR(16)




	IF @ERROR_MSG IS NULL
		AND @AMOUNT > @LIMIT
	BEGIN
		SET @ERROR_MSG = '402 - Transaction limit value exceeded"d';
		SET @ERROR_CODE = '402';



	END




	IF @ERROR_MSG IS NULL
		AND @CODTX IS NULL
	BEGIN
		SET @ERROR_MSG = '404 - PLAN/TAX NOT FOUND';
		SET @ERROR_CODE = '404';



	END




	IF @ERROR_MSG IS NULL
		AND @COD_AFFILIATOR IS NOT NULL
	BEGIN
		SELECT TOP 1
			@PLAN_AFF = [COD_PLAN_TAX_AFF]
		FROM [PLAN_TAX_AFFILIATOR](NOLOCK) PTA
		WHERE [PTA].[ACTIVE] = 1
		AND [PTA].[COD_AFFILIATOR] = @COD_AFFILIATOR
		AND PTA.COD_SOURCE_TRAN = 2
		AND [COD_TTYPE] = @TYPETRAN
		AND COD_BRAND = @COD_BRAND
		AND @QTY_PLOTS BETWEEN [QTY_INI_PLOTS] AND [QTY_FINAL_PLOTS];

		IF @PLAN_AFF IS NULL
		BEGIN
			SET @ERROR_MSG = '404 - PLAN/TAX NOT FOUND TO AFFILIATOR';
			SET @ERROR_CODE = '404';



		END



	END




	IF @ERROR_MSG IS NULL
		AND @TERMINALACTIVE = 0
	BEGIN
		SET @ERROR_MSG = '003 - Blocked terminal';
		SET @ERROR_CODE = '003';



	END




	IF @ERROR_MSG IS NULL
		AND @COD_RISK_SITUATION NOT IN (2, 9)
	BEGIN
		SET @ERROR_MSG = '009 - Blocked commercial establishment';
		SET @ERROR_CODE = '009';



	END

	SELECT
		@COD_ASS_TR_COMP = COD_ASS_TR_COMP
	   ,@CODPROD_ACQ = PA.COD_PR_ACQ
	FROM ASS_TR_TYPE_COMP ATTC
	LEFT JOIN PRODUCTS_ACQUIRER PA
		ON PA.COD_AC = ATTC.COD_AC
			AND PA.COD_BRAND = ATTC.COD_BRAND
			AND PA.COD_TTYPE = ATTC.COD_TTYPE
	WHERE ATTC.COD_AC = @COD_AC
	AND ATTC.COD_TTYPE = @COD_TTYPE
	AND ATTC.COD_BRAND = @COD_BRAND
	AND @QTY_PLOTS BETWEEN ATTC.PLOT_INI AND ATTC.PLOT_END
	AND ATTC.COD_SOURCE_TRAN = 2

	IF @ERROR_MSG IS NULL
		AND @COD_ASS_TR_COMP = 0
	BEGIN
		SET @ERROR_MSG = '004 - Acquirer key not found for terminal';
		SET @ERROR_CODE = '004';



	END




	IF @ERROR_MSG IS NOT NULL
	BEGIN
		EXEC [SP_REG_TRANSACTION_DENIED] @AMOUNT = @AMOUNT
										,@PAN = @PAN
										,@BRAND = @BRAND
										,@CODASS_DEPTO_TERMINAL = @CODASS
										,@COD_TTYPE = @TYPETRAN
										,@PLOTS = @QTY_PLOTS
										,@CODTAX_ASS = @CODTX
										,@CODAC = @COD_ASS_TR_COMP
										,@CODETR = @TRCODE
										,@COMMENT = @ERROR_MSG
										,@TERMINALDATE = @TERMINALDATE
										,@TYPE = @TYPE
										,@COD_COMP = @COD_COMP
										,@COD_AFFILIATOR = @COD_AFFILIATOR
										,@SOURCE_TRAN = 2
										,@COD_EC = @EC_TRANS
										,@HOLDER_NAME = @HOLDER_NAME
										,@HOLDER_DOC = @HOLDER_DOC;
		THROW 60002, @ERROR_CODE, 1;
	END

	IF @ERROR_MSG IS NULL
	BEGIN
		EXECUTE [SP_REG_TRANSACTION] @AMOUNT
									,@PAN
									,@BRAND
									,@CODASS_DEPTO_TERMINAL = @CODASS
									,@COD_TTYPE = @TYPETRAN
									,@PLOTS = @QTY_PLOTS
									,@CODTAX_ASS = @CODTX
									,@CODAC = @COD_ASS_TR_COMP
									,@CODETR = @TRCODE
									,@TERMINALDATE = @TERMINALDATE
									,@COD_ASS_TR_ACQ = @COD_ASS_TR_COMP
									,@CODPROD_ACQ = @CODPROD_ACQ
									,@TYPE = @TYPE
									,@COD_COMP = @COD_COMP
									,@COD_AFFILIATOR = @COD_AFFILIATOR
									,@SOURCE_TRAN = 2
									,@CODE_SPLIT = NULL
									,@EC_TRANS = @EC_TRANS
									,@RET_CODTRAN = @CODTR_RETURN OUTPUT
									,@HOLDER_NAME = @HOLDER_NAME
									,@HOLDER_DOC = @HOLDER_DOC

		DECLARE @COD_PIX_SERVICE INT
			   ,@TAX_PIX_PERCENT DECIMAL(22, 6)
			   ,@TAX_PIX_DECIMAL DECIMAL(22, 6)
			   ,@TAX_PIX DECIMAL(22, 6)
			   ,@AFF_TAX_PIX_PERCENT DECIMAL(22, 6)
			   ,@AFF_TAX_PIX_DECIMAL DECIMAL(22, 6)
			   ,@AFF_TAX_PIX DECIMAL(22, 6);

		SELECT TOP 1
			@COD_PIX_SERVICE = COD_ITEM_SERVICE
		FROM ITEMS_SERVICES_AVAILABLE
		WHERE NAME = 'PIX'

		SELECT
			@TAX_PIX_PERCENT = CAST(JSON_VALUE(CONFIG_JSON, '$.PixTaxPercent') AS DECIMAL(4, 2))
		   ,@TAX_PIX_DECIMAL = ISNULL(CAST(JSON_VALUE(CONFIG_JSON, '$.PixTaxDecimal') AS DECIMAL(4, 2)), 0)
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_ITEM_SERVICE = @COD_PIX_SERVICE
		AND COD_EC = @CODEC

		SELECT
			@AFF_TAX_PIX_PERCENT = CAST(JSON_VALUE(CONFIG_JSON, '$.PixTaxPercent') AS DECIMAL(4, 2))
		   ,@AFF_TAX_PIX_DECIMAL = ISNULL(CAST(JSON_VALUE(CONFIG_JSON, '$.PixTaxDecimal') AS DECIMAL(4, 2)), 0)
		FROM SERVICES_AVAILABLE
		WHERE ACTIVE = 1
		AND COD_ITEM_SERVICE = @COD_PIX_SERVICE
		AND COD_AFFILIATOR = @COD_AFFILIATOR
		AND COD_EC IS NULL


		IF (ISNULL(@TAX_PIX_DECIMAL, 0) > @AMOUNT
			AND @TAX_PIX_PERCENT > 0)
			SET @TAX_PIX = @TAX_PIX_PERCENT
		ELSE
			SET @TAX_PIX = @TAX_PIX_DECIMAL

		IF (ISNULL(@AFF_TAX_PIX_DECIMAL, 0) > @AMOUNT
			AND @AFF_TAX_PIX_PERCENT > 0)
			SET @AFF_TAX_PIX = @AFF_TAX_PIX_PERCENT
		ELSE
			SET @AFF_TAX_PIX = @AFF_TAX_PIX_DECIMAL


		INSERT INTO TRANSACTION_SERVICES (COD_ITEM_SERVICE, COD_TRAN, MODIFY_DATE, COD_EC, SERVICE_TAX, TAX_TYPE, SERVICE_TAX_AFF, TAX_TYPE_AFF)
			VALUES (@COD_PIX_SERVICE, @CODTR_RETURN, GETDATE(), @CODEC, @TAX_PIX, IIF(@TAX_PIX_DECIMAL > @AMOUNT, '%', 'R$'), @AFF_TAX_PIX, IIF(@AFF_TAX_PIX_DECIMAL > @AMOUNT, '%', 'R$'))

		DECLARE @DATA_EXT [TP_DATA_EXT_TRAN]

		INSERT INTO @DATA_EXT (NAME, VALUE, NSU_EXT)
			VALUES ('NSU', @TRCODE, @TRCODE);
		INSERT INTO @DATA_EXT (NAME, VALUE, NSU_EXT)
			VALUES ('AUTHCODE', @TRCODE, @TRCODE);

		EXEC SP_REG_DATA_EXT_TR @TP_DATA_EXT = @DATA_EXT
							   ,@CODTR = @CODTR_RETURN
							   ,@COD_TRAN = @CODTR_RETURN;

		SELECT
			@COD_ASS_TR_COMP AS [ACQUIRER]
		   ,@TRCODE AS [TRAN_CODE]
		   ,@CODTR_RETURN AS [COD_TRAN];
	END
END

GO

